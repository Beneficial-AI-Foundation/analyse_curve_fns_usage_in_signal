digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar][`From<u64>`]from()." [label="from", tooltip="    fn from(x: u64) -> Scalar {         let mut s_bytes = [0u8; 32];         let x_bytes = x.to_le_bytes();         s_bytes[0..x_bytes.len()].copy_from_slice(&x_bytes);         Scalar { bytes: s_bytes...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "usernames.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." [label="Username_Hash", tooltip="pub fn Username_Hash(username: String) -> Result<[u8; 32], UsernameError> {     Username::new(&username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." [label="Username_HashFromParts", tooltip="pub fn Username_HashFromParts(     nickname: String,     discriminator: String,     min_len: u32,     max_len: u32, ) -> Result<[u8; 32], UsernameError> {     let limits = NicknameLimits::new(min_len ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." [label="Username_Proof", tooltip="pub fn Username_Proof(username: String, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(&username)?.proof(randomness) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_2 {
    label = "account_data.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/impl#[`AccountData<Store>`]from_proto_test_data()." [label="from_proto_test_data", tooltip="        pub(crate) fn from_proto_test_data() -> Self {             Self {                 profile_key: FAKE_PROFILE_KEY,                 username: Some(UsernameData {                     username: Use...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom<(String, Option<proto::account_data::UsernameLink>)>`]try_from()." [label="try_from", tooltip="    fn try_from(         (username, username_link): (String, Option<proto::account_data::UsernameLink>),     ) -> Result<Self, Self::Error> {         let username = Username::new(&username)?;         ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_3 {
    label = "recipient.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith<ContactData, C>`]try_into_with()." [label="try_into_with", tooltip="    fn try_into_with(self, context: &C) -> Result<ContactData, Self::Error> {         let Self {             aci,             pni,             profileKey,             username,             e164,      ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_4 {
    label = "fetch_profile_key_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." [label="main", tooltip="async fn main() -> anyhow::Result<()> {     env_logger::builder()         .filter_module(module_path!(), log::LevelFilter::Info)         .parse_default_env()         .init();      let Config {        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_5 {
    label = "usernames_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [label="bench_usernames", tooltip="fn bench_usernames(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();     let usernames =         Username::candidates_from(&mut rng, ' signal' , NicknameLimits::default()).unwrap();      let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_hash()." [label="username_hash", tooltip="pub fn username_hash(username: &str) -> Result<[u8; 32], UsernameError> {     Username::new(username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_proof()." [label="username_proof", tooltip="pub fn username_proof(username: &str, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(username)?.proof(randomness) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "username.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username/test/no_discriminator()." [label="no_discriminator", tooltip="    fn no_discriminator() {         assert_eq!(             Username::new(' no_discriminator' ).expect_err(' not a valid username' ),             UsernameError::MissingSeparator         );     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits()." [label="nicknames_exceeding_soft_limits", tooltip="    fn nicknames_exceeding_soft_limits() {         Username::from_parts(' abcd' , ' 42' , NicknameLimits::default()).expect(' valid' );         assert_eq!(             Username::from_parts(' abcd' , '...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/invalid_discriminators()." [label="invalid_discriminators", tooltip="    fn invalid_discriminators() {         for (discriminator, expected_error) in [             (' ' , UsernameError::DiscriminatorCannotBeEmpty),             (' 0' , UsernameError::DiscriminatorCannot...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [label="from_parts", tooltip="    pub fn from_parts(         nickname: &str,         discriminator: &str,         limits: NicknameLimits,     ) -> Result<Self, UsernameError> {         // This should perform the same set of checks...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [label="new", tooltip="    pub fn new(s: &str) -> Result<Self, UsernameError> {         let (nickname, discriminator) =             s.rsplit_once('.').ok_or(UsernameError::MissingSeparator)?;         Self::from_parts_withou...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/discriminator_scalar_is_defined_on_range()." [label="discriminator_scalar_is_defined_on_range", tooltip="    fn discriminator_scalar_is_defined_on_range() {         proptest!(|(n in 1..DISCRIMINATOR_MAX)| {             discriminator_scalar(n).unwrap();         });     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." [label="valid_usernames_proof_and_verify", tooltip="    fn valid_usernames_proof_and_verify() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             let username = Username::new(&Username::format_parts...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." [label="from_parts_without_soft_limit", tooltip="    fn from_parts_without_soft_limit(         nickname: &str,         discriminator: &str,     ) -> Result<Self, UsernameError> {         validate_prefix(nickname)?;         let discriminator = valida...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/discriminator_scalar()." [label="discriminator_scalar", tooltip="fn discriminator_scalar(discriminator: u64) -> Result<Scalar, UsernameError> {     Ok(Scalar::from(discriminator)) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." [label="valid_usernames", tooltip="    fn valid_usernames() {         for username in [' He110.01' , ' usr.999999999' , ' _identifier.42' , ' LOUD.700' ] {             let parsed = Username::new(username).unwrap();             _ = pars...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." [label="many_random_makes_valid_usernames", tooltip="    fn many_random_makes_valid_usernames() {         let mut rng = rand::rng();         let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap());         let nickname = ' _SiGNA1' ;      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/invalid_nicknames()." [label="invalid_nicknames", tooltip="    fn invalid_nicknames() {         for (nickname, expected_error) in [             (' ' , UsernameError::NicknameCannotBeEmpty),             (' abðŸ¦€d' , UsernameError::BadNicknameCharacter),      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." [label="make_scalars", tooltip="fn make_scalars(nickname: &str, discriminator: u64) -> Result<Vec<Scalar>, UsernameError> {     Ok(vec![         username_sha_scalar(nickname, discriminator)?,         nickname_scalar(nickname)?,     ...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo usernames 0.1.0 username/test/no_discriminator()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_discriminators()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_discriminators()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith<ContactData, C>`]try_into_with()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/discriminator_scalar_is_defined_on_range()." -> "rust-analyzer cargo usernames 0.1.0 username/discriminator_scalar()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." -> "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/discriminator_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar][`From<u64>`]from()." [color=blue]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/impl#[`AccountData<Store>`]from_proto_test_data()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom<(String, Option<proto::account_data::UsernameLink>)>`]try_from()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_nicknames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_nicknames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." -> "rust-analyzer cargo usernames 0.1.0 username/discriminator_scalar()." [color=blue, style=dashed]
}
