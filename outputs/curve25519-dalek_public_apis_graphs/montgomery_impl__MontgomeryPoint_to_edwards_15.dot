digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "montgomery.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." [label="to_edwards", tooltip="    pub fn to_edwards(&self, sign: u8) -> Option<EdwardsPoint> {         // To decompress the Montgomery u coordinate to an         // `EdwardsPoint`, we apply the birational map to obtain the        ...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "protocol.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." [label="SessionBuilder_ProcessPreKeyBundle", tooltip="async fn SessionBuilder_ProcessPreKeyBundle(     bundle: &PreKeyBundle,     protocol_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_key_store: &mut dyn IdentityKeySt...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SealedSender_DecryptMessage()." [label="SealedSender_DecryptMessage", tooltip="async fn SealedSender_DecryptMessage(     message: &[u8],     trust_root: &PublicKey,     timestamp: Timestamp,     local_e164: Option<String>,     local_uuid: String,     local_device_id: u32,     se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." [label="IdentityKey_VerifyAlternateIdentity", tooltip="fn IdentityKey_VerifyAlternateIdentity(     public_key: &PublicKey,     other_identity: &PublicKey,     signature: &[u8], ) -> Result<bool> {     let identity = IdentityKey::new(*public_key);     let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." [label="ECPublicKey_Verify", tooltip="fn ECPublicKey_Verify(key: &PublicKey, message: &[u8], signature: &[u8]) -> bool {     key.verify_signature(message, signature) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_DecryptMessage()." [label="GroupCipher_DecryptMessage", tooltip="async fn GroupCipher_DecryptMessage(     sender: &ProtocolAddress,     message: &[u8],     store: &mut dyn SenderKeyStore, ) -> Result<Vec<u8>> {     group_decrypt(message, store, sender).await }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." [label="SenderCertificate_Validate", tooltip="fn SenderCertificate_Validate(     cert: &SenderCertificate,     key: &PublicKey,     time: Timestamp, ) -> Result<bool> {     cert.validate(key, time) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." [label="SenderKeyMessage_VerifySignature", tooltip="fn SenderKeyMessage_VerifySignature(skm: &SenderKeyMessage, pubkey: &PublicKey) -> Result<bool> {     skm.verify_signature(pubkey) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_2 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 signatures()." [label="signatures", tooltip="pub fn signatures(c: &mut Criterion) {     let rng = &mut rng();     let alice_key = KeyPair::generate(rng);     let mut some_data = [0; 1024];     rng.fill(&mut some_data);      c.bench_function(' ge...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, generation, key_agreement, signatures);  criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_3 {
    label = "ed_to_xed.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 main()." [label="main", tooltip="fn main() {     let mut input = vec![];     std::io::stdin()         .read_to_end(&mut input)         .expect(' can read input' );     let key = boring::pkey::PKey::public_key_from_pem(&input).expect(...", fillcolor=white, style="filled"]
  }
  subgraph cluster_4 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." [label="test_large_signatures", tooltip="    fn test_large_signatures() -> Result<(), CurveError> {         let mut csprng = OsRng.unwrap_err();         let key_pair = KeyPair::generate(&mut csprng);         let mut message = [0u8; 1024 * 10...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [label="verify_signature_for_multipart_message", tooltip="    pub fn verify_signature_for_multipart_message(         &self,         message: &[&[u8]],         signature: &[u8],     ) -> bool {         match &self.key {             PublicKeyData::DjbPublicKey...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, message: &[u8], signature: &[u8]) -> bool {         self.verify_signature_for_multipart_message(&[message], signature)     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_5 {
    label = "curve25519.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [             0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05,             0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." [label="test_random_signatures", tooltip="    fn test_random_signatures() {         let mut csprng = OsRng.unwrap_err();         for _ in 0..50 {             let mut message = [0u8; 64];             csprng.fill_bytes(&mut message);           ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "kem.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_kem); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "ratchet.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." [label="ratchet", tooltip="criterion_group!(ratchet, ratchet_forward);  criterion_main!(ratchet);", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." [label="ratchet_forward_result", tooltip="pub fn ratchet_forward_result(c: &mut Criterion) -> Result<(), SignalProtocolError> {     let mut group = c.benchmark_group(' ratchet' );     group.sampling_mode(SamplingMode::Flat);     group.sample_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." [label="ratchet_forward", tooltip="pub fn ratchet_forward(c: &mut Criterion) {     ratchet_forward_result(c).expect(' success' ); }", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [label="v2", tooltip="pub fn v2(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [label="v1", tooltip="pub fn v1(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [label="session_encrypt_result", tooltip="pub fn session_encrypt_result(c: &mut Criterion) -> Result<(), SignalProtocolError> {     let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?;      let alice_address = ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [label="session_encrypt", tooltip="pub fn session_encrypt(c: &mut Criterion) {     session_encrypt_result(c).expect(' success' ); }", fillcolor=white, style="filled"]
  }
  subgraph cluster_10 {
    label = "group_cipher.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [label="group_decrypt", tooltip="pub async fn group_decrypt(     skm_bytes: &[u8],     sender_key_store: &mut dyn SenderKeyStore,     sender: &ProtocolAddress, ) -> Result<Vec<u8>> {     let skm = SenderKeyMessage::try_from(skm_bytes...", fillcolor=white, style="filled"]
  }
  subgraph cluster_11 {
    label = "identity_key.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [label="verify_alternate_identity", tooltip="    pub fn verify_alternate_identity(&self, other: &IdentityKey, signature: &[u8]) -> Result<bool> {         Ok(self.public_key.verify_signature_for_multipart_message(             &[                 A...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." [label="test_alternate_identity_signing", tooltip="    fn test_alternate_identity_signing() -> Result<()> {         let mut rng = OsRng.unwrap_err();         let primary = IdentityKeyPair::generate(&mut rng);         let secondary = IdentityKeyPair::g...", fillcolor=white, style="filled"]
  }
  subgraph cluster_12 {
    label = "protocol.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, signature_key: &PublicKey) -> Result<bool> {         let valid = signature_key.verify_signature(             &self.serialized[..self.serialized.len() - Self::SIGNATU...", fillcolor=white, style="filled"]
  }
  subgraph cluster_13 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey) -> Result<bool> {         if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&self.key_id()?) {             log::error!(                 ' received serve...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." [label="test_lossless_round_trip", tooltip="fn test_lossless_round_trip() -> Result<()> {     let trust_root = PrivateKey::deserialize(&[0u8; 32])?;      // To test a hypothetical addition of a new field:     //     // Step 1: temporarily add a...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [label="sealed_sender_decrypt", tooltip="pub async fn sealed_sender_decrypt(     ciphertext: &[u8],     trust_root: &PublicKey,     timestamp: Timestamp,     local_e164: Option<String>,     local_uuid: String,     local_device_id: DeviceId, ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey, validation_time: Timestamp) -> Result<bool> {         if !self.signer.validate(trust_root)? {             log::error!(                 ' sender certi...", fillcolor=white, style="filled"]
  }
  subgraph cluster_14 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [label="process_prekey_bundle", tooltip="pub async fn process_prekey_bundle<R: Rng + CryptoRng>(     remote_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_store: &mut dyn IdentityKeyStore,     bundle: &PreK...", fillcolor=white, style="filled"]
  }
  subgraph cluster_15 {
    label = "groups.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." [label="group_basic_encrypt_decrypt", tooltip="fn group_basic_encrypt_decrypt() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +1415999...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." [label="group_too_far_in_the_future", tooltip="fn group_too_far_in_the_future() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +1415999...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." [label="group_no_recv_session", tooltip="fn group_no_recv_session() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err().unwrap_err();          let device_id = DeviceId::new(1).unwrap();         let se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." [label="group_large_messages", tooltip="fn group_large_messages() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." [label="group_sealed_sender", tooltip="fn group_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." [label="group_out_of_order", tooltip="fn group_out_of_order() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .to...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." [label="group_late_join", tooltip="fn group_late_join() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .to_ow...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." [label="group_basic_ratchet", tooltip="fn group_basic_ratchet() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .t...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." [label="group_message_key_limit", tooltip="fn group_message_key_limit() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." [label="group_sealed_sender_multiple_devices", tooltip="fn group_sealed_sender_multiple_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." [label="group_sealed_sender_multiple_devices_and_excluded_recipients", tooltip="fn group_sealed_sender_multiple_devices_and_excluded_recipients() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId:...", fillcolor=white, style="filled"]
  }
  subgraph cluster_16 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." [label="test_decryption_error_in_sealed_sender", tooltip="fn test_decryption_error_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();       ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." [label="test_sender_cert", tooltip="fn test_sender_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." [label="test_sealed_sender", tooltip="fn test_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device_id ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." [label="test_sender_key_in_sealed_sender", tooltip="fn test_sender_key_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." [label="test_revoked_server_cert", tooltip="fn test_revoked_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut r...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." [label="test_server_cert", tooltip="fn test_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." [label="test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = Devi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." [label="test_sealed_sender_multi_recipient_redundant_empty_devices", tooltip="fn test_sealed_sender_multi_recipient_redundant_empty_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::n...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." [label="test_sealed_sender_multi_recipient", tooltip="fn test_sealed_sender_multi_recipient() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         le...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." [label="test_sealed_sender_multi_recipient_encrypt_with_archived_session", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceI...", fillcolor=white, style="filled"]
  }
  subgraph cluster_17 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." [label="test_simultaneous_initiate_with_lossage", tooltip="fn test_simultaneous_initiate_with_lossage() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." [label="test_message_key_limits", tooltip="fn test_message_key_limits() -> TestResult {     run(initialize_sessions_v4()?)?;      fn run(sessions: (SessionRecord, SessionRecord)) -> TestResult {         async {             let (alice_session_r...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." [label="test_unacknowledged_sessions_eventually_expire", tooltip="fn test_unacknowledged_sessions_eventually_expire() -> TestResult {     async {         const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90);          let mut csprng = OsRng.u...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." [label="test_signedprekey_not_saved", tooltip="fn test_signedprekey_not_saved() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice::Next);             build...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." [label="test_optional_one_time_prekey", tooltip="fn test_optional_one_time_prekey() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_signed_pre_key(22.in...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." [label="test_simultaneous_initiate_repeated_messages", tooltip="fn test_simultaneous_initiate_repeated_messages() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoic...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." [label="test_basic_simultaneous_initiate", tooltip="fn test_basic_simultaneous_initiate() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Random)  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." [label="test_basic_prekey", tooltip="fn test_basic_prekey() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice::Next);             builder.add_kyb...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." [label="test_bad_signed_pre_key_signature", tooltip="fn test_bad_signed_pre_key_signature() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let bob_address =             ProtocolAddress::new(' +14151111112' .to_owned(), ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." [label="prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived", tooltip="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." [label="test_simultaneous_initiate_lost_message_repeated_messages", tooltip="fn test_simultaneous_initiate_lost_message_repeated_messages() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdCh...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." [label="test_bad_message_bundle", tooltip="fn test_bad_message_bundle() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(3133.into())      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." [label="test_zero_is_a_valid_prekey_id", tooltip="fn test_zero_is_a_valid_prekey_id() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(), D...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." [label="x3dh_prekey_rejected_as_invalid_message_specifically", tooltip="fn x3dh_prekey_rejected_as_invalid_message_specifically() {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." [label="test_chain_jump_over_limit_with_self", tooltip="fn test_chain_jump_over_limit_with_self() -> TestResult {     let mut store_builder_one = TestStoreBuilder::new();     let mut store_builder_two = TestStoreBuilder::from_store(&store_builder_one.store...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." [label="test_chain_jump_over_limit", tooltip="fn test_chain_jump_over_limit() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(31337.into())  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." [label="test_duplicate_message_error_returned", tooltip="fn test_duplicate_message_error_returned() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." [label="test_pqr_state_and_message_contents_nonempty_if_enabled", tooltip="fn test_pqr_state_and_message_contents_nonempty_if_enabled() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." [label="prekey_message_to_archived_session", tooltip="fn prekey_message_to_archived_session() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_empty_if_disabled()." [label="test_pqr_state_empty_if_disabled", tooltip="fn test_pqr_state_empty_if_disabled() -> TestResult {     run(UsePQRatchet::No, UsePQRatchet::No)?;     run(UsePQRatchet::No, UsePQRatchet::Yes)?;     run(UsePQRatchet::Yes, UsePQRatchet::No)?;      f...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." [label="test_repeat_bundle_message", tooltip="fn test_repeat_bundle_message() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(3133.into())   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." [label="test_longer_sessions", tooltip="fn test_longer_sessions() -> TestResult {     init_logger();     run(         2000,         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [label="run", tooltip="    fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) -> TestResult {         async {             let mut csprng = OsRng.unwrap_err();              let alice_device_id = DeviceId::new(1).unwrap()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." [label="prekey_message_failed_decryption_does_not_update_stores", tooltip="fn prekey_message_failed_decryption_does_not_update_stores() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." [label="test_simultaneous_initiate_lost_message", tooltip="fn test_simultaneous_initiate_lost_message() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Ra...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SealedSender_DecryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_DecryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_empty_if_disabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 benches()." -> "rust-analyzer cargo libsignal-core 0.1.0 signatures()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
}
