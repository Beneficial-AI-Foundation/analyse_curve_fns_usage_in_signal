digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "ristretto.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_1()." [label="step_1", tooltip="    pub(super) fn step_1(repr: &CompressedRistretto) -> (Choice, Choice, FieldElement) {         // Step 1. Check s for validity:         // 1.a) s must be 32 bytes (we get this from the type system) ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [label="decompress", tooltip="    pub fn decompress(&self) -> Option<RistrettoPoint> {         let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self);          if (!s_encoding_is_canonical | s_is_negative).into...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [label="as_bytes", tooltip="    pub const fn as_bytes(&self) -> &[u8; 32] {         &self.0     }", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "usernames.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." [label="Username_Proof", tooltip="pub fn Username_Proof(username: String, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(&username)?.proof(randomness) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." [label="Username_Hash", tooltip="pub fn Username_Hash(username: String) -> Result<[u8; 32], UsernameError> {     Username::new(&username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." [label="Username_HashFromParts", tooltip="pub fn Username_HashFromParts(     nickname: String,     discriminator: String,     min_len: u32,     max_len: u32, ) -> Result<[u8; 32], UsernameError> {     let limits = NicknameLimits::new(min_len ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." [label="Username_Verify", tooltip="pub fn Username_Verify(     proof: &[u8],     hash: &[u8], ) -> Result<(), ::usernames::ProofVerificationFailure> {     if hash.len() != 32 {         return Err(::usernames::ProofVerificationFailure);...", fillcolor=white, style="filled"]
  }
  subgraph cluster_2 {
    label = "zkgroup.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." [label="GroupSendEndorsementsResponse_IssueDeterministic", tooltip="fn GroupSendEndorsementsResponse_IssueDeterministic(     concatenated_group_member_ciphertexts: &[u8],     key_pair: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     assert!(concatenat...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(     response_bytes: &[u8],     concatenated_group_member_ciphertexts: &[u8],     local_user_ciphertext: &[u8],     now: Timestamp,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(     response_bytes: &[u8],     group_members: ServiceIdSequence<'_>,     local_user: ServiceId,     now: Timestamp,     group_params: ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken()." [label="GroupSendEndorsement_ToToken", tooltip="fn GroupSendEndorsement_ToToken(     endorsement: &[u8],     group_params: Serialized<GroupSecretParams>, ) -> Vec<u8> {     let endorsement = zkgroup::deserialize::<GroupSendEndorsement>(endorsement)...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken()." [label="GroupSendEndorsement_CallLinkParams_ToToken", tooltip="fn GroupSendEndorsement_CallLinkParams_ToToken(     endorsement: &[u8],     call_link_secret_params_serialized: &[u8], ) -> Vec<u8> {     let call_link_params =         zkgroup::deserialize::<CallLink...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_Verify()." [label="GroupSendFullToken_Verify", tooltip="fn GroupSendFullToken_Verify(     token: &[u8],     user_ids: ServiceIdSequence<'_>,     now: Timestamp,     key_pair: &[u8], ) -> Result<(), ZkGroupVerificationFailure> {     let token = zkgroup::des...", fillcolor=white, style="filled"]
  }
  subgraph cluster_3 {
    label = "fetch_profile_key_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." [label="main", tooltip="async fn main() -> anyhow::Result<()> {     env_logger::builder()         .filter_module(module_path!(), log::LevelFilter::Info)         .parse_default_env()         .init();      let Config {        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_4 {
    label = "ppss_ops.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." [label="do_restore_fails_with_the_first_error", tooltip="    async fn do_restore_fails_with_the_first_error() {         let result = do_restore::<TestEnv>(NotConnectedResults, b' ' ).await;         assert_matches!(result, Err(crate::svrb::Error::ConnectionT...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [label="do_restore", tooltip="pub async fn do_restore<Env: PpssSetup>(     connect_results: impl IntoConnectionResults,     password: &[u8], ) -> Result<Secret, Error> {     let mut rng = OsRng.unwrap_err();     let ConnectionCont...", fillcolor=white, style="filled"]
  }
  subgraph cluster_5 {
    label = "traits.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." [label="restore", tooltip="    async fn restore(&self, password: &[u8]) -> Result<Secret, Error> {         ppss_ops::do_restore::<T::Env>(self.connect().await, password).await     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [label="restore2", tooltip="        fn restore2(&self, req_bytes: &[u8], handshake_hash: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )             ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." [label="create", tooltip="        fn create(&mut self, req_bytes: &[u8]) {             self.versions.clear();             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [label="to_ristretto_pt", tooltip="fn to_ristretto_pt(b: &[u8]) -> Option<RistrettoPoint> {     CompressedRistretto::from_slice(b).ok()?.decompress() }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." [label="new", tooltip="        fn new(req: &svrb::request4::Create) -> Self {             Self {                 auth_commitment: to_ristretto_pt(&req.auth_commitment)                     .expect(' decode auth_commitment' )...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." [label="restore1", tooltip="        fn restore1(&mut self, req_bytes: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )                 .inner         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." [label="full_create_restore", tooltip="    fn full_create_restore() {         let mut rng = OsRng.unwrap_err();         let server_ids = vec![1u64, 2u64, 3u64];         let mut servers = server_ids             .iter()             .map(|_| ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [label="restore2", tooltip="    pub fn restore2<R: Rng + CryptoRng>(         self,         responses1_bytes: &[Vec<u8>],         handshake_hashes: &[&[u8]],         rng: &mut R,     ) -> Result<Restore2<'a>, Error> {         if ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "usernames_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username_proof()." [label="username_proof", tooltip="pub fn username_proof(username: &str, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(username)?.proof(randomness) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_usernames); criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_hash()." [label="username_hash", tooltip="pub fn username_hash(username: &str) -> Result<[u8; 32], UsernameError> {     Username::new(username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [label="bench_usernames", tooltip="fn bench_usernames(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();     let usernames =         Username::candidates_from(&mut rng, ' signal' , NicknameLimits::default()).unwrap();      let ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "username.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." [label="valid_usernames", tooltip="    fn valid_usernames() {         for username in [' He110.01' , ' usr.999999999' , ' _identifier.42' , ' LOUD.700' ] {             let parsed = Username::new(username).unwrap();             _ = pars...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." [label="valid_usernames_proof_and_verify", tooltip="    fn valid_usernames_proof_and_verify() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             let username = Username::new(&Username::format_parts...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [label="proof", tooltip="    pub fn proof(&self, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {         let hash = Self::hash_from_scalars(&self.scalars);         let scalar_args = Self::make_scalar_args(&self.sca...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [label="hash", tooltip="    pub fn hash(&self) -> [u8; 32] {         *Self::hash_from_scalars(&self.scalars).compress().as_bytes()     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." [label="many_random_makes_valid_usernames", tooltip="    fn many_random_makes_valid_usernames() {         let mut rng = rand::rng();         let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap());         let nickname = ' _SiGNA1' ;      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(proof: &[u8], hash: [u8; 32]) -> Result<(), ProofVerificationFailure> {         let hash_point = CompressedRistretto(hash)             .decompress()             .ok_or(ProofVer...", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [label="endorsement_flow", tooltip="fn endorsement_flow(c: &mut Criterion) {     let mut group = c.benchmark_group(' endorsements' );      let mut input_sho = poksho::ShoSha256::new(b' test' );     let inputs: Vec<RistrettoPoint> = (0.....", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_10 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [label="to_token", tooltip="    pub fn to_token(&self, client_key: &ClientDecryptionKey) -> Box<[u8]> {         let P = self.R * client_key.a_inv;         Self::to_token_raw(P)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         server_public_key: &ServerDerivedPublicKey,     ) -> Result<ReceivedEndorsements, V...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         self.compress().fmt(f)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." [label="default_flow", tooltip="    fn default_flow() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          let client_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         f.debug_struct(' Endorsement' )             .field(' R' , &crate::PrintAsHex(self.R.as_bytes().as_slice()))            ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." [label="default_is_identity", tooltip="    fn default_is_identity() {         assert_eq!(Endorsement::combine([]).R, Endorsement::default().R);          let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." [label="combining_endorsements", tooltip="    fn combining_endorsements() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          l...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()." [label="decompress", tooltip="    pub fn decompress(self) -> Result<Endorsement<RistrettoPoint>, VerificationFailure> {         match self.R.decompress() {             Some(R) => Ok(Endorsement { R }),             None => Err(Veri...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." [label="to_token_raw", tooltip="    fn to_token_raw(unblinded_endorsement: RistrettoPoint) -> Box<[u8]> {         // Skip the Sho for this, we're hashing a single point into a single bitstring. We don't         // need domain separa...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [label="issue", tooltip="    pub fn issue(         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         private_key: &ServerDerivedKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> EndorsementR...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [label="generate_weights_for_proof", tooltip="    fn generate_weights_for_proof(         public_key: &ServerDerivedPublicKey,         E: &[RistrettoPoint],         R: &[CompressedRistretto],     ) -> Vec<Scalar> {         debug_assert_eq!(E.len()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [label="verify", tooltip="    pub fn verify(&self, point: &RistrettoPoint, token: &[u8]) -> Result<(), VerificationFailure> {         let P = self.sk_prime * point;         let expected = Endorsement::to_token_raw(P);         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." [label="round_trip", tooltip="        fn round_trip<T: Serialize + for<'a> Deserialize<'a> + PartialDefault>(             value: &T,             expected_len: usize,         ) {             let bincode_options = bincode::DefaultOp...", fillcolor=white, style="filled"]
  }
  subgraph cluster_11 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 impl#[`PrintAsHex<&curve25519_dalek::ristretto::CompressedRistretto>`][Debug]fmt()." [label="fmt", tooltip="    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {         PrintAsHex(self.0.as_bytes().as_slice()).fmt(f)     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_12 {
    label = "serialization.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_13 {
    label = "zkgroup_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [label="benchmark_group_send_endorsements", tooltip="pub fn benchmark_group_send_endorsements(c: &mut Criterion) {     const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp =         zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023-04-13 00:00:00 U...", fillcolor=white, style="filled"]
  }
  subgraph cluster_14 {
    label = "group_send_endorsement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [label="receive_with_service_ids", tooltip="    pub fn receive_with_service_ids<T>(         self,         user_ids: T,         now: Timestamp,         group_params: &GroupSecretParams,         root_public_key: impl AsRef<zkcredential::endorseme...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [label="receive_with_service_ids_single_threaded", tooltip="    pub fn receive_with_service_ids_single_threaded(         self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         group_params: &GroupSecretPara...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [label="issue", tooltip="    pub fn issue(         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         key_pair: &GroupSendDerivedKeyPair,         randomness: RandomnessBytes,     ) -> Self {         // Note...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()." [label="sort_points", tooltip="    fn sort_points(points: &mut [(usize, curve25519_dalek_signal::RistrettoPoint)]) {         debug_assert!(points.iter().enumerate().all(|(i, (j, _))| i == *j));         let sort_keys = curve25519_da...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`]decompress()." [label="decompress", tooltip="    pub fn decompress(         self,     ) -> Result<         GroupSendEndorsement<curve25519_dalek_signal::RistrettoPoint>,         ZkGroupDeserializationFailure,     > {         Ok(GroupSendEndorsem...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." [label="verify", tooltip="    pub fn verify(         &self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         key_pair: &GroupSendDerivedKeyPair,     ) -> Result<(), ZkGroup...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [label="receive_with_ciphertexts", tooltip="    pub fn receive_with_ciphertexts(         self,         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         now: Timestamp,         root_public_key: impl AsRef<zkcredential::endor...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [label="to_token", tooltip="    pub fn to_token<T: AsRef<uid_encryption::KeyPair>>(&self, key_pair: T) -> GroupSendToken {         let client_key =             zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...", fillcolor=white, style="filled"]
  }
  subgraph cluster_15 {
    label = "group_send_endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." [label="test_client_rejects_bad_expirations", tooltip="fn test_client_rejects_bad_expirations() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: Random...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." [label="test_endorsement", tooltip="fn test_endorsement() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes = [0x45u8...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." [label="test_single_member_group", tooltip="fn test_single_member_group() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes =...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 benches()." -> "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`][Debug]fmt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement<curve25519_dalek_signal::ristretto::CompressedRistretto>`]decompress()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`][Debug]fmt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]sort_points()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement<CompressedRistretto>`]decompress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_1()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 benches()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore1()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 impl#[`PrintAsHex<&curve25519_dalek::ristretto::CompressedRistretto>`][Debug]fmt()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]as_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/decompress/step_1()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 to_ristretto_pt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendFullToken_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress()." [color=blue]
}
