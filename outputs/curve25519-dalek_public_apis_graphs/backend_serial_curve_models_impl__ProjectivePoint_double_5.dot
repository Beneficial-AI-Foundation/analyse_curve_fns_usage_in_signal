digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "mod.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." [label="vartime_double_base_mul", tooltip="pub fn vartime_double_base_mul(a: &Scalar, A: &EdwardsPoint, b: &Scalar) -> EdwardsPoint {     match get_selected_backend() {         #[cfg(curve25519_dalek_backend = ' simd' )]         BackendKind::A...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "mod.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double()." [label="double", tooltip="    pub fn double(&self) -> CompletedPoint {         // Double()         let XX = self.X.square();         let YY = self.Y.square();         let ZZ2 = self.Z.square2();         let X_plus_Y = &self.X ...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "vartime_double_base.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul()." [label="mul", tooltip="pub fn mul(a: &Scalar, A: &EdwardsPoint, b: &Scalar) -> EdwardsPoint {     let a_naf = a.non_adjacent_form(5);      #[cfg(feature = ' precomputed-tables' )]     let b_naf = b.non_adjacent_form(8);    ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_3 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." [label="is_small_order", tooltip="    pub fn is_small_order(&self) -> bool {         self.mul_by_cofactor().is_identity()     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [label="mul_by_cofactor", tooltip="    pub fn mul_by_cofactor(&self) -> EdwardsPoint {         self.mul_by_pow_2(3)     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2()." [label="mul_by_pow_2", tooltip="    pub(crate) fn mul_by_pow_2(&self, k: u32) -> EdwardsPoint {         debug_assert!(k > 0);         let mut r: CompletedPoint;         let mut s = self.as_projective();         for _ in 0..(k - 1) {...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]double()." [label="double", tooltip="    pub(crate) fn double(&self) -> EdwardsPoint {         self.as_projective().double().as_extended()     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [label="vartime_double_scalar_mul_basepoint", tooltip="    pub fn vartime_double_scalar_mul_basepoint(         a: &Scalar,         A: &EdwardsPoint,         b: &Scalar,     ) -> EdwardsPoint {         crate::backend::vartime_double_base_mul(a, A, b)     }", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_4 {
    label = "window.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 window/impl#[`NafLookupTable5<ProjectiveNielsPoint>`][`From<&EdwardsPoint>`]from()." [label="from", tooltip="    fn from(A: &'a EdwardsPoint) -> Self {         let mut Ai = [A.as_projective_niels(); 8];         let A2 = A.double();         for i in 0..7 {             Ai[i + 1] = (&A2 + &Ai[i]).as_extended()....", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_5 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [label="verify_signature_for_multipart_message", tooltip="    pub fn verify_signature_for_multipart_message(         &self,         message: &[&[u8]],         signature: &[u8],     ) -> bool {         match &self.key {             PublicKeyData::DjbPublicKey...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "curve25519.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [             0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05,             0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." [label="test_random_signatures", tooltip="    fn test_random_signatures() {         let mut csprng = OsRng.unwrap_err();         for _ in 0..50 {             let mut message = [0u8; 64];             csprng.fill_bytes(&mut message);           ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [label="bench_verify_search", tooltip="fn bench_verify_search(c: &mut Criterion) {     let sig_key = VerifyingKey::from_bytes(&hex!(         ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'      ))     .unwrap();     let...", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [label="evaluate_vrf_proof", tooltip="fn evaluate_vrf_proof(     proof: &[u8],     vrf_key: &vrf::PublicKey,     search_key: &[u8], ) -> Result<[u8; 32]> {     let proof = proof.try_into().map_err(|_| MalformedProof)?;     Ok(vrf_key.proo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." [label="can_verify_search_response", tooltip="    fn can_verify_search_response() {         let sig_key = VerifyingKey::from_bytes(&hex!(             ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'          ))         .unwrap(...", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." [label="test_proof_to_hash_fails", tooltip="    fn test_proof_to_hash_fails() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();              assert!(pk.proof_to_hash(b' a' , &v.pi).is_err());            ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." [label="test_encode_to_curve_try_and_increment", tooltip="    fn test_encode_to_curve_try_and_increment() {         for v in TEST_VECTORS {             let got = encode_to_curve_try_and_increment(&v.pk, v.alpha)                 .compress()                 .0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." [label="test_proof_to_hash", tooltip="    fn test_proof_to_hash() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();             let index = pk.proof_to_hash(v.alpha, &v.pi).unwrap();             as...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [label="proof_to_hash", tooltip="fn proof_to_hash(gamma: &EdwardsPoint) -> [u8; 32] {     let mut hasher = Sha512::new();     hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]);     hasher.update(gamma.mul_by_cofactor().compress().0);...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." [label="try_and_increment_terminates", tooltip="    fn try_and_increment_terminates() {         proptest!(|(data: [u8; 34])| {             let _ = encode_to_curve_try_and_increment(&data[..32], &data[32..]);         })     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [label="encode_to_curve_try_and_increment", tooltip="fn encode_to_curve_try_and_increment(salt: &[u8], data: &[u8]) -> EdwardsPoint {     let mut hasher = Sha512::new();      for i in 0u8..=u8::MAX {         hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [label="try_from", tooltip="    fn try_from(public_key: [u8; 32]) -> Result<Self> {         match CompressedEdwardsY(public_key).decompress() {             None => Err(Error::InvalidCurvePoint),             Some(pt) if pt.is_sma...", fillcolor=white, style="filled"]
  }
  subgraph cluster_10 {
    label = "env.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." [label="from", tooltip="    fn from(src: KeyTransConfig) -> Self {         let KeyTransConfig {             signing_key_material,             vrf_key_material,             auditor_key_material,         } = src;         let s...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 window/impl#[`NafLookupTable5<ProjectiveNielsPoint>`][`From<&EdwardsPoint>`]from()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]double()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 window/impl#[`NafLookupTable5<ProjectiveNielsPoint>`][`From<&EdwardsPoint>`]from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]double()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=blue]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." [color=gray, style=dashed]
}
