digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()." [label="hash_from_bytes", tooltip="    pub fn hash_from_bytes<D>(input: &[u8]) -> Scalar     where         D: Digest<OutputSize = U64> + Default,     {         let mut hash = D::default();         hash.update(input);         Scalar::fr...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [label="from_hash", tooltip="    pub fn from_hash<D>(hash: D) -> Scalar     where         D: Digest<OutputSize = U64>,     {         let mut output = [0u8; 64];         output.copy_from_slice(hash.finalize().as_slice());         ...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "verifying.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." [label="raw_verify", tooltip="    pub(crate) fn raw_verify<CtxDigest>(         &self,         message: &[u8],         signature: &ed25519::Signature,     ) -> Result<(), SignatureError>     where         CtxDigest: Digest<OutputSi...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge()." [label="compute_challenge", tooltip="    fn compute_challenge<CtxDigest>(         context: Option<&[u8]>,         R: &CompressedEdwardsY,         A: &CompressedEdwardsY,         M: &[u8],     ) -> Scalar     where         CtxDigest: Dige...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." [label="verify", tooltip="    fn verify(&self, message: &[u8], signature: &ed25519::Signature) -> Result<(), SignatureError> {         self.raw_verify::<Sha512>(message, signature)     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." [label="recompute_R", tooltip="    fn recompute_R<CtxDigest>(         &self,         context: Option<&[u8]>,         signature: &InternalSignature,         M: &[u8],     ) -> CompressedEdwardsY     where         CtxDigest: Digest<O...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "message_backup.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame()." [label="OnlineBackupValidator_AddFrame", tooltip="fn OnlineBackupValidator_AddFrame(     backup: &mut OnlineBackupValidator,     frame: &[u8], ) -> Result<(), ReadError> {     let unknown_fields = backup         .get_mut()         .parse_and_add_fram...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 message_backup/MessageBackupValidator_Validate()." [label="MessageBackupValidator_Validate", tooltip="async fn MessageBackupValidator_Validate(     key: &MessageBackupKey,     first_stream: &mut dyn InputStream,     second_stream: &mut dyn InputStream,     len: u64,     purpose: AsType<Purpose, u8>, )...", fillcolor=white, style="filled"]
  }
  subgraph cluster_3 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." [label="KeyTransparency_Search", tooltip="async fn KeyTransparency_Search(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedChatConnec...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." [label="KeyTransparency_Distinguished", tooltip="async fn KeyTransparency_Distinguished(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedCha...", fillcolor=white, style="filled"]
  }
  subgraph cluster_4 {
    label = "protocol.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." [label="ECPublicKey_Verify", tooltip="fn ECPublicKey_Verify(key: &PublicKey, message: &[u8], signature: &[u8]) -> bool {     key.verify_signature(message, signature) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_DecryptMessage()." [label="GroupCipher_DecryptMessage", tooltip="async fn GroupCipher_DecryptMessage(     sender: &ProtocolAddress,     message: &[u8],     store: &mut dyn SenderKeyStore, ) -> Result<Vec<u8>> {     group_decrypt(message, store, sender).await }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." [label="SessionBuilder_ProcessPreKeyBundle", tooltip="async fn SessionBuilder_ProcessPreKeyBundle(     bundle: &PreKeyBundle,     protocol_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_key_store: &mut dyn IdentityKeySt...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ServerCertificate_New()." [label="ServerCertificate_New", tooltip="fn ServerCertificate_New(     key_id: u32,     server_key: &PublicKey,     trust_root: &PrivateKey, ) -> Result<ServerCertificate> {     let mut rng = rand::rngs::OsRng.unwrap_err();     ServerCertifi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SealedSender_DecryptMessage()." [label="SealedSender_DecryptMessage", tooltip="async fn SealedSender_DecryptMessage(     message: &[u8],     trust_root: &PublicKey,     timestamp: Timestamp,     local_e164: Option<String>,     local_uuid: String,     local_device_id: u32,     se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity()." [label="IdentityKeyPair_SignAlternateIdentity", tooltip="fn IdentityKeyPair_SignAlternateIdentity(     public_key: &PublicKey,     private_key: &PrivateKey,     other_identity: &PublicKey, ) -> Result<Vec<u8>> {     let mut rng = rand::rngs::OsRng.unwrap_er...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_EncryptMessage()." [label="GroupCipher_EncryptMessage", tooltip="async fn GroupCipher_EncryptMessage(     sender: &ProtocolAddress,     distribution_id: Uuid,     message: &[u8],     store: &mut dyn SenderKeyStore, ) -> Result<CiphertextMessage> {     let mut rng =...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." [label="SenderCertificate_Validate", tooltip="fn SenderCertificate_Validate(     cert: &SenderCertificate,     key: &PublicKey,     time: Timestamp, ) -> Result<bool> {     cert.validate(key, time) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." [label="IdentityKey_VerifyAlternateIdentity", tooltip="fn IdentityKey_VerifyAlternateIdentity(     public_key: &PublicKey,     other_identity: &PublicKey,     signature: &[u8], ) -> Result<bool> {     let identity = IdentityKey::new(*public_key);     let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPrivateKey_Sign()." [label="ECPrivateKey_Sign", tooltip="fn ECPrivateKey_Sign(key: &PrivateKey, message: &[u8]) -> Result<Vec<u8>> {     let mut rng = rand::rngs::OsRng.unwrap_err();     Ok(key.calculate_signature(message, &mut rng)?.into_vec()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_New()." [label="SenderCertificate_New", tooltip="fn SenderCertificate_New(     sender_uuid: String,     sender_e164: Option<String>,     sender_device_id: u32,     sender_key: &PublicKey,     expiration: Timestamp,     signer_cert: &ServerCertificat...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." [label="SenderKeyMessage_VerifySignature", tooltip="fn SenderKeyMessage_VerifySignature(skm: &SenderKeyMessage, pubkey: &PublicKey) -> Result<bool> {     skm.verify_signature(pubkey) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_New()." [label="SenderKeyMessage_New", tooltip="fn SenderKeyMessage_New(     message_version: u8,     distribution_id: Uuid,     chain_id: u32,     iteration: u32,     ciphertext: &[u8],     pk: &PrivateKey, ) -> Result<SenderKeyMessage> {     let ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_5 {
    label = "usernames.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." [label="Username_Hash", tooltip="pub fn Username_Hash(username: String) -> Result<[u8; 32], UsernameError> {     Username::new(&username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." [label="Username_HashFromParts", tooltip="pub fn Username_HashFromParts(     nickname: String,     discriminator: String,     min_len: u32,     max_len: u32, ) -> Result<[u8; 32], UsernameError> {     let limits = NicknameLimits::new(min_len ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." [label="Username_Proof", tooltip="pub fn Username_Proof(username: String, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(&username)?.proof(randomness) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "message_backup.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge-testing 0.1.0 message_backup/ComparableBackup_ReadUnencrypted()." [label="ComparableBackup_ReadUnencrypted", tooltip="async fn ComparableBackup_ReadUnencrypted(     stream: &mut dyn InputStream,     len: u64,     purpose: AsType<Purpose, u8>, ) -> Result<ComparableBackup, ReadError> {     let reader = BackupReader::n...", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, generation, key_agreement, signatures);  criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 signatures()." [label="signatures", tooltip="pub fn signatures(c: &mut Criterion) {     let rng = &mut rng();     let alice_key = KeyPair::generate(rng);     let mut some_data = [0; 1024];     rng.fill(&mut some_data);      c.bench_function(' ge...", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "ed_to_xed.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 main()." [label="main", tooltip="fn main() {     let mut input = vec![];     std::io::stdin()         .read_to_end(&mut input)         .expect(' can read input' );     let key = boring::pkey::PKey::public_key_from_pem(&input).expect(...", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "curve.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." [label="test_large_signatures", tooltip="    fn test_large_signatures() -> Result<(), CurveError> {         let mut csprng = OsRng.unwrap_err();         let key_pair = KeyPair::generate(&mut csprng);         let mut message = [0u8; 1024 * 10...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, message: &[u8], signature: &[u8]) -> bool {         self.verify_signature_for_multipart_message(&[message], signature)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [label="calculate_signature_for_multipart_message", tooltip="    pub fn calculate_signature_for_multipart_message<R: CryptoRng + Rng>(         &self,         message: &[&[u8]],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         match self....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R: CryptoRng + Rng>(         &self,         message: &[u8],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         self.private_key.calculate_signature...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R: CryptoRng + Rng>(         &self,         message: &[u8],         csprng: &mut R,     ) -> Result<Box<[u8]>, CurveError> {         self.calculate_signature_for_multipa...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [label="verify_signature_for_multipart_message", tooltip="    pub fn verify_signature_for_multipart_message(         &self,         message: &[&[u8]],         signature: &[u8],     ) -> bool {         match &self.key {             PublicKeyData::DjbPublicKey...", fillcolor=white, style="filled"]
  }
  subgraph cluster_10 {
    label = "curve25519.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." [label="test_random_signatures", tooltip="    fn test_random_signatures() {         let mut csprng = OsRng.unwrap_err();         for _ in 0..50 {             let mut message = [0u8; 64];             csprng.fill_bytes(&mut message);           ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [             0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05,             0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [label="calculate_signature", tooltip="    pub fn calculate_signature<R>(         &self,         csprng: &mut R,         message: &[&[u8]],     ) -> [u8; SIGNATURE_LENGTH]     where         R: CryptoRng + Rng,     {         let mut random_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white, style="filled"]
  }
  subgraph cluster_11 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [label="bench_verify_search", tooltip="fn bench_verify_search(c: &mut Criterion) {     let sig_key = VerifyingKey::from_bytes(&hex!(         ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'      ))     .unwrap();     let...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." [label="benches", tooltip="criterion_group!(benches, bench_verify_search); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_12 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [label="verify_search", tooltip="    pub fn verify_search(         &self,         request: SlimSearchRequest,         response: FullSearchResponse,         context: SearchContext,         force_monitor: bool,         now: SystemTime,...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." [label="verify_monitor", tooltip="    pub fn verify_monitor<'a>(         &'a self,         request: &'a MonitorRequest,         response: &'a MonitorResponse,         context: MonitorContext,         now: SystemTime,     ) -> Result<M...", fillcolor=white, style="filled"]
  }
  subgraph cluster_13 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [label="verify_search", tooltip="pub fn verify_search(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     force_monitor: bool,     now: SystemTime, ) -> Result<SearchSt...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." [label="can_verify_search_response", tooltip="    fn can_verify_search_response() {         let sig_key = VerifyingKey::from_bytes(&hex!(             ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'          ))         .unwrap(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." [label="verify_monitor", tooltip="pub fn verify_monitor<'a>(     config: &'a PublicConfig,     req: &'a MonitorRequest,     res: &'a MonitorResponse,     context: MonitorContext,     now: SystemTime, ) -> Result<MonitorStateUpdate> { ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [label="verify_full_tree_head", tooltip="fn verify_full_tree_head(     config: &PublicConfig,     fth: &FullTreeHead,     root: [u8; 32],     last_tree_head: Option<&LastTreeHead>,     last_distinguished_tree_head: Option<&LastTreeHead>,    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [label="verify_search_internal", tooltip="fn verify_search_internal(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     monitor: bool,     now: SystemTime, ) -> Result<SearchSta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." [label="verify_tree_head_signature", tooltip="fn verify_tree_head_signature(     config: &PublicConfig,     head: &SingleSignatureTreeHead,     root: &[u8; 32],     verifying_key: &VerifyingKey, ) -> Result<()> {     let raw = marshal_tree_head_t...", fillcolor=white, style="filled"]
  }
  subgraph cluster_14 {
    label = "validation.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 validation()." [label="validation", tooltip="    validation,     hmac_only,     decrypt_only,     decrypt_and_decompress_and_hmac,     decrypt_and_decompress_and_hmac_and_segment,     decrypt_and_decompress_and_hmac_and_segment_and_parse,     de...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 process()." [label="process", tooltip="    fn process<R: ReaderFactory<Reader: Unpin>>(input: R, key: &MessageBackupKey) {         futures::executor::block_on(async {             BackupReader::new_encrypted_compressed(                 key,...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 parse_and_validate()." [label="parse_and_validate", tooltip="fn parse_and_validate(c: &mut Criterion) {     let mut group = c.benchmark_group(' PartialBackup' );     benchmark_multiple_backup_sizes(|size, _backup, _key| {         if size == 0 {             retu...", fillcolor=white, style="filled"]
  }
  subgraph cluster_15 {
    label = "backup.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with()." [label="fake_with", tooltip="        fn fake_with(frames: impl IntoIterator<Item = proto::frame::Item>) -> PartialBackup<Self> {             let mut backup = Self::empty();              for frame in frames {                 backu...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/duplicate_non_contact_recipient()." [label="duplicate_non_contact_recipient", tooltip="    fn duplicate_non_contact_recipient<M: Method + ReferencedTypes>(         mut partial: PartialBackup<M>,         (expected_error, destination): (             impl Fn(RecipientId, RecipientId) -> Co...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [label="add_recipient", tooltip="    fn add_recipient(&mut self, recipient: proto::Recipient) -> Result<(), RecipientFrameError> {         let id = recipient.id();         let err_with_id = |e| RecipientFrameError(id, e);         if ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_missing_foreign_key()." [label="rejects_missing_foreign_key", tooltip="    fn rejects_missing_foreign_key<M: Method + ReferencedTypes>(         mut partial: PartialBackup<M>,         item: impl Into<FrameItem>,     ) {         let frame = proto::Frame {             item:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/pni_matching_aci_is_okay()." [label="pni_matching_aci_is_okay", tooltip="    fn pni_matching_aci_is_okay<M: Method + ReferencedTypes>(mut partial: PartialBackup<M>) {         partial             .add_account_data(proto::AccountData::test_data())             .expect(' valid...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/zero_chat_id()." [label="zero_chat_id", tooltip="    fn zero_chat_id<M: Method + ReferencedTypes>(mut partial: PartialBackup<M>) {         partial             .add_account_data(proto::AccountData::test_data())             .expect(' valid account dat...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_multiple_account_data()." [label="rejects_multiple_account_data", tooltip="    fn rejects_multiple_account_data<M: Method + ReferencedTypes>(mut partial: PartialBackup<M>) {         partial             .add_frame_item(proto::AccountData::test_data().into())             .expe...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [label="add_frame_item", tooltip="    fn add_frame_item(&mut self, item: FrameItem) -> Result<(), ValidationError> {         match item {             FrameItem::Account(account_data) => self.add_account_data(account_data),            ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_missing_all_folder()." [label="rejects_missing_all_folder", tooltip="    fn rejects_missing_all_folder<M: Method + ReferencedTypes>(mut partial: PartialBackup<M>) {         partial             .add_frame_item(proto::AccountData::test_data().into())             .expect(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/zero_recipient_id()." [label="zero_recipient_id", tooltip="    fn zero_recipient_id<M: Method + ReferencedTypes>(mut partial: PartialBackup<M>) {         partial             .add_account_data(proto::AccountData::test_data())             .expect(' valid accoun...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/chat_item_order()." [label="chat_item_order", tooltip="    fn chat_item_order() {         let mut partial = Store::empty();          partial             .add_account_data(proto::AccountData::test_data())             .expect(' valid account data' );       ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_duplicate_id()." [label="rejects_duplicate_id", tooltip="    fn rejects_duplicate_id<M: Method + ReferencedTypes>(         mut partial: PartialBackup<M>,         item: impl Into<FrameItem>,     ) {         let err = partial.add_frame_item(item.into()).unwra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake()." [label="fake", tooltip="        fn fake() -> PartialBackup<Self> {             Self::fake_with([                 proto::Recipient::test_data_contact().into(),                 proto::Chat::test_data().into(),                 ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame()." [label="add_frame", tooltip="    pub fn add_frame(&mut self, frame: proto::Frame) -> Result<(), ValidationError> {         self.add_frame_item(frame.item.ok_or(ValidationError::EmptyFrame)?)     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_duplicate_all_folder()." [label="rejects_duplicate_all_folder", tooltip="    fn rejects_duplicate_all_folder<M: Method + ReferencedTypes>(mut partial: PartialBackup<M>) {         partial             .add_frame_item(proto::AccountData::test_data().into())             .expec...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/allows_lone_all_folder()." [label="allows_lone_all_folder", tooltip="    fn allows_lone_all_folder<M: Method + ReferencedTypes>(mut partial: PartialBackup<M>) {         partial             .add_frame_item(proto::AccountData::test_data().into())             .expect(' ac...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/duplicate_contact_id()." [label="duplicate_contact_id", tooltip="    fn duplicate_contact_id<M: Method + ReferencedTypes>(         mut partial: PartialBackup<M>,         (expected_error, fill_in_field): (             impl Fn(RecipientId, RecipientId) -> CompletionE...", fillcolor=white, style="filled"]
  }
  subgraph cluster_16 {
    label = "account_data.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom<(String, Option<proto::account_data::UsernameLink>)>`]try_from()." [label="try_from", tooltip="    fn try_from(         (username, username_link): (String, Option<proto::account_data::UsernameLink>),     ) -> Result<Self, Self::Error> {         let username = Username::new(&username)?;         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/valid_account_data()." [label="valid_account_data", tooltip="    fn valid_account_data() {         assert_eq!(             proto::AccountData::test_data().try_into_with(&TestContext::default()),             Ok(AccountData::from_proto_test_data())         );    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/impl#[`AccountData<Store>`]from_proto_test_data()." [label="from_proto_test_data", tooltip="        pub(crate) fn from_proto_test_data() -> Self {             Self {                 profile_key: FAKE_PROFILE_KEY,                 username: Some(UsernameData {                     username: Use...", fillcolor=white, style="filled"]
  }
  subgraph cluster_17 {
    label = "recipient.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/destination_contact()." [label="destination_contact", tooltip="    fn destination_contact(modifier: fn(&mut proto::Contact)) -> Result<(), RecipientError> {         let mut contact = proto::Contact::test_data();         modifier(&mut contact);          let recipi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_destination_contact()." [label="valid_destination_contact", tooltip="    fn valid_destination_contact() {         let recipient = proto::Recipient {             destination: Some(proto::Contact::test_data().into()),             ..proto::Recipient::test_data()         }...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/destination_distribution_list()." [label="destination_distribution_list", tooltip="    fn destination_distribution_list(         modifier: fn(&mut proto::DistributionListItem),     ) -> Result<(), RecipientError> {         let mut distribution_list = proto::DistributionListItem::tes...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_destination_group()." [label="valid_destination_group", tooltip="    fn valid_destination_group() {         let recipient = proto::Recipient {             destination: Some(proto::Group::test_data().into()),             ..proto::Recipient::test_data()         };   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/destination_group()." [label="destination_group", tooltip="    fn destination_group(modifier: fn(&mut proto::Group)) -> Result<(), RecipientError> {         let mut group = proto::Group::test_data();         modifier(&mut group);          let recipient = prot...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [label="try_into_with", tooltip="    fn try_into_with(self, context: &C) -> Result<Destination<R>, Self::Error> {         let Self {             id: _,             destination,             special_fields: _,         } = self;        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_destination_self()." [label="valid_destination_self", tooltip="    fn valid_destination_self() {         let recipient = proto::Recipient::test_data();          assert_eq!(             recipient.try_into_with(&TestContext::default()),             Ok(Destination::...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_distribution_list()." [label="valid_distribution_list", tooltip="    fn valid_distribution_list() {         let recipient = proto::Recipient {             destination: Some(proto::DistributionListItem::test_data().into()),             ..proto::Recipient::test_data(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/requires_destination()." [label="requires_destination", tooltip="    fn requires_destination() {         let recipient = proto::Recipient {             destination: None,             ..proto::Recipient::test_data()         };          assert_matches!(             r...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith<ContactData, C>`]try_into_with()." [label="try_into_with", tooltip="    fn try_into_with(self, context: &C) -> Result<ContactData, Self::Error> {         let Self {             aci,             pni,             profileKey,             username,             e164,      ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_18 {
    label = "serialize.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids()." [label="shuffled_chats_and_recipient_ids", tooltip="    fn shuffled_chats_and_recipient_ids() {         let base = vec![crate::proto::backup::Frame {             item: Some(proto::AccountData::test_data().into()),             special_fields: Default::d...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/can_serialize()." [label="can_serialize", tooltip="    fn can_serialize() {         let backup = Backup {             meta: BackupMeta {                 version: 1,                 backup_time: Timestamp::test_value(),                 purpose: crate::...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal()." [label="shuffled_chat_item_frames_not_equal", tooltip="    fn shuffled_chat_item_frames_not_equal() {         let first_contact = make_contact(' first' , 1);         let second_contact = make_contact(' second' , 2);          let constant_frames = vec![   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/backup_from_frames()." [label="backup_from_frames", tooltip="    fn backup_from_frames(         frames: impl IntoIterator<Item = proto::Frame>,     ) -> crate::CompletedBackup<Store> {         let mut reader = crate::backup::PartialBackup::new(             prot...", fillcolor=white, style="filled"]
  }
  subgraph cluster_19 {
    label = "main.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 validate()." [label="validate", tooltip="        async fn validate(             mut backup_reader: BackupReader<impl AsyncRead + Unpin + VerifyHmac>,             PrintOutput(print): PrintOutput,             verbosity: ParseVerbosity,        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 main()." [label="main", tooltip="fn main() {     futures::executor::block_on(async_main()) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_20 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`backup::PartialBackup<M>`]parse_and_add_frame()." [label="parse_and_add_frame", tooltip="    pub fn parse_and_add_frame(         &mut self,         raw_frame: &[u8],         mut visitor: impl FnMut(&proto::backup::Frame) + Send,     ) -> Result<Vec<(Vec<PathPart>, UnknownValue)>, crate::E...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]validate_all()." [label="validate_all", tooltip="    pub async fn validate_all(self) -> ReadResult<()> {         self.collect_all().await.and_then(|partial| {             let _: CompletedBackup<ValidateOnly> = partial.try_into()?;             Ok(())...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]collect_all()." [label="collect_all", tooltip="    pub async fn collect_all<M: backup::method::Method + backup::ReferencedTypes>(         self,     ) -> ReadResult<backup::PartialBackup<M>>     where         backup::PartialBackup<M>: Send,     {  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." [label="read_all", tooltip="    pub async fn read_all(self) -> ReadResult<backup::CompletedBackup<Store>> {         self.collect_all()             .await             .and_then(|r| Ok(CompletedBackup::try_from(r)?))     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 read_all_frames()." [label="read_all_frames", tooltip="async fn read_all_frames<M: backup::method::Method + backup::ReferencedTypes>(     purpose: Purpose,     mut reader: VarintDelimitedReader<impl AsyncRead + Unpin + VerifyHmac>,     mut visitor: impl F...", fillcolor=white, style="filled"]
  }
  subgraph cluster_21 {
    label = "test_cases.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 validate_proto()." [label="validate_proto", tooltip="fn validate_proto(binproto: &[u8]) {     // Check via the library interface.     let input = Cursor::new(binproto);     let reader = BackupReader::new_unencrypted(input, BACKUP_PURPOSE);     validate(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 is_valid_encrypted_proto()." [label="is_valid_encrypted_proto", tooltip="fn is_valid_encrypted_proto(input: Fixture<PathBuf>) {     let path = input.content();      let backup_key = BackupKey::derive_from_account_entropy_pool(         &RAW_ACCOUNT_ENTROPY_POOL.parse().expe...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 invalid_jsonproto()." [label="invalid_jsonproto", tooltip="fn invalid_jsonproto(input: Fixture<PathBuf>) {     let path = input.into_content();     let expected_path = path.with_extension(EXPECTED_SUFFIX);      let json_contents = json5::from_str(&std::fs::re...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 can_serialize_json_proto()." [label="can_serialize_json_proto", tooltip="fn can_serialize_json_proto(input: Fixture<&str>) {     let json_contents = input.into_content();     let json_contents = json5::from_str(json_contents).expect(' invalid JSON' );     let json_array = ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 serialized_account_settings_is_valid()." [label="serialized_account_settings_is_valid", tooltip="fn serialized_account_settings_is_valid() {     let binproto = include_bytes!(' res/canonical-backup.binproto' );     let expected_canonical_str = include_str!(' res/canonical-backup.expected.json' );...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scrambler_smoke_test()." [label="scrambler_smoke_test", tooltip="fn scrambler_smoke_test() {     // Scrambling is deterministic, so we can check against expected output.     let binproto = include_bytes!(' res/canonical-backup.binproto' );     let scrambled_binprot...", fillcolor=white, style="filled"]
  }
  subgraph cluster_22 {
    label = "fetch_profile_key_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." [label="main", tooltip="async fn main() -> anyhow::Result<()> {     env_logger::builder()         .filter_module(module_path!(), log::LevelFilter::Info)         .parse_default_env()         .init();      let Config {        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_23 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [label="distinguished", tooltip="    async fn distinguished(         &self,         last_distinguished: Option<LastTreeHead>,     ) -> Result<SearchStateUpdate, RequestError<Error>> {         let ChatDistinguishedResponse {          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." [label="search_returns_data_not_requested", tooltip="    fn search_returns_data_not_requested(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();         let...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [label="search", tooltip="    async fn search(         &self,         aci: &Aci,         aci_identity_key: &PublicKey,         e164: Option<(E164, Vec<u8>)>,         username_hash: Option<UsernameHash<'_>>,         stored_acco...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [label="verify_chat_search_response", tooltip="fn verify_chat_search_response(     kt: &KeyTransparency,     aci: &Aci,     e164: Option<E164>,     username_hash: Option<UsernameHash>,     stored_account_data: Option<AccountData>,     chat_search_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." [label="search_does_not_return_requested_data", tooltip="    fn search_does_not_return_requested_data(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [label="verify_single_search_response", tooltip="fn verify_single_search_response(     kt: &KeyTransparency,     search_key: Vec<u8>,     response: CondensedTreeSearchResponse,     monitoring_data: Option<MonitoringData>,     full_tree_head: &FullTr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." [label="monitor", tooltip="    async fn monitor(         &self,         aci: &Aci,         e164: Option<E164>,         username_hash: Option<UsernameHash<'_>>,         account_data: AccountData,         last_distinguished_tree_...", fillcolor=white, style="filled"]
  }
  subgraph cluster_24 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." [label="distinguished_integration_test", tooltip="    async fn distinguished_integration_test(have_last_distinguished: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running in...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." [label="search_for_deleted_account", tooltip="    async fn search_for_deleted_account() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled' )...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." [label="prompt", tooltip="        fn prompt(text: &str) {             println!(' {} >' , text);              let mut input = String::new();              std::io::stdin()                 .read_line(&mut input)                 ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." [label="search_for_account_that_isnt", tooltip="    async fn search_for_account_that_isnt() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled'...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test()." [label="monitor_permutations_integration_test", tooltip="    async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SK...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." [label="search_permutations_integration_test", tooltip="    async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKI...", fillcolor=white, style="filled"]
  }
  subgraph cluster_25 {
    label = "ppss_ops.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." [label="do_restore_fails_with_the_first_error", tooltip="    async fn do_restore_fails_with_the_first_error() {         let result = do_restore::<TestEnv>(NotConnectedResults, b' ' ).await;         assert_matches!(result, Err(crate::svrb::Error::ConnectionT...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [label="do_restore", tooltip="pub async fn do_restore<Env: PpssSetup>(     connect_results: impl IntoConnectionResults,     password: &[u8], ) -> Result<Secret, Error> {     let mut rng = OsRng.unwrap_err();     let ConnectionCont...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error()." [label="do_backup_fails_with_the_first_error", tooltip="    async fn do_backup_fails_with_the_first_error() {         let backup = do_prepare::<TestEnv>(b' ' );         let result = do_backup::<TestEnv>(NotConnectedResults, &backup).await;         assert_m...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." [label="do_prepare", tooltip="pub fn do_prepare<Env: PpssSetup>(password: &[u8]) -> Backup4 {     let server_ids = Env::server_ids();     let mut rng = OsRng.unwrap_err();     Backup4::new(         server_ids.as_ref(),         pas...", fillcolor=white, style="filled"]
  }
  subgraph cluster_26 {
    label = "traits.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." [label="restore", tooltip="    async fn restore(&self, password: &[u8]) -> Result<Secret, Error> {         ppss_ops::do_restore::<T::Env>(self.connect().await, password).await     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Backup]prepare()." [label="prepare", tooltip="    fn prepare(&self, password: &[u8]) -> Backup4 {         ppss_ops::do_prepare::<T::Env>(password)     }", fillcolor=white, style="filled"]
  }
  subgraph cluster_27 {
    label = "kem.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_kem); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_28 {
    label = "ratchet.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." [label="ratchet_forward", tooltip="pub fn ratchet_forward(c: &mut Criterion) {     ratchet_forward_result(c).expect(' success' ); }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." [label="ratchet", tooltip="criterion_group!(ratchet, ratchet_forward);  criterion_main!(ratchet);", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." [label="ratchet_forward_result", tooltip="pub fn ratchet_forward_result(c: &mut Criterion) -> Result<(), SignalProtocolError> {     let mut group = c.benchmark_group(' ratchet' );     group.sampling_mode(SamplingMode::Flat);     group.sample_...", fillcolor=white, style="filled"]
  }
  subgraph cluster_29 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [label="v1", tooltip="pub fn v1(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [label="v2", tooltip="pub fn v2(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();      let alice_address = ProtocolAddress::new(         ' 9d0652a3-dcc3-4d11-975f-74d61598733f' .to_owned(),         DeviceId::new(1...", fillcolor=white, style="filled"]
  }
  subgraph cluster_30 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [label="session_encrypt", tooltip="pub fn session_encrypt(c: &mut Criterion) {     session_encrypt_result(c).expect(' success' ); }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [label="session_encrypt_result", tooltip="pub fn session_encrypt_result(c: &mut Criterion) -> Result<(), SignalProtocolError> {     let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?;      let alice_address = ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_31 {
    label = "group_cipher.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [label="group_decrypt", tooltip="pub async fn group_decrypt(     skm_bytes: &[u8],     sender_key_store: &mut dyn SenderKeyStore,     sender: &ProtocolAddress, ) -> Result<Vec<u8>> {     let skm = SenderKeyMessage::try_from(skm_bytes...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [label="group_encrypt", tooltip="pub async fn group_encrypt<R: Rng + CryptoRng>(     sender_key_store: &mut dyn SenderKeyStore,     sender: &ProtocolAddress,     distribution_id: Uuid,     plaintext: &[u8],     csprng: &mut R, ) -> R...", fillcolor=white, style="filled"]
  }
  subgraph cluster_32 {
    label = "identity_key.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." [label="test_alternate_identity_signing", tooltip="    fn test_alternate_identity_signing() -> Result<()> {         let mut rng = OsRng.unwrap_err();         let primary = IdentityKeyPair::generate(&mut rng);         let secondary = IdentityKeyPair::g...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [label="verify_alternate_identity", tooltip="    pub fn verify_alternate_identity(&self, other: &IdentityKey, signature: &[u8]) -> Result<bool> {         Ok(self.public_key.verify_signature_for_multipart_message(             &[                 A...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [label="sign_alternate_identity", tooltip="    pub fn sign_alternate_identity<R: Rng + CryptoRng>(         &self,         other: &IdentityKey,         rng: &mut R,     ) -> Result<Box<[u8]>> {         Ok(self.private_key.calculate_signature_fo...", fillcolor=white, style="filled"]
  }
  subgraph cluster_33 {
    label = "protocol.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [label="new", tooltip="    pub fn new<R: CryptoRng + Rng>(         message_version: u8,         distribution_id: Uuid,         chain_id: u32,         iteration: u32,         ciphertext: Box<[u8]>,         csprng: &mut R,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." [label="test_decryption_error_message", tooltip="    fn test_decryption_error_message() -> Result<()> {         let mut csprng = OsRng.unwrap_err();         let identity_key_pair = KeyPair::generate(&mut csprng);         let base_key_pair = KeyPair:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(&self, signature_key: &PublicKey) -> Result<bool> {         let valid = signature_key.verify_signature(             &self.serialized[..self.serialized.len() - Self::SIGNATU...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." [label="test_sender_key_message_serialize_deserialize", tooltip="    fn test_sender_key_message_serialize_deserialize() -> Result<()> {         let mut csprng = OsRng.unwrap_err();         let signature_key_pair = KeyPair::generate(&mut csprng);         let sender_...", fillcolor=white, style="filled"]
  }
  subgraph cluster_34 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." [label="test_lossless_round_trip", tooltip="fn test_lossless_round_trip() -> Result<()> {     let trust_root = PrivateKey::deserialize(&[0u8; 32])?;      // To test a hypothetical addition of a new field:     //     // Step 1: temporarily add a...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         sender_uuid: String,         sender_e164: Option<String>,         key: PublicKey,         sender_device_id: DeviceId,         expiration: Timestamp,        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         key_id: u32,         key: PublicKey,         trust_root: &PrivateKey,         rng: &mut R,     ) -> Result<Self> {         let certificate_pb = proto::seale...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [label="sealed_sender_decrypt", tooltip="pub async fn sealed_sender_decrypt(     ciphertext: &[u8],     trust_root: &PublicKey,     timestamp: Timestamp,     local_e164: Option<String>,     local_uuid: String,     local_device_id: DeviceId, ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey, validation_time: Timestamp) -> Result<bool> {         if !self.signer.validate(trust_root)? {             log::error!(                 ' sender certi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [label="validate", tooltip="    pub fn validate(&self, trust_root: &PublicKey) -> Result<bool> {         if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&self.key_id()?) {             log::error!(                 ' received serve...", fillcolor=white, style="filled"]
  }
  subgraph cluster_35 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [label="process_prekey_bundle", tooltip="pub async fn process_prekey_bundle<R: Rng + CryptoRng>(     remote_address: &ProtocolAddress,     session_store: &mut dyn SessionStore,     identity_store: &mut dyn IdentityKeyStore,     bundle: &PreK...", fillcolor=white, style="filled"]
  }
  subgraph cluster_36 {
    label = "kyber_prekey.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." [label="generate", tooltip="    pub fn generate(         kyber_key_type: kem::KeyType,         id: KyberPreKeyId,         signing_key: &PrivateKey,     ) -> Result<KyberPreKeyRecord> {         let mut rng = rand::rngs::OsRng.unw...", fillcolor=white, style="filled"]
  }
  subgraph cluster_37 {
    label = "groups.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." [label="group_no_recv_session", tooltip="fn group_no_recv_session() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err().unwrap_err();          let device_id = DeviceId::new(1).unwrap();         let se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." [label="group_large_messages", tooltip="fn group_large_messages() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." [label="group_late_join", tooltip="fn group_late_join() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .to_ow...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." [label="group_too_far_in_the_future", tooltip="fn group_too_far_in_the_future() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +1415999...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." [label="group_sealed_sender_multiple_devices", tooltip="fn group_sealed_sender_multiple_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_send_session()." [label="group_no_send_session", tooltip="fn group_no_send_session() -> Result<(), SignalProtocolError> {     let mut csprng = OsRng.unwrap_err().unwrap_err();      let sender_address = ProtocolAddress::new(' +14159999111' .to_owned(), Device...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." [label="group_out_of_order", tooltip="fn group_out_of_order() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .to...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." [label="group_sealed_sender_multiple_devices_and_excluded_recipients", tooltip="fn group_sealed_sender_multiple_devices_and_excluded_recipients() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." [label="group_sealed_sender", tooltip="fn group_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." [label="group_basic_encrypt_decrypt", tooltip="fn group_basic_encrypt_decrypt() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +1415999...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." [label="group_message_key_limit", tooltip="fn group_message_key_limit() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." [label="group_basic_ratchet", tooltip="fn group_basic_ratchet() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let sender_address =             ProtocolAddress::new(' +14159999111' .t...", fillcolor=white, style="filled"]
  }
  subgraph cluster_38 {
    label = "sealed_sender.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." [label="test_sealed_sender_multi_recipient_encrypt_with_archived_session", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceI...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." [label="test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id", tooltip="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = Devi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." [label="test_sealed_sender_multi_recipient_redundant_empty_devices", tooltip="fn test_sealed_sender_multi_recipient_redundant_empty_devices() -> Result<(), SignalProtocolError> {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::n...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." [label="test_sender_key_in_sealed_sender", tooltip="fn test_sender_key_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." [label="test_decryption_error_in_sealed_sender", tooltip="fn test_decryption_error_in_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();       ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." [label="test_revoked_server_cert", tooltip="fn test_revoked_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut r...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." [label="test_sealed_sender_multi_recipient", tooltip="fn test_sealed_sender_multi_recipient() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         le...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." [label="test_server_cert", tooltip="fn test_server_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." [label="test_sealed_sender", tooltip="fn test_sealed_sender() -> Result<(), SignalProtocolError> {     async {         let mut rng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(23).unwrap();         let bob_device_id ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." [label="test_sender_cert", tooltip="fn test_sender_cert() -> Result<(), SignalProtocolError> {     let mut rng = OsRng.unwrap_err();     let trust_root = KeyPair::generate(&mut rng);     let server_key = KeyPair::generate(&mut rng);    ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_39 {
    label = "session.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." [label="test_signedprekey_not_saved", tooltip="fn test_signedprekey_not_saved() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice::Next);             build...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." [label="x3dh_prekey_rejected_as_invalid_message_specifically", tooltip="fn x3dh_prekey_rejected_as_invalid_message_specifically() {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [label="run", tooltip="    fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) -> TestResult {         async {             let mut csprng = OsRng.unwrap_err();              let alice_device_id = DeviceId::new(1).unwrap()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." [label="test_chain_jump_over_limit_with_self", tooltip="fn test_chain_jump_over_limit_with_self() -> TestResult {     let mut store_builder_one = TestStoreBuilder::new();     let mut store_builder_two = TestStoreBuilder::from_store(&store_builder_one.store...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." [label="test_basic_simultaneous_initiate", tooltip="fn test_basic_simultaneous_initiate() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Random)  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." [label="test_simultaneous_initiate_repeated_messages", tooltip="fn test_simultaneous_initiate_repeated_messages() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoic...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." [label="test_duplicate_message_error_returned", tooltip="fn test_duplicate_message_error_returned() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         let bob_device_id ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." [label="test_bad_signed_pre_key_signature", tooltip="fn test_bad_signed_pre_key_signature() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let bob_address =             ProtocolAddress::new(' +14151111112' .to_owned(), ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." [label="prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived", tooltip="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." [label="test_longer_sessions", tooltip="fn test_longer_sessions() -> TestResult {     init_logger();     run(         2000,         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." [label="test_message_key_limits", tooltip="fn test_message_key_limits() -> TestResult {     run(initialize_sessions_v4()?)?;      fn run(sessions: (SessionRecord, SessionRecord)) -> TestResult {         async {             let (alice_session_r...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." [label="prekey_message_failed_decryption_does_not_update_stores", tooltip="fn prekey_message_failed_decryption_does_not_update_stores() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." [label="test_chain_jump_over_limit", tooltip="fn test_chain_jump_over_limit() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(31337.into())  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." [label="test_repeat_bundle_message", tooltip="fn test_repeat_bundle_message() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(3133.into())   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." [label="prekey_message_to_archived_session", tooltip="fn prekey_message_to_archived_session() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." [label="test_simultaneous_initiate_with_lossage", tooltip="fn test_simultaneous_initiate_with_lossage() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." [label="test_optional_one_time_prekey", tooltip="fn test_optional_one_time_prekey() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_signed_pre_key(22.in...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." [label="test_simultaneous_initiate_lost_message_repeated_messages", tooltip="fn test_simultaneous_initiate_lost_message_repeated_messages() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdCh...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." [label="test_unacknowledged_sessions_eventually_expire", tooltip="fn test_unacknowledged_sessions_eventually_expire() -> TestResult {     async {         const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90);          let mut csprng = OsRng.u...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_empty_if_disabled()." [label="test_pqr_state_empty_if_disabled", tooltip="fn test_pqr_state_empty_if_disabled() -> TestResult {     run(UsePQRatchet::No, UsePQRatchet::No)?;     run(UsePQRatchet::No, UsePQRatchet::Yes)?;     run(UsePQRatchet::Yes, UsePQRatchet::No)?;      f...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." [label="test_pqr_state_and_message_contents_nonempty_if_enabled", tooltip="fn test_pqr_state_and_message_contents_nonempty_if_enabled() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();          let alice_device_id = DeviceId::new(1).unwrap();         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." [label="test_bad_message_bundle", tooltip="fn test_bad_message_bundle() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new();     let mut bob_store_builder = TestStoreBuilder::new()         .with_pre_key(3133.into())      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." [label="test_zero_is_a_valid_prekey_id", tooltip="fn test_zero_is_a_valid_prekey_id() -> TestResult {     async {         let mut csprng = OsRng.unwrap_err();         let alice_address =             ProtocolAddress::new(' +14151111111' .to_owned(), D...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." [label="test_simultaneous_initiate_lost_message", tooltip="fn test_simultaneous_initiate_lost_message() -> TestResult {     let mut alice_store_builder = TestStoreBuilder::new()         .with_pre_key(IdChoice::Random)         .with_signed_pre_key(IdChoice::Ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." [label="test_basic_prekey", tooltip="fn test_basic_prekey() -> TestResult {     run(         |builder| {             builder.add_pre_key(IdChoice::Next);             builder.add_signed_pre_key(IdChoice::Next);             builder.add_kyb...", fillcolor=white, style="filled"]
  }
  subgraph cluster_40 {
    label = "mod.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [label="with_signed_pre_key", tooltip="    pub fn with_signed_pre_key(mut self, id_choice: IdChoice) -> Self {         self.add_signed_pre_key(id_choice);         self     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [label="with_kyber_pre_key", tooltip="    pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) -> Self {         self.add_kyber_pre_key(id_choice);         self     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." [label="sign", tooltip="    fn sign(&mut self, message: &[u8]) -> Box<[u8]> {         let identity_key_pair = self             .store             .get_identity_key_pair()             .now_or_never()             .expect(' syn...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [label="add_kyber_pre_key", tooltip="    pub fn add_kyber_pre_key(&mut self, id_choice: IdChoice) {         let id = self.gen_id(id_choice);         if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() {             assert!...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [label="create_pre_key_bundle", tooltip="pub async fn create_pre_key_bundle<R: Rng + CryptoRng>(     store: &mut dyn ProtocolStore,     mut csprng: &mut R, ) -> Result<PreKeyBundle, SignalProtocolError> {     let pre_key_pair = KeyPair::gene...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [label="add_signed_pre_key", tooltip="    pub fn add_signed_pre_key(&mut self, id_choice: IdChoice) {         let id = self.gen_id(id_choice);         if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() {             asser...", fillcolor=white, style="filled"]
  }
  subgraph cluster_41 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [label="restore2", tooltip="        fn restore2(&self, req_bytes: &[u8], handshake_hash: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )             ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [label="new", tooltip="    pub fn new<R: Rng + CryptoRng>(         server_ids: &[u64],         password: &[u8],         max_tries: NonZeroU32,         rng: &mut R,     ) -> Self {         assert!(!server_ids.is_empty());   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." [label="auth_commitments", tooltip="fn auth_commitments(     server_ids: &[u64],     input: &[u8; 64],     auth_pt: &RistrettoPoint, ) -> Vec<(Scalar, RistrettoPoint)> {     let k_auth = auth_secret(input, auth_pt);     server_ids      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." [label="full_create_restore", tooltip="    fn full_create_restore() {         let mut rng = OsRng.unwrap_err();         let server_ids = vec![1u64, 2u64, 3u64];         let mut servers = server_ids             .iter()             .map(|_| ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [label="restore2", tooltip="    pub fn restore2<R: Rng + CryptoRng>(         self,         responses1_bytes: &[Vec<u8>],         handshake_hashes: &[&[u8]],         rng: &mut R,     ) -> Result<Restore2<'a>, Error> {         if ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_42 {
    label = "usernames_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [label="bench_usernames", tooltip="fn bench_usernames(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();     let usernames =         Username::candidates_from(&mut rng, ' signal' , NicknameLimits::default()).unwrap();      let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_proof()." [label="username_proof", tooltip="pub fn username_proof(username: &str, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(username)?.proof(randomness) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_hash()." [label="username_hash", tooltip="pub fn username_hash(username: &str) -> Result<[u8; 32], UsernameError> {     Username::new(username).map(|un| un.hash()) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_usernames); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_43 {
    label = "username.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar()." [label="valid_usernames_should_produce_scalar", tooltip="    fn valid_usernames_should_produce_scalar() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             username_sha_scalar(&nickname, discriminator).u...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/invalid_nicknames()." [label="invalid_nicknames", tooltip="    fn invalid_nicknames() {         for (nickname, expected_error) in [             (' ' , UsernameError::NicknameCannotBeEmpty),             (' ab🦀d' , UsernameError::BadNicknameCharacter),      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/no_discriminator()." [label="no_discriminator", tooltip="    fn no_discriminator() {         assert_eq!(             Username::new(' no_discriminator' ).expect_err(' not a valid username' ),             UsernameError::MissingSeparator         );     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/invalid_discriminators()." [label="invalid_discriminators", tooltip="    fn invalid_discriminators() {         for (discriminator, expected_error) in [             (' ' , UsernameError::DiscriminatorCannotBeEmpty),             (' 0' , UsernameError::DiscriminatorCannot...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [label="from_parts", tooltip="    pub fn from_parts(         nickname: &str,         discriminator: &str,         limits: NicknameLimits,     ) -> Result<Self, UsernameError> {         // This should perform the same set of checks...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." [label="valid_usernames", tooltip="    fn valid_usernames() {         for username in [' He110.01' , ' usr.999999999' , ' _identifier.42' , ' LOUD.700' ] {             let parsed = Username::new(username).unwrap();             _ = pars...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." [label="from_parts_without_soft_limit", tooltip="    fn from_parts_without_soft_limit(         nickname: &str,         discriminator: &str,     ) -> Result<Self, UsernameError> {         validate_prefix(nickname)?;         let discriminator = valida...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." [label="many_random_makes_valid_usernames", tooltip="    fn many_random_makes_valid_usernames() {         let mut rng = rand::rng();         let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap());         let nickname = ' _SiGNA1' ;      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits()." [label="nicknames_exceeding_soft_limits", tooltip="    fn nicknames_exceeding_soft_limits() {         Username::from_parts(' abcd' , ' 42' , NicknameLimits::default()).expect(' valid' );         assert_eq!(             Username::from_parts(' abcd' , '...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()." [label="username_sha_scalar", tooltip="fn username_sha_scalar(nickname: &str, discriminator: u64) -> Result<Scalar, UsernameError> {     let mut hash = Sha512::new();     hash.update(nickname.as_bytes());     hash.update([0x00]);     hash....", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." [label="valid_usernames_proof_and_verify", tooltip="    fn valid_usernames_proof_and_verify() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             let username = Username::new(&Username::format_parts...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [label="new", tooltip="    pub fn new(s: &str) -> Result<Self, UsernameError> {         let (nickname, discriminator) =             s.rsplit_once('.').ok_or(UsernameError::MissingSeparator)?;         Self::from_parts_withou...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." [label="make_scalars", tooltip="fn make_scalars(nickname: &str, discriminator: u64) -> Result<Vec<Scalar>, UsernameError> {     Ok(vec![         username_sha_scalar(nickname, discriminator)?,         nickname_scalar(nickname)?,     ...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/test_lossless_round_trip()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_random_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/destination_contact()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPublicKey_Verify()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_signedprekey_not_saved()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_recv_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 validate_proto()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 validate()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar()." -> "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 run()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit_with_self()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_large_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_DecryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom<(String, Option<proto::account_data::UsernameLink>)>`]try_from()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_destination_contact()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_late_join()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_nicknames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_nicknames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`backup::PartialBackup<M>`]parse_and_add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 is_valid_encrypted_proto()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 invalid_jsonproto()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_simultaneous_initiate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/tests/test_large_signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." [color=gray, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/no_discriminator()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`backup::PartialBackup<M>`]parse_and_add_frame()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/duplicate_non_contact_recipient()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_duplicate_message_error_returned()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_missing_foreign_key()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_signed_pre_key_signature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 validate()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_discriminators()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/invalid_discriminators()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/pni_matching_aci_is_okay()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_too_far_in_the_future()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/zero_chat_id()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_longer_sessions()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 validation()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 parse_and_validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_message_key_limits()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ServerCertificate_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 benches()." -> "rust-analyzer cargo libsignal-core 0.1.0 signatures()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/destination_distribution_list()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_destination_group()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SealedSender_DecryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_chain_jump_over_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/destination_group()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_multiple_account_data()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/valid_account_data()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/impl#[`AccountData<Store>`]from_proto_test_data()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_repeat_bundle_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 prekey_message_to_archived_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_no_send_session()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_out_of_order()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_with_lossage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]validate_all()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]collect_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_optional_one_time_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_key_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/tests/test_alternate_identity_signing()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_missing_all_folder()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/backup_from_frames()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 process()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`backup::PartialBackup<M>`]parse_and_add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 process()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]validate_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 parse_and_validate()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`backup::PartialBackup<M>`]parse_and_add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_decryption_error_in_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_unacknowledged_sessions_eventually_expire()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_decryption_error_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/can_serialize()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/impl#[`AccountData<Store>`]from_proto_test_data()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]collect_all()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 read_all_frames()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/zero_recipient_id()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 main()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/backup_from_frames()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_encrypt_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith<ContactData, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_revoked_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_hash()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 benches()." -> "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_empty_if_disabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/tests/test_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/chat_item_order()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_duplicate_id()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_duplicate_id()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_duplicate_id()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_destination_self()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/GroupCipher_EncryptMessage()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_message_key_limit()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 can_serialize_json_proto()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_Validate()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/valid_distribution_list()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_bad_message_bundle()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/serialize/test/backup_from_frames()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender_multi_recipient()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_HashFromParts()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_server_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 message_backup/MessageBackupValidator_Validate()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]validate_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/sealed_sender_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sealed_sender()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 serialized_account_settings_is_valid()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/rejects_duplicate_all_folder()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_zero_is_a_valid_prekey_id()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/ECPrivateKey_Sign()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]collect_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_simultaneous_initiate_lost_message()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." -> "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 benches()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 v1()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_basic_ratchet()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/test/requires_destination()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith<Destination<R>, C>`]try_into_with()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 ratchet_forward_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge-testing 0.1.0 message_backup/ComparableBackup_ReadUnencrypted()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderCertificate_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Restore]restore()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_restore()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 run()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_basic_prekey()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith<ContactData, C>`]try_into_with()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [color=blue]
  "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[`Restore1<'a>`]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 auth_commitments()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_decrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [color=blue]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 test_sender_cert()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 impl#[Backup4]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 protocol/SenderKeyMessage_New()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 read_all_frames()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`backup::PartialBackup<M>`]parse_and_add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 signatures()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[KeyPair]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 session/process_prekey_bundle()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 session_encrypt_result()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [color=blue]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/allows_lone_all_folder()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame_item()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/allows_lone_all_folder()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/test/duplicate_contact_id()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_recipient()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/create_pre_key_bundle()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PrivateKey]calculate_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 main()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`backup::PartialBackup<M>`]parse_and_add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 main()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/impl#[`PartialBackup<M>`]add_frame()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 group_cipher/group_encrypt()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 protocol/impl#[SenderKeyMessage]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_hash()." [color=blue]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scrambler_smoke_test()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 impl#[`BackupReader<R>`]read_all()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 svrb/traits/impl#[T][Backup]prepare()." -> "rust-analyzer cargo libsignal-net 0.1.0 svrb/ppss_ops/do_prepare()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/account_data/test/impl#[`AccountData<Store>`]from_proto_test_data()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message()." -> "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key()." -> "rust-analyzer cargo libsignal-protocol 0.1.0 support/impl#[TestStoreBuilder]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/make_scalars()." -> "rust-analyzer cargo usernames 0.1.0 username/username_sha_scalar()." [color=blue, style=dashed]
}
