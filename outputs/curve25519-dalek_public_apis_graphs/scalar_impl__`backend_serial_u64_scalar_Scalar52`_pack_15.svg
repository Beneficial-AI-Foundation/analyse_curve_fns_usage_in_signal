<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="5955pt" height="12476pt"
 viewBox="0.00 0.00 5955.00 12475.86" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 12471.86)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-12471.86 5951,-12471.86 5951,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5206,-5638.86 5206,-5821.86 5939,-5821.86 5939,-5638.86 5206,-5638.86"/>
<text text-anchor="middle" x="5572.5" y="-5806.66" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4183.5,-3938.86 4183.5,-4013.86 5080.5,-4013.86 5080.5,-3938.86 4183.5,-3938.86"/>
<text text-anchor="middle" x="4632" y="-3998.66" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3222,-3855.86 3222,-3930.86 4740.5,-3930.86 4740.5,-3855.86 3222,-3855.86"/>
<text text-anchor="middle" x="3981.25" y="-3915.66" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="1185.5,-11291.86 1185.5,-11366.86 1451.5,-11366.86 1451.5,-11291.86 1185.5,-11291.86"/>
<text text-anchor="middle" x="1318.5" y="-11351.66" font-family="Helvetica,sans-Serif" font-size="14.00">message_backup.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="32.5,-4091.86 32.5,-4220.86 284.5,-4220.86 284.5,-4091.86 32.5,-4091.86"/>
<text text-anchor="middle" x="158.5" y="-4205.66" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="2457,-2904.86 2457,-3627.86 2747,-3627.86 2747,-2904.86 2457,-2904.86"/>
<text text-anchor="middle" x="2602" y="-3612.66" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="3670.5,-11648.86 3670.5,-11885.86 3883.5,-11885.86 3883.5,-11648.86 3670.5,-11648.86"/>
<text text-anchor="middle" x="3777" y="-11870.66" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="2960,-7629.86 2960,-10080.86 3556,-10080.86 3556,-7629.86 2960,-7629.86"/>
<text text-anchor="middle" x="3258" y="-10065.66" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="3212.5,-3772.86 3212.5,-3847.86 3829.5,-3847.86 3829.5,-3772.86 3212.5,-3772.86"/>
<text text-anchor="middle" x="3521" y="-3832.66" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="4177,-692.86 4177,-767.86 4281,-767.86 4281,-692.86 4177,-692.86"/>
<text text-anchor="middle" x="4229" y="-752.66" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="4139,-3160.86 4139,-3329.86 5186,-3329.86 5186,-3160.86 4139,-3160.86"/>
<text text-anchor="middle" x="4662.5" y="-3314.66" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="4920.5,-3771.86 4920.5,-3900.86 5380,-3900.86 5380,-3771.86 4920.5,-3771.86"/>
<text text-anchor="middle" x="5150.25" y="-3885.66" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="729,-4091.86 729,-4166.86 1118,-4166.86 1118,-4091.86 729,-4091.86"/>
<text text-anchor="middle" x="923.5" y="-4151.66" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="1252.5,-3898.86 1252.5,-4027.86 1384.5,-4027.86 1384.5,-3898.86 1252.5,-3898.86"/>
<text text-anchor="middle" x="1318.5" y="-4012.66" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1485,-3848.86 1485,-3977.86 2711.5,-3977.86 2711.5,-3848.86 1485,-3848.86"/>
<text text-anchor="middle" x="2098.25" y="-3962.66" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="2018,-4010.86 2018,-4139.86 2666.5,-4139.86 2666.5,-4010.86 2018,-4010.86"/>
<text text-anchor="middle" x="2342.25" y="-4124.66" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="434,-11237.86 434,-11366.86 857.5,-11366.86 857.5,-11237.86 434,-11237.86"/>
<text text-anchor="middle" x="645.75" y="-11351.66" font-family="Helvetica,sans-Serif" font-size="14.00">validation.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="1485,-11511.86 1485,-11984.86 2665,-11984.86 2665,-11511.86 1485,-11511.86"/>
<text text-anchor="middle" x="2075" y="-11969.66" font-family="Helvetica,sans-Serif" font-size="14.00">backup.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="3175.5,-11511.86 3175.5,-11640.86 3866,-11640.86 3866,-11511.86 3175.5,-11511.86"/>
<text text-anchor="middle" x="3520.75" y="-11625.66" font-family="Helvetica,sans-Serif" font-size="14.00">account_data.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="2044.5,-5411.86 2044.5,-5540.86 3353,-5540.86 3353,-5411.86 2044.5,-5411.86"/>
<text text-anchor="middle" x="2698.75" y="-5525.66" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="2490.5,-11050.86 2490.5,-11503.86 3837.5,-11503.86 3837.5,-11050.86 2490.5,-11050.86"/>
<text text-anchor="middle" x="3164" y="-11488.66" font-family="Helvetica,sans-Serif" font-size="14.00">recipient.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1172,-11992.86 1172,-12175.86 1686,-12175.86 1686,-11992.86 1172,-11992.86"/>
<text text-anchor="middle" x="1429" y="-12160.66" font-family="Helvetica,sans-Serif" font-size="14.00">serialize.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1283.5,-11600.86 1283.5,-11675.86 1353.5,-11675.86 1353.5,-11600.86 1283.5,-11600.86"/>
<text text-anchor="middle" x="1318.5" y="-11660.66" font-family="Helvetica,sans-Serif" font-size="14.00">main.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="719.5,-11374.86 719.5,-11503.86 1690.5,-11503.86 1690.5,-11374.86 719.5,-11374.86"/>
<text text-anchor="middle" x="1205" y="-11488.66" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="2078,-5328.86 2078,-5403.86 3297,-5403.86 3297,-5328.86 2078,-5328.86"/>
<text text-anchor="middle" x="2687.5" y="-5388.66" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="3145,-10723.86 3145,-10798.86 3371,-10798.86 3371,-10723.86 3145,-10723.86"/>
<text text-anchor="middle" x="3258" y="-10783.66" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="329,-3792.86 329,-4083.86 1152,-4083.86 1152,-3792.86 329,-3792.86"/>
<text text-anchor="middle" x="740.5" y="-4068.66" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-3738.86 8,-4083.86 309,-4083.86 309,-3738.86 8,-3738.86"/>
<text text-anchor="middle" x="158.5" y="-4068.66" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="3146.5,-5191.86 3146.5,-5320.86 3369.5,-5320.86 3369.5,-5191.86 3146.5,-5191.86"/>
<text text-anchor="middle" x="3258" y="-5305.66" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="3117,-4504.86 3117,-4633.86 3832,-4633.86 3832,-4504.86 3117,-4504.86"/>
<text text-anchor="middle" x="3474.5" y="-4618.66" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="3215,-4367.86 3215,-4496.86 3301,-4496.86 3301,-4367.86 3215,-4367.86"/>
<text text-anchor="middle" x="3258" y="-4481.66" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="5452.5,-8013.86 5452.5,-8088.86 5554.5,-8088.86 5554.5,-8013.86 5452.5,-8013.86"/>
<text text-anchor="middle" x="5503.5" y="-8073.66" font-family="Helvetica,sans-Serif" font-size="14.00">proof.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="4909,-12330.86 4909,-12459.86 5131,-12459.86 5131,-12330.86 4909,-12330.86"/>
<text text-anchor="middle" x="5020" y="-12444.66" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="4163.5,-11022.86 4163.5,-11151.86 4729,-11151.86 4729,-11022.86 4163.5,-11022.86"/>
<text text-anchor="middle" x="4446.25" y="-11136.66" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="4556.5,-10132.86 4556.5,-10227.86 5354,-10227.86 5354,-10132.86 4556.5,-10132.86"/>
<text text-anchor="middle" x="4955.25" y="-10212.66" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="1804.5,-1438.86 1804.5,-1513.86 1895.5,-1513.86 1895.5,-1438.86 1804.5,-1438.86"/>
<text text-anchor="middle" x="1850" y="-1498.66" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="1809,-1575.86 1809,-1650.86 2696,-1650.86 2696,-1575.86 1809,-1575.86"/>
<text text-anchor="middle" x="2252.5" y="-1635.66" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="2536,-1438.86 2536,-1567.86 2669,-1567.86 2669,-1438.86 2536,-1438.86"/>
<text text-anchor="middle" x="2602.5" y="-1552.66" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="2045,-30.86 2045,-105.86 2697,-105.86 2697,-30.86 2045,-30.86"/>
<text text-anchor="middle" x="2371" y="-90.66" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="3191.5,-1982.86 3191.5,-2111.86 3324.5,-2111.86 3324.5,-1982.86 3191.5,-1982.86"/>
<text text-anchor="middle" x="3258" y="-2096.66" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="2480,-3635.86 2480,-3764.86 3357.5,-3764.86 3357.5,-3635.86 2480,-3635.86"/>
<text text-anchor="middle" x="2918.75" y="-3749.66" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="3598,-2903.86 3598,-3086.86 4264,-3086.86 4264,-2903.86 3598,-2903.86"/>
<text text-anchor="middle" x="3931" y="-3071.66" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="3159,-2497.86 3159,-2734.86 4272.5,-2734.86 4272.5,-2497.86 3159,-2497.86"/>
<text text-anchor="middle" x="3715.75" y="-2719.66" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="3161,-1629.86 3161,-1704.86 3355,-1704.86 3355,-1629.86 3161,-1629.86"/>
<text text-anchor="middle" x="3258" y="-1689.66" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="4166.5,-609.86 4166.5,-684.86 4291.5,-684.86 4291.5,-609.86 4166.5,-609.86"/>
<text text-anchor="middle" x="4229" y="-669.66" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="2362.5,-1658.86 2362.5,-2327.86 2841.5,-2327.86 2841.5,-1658.86 2362.5,-1658.86"/>
<text text-anchor="middle" x="2602" y="-2312.66" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="2347.5,-2335.86 2347.5,-2896.86 2856.5,-2896.86 2856.5,-2335.86 2347.5,-2335.86"/>
<text text-anchor="middle" x="2602" y="-2881.66" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="2264,-113.86 2264,-1430.86 3293,-1430.86 3293,-113.86 2264,-113.86"/>
<text text-anchor="middle" x="2778.5" y="-1415.66" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="3163,-1438.86 3163,-1621.86 4264,-1621.86 4264,-1438.86 3163,-1438.86"/>
<text text-anchor="middle" x="3713.5" y="-1606.66" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="3697.5,-4165.86 3697.5,-4496.86 5098,-4496.86 5098,-4165.86 3697.5,-4165.86"/>
<text text-anchor="middle" x="4397.75" y="-4481.66" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="2556.5,-4641.86 2556.5,-4770.86 3849,-4770.86 3849,-4641.86 2556.5,-4641.86"/>
<text text-anchor="middle" x="3202.75" y="-4755.66" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightblue" stroke="lightblue" points="3623.5,-11893.86 3623.5,-12292.86 5387.5,-12292.86 5387.5,-11893.86 3623.5,-11893.86"/>
<text text-anchor="middle" x="4505.5" y="-12277.66" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightblue" stroke="lightblue" points="3731.5,-5093.86 3731.5,-5222.86 4309,-5222.86 4309,-5093.86 3731.5,-5093.86"/>
<text text-anchor="middle" x="4020.25" y="-5207.66" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightblue" stroke="lightblue" points="4551,-4925.86 4551,-5000.86 4763,-5000.86 4763,-4925.86 4551,-4925.86"/>
<text text-anchor="middle" x="4657" y="-4985.66" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightblue" stroke="lightblue" points="4962.5,-5090.86 4962.5,-5219.86 5077.5,-5219.86 5077.5,-5090.86 4962.5,-5090.86"/>
<text text-anchor="middle" x="5020" y="-5204.66" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightblue" stroke="lightblue" points="4936,-5471.86 4936,-5600.86 5551,-5600.86 5551,-5471.86 4936,-5471.86"/>
<text text-anchor="middle" x="5243.5" y="-5585.66" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightblue" stroke="lightblue" points="4121,-8140.86 4121,-8485.86 5132.5,-8485.86 5132.5,-8140.86 4121,-8140.86"/>
<text text-anchor="middle" x="4626.75" y="-8470.66" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightblue" stroke="lightblue" points="4610,-7241.86 4610,-7370.86 4705,-7370.86 4705,-7241.86 4610,-7241.86"/>
<text text-anchor="middle" x="4657.5" y="-7355.66" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightblue" stroke="lightblue" points="4573,-5971.86 4573,-6208.86 5344.5,-6208.86 5344.5,-5971.86 4573,-5971.86"/>
<text text-anchor="middle" x="4958.75" y="-6193.66" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightblue" stroke="lightblue" points="4596.5,-6263.86 4596.5,-6392.86 4718.5,-6392.86 4718.5,-6263.86 4596.5,-6263.86"/>
<text text-anchor="middle" x="4657.5" y="-6377.66" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightblue" stroke="lightblue" points="5452,-6260.86 5452,-6335.86 5555,-6335.86 5555,-6260.86 5452,-6260.86"/>
<text text-anchor="middle" x="5503.5" y="-6320.66" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightblue" stroke="lightblue" points="2556.5,-10447.86 2556.5,-10522.86 3392,-10522.86 3392,-10447.86 2556.5,-10447.86"/>
<text text-anchor="middle" x="2974.25" y="-10507.66" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightblue" stroke="lightblue" points="3105,-5548.86 3105,-5731.86 3411,-5731.86 3411,-5548.86 3105,-5548.86"/>
<text text-anchor="middle" x="3258" y="-5716.66" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightblue" stroke="lightblue" points="3674.5,-8846.86 3674.5,-8975.86 3880.5,-8975.86 3880.5,-8846.86 3674.5,-8846.86"/>
<text text-anchor="middle" x="3777.5" y="-8960.66" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightblue" stroke="lightblue" points="3685,-7133.86 3685,-7424.86 4329.5,-7424.86 4329.5,-7133.86 3685,-7133.86"/>
<text text-anchor="middle" x="4007.25" y="-7409.66" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightblue" stroke="lightblue" points="3109,-5905.86 3109,-6276.86 4321.5,-6276.86 4321.5,-5905.86 3109,-5905.86"/>
<text text-anchor="middle" x="3715.25" y="-6261.66" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightblue" stroke="lightblue" points="4157,-7538.86 4157,-7775.86 4301,-7775.86 4301,-7538.86 4157,-7538.86"/>
<text text-anchor="middle" x="4229" y="-7760.66" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust68" class="cluster">
<title>cluster_67</title>
<polygon fill="lightblue" stroke="lightblue" points="4153.5,-6744.86 4153.5,-7035.86 4305.5,-7035.86 4305.5,-6744.86 4153.5,-6744.86"/>
<text text-anchor="middle" x="4229.5" y="-7020.66" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust69" class="cluster">
<title>cluster_68</title>
<polygon fill="lightblue" stroke="lightblue" points="4139,-7783.86 4139,-7912.86 4319,-7912.86 4319,-7783.86 4139,-7783.86"/>
<text text-anchor="middle" x="4229" y="-7897.66" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust70" class="cluster">
<title>cluster_69</title>
<polygon fill="lightblue" stroke="lightblue" points="4558.5,-5623.86 4558.5,-5698.86 4755.5,-5698.86 4755.5,-5623.86 4558.5,-5623.86"/>
<text text-anchor="middle" x="4657" y="-5683.66" font-family="Helvetica,sans-Serif" font-size="14.00">generic_server_params.rs</text>
</g>
<g id="clust71" class="cluster">
<title>cluster_70</title>
<polygon fill="lightblue" stroke="lightblue" points="3667.5,-6445.86 3667.5,-6736.86 4757.5,-6736.86 4757.5,-6445.86 3667.5,-6445.86"/>
<text text-anchor="middle" x="4212.5" y="-6721.66" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust72" class="cluster">
<title>cluster_71</title>
<polygon fill="lightblue" stroke="lightblue" points="3618,-8493.86 3618,-8838.86 4393.5,-8838.86 4393.5,-8493.86 3618,-8493.86"/>
<text text-anchor="middle" x="4005.75" y="-8823.66" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust73" class="cluster">
<title>cluster_72</title>
<polygon fill="lightblue" stroke="lightblue" points="3702,-5716.86 3702,-5791.86 3852,-5791.86 3852,-5716.86 3702,-5716.86"/>
<text text-anchor="middle" x="3777" y="-5776.66" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust74" class="cluster">
<title>cluster_73</title>
<polygon fill="lightblue" stroke="lightblue" points="3582.5,-10237.86 3582.5,-11014.86 4421.5,-11014.86 4421.5,-10237.86 3582.5,-10237.86"/>
<text text-anchor="middle" x="4002" y="-10999.66" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust75" class="cluster">
<title>cluster_74</title>
<polygon fill="lightblue" stroke="lightblue" points="3125,-5739.86 3125,-5814.86 3391,-5814.86 3391,-5739.86 3125,-5739.86"/>
<text text-anchor="middle" x="3258" y="-5799.66" font-family="Helvetica,sans-Serif" font-size="14.00">generate_generic_server_params.rs</text>
</g>
<g id="clust76" class="cluster">
<title>cluster_75</title>
<polygon fill="lightblue" stroke="lightblue" points="5245.5,-9128.86 5245.5,-9203.86 5348.5,-9203.86 5348.5,-9128.86 5245.5,-9128.86"/>
<text text-anchor="middle" x="5297" y="-9188.66" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust77" class="cluster">
<title>cluster_76</title>
<polygon fill="lightblue" stroke="lightblue" points="4544,-8710.86 4544,-8839.86 4770,-8839.86 4770,-8710.86 4544,-8710.86"/>
<text text-anchor="middle" x="4657" y="-8824.66" font-family="Helvetica,sans-Serif" font-size="14.00">simple_types.rs</text>
</g>
<g id="clust78" class="cluster">
<title>cluster_77</title>
<polygon fill="lightblue" stroke="lightblue" points="4070,-9066.86 4070,-9249.86 5088.5,-9249.86 5088.5,-9066.86 4070,-9066.86"/>
<text text-anchor="middle" x="4579.25" y="-9234.66" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust79" class="cluster">
<title>cluster_78</title>
<polygon fill="lightblue" stroke="lightblue" points="4152.5,-8057.86 4152.5,-8132.86 5059.5,-8132.86 5059.5,-8057.86 4152.5,-8057.86"/>
<text text-anchor="middle" x="4606" y="-8117.66" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust80" class="cluster">
<title>cluster_79</title>
<polygon fill="lightblue" stroke="lightblue" points="4135,-9909.86 4135,-10038.86 4704.5,-10038.86 4704.5,-9909.86 4135,-9909.86"/>
<text text-anchor="middle" x="4419.75" y="-10023.66" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust81" class="cluster">
<title>cluster_80</title>
<polygon fill="lightblue" stroke="lightblue" points="4546.5,-4842.86 4546.5,-4917.86 5063,-4917.86 5063,-4842.86 4546.5,-4842.86"/>
<text text-anchor="middle" x="4804.75" y="-4902.66" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust82" class="cluster">
<title>cluster_81</title>
<polygon fill="lightblue" stroke="lightblue" points="4618,-9340.86 4618,-9901.86 4696,-9901.86 4696,-9340.86 4618,-9340.86"/>
<text text-anchor="middle" x="4657" y="-9886.66" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust83" class="cluster">
<title>cluster_82</title>
<polygon fill="lightblue" stroke="lightblue" points="4121.5,-7920.86 4121.5,-8049.86 4337.5,-8049.86 4337.5,-7920.86 4121.5,-7920.86"/>
<text text-anchor="middle" x="4229.5" y="-8034.66" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust84" class="cluster">
<title>cluster_83</title>
<polygon fill="lightblue" stroke="lightblue" points="4612.5,-9257.86 4612.5,-9332.86 5084,-9332.86 5084,-9257.86 4612.5,-9257.86"/>
<text text-anchor="middle" x="4848.25" y="-9317.66" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_struct.rs</text>
</g>
<g id="clust85" class="cluster">
<title>cluster_84</title>
<polygon fill="lightblue" stroke="lightblue" points="3711.5,-10046.86 3711.5,-10229.86 4276.5,-10229.86 4276.5,-10046.86 3711.5,-10046.86"/>
<text text-anchor="middle" x="3994" y="-10214.66" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust86" class="cluster">
<title>cluster_85</title>
<polygon fill="lightblue" stroke="lightblue" points="4617,-8983.86 4617,-9058.86 5079.5,-9058.86 5079.5,-8983.86 4617,-8983.86"/>
<text text-anchor="middle" x="4848.25" y="-9043.66" font-family="Helvetica,sans-Serif" font-size="14.00">timestamp_struct.rs</text>
</g>
<g id="clust87" class="cluster">
<title>cluster_86</title>
<polygon fill="lightblue" stroke="lightblue" points="4573,-5228.86 4573,-5357.86 5063,-5357.86 5063,-5228.86 4573,-5228.86"/>
<text text-anchor="middle" x="4818" y="-5342.66" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust88" class="cluster">
<title>cluster_87</title>
<polygon fill="lightblue" stroke="lightblue" points="3998,-4686.86 3998,-5085.86 4460,-5085.86 4460,-4686.86 3998,-4686.86"/>
<text text-anchor="middle" x="4229" y="-5070.66" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust89" class="cluster">
<title>cluster_88</title>
<polygon fill="lightblue" stroke="lightblue" points="3116.5,-5822.86 3116.5,-5897.86 3399.5,-5897.86 3399.5,-5822.86 3116.5,-5822.86"/>
<text text-anchor="middle" x="3258" y="-5882.66" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust90" class="cluster">
<title>cluster_89</title>
<polygon fill="lightblue" stroke="lightblue" points="3576,-6888.86 3576,-7125.86 3978,-7125.86 3978,-6888.86 3576,-6888.86"/>
<text text-anchor="middle" x="3777" y="-7110.66" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust91" class="cluster">
<title>cluster_90</title>
<polygon fill="lightblue" stroke="lightblue" points="3121.5,-5000.86 3121.5,-5183.86 3394.5,-5183.86 3394.5,-5000.86 3121.5,-5000.86"/>
<text text-anchor="middle" x="3258" y="-5168.66" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust92" class="cluster">
<title>cluster_91</title>
<polygon fill="lightblue" stroke="lightblue" points="3034.5,-10148.86 3034.5,-10439.86 3481.5,-10439.86 3481.5,-10148.86 3034.5,-10148.86"/>
<text text-anchor="middle" x="3258" y="-10424.66" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust93" class="cluster">
<title>cluster_92</title>
<polygon fill="lightblue" stroke="lightblue" points="3164,-4863.86 3164,-4992.86 3352,-4992.86 3352,-4863.86 3164,-4863.86"/>
<text text-anchor="middle" x="3258" y="-4977.66" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5364,-5736.86 5230,-5736.86 5230,-5700.86 5364,-5700.86 5364,-5736.86"/>
<text text-anchor="middle" x="5297" y="-5715.16" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5548,-5682.86 5459,-5682.86 5459,-5646.86 5548,-5646.86 5548,-5682.86"/>
<text text-anchor="middle" x="5503.5" y="-5661.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5364.11,-5701.41C5391.64,-5694.14 5423.17,-5685.81 5449.18,-5678.94"/>
<polygon fill="gray" stroke="gray" points="5450.08,-5682.32 5458.86,-5676.39 5448.29,-5675.56 5450.08,-5682.32"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn from_canonical_bytes(bytes: [u8; 32]) &#45;&gt; CtOption&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let high_bit_unset = (bytes[31] &gt;&gt; 7).ct_eq(&amp;0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let candidate = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtOption::new(candidat...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5380,-5682.86 5214,-5682.86 5214,-5646.86 5380,-5646.86 5380,-5682.86"/>
<text text-anchor="middle" x="5297" y="-5661.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_canonical_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn is_canonical(&amp;self) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(&amp;self.reduce()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5553.5,-5736.86 5453.5,-5736.86 5453.5,-5700.86 5553.5,-5700.86 5553.5,-5736.86"/>
<text text-anchor="middle" x="5503.5" y="-5715.16" font-family="Helvetica,sans-Serif" font-size="14.00">is_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5366.38,-5682.92C5391.38,-5689.52 5419.43,-5696.93 5443.54,-5703.29"/>
<polygon fill="gray" stroke="gray" points="5442.7,-5706.69 5453.26,-5705.86 5444.49,-5699.92 5442.7,-5706.69"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5762.5,-5736.86 5705.5,-5736.86 5705.5,-5700.86 5762.5,-5700.86 5762.5,-5736.86"/>
<text text-anchor="middle" x="5734" y="-5715.16" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn pack(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes: self.as_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="5931,-5736.86 5877,-5736.86 5877,-5700.86 5931,-5700.86 5931,-5736.86"/>
<text text-anchor="middle" x="5904" y="-5715.16" font-family="Helvetica,sans-Serif" font-size="14.00">pack</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5762.74,-5718.86C5791.21,-5718.86 5835.63,-5718.86 5866.84,-5718.86"/>
<polygon fill="gray" stroke="gray" points="5866.88,-5722.36 5876.88,-5718.86 5866.88,-5715.36 5866.88,-5722.36"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5841,-5790.86 5627,-5790.86 5627,-5754.86 5841,-5754.86 5841,-5790.86"/>
<text text-anchor="middle" x="5734" y="-5769.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5811.86,-5754.85C5821.74,-5752.08 5831.66,-5749.06 5841,-5745.86 5849.72,-5742.88 5858.91,-5739.19 5867.48,-5735.5"/>
<polygon fill="gray" stroke="gray" points="5869.08,-5738.62 5876.82,-5731.38 5866.26,-5732.21 5869.08,-5738.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn reduce(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = self.unpack(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let xR = UnpackedScalar::mul_internal(&amp;x, &amp;constants::R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x_mod_l = UnpackedScalar::montgomery_reduce(&amp;xR); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5766,-5682.86 5702,-5682.86 5702,-5646.86 5766,-5646.86 5766,-5682.86"/>
<text text-anchor="middle" x="5734" y="-5661.16" font-family="Helvetica,sans-Serif" font-size="14.00">reduce</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5553.52,-5707.28C5594.81,-5697.52 5653.19,-5683.72 5692.03,-5674.55"/>
<polygon fill="gray" stroke="gray" points="5693.02,-5677.91 5701.95,-5672.2 5691.41,-5671.1 5693.02,-5677.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="edge506" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5766.46,-5671.48C5787.76,-5676.29 5816.39,-5683.43 5841,-5691.86 5849.72,-5694.85 5858.91,-5698.54 5867.48,-5702.23"/>
<polygon fill="gray" stroke="gray" points="5866.26,-5705.51 5876.82,-5706.35 5869.08,-5699.11 5866.26,-5705.51"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order(bytes: [u8; 32]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Temporarily allow s_unreduced.bytes &gt; 2^255 ... &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s_unreduced = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Then reduce mod the grou...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5591,-5790.86 5416,-5790.86 5416,-5754.86 5591,-5754.86 5591,-5790.86"/>
<text text-anchor="middle" x="5503.5" y="-5769.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge592" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5576.3,-5754.84C5581.5,-5752.23 5586.47,-5749.26 5591,-5745.86 5614.09,-5728.58 5603.46,-5708.53 5627,-5691.86 5645.91,-5678.47 5670.88,-5671.71 5691.83,-5668.3"/>
<polygon fill="gray" stroke="gray" points="5692.35,-5671.77 5701.75,-5666.89 5691.36,-5664.84 5692.35,-5671.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge804" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5548.13,-5672.34C5562.77,-5676.38 5578.53,-5682.53 5591,-5691.86 5614.09,-5709.15 5603.46,-5729.2 5627,-5745.86 5629.1,-5747.35 5631.28,-5748.76 5633.52,-5750.09"/>
<polygon fill="gray" stroke="gray" points="5631.95,-5753.22 5642.42,-5754.84 5635.25,-5747.04 5631.95,-5753.22"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn try_from(sig: &amp;ed25519::Signature) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;InternalSignature::from_bytes(&amp;sig.to_bytes()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4266.5,-3982.86 4191.5,-3982.86 4191.5,-3946.86 4266.5,-3946.86 4266.5,-3982.86"/>
<text text-anchor="middle" x="4229" y="-3961.16" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; SIGNATURE_LENGTH]) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO: Use bytes.split_array_ref once it’s in MSRV. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut R_bytes: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4704,-3982.86 4610,-3982.86 4610,-3946.86 4704,-3946.86 4704,-3982.86"/>
<text text-anchor="middle" x="4657" y="-3961.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4266.69,-3964.86C4341.24,-3964.86 4510.85,-3964.86 4599.56,-3964.86"/>
<polygon fill="gray" stroke="gray" points="4599.7,-3968.36 4609.7,-3964.86 4599.7,-3961.36 4599.7,-3968.36"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<g id="a_node12"><a xlink:title="fn check_scalar(bytes: [u8; 32]) &#45;&gt; Result&lt;Scalar, SignatureError&gt; { &#160;&#160;&#160;&#160;match Scalar::from_canonical_bytes(bytes).into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(InternalError::ScalarFormat.into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(x) =&gt; ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5072.5,-3982.86 4967.5,-3982.86 4967.5,-3946.86 5072.5,-3946.86 5072.5,-3982.86"/>
<text text-anchor="middle" x="5020" y="-3961.16" font-family="Helvetica,sans-Serif" font-size="14.00">check_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="edge728" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4704.09,-3964.86C4768.4,-3964.86 4885.24,-3964.86 4957.1,-3964.86"/>
<polygon fill="gray" stroke="gray" points="4957.36,-3968.36 4967.36,-3964.86 4957.36,-3961.36 4957.36,-3968.36"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge825" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5072.61,-3978.14C5111.24,-3991.06 5161.45,-4014.89 5186,-4055.86 5230.24,-4129.69 5164.9,-5529.25 5206,-5604.86 5214.4,-5620.31 5228.69,-5632.48 5243.44,-5641.71"/>
<polygon fill="gray" stroke="gray" points="5241.74,-5644.77 5252.14,-5646.81 5245.28,-5638.73 5241.74,-5644.77"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4732.5,-3899.86 4581.5,-3899.86 4581.5,-3863.86 4732.5,-3863.86 4732.5,-3899.86"/>
<text text-anchor="middle" x="4657" y="-3878.16" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4732.57,-3890.63C4771.18,-3895.08 4819.1,-3900.46 4862,-3904.86 4933.93,-3912.25 5124.13,-3897.43 5186,-3934.86 5326.91,-4020.12 5339.15,-4088.42 5387.5,-4245.86 5409.67,-4318.05 5380.28,-5538.33 5416,-5604.86 5424.09,-5619.93 5437.82,-5632 5451.99,-5641.25"/>
<polygon fill="gray" stroke="gray" points="5450.47,-5644.42 5460.83,-5646.65 5454.12,-5638.45 5450.47,-5644.42"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4282.5,-3899.86 4175.5,-3899.86 4175.5,-3863.86 4282.5,-3863.86 4282.5,-3899.86"/>
<text text-anchor="middle" x="4229" y="-3878.16" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge746" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4282.66,-3881.86C4354.75,-3881.86 4485,-3881.86 4571,-3881.86"/>
<polygon fill="gray" stroke="gray" points="4571.26,-3885.36 4581.26,-3881.86 4571.26,-3878.36 4571.26,-3885.36"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3821,-3899.86 3733,-3899.86 3733,-3863.86 3821,-3863.86 3821,-3899.86"/>
<text text-anchor="middle" x="3777" y="-3878.16" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="edge806" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3821.12,-3893.7C3865.26,-3905.47 3936,-3923.38 3998,-3934.86 4060.95,-3946.52 4134.41,-3955.27 4181.06,-3960.22"/>
<polygon fill="gray" stroke="gray" points="4180.85,-3963.72 4191.16,-3961.28 4181.58,-3956.76 4180.85,-3963.72"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge805" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3821.15,-3881.86C3901.08,-3881.86 4072.49,-3881.86 4165.26,-3881.86"/>
<polygon fill="gray" stroke="gray" points="4165.36,-3885.36 4175.36,-3881.86 4165.36,-3878.36 4165.36,-3885.36"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3286,-3899.86 3230,-3899.86 3230,-3863.86 3286,-3863.86 3286,-3899.86"/>
<text text-anchor="middle" x="3258" y="-3878.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge847" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3286.07,-3881.86C3367.89,-3881.86 3613.67,-3881.86 3722.8,-3881.86"/>
<polygon fill="gray" stroke="gray" points="3722.93,-3885.36 3732.93,-3881.86 3722.93,-3878.36 3722.93,-3885.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().</title>
<g id="a_node17"><a xlink:title="fn OnlineBackupValidator_AddFrame( &#160;&#160;&#160;&#160;backup: &amp;mut OnlineBackupValidator, &#160;&#160;&#160;&#160;frame: &amp;[u8], ) &#45;&gt; Result&lt;(), ReadError&gt; { &#160;&#160;&#160;&#160;let unknown_fields = backup &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_mut() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_and_add_fram...">
<polygon fill="white" stroke="black" points="1443.5,-11335.86 1193.5,-11335.86 1193.5,-11299.86 1443.5,-11299.86 1443.5,-11335.86"/>
<text text-anchor="middle" x="1318.5" y="-11314.16" font-family="Helvetica,sans-Serif" font-size="14.00">OnlineBackupValidator_AddFrame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;pub fn parse_and_add_frame( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;raw_frame: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut visitor: impl FnMut(&amp;proto::backup::Frame) + Send, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;(Vec&lt;PathPart&gt;, UnknownValue)&gt;, crate::E...">
<polygon fill="white" stroke="black" points="1682.5,-11472.86 1512.5,-11472.86 1512.5,-11436.86 1682.5,-11436.86 1682.5,-11472.86"/>
<text text-anchor="middle" x="1597.5" y="-11451.16" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1372.65,-11335.9C1398.55,-11345.3 1429.88,-11357.6 1457,-11370.86 1493.78,-11388.85 1533.59,-11413.37 1561.23,-11431.28"/>
<polygon fill="blue" stroke="blue" points="1559.47,-11434.31 1569.76,-11436.84 1563.3,-11428.44 1559.47,-11434.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().</title>
<g id="a_node18"><a xlink:title="async fn KeyTransparency_Distinguished( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedCha...">
<polygon fill="white" stroke="black" points="276.5,-4189.86 40.5,-4189.86 40.5,-4153.86 276.5,-4153.86 276.5,-4189.86"/>
<text text-anchor="middle" x="158.5" y="-4168.16" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;async fn distinguished( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished: Option&lt;LastTreeHead&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;SearchStateUpdate, RequestError&lt;Error&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ChatDistinguishedResponse { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="539,-4052.86 429,-4052.86 429,-4016.86 539,-4016.86 539,-4052.86"/>
<text text-anchor="middle" x="484" y="-4031.16" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M276.61,-4155.23C287.72,-4152.31 298.68,-4148.88 309,-4144.86 363.5,-4123.65 419.42,-4084.61 452.67,-4059.21"/>
<polygon fill="blue" stroke="blue" points="454.86,-4061.94 460.63,-4053.06 450.57,-4056.4 454.86,-4061.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().</title>
<g id="a_node19"><a xlink:title="async fn KeyTransparency_Search( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedChatConnec...">
<polygon fill="white" stroke="black" points="252.5,-4135.86 64.5,-4135.86 64.5,-4099.86 252.5,-4099.86 252.5,-4135.86"/>
<text text-anchor="middle" x="158.5" y="-4114.16" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<g id="a_node164"><a xlink:title=" &#160;&#160;&#160;async fn search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_identity_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;(E164, Vec&lt;u8&gt;)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored_acco...">
<polygon fill="white" stroke="black" points="515,-3890.86 453,-3890.86 453,-3854.86 515,-3854.86 515,-3890.86"/>
<text text-anchor="middle" x="484" y="-3869.16" font-family="Helvetica,sans-Serif" font-size="14.00">search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge812" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M252.54,-4117.35C273.78,-4112.74 294.37,-4103.9 309,-4087.86 365.62,-4025.78 271.63,-3961.25 329,-3899.86 357.59,-3869.27 407.65,-3865.74 442.92,-3867.77"/>
<polygon fill="blue" stroke="blue" points="442.66,-3871.26 452.9,-3868.51 443.18,-3864.28 442.66,-3871.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node20"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="2734,-3326.86 2470,-3326.86 2470,-3290.86 2734,-3290.86 2734,-3326.86"/>
<text text-anchor="middle" x="2602" y="-3305.16" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node206"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="3841,-2947.86 3713,-2947.86 3713,-2911.86 3841,-2911.86 3841,-2947.86"/>
<text text-anchor="middle" x="3777" y="-2926.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.38,-3326.87C2752.97,-3339.79 2865.37,-3345.28 2932,-3281.86 3000.84,-3216.34 2894.5,-3138.73 2960,-3069.86 3061.3,-2963.35 3521.6,-2937.67 3702.59,-2931.65"/>
<polygon fill="blue" stroke="blue" points="3702.93,-2935.14 3712.81,-2931.32 3702.7,-2928.14 3702.93,-2935.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node21"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="2739,-2948.86 2465,-2948.86 2465,-2912.86 2739,-2912.86 2739,-2948.86"/>
<text text-anchor="middle" x="2602" y="-2927.16" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node213"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="3347,-1673.86 3169,-1673.86 3169,-1637.86 3347,-1637.86 3347,-1673.86"/>
<text text-anchor="middle" x="3258" y="-1652.16" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.69,-2948.88C2752.42,-2962.51 2868.02,-2968.84 2932,-2900.86 2967.12,-2863.55 2940.66,-2026.32 2960,-1978.86 3015.57,-1842.48 3156.58,-1727.88 3222.3,-1679.94"/>
<polygon fill="blue" stroke="blue" points="3224.62,-1682.58 3230.68,-1673.89 3220.52,-1676.91 3224.62,-1682.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node22"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="2701.5,-3272.86 2502.5,-3272.86 2502.5,-3236.86 2701.5,-3236.86 2701.5,-3272.86"/>
<text text-anchor="middle" x="2602" y="-3251.16" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node211"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="3812.5,-2703.86 3741.5,-2703.86 3741.5,-2667.86 3812.5,-2667.86 3812.5,-2703.86"/>
<text text-anchor="middle" x="3777" y="-2682.16" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2701.87,-3260.15C2786.81,-3262.37 2900.44,-3259.01 2932,-3227.86 2978.56,-3181.92 2918.62,-2985.52 2960,-2934.86 3011.12,-2872.29 3567.96,-2735.48 3731.25,-2696.45"/>
<polygon fill="blue" stroke="blue" points="3732.51,-2699.75 3741.42,-2694.02 3730.88,-2692.94 3732.51,-2699.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node23"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="2687,-3164.86 2517,-3164.86 2517,-3128.86 2687,-3128.86 2687,-3164.86"/>
<text text-anchor="middle" x="2602" y="-3143.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node212"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="3285,-2595.86 3231,-2595.86 3231,-2559.86 3285,-2559.86 3285,-2595.86"/>
<text text-anchor="middle" x="3258" y="-2574.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2687.24,-3151.96C2773.43,-3155.15 2899.23,-3153.55 2932,-3119.86 3011.92,-3037.71 2880.44,-2687.37 2960,-2604.86 3028.09,-2534.25 3158.06,-2553.37 3221.03,-2568.07"/>
<polygon fill="blue" stroke="blue" points="3220.36,-2571.51 3230.9,-2570.47 3222.01,-2564.71 3220.36,-2571.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node24"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2730.5,-3596.86 2473.5,-3596.86 2473.5,-3560.86 2730.5,-3560.86 2730.5,-3596.86"/>
<text text-anchor="middle" x="2602" y="-3575.16" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node200"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="3349.5,-3733.86 3166.5,-3733.86 3166.5,-3697.86 3349.5,-3697.86 3349.5,-3733.86"/>
<text text-anchor="middle" x="3258" y="-3712.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2730.81,-3572.64C2796.61,-3575.65 2874.79,-3589.54 2932,-3631.86 2954.69,-3648.65 2936.74,-3672.87 2960,-3688.86 3016.68,-3727.84 3094.52,-3733.63 3156.29,-3730.19"/>
<polygon fill="blue" stroke="blue" points="3156.7,-3733.67 3166.45,-3729.53 3156.24,-3726.68 3156.7,-3733.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node25"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="2689,-3110.86 2515,-3110.86 2515,-3074.86 2689,-3074.86 2689,-3110.86"/>
<text text-anchor="middle" x="2602" y="-3089.16" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node207"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-2541.86 3231,-2541.86 3231,-2505.86 3285,-2505.86 3285,-2541.86"/>
<text text-anchor="middle" x="3258" y="-2520.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.21,-3098.03C2775.34,-3101.13 2899.48,-3099.29 2932,-3065.86 3011.92,-2983.71 2880.44,-2633.37 2960,-2550.86 3028.09,-2480.25 3158.06,-2499.37 3221.03,-2514.07"/>
<polygon fill="blue" stroke="blue" points="3220.36,-2517.51 3230.9,-2516.47 3222.01,-2510.71 3220.36,-2517.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node26"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="2675,-3434.86 2529,-3434.86 2529,-3398.86 2675,-3398.86 2675,-3434.86"/>
<text text-anchor="middle" x="2602" y="-3413.16" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="4732,-3204.86 4582,-3204.86 4582,-3168.86 4732,-3168.86 4732,-3204.86"/>
<text text-anchor="middle" x="4657" y="-3183.16" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.14,-3434.49C2749.86,-3448.02 2864.88,-3454.84 2932,-3389.86 3010.42,-3313.94 2879.13,-3219.18 2960,-3145.86 3045.46,-3068.39 3882.66,-3129.81 3998,-3128.86 4203.33,-3127.18 4256.79,-3099.43 4460,-3128.86 4508.08,-3135.83 4560.79,-3151.93 4599.42,-3165.4"/>
<polygon fill="blue" stroke="blue" points="4598.34,-3168.73 4608.93,-3168.77 4600.67,-3162.13 4598.34,-3168.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node27"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2696,-3380.86 2508,-3380.86 2508,-3344.86 2696,-3344.86 2696,-3380.86"/>
<text text-anchor="middle" x="2602" y="-3359.16" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node203"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-3055.86 4202,-3055.86 4202,-3019.86 4256,-3019.86 4256,-3055.86"/>
<text text-anchor="middle" x="4229" y="-3034.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge549" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.8,-3380.87C2752.48,-3393.98 2865.45,-3399.78 2932,-3335.86 3005.63,-3265.14 2884.98,-3177.11 2960,-3107.86 3001.59,-3069.47 3921.55,-3069.1 3978,-3064.86 4054.25,-3059.14 4143.18,-3048.61 4191.76,-3042.53"/>
<polygon fill="blue" stroke="blue" points="4192.29,-3045.99 4201.78,-3041.27 4191.42,-3039.04 4192.29,-3045.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node28"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="2719.5,-3218.86 2484.5,-3218.86 2484.5,-3182.86 2719.5,-3182.86 2719.5,-3218.86"/>
<text text-anchor="middle" x="2602" y="-3197.16" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node209"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="3346,-2703.86 3170,-2703.86 3170,-2667.86 3346,-2667.86 3346,-2703.86"/>
<text text-anchor="middle" x="3258" y="-2682.16" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge762" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2719.54,-3206.54C2801.88,-3207.81 2902.61,-3202.93 2932,-3173.86 2979.76,-3126.62 2924.84,-2930.11 2960,-2872.86 3012.62,-2787.2 3120.78,-2734.28 3191.03,-2707.48"/>
<polygon fill="blue" stroke="blue" points="3192.54,-2710.65 3200.68,-2703.87 3190.09,-2704.1 3192.54,-2710.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node29"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="2715,-3002.86 2489,-3002.86 2489,-2966.86 2715,-2966.86 2715,-3002.86"/>
<text text-anchor="middle" x="2602" y="-2981.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node198"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="3316.5,-2026.86 3199.5,-2026.86 3199.5,-1990.86 3316.5,-1990.86 3316.5,-2026.86"/>
<text text-anchor="middle" x="3258" y="-2005.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge830" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2715.37,-2990.96C2798.82,-2992.77 2902.99,-2988.41 2932,-2957.86 3002.58,-2883.55 2889.75,-2110.49 2960,-2035.86 3017.39,-1974.91 3120.77,-1980.18 3189.15,-1992.34"/>
<polygon fill="blue" stroke="blue" points="3188.92,-1995.86 3199.39,-1994.26 3190.21,-1988.98 3188.92,-1995.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node30"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="2675.5,-3488.86 2528.5,-3488.86 2528.5,-3452.86 2675.5,-3452.86 2675.5,-3488.86"/>
<text text-anchor="middle" x="2602" y="-3467.16" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4721,-3258.86 4593,-3258.86 4593,-3222.86 4721,-3222.86 4721,-3258.86"/>
<text text-anchor="middle" x="4657" y="-3237.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge831" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.66,-3468.57C2742.64,-3465.58 2844.59,-3458.85 2932,-3443.86 3414.91,-3361.06 3512.1,-3225.83 3998,-3162.86 4099.82,-3149.67 4371.65,-3110.58 4460,-3162.86 4482.25,-3176.03 4466.87,-3198.96 4488,-3213.86 4515.23,-3233.06 4551.08,-3240.58 4582.67,-3242.99"/>
<polygon fill="blue" stroke="blue" points="4582.56,-3246.49 4592.76,-3243.6 4582.99,-3239.5 4582.56,-3246.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node31"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="2715.5,-3056.86 2488.5,-3056.86 2488.5,-3020.86 2715.5,-3020.86 2715.5,-3056.86"/>
<text text-anchor="middle" x="2602" y="-3035.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node199"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="3316.5,-2080.86 3199.5,-2080.86 3199.5,-2044.86 3316.5,-2044.86 3316.5,-2080.86"/>
<text text-anchor="middle" x="3258" y="-2059.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge846" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2715.6,-3044.78C2798.87,-3046.47 2902.68,-3042.01 2932,-3011.86 2972.19,-2970.54 2941.39,-2548.42 2960,-2493.86 3019.5,-2319.42 3171.15,-2150.85 3231.58,-2088.35"/>
<polygon fill="blue" stroke="blue" points="3234.35,-2090.52 3238.82,-2080.92 3229.34,-2085.64 3234.35,-2090.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node32"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="2739,-3542.86 2465,-3542.86 2465,-3506.86 2739,-3506.86 2739,-3542.86"/>
<text text-anchor="middle" x="2602" y="-3521.16" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node201"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="3344.5,-3679.86 3171.5,-3679.86 3171.5,-3643.86 3344.5,-3643.86 3344.5,-3679.86"/>
<text text-anchor="middle" x="3258" y="-3658.16" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge860" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2739.32,-3528.58C2798.95,-3532.12 2869.43,-3538.91 2932,-3551.86 3031.31,-3572.42 3142.28,-3614.29 3205.47,-3640.03"/>
<polygon fill="blue" stroke="blue" points="3204.24,-3643.31 3214.82,-3643.86 3206.89,-3636.83 3204.24,-3643.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node33"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3841.5,-11746.86 3712.5,-11746.86 3712.5,-11710.86 3841.5,-11710.86 3841.5,-11746.86"/>
<text text-anchor="middle" x="3777" y="-11725.16" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="4256,-11937.86 4202,-11937.86 4202,-11901.86 4256,-11901.86 4256,-11937.86"/>
<text text-anchor="middle" x="4229" y="-11916.16" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.91,-11730.28C3882.07,-11732.91 3934.34,-11739.56 3978,-11755.86 4066.58,-11788.94 4155.68,-11857.98 4199.71,-11895.06"/>
<polygon fill="blue" stroke="blue" points="4197.51,-11897.78 4207.4,-11901.59 4202.05,-11892.45 4197.51,-11897.78"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<g id="a_node294"><a xlink:title=" &#160;&#160;&#160;pub fn new(s: &amp;str) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (nickname, discriminator) = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s.rsplit_once(&#39;.&#39;).ok_or(UsernameError::MissingSeparator)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_parts_withou...">
<polygon fill="white" stroke="black" points="4256,-12045.86 4202,-12045.86 4202,-12009.86 4256,-12009.86 4256,-12045.86"/>
<text text-anchor="middle" x="4229" y="-12024.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.76,-11718.65C3886.38,-11715.44 3943.88,-11719.89 3978,-11755.86 4015.59,-11795.49 3960.06,-11961.56 3998,-12000.86 4048.02,-12052.69 4140.68,-12045.2 4191.79,-12036.03"/>
<polygon fill="blue" stroke="blue" points="4192.57,-12039.45 4201.74,-12034.13 4191.26,-12032.57 4192.57,-12039.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node34"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="3875.5,-11854.86 3678.5,-11854.86 3678.5,-11818.86 3875.5,-11818.86 3875.5,-11854.86"/>
<text text-anchor="middle" x="3777" y="-11833.16" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<g id="a_node288"><a xlink:title=" &#160;&#160;&#160;pub fn from_parts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limits: NicknameLimits, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should perform the same set of checks...">
<polygon fill="white" stroke="black" points="4275,-12153.86 4183,-12153.86 4183,-12117.86 4275,-12117.86 4275,-12153.86"/>
<text text-anchor="middle" x="4229" y="-12132.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3875.71,-11840.18C3912.96,-11846.59 3952.53,-11860.6 3978,-11889.86 4026.5,-11945.58 3951.76,-11997.26 3998,-12054.86 4040.32,-12107.59 4119.35,-12126.05 4172.82,-12132.48"/>
<polygon fill="blue" stroke="blue" points="4172.5,-12135.97 4182.82,-12133.58 4173.27,-12129.01 4172.5,-12135.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node35"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3841.5,-11800.86 3712.5,-11800.86 3712.5,-11764.86 3841.5,-11764.86 3841.5,-11800.86"/>
<text text-anchor="middle" x="3777" y="-11779.16" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge529" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.52,-11772.88C3886.01,-11769.79 3943.47,-11774.29 3978,-11809.86 4007.72,-11840.49 3968.01,-11970.5 3998,-12000.86 4048.61,-12052.11 4141.03,-12044.85 4191.95,-12035.88"/>
<polygon fill="blue" stroke="blue" points="4192.68,-12039.3 4201.86,-12034.02 4191.38,-12032.42 4192.68,-12039.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node36"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="3843.5,-11692.86 3710.5,-11692.86 3710.5,-11656.86 3843.5,-11656.86 3843.5,-11692.86"/>
<text text-anchor="middle" x="3777" y="-11671.16" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node291"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="4278,-11991.86 4180,-11991.86 4180,-11955.86 4278,-11955.86 4278,-11991.86"/>
<text text-anchor="middle" x="4229" y="-11970.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge791" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.66,-11664.52C3888,-11661.57 3944.36,-11666.4 3978,-11701.86 4015.59,-11741.49 3960.06,-11907.56 3998,-11946.86 4041.45,-11991.88 4117.07,-11992.14 4169.69,-11985.43"/>
<polygon fill="blue" stroke="blue" points="4170.47,-11988.85 4179.89,-11984 4169.5,-11981.92 4170.47,-11988.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().</title>
<g id="a_node37"><a xlink:title="fn CallLinkSecretParams_DeriveFromRootKey(root_key: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = CallLinkSecretParams::derive_from_root_key(root_key); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3411,-9239.86 3105,-9239.86 3105,-9203.86 3411,-9203.86 3411,-9239.86"/>
<text text-anchor="middle" x="3258" y="-9218.16" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DeriveFromRootKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="node371" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<g id="a_node371"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_root_key(root_key: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4311,-7827.86 4147,-7827.86 4147,-7791.86 4311,-7791.86 4311,-7827.86"/>
<text text-anchor="middle" x="4229" y="-7806.16" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_root_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3411.12,-9213.91C3616.42,-9202.42 3958.93,-9180.33 3978,-9159.86 4028.1,-9106.08 3948.73,-7891.42 3998,-7836.86 4031.96,-7799.26 4088.23,-7792.14 4136.61,-7794.6"/>
<polygon fill="blue" stroke="blue" points="4136.6,-7798.1 4146.81,-7795.26 4137.05,-7791.12 4136.6,-7798.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node38"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="3470.5,-9023.86 3045.5,-9023.86 3045.5,-8987.86 3470.5,-8987.86 3470.5,-9023.86"/>
<text text-anchor="middle" x="3258" y="-9002.16" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node366" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node366"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="4256,-7004.86 4202,-7004.86 4202,-6968.86 4256,-6968.86 4256,-7004.86"/>
<text text-anchor="middle" x="4229" y="-6983.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3470.59,-9021.25C3669.67,-9033.39 3942.45,-9043.04 3978,-9007.86 4015.09,-8971.17 3972.41,-7175.33 3998,-7129.86 4040.03,-7055.18 4138.79,-7014.36 4192.2,-6997.03"/>
<polygon fill="blue" stroke="blue" points="4193.44,-7000.31 4201.93,-6993.98 4191.35,-6993.63 4193.44,-7000.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().</title>
<g id="a_node39"><a xlink:title="fn ServerSecretParams_SignDeterministic( &#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; [u8; SIGNATURE_LEN] { &#160;&#160;&#160;&#160;params.sign(*randomness, message) }">
<polygon fill="white" stroke="black" points="3401,-9941.86 3115,-9941.86 3115,-9905.86 3401,-9905.86 3401,-9941.86"/>
<text text-anchor="middle" x="3258" y="-9920.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_SignDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node394" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node394"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="3804,-10875.86 3750,-10875.86 3750,-10839.86 3804,-10839.86 3804,-10875.86"/>
<text text-anchor="middle" x="3777" y="-10854.16" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9905.83C3403.58,-9894.7 3501.13,-9892.13 3556,-9950.86 3589.38,-9986.6 3543.4,-10794.41 3576,-10830.86 3616.52,-10876.17 3693.97,-10872.47 3739.69,-10865.38"/>
<polygon fill="blue" stroke="blue" points="3740.48,-10868.79 3749.76,-10863.68 3739.32,-10861.89 3740.48,-10868.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node40"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3463,-9401.86 3053,-9401.86 3053,-9365.86 3463,-9365.86 3463,-9401.86"/>
<text text-anchor="middle" x="3258" y="-9380.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node402" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node402"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="3916,-10335.86 3638,-10335.86 3638,-10299.86 3916,-10299.86 3916,-10335.86"/>
<text text-anchor="middle" x="3777" y="-10314.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9365.83C3403.58,-9354.7 3501.13,-9352.13 3556,-9410.86 3589.38,-9446.6 3543.4,-10254.41 3576,-10290.86 3589.9,-10306.41 3608.15,-10316.18 3627.97,-10322.03"/>
<polygon fill="blue" stroke="blue" points="3627.25,-10325.46 3637.81,-10324.59 3629.01,-10318.69 3627.25,-10325.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().</title>
<g id="a_node41"><a xlink:title="fn ProfileKey_GetCommitment( &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCommitment&gt; { &#160;&#160;&#160;&#160;profile_key.get_commitment(user_id).into() }">
<polygon fill="white" stroke="black" points="3360.5,-7673.86 3155.5,-7673.86 3155.5,-7637.86 3360.5,-7637.86 3360.5,-7673.86"/>
<text text-anchor="middle" x="3258" y="-7652.16" font-family="Helvetica,sans-Serif" font-size="14.00">ProfileKey_GetCommitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node388" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node388"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="3844,-5760.86 3710,-5760.86 3710,-5724.86 3844,-5724.86 3844,-5760.86"/>
<text text-anchor="middle" x="3777" y="-5739.16" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3264.04,-7637.84C3296.83,-7519.79 3480.78,-6844.29 3556,-6280.86 3561.58,-6239.06 3556.68,-5939.35 3576,-5901.86 3608.93,-5837.97 3680.32,-5791.25 3728.27,-5765.57"/>
<polygon fill="blue" stroke="blue" points="3730.01,-5768.61 3737.24,-5760.87 3726.75,-5762.41 3730.01,-5768.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node42"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="3462,-7889.86 3054,-7889.86 3054,-7853.86 3462,-7853.86 3462,-7889.86"/>
<text text-anchor="middle" x="3258" y="-7868.16" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node361" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node361"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="4262,-6137.86 4196,-6137.86 4196,-6101.86 4262,-6101.86 4262,-6137.86"/>
<text text-anchor="middle" x="4229" y="-6116.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.77,-7889.91C3403.17,-7901.21 3501.23,-7904.05 3556,-7844.86 3612.95,-7783.33 3519.93,-6398.19 3576,-6335.86 3696.34,-6202.09 3849.37,-6413.69 3978,-6287.86 4023.25,-6243.6 3952.71,-6191.08 3998,-6146.86 4047.39,-6098.65 4133.97,-6102.96 4185.65,-6111.03"/>
<polygon fill="blue" stroke="blue" points="4185.37,-6114.53 4195.81,-6112.73 4186.53,-6107.63 4185.37,-6114.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node43"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="3456,-8591.86 3060,-8591.86 3060,-8555.86 3456,-8555.86 3456,-8591.86"/>
<text text-anchor="middle" x="3258" y="-8570.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node383" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node383"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="3804,-8591.86 3750,-8591.86 3750,-8555.86 3804,-8555.86 3804,-8591.86"/>
<text text-anchor="middle" x="3777" y="-8570.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3456.3,-8573.86C3561.55,-8573.86 3681.16,-8573.86 3739.76,-8573.86"/>
<polygon fill="blue" stroke="blue" points="3739.97,-8577.36 3749.97,-8573.86 3739.97,-8570.36 3739.97,-8577.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().</title>
<g id="a_node44"><a xlink:title="fn ServerPublicParams_VerifySignature( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;notary_signature: &amp;[u8; SIGNATURE_LEN], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3391.5,-9995.86 3124.5,-9995.86 3124.5,-9959.86 3391.5,-9959.86 3391.5,-9995.86"/>
<text text-anchor="middle" x="3258" y="-9974.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node392" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node392"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="3841,-10929.86 3713,-10929.86 3713,-10893.86 3841,-10893.86 3841,-10929.86"/>
<text text-anchor="middle" x="3777" y="-10908.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9959.83C3403.58,-9948.7 3501.13,-9946.13 3556,-10004.86 3589.38,-10040.6 3543.4,-10848.41 3576,-10884.86 3606.81,-10919.32 3658.98,-10925.43 3702.31,-10923.26"/>
<polygon fill="blue" stroke="blue" points="3702.8,-10926.74 3712.55,-10922.59 3702.34,-10919.76 3702.8,-10926.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node45"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="3381.5,-8699.86 3134.5,-8699.86 3134.5,-8663.86 3381.5,-8663.86 3381.5,-8699.86"/>
<text text-anchor="middle" x="3258" y="-8678.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node385" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node385"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="3814.5,-8699.86 3739.5,-8699.86 3739.5,-8663.86 3814.5,-8663.86 3814.5,-8699.86"/>
<text text-anchor="middle" x="3777" y="-8678.16" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3381.52,-8681.86C3492.74,-8681.86 3650.92,-8681.86 3728.86,-8681.86"/>
<polygon fill="blue" stroke="blue" points="3729.32,-8685.36 3739.32,-8681.86 3729.32,-8678.36 3729.32,-8685.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().</title>
<g id="a_node46"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_serial: &amp;[u8; RECEIPT_SERIAL...">
<polygon fill="white" stroke="black" points="3523,-9347.86 2993,-9347.86 2993,-9311.86 3523,-9311.86 3523,-9347.86"/>
<text text-anchor="middle" x="3258" y="-9326.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node398" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node398"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="3930,-10281.86 3624,-10281.86 3624,-10245.86 3930,-10245.86 3930,-10281.86"/>
<text text-anchor="middle" x="3777" y="-10260.16" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9311.83C3403.58,-9300.7 3501.12,-9298.13 3556,-9356.86 3589.27,-9392.47 3543.78,-10197.3 3576,-10233.86 3586.57,-10245.86 3599.7,-10254.53 3614.16,-10260.69"/>
<polygon fill="blue" stroke="blue" points="3613.24,-10264.09 3623.83,-10264.39 3615.74,-10257.55 3613.24,-10264.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node47"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="3548,-9671.86 2968,-9671.86 2968,-9635.86 3548,-9635.86 3548,-9671.86"/>
<text text-anchor="middle" x="3258" y="-9650.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node401" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node401"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="3963.5,-10605.86 3590.5,-10605.86 3590.5,-10569.86 3963.5,-10569.86 3963.5,-10605.86"/>
<text text-anchor="middle" x="3777" y="-10584.16" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9635.83C3403.58,-9624.7 3501.13,-9622.13 3556,-9680.86 3589.38,-9716.6 3543.4,-10524.41 3576,-10560.86 3578.03,-10563.13 3580.14,-10565.27 3582.34,-10567.3"/>
<polygon fill="blue" stroke="blue" points="3580.2,-10570.07 3590.14,-10573.74 3584.66,-10564.67 3580.2,-10570.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node48"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3408.5,-9077.86 3107.5,-9077.86 3107.5,-9041.86 3408.5,-9041.86 3408.5,-9077.86"/>
<text text-anchor="middle" x="3258" y="-9056.16" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node362" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node362"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="4262,-7636.86 4196,-7636.86 4196,-7600.86 4262,-7600.86 4262,-7636.86"/>
<text text-anchor="middle" x="4229" y="-7615.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3408.92,-9067.78C3607.91,-9076.67 3938.9,-9085.17 3978,-9045.86 4032.86,-8990.72 3945.89,-7703.61 3998,-7645.86 4044.59,-7594.23 4133.22,-7600.05 4185.81,-7609.25"/>
<polygon fill="blue" stroke="blue" points="4185.35,-7612.72 4195.83,-7611.12 4186.64,-7605.84 4185.35,-7612.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node49"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="3439,-7835.86 3077,-7835.86 3077,-7799.86 3439,-7799.86 3439,-7835.86"/>
<text text-anchor="middle" x="3258" y="-7814.16" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node356" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node356"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-6083.86 4202,-6083.86 4202,-6047.86 4256,-6047.86 4256,-6083.86"/>
<text text-anchor="middle" x="4229" y="-6062.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.77,-7835.91C3403.17,-7847.21 3501.23,-7850.05 3556,-7790.86 3612.72,-7729.58 3519.01,-6348.9 3576,-6287.86 3637.17,-6222.35 3913.34,-6316.93 3978,-6254.86 4030.34,-6204.63 3946.55,-6144.01 3998,-6092.86 4049.08,-6042.08 4141.31,-6049.15 4192.08,-6057.97"/>
<polygon fill="blue" stroke="blue" points="4191.48,-6061.42 4201.95,-6059.8 4192.76,-6054.54 4191.48,-6061.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node50"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="3515,-8645.86 3001,-8645.86 3001,-8609.86 3515,-8609.86 3515,-8645.86"/>
<text text-anchor="middle" x="3258" y="-8624.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node381" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node381"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="3869.5,-8645.86 3684.5,-8645.86 3684.5,-8609.86 3869.5,-8609.86 3869.5,-8645.86"/>
<text text-anchor="middle" x="3777" y="-8624.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3515.23,-8627.86C3571.65,-8627.86 3628.21,-8627.86 3674.16,-8627.86"/>
<polygon fill="blue" stroke="blue" points="3674.4,-8631.36 3684.4,-8627.86 3674.4,-8624.36 3674.4,-8631.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node51"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="3511,-9563.86 3005,-9563.86 3005,-9527.86 3511,-9527.86 3511,-9563.86"/>
<text text-anchor="middle" x="3258" y="-9542.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node393" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node393"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="3918,-10497.86 3636,-10497.86 3636,-10461.86 3918,-10461.86 3918,-10497.86"/>
<text text-anchor="middle" x="3777" y="-10476.16" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9527.83C3403.58,-9516.7 3501.13,-9514.13 3556,-9572.86 3589.38,-9608.6 3543.4,-10416.41 3576,-10452.86 3589.44,-10467.89 3606.94,-10477.52 3625.99,-10483.43"/>
<polygon fill="blue" stroke="blue" points="3625.2,-10486.85 3635.77,-10486.12 3627.05,-10480.1 3625.2,-10486.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node52"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="3420,-9185.86 3096,-9185.86 3096,-9149.86 3420,-9149.86 3420,-9185.86"/>
<text text-anchor="middle" x="3258" y="-9164.16" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node363" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node363"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="4263.5,-7744.86 4194.5,-7744.86 4194.5,-7708.86 4263.5,-7708.86 4263.5,-7744.86"/>
<text text-anchor="middle" x="4229" y="-7723.16" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3420.2,-9163.03C3626.3,-9156.06 3959.02,-9141.79 3978,-9121.86 4029.42,-9067.86 3951.14,-7837.86 3998,-7779.86 4042.3,-7725.03 4130.93,-7719.96 4184.3,-7722.53"/>
<polygon fill="blue" stroke="blue" points="4184.29,-7726.04 4194.48,-7723.14 4184.7,-7719.05 4184.29,-7726.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node53"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3464.5,-9509.86 3051.5,-9509.86 3051.5,-9473.86 3464.5,-9473.86 3464.5,-9509.86"/>
<text text-anchor="middle" x="3258" y="-9488.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node389" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node389"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3868,-10443.86 3686,-10443.86 3686,-10407.86 3868,-10407.86 3868,-10443.86"/>
<text text-anchor="middle" x="3777" y="-10422.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9473.83C3403.58,-9462.7 3501.13,-9460.13 3556,-9518.86 3589.38,-9554.6 3543.4,-10362.41 3576,-10398.86 3600.66,-10426.44 3638.99,-10435.86 3675.53,-10437.41"/>
<polygon fill="blue" stroke="blue" points="3675.7,-10440.92 3685.78,-10437.65 3675.86,-10433.92 3675.7,-10440.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node54"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="3409.5,-7727.86 3106.5,-7727.86 3106.5,-7691.86 3409.5,-7691.86 3409.5,-7727.86"/>
<text text-anchor="middle" x="3258" y="-7706.16" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node358" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node358"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="3805,-6191.86 3749,-6191.86 3749,-6155.86 3805,-6155.86 3805,-6191.86"/>
<text text-anchor="middle" x="3777" y="-6170.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.76,-7727.91C3403.16,-7739.21 3501.22,-7742.04 3556,-7682.86 3611.93,-7622.44 3521.39,-6262.49 3576,-6200.86 3615.99,-6155.73 3692.59,-6159.08 3738.52,-6166.12"/>
<polygon fill="blue" stroke="blue" points="3738.22,-6169.62 3748.66,-6167.81 3739.37,-6162.71 3738.22,-6169.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node55"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="3411,-9131.86 3105,-9131.86 3105,-9095.86 3411,-9095.86 3411,-9131.86"/>
<text text-anchor="middle" x="3258" y="-9110.16" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node365" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node365"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="4257,-7690.86 4201,-7690.86 4201,-7654.86 4257,-7654.86 4257,-7690.86"/>
<text text-anchor="middle" x="4229" y="-7669.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3411.21,-9116.19C3610.64,-9117.62 3939.69,-9113.78 3978,-9073.86 4030.86,-9018.79 3946.85,-7756.53 3998,-7699.86 4046.14,-7646.53 4139.13,-7654.5 4190.91,-7664.17"/>
<polygon fill="blue" stroke="blue" points="4190.51,-7667.66 4201,-7666.18 4191.87,-7660.79 4190.51,-7667.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node56"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3418.5,-7781.86 3097.5,-7781.86 3097.5,-7745.86 3418.5,-7745.86 3418.5,-7781.86"/>
<text text-anchor="middle" x="3258" y="-7760.16" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node353" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node353"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="3811.5,-6245.86 3742.5,-6245.86 3742.5,-6209.86 3811.5,-6209.86 3811.5,-6245.86"/>
<text text-anchor="middle" x="3777" y="-6224.16" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.76,-7781.91C3403.16,-7793.2 3501.22,-7796.04 3556,-7736.86 3611.75,-7676.64 3522.33,-6321.94 3576,-6259.86 3613.84,-6216.09 3685.67,-6215.37 3732.16,-6220.44"/>
<polygon fill="blue" stroke="blue" points="3731.89,-6223.93 3742.25,-6221.67 3732.74,-6216.98 3731.89,-6223.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node57"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3394,-9293.86 3122,-9293.86 3122,-9257.86 3394,-9257.86 3394,-9293.86"/>
<text text-anchor="middle" x="3258" y="-9272.16" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node372" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node372"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="4278,-7881.86 4180,-7881.86 4180,-7845.86 4278,-7845.86 4278,-7881.86"/>
<text text-anchor="middle" x="4229" y="-7860.16" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3394.09,-9265.25C3444.92,-9260.82 3503.18,-9255.22 3556,-9248.86 3564.92,-9247.79 3567.1,-9247.1 3576,-9245.86 3665.2,-9233.52 3917.94,-9261.96 3978,-9194.86 4025.36,-9141.96 3953.35,-7972.08 3998,-7916.86 4038.42,-7866.87 4115.68,-7858.25 4169.45,-7859.07"/>
<polygon fill="blue" stroke="blue" points="4169.44,-7862.57 4179.53,-7859.33 4169.63,-7855.57 4169.44,-7862.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().</title>
<g id="a_node58"><a xlink:title="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3471.5,-10049.86 3044.5,-10049.86 3044.5,-10013.86 3471.5,-10013.86 3471.5,-10049.86"/>
<text text-anchor="middle" x="3258" y="-10028.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyProfileKeyCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node403" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node403"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="3929.5,-10983.86 3624.5,-10983.86 3624.5,-10947.86 3929.5,-10947.86 3929.5,-10983.86"/>
<text text-anchor="middle" x="3777" y="-10962.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3397.06,-10049.92C3455.95,-10065.15 3519.41,-10093.2 3556,-10144.86 3581.5,-10180.87 3546.54,-10906.01 3576,-10938.86 3586.65,-10950.74 3599.83,-10959.25 3614.32,-10965.21"/>
<polygon fill="blue" stroke="blue" points="3613.42,-10968.6 3624.01,-10968.76 3615.83,-10962.03 3613.42,-10968.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node59"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="3417,-8969.86 3099,-8969.86 3099,-8933.86 3417,-8933.86 3417,-8969.86"/>
<text text-anchor="middle" x="3258" y="-8948.16" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node359" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node359"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="4256,-6191.86 4202,-6191.86 4202,-6155.86 4256,-6155.86 4256,-6191.86"/>
<text text-anchor="middle" x="4229" y="-6170.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3417.3,-8967.14C3480.26,-8972.95 3545.02,-8978.5 3576,-8979.86 3620.62,-8981.83 3946.29,-9011.32 3978,-8979.86 4003.02,-8955.04 3985.63,-6474.87 3998,-6441.86 4038.23,-6334.5 4142.41,-6240.99 4195.65,-6198.38"/>
<polygon fill="blue" stroke="blue" points="4198.06,-6200.93 4203.74,-6191.98 4193.72,-6195.44 4198.06,-6200.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node60"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="3399,-8159.86 3117,-8159.86 3117,-8123.86 3399,-8123.86 3399,-8159.86"/>
<text text-anchor="middle" x="3258" y="-8138.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node376" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node376"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3852.5,-6705.86 3701.5,-6705.86 3701.5,-6669.86 3852.5,-6669.86 3852.5,-6705.86"/>
<text text-anchor="middle" x="3777" y="-6684.16" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-8159.9C3403.14,-8171.18 3501.19,-8174.01 3556,-8114.86 3607.89,-8058.87 3529,-6801.02 3576,-6740.86 3602.97,-6706.34 3649.62,-6692.68 3691.09,-6687.85"/>
<polygon fill="blue" stroke="blue" points="3691.63,-6691.31 3701.23,-6686.82 3690.93,-6684.34 3691.63,-6691.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node61"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="3531,-9779.86 2985,-9779.86 2985,-9743.86 3531,-9743.86 3531,-9779.86"/>
<text text-anchor="middle" x="3258" y="-9758.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node399" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node399"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="3943.5,-10713.86 3610.5,-10713.86 3610.5,-10677.86 3943.5,-10677.86 3943.5,-10713.86"/>
<text text-anchor="middle" x="3777" y="-10692.16" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9743.83C3403.58,-9732.7 3501.13,-9730.13 3556,-9788.86 3589.38,-9824.6 3543.4,-10632.41 3576,-10668.86 3583.35,-10677.08 3591.9,-10683.68 3601.27,-10688.94"/>
<polygon fill="blue" stroke="blue" points="3599.97,-10692.21 3610.48,-10693.59 3603.13,-10685.96 3599.97,-10692.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node62"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="3426,-9455.86 3090,-9455.86 3090,-9419.86 3426,-9419.86 3426,-9455.86"/>
<text text-anchor="middle" x="3258" y="-9434.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node400" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node400"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="3874.5,-10389.86 3679.5,-10389.86 3679.5,-10353.86 3874.5,-10353.86 3874.5,-10389.86"/>
<text text-anchor="middle" x="3777" y="-10368.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9419.83C3403.58,-9408.7 3501.13,-9406.13 3556,-9464.86 3589.38,-9500.6 3543.4,-10308.41 3576,-10344.86 3599.22,-10370.83 3634.58,-10380.7 3669.14,-10383.06"/>
<polygon fill="blue" stroke="blue" points="3669.18,-10386.56 3679.34,-10383.55 3669.52,-10379.57 3669.18,-10386.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().</title>
<g id="a_node63"><a xlink:title="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serialized&lt;Gr...">
<polygon fill="white" stroke="black" points="3528,-8915.86 2988,-8915.86 2988,-8879.86 3528,-8879.86 3528,-8915.86"/>
<text text-anchor="middle" x="3258" y="-8894.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="node339" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<g id="a_node339"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AnyAuthCredentialPresentat...">
<polygon fill="white" stroke="black" points="3811.5,-8944.86 3742.5,-8944.86 3742.5,-8908.86 3811.5,-8908.86 3811.5,-8944.86"/>
<text text-anchor="middle" x="3777" y="-8923.16" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3528.1,-8912.96C3607.48,-8917.41 3685.52,-8921.79 3732.23,-8924.41"/>
<polygon fill="blue" stroke="blue" points="3732.09,-8927.91 3742.27,-8924.97 3732.48,-8920.92 3732.09,-8927.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node64"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="3406.5,-8537.86 3109.5,-8537.86 3109.5,-8501.86 3406.5,-8501.86 3406.5,-8537.86"/>
<text text-anchor="middle" x="3258" y="-8516.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node382" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node382"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="3833.5,-8537.86 3720.5,-8537.86 3720.5,-8501.86 3833.5,-8501.86 3833.5,-8537.86"/>
<text text-anchor="middle" x="3777" y="-8516.16" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3406.81,-8519.86C3506.7,-8519.86 3633.79,-8519.86 3709.81,-8519.86"/>
<polygon fill="blue" stroke="blue" points="3710.19,-8523.36 3720.19,-8519.86 3710.19,-8516.36 3710.19,-8523.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node65"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3519,-8807.86 2997,-8807.86 2997,-8771.86 3519,-8771.86 3519,-8807.86"/>
<text text-anchor="middle" x="3258" y="-8786.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node386" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node386"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="3870.5,-8753.86 3683.5,-8753.86 3683.5,-8717.86 3870.5,-8717.86 3870.5,-8753.86"/>
<text text-anchor="middle" x="3777" y="-8732.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge510" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3466.39,-8771.85C3496.47,-8768.99 3527.04,-8765.96 3556,-8762.86 3594.3,-8758.77 3636.28,-8753.75 3673.21,-8749.16"/>
<polygon fill="blue" stroke="blue" points="3673.99,-8752.59 3683.48,-8747.87 3673.13,-8745.64 3673.99,-8752.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().</title>
<g id="a_node66"><a xlink:title="fn GroupSecretParams_DeriveFromMasterKey( &#160;&#160;&#160;&#160;master_key: Serialized&lt;GroupMasterKey&gt;, ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::derive_from_master_key(master_key.into_inner()).into()...">
<polygon fill="white" stroke="black" points="3413.5,-7997.86 3102.5,-7997.86 3102.5,-7961.86 3413.5,-7961.86 3413.5,-7997.86"/>
<text text-anchor="middle" x="3258" y="-7976.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DeriveFromMasterKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="node374" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<g id="a_node374"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_master_key(master_key: GroupMasterKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey&#39; , &#160;...">
<polygon fill="white" stroke="black" points="4749.5,-6489.86 4564.5,-6489.86 4564.5,-6453.86 4749.5,-6453.86 4749.5,-6489.86"/>
<text text-anchor="middle" x="4657" y="-6468.16" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_master_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge532" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.77,-7997.92C3403.18,-8009.22 3501.24,-8012.06 3556,-7952.86 3585.26,-7921.23 3545.34,-6432.13 3576,-6401.86 3644.66,-6334.09 4298.28,-6420.11 4554.08,-6456.79"/>
<polygon fill="blue" stroke="blue" points="4553.72,-6460.27 4564.11,-6458.23 4554.71,-6453.34 4553.72,-6460.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node67"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="3417,-8321.86 3099,-8321.86 3099,-8285.86 3417,-8285.86 3417,-8321.86"/>
<text text-anchor="middle" x="3258" y="-8300.16" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node369" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node369"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="4257,-6896.86 4201,-6896.86 4201,-6860.86 4257,-6860.86 4257,-6896.86"/>
<text text-anchor="middle" x="4229" y="-6875.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge583" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.76,-8321.9C3403.15,-8333.19 3501.2,-8336.03 3556,-8276.86 3609.69,-8218.9 3519.74,-6910.34 3576,-6854.86 3619.83,-6811.65 4059.28,-6859.12 4190.92,-6874.44"/>
<polygon fill="blue" stroke="blue" points="4190.59,-6877.92 4200.93,-6875.61 4191.4,-6870.97 4190.59,-6877.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node68"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="3484,-8861.86 3032,-8861.86 3032,-8825.86 3484,-8825.86 3484,-8861.86"/>
<text text-anchor="middle" x="3258" y="-8840.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node338" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node338"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="3810,-8890.86 3744,-8890.86 3744,-8854.86 3810,-8854.86 3810,-8890.86"/>
<text text-anchor="middle" x="3777" y="-8869.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge606" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3484.26,-8856.5C3578.59,-8861.79 3678.92,-8867.42 3733.89,-8870.5"/>
<polygon fill="blue" stroke="blue" points="3733.76,-8874 3743.94,-8871.06 3734.15,-8867.01 3733.76,-8874"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().</title>
<g id="a_node69"><a xlink:title="fn ServerSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; ServerSecretParams { &#160;&#160;&#160;&#160;ServerSecretParams::generate(*randomness) }">
<polygon fill="white" stroke="black" points="3417.5,-9617.86 3098.5,-9617.86 3098.5,-9581.86 3417.5,-9581.86 3417.5,-9617.86"/>
<text text-anchor="middle" x="3258" y="-9596.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node396" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node396"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3816.5,-10551.86 3737.5,-10551.86 3737.5,-10515.86 3816.5,-10515.86 3816.5,-10551.86"/>
<text text-anchor="middle" x="3777" y="-10530.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge612" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9581.83C3403.58,-9570.7 3501.13,-9568.13 3556,-9626.86 3589.38,-9662.6 3543.4,-10470.41 3576,-10506.86 3613.02,-10548.26 3680.88,-10548.74 3727.19,-10543.11"/>
<polygon fill="blue" stroke="blue" points="3727.86,-10546.55 3737.3,-10541.74 3726.92,-10539.61 3727.86,-10546.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node70"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="3446.5,-8213.86 3069.5,-8213.86 3069.5,-8177.86 3446.5,-8177.86 3446.5,-8213.86"/>
<text text-anchor="middle" x="3258" y="-8192.16" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node370" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node370"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="4256,-6788.86 4202,-6788.86 4202,-6752.86 4256,-6752.86 4256,-6788.86"/>
<text text-anchor="middle" x="4229" y="-6767.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge617" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-8213.9C3403.14,-8225.19 3501.19,-8228.02 3556,-8168.86 3608.49,-8112.21 3521.33,-6833.42 3576,-6778.86 3619.6,-6735.36 4060.28,-6760.04 4191.39,-6768.42"/>
<polygon fill="blue" stroke="blue" points="4191.49,-6771.93 4201.7,-6769.08 4191.95,-6764.95 4191.49,-6771.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node71"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3437.5,-8753.86 3078.5,-8753.86 3078.5,-8717.86 3437.5,-8717.86 3437.5,-8753.86"/>
<text text-anchor="middle" x="3258" y="-8732.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge619" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3437.74,-8720.53C3476.74,-8716.93 3517.77,-8712.95 3556,-8708.86 3615.99,-8702.46 3685.02,-8693.77 3729.51,-8688"/>
<polygon fill="blue" stroke="blue" points="3729.98,-8691.47 3739.45,-8686.71 3729.08,-8684.53 3729.98,-8691.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node72"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="3463,-9833.86 3053,-9833.86 3053,-9797.86 3463,-9797.86 3463,-9833.86"/>
<text text-anchor="middle" x="3258" y="-9812.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node390" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node390"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="3920,-10767.86 3634,-10767.86 3634,-10731.86 3920,-10731.86 3920,-10767.86"/>
<text text-anchor="middle" x="3777" y="-10746.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge620" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9797.83C3403.58,-9786.7 3501.13,-9784.13 3556,-9842.86 3589.38,-9878.6 3543.4,-10686.41 3576,-10722.86 3589.03,-10737.43 3605.87,-10746.93 3624.25,-10752.88"/>
<polygon fill="blue" stroke="blue" points="3623.42,-10756.28 3633.99,-10755.68 3625.35,-10749.56 3623.42,-10756.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node73"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="3502,-9725.86 3014,-9725.86 3014,-9689.86 3502,-9689.86 3502,-9725.86"/>
<text text-anchor="middle" x="3258" y="-9704.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node397" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node397"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3913,-10659.86 3641,-10659.86 3641,-10623.86 3913,-10623.86 3913,-10659.86"/>
<text text-anchor="middle" x="3777" y="-10638.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge729" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9689.83C3403.58,-9678.7 3501.13,-9676.13 3556,-9734.86 3589.38,-9770.6 3543.4,-10578.41 3576,-10614.86 3590.63,-10631.23 3610.08,-10641.2 3631.12,-10646.92"/>
<polygon fill="blue" stroke="blue" points="3630.34,-10650.34 3640.88,-10649.27 3631.97,-10643.53 3630.34,-10650.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node74"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="3426,-8375.86 3090,-8375.86 3090,-8339.86 3426,-8339.86 3426,-8375.86"/>
<text text-anchor="middle" x="3258" y="-8354.16" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node368" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node368"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4263.5,-6950.86 4194.5,-6950.86 4194.5,-6914.86 4263.5,-6914.86 4263.5,-6950.86"/>
<text text-anchor="middle" x="4229" y="-6929.16" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge750" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.76,-8375.91C3403.15,-8387.2 3501.21,-8390.03 3556,-8330.86 3610.59,-8271.91 3518.8,-6941.28 3576,-6884.86 3607.8,-6853.5 3936.94,-6867.27 3978,-6884.86 3989.85,-6889.94 3986.47,-6900.1 3998,-6905.86 4057.48,-6935.58 4136.08,-6938.17 4184.29,-6936.28"/>
<polygon fill="blue" stroke="blue" points="4184.57,-6939.77 4194.39,-6935.8 4184.24,-6932.78 4184.57,-6939.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().</title>
<g id="a_node75"><a xlink:title="fn GenericServerSecretParams_GenerateDeterministic(randomness: &amp;[u8; RANDOMNESS_LEN]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = GenericServerSecretParams::generate(*randomness); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3444,-7943.86 3072,-7943.86 3072,-7907.86 3444,-7907.86 3444,-7943.86"/>
<text text-anchor="middle" x="3258" y="-7922.16" font-family="Helvetica,sans-Serif" font-size="14.00">GenericServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="node373" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<g id="a_node373"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: Default::default(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: zkcredential::credentials::CredentialKeyPair::generate(ra...">
<polygon fill="white" stroke="black" points="4696.5,-5667.86 4617.5,-5667.86 4617.5,-5631.86 4696.5,-5631.86 4696.5,-5667.86"/>
<text text-anchor="middle" x="4657" y="-5646.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge802" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.77,-7943.91C3403.17,-7955.21 3501.23,-7958.05 3556,-7898.86 3613.62,-7836.59 3518.75,-6434.48 3576,-6371.86 3642.63,-6298.99 4390.65,-6351.15 4460,-6280.86 4509.05,-6231.15 4468.19,-6034.83 4488,-5967.86 4522.32,-5851.83 4600.95,-5729.25 4637.14,-5676.52"/>
<polygon fill="blue" stroke="blue" points="4640.16,-5678.3 4642.98,-5668.08 4634.41,-5674.31 4640.16,-5678.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node76"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="3494.5,-8429.86 3021.5,-8429.86 3021.5,-8393.86 3494.5,-8393.86 3494.5,-8429.86"/>
<text text-anchor="middle" x="3258" y="-8408.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node347" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node347"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="3841,-7339.86 3713,-7339.86 3713,-7303.86 3841,-7303.86 3841,-7339.86"/>
<text text-anchor="middle" x="3777" y="-7318.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge809" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.01,-8429.89C3403.34,-8441.09 3501.14,-8443.79 3556,-8384.86 3595.23,-8342.73 3537.7,-7391.84 3576,-7348.86 3606.93,-7314.16 3659.51,-7308.18 3703,-7310.46"/>
<polygon fill="blue" stroke="blue" points="3702.77,-7313.95 3712.98,-7311.14 3703.24,-7306.97 3702.77,-7313.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node77"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="3454,-9887.86 3062,-9887.86 3062,-9851.86 3454,-9851.86 3454,-9887.86"/>
<text text-anchor="middle" x="3258" y="-9866.16" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node395" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node395"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="3908.5,-10821.86 3645.5,-10821.86 3645.5,-10785.86 3908.5,-10785.86 3908.5,-10821.86"/>
<text text-anchor="middle" x="3777" y="-10800.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge822" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9851.83C3403.58,-9840.7 3501.13,-9838.13 3556,-9896.86 3589.38,-9932.6 3543.4,-10740.41 3576,-10776.86 3591.63,-10794.35 3612.77,-10804.53 3635.45,-10810.04"/>
<polygon fill="blue" stroke="blue" points="3634.75,-10813.47 3645.26,-10812.12 3636.2,-10806.62 3634.75,-10813.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node78"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="3397.5,-8105.86 3118.5,-8105.86 3118.5,-8069.86 3397.5,-8069.86 3397.5,-8105.86"/>
<text text-anchor="middle" x="3258" y="-8084.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node375" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node375"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="3850,-6651.86 3704,-6651.86 3704,-6615.86 3850,-6615.86 3850,-6651.86"/>
<text text-anchor="middle" x="3777" y="-6630.16" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge823" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-8105.9C3403.14,-8117.19 3501.2,-8120.02 3556,-8060.86 3608.86,-8003.8 3524.39,-6719.06 3576,-6660.86 3604.67,-6628.53 3652.13,-6621.09 3693.63,-6622.05"/>
<polygon fill="blue" stroke="blue" points="3693.63,-6625.55 3703.76,-6622.45 3693.91,-6618.56 3693.63,-6625.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().</title>
<g id="a_node79"><a xlink:title="fn GroupSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::generate(*randomness).into() }">
<polygon fill="white" stroke="black" points="3415.5,-8051.86 3100.5,-8051.86 3100.5,-8015.86 3415.5,-8015.86 3415.5,-8051.86"/>
<text text-anchor="middle" x="3258" y="-8030.16" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="node380" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<g id="a_node380"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_GroupSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4268.5,-6489.86 4189.5,-6489.86 4189.5,-6453.86 4268.5,-6453.86 4268.5,-6489.86"/>
<text text-anchor="middle" x="4229" y="-6468.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge828" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.44,-8051.86C3402.86,-8063.21 3501.15,-8066.16 3556,-8006.86 3585.47,-7975.01 3545.12,-6475.35 3576,-6444.86 3660.37,-6361.57 4042.59,-6432.52 4179.24,-6461.18"/>
<polygon fill="blue" stroke="blue" points="4178.91,-6464.68 4189.41,-6463.33 4180.35,-6457.84 4178.91,-6464.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node80"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3469.5,-8267.86 3046.5,-8267.86 3046.5,-8231.86 3469.5,-8231.86 3469.5,-8267.86"/>
<text text-anchor="middle" x="3258" y="-8246.16" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node367" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node367"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="4262,-6842.86 4196,-6842.86 4196,-6806.86 4262,-6806.86 4262,-6842.86"/>
<text text-anchor="middle" x="4229" y="-6821.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge835" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-8267.9C3403.14,-8279.19 3501.19,-8282.02 3556,-8222.86 3608.49,-8166.21 3521.33,-6887.42 3576,-6832.86 3619,-6789.95 4048.31,-6813.38 4185.84,-6822.06"/>
<polygon fill="blue" stroke="blue" points="4185.78,-6825.57 4195.99,-6822.71 4186.23,-6818.58 4185.78,-6825.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node81"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="3446,-8483.86 3070,-8483.86 3070,-8447.86 3446,-8447.86 3446,-8483.86"/>
<text text-anchor="middle" x="3258" y="-8462.16" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node364" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node364"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="4293,-7582.86 4165,-7582.86 4165,-7546.86 4293,-7546.86 4293,-7582.86"/>
<text text-anchor="middle" x="4229" y="-7561.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge861" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3446.08,-8476.87C3484.89,-8471.74 3523.74,-8460.48 3556,-8438.86 3908.78,-8202.54 3648.35,-7832.79 3998,-7591.86 4043.43,-7560.56 4106.25,-7555.06 4154.76,-7556.69"/>
<polygon fill="blue" stroke="blue" points="4154.74,-7560.19 4164.89,-7557.14 4155.05,-7553.2 4154.74,-7560.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node82"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3295.5,-3816.86 3220.5,-3816.86 3220.5,-3780.86 3295.5,-3780.86 3295.5,-3816.86"/>
<text text-anchor="middle" x="3258" y="-3795.16" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node83"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="3821.5,-3816.86 3732.5,-3816.86 3732.5,-3780.86 3821.5,-3780.86 3821.5,-3816.86"/>
<text text-anchor="middle" x="3777" y="-3795.16" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3295.77,-3798.86C3385.63,-3798.86 3616.72,-3798.86 3722.14,-3798.86"/>
<polygon fill="blue" stroke="blue" points="3722.24,-3802.36 3732.24,-3798.86 3722.24,-3795.36 3722.24,-3802.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge865" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3777.91,-3780.64C3778.59,-3696.34 3793.83,-3342.38 3998,-3199.86 4082.19,-3141.1 4360.08,-3176.28 4460,-3199.86 4473.54,-3203.06 4474.76,-3209.6 4488,-3213.86 4518.32,-3223.62 4552.89,-3229.95 4582.77,-3234.01"/>
<polygon fill="blue" stroke="blue" points="4582.34,-3237.48 4592.7,-3235.3 4583.24,-3230.54 4582.34,-3237.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="4304,-3244.86 4154,-3244.86 4154,-3208.86 4304,-3208.86 4304,-3244.86"/>
<text text-anchor="middle" x="4229" y="-3223.16" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge864" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3779.03,-3780.65C3784.51,-3702.31 3817.34,-3391.77 3998,-3253.86 4038.86,-3222.67 4096.29,-3215.9 4143.53,-3216.94"/>
<polygon fill="blue" stroke="blue" points="4143.64,-3220.45 4153.76,-3217.29 4143.88,-3213.45 4143.64,-3220.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node84"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="4256,-736.86 4202,-736.86 4202,-700.86 4256,-700.86 4256,-736.86"/>
<text text-anchor="middle" x="4229" y="-715.16" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge670" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4238,-736.9C4272.96,-816.75 4412.62,-1147.26 4460,-1434.86 4468.03,-1483.63 4455.65,-3176.5 4488,-3213.86 4510.87,-3240.28 4548.46,-3248.05 4582.3,-3248.76"/>
<polygon fill="blue" stroke="blue" points="4582.65,-3252.26 4592.65,-3248.77 4582.66,-3245.26 4582.65,-3252.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge671" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.29,-715.98C4304.9,-712.29 4408.56,-712.33 4460,-771.86 4624.3,-961.99 4652.65,-2901.1 4655.69,-3158.66"/>
<polygon fill="blue" stroke="blue" points="4652.19,-3158.75 4655.81,-3168.71 4659.19,-3158.67 4652.19,-3158.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="4311,-3298.86 4147,-3298.86 4147,-3262.86 4311,-3262.86 4311,-3298.86"/>
<text text-anchor="middle" x="4229" y="-3277.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.13,-3273.25C4389.41,-3265.9 4506.85,-3254.87 4582.46,-3247.77"/>
<polygon fill="blue" stroke="blue" points="4583.22,-3251.21 4592.85,-3246.79 4582.56,-3244.24 4583.22,-3251.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="5166.5,-3288.86 4873.5,-3288.86 4873.5,-3252.86 5166.5,-3252.86 5166.5,-3288.86"/>
<text text-anchor="middle" x="5020" y="-3267.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311,-3282.9C4425.68,-3285.38 4641.91,-3288.58 4826,-3282.86 4838.11,-3282.49 4850.65,-3281.98 4863.24,-3281.38"/>
<polygon fill="blue" stroke="blue" points="4863.54,-3284.87 4873.35,-3280.89 4863.19,-3277.88 4863.54,-3284.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="5178,-3224.86 4862,-3224.86 4862,-3188.86 5178,-3188.86 5178,-3224.86"/>
<text text-anchor="middle" x="5020" y="-3203.16" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.28,-3281.61C4462.99,-3282.63 4778.3,-3282.87 4826,-3267.86 4844.34,-3262.09 4844.36,-3251.52 4862,-3243.86 4876.68,-3237.49 4892.62,-3232.12 4908.54,-3227.62"/>
<polygon fill="blue" stroke="blue" points="4909.71,-3230.93 4918.44,-3224.93 4907.87,-3224.17 4909.71,-3230.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.05,-3287.16C4357.65,-3287.08 4415.56,-3280.41 4460,-3253.86 4478.63,-3242.73 4469.61,-3225.38 4488,-3213.86 4512.64,-3198.43 4543.16,-3190.87 4571.4,-3187.41"/>
<polygon fill="blue" stroke="blue" points="4572.11,-3190.86 4581.69,-3186.32 4571.37,-3183.9 4572.11,-3190.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4721.29,-3246.12C4760.64,-3249.39 4813.09,-3253.75 4862.99,-3257.9"/>
<polygon fill="blue" stroke="blue" points="4863,-3261.41 4873.26,-3258.75 4863.58,-3254.44 4863,-3261.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4304.2,-3219.9C4378.81,-3212.89 4493.64,-3202.11 4571.65,-3194.78"/>
<polygon fill="blue" stroke="blue" points="4572.3,-3198.24 4581.93,-3193.82 4571.65,-3191.27 4572.3,-3198.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="5361,-3869.86 5233,-3869.86 5233,-3833.86 5361,-3833.86 5361,-3869.86"/>
<text text-anchor="middle" x="5297" y="-3848.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge642" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5026.96,-3288.89C5058.37,-3383.91 5203.4,-3822.35 5206,-3824.86 5211.04,-3829.75 5216.92,-3833.75 5223.22,-3837.03"/>
<polygon fill="blue" stroke="blue" points="5222.16,-3840.39 5232.71,-3841.35 5225.06,-3834.02 5222.16,-3840.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="5372,-3815.86 5222,-3815.86 5222,-3779.86 5372,-3779.86 5372,-3815.86"/>
<text text-anchor="middle" x="5297" y="-3794.16" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge723" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5160.39,-3224.91C5169.81,-3229.96 5178.52,-3236.19 5186,-3243.86 5260.58,-3320.3 5287.88,-3667.72 5294.37,-3769.66"/>
<polygon fill="blue" stroke="blue" points="5290.88,-3770.04 5294.99,-3779.8 5297.87,-3769.61 5290.88,-3770.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge819" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4732.36,-3190.98C4767.04,-3192.9 4809.83,-3195.28 4851.67,-3197.59"/>
<polygon fill="blue" stroke="blue" points="4851.54,-3201.09 4861.71,-3198.15 4851.92,-3194.1 4851.54,-3201.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5298.99,-3870.11C5309.53,-4063.3 5400.68,-5726.33 5416,-5745.86 5416.49,-5746.49 5417,-5747.1 5417.52,-5747.7"/>
<polygon fill="blue" stroke="blue" points="5415.3,-5750.42 5424.98,-5754.72 5420.1,-5745.32 5415.3,-5750.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5304.15,-3870.11C5321.34,-3922.11 5369.79,-4075.85 5387.5,-4207.86 5397.82,-4284.8 5379.3,-5536.46 5416,-5604.86 5424.08,-5619.93 5437.82,-5632 5451.99,-5641.25"/>
<polygon fill="blue" stroke="blue" points="5450.46,-5644.42 5460.82,-5646.65 5454.11,-5638.45 5450.46,-5644.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="5077.5,-3869.86 4962.5,-3869.86 4962.5,-3833.86 5077.5,-3833.86 5077.5,-3869.86"/>
<text text-anchor="middle" x="5020" y="-3848.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge641" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5077.65,-3851.86C5119.6,-3851.86 5177.13,-3851.86 5222.6,-3851.86"/>
<polygon fill="blue" stroke="blue" points="5222.7,-3855.36 5232.7,-3851.86 5222.7,-3848.36 5222.7,-3855.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5111.5,-3815.86 4928.5,-3815.86 4928.5,-3779.86 5111.5,-3779.86 5111.5,-3815.86"/>
<text text-anchor="middle" x="5020" y="-3794.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge682" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5111.58,-3811.37C5135.82,-3815.35 5161.97,-3819.96 5186,-3824.86 5198.01,-3827.32 5210.69,-3830.17 5223.01,-3833.1"/>
<polygon fill="blue" stroke="blue" points="5222.25,-3836.51 5232.79,-3835.45 5223.88,-3829.71 5222.25,-3836.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge681" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5111.81,-3797.86C5143.99,-3797.86 5180.05,-3797.86 5211.68,-3797.86"/>
<polygon fill="blue" stroke="blue" points="5211.78,-3801.36 5221.78,-3797.86 5211.78,-3794.36 5211.78,-3801.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge747" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5372.04,-3811.26C5377.98,-3814.83 5383.3,-3819.29 5387.5,-3824.86 5451.78,-3910.07 5352.13,-5660.35 5416,-5745.86 5416.38,-5746.38 5416.77,-5746.88 5417.18,-5747.37"/>
<polygon fill="blue" stroke="blue" points="5414.86,-5750.01 5424.42,-5754.58 5419.8,-5745.04 5414.86,-5750.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge748" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5372.04,-3811.27C5377.98,-3814.83 5383.29,-3819.29 5387.5,-3824.86 5447.11,-3903.78 5369.44,-5517.61 5416,-5604.86 5424.05,-5619.95 5437.78,-5632.03 5451.95,-5641.28"/>
<polygon fill="blue" stroke="blue" points="5450.42,-5644.45 5460.78,-5646.67 5454.07,-5638.47 5450.42,-5644.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node95"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="812,-4135.86 737,-4135.86 737,-4099.86 812,-4099.86 812,-4135.86"/>
<text text-anchor="middle" x="774.5" y="-4114.16" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node96"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1110,-4135.86 952,-4135.86 952,-4099.86 1110,-4099.86 1110,-4135.86"/>
<text text-anchor="middle" x="1031" y="-4114.16" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge591" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.23,-4117.86C845.95,-4117.86 897.24,-4117.86 941.58,-4117.86"/>
<polygon fill="blue" stroke="blue" points="941.8,-4121.36 951.8,-4117.86 941.8,-4114.36 941.8,-4121.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn verify_search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: SlimSearchRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: FullSearchResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime,...">
<polygon fill="white" stroke="black" points="1372.5,-3996.86 1264.5,-3996.86 1264.5,-3960.86 1372.5,-3960.86 1372.5,-3996.86"/>
<text text-anchor="middle" x="1318.5" y="-3975.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge814" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1110.1,-4102.41C1124.33,-4098.46 1138.83,-4093.65 1152,-4087.86 1202.9,-4065.52 1255.47,-4027.96 1287.33,-4003.3"/>
<polygon fill="blue" stroke="blue" points="1289.64,-4005.93 1295.36,-3997.01 1285.33,-4000.42 1289.64,-4005.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node101"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="1651.5,-3946.86 1543.5,-3946.86 1543.5,-3910.86 1651.5,-3910.86 1651.5,-3946.86"/>
<text text-anchor="middle" x="1597.5" y="-3925.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1372.58,-3969.28C1418.34,-3961.02 1484.51,-3949.08 1533.05,-3940.32"/>
<polygon fill="blue" stroke="blue" points="1533.91,-3943.72 1543.13,-3938.5 1532.66,-3936.83 1533.91,-3943.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;a self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;M...">
<polygon fill="white" stroke="black" points="1376.5,-3942.86 1260.5,-3942.86 1260.5,-3906.86 1376.5,-3906.86 1376.5,-3942.86"/>
<text text-anchor="middle" x="1318.5" y="-3921.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<g id="a_node99"><a xlink:title="pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;config: &amp;&#39;a PublicConfig, &#160;&#160;&#160;&#160;req: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;res: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;MonitorStateUpdate&gt; { ...">
<polygon fill="white" stroke="black" points="1908,-3946.86 1792,-3946.86 1792,-3910.86 1908,-3910.86 1908,-3946.86"/>
<text text-anchor="middle" x="1850" y="-3925.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="edge578" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1376.82,-3936.14C1420.24,-3944.59 1474.19,-3954.86 1485,-3955.86 1581.03,-3964.78 1605.95,-3964.61 1702,-3955.86 1728.23,-3953.47 1756.77,-3948.73 1781.67,-3943.88"/>
<polygon fill="blue" stroke="blue" points="1782.61,-3947.26 1791.74,-3941.88 1781.25,-3940.4 1782.61,-3947.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node100"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2196.5,-3946.86 2037.5,-3946.86 2037.5,-3910.86 2196.5,-3910.86 2196.5,-3946.86"/>
<text text-anchor="middle" x="2117" y="-3925.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1908.17,-3928.86C1942.89,-3928.86 1987.93,-3928.86 2027.2,-3928.86"/>
<polygon fill="blue" stroke="blue" points="2027.32,-3932.36 2037.32,-3928.86 2027.32,-3925.36 2027.32,-3932.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node104"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="2703.5,-3919.86 2500.5,-3919.86 2500.5,-3883.86 2703.5,-3883.86 2703.5,-3919.86"/>
<text text-anchor="middle" x="2602" y="-3898.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.68,-3924.47C2276.34,-3920.01 2400.25,-3913.09 2489.9,-3908.07"/>
<polygon fill="blue" stroke="blue" points="2490.32,-3911.56 2500.11,-3907.5 2489.93,-3904.57 2490.32,-3911.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node103"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="1933.5,-3892.86 1766.5,-3892.86 1766.5,-3856.86 1933.5,-3856.86 1933.5,-3892.86"/>
<text text-anchor="middle" x="1850" y="-3871.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.62,-3917.41C1682.08,-3910.85 1721.17,-3902.42 1756.51,-3894.8"/>
<polygon fill="blue" stroke="blue" points="1757.33,-3898.2 1766.37,-3892.68 1755.86,-3891.36 1757.33,-3898.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node102"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="2189.5,-3892.86 2044.5,-3892.86 2044.5,-3856.86 2189.5,-3856.86 2189.5,-3892.86"/>
<text text-anchor="middle" x="2117" y="-3871.16" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="2658.5,-4067.86 2545.5,-4067.86 2545.5,-4031.86 2658.5,-4031.86 2658.5,-4067.86"/>
<text text-anchor="middle" x="2602" y="-4046.16" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2189.63,-3879.41C2206.43,-3883.48 2223.15,-3890.38 2236,-3901.86 2264.08,-3926.97 2235.6,-3957.12 2264,-3981.86 2339.44,-4047.58 2460.56,-4056.39 2535.2,-4054.64"/>
<polygon fill="blue" stroke="blue" points="2535.53,-4058.13 2545.42,-4054.33 2535.32,-4051.14 2535.53,-4058.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1933.76,-3891.73C1963.5,-3897.79 1997.16,-3904.65 2027.38,-3910.8"/>
<polygon fill="blue" stroke="blue" points="2026.99,-3914.3 2037.49,-3912.86 2028.39,-3907.44 2026.99,-3914.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1933.76,-3874.86C1965.69,-3874.86 2002.12,-3874.86 2033.98,-3874.86"/>
<polygon fill="blue" stroke="blue" points="2034.15,-3878.36 2044.15,-3874.86 2034.15,-3871.36 2034.15,-3878.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M2703.75,-3898.78C2851.89,-3894.25 3121.53,-3886.01 3219.85,-3883"/>
<polygon fill="blue" stroke="blue" points="3220.02,-3886.5 3229.91,-3882.69 3219.8,-3879.5 3220.02,-3886.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="1702,-3892.86 1493,-3892.86 1493,-3856.86 1702,-3856.86 1702,-3892.86"/>
<text text-anchor="middle" x="1597.5" y="-3871.16" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge662" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1702.2,-3874.86C1720.09,-3874.86 1738.58,-3874.86 1756.16,-3874.86"/>
<polygon fill="blue" stroke="blue" points="1756.39,-3878.36 1766.39,-3874.86 1756.39,-3871.36 1756.39,-3878.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="2190,-4108.86 2044,-4108.86 2044,-4072.86 2190,-4072.86 2190,-4108.86"/>
<text text-anchor="middle" x="2117" y="-4087.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2190.05,-4084.75C2283.49,-4076.82 2445.15,-4063.09 2535.34,-4055.44"/>
<polygon fill="blue" stroke="blue" points="2535.78,-4058.91 2545.45,-4054.58 2535.18,-4051.94 2535.78,-4058.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2208,-4054.86 2026,-4054.86 2026,-4018.86 2208,-4018.86 2208,-4054.86"/>
<text text-anchor="middle" x="2117" y="-4033.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge534" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2208.28,-4039.29C2303.3,-4041.85 2450.57,-4045.81 2535.17,-4048.09"/>
<polygon fill="blue" stroke="blue" points="2535.33,-4051.6 2545.42,-4048.37 2535.52,-4044.6 2535.33,-4051.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge811" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M2658.56,-4051.48C2826.82,-4056.24 3345.74,-4069.86 3776,-4069.86 3776,-4069.86 3776,-4069.86 4658,-4069.86 4896.2,-4069.86 5031.44,-3980.61 5186,-4161.86 5212.01,-4192.37 5186.84,-5569.65 5206,-5604.86 5214.4,-5620.31 5228.7,-5632.48 5243.45,-5641.71"/>
<polygon fill="blue" stroke="blue" points="5241.75,-5644.77 5252.15,-5646.8 5245.29,-5638.73 5241.75,-5644.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<g id="a_node109"><a xlink:title="fn parse_and_validate(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; PartialBackup&#39; ); &#160;&#160;&#160;&#160;benchmark_multiple_backup_sizes(|size, _backup, _key| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if size == 0 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;retu...">
<polygon fill="white" stroke="black" points="849.5,-11308.86 699.5,-11308.86 699.5,-11272.86 849.5,-11272.86 849.5,-11308.86"/>
<text text-anchor="middle" x="774.5" y="-11287.16" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M849.66,-11305.91C929.3,-11322.05 1059.58,-11348.4 1172,-11370.86 1285.56,-11393.56 1416.27,-11419.38 1502.31,-11436.33"/>
<polygon fill="blue" stroke="blue" points="1501.83,-11439.8 1512.31,-11438.3 1503.18,-11432.93 1501.83,-11439.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;validation, &#160;&#160;&#160;&#160;hmac_only, &#160;&#160;&#160;&#160;decrypt_only, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment_and_parse, &#160;&#160;&#160;&#160;de...">
<polygon fill="white" stroke="black" points="526,-11281.86 442,-11281.86 442,-11245.86 526,-11245.86 526,-11281.86"/>
<text text-anchor="middle" x="484" y="-11260.16" font-family="Helvetica,sans-Serif" font-size="14.00">validation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M526.03,-11267.7C568.34,-11271.66 635.53,-11277.95 689.23,-11282.98"/>
<polygon fill="blue" stroke="blue" points="689.15,-11286.48 699.43,-11283.93 689.8,-11279.51 689.15,-11286.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;fn process&lt;R: ReaderFactory&lt;Reader: Unpin&gt;&gt;(input: R, key: &amp;MessageBackupKey) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;futures::executor::block_on(async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupReader::new_encrypted_compressed( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key,...">
<polygon fill="white" stroke="black" points="519,-11335.86 449,-11335.86 449,-11299.86 519,-11299.86 519,-11335.86"/>
<text text-anchor="middle" x="484" y="-11314.16" font-family="Helvetica,sans-Serif" font-size="14.00">process</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge511" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M497.68,-11336.02C524.17,-11372.13 589.38,-11452.05 667,-11481.86 966.84,-11597.03 1362.05,-11516.88 1523.28,-11475.44"/>
<polygon fill="blue" stroke="blue" points="1524.3,-11478.79 1533.1,-11472.89 1522.54,-11472.02 1524.3,-11478.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;pub async fn validate_all(self) &#45;&gt; ReadResult&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.collect_all().await.and_then(|partial| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _: CompletedBackup&lt;ValidateOnly&gt; = partial.try_into()?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(())...">
<polygon fill="white" stroke="black" points="821.5,-11418.86 727.5,-11418.86 727.5,-11382.86 821.5,-11382.86 821.5,-11418.86"/>
<text text-anchor="middle" x="774.5" y="-11397.16" font-family="Helvetica,sans-Serif" font-size="14.00">validate_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all(). -->
<g id="edge512" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.19,-11327.92C555.75,-11338.64 615.43,-11356.09 667,-11370.86 683.36,-11375.55 701.16,-11380.59 717.43,-11385.17"/>
<polygon fill="blue" stroke="blue" points="716.77,-11388.62 727.34,-11387.96 718.67,-11381.88 716.77,-11388.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn duplicate_contact_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, fill_in_field): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; CompletionE...">
<polygon fill="white" stroke="black" points="2196,-11899.86 2038,-11899.86 2038,-11863.86 2196,-11863.86 2196,-11899.86"/>
<text text-anchor="middle" x="2117" y="-11878.16" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_contact_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn add_recipient(&amp;mut self, recipient: proto::Recipient) &#45;&gt; Result&lt;(), RecipientFrameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = recipient.id(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err_with_id = |e| RecipientFrameError(id, e); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2657,-11683.86 2547,-11683.86 2547,-11647.86 2657,-11647.86 2657,-11683.86"/>
<text text-anchor="middle" x="2602" y="-11662.16" font-family="Helvetica,sans-Serif" font-size="14.00">add_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.25,-11866.89C2209.68,-11863.49 2223.37,-11859.49 2236,-11854.86 2361.74,-11808.77 2499.28,-11728.68 2563.75,-11689.22"/>
<polygon fill="blue" stroke="blue" points="2565.67,-11692.15 2572.35,-11683.93 2562,-11686.18 2565.67,-11692.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;fn duplicate_non_contact_recipient&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, destination): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; Co...">
<polygon fill="white" stroke="black" points="2236,-11845.86 1998,-11845.86 1998,-11809.86 2236,-11809.86 2236,-11845.86"/>
<text text-anchor="middle" x="2117" y="-11824.16" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_non_contact_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2202.78,-11809.86C2214.01,-11807.06 2225.33,-11804.04 2236,-11800.86 2349.17,-11767.14 2477.95,-11716.54 2548.27,-11687.82"/>
<polygon fill="blue" stroke="blue" points="2549.87,-11690.95 2557.79,-11683.92 2547.21,-11684.47 2549.87,-11690.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(...">
<polygon fill="white" stroke="black" points="1946.5,-11663.86 1753.5,-11663.86 1753.5,-11627.86 1946.5,-11627.86 1946.5,-11663.86"/>
<text text-anchor="middle" x="1850" y="-11642.16" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;fn add_frame_item(&amp;mut self, item: FrameItem) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FrameItem::Account(account_data) =&gt; self.add_account_data(account_data), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2181,-11683.86 2053,-11683.86 2053,-11647.86 2181,-11647.86 2181,-11683.86"/>
<text text-anchor="middle" x="2117" y="-11662.16" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame_item</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1946.67,-11653.08C1978.23,-11655.47 2012.83,-11658.08 2042.47,-11660.31"/>
<polygon fill="blue" stroke="blue" points="2042.5,-11663.83 2052.74,-11661.09 2043.03,-11656.85 2042.5,-11663.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake_with(frames: impl IntoIterator&lt;Item = proto::frame::Item&gt;) &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut backup = Self::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for frame in frames { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backu...">
<polygon fill="white" stroke="black" points="1891,-11845.86 1809,-11845.86 1809,-11809.86 1891,-11809.86 1891,-11845.86"/>
<text text-anchor="middle" x="1850" y="-11824.16" font-family="Helvetica,sans-Serif" font-size="14.00">fake_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake() &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::fake_with([ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Recipient::test_data_contact().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Chat::test_data().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2144,-11737.86 2090,-11737.86 2090,-11701.86 2144,-11701.86 2144,-11737.86"/>
<text text-anchor="middle" x="2117" y="-11716.16" font-family="Helvetica,sans-Serif" font-size="14.00">fake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1891.24,-11814.87C1913.63,-11809.42 1941.11,-11801.43 1962,-11786.86 1984.17,-11771.41 1975.41,-11752.7 1998,-11737.86 2022.29,-11721.92 2054.75,-11715.32 2079.49,-11714.04"/>
<polygon fill="blue" stroke="blue" points="2079.65,-11717.54 2089.56,-11713.81 2079.49,-11710.54 2079.65,-11717.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1891.17,-11825.3C1914.51,-11821.81 1942.99,-11813.85 1962,-11795.86 1997.23,-11762.54 1961.86,-11725.19 1998,-11692.86 2010.45,-11681.72 2026.55,-11674.9 2042.83,-11670.78"/>
<polygon fill="blue" stroke="blue" points="2043.94,-11674.12 2052.96,-11668.56 2042.44,-11667.29 2043.94,-11674.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;Destination&lt;R&gt;, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3310.5,-11337.86 3205.5,-11337.86 3205.5,-11301.86 3310.5,-11301.86 3310.5,-11337.86"/>
<text text-anchor="middle" x="3258" y="-11316.16" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2642.99,-11647.86C2705.41,-11619.49 2829.48,-11562.03 2932,-11507.86 3037.53,-11452.11 3158.36,-11379.93 3218.62,-11343.35"/>
<polygon fill="blue" stroke="blue" points="3220.68,-11346.19 3227.41,-11338.01 3217.05,-11340.21 3220.68,-11346.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;fn chat_item_order() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut partial = Store::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account data&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2181,-11791.86 2053,-11791.86 2053,-11755.86 2181,-11755.86 2181,-11791.86"/>
<text text-anchor="middle" x="2117" y="-11770.16" font-family="Helvetica,sans-Serif" font-size="14.00">chat_item_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.14,-11759.74C2273.42,-11739.11 2444.18,-11700.93 2536.96,-11680.18"/>
<polygon fill="blue" stroke="blue" points="2537.79,-11683.58 2546.78,-11677.99 2536.26,-11676.75 2537.79,-11683.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expec...">
<polygon fill="white" stroke="black" points="1951.5,-11609.86 1748.5,-11609.86 1748.5,-11573.86 1951.5,-11573.86 1951.5,-11609.86"/>
<text text-anchor="middle" x="1850" y="-11588.16" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1931.75,-11609.94C1942,-11612.69 1952.29,-11615.68 1962,-11618.86 1978.47,-11624.26 1981.6,-11628.25 1998,-11633.86 2012.41,-11638.8 2028.02,-11643.48 2043.02,-11647.66"/>
<polygon fill="blue" stroke="blue" points="2042.2,-11651.07 2052.77,-11650.34 2044.05,-11644.32 2042.2,-11651.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn zero_chat_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account dat...">
<polygon fill="white" stroke="black" points="2168,-11609.86 2066,-11609.86 2066,-11573.86 2168,-11573.86 2168,-11609.86"/>
<text text-anchor="middle" x="2117" y="-11588.16" font-family="Helvetica,sans-Serif" font-size="14.00">zero_chat_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2168.32,-11599.57C2256.65,-11613.11 2439.42,-11641.11 2536.74,-11656.02"/>
<polygon fill="blue" stroke="blue" points="2536.33,-11659.5 2546.74,-11657.55 2537.39,-11652.58 2536.33,-11659.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err = partial.add_frame_item(item.into()).unwra...">
<polygon fill="white" stroke="black" points="1673.5,-11845.86 1521.5,-11845.86 1521.5,-11809.86 1673.5,-11809.86 1673.5,-11845.86"/>
<text text-anchor="middle" x="1597.5" y="-11824.16" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1673.66,-11827.86C1714.06,-11827.86 1762.78,-11827.86 1798.6,-11827.86"/>
<polygon fill="blue" stroke="blue" points="1798.81,-11831.36 1808.81,-11827.86 1798.81,-11824.36 1798.81,-11831.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.94,-11845.87C1709.86,-11875.72 1863.95,-11925.54 1962,-11854.86 2003.05,-11825.28 1960.53,-11780.87 1998,-11746.86 2020.02,-11726.88 2053.75,-11720.74 2079.52,-11719.24"/>
<polygon fill="blue" stroke="blue" points="2079.8,-11722.73 2089.66,-11718.86 2079.54,-11715.74 2079.8,-11722.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1673.56,-11811.88C1694.36,-11807.85 1716.99,-11803.83 1738,-11800.86 1787.49,-11793.88 1921.79,-11810.54 1962,-11780.86 1996,-11755.77 1965.78,-11720.21 1998,-11692.86 2010.61,-11682.17 2026.61,-11675.49 2042.73,-11671.38"/>
<polygon fill="blue" stroke="blue" points="2043.76,-11674.74 2052.75,-11669.14 2042.23,-11667.91 2043.76,-11674.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;fn pni_matching_aci_is_okay&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid...">
<polygon fill="white" stroke="black" points="2214,-11555.86 2020,-11555.86 2020,-11519.86 2214,-11519.86 2214,-11555.86"/>
<text text-anchor="middle" x="2117" y="-11534.16" font-family="Helvetica,sans-Serif" font-size="14.00">pni_matching_aci_is_okay</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2199.05,-11555.9C2211.45,-11558.81 2224.08,-11561.85 2236,-11564.86 2341.94,-11591.63 2464.15,-11626.2 2536.86,-11647.17"/>
<polygon fill="blue" stroke="blue" points="2536.21,-11650.63 2546.78,-11650.04 2538.15,-11643.9 2536.21,-11650.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2089.56,-11727.58C2064.2,-11731.62 2025.76,-11737.64 1998,-11755.86 1975.41,-11770.7 1984.17,-11789.41 1962,-11804.86 1944.13,-11817.33 1921.43,-11824.97 1901.23,-11828.96"/>
<polygon fill="blue" stroke="blue" points="1900.5,-11825.54 1891.24,-11830.67 1901.68,-11832.43 1900.5,-11825.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.14,-11665.86C2273.32,-11665.86 2443.83,-11665.86 2536.68,-11665.86"/>
<polygon fill="blue" stroke="blue" points="2536.78,-11669.36 2546.78,-11665.86 2536.78,-11662.36 2536.78,-11669.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn allows_lone_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; ac...">
<polygon fill="white" stroke="black" points="1932.5,-11555.86 1767.5,-11555.86 1767.5,-11519.86 1932.5,-11519.86 1932.5,-11555.86"/>
<text text-anchor="middle" x="1850" y="-11534.16" font-family="Helvetica,sans-Serif" font-size="14.00">allows_lone_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge520" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1932.59,-11550.19C1943.03,-11553.88 1953.14,-11558.66 1962,-11564.86 1985.63,-11581.4 1973.12,-11604.27 1998,-11618.86 2000.89,-11620.56 2381.86,-11649.38 2536.69,-11661.03"/>
<polygon fill="blue" stroke="blue" points="2536.76,-11664.55 2546.99,-11661.81 2537.29,-11657.57 2536.76,-11664.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge519" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1932.66,-11549.12C1943.21,-11552.97 1953.33,-11558.08 1962,-11564.86 1989.23,-11586.19 1971.05,-11612.18 1998,-11633.86 2010.88,-11644.22 2026.83,-11651.24 2042.8,-11655.99"/>
<polygon fill="blue" stroke="blue" points="2042.16,-11659.44 2052.72,-11658.66 2043.98,-11652.68 2042.16,-11659.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn add_frame(&amp;mut self, frame: proto::Frame) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_frame_item(frame.item.ok_or(ValidationError::EmptyFrame)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1895.5,-11771.86 1804.5,-11771.86 1804.5,-11735.86 1895.5,-11735.86 1895.5,-11771.86"/>
<text text-anchor="middle" x="1850" y="-11750.16" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge587" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1895.6,-11748.43C1916.67,-11744.53 1941.61,-11737.94 1962,-11726.86 1981.34,-11716.36 1978.59,-11703.24 1998,-11692.86 2011.76,-11685.51 2027.46,-11680.15 2042.82,-11676.25"/>
<polygon fill="blue" stroke="blue" points="2043.91,-11679.58 2052.84,-11673.88 2042.31,-11672.77 2043.91,-11679.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_foreign_key&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let frame = proto::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item:...">
<polygon fill="white" stroke="black" points="1702,-11771.86 1493,-11771.86 1493,-11735.86 1702,-11735.86 1702,-11771.86"/>
<text text-anchor="middle" x="1597.5" y="-11750.16" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_foreign_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge683" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1702.2,-11753.86C1733.82,-11753.86 1767.34,-11753.86 1794.35,-11753.86"/>
<polygon fill="blue" stroke="blue" points="1794.37,-11757.36 1804.37,-11753.86 1794.37,-11750.36 1794.37,-11757.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;fn rejects_multiple_account_data&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expe...">
<polygon fill="white" stroke="black" points="1962,-11717.86 1738,-11717.86 1738,-11681.86 1962,-11681.86 1962,-11717.86"/>
<text text-anchor="middle" x="1850" y="-11696.16" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_multiple_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge866" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1962.23,-11685.59C1989.37,-11682.11 2017.73,-11678.47 2042.6,-11675.28"/>
<polygon fill="blue" stroke="blue" points="2043.19,-11678.73 2052.67,-11673.99 2042.3,-11671.79 2043.19,-11678.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn zero_recipient_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid accoun...">
<polygon fill="white" stroke="black" points="2183,-11953.86 2051,-11953.86 2051,-11917.86 2183,-11917.86 2183,-11953.86"/>
<text text-anchor="middle" x="2117" y="-11932.16" font-family="Helvetica,sans-Serif" font-size="14.00">zero_recipient_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge872" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.03,-11925.4C2200.63,-11921.39 2219.4,-11916 2236,-11908.86 2372.59,-11850.12 2513.22,-11739.57 2572.22,-11690.45"/>
<polygon fill="blue" stroke="blue" points="2574.57,-11693.05 2579.99,-11683.94 2570.08,-11687.68 2574.57,-11693.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;fn valid_account_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::AccountData::test_data().try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(AccountData::from_proto_test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3332.5,-11555.86 3183.5,-11555.86 3183.5,-11519.86 3332.5,-11519.86 3332.5,-11555.86"/>
<text text-anchor="middle" x="3258" y="-11534.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(crate) fn from_proto_test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: FAKE_PROFILE_KEY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Some(UsernameData { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Use...">
<polygon fill="white" stroke="black" points="3858,-11555.86 3696,-11555.86 3696,-11519.86 3858,-11519.86 3858,-11555.86"/>
<text text-anchor="middle" x="3777" y="-11534.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_proto_test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3332.52,-11537.86C3425.51,-11537.86 3585.55,-11537.86 3685.82,-11537.86"/>
<polygon fill="blue" stroke="blue" points="3685.93,-11541.36 3695.93,-11537.86 3685.93,-11534.36 3685.93,-11541.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.24,-11539.86C3900.67,-11545.46 3949.69,-11560.06 3978,-11595.86 4005.94,-11631.21 3967.23,-11967.95 3998,-12000.86 4047.31,-12053.62 4140.66,-12045.64 4191.97,-12036.18"/>
<polygon fill="blue" stroke="blue" points="4192.81,-12039.58 4201.95,-12034.22 4191.46,-12032.71 4192.81,-12039.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;fn try_from( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(username, username_link): (String, Option&lt;proto::account_data::UsernameLink&gt;), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;username)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3295.5,-11609.86 3220.5,-11609.86 3220.5,-11573.86 3295.5,-11573.86 3295.5,-11609.86"/>
<text text-anchor="middle" x="3258" y="-11588.16" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge684" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3295.5,-11588.59C3428.22,-11577.54 3882.38,-11547.55 3978,-11644.86 4033.54,-11701.38 3943.7,-11943.16 3998,-12000.86 4047.49,-12053.46 4140.77,-12045.54 4192.02,-12036.13"/>
<polygon fill="blue" stroke="blue" points="4192.84,-12039.54 4201.98,-12034.18 4191.5,-12032.67 4192.84,-12039.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="2181.5,-5509.86 2052.5,-5509.86 2052.5,-5473.86 2181.5,-5473.86 2181.5,-5509.86"/>
<text text-anchor="middle" x="2117" y="-5488.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="2642,-5472.86 2562,-5472.86 2562,-5436.86 2642,-5436.86 2642,-5472.86"/>
<text text-anchor="middle" x="2602" y="-5451.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.64,-5486.99C2279.22,-5479.51 2463.72,-5465.38 2551.8,-5458.63"/>
<polygon fill="blue" stroke="blue" points="2552.09,-5462.12 2561.8,-5457.87 2551.56,-5455.14 2552.09,-5462.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="3345,-5509.86 3171,-5509.86 3171,-5473.86 3345,-5473.86 3345,-5509.86"/>
<text text-anchor="middle" x="3258" y="-5488.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.68,-5491.86C2371.43,-5491.86 2933.89,-5491.86 3160.64,-5491.86"/>
<polygon fill="blue" stroke="blue" points="3160.85,-5495.36 3170.85,-5491.86 3160.85,-5488.36 3160.85,-5495.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2642.44,-5457.09C2743.57,-5462.82 3014.44,-5478.14 3160.49,-5486.4"/>
<polygon fill="blue" stroke="blue" points="3160.61,-5489.92 3170.79,-5486.99 3161,-5482.93 3160.61,-5489.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.3,-5480.58C3413.71,-5477 3505.86,-5485.23 3556,-5544.86 3599.39,-5596.46 3531.53,-10348.19 3576,-10398.86 3600.45,-10426.72 3638.86,-10436.17 3675.5,-10437.66"/>
<polygon fill="blue" stroke="blue" points="3675.71,-10441.16 3685.78,-10437.88 3675.85,-10434.16 3675.71,-10441.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.31,-5480.58C3413.71,-5477 3505.86,-5485.23 3556,-5544.86 3599.87,-5597.04 3531.03,-10401.63 3576,-10452.86 3589.35,-10468.07 3606.85,-10477.79 3625.95,-10483.72"/>
<polygon fill="blue" stroke="blue" points="3625.19,-10487.14 3635.76,-10486.42 3627.04,-10480.39 3625.19,-10487.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.31,-5480.58C3413.71,-5477 3505.86,-5485.23 3556,-5544.86 3600.35,-5597.61 3530.54,-10455.07 3576,-10506.86 3612.63,-10548.61 3680.58,-10549.01 3727.02,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.69 3737.16,-10541.86 3726.78,-10539.76 3727.73,-10546.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.3,-5480.58C3413.71,-5477.01 3505.85,-5485.24 3556,-5544.86 3597.92,-5594.71 3533.4,-10184.61 3576,-10233.86 3586.46,-10245.95 3599.52,-10254.69 3613.93,-10260.89"/>
<polygon fill="blue" stroke="blue" points="3612.99,-10264.28 3623.58,-10264.6 3615.51,-10257.75 3612.99,-10264.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.3,-5480.58C3413.71,-5477.01 3505.86,-5485.23 3556,-5544.86 3598.91,-5595.89 3532.02,-10294.76 3576,-10344.86 3599.04,-10371.11 3634.45,-10381.01 3669.11,-10383.32"/>
<polygon fill="blue" stroke="blue" points="3669.19,-10386.82 3679.34,-10383.78 3669.51,-10379.83 3669.19,-10386.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="2161.5,-5455.86 2072.5,-5455.86 2072.5,-5419.86 2161.5,-5419.86 2161.5,-5455.86"/>
<text text-anchor="middle" x="2117" y="-5434.16" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge857" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2161.71,-5439.4C2251.69,-5442.57 2457.07,-5449.8 2551.65,-5453.13"/>
<polygon fill="blue" stroke="blue" points="2551.69,-5456.63 2561.81,-5453.48 2551.94,-5449.63 2551.69,-5456.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_self() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;recipient.try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Destination::...">
<polygon fill="white" stroke="black" points="2684.5,-11364.86 2519.5,-11364.86 2519.5,-11328.86 2684.5,-11328.86 2684.5,-11364.86"/>
<text text-anchor="middle" x="2602" y="-11343.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.51,-11343.5C2817.1,-11338.02 3076.58,-11327.31 3195.18,-11322.42"/>
<polygon fill="blue" stroke="blue" points="3195.34,-11325.91 3205.19,-11322 3195.05,-11318.92 3195.34,-11325.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_group() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Group::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2692.5,-11310.86 2511.5,-11310.86 2511.5,-11274.86 2692.5,-11274.86 2692.5,-11310.86"/>
<text text-anchor="middle" x="2602" y="-11289.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.56,-11296.56C2827.38,-11302.13 3079.01,-11312.52 3195.24,-11317.31"/>
<polygon fill="blue" stroke="blue" points="3195.25,-11320.82 3205.39,-11317.73 3195.54,-11313.82 3195.25,-11320.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn destination_distribution_list( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier: fn(&amp;mut proto::DistributionListItem), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut distribution_list = proto::DistributionListItem::tes...">
<polygon fill="white" stroke="black" points="2705.5,-11256.86 2498.5,-11256.86 2498.5,-11220.86 2705.5,-11220.86 2705.5,-11256.86"/>
<text text-anchor="middle" x="2602" y="-11235.16" font-family="Helvetica,sans-Serif" font-size="14.00">destination_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2705.85,-11245.11C2770.83,-11249.6 2856.5,-11256.51 2932,-11265.86 3024.14,-11277.28 3130.09,-11295.93 3195.3,-11308.05"/>
<polygon fill="blue" stroke="blue" points="3194.93,-11311.54 3205.41,-11309.93 3196.22,-11304.66 3194.93,-11311.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;ContactData, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3829.5,-11418.86 3724.5,-11418.86 3724.5,-11382.86 3829.5,-11382.86 3829.5,-11418.86"/>
<text text-anchor="middle" x="3777" y="-11397.16" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3310.94,-11328C3406.97,-11343.05 3611.82,-11375.14 3714.56,-11391.24"/>
<polygon fill="blue" stroke="blue" points="3714.06,-11394.7 3724.48,-11392.79 3715.14,-11387.79 3714.06,-11394.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;fn destination_contact(modifier: fn(&amp;mut proto::Contact)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut contact = proto::Contact::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut contact); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipi...">
<polygon fill="white" stroke="black" points="2678,-11202.86 2526,-11202.86 2526,-11166.86 2678,-11166.86 2678,-11202.86"/>
<text text-anchor="middle" x="2602" y="-11181.16" font-family="Helvetica,sans-Serif" font-size="14.00">destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.2,-11185.94C2745.35,-11188.11 2846.09,-11194.33 2932,-11211.86 3030.63,-11232 3140.96,-11272.74 3204.37,-11298.02"/>
<polygon fill="blue" stroke="blue" points="3203.17,-11301.31 3213.75,-11301.79 3205.77,-11294.82 3203.17,-11301.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_contact() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Contact::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}...">
<polygon fill="white" stroke="black" points="2697.5,-11148.86 2506.5,-11148.86 2506.5,-11112.86 2697.5,-11112.86 2697.5,-11148.86"/>
<text text-anchor="middle" x="2602" y="-11127.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2697.55,-11129.2C2764.22,-11130.29 2854.99,-11136.37 2932,-11157.86 3044.05,-11189.13 3163.43,-11259.49 3221.35,-11296.34"/>
<polygon fill="blue" stroke="blue" points="3219.47,-11299.29 3229.77,-11301.74 3223.24,-11293.4 3219.47,-11299.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;fn requires_destination() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: None, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r...">
<polygon fill="white" stroke="black" points="2680.5,-11094.86 2523.5,-11094.86 2523.5,-11058.86 2680.5,-11058.86 2680.5,-11094.86"/>
<text text-anchor="middle" x="2602" y="-11073.16" font-family="Helvetica,sans-Serif" font-size="14.00">requires_destination</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge685" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.7,-11072.47C2748.82,-11071.11 2849.57,-11075.24 2932,-11103.86 3055.58,-11146.78 3177.63,-11247.84 3230.15,-11294.91"/>
<polygon fill="blue" stroke="blue" points="3227.92,-11297.61 3237.68,-11301.72 3232.61,-11292.42 3227.92,-11297.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge807" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3829.86,-11412.99C3877.38,-11427.11 3945.16,-11455.48 3978,-11507.86 4007.12,-11554.31 3960.74,-11960.65 3998,-12000.86 4047.08,-12053.84 4140.52,-12045.77 4191.91,-12036.23"/>
<polygon fill="blue" stroke="blue" points="4192.77,-12039.63 4201.9,-12034.26 4191.41,-12032.76 4192.77,-12039.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;fn destination_group(modifier: fn(&amp;mut proto::Group)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut group = proto::Group::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut group); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = prot...">
<polygon fill="white" stroke="black" points="2672.5,-11472.86 2531.5,-11472.86 2531.5,-11436.86 2672.5,-11436.86 2672.5,-11472.86"/>
<text text-anchor="middle" x="2602" y="-11451.16" font-family="Helvetica,sans-Serif" font-size="14.00">destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge813" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2672.68,-11453.96C2739.74,-11451.96 2843.7,-11445.89 2932,-11427.86 3030.63,-11407.73 3140.96,-11366.99 3204.37,-11341.7"/>
<polygon fill="blue" stroke="blue" points="3205.77,-11344.91 3213.75,-11337.94 3203.17,-11338.41 3205.77,-11344.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;fn valid_distribution_list() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::DistributionListItem::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data(...">
<polygon fill="white" stroke="black" points="2683.5,-11418.86 2520.5,-11418.86 2520.5,-11382.86 2683.5,-11382.86 2683.5,-11418.86"/>
<text text-anchor="middle" x="2602" y="-11397.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge829" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.64,-11396.11C2750.36,-11391.74 2847.54,-11384.33 2932,-11373.86 3024.14,-11362.45 3130.09,-11343.8 3195.3,-11331.68"/>
<polygon fill="blue" stroke="blue" points="3196.22,-11335.07 3205.41,-11329.79 3194.93,-11328.19 3196.22,-11335.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chats_and_recipient_ids() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base = vec![crate::proto::backup::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: Some(proto::AccountData::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: Default::d...">
<polygon fill="white" stroke="black" points="1440.5,-12090.86 1196.5,-12090.86 1196.5,-12054.86 1440.5,-12054.86 1440.5,-12090.86"/>
<text text-anchor="middle" x="1318.5" y="-12069.16" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chats_and_recipient_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;fn backup_from_frames( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;frames: impl IntoIterator&lt;Item = proto::Frame&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; crate::CompletedBackup&lt;Store&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut reader = crate::backup::PartialBackup::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prot...">
<polygon fill="white" stroke="black" points="1678,-12036.86 1517,-12036.86 1517,-12000.86 1678,-12000.86 1678,-12036.86"/>
<text text-anchor="middle" x="1597.5" y="-12015.16" font-family="Helvetica,sans-Serif" font-size="14.00">backup_from_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1412.12,-12054.81C1442.64,-12048.86 1476.52,-12042.25 1506.82,-12036.35"/>
<polygon fill="blue" stroke="blue" points="1507.8,-12039.72 1516.94,-12034.37 1506.46,-12032.85 1507.8,-12039.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chat_item_frames_not_equal() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let first_contact = make_contact(&#39; first&#39; , 1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let second_contact = make_contact(&#39; second&#39; , 2); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let constant_frames = vec![ &#160;&#160;...">
<polygon fill="white" stroke="black" points="1457,-12036.86 1180,-12036.86 1180,-12000.86 1457,-12000.86 1457,-12036.86"/>
<text text-anchor="middle" x="1318.5" y="-12015.16" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chat_item_frames_not_equal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge618" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.19,-12018.86C1474.01,-12018.86 1490.84,-12018.86 1506.7,-12018.86"/>
<polygon fill="blue" stroke="blue" points="1506.97,-12022.36 1516.97,-12018.86 1506.97,-12015.36 1506.97,-12022.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge726" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1678.19,-12005.89C1687.13,-12001.67 1695.38,-11996.12 1702,-11988.86 1759.3,-11925.98 1684.52,-11867.03 1738,-11800.86 1752.2,-11783.3 1774.15,-11772.19 1794.79,-11765.22"/>
<polygon fill="blue" stroke="blue" points="1795.96,-11768.52 1804.47,-11762.21 1793.88,-11761.84 1795.96,-11768.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;fn can_serialize() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = Backup { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;meta: BackupMeta { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_time: Timestamp::test_value(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;purpose: crate::...">
<polygon fill="white" stroke="black" points="1371,-12144.86 1266,-12144.86 1266,-12108.86 1371,-12108.86 1371,-12144.86"/>
<text text-anchor="middle" x="1318.5" y="-12123.16" font-family="Helvetica,sans-Serif" font-size="14.00">can_serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge790" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1371.08,-12138.59C1529.1,-12171.15 2009.52,-12244.23 2236,-11988.86 2305.48,-11910.52 2188.86,-11119.8 2264,-11046.86 2470.01,-10846.88 3348.63,-10848.29 3556,-11046.86 3593.03,-11082.32 3541.71,-11469.75 3576,-11507.86 3603.06,-11537.94 3646.27,-11547.02 3685.62,-11547.91"/>
<polygon fill="blue" stroke="blue" points="3685.78,-11551.41 3695.8,-11547.96 3685.81,-11544.41 3685.78,-11551.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().</title>
<g id="a_node150"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;futures::executor::block_on(async_main()) }">
<polygon fill="white" stroke="black" points="1345.5,-11644.86 1291.5,-11644.86 1291.5,-11608.86 1345.5,-11608.86 1345.5,-11644.86"/>
<text text-anchor="middle" x="1318.5" y="-11623.16" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge649" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1345.76,-11633.16C1428,-11652.89 1681.8,-11713.76 1794.32,-11740.75"/>
<polygon fill="blue" stroke="blue" points="1793.58,-11744.17 1804.12,-11743.1 1795.21,-11737.36 1793.58,-11744.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge650" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1341.91,-11608.75C1372.93,-11584.16 1431.22,-11539.63 1485,-11507.86 1503.95,-11496.67 1525.64,-11485.93 1544.82,-11477.08"/>
<polygon fill="blue" stroke="blue" points="1546.36,-11480.22 1554.01,-11472.89 1543.46,-11473.85 1546.36,-11480.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1656.14,-11472.87C1673.35,-11480.96 1690.64,-11492.29 1702,-11507.86 1760.13,-11587.55 1670.94,-11654.53 1738,-11726.86 1752.3,-11742.29 1773.81,-11749.57 1794.1,-11752.8"/>
<polygon fill="blue" stroke="blue" points="1793.87,-11756.3 1804.23,-11754.12 1794.77,-11749.36 1793.87,-11756.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;pub async fn read_all(self) &#45;&gt; ReadResult&lt;backup::CompletedBackup&lt;Store&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.collect_all() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.await &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.and_then(|r| Ok(CompletedBackup::try_from(r)?)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="809.5,-11472.86 739.5,-11472.86 739.5,-11436.86 809.5,-11436.86 809.5,-11472.86"/>
<text text-anchor="middle" x="774.5" y="-11451.16" font-family="Helvetica,sans-Serif" font-size="14.00">read_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;pub async fn collect_all&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; ReadResult&lt;backup::PartialBackup&lt;M&gt;&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup::PartialBackup&lt;M&gt;: Send, &#160;&#160;&#160;&#160;{ &#160;...">
<polygon fill="white" stroke="black" points="1072.5,-11472.86 989.5,-11472.86 989.5,-11436.86 1072.5,-11436.86 1072.5,-11472.86"/>
<text text-anchor="middle" x="1031" y="-11451.16" font-family="Helvetica,sans-Serif" font-size="14.00">collect_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M809.56,-11454.86C853.15,-11454.86 929.04,-11454.86 979.4,-11454.86"/>
<polygon fill="blue" stroke="blue" points="979.42,-11458.36 989.42,-11454.86 979.42,-11451.36 979.42,-11458.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<g id="a_node153"><a xlink:title="async fn read_all_frames&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;purpose: Purpose, &#160;&#160;&#160;&#160;mut reader: VarintDelimitedReader&lt;impl AsyncRead + Unpin + VerifyHmac&gt;, &#160;&#160;&#160;&#160;mut visitor: impl F...">
<polygon fill="white" stroke="black" points="1381,-11472.86 1256,-11472.86 1256,-11436.86 1381,-11436.86 1381,-11472.86"/>
<text text-anchor="middle" x="1318.5" y="-11451.16" font-family="Helvetica,sans-Serif" font-size="14.00">read_all_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1381.32,-11454.86C1416.89,-11454.86 1462.32,-11454.86 1502.26,-11454.86"/>
<polygon fill="blue" stroke="blue" points="1502.28,-11458.36 1512.28,-11454.86 1502.28,-11451.36 1502.28,-11458.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1072.6,-11454.86C1117.51,-11454.86 1190.74,-11454.86 1245.44,-11454.86"/>
<polygon fill="blue" stroke="blue" points="1245.77,-11458.36 1255.77,-11454.86 1245.77,-11451.36 1245.77,-11458.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="edge727" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M821.59,-11410.64C866.07,-11420.08 933.25,-11434.34 979.24,-11444.09"/>
<polygon fill="blue" stroke="blue" points="978.78,-11447.57 989.29,-11446.23 980.24,-11440.73 978.78,-11447.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="3289,-5372.86 3227,-5372.86 3227,-5336.86 3289,-5336.86 3289,-5372.86"/>
<text text-anchor="middle" x="3258" y="-5351.16" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.41,-5349.28C3350.94,-5339.96 3489.94,-5329.29 3556,-5407.86 3600.61,-5460.92 3530.28,-10346.76 3576,-10398.86 3600.45,-10426.73 3638.85,-10436.17 3675.5,-10437.66"/>
<polygon fill="blue" stroke="blue" points="3675.7,-10441.16 3685.78,-10437.88 3675.85,-10434.17 3675.7,-10441.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.41,-5349.28C3350.94,-5339.96 3489.94,-5329.28 3556,-5407.86 3601.09,-5461.5 3529.78,-10400.2 3576,-10452.86 3589.34,-10468.07 3606.85,-10477.79 3625.95,-10483.73"/>
<polygon fill="blue" stroke="blue" points="3625.18,-10487.15 3635.75,-10486.42 3627.04,-10480.4 3625.18,-10487.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.41,-5349.28C3350.94,-5339.96 3489.94,-5329.28 3556,-5407.86 3601.57,-5462.07 3529.29,-10453.63 3576,-10506.86 3612.63,-10548.61 3680.58,-10549.01 3727.02,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.69 3737.16,-10541.87 3726.78,-10539.76 3727.73,-10546.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.41,-5349.28C3350.93,-5339.96 3489.93,-5329.29 3556,-5407.86 3599.14,-5459.16 3532.16,-10183.16 3576,-10233.86 3586.46,-10245.95 3599.52,-10254.69 3613.93,-10260.89"/>
<polygon fill="blue" stroke="blue" points="3612.99,-10264.28 3623.58,-10264.61 3615.51,-10257.75 3612.99,-10264.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.41,-5349.28C3350.94,-5339.96 3489.93,-5329.29 3556,-5407.86 3600.13,-5460.35 3530.77,-10293.33 3576,-10344.86 3599.03,-10371.11 3634.44,-10381.01 3669.11,-10383.32"/>
<polygon fill="blue" stroke="blue" points="3669.18,-10386.82 3679.33,-10383.79 3669.51,-10379.83 3669.18,-10386.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="2633,-5372.86 2571,-5372.86 2571,-5336.86 2633,-5336.86 2633,-5372.86"/>
<text text-anchor="middle" x="2602" y="-5351.16" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2633.23,-5354.86C2739.43,-5354.86 3095.5,-5354.86 3216.42,-5354.86"/>
<polygon fill="blue" stroke="blue" points="3216.71,-5358.36 3226.71,-5354.86 3216.71,-5351.36 3216.71,-5358.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="2148,-5372.86 2086,-5372.86 2086,-5336.86 2148,-5336.86 2148,-5372.86"/>
<text text-anchor="middle" x="2117" y="-5351.16" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge826" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2148.21,-5354.86C2231.82,-5354.86 2466.28,-5354.86 2560.78,-5354.86"/>
<polygon fill="blue" stroke="blue" points="2560.8,-5358.36 2570.8,-5354.86 2560.8,-5351.36 2560.8,-5358.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node159"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-10767.86 3231,-10767.86 3231,-10731.86 3285,-10731.86 3285,-10767.86"/>
<text text-anchor="middle" x="3258" y="-10746.16" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3273,-10767.98C3313.41,-10818.68 3436.28,-10961.98 3576,-11018.86 3617.47,-11035.75 3947.12,-11014.44 3978,-11046.86 4014.56,-11085.25 3962.35,-11961.62 3998,-12000.86 4046.56,-12054.32 4140.21,-12046.05 4191.77,-12036.36"/>
<polygon fill="blue" stroke="blue" points="4192.67,-12039.75 4201.79,-12034.36 4191.3,-12032.88 4192.67,-12039.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.35,-10749.86C3346.89,-10749.86 3503.97,-10749.86 3623.96,-10749.86"/>
<polygon fill="blue" stroke="blue" points="3623.99,-10753.36 3633.99,-10749.86 3623.99,-10746.36 3623.99,-10753.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.35,-10747.11C3342.93,-10741.1 3484.15,-10726.35 3600.37,-10714.21"/>
<polygon fill="blue" stroke="blue" points="3600.88,-10717.67 3610.46,-10713.15 3600.15,-10710.71 3600.88,-10717.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<g id="a_node160"><a xlink:title="fn verify_single_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;search_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;response: CondensedTreeSearchResponse, &#160;&#160;&#160;&#160;monitoring_data: Option&lt;MonitoringData&gt;, &#160;&#160;&#160;&#160;full_tree_head: &amp;FullTr...">
<polygon fill="white" stroke="black" points="1144,-3971.86 918,-3971.86 918,-3935.86 1144,-3935.86 1144,-3971.86"/>
<text text-anchor="middle" x="1031" y="-3950.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_single_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1144.02,-3963.67C1181.37,-3966.94 1221.68,-3970.47 1254.03,-3973.31"/>
<polygon fill="blue" stroke="blue" points="1253.97,-3976.81 1264.24,-3974.2 1254.58,-3969.84 1253.97,-3976.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<g id="a_node161"><a xlink:title="fn verify_chat_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&gt;, &#160;&#160;&#160;&#160;stored_account_data: Option&lt;AccountData&gt;, &#160;&#160;&#160;&#160;chat_search_...">
<polygon fill="white" stroke="black" points="882,-3971.86 667,-3971.86 667,-3935.86 882,-3935.86 882,-3971.86"/>
<text text-anchor="middle" x="774.5" y="-3950.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_chat_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M882.32,-3953.86C890.64,-3953.86 899.08,-3953.86 907.49,-3953.86"/>
<polygon fill="blue" stroke="blue" points="907.72,-3957.36 917.72,-3953.86 907.72,-3950.36 907.72,-3957.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;fn search_does_not_return_requested_data(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="631,-3998.86 337,-3998.86 337,-3962.86 631,-3962.86 631,-3998.86"/>
<text text-anchor="middle" x="484" y="-3977.16" font-family="Helvetica,sans-Serif" font-size="14.00">search_does_not_return_requested_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M631.36,-3967.17C639.89,-3966.37 648.41,-3965.57 656.8,-3964.79"/>
<polygon fill="blue" stroke="blue" points="657.33,-3968.25 666.96,-3963.83 656.68,-3961.28 657.33,-3968.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;fn search_returns_data_not_requested(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="615,-3944.86 353,-3944.86 353,-3908.86 615,-3908.86 615,-3944.86"/>
<text text-anchor="middle" x="484" y="-3923.16" font-family="Helvetica,sans-Serif" font-size="14.00">search_returns_data_not_requested</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M615.32,-3939.06C629.01,-3940.34 642.86,-3941.64 656.38,-3942.9"/>
<polygon fill="blue" stroke="blue" points="656.37,-3946.42 666.65,-3943.86 657.02,-3939.45 656.37,-3946.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M515.26,-3875.95C545.23,-3879.58 592.14,-3886.84 631,-3899.86 647.96,-3905.55 650.49,-3910.98 667,-3917.86 679.35,-3923.01 692.71,-3927.98 705.67,-3932.5"/>
<polygon fill="blue" stroke="blue" points="704.88,-3935.93 715.48,-3935.86 707.16,-3929.31 704.88,-3935.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;async fn monitor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;account_data: AccountData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished_tree_...">
<polygon fill="white" stroke="black" points="519.5,-3836.86 448.5,-3836.86 448.5,-3800.86 519.5,-3800.86 519.5,-3836.86"/>
<text text-anchor="middle" x="484" y="-3815.16" font-family="Helvetica,sans-Serif" font-size="14.00">monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="edge501" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.71,-3823.28C645.92,-3839.35 1081.82,-3894.86 1250.3,-3916.31"/>
<polygon fill="blue" stroke="blue" points="1249.92,-3919.79 1260.29,-3917.58 1250.81,-3912.84 1249.92,-3919.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge706" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M539.3,-4031.21C687.14,-4021.27 1096.32,-3993.74 1254.21,-3983.12"/>
<polygon fill="blue" stroke="blue" points="1254.5,-3986.61 1264.24,-3982.45 1254.03,-3979.63 1254.5,-3986.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn prompt(text: &amp;str) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; {} &gt;&#39; , text); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_line(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="192,-3998.86 125,-3998.86 125,-3962.86 192,-3962.86 192,-3998.86"/>
<text text-anchor="middle" x="158.5" y="-3977.16" font-family="Helvetica,sans-Serif" font-size="14.00">prompt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.23,-3983.72C225.4,-3984.8 276.35,-3981.22 309,-3953.86 328.62,-3937.43 309.34,-3916.25 329,-3899.86 360.56,-3873.56 408.62,-3868.92 442.65,-3869.52"/>
<polygon fill="blue" stroke="blue" points="442.62,-3873.02 452.73,-3869.86 442.85,-3866.03 442.62,-3873.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-3986.34C245.24,-3995.18 350.48,-4012.74 418.75,-4024.14"/>
<polygon fill="blue" stroke="blue" points="418.52,-4027.65 428.96,-4025.84 419.67,-4020.74 418.52,-4027.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;async fn search_for_account_that_isnt() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39;...">
<polygon fill="white" stroke="black" points="267,-3944.86 50,-3944.86 50,-3908.86 267,-3908.86 267,-3944.86"/>
<text text-anchor="middle" x="158.5" y="-3923.16" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_account_that_isnt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.22,-3908.88C327.63,-3898.8 399.39,-3886.82 443.04,-3879.53"/>
<polygon fill="blue" stroke="blue" points="443.69,-3882.97 452.98,-3877.87 442.54,-3876.07 443.69,-3882.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKI...">
<polygon fill="white" stroke="black" points="297,-3890.86 20,-3890.86 20,-3854.86 297,-3854.86 297,-3890.86"/>
<text text-anchor="middle" x="158.5" y="-3869.16" font-family="Helvetica,sans-Serif" font-size="14.00">search_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M297.16,-3872.86C349.75,-3872.86 405.82,-3872.86 442.45,-3872.86"/>
<polygon fill="blue" stroke="blue" points="442.7,-3876.36 452.7,-3872.86 442.7,-3869.36 442.7,-3876.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SK...">
<polygon fill="white" stroke="black" points="301,-3782.86 16,-3782.86 16,-3746.86 301,-3746.86 301,-3782.86"/>
<text text-anchor="middle" x="158.5" y="-3761.16" font-family="Helvetica,sans-Serif" font-size="14.00">monitor_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-3782.92C325.83,-3792.63 394.4,-3804.07 438.27,-3811.4"/>
<polygon fill="blue" stroke="blue" points="437.88,-3814.88 448.32,-3813.07 439.04,-3807.98 437.88,-3814.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;async fn search_for_deleted_account() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39; )...">
<polygon fill="white" stroke="black" points="263,-3836.86 54,-3836.86 54,-3800.86 263,-3800.86 263,-3836.86"/>
<text text-anchor="middle" x="158.5" y="-3815.16" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_deleted_account</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge782" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M263.19,-3836.17C324.4,-3846.39 398.4,-3858.74 443.03,-3866.19"/>
<polygon fill="blue" stroke="blue" points="442.46,-3869.64 452.9,-3867.84 443.62,-3862.74 442.46,-3869.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;async fn distinguished_integration_test(have_last_distinguished: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running in...">
<polygon fill="white" stroke="black" points="271.5,-4052.86 45.5,-4052.86 45.5,-4016.86 271.5,-4016.86 271.5,-4052.86"/>
<text text-anchor="middle" x="158.5" y="-4031.16" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge820" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M271.74,-4034.86C320.8,-4034.86 376.58,-4034.86 418.5,-4034.86"/>
<polygon fill="blue" stroke="blue" points="418.58,-4038.36 428.58,-4034.86 418.58,-4031.36 418.58,-4038.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="3361.5,-5289.86 3154.5,-5289.86 3154.5,-5253.86 3361.5,-5253.86 3361.5,-5289.86"/>
<text text-anchor="middle" x="3258" y="-5268.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3361.57,-5259.97C3427.72,-5258.58 3509.74,-5269.84 3556,-5324.86 3602.31,-5379.96 3528.53,-10452.76 3576,-10506.86 3612.63,-10548.61 3680.58,-10549.01 3727.02,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.7 3737.16,-10541.87 3726.78,-10539.76 3727.73,-10546.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3361.57,-5259.97C3427.72,-5258.58 3509.75,-5269.83 3556,-5324.86 3603.76,-5381.68 3527.05,-10613.07 3576,-10668.86 3583.27,-10677.15 3591.77,-10683.8 3601.09,-10689.1"/>
<polygon fill="blue" stroke="blue" points="3599.76,-10692.36 3610.26,-10693.78 3602.94,-10686.12 3599.76,-10692.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node174"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="3349,-5235.86 3167,-5235.86 3167,-5199.86 3349,-5199.86 3349,-5235.86"/>
<text text-anchor="middle" x="3258" y="-5214.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge563" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.95,-5199.82C3404.91,-5189.18 3500.96,-5187.35 3556,-5244.86 3588.92,-5279.26 3547.55,-5634.69 3576,-5672.86 3604.75,-5711.45 3656.34,-5728.88 3699.92,-5736.7"/>
<polygon fill="blue" stroke="blue" points="3699.51,-5740.18 3709.95,-5738.36 3700.65,-5733.27 3699.51,-5740.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge566" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-5199.86C3402.45,-5188.34 3501.25,-5185.13 3556,-5244.86 3607.41,-5300.95 3525.82,-10665.67 3576,-10722.86 3588.94,-10737.61 3605.78,-10747.2 3624.21,-10753.18"/>
<polygon fill="blue" stroke="blue" points="3623.4,-10756.59 3633.97,-10755.98 3625.33,-10749.86 3623.4,-10756.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge562" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-5199.86C3402.44,-5188.34 3501.25,-5185.13 3556,-5244.86 3605.39,-5298.74 3527.8,-10451.93 3576,-10506.86 3612.63,-10548.61 3680.58,-10549.01 3727.01,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.7 3737.16,-10541.87 3726.78,-10539.76 3727.73,-10546.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge564" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-5199.86C3402.44,-5188.34 3501.25,-5185.13 3556,-5244.86 3606.4,-5299.84 3526.81,-10558.8 3576,-10614.86 3590.53,-10631.42 3609.98,-10641.48 3631.07,-10647.22"/>
<polygon fill="blue" stroke="blue" points="3630.32,-10650.64 3640.86,-10649.57 3631.95,-10643.83 3630.32,-10650.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge565" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-5199.86C3402.44,-5188.34 3501.25,-5185.13 3556,-5244.86 3606.9,-5300.4 3526.32,-10612.23 3576,-10668.86 3583.27,-10677.15 3591.77,-10683.8 3601.09,-10689.1"/>
<polygon fill="blue" stroke="blue" points="3599.76,-10692.36 3610.26,-10693.78 3602.94,-10686.12 3599.76,-10692.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node175"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="3821.5,-4602.86 3732.5,-4602.86 3732.5,-4566.86 3821.5,-4566.86 3821.5,-4602.86"/>
<text text-anchor="middle" x="3777" y="-4581.16" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node268"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4684,-4357.86 4630,-4357.86 4630,-4321.86 4684,-4321.86 4684,-4357.86"/>
<text text-anchor="middle" x="4657" y="-4336.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.71,-4591.15C3866.02,-4595 3934.14,-4593.61 3978,-4557.86 3998.81,-4540.9 3977.67,-4518.4 3998,-4500.86 4156.33,-4364.27 4287.68,-4530.32 4460,-4411.86 4479.41,-4398.52 4468.38,-4379.91 4488,-4366.86 4527.41,-4340.66 4583.28,-4336.68 4619.58,-4337.37"/>
<polygon fill="blue" stroke="blue" points="4619.61,-4340.87 4629.72,-4337.69 4619.84,-4333.87 4619.61,-4340.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node270"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="4266,-4209.86 4192,-4209.86 4192,-4173.86 4266,-4173.86 4266,-4209.86"/>
<text text-anchor="middle" x="4229" y="-4188.16" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.79,-4593.23C3867.84,-4599.23 3938.93,-4599.99 3978,-4557.86 4029.32,-4502.53 3946.21,-4273.75 3998,-4218.86 4044.44,-4169.66 4129.21,-4173.48 4181.85,-4181.87"/>
<polygon fill="blue" stroke="blue" points="4181.48,-4185.36 4191.93,-4183.59 4182.66,-4178.46 4181.48,-4185.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node176"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="3389.5,-4602.86 3126.5,-4602.86 3126.5,-4566.86 3389.5,-4566.86 3389.5,-4602.86"/>
<text text-anchor="middle" x="3258" y="-4581.16" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3389.79,-4584.86C3497.3,-4584.86 3644.15,-4584.86 3722.16,-4584.86"/>
<polygon fill="blue" stroke="blue" points="3722.24,-4588.36 3732.24,-4584.86 3722.24,-4581.36 3722.24,-4588.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node177"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="3391,-4548.86 3125,-4548.86 3125,-4512.86 3391,-4512.86 3391,-4548.86"/>
<text text-anchor="middle" x="3258" y="-4527.16" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node178"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="3824,-4548.86 3730,-4548.86 3730,-4512.86 3824,-4512.86 3824,-4548.86"/>
<text text-anchor="middle" x="3777" y="-4527.16" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge651" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.13,-4530.86C3497.36,-4530.86 3641.34,-4530.86 3719.63,-4530.86"/>
<polygon fill="blue" stroke="blue" points="3719.76,-4534.36 3729.76,-4530.86 3719.76,-4527.36 3719.76,-4534.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-4320.86 4202,-4320.86 4202,-4284.86 4256,-4284.86 4256,-4320.86"/>
<text text-anchor="middle" x="4229" y="-4299.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge749" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3824.18,-4538.17C3869.8,-4542.53 3938.35,-4540.91 3978,-4500.86 4023.15,-4455.26 3954.85,-4405.36 3998,-4357.86 4047.36,-4303.54 4139.95,-4298.26 4191.32,-4300.03"/>
<polygon fill="blue" stroke="blue" points="4191.48,-4303.54 4201.62,-4300.5 4191.79,-4296.55 4191.48,-4303.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node179"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3293,-4411.86 3223,-4411.86 3223,-4375.86 3293,-4375.86 3293,-4411.86"/>
<text text-anchor="middle" x="3258" y="-4390.16" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.15,-4385.56C3353.87,-4373 3481.29,-4356.87 3556,-4420.86 3583.84,-4444.7 3548.87,-4476.22 3576,-4500.86 3614.46,-4535.79 3675.28,-4540.37 3719.76,-4538.01"/>
<polygon fill="blue" stroke="blue" points="3720.09,-4541.49 3729.84,-4537.34 3719.63,-4534.51 3720.09,-4541.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3290.5,-4465.86 3225.5,-4465.86 3225.5,-4429.86 3290.5,-4429.86 3290.5,-4465.86"/>
<text text-anchor="middle" x="3258" y="-4444.16" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge643" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3290.58,-4443.97C3349.97,-4438.48 3479.21,-4435.53 3556,-4500.86 3576.45,-4518.26 3555.19,-4540.9 3576,-4557.86 3616.61,-4590.96 3678,-4594.6 3722.05,-4591.91"/>
<polygon fill="blue" stroke="blue" points="3722.58,-4595.38 3732.29,-4591.15 3722.06,-4588.4 3722.58,-4595.38"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<g id="a_node181"><a xlink:title=" &#160;&#160;&#160;pub fn from_slice(bytes: &amp;[u8]) &#45;&gt; Option&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO use Iterator::array_chunks once that&#39;s stabilized. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// See https://github.com/rust&#45;lang/rust/issues/100450. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chu...">
<polygon fill="white" stroke="black" points="5546.5,-8057.86 5460.5,-8057.86 5460.5,-8021.86 5546.5,-8021.86 5546.5,-8057.86"/>
<text text-anchor="middle" x="5503.5" y="-8036.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_slice</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5501.54,-8021.85C5494.39,-7888.02 5448.94,-7034.29 5416,-6339.86 5414.29,-6303.87 5409.62,-5720.31 5387.5,-5691.86 5387.01,-5691.24 5386.51,-5690.63 5386,-5690.03"/>
<polygon fill="blue" stroke="blue" points="5388.3,-5687.38 5378.65,-5683.02 5383.47,-5692.45 5388.3,-5687.38"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().</title>
<g id="a_node182"><a xlink:title="pub fn scalar_from_slice_canonical(bytes: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 32]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(scalar_bytes).into(...">
<polygon fill="white" stroke="black" points="5123,-12374.86 4917,-12374.86 4917,-12338.86 5123,-12338.86 5123,-12374.86"/>
<text text-anchor="middle" x="5020" y="-12353.16" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5123.14,-12340.85C5147.64,-12331.96 5171.02,-12318.19 5186,-12296.86 5238.74,-12221.8 5151.13,-5765.38 5206,-5691.86 5206.38,-5691.35 5206.77,-5690.85 5207.17,-5690.36"/>
<polygon fill="blue" stroke="blue" points="5209.77,-5692.71 5214.37,-5683.16 5204.82,-5687.76 5209.77,-5692.71"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node183"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="5106.5,-12428.86 4933.5,-12428.86 4933.5,-12392.86 5106.5,-12392.86 5106.5,-12428.86"/>
<text text-anchor="middle" x="5020" y="-12407.16" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5106.72,-12427.83C5234.01,-12447.44 5470.88,-12461.45 5591,-12324.86 5706.56,-12193.47 5731.16,-6261.4 5732.9,-5801.11"/>
<polygon fill="blue" stroke="blue" points="5736.4,-5801 5732.93,-5790.99 5729.4,-5800.97 5736.4,-5801"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node184"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="4286.5,-11120.86 4171.5,-11120.86 4171.5,-11084.86 4286.5,-11084.86 4286.5,-11120.86"/>
<text text-anchor="middle" x="4229" y="-11099.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4236.93,-11121.1C4269.01,-11206.38 4403.82,-11574.91 4460,-11889.86 4467.96,-11934.49 4455.28,-12265.5 4488,-12296.86 4573.22,-12378.55 4900.96,-12310.86 5019,-12310.86 5019,-12310.86 5019,-12310.86 5298,-12310.86 5338.26,-12310.86 5360.11,-12326.37 5387.5,-12296.86 5768.24,-11886.74 5558.49,-10345.53 5591,-9786.86 5687.85,-8122.64 5727.65,-6066.17 5732.49,-5801.38"/>
<polygon fill="blue" stroke="blue" points="5735.99,-5801.15 5732.68,-5791.09 5729,-5801.02 5735.99,-5801.15"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node185"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="4684,-11066.86 4630,-11066.86 4630,-11030.86 4684,-11030.86 4684,-11066.86"/>
<text text-anchor="middle" x="4657" y="-11045.16" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4286.57,-11095.69C4375.45,-11084.43 4545.31,-11062.89 4619.64,-11053.47"/>
<polygon fill="blue" stroke="blue" points="4620.42,-11056.9 4629.9,-11052.17 4619.54,-11049.96 4620.42,-11056.9"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node186"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="4721,-11120.86 4593,-11120.86 4593,-11084.86 4721,-11084.86 4721,-11120.86"/>
<text text-anchor="middle" x="4657" y="-11099.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4286.57,-11102.86C4362.83,-11102.86 4498.71,-11102.86 4582.72,-11102.86"/>
<polygon fill="blue" stroke="blue" points="4582.95,-11106.36 4592.95,-11102.86 4582.95,-11099.36 4582.95,-11106.36"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="5048,-10176.86 4992,-10176.86 4992,-10140.86 5048,-10140.86 5048,-10176.86"/>
<text text-anchor="middle" x="5020" y="-10155.16" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4660.02,-11030.81C4672.69,-10920.53 4744.51,-10338.28 4862,-10210.86 4892.91,-10177.34 4945.9,-10165.4 4981.67,-10161.16"/>
<polygon fill="blue" stroke="blue" points="4982.14,-10164.63 4991.72,-10160.12 4981.41,-10157.67 4982.14,-10164.63"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="5346,-10176.86 5248,-10176.86 5248,-10140.86 5346,-10140.86 5346,-10176.86"/>
<text text-anchor="middle" x="5297" y="-10155.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge672" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4721.08,-11105.95C4755.04,-11104.57 4796.01,-11097.65 4826,-11075.86 5150.17,-10840.37 5266.87,-10315.04 5290.99,-10187.27"/>
<polygon fill="blue" stroke="blue" points="5294.49,-10187.6 5292.87,-10177.13 5287.61,-10186.33 5294.49,-10187.6"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="4749.5,-10196.86 4564.5,-10196.86 4564.5,-10160.86 4749.5,-10160.86 4749.5,-10196.86"/>
<text text-anchor="middle" x="4657" y="-10175.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4703.35,-10196.92C4828.55,-10243.47 5183.22,-10352.72 5387.5,-10185.86 5669.97,-9955.14 5538.33,-9751.77 5591,-9390.86 5700.34,-8641.63 5729.64,-6098.65 5732.72,-5801.31"/>
<polygon fill="blue" stroke="blue" points="5736.22,-5801 5732.82,-5790.96 5729.22,-5800.93 5736.22,-5801"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4749.56,-10173.79C4824.76,-10169.62 4927.42,-10163.94 4981.74,-10160.93"/>
<polygon fill="blue" stroke="blue" points="4982.15,-10164.41 4991.94,-10160.36 4981.76,-10157.42 4982.15,-10164.41"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4749.97,-10187.48C4855.63,-10195.66 5034.01,-10204.24 5186,-10185.86 5202.97,-10183.81 5221.11,-10180.04 5237.66,-10175.95"/>
<polygon fill="blue" stroke="blue" points="5238.91,-10179.24 5247.73,-10173.38 5237.17,-10172.46 5238.91,-10179.24"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5035.99,-10140.68C5070.42,-10097.63 5154.63,-9984.72 5186,-9873.86 5208.67,-9793.76 5177.86,-9203.21 5206,-9124.86 5299.98,-8863.22 5494.02,-8892.41 5591,-8631.86 5695.08,-8352.22 5728.85,-6080.99 5732.63,-5801.11"/>
<polygon fill="blue" stroke="blue" points="5736.13,-5801.02 5732.77,-5790.97 5729.13,-5800.92 5736.13,-5801.02"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5048.12,-10158.86C5091.97,-10158.86 5179.39,-10158.86 5237.81,-10158.86"/>
<polygon fill="blue" stroke="blue" points="5238,-10162.36 5248,-10158.86 5238,-10155.36 5238,-10162.36"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge596" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5304.07,-10140.81C5339.63,-10034.21 5521.54,-9475.62 5591,-9003.86 5689.16,-8337.15 5728.09,-6079.98 5732.56,-5801.19"/>
<polygon fill="blue" stroke="blue" points="5736.06,-5801.14 5732.72,-5791.08 5729.06,-5801.02 5736.06,-5801.14"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="edge595" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5299.77,-10140.54C5318.31,-9948.42 5476.91,-8305.01 5499.76,-8068.24"/>
<polygon fill="blue" stroke="blue" points="5503.27,-8068.33 5500.75,-8058.04 5496.3,-8067.65 5503.27,-8068.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node190"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1887.5,-1482.86 1812.5,-1482.86 1812.5,-1446.86 1887.5,-1446.86 1887.5,-1482.86"/>
<text text-anchor="middle" x="1850" y="-1461.16" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node194"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2629,-1482.86 2575,-1482.86 2575,-1446.86 2629,-1446.86 2629,-1482.86"/>
<text text-anchor="middle" x="2602" y="-1461.16" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1887.68,-1464.86C2014.99,-1464.86 2436.93,-1464.86 2564.29,-1464.86"/>
<polygon fill="blue" stroke="blue" points="2564.66,-1468.36 2574.66,-1464.86 2564.66,-1461.36 2564.66,-1468.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node195"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2629,-1536.86 2575,-1536.86 2575,-1500.86 2629,-1500.86 2629,-1536.86"/>
<text text-anchor="middle" x="2602" y="-1515.16" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1887.52,-1468.64C1917.25,-1471.64 1960.31,-1475.82 1998,-1478.86 2212.73,-1496.21 2470.94,-1511.46 2564.73,-1516.82"/>
<polygon fill="blue" stroke="blue" points="2564.64,-1520.32 2574.83,-1517.4 2565.04,-1513.33 2564.64,-1520.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node196"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="2181,-74.86 2053,-74.86 2053,-38.86 2181,-38.86 2181,-74.86"/>
<text text-anchor="middle" x="2117" y="-53.16" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1854.4,-1446.8C1882.48,-1297.61 2075.92,-269.8 2110.66,-85.22"/>
<polygon fill="blue" stroke="blue" points="2114.14,-85.68 2112.55,-75.21 2107.26,-84.39 2114.14,-85.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node191"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="2180,-1619.86 2054,-1619.86 2054,-1583.86 2180,-1583.86 2180,-1619.86"/>
<text text-anchor="middle" x="2117" y="-1598.16" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node193"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="2688,-1619.86 2516,-1619.86 2516,-1583.86 2688,-1583.86 2688,-1619.86"/>
<text text-anchor="middle" x="2602" y="-1598.16" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.16,-1601.86C2262.71,-1601.86 2409.34,-1601.86 2505.87,-1601.86"/>
<polygon fill="blue" stroke="blue" points="2505.92,-1605.36 2515.92,-1601.86 2505.92,-1598.36 2505.92,-1605.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node192"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="1883,-1619.86 1817,-1619.86 1817,-1583.86 1883,-1583.86 1883,-1619.86"/>
<text text-anchor="middle" x="1850" y="-1598.16" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1883.23,-1601.86C1922.8,-1601.86 1991.1,-1601.86 2043.52,-1601.86"/>
<polygon fill="blue" stroke="blue" points="2043.78,-1605.36 2053.78,-1601.86 2043.78,-1598.36 2043.78,-1605.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.27,-1595.46C2759.8,-1594.46 2861.33,-1603.76 2932,-1654.86 2953.91,-1670.7 2944.09,-1687.01 2960,-1708.86 3043.26,-1823.22 3169.8,-1935.67 3227.03,-1984.08"/>
<polygon fill="blue" stroke="blue" points="3225.05,-1986.99 3234.95,-1990.75 3229.56,-1981.64 3225.05,-1986.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.29,-1589.21C2763.91,-1583.3 2871.48,-1588.88 2932,-1654.86 2989.38,-1717.43 2900.49,-1975.32 2960,-2035.86 3018.51,-2095.4 3121.12,-2090.65 3189.08,-2078.98"/>
<polygon fill="blue" stroke="blue" points="3190.04,-2082.36 3199.26,-2077.14 3188.8,-2075.47 3190.04,-2082.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.09,-1457.08C2691.7,-1440.2 2851.27,-1408.09 2932,-1491.86 2980.16,-1541.84 2937.05,-2050.36 2960,-2115.86 3018.21,-2281.98 3167.98,-2438.65 3229.74,-2498.39"/>
<polygon fill="blue" stroke="blue" points="3227.53,-2501.12 3237.17,-2505.52 3232.38,-2496.07 3227.53,-2501.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.19,-1456.99C2692.02,-1439.89 2852.05,-1407.35 2932,-1491.86 3012.89,-1577.37 2879.48,-2465 2960,-2550.86 3027.1,-2622.41 3157.54,-2602.85 3220.83,-2587.84"/>
<polygon fill="blue" stroke="blue" points="3221.88,-2591.19 3230.75,-2585.4 3220.2,-2584.39 3221.88,-2591.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.16,-1457.73C2690.55,-1442.73 2845.22,-1415.24 2932,-1491.86 2977.61,-1532.13 2914.77,-1585.17 2960,-1625.86 3012.84,-1673.41 3094.32,-1678.62 3158.58,-1673.21"/>
<polygon fill="blue" stroke="blue" points="3159.11,-1676.68 3168.74,-1672.26 3158.45,-1669.71 3159.11,-1676.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node262"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="3345,-1590.86 3171,-1590.86 3171,-1554.86 3345,-1554.86 3345,-1590.86"/>
<text text-anchor="middle" x="3258" y="-1569.16" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.2,-1459.14C2688.71,-1447.7 2836.34,-1428.2 2932,-1491.86 2954.51,-1506.84 2937.56,-1530.79 2960,-1545.86 3018.32,-1585.04 3098.26,-1590.27 3160.51,-1586.54"/>
<polygon fill="blue" stroke="blue" points="3161,-1590.01 3170.74,-1585.83 3160.52,-1583.03 3161,-1590.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge637" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.38,-1513.5C2692.65,-1502.34 2853.57,-1484.44 2932,-1571.86 2972.42,-1616.91 2939.8,-2058.81 2960,-2115.86 3018.76,-2281.79 3168.21,-2438.57 3229.82,-2498.36"/>
<polygon fill="blue" stroke="blue" points="3227.6,-2501.08 3237.23,-2505.5 3232.45,-2496.04 3227.6,-2501.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge638" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.04,-1513.47C2692.27,-1502.06 2854.38,-1483.34 2932,-1571.86 3003.74,-1653.69 2885.48,-2471.56 2960,-2550.86 3027.17,-2622.34 3157.58,-2602.81 3220.84,-2587.83"/>
<polygon fill="blue" stroke="blue" points="3221.89,-2591.18 3230.76,-2585.38 3220.22,-2584.38 3221.89,-2591.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge640" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.43,-1515.67C2689.43,-1509.88 2838,-1503.89 2932,-1571.86 2953.91,-1587.7 2937.64,-1610.68 2960,-1625.86 3017.67,-1665.03 3096.73,-1671.32 3158.79,-1668.47"/>
<polygon fill="blue" stroke="blue" points="3159.19,-1671.95 3168.98,-1667.91 3158.81,-1664.96 3159.19,-1671.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge639" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.04,-1521.01C2717.17,-1528.29 3007.26,-1552.24 3160.38,-1564.89"/>
<polygon fill="blue" stroke="blue" points="3160.46,-1568.4 3170.71,-1565.74 3161.04,-1561.43 3160.46,-1568.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node197"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="2689,-74.86 2515,-74.86 2515,-38.86 2689,-38.86 2689,-74.86"/>
<text text-anchor="middle" x="2602" y="-53.16" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.14,-56.86C2263.51,-56.86 2408.41,-56.86 2504.56,-56.86"/>
<polygon fill="blue" stroke="blue" points="2504.58,-60.36 2514.58,-56.86 2504.58,-53.36 2504.58,-60.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge531" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.38,-38.8C2856.28,-4.51 3270.9,52.93 3556,-109.86 3863.22,-285.29 3798.64,-479.61 3998,-771.86 4200.39,-1068.56 4333.48,-1098.73 4460,-1434.86 4586.32,-1770.46 4645.6,-2959.53 4654.74,-3158.52"/>
<polygon fill="blue" stroke="blue" points="4651.25,-3158.9 4655.2,-3168.73 4658.25,-3158.58 4651.25,-3158.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge530" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.15,-43.45C2765.36,-37.01 2873.32,-42.25 2932,-109.86 2987.21,-173.48 2902.93,-1563.9 2960,-1625.86 3010.51,-1680.71 3098.05,-1683.38 3165.04,-1675.21"/>
<polygon fill="blue" stroke="blue" points="3165.73,-1678.64 3175.19,-1673.87 3164.82,-1671.7 3165.73,-1678.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3316.61,-1994.49C3384.23,-1981.44 3494.87,-1972.71 3556,-2035.86 3609.26,-2090.88 3528.07,-2320.14 3576,-2379.86 3692.24,-2524.7 3860.08,-2350.39 3978,-2493.86 4012.69,-2536.06 3978.32,-2687.91 3998,-2738.86 4043.22,-2855.95 4149.65,-2965.31 4200.29,-3012.89"/>
<polygon fill="blue" stroke="blue" points="4197.93,-3015.47 4207.63,-3019.72 4202.69,-3010.34 4197.93,-3015.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge845" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3276.95,-2080.99C3330.85,-2136.74 3491.47,-2312.83 3556,-2493.86 3592.68,-2596.77 3528.98,-2640.25 3576,-2738.86 3611.7,-2813.73 3690.29,-2874.53 3737.63,-2906.16"/>
<polygon fill="blue" stroke="blue" points="3735.81,-2909.15 3746.09,-2911.72 3739.66,-2903.3 3735.81,-2909.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.26,-3733.87C3403.52,-3744.97 3501.05,-3747.53 3556,-3688.86 3585.98,-3656.86 3544.6,-2930.47 3576,-2899.86 3646.33,-2831.3 4366.42,-2870.01 4460,-2899.86 4650.09,-2960.51 4697.01,-3007.63 4826,-3159.86 4849.64,-3187.77 4833.44,-3211.02 4862,-3233.86 4869.15,-3239.58 4877.03,-3244.44 4885.34,-3248.57"/>
<polygon fill="blue" stroke="blue" points="4883.96,-3251.79 4894.51,-3252.77 4886.87,-3245.42 4883.96,-3251.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3259.36,-3643.75C3262.47,-3543.35 3292.18,-3052.87 3576,-2859.86 3690.93,-2781.71 4708.46,-2831.7 4826,-2905.86 4930.72,-2971.93 4989.42,-3117.77 5010.24,-3178.97"/>
<polygon fill="blue" stroke="blue" points="5007,-3180.32 5013.47,-3188.71 5013.64,-3178.12 5007,-3180.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="2716,-3706.86 2488,-3706.86 2488,-3670.86 2716,-3670.86 2716,-3706.86"/>
<text text-anchor="middle" x="2602" y="-3685.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge508" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.17,-3693.54C2840.15,-3698.65 3037.15,-3706.79 3156.06,-3711.7"/>
<polygon fill="blue" stroke="blue" points="3156.12,-3715.2 3166.25,-3712.12 3156.41,-3708.21 3156.12,-3715.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge507" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.17,-3684.19C2841.93,-3679 3042.81,-3670.71 3161.12,-3665.82"/>
<polygon fill="blue" stroke="blue" points="3161.4,-3669.31 3171.25,-3665.4 3161.12,-3662.32 3161.4,-3669.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.07,-3041.87C4299.3,-3048.95 4388.17,-3065.38 4460,-3090.86 4516.03,-3110.75 4577.02,-3142.32 4615.83,-3163.79"/>
<polygon fill="blue" stroke="blue" points="4614.28,-3166.93 4624.72,-3168.74 4617.69,-3160.82 4614.28,-3166.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="3893.5,-3055.86 3660.5,-3055.86 3660.5,-3019.86 3893.5,-3019.86 3893.5,-3055.86"/>
<text text-anchor="middle" x="3777" y="-3034.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3893.59,-3037.86C3992.06,-3037.86 4127.48,-3037.86 4191.56,-3037.86"/>
<polygon fill="blue" stroke="blue" points="4191.95,-3041.36 4201.95,-3037.86 4191.95,-3034.36 4191.95,-3041.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node205"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="3948,-3001.86 3606,-3001.86 3606,-2965.86 3948,-2965.86 3948,-3001.86"/>
<text text-anchor="middle" x="3777" y="-2980.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge686" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3928.16,-3001.88C4021.75,-3013.11 4134.86,-3026.69 4191.68,-3033.5"/>
<polygon fill="blue" stroke="blue" points="4191.27,-3036.98 4201.61,-3034.7 4192.1,-3030.03 4191.27,-3036.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge761" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.08,-2927.97C3993.06,-2924.82 4373.35,-2925.84 4460,-3010.86 4525,-3074.65 4424.32,-3148.75 4488,-3213.86 4512.15,-3238.55 4549.27,-3246.32 4582.49,-3247.48"/>
<polygon fill="blue" stroke="blue" points="4582.6,-3250.98 4592.66,-3247.64 4582.71,-3243.98 4582.6,-3250.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.31,-2513.86C3424.13,-2462.94 4079.57,-2245.76 4460,-2530.86 4565.27,-2609.76 4635.04,-3042.69 4651.99,-3158.41"/>
<polygon fill="blue" stroke="blue" points="4648.57,-3159.2 4653.46,-3168.6 4655.49,-3158.2 4648.57,-3159.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node208"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="4264.5,-2703.86 4193.5,-2703.86 4193.5,-2667.86 4264.5,-2667.86 4264.5,-2703.86"/>
<text text-anchor="middle" x="4229" y="-2682.16" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4260.93,-2703.9C4312.56,-2735.91 4415.04,-2808.01 4460,-2899.86 4490.8,-2962.79 4440.24,-3162.61 4488,-3213.86 4511.73,-3239.32 4549.2,-3247.07 4582.73,-3248.01"/>
<polygon fill="blue" stroke="blue" points="4582.97,-3251.51 4593,-3248.1 4583.03,-3244.51 4582.97,-3251.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3346.12,-2685.86C3457.31,-2685.86 3645.5,-2685.86 3731.15,-2685.86"/>
<polygon fill="blue" stroke="blue" points="3731.32,-2689.36 3741.32,-2685.86 3731.32,-2682.36 3731.32,-2689.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node210"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="3349,-2649.86 3167,-2649.86 3167,-2613.86 3349,-2613.86 3349,-2649.86"/>
<text text-anchor="middle" x="3258" y="-2628.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.08,-2639.31C3408,-2644.36 3486.63,-2651.45 3556,-2658.86 3616.75,-2665.35 3686.77,-2674.18 3731.19,-2679.95"/>
<polygon fill="blue" stroke="blue" points="3731,-2683.45 3741.36,-2681.27 3731.9,-2676.51 3731,-2683.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge629" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3812.6,-2669.64C3923.95,-2620.08 4276.44,-2484.33 4460,-2658.86 4504.75,-2701.41 4446.78,-3167.89 4488,-3213.86 4511.23,-3239.78 4548.66,-3247.56 4582.3,-3248.41"/>
<polygon fill="blue" stroke="blue" points="4582.58,-3251.91 4592.6,-3248.46 4582.62,-3244.91 4582.58,-3251.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge628" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3812.56,-2685.86C3893.14,-2685.86 4093.39,-2685.86 4183.19,-2685.86"/>
<polygon fill="blue" stroke="blue" points="4183.32,-2689.36 4193.32,-2685.86 4183.32,-2682.36 4183.32,-2689.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge751" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.03,-2575.82C3451.42,-2562.97 4362.22,-2496.26 4460,-2567.86 4560.23,-2641.26 4633.16,-3047.12 4651.5,-3158.55"/>
<polygon fill="blue" stroke="blue" points="4648.09,-3159.38 4653.15,-3168.68 4655,-3158.25 4648.09,-3159.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3274.91,-1674.03C3319.28,-1724.05 3449.48,-1866.57 3576,-1963.86 3939.14,-2243.11 4226.53,-2099.73 4460,-2493.86 4500.8,-2562.75 4434.9,-3153.95 4488,-3213.86 4511.17,-3240.01 4548.79,-3247.76 4582.56,-3248.53"/>
<polygon fill="blue" stroke="blue" points="4582.89,-3252.03 4592.9,-3248.56 4582.91,-3245.03 4582.89,-3252.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node214"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="4268.5,-653.86 4189.5,-653.86 4189.5,-617.86 4268.5,-617.86 4268.5,-653.86"/>
<text text-anchor="middle" x="4229" y="-632.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge856" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.66,-632.19C4320.83,-629.62 4412.65,-633.92 4460,-688.86 4629.82,-885.91 4653.41,-2895.44 4655.77,-3158.51"/>
<polygon fill="blue" stroke="blue" points="4652.27,-3158.79 4655.86,-3168.76 4659.27,-3158.73 4652.27,-3158.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node215"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="2684,-2026.86 2520,-2026.86 2520,-1990.86 2684,-1990.86 2684,-2026.86"/>
<text text-anchor="middle" x="2602" y="-2005.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.18,-2008.86C2814.48,-2008.86 3067.93,-2008.86 3189.19,-2008.86"/>
<polygon fill="blue" stroke="blue" points="3189.45,-2012.36 3199.45,-2008.86 3189.45,-2005.36 3189.45,-2012.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.12,-2015.5C2750.72,-2020.95 2847.47,-2028.88 2932,-2035.86 3020.91,-2043.2 3123.5,-2051.74 3189.24,-2057.21"/>
<polygon fill="blue" stroke="blue" points="3189.21,-2060.72 3199.47,-2058.07 3189.79,-2053.75 3189.21,-2060.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.11,-1992.69C2756.61,-1983.09 2861.94,-1981.72 2932,-2035.86 2961.81,-2058.9 2942.51,-2082.5 2960,-2115.86 3042.16,-2272.55 3179.5,-2435.91 3233.85,-2497.92"/>
<polygon fill="blue" stroke="blue" points="3231.42,-2500.46 3240.65,-2505.65 3236.67,-2495.83 3231.42,-2500.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.1,-2003.89C2770.34,-2000.54 2898.83,-2001.77 2932,-2035.86 3011.92,-2118.02 2880.44,-2468.36 2960,-2550.86 3028.09,-2621.47 3158.06,-2602.36 3221.03,-2587.65"/>
<polygon fill="blue" stroke="blue" points="3222.01,-2591.02 3230.9,-2585.25 3220.36,-2584.21 3222.01,-2591.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.02,-2017.34C2753.14,-2021.13 2853.5,-2018.28 2932,-1981.86 3079.82,-1913.28 3198.35,-1747.12 3240.47,-1682.34"/>
<polygon fill="blue" stroke="blue" points="3243.44,-1684.2 3245.9,-1673.9 3237.55,-1680.42 3243.44,-1684.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.34,-2013.71C2770.44,-2016.9 2898.47,-2015.5 2932,-1981.86 2988.02,-1925.66 2906.71,-1684.66 2960,-1625.86 3009.52,-1571.23 3094.39,-1560.66 3160.75,-1562.21"/>
<polygon fill="blue" stroke="blue" points="3160.71,-1565.71 3170.82,-1562.54 3160.94,-1558.71 3160.71,-1565.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node216"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="2662.5,-1972.86 2541.5,-1972.86 2541.5,-1936.86 2662.5,-1936.86 2662.5,-1972.86"/>
<text text-anchor="middle" x="2602" y="-1951.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.74,-1959.75C2728.66,-1965.14 2837.9,-1974.09 2932,-1981.86 3020.91,-1989.2 3123.5,-1997.74 3189.24,-2003.21"/>
<polygon fill="blue" stroke="blue" points="3189.21,-2006.72 3199.47,-2004.07 3189.79,-1999.75 3189.21,-2006.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.6,-1943.6C2733.12,-1933.66 2851.13,-1928.05 2932,-1981.86 2954.51,-1996.84 2937.56,-2020.79 2960,-2035.86 3027.82,-2081.43 3124.89,-2081.08 3189.37,-2074.1"/>
<polygon fill="blue" stroke="blue" points="3189.9,-2077.57 3199.43,-2072.93 3189.09,-2070.61 3189.9,-2077.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node217"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="2689.5,-1918.86 2514.5,-1918.86 2514.5,-1882.86 2689.5,-1882.86 2689.5,-1918.86"/>
<text text-anchor="middle" x="2602" y="-1897.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.71,-1904.13C2756.32,-1907.57 2850.43,-1914.44 2932,-1927.86 3022.32,-1942.72 3124.45,-1969.94 3189.72,-1988.69"/>
<polygon fill="blue" stroke="blue" points="3188.89,-1992.1 3199.47,-1991.51 3190.84,-1985.37 3188.89,-1992.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.77,-1882.84C2761.86,-1872.78 2865.35,-1871.78 2932,-1927.86 2969.94,-1959.79 2922.2,-2003.77 2960,-2035.86 3023.07,-2089.41 3123.12,-2086.63 3189.42,-2076.98"/>
<polygon fill="blue" stroke="blue" points="3190,-2080.43 3199.35,-2075.44 3188.93,-2073.51 3190,-2080.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node218"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="2680,-1864.86 2524,-1864.86 2524,-1828.86 2680,-1828.86 2680,-1864.86"/>
<text text-anchor="middle" x="2602" y="-1843.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.19,-1846.46C2747.56,-1847.69 2847.48,-1853.38 2932,-1873.86 3037.9,-1899.53 3153.98,-1954.96 3214.66,-1986.22"/>
<polygon fill="blue" stroke="blue" points="3213.07,-1989.34 3223.56,-1990.83 3216.29,-1983.12 3213.07,-1989.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.3,-1829.01C2754.47,-1816.83 2864.86,-1812.47 2932,-1873.86 2985.92,-1923.17 2906.3,-1986.32 2960,-2035.86 3021.08,-2092.22 3122.32,-2088.52 3189.35,-2077.92"/>
<polygon fill="blue" stroke="blue" points="3190.11,-2081.34 3199.4,-2076.24 3188.96,-2074.44 3190.11,-2081.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node219"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="2699,-1810.86 2505,-1810.86 2505,-1774.86 2699,-1774.86 2699,-1810.86"/>
<text text-anchor="middle" x="2602" y="-1789.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2699.08,-1789.67C2765.86,-1790.11 2856.14,-1796.04 2932,-1819.86 3049.87,-1856.88 3171.11,-1942.48 3226.3,-1984.59"/>
<polygon fill="blue" stroke="blue" points="3224.21,-1987.39 3234.27,-1990.71 3228.48,-1981.84 3224.21,-1987.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.41,-1774.82C2753.03,-1761.88 2865.45,-1756.37 2932,-1819.86 3002.04,-1886.69 2890.25,-1968.73 2960,-2035.86 3019.97,-2093.58 3121.73,-2089.46 3189.15,-2078.4"/>
<polygon fill="blue" stroke="blue" points="3190,-2081.81 3199.25,-2076.65 3188.8,-2074.91 3190,-2081.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node220"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2745,-1756.86 2459,-1756.86 2459,-1720.86 2745,-1720.86 2745,-1756.86"/>
<text text-anchor="middle" x="2602" y="-1735.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.26,-1733.44C2804.64,-1735.49 2873.31,-1743.64 2932,-1765.86 3061.1,-1814.74 3182.97,-1931.16 3233.05,-1983.09"/>
<polygon fill="blue" stroke="blue" points="3230.74,-1985.74 3240.18,-1990.56 3235.81,-1980.91 3230.74,-1985.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.66,-1720.84C2751.53,-1707.36 2865.65,-1700.92 2932,-1765.86 2975.11,-1808.06 2917.08,-1993.48 2960,-2035.86 3019.31,-2094.43 3121.48,-2090.01 3189.14,-2078.67"/>
<polygon fill="blue" stroke="blue" points="3190.04,-2082.06 3199.28,-2076.87 3188.82,-2075.17 3190.04,-2082.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.41,-1732.89C2821.91,-1733 2905.79,-1739.6 2932,-1765.86 2987.12,-1821.09 2932.91,-2042.69 2960,-2115.86 3021.25,-2281.33 3169.93,-2438.95 3230.58,-2498.67"/>
<polygon fill="blue" stroke="blue" points="3228.27,-2501.31 3237.86,-2505.79 3233.16,-2496.3 3228.27,-2501.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.39,-1732.47C2822.16,-1732.4 2906.32,-1738.97 2932,-1765.86 2992.27,-1828.99 2900.01,-2487.47 2960,-2550.86 3027.43,-2622.1 3157.71,-2602.69 3220.89,-2587.78"/>
<polygon fill="blue" stroke="blue" points="3221.92,-2591.13 3230.8,-2585.35 3220.25,-2584.33 3221.92,-2591.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.39,-1729.95C2803.39,-1725.6 2871.02,-1719.6 2932,-1711.86 3008.42,-1702.16 3094.29,-1687.19 3158.57,-1675.17"/>
<polygon fill="blue" stroke="blue" points="3159.51,-1678.55 3168.69,-1673.26 3158.22,-1671.67 3159.51,-1678.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.3,-1756.89C2768.25,-1765.24 2866.25,-1763.84 2932,-1711.86 2963.53,-1686.93 2929.68,-1652.26 2960,-1625.86 3014.56,-1578.36 3096.69,-1566.69 3160.77,-1566.01"/>
<polygon fill="blue" stroke="blue" points="3160.9,-1569.51 3170.89,-1565.99 3160.89,-1562.51 3160.9,-1569.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node221"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="2692,-1702.86 2512,-1702.86 2512,-1666.86 2692,-1666.86 2692,-1702.86"/>
<text text-anchor="middle" x="2602" y="-1681.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.31,-1676.94C2760.72,-1674.42 2855.96,-1678.71 2932,-1711.86 3072.91,-1773.3 3193,-1921.5 3238.02,-1982.23"/>
<polygon fill="blue" stroke="blue" points="3235.37,-1984.54 3244.11,-1990.53 3241.02,-1980.4 3235.37,-1984.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node222"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="2677,-2296.86 2527,-2296.86 2527,-2260.86 2677,-2260.86 2677,-2296.86"/>
<text text-anchor="middle" x="2602" y="-2275.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.02,-2296.66C2751.62,-2309.78 2865.03,-2315.75 2932,-2251.86 3002.04,-2185.04 2890.25,-2102.99 2960,-2035.86 3019.97,-1978.15 3121.73,-1982.27 3189.15,-1993.33"/>
<polygon fill="blue" stroke="blue" points="3188.8,-1996.82 3199.25,-1995.08 3190,-1989.92 3188.8,-1996.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.31,-2282.01C2745.18,-2282.74 2847.52,-2278.39 2932,-2251.86 3049.87,-2214.84 3171.11,-2129.24 3226.3,-2087.14"/>
<polygon fill="blue" stroke="blue" points="3228.48,-2089.88 3234.27,-2081.01 3224.21,-2084.33 3228.48,-2089.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node223"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2706.5,-2242.86 2497.5,-2242.86 2497.5,-2206.86 2706.5,-2206.86 2706.5,-2242.86"/>
<text text-anchor="middle" x="2602" y="-2221.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge608" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.35,-2242.89C2755.52,-2254.93 2865.18,-2258.97 2932,-2197.86 2985.92,-2148.55 2906.3,-2085.41 2960,-2035.86 3021.08,-1979.51 3122.32,-1983.21 3189.35,-1993.81"/>
<polygon fill="blue" stroke="blue" points="3188.96,-1997.29 3199.4,-1995.49 3190.11,-1990.39 3188.96,-1997.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge607" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2706.56,-2224.59C2772.01,-2222.4 2857.92,-2215.82 2932,-2197.86 3037.9,-2172.2 3153.98,-2116.77 3214.66,-2085.51"/>
<polygon fill="blue" stroke="blue" points="3216.29,-2088.6 3223.56,-2080.89 3213.07,-2082.39 3216.29,-2088.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node224"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="2690,-2188.86 2514,-2188.86 2514,-2152.86 2690,-2152.86 2690,-2188.86"/>
<text text-anchor="middle" x="2602" y="-2167.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge660" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.77,-2188.88C2761.86,-2198.95 2865.35,-2199.95 2932,-2143.86 2969.94,-2111.94 2922.2,-2067.96 2960,-2035.86 3023.07,-1982.32 3123.12,-1985.1 3189.42,-1994.75"/>
<polygon fill="blue" stroke="blue" points="3188.93,-1998.22 3199.35,-1996.29 3190,-1991.3 3188.93,-1998.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge661" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2690.06,-2167.57C2756.65,-2164.13 2850.57,-2157.26 2932,-2143.86 3022.32,-2129 3124.45,-2101.79 3189.72,-2083.04"/>
<polygon fill="blue" stroke="blue" points="3190.84,-2086.36 3199.47,-2080.22 3188.89,-2079.63 3190.84,-2086.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node225"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="2833.5,-2134.86 2370.5,-2134.86 2370.5,-2098.86 2833.5,-2098.86 2833.5,-2134.86"/>
<text text-anchor="middle" x="2602" y="-2113.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge784" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.77,-2127.52C2868.7,-2121 2902.78,-2109.31 2932,-2089.86 2954.51,-2074.89 2937.56,-2050.94 2960,-2035.86 3027.82,-1990.3 3124.89,-1990.65 3189.37,-1997.62"/>
<polygon fill="blue" stroke="blue" points="3189.09,-2001.11 3199.43,-1998.79 3189.9,-1994.16 3189.09,-2001.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge785" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2822.89,-2098.85C2859.33,-2095.85 2896.73,-2092.78 2932,-2089.86 3020.91,-2082.52 3123.5,-2073.99 3189.24,-2068.51"/>
<polygon fill="blue" stroke="blue" points="3189.79,-2071.98 3199.47,-2067.66 3189.21,-2065 3189.79,-2071.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge786" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.71,-2112.81C2867.9,-2118.66 2901.77,-2128.41 2932,-2143.86 3092.15,-2225.73 3205.96,-2424.01 3243.53,-2496.62"/>
<polygon fill="blue" stroke="blue" points="3240.46,-2498.31 3248.13,-2505.62 3246.7,-2495.13 3240.46,-2498.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge783" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.7,-2114.55C2878.21,-2118.9 2916,-2127.65 2932,-2143.86 2995.68,-2208.39 2896.6,-2486.06 2960,-2550.86 3028.59,-2620.98 3158.32,-2602.1 3221.13,-2587.55"/>
<polygon fill="blue" stroke="blue" points="3222.08,-2590.93 3230.98,-2585.18 3220.44,-2584.12 3222.08,-2590.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge787" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.15,-2134.89C2761.33,-2145.12 2865.31,-2146.35 2932,-2089.86 2970.82,-2056.98 2935.82,-2023.63 2960,-1978.86 3030.2,-1848.92 3164.42,-1730.53 3225.42,-1680.73"/>
<polygon fill="blue" stroke="blue" points="3227.96,-1683.18 3233.53,-1674.17 3223.56,-1677.74 3227.96,-1683.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge788" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.8,-2119.28C2878.3,-2114.92 2916.07,-2106.14 2932,-2089.86 3004.25,-2016.03 2891.33,-1703.03 2960,-1625.86 3009.1,-1570.69 3094.22,-1560.22 3160.78,-1561.94"/>
<polygon fill="blue" stroke="blue" points="3160.76,-1565.44 3170.88,-1562.3 3161.01,-1558.45 3160.76,-1565.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node226"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2712,-2080.86 2492,-2080.86 2492,-2044.86 2712,-2044.86 2712,-2080.86"/>
<text text-anchor="middle" x="2602" y="-2059.16" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge870" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.29,-2053.92C2776.32,-2048.68 2858.75,-2041.91 2932,-2035.86 3020.91,-2028.52 3123.5,-2019.99 3189.24,-2014.51"/>
<polygon fill="blue" stroke="blue" points="3189.79,-2017.98 3199.47,-2013.66 3189.21,-2011 3189.79,-2017.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge871" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.1,-2062.86C2847.96,-2062.86 3075.91,-2062.86 3189.05,-2062.86"/>
<polygon fill="blue" stroke="blue" points="3189.3,-2066.36 3199.3,-2062.86 3189.3,-2059.36 3189.3,-2066.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node227"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="2696.5,-2811.86 2507.5,-2811.86 2507.5,-2775.86 2696.5,-2775.86 2696.5,-2811.86"/>
<text text-anchor="middle" x="2602" y="-2790.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.9,-2790C2919.56,-2780.47 3496.98,-2753.63 3978,-2712.86 4049.88,-2706.77 4133.13,-2697.29 4183.12,-2691.34"/>
<polygon fill="blue" stroke="blue" points="4183.75,-2694.79 4193.27,-2690.13 4182.92,-2687.84 4183.75,-2694.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.35,-2811.89C2755.52,-2823.93 2865.18,-2827.97 2932,-2766.86 2985.92,-2717.55 2906.3,-2654.41 2960,-2604.86 3031.59,-2538.82 3158.34,-2555.26 3220.53,-2568.62"/>
<polygon fill="blue" stroke="blue" points="3220.12,-2572.12 3230.65,-2570.89 3221.66,-2565.29 3220.12,-2572.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node228"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2729,-2541.86 2475,-2541.86 2475,-2505.86 2729,-2505.86 2729,-2541.86"/>
<text text-anchor="middle" x="2602" y="-2520.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.32,-2529.94C2809.88,-2530.82 2904.19,-2525.27 2932,-2496.86 3003.8,-2423.52 2888.52,-2109.52 2960,-2035.86 3018.22,-1975.87 3121.14,-1980.81 3189.22,-1992.65"/>
<polygon fill="blue" stroke="blue" points="3188.95,-1996.15 3199.42,-1994.51 3190.22,-1989.27 3188.95,-1996.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.16,-2537.22C2793.54,-2538.37 2870.93,-2530.62 2932,-2496.86 3105.02,-2401.22 3212.89,-2170.41 3246.06,-2090.58"/>
<polygon fill="blue" stroke="blue" points="3249.35,-2091.77 3249.9,-2081.19 3242.87,-2089.12 3249.35,-2091.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.1,-2523.86C2881.38,-2523.86 3128.56,-2523.86 3220.79,-2523.86"/>
<polygon fill="blue" stroke="blue" points="3221,-2527.36 3231,-2523.86 3221,-2520.36 3221,-2527.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.16,-2534.19C2790.39,-2539.21 2865.03,-2545.33 2932,-2550.86 3036.86,-2559.52 3160.75,-2569.84 3220.78,-2574.84"/>
<polygon fill="blue" stroke="blue" points="3220.63,-2578.34 3230.88,-2575.68 3221.21,-2571.37 3220.63,-2578.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.38,-2530C2809.96,-2530.9 2904.28,-2525.37 2932,-2496.86 2972.19,-2455.54 2937.62,-2031.98 2960,-1978.86 3017.18,-1843.15 3157.37,-1728.21 3222.59,-1680.06"/>
<polygon fill="blue" stroke="blue" points="3224.9,-1682.71 3230.91,-1673.99 3220.77,-1677.06 3224.9,-1682.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.14,-2530.18C2809.91,-2531.2 2904.54,-2525.72 2932,-2496.86 2998.74,-2426.71 2896.65,-1699.09 2960,-1625.86 3008.4,-1569.91 3093.81,-1559.57 3160.65,-1561.54"/>
<polygon fill="blue" stroke="blue" points="3160.66,-1565.04 3170.79,-1561.93 3160.93,-1558.05 3160.66,-1565.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node229"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="2841.5,-2487.86 2362.5,-2487.86 2362.5,-2451.86 2841.5,-2451.86 2841.5,-2487.86"/>
<text text-anchor="middle" x="2602" y="-2466.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2822.89,-2487.88C2859.33,-2490.87 2896.73,-2493.95 2932,-2496.86 3036.86,-2505.52 3160.75,-2515.84 3220.78,-2520.84"/>
<polygon fill="blue" stroke="blue" points="3220.63,-2524.34 3230.88,-2521.68 3221.21,-2517.37 3220.63,-2524.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.88,-2460.82C2873.96,-2467.59 2905.04,-2478.92 2932,-2496.86 2954.51,-2511.84 2937.56,-2535.79 2960,-2550.86 3040.07,-2604.66 3160.91,-2594.45 3220.76,-2584.91"/>
<polygon fill="blue" stroke="blue" points="3221.58,-2588.32 3230.86,-2583.21 3220.42,-2581.42 3221.58,-2588.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.7,-2471.45C2882.74,-2466.84 2917.02,-2458.17 2932,-2442.86 2968.12,-2405.95 2939.8,-2026.4 2960,-1978.86 3017.6,-1843.33 3157.58,-1728.3 3222.66,-1680.1"/>
<polygon fill="blue" stroke="blue" points="3224.97,-1682.75 3230.96,-1674.01 3220.83,-1677.1 3224.97,-1682.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.59,-2471.78C2882.79,-2467.18 2917.17,-2458.42 2932,-2442.86 2994.68,-2377.12 2900.5,-1694.49 2960,-1625.86 3008.46,-1569.96 3093.86,-1559.61 3160.69,-1561.57"/>
<polygon fill="blue" stroke="blue" points="3160.69,-1565.07 3170.82,-1561.96 3160.97,-1558.08 3160.69,-1565.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node230"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2676.5,-2703.86 2527.5,-2703.86 2527.5,-2667.86 2676.5,-2667.86 2676.5,-2703.86"/>
<text text-anchor="middle" x="2602" y="-2682.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.81,-2702.12C2750.17,-2713.66 2861.62,-2718.09 2932,-2658.86 2969.94,-2626.94 2922.2,-2582.96 2960,-2550.86 3034.06,-2487.99 3159.12,-2502.78 3220.62,-2515.16"/>
<polygon fill="blue" stroke="blue" points="3220.13,-2518.63 3230.64,-2517.27 3221.57,-2511.78 3220.13,-2518.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.75,-2685.86C2795.18,-2685.86 3027.8,-2685.86 3159.69,-2685.86"/>
<polygon fill="blue" stroke="blue" points="3159.79,-2689.36 3169.79,-2685.86 3159.79,-2682.36 3159.79,-2689.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.57,-2698.96C2747.94,-2707.54 2856.26,-2709.27 2932,-2658.86 2954.51,-2643.89 2937.56,-2619.94 2960,-2604.86 3040.07,-2551.07 3160.91,-2561.28 3220.76,-2570.82"/>
<polygon fill="blue" stroke="blue" points="3220.42,-2574.31 3230.86,-2572.52 3221.58,-2567.41 3220.42,-2574.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.5,-2690.6C2762.67,-2694.38 2898.06,-2694.21 2932,-2658.86 2984.37,-2604.31 2931.09,-2048.74 2960,-1978.86 3016.31,-1842.78 3156.94,-1728.03 3222.43,-1680"/>
<polygon fill="blue" stroke="blue" points="3224.75,-1682.64 3230.78,-1673.94 3220.63,-1676.98 3224.75,-1682.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.58,-2690.68C2762.84,-2694.54 2898.31,-2694.45 2932,-2658.86 3010.94,-2575.48 2885.1,-1712.89 2960,-1625.86 3008.26,-1569.79 3093.68,-1559.46 3160.56,-1561.46"/>
<polygon fill="blue" stroke="blue" points="3160.58,-1564.97 3170.71,-1561.87 3160.86,-1557.97 3160.58,-1564.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node231"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2667.5,-2757.86 2536.5,-2757.86 2536.5,-2721.86 2667.5,-2721.86 2667.5,-2757.86"/>
<text text-anchor="middle" x="2602" y="-2736.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge514" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.71,-2755.52C2741.46,-2769.16 2860.95,-2777.84 2932,-2712.86 2985.92,-2663.55 2906.3,-2600.41 2960,-2550.86 3031.59,-2484.82 3158.34,-2501.26 3220.53,-2514.62"/>
<polygon fill="blue" stroke="blue" points="3220.12,-2518.12 3230.65,-2516.89 3221.66,-2511.29 3220.12,-2518.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge513" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.53,-2740.12C2821.49,-2740.28 3222.39,-2738 3556,-2712.86 3616.92,-2708.27 3686.9,-2698.99 3731.27,-2692.6"/>
<polygon fill="blue" stroke="blue" points="3732.03,-2696.03 3741.43,-2691.13 3731.03,-2689.1 3732.03,-2696.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge515" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.76,-2754.63C2740.72,-2767.18 2858.66,-2774.58 2932,-2712.86 2969.94,-2680.94 2922.2,-2636.96 2960,-2604.86 3034.06,-2541.99 3159.12,-2556.78 3220.62,-2569.16"/>
<polygon fill="blue" stroke="blue" points="3220.13,-2572.63 3230.64,-2571.27 3221.57,-2565.78 3220.13,-2572.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node232"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="2825.5,-2595.86 2378.5,-2595.86 2378.5,-2559.86 2825.5,-2559.86 2825.5,-2595.86"/>
<text text-anchor="middle" x="2602" y="-2574.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge581" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2822.89,-2559.85C2859.33,-2556.85 2896.73,-2553.78 2932,-2550.86 3036.86,-2542.2 3160.75,-2531.89 3220.78,-2526.88"/>
<polygon fill="blue" stroke="blue" points="3221.21,-2530.36 3230.88,-2526.04 3220.63,-2523.38 3221.21,-2530.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge580" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.78,-2577.86C2970.44,-2577.86 3145.48,-2577.86 3220.26,-2577.86"/>
<polygon fill="blue" stroke="blue" points="3220.55,-2581.36 3230.55,-2577.86 3220.55,-2574.36 3220.55,-2581.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge579" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.89,-2581.14C2873.84,-2577.07 2915.21,-2568.21 2932,-2550.86 2976.25,-2505.13 2935.44,-2037.57 2960,-1978.86 3016.83,-1843 3157.2,-1728.14 3222.53,-1680.04"/>
<polygon fill="blue" stroke="blue" points="3224.84,-1682.68 3230.86,-1673.97 3220.71,-1677.03 3224.84,-1682.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge582" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.68,-2581.39C2873.81,-2577.33 2915.33,-2568.42 2932,-2550.86 3002.81,-2476.3 2892.8,-1703.69 2960,-1625.86 3008.35,-1569.87 3093.76,-1559.53 3160.62,-1561.51"/>
<polygon fill="blue" stroke="blue" points="3160.63,-1565.01 3170.76,-1561.91 3160.9,-1558.02 3160.63,-1565.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node233"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2666,-2865.86 2538,-2865.86 2538,-2829.86 2666,-2829.86 2666,-2865.86"/>
<text text-anchor="middle" x="2602" y="-2844.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge584" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.06,-2846.13C2861.74,-2840.08 3475.68,-2816 3978,-2740.86 4050.78,-2729.98 4134.01,-2710.16 4183.71,-2697.52"/>
<polygon fill="blue" stroke="blue" points="4184.68,-2700.89 4193.5,-2695.02 4182.94,-2694.11 4184.68,-2700.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge585" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.23,-2863.67C2740.27,-2878.01 2861.72,-2887.92 2932,-2820.86 3002.04,-2754.04 2890.25,-2671.99 2960,-2604.86 3030.5,-2537.01 3158.76,-2554.62 3221.09,-2568.49"/>
<polygon fill="blue" stroke="blue" points="3220.33,-2571.91 3230.86,-2570.76 3221.91,-2565.09 3220.33,-2571.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node234"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="2731,-2649.86 2473,-2649.86 2473,-2613.86 2731,-2613.86 2731,-2649.86"/>
<text text-anchor="middle" x="2602" y="-2628.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge667" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.21,-2649.25C2796.34,-2651.55 2873.79,-2643.6 2932,-2604.86 2954.51,-2589.89 2937.56,-2565.94 2960,-2550.86 3040.07,-2497.07 3160.91,-2507.28 3220.76,-2516.82"/>
<polygon fill="blue" stroke="blue" points="3220.42,-2520.31 3230.86,-2518.52 3221.58,-2513.41 3220.42,-2520.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge668" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.12,-2642.35C2791.98,-2647.34 2865.75,-2653.39 2932,-2658.86 3008.46,-2665.18 3095.03,-2672.37 3159.59,-2677.74"/>
<polygon fill="blue" stroke="blue" points="3159.5,-2681.25 3169.75,-2678.59 3160.08,-2674.27 3159.5,-2681.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge665" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.12,-2621.38C2791.98,-2616.39 2865.75,-2610.33 2932,-2604.86 3036.86,-2596.2 3160.75,-2585.89 3220.78,-2580.88"/>
<polygon fill="blue" stroke="blue" points="3221.21,-2584.36 3230.88,-2580.04 3220.63,-2577.38 3221.21,-2584.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge666" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.21,-2638.1C2811.44,-2638.94 2904.61,-2633.29 2932,-2604.86 2980.31,-2554.72 2933.27,-2043.15 2960,-1978.86 3016.55,-1842.88 3157.06,-1728.08 3222.47,-1680.02"/>
<polygon fill="blue" stroke="blue" points="3224.79,-1682.66 3230.82,-1673.95 3220.67,-1677 3224.79,-1682.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge669" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.36,-2638.24C2811.65,-2639.14 2904.84,-2633.51 2932,-2604.86 3006.87,-2525.89 2888.95,-1708.29 2960,-1625.86 3008.3,-1569.83 3093.72,-1559.49 3160.59,-1561.49"/>
<polygon fill="blue" stroke="blue" points="3160.6,-1564.99 3170.73,-1561.89 3160.88,-1557.99 3160.6,-1564.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node235"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="2848.5,-2433.86 2355.5,-2433.86 2355.5,-2397.86 2848.5,-2397.86 2848.5,-2433.86"/>
<text text-anchor="middle" x="2602" y="-2412.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge691" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.77,-2431.62C2876.92,-2434.73 2905.14,-2438.44 2932,-2442.86 3038.58,-2460.4 3161.6,-2495.13 3221.09,-2512.87"/>
<polygon fill="blue" stroke="blue" points="3220.18,-2516.25 3230.76,-2515.78 3222.19,-2509.55 3220.18,-2516.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge688" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.77,-2397.84C2761.86,-2387.78 2865.35,-2386.78 2932,-2442.86 2969.94,-2474.79 2922.2,-2518.77 2960,-2550.86 3034.06,-2613.74 3159.12,-2598.95 3220.62,-2586.56"/>
<polygon fill="blue" stroke="blue" points="3221.57,-2589.94 3230.64,-2584.46 3220.13,-2583.09 3221.57,-2589.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge689" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.54,-2416.53C2886.49,-2411.75 2917.81,-2403.25 2932,-2388.86 2996.13,-2323.85 2923.95,-2062.77 2960,-1978.86 3018.14,-1843.56 3157.84,-1728.41 3222.76,-1680.14"/>
<polygon fill="blue" stroke="blue" points="3225.06,-1682.79 3231.04,-1674.04 3220.91,-1677.15 3225.06,-1682.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge690" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.9,-2416.88C2886.82,-2412.08 2918.04,-2403.47 2932,-2388.86 2990.62,-2327.54 2904.35,-1689.9 2960,-1625.86 3008.53,-1570.02 3093.92,-1559.67 3160.73,-1561.6"/>
<polygon fill="blue" stroke="blue" points="3160.73,-1565.11 3170.86,-1561.99 3161,-1558.11 3160.73,-1565.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node236"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2747,-2379.86 2457,-2379.86 2457,-2343.86 2747,-2343.86 2747,-2379.86"/>
<text text-anchor="middle" x="2602" y="-2358.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge818" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.05,-2363.98C2805.15,-2367.33 2872.4,-2374.42 2932,-2388.86 3042.24,-2415.58 3163.53,-2474.55 3221.85,-2504.94"/>
<polygon fill="blue" stroke="blue" points="3220.51,-2508.19 3230.99,-2509.74 3223.76,-2501.99 3220.51,-2508.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge817" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.35,-2343.84C2755.52,-2331.79 2865.18,-2327.76 2932,-2388.86 2985.92,-2438.17 2906.3,-2501.32 2960,-2550.86 3031.59,-2616.91 3158.34,-2600.47 3220.53,-2587.11"/>
<polygon fill="blue" stroke="blue" points="3221.66,-2590.44 3230.65,-2584.83 3220.12,-2583.61 3221.66,-2590.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge816" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.88,-2379.91C2755.1,-2392.54 2867.49,-2397.13 2932,-2331.86 2987.31,-2275.89 2928.54,-2050.99 2960,-1978.86 3018.88,-1843.88 3158.2,-1728.57 3222.89,-1680.19"/>
<polygon fill="blue" stroke="blue" points="3225.19,-1682.85 3231.14,-1674.09 3221.02,-1677.23 3225.19,-1682.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge815" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.26,-2379.88C2752.9,-2393.33 2867.91,-2399.33 2932,-2331.86 2986.07,-2274.95 2908.42,-1685.04 2960,-1625.86 3008.61,-1570.09 3094,-1559.73 3160.78,-1561.65"/>
<polygon fill="blue" stroke="blue" points="3160.78,-1565.15 3170.91,-1562.03 3161.05,-1558.15 3160.78,-1565.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node237"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="2817.5,-1183.86 2386.5,-1183.86 2386.5,-1147.86 2817.5,-1147.86 2817.5,-1183.86"/>
<text text-anchor="middle" x="2602" y="-1162.16" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.53,-1162.12C2868.91,-1165.87 2914.12,-1174.67 2932,-1192.86 2999.59,-1261.63 2893.06,-1556.46 2960,-1625.86 3010.56,-1678.28 3095.12,-1682.19 3161.1,-1675.05"/>
<polygon fill="blue" stroke="blue" points="3161.59,-1678.52 3171.11,-1673.87 3160.77,-1671.57 3161.59,-1678.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node264"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3337.5,-1536.86 3178.5,-1536.86 3178.5,-1500.86 3337.5,-1500.86 3337.5,-1536.86"/>
<text text-anchor="middle" x="3258" y="-1515.16" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.63,-1162.48C2868.83,-1166.26 2913.91,-1174.98 2932,-1192.86 2979.46,-1239.78 2912.75,-1444.74 2960,-1491.86 3013.26,-1544.98 3101.73,-1546.5 3168.29,-1537.89"/>
<polygon fill="blue" stroke="blue" points="3168.94,-1541.33 3178.36,-1536.48 3167.97,-1534.4 3168.94,-1541.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3334,-1482.86 3182,-1482.86 3182,-1446.86 3334,-1446.86 3334,-1482.86"/>
<text text-anchor="middle" x="3258" y="-1461.16" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.55,-1147.82C2752.3,-1134.59 2865.58,-1128.61 2932,-1192.86 3009.82,-1268.14 2882.89,-1358.86 2960,-1434.86 3014.51,-1488.58 3104.95,-1490.31 3171.74,-1482.15"/>
<polygon fill="blue" stroke="blue" points="3172.37,-1485.6 3181.83,-1480.82 3171.46,-1478.66 3172.37,-1485.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node238"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="2737.5,-751.86 2466.5,-751.86 2466.5,-715.86 2737.5,-715.86 2737.5,-751.86"/>
<text text-anchor="middle" x="2602" y="-730.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node242"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="3285,-670.86 3231,-670.86 3231,-634.86 3285,-634.86 3285,-670.86"/>
<text text-anchor="middle" x="3258" y="-649.16" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2737.72,-725.34C2797.36,-720.91 2868.3,-714.76 2932,-706.86 3037.49,-693.79 3161.09,-671.24 3220.92,-659.86"/>
<polygon fill="blue" stroke="blue" points="3221.82,-663.25 3230.99,-657.94 3220.51,-656.38 3221.82,-663.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2737.85,-727.52C2816.55,-727.03 2905.45,-733.13 2932,-760.86 2988.21,-819.58 2904.05,-1432.9 2960,-1491.86 3012.29,-1546.97 3102.2,-1547.78 3169.43,-1538.43"/>
<polygon fill="blue" stroke="blue" points="3170.22,-1541.85 3179.59,-1536.91 3169.19,-1534.92 3170.22,-1541.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2737.82,-727.55C2816.51,-727.07 2905.4,-733.17 2932,-760.86 2983.92,-814.92 2908.59,-1380.32 2960,-1434.86 3012.74,-1490.82 3104.13,-1491.99 3171.63,-1483.08"/>
<polygon fill="blue" stroke="blue" points="3172.42,-1486.51 3181.83,-1481.64 3171.44,-1479.58 3172.42,-1486.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node239"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="2671.5,-211.86 2532.5,-211.86 2532.5,-175.86 2671.5,-175.86 2671.5,-211.86"/>
<text text-anchor="middle" x="2602" y="-190.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.59,-177.31C2745.77,-163.86 2862.68,-156.34 2932,-220.86 2991.58,-276.33 2920.17,-330.87 2960,-401.86 3023.29,-514.66 3158.18,-599.2 3222.07,-634.61"/>
<polygon fill="blue" stroke="blue" points="3220.51,-637.74 3230.96,-639.47 3223.86,-631.6 3220.51,-637.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="3855,-1536.86 3699,-1536.86 3699,-1500.86 3855,-1500.86 3855,-1536.86"/>
<text text-anchor="middle" x="3777" y="-1515.16" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.58,-195.49C2738.5,-198.02 2842.95,-204.47 2932,-220.86 3215.99,-273.16 3380.46,-172.58 3556,-401.86 3592.82,-449.95 3535.72,-1446.63 3576,-1491.86 3603.6,-1522.86 3648.48,-1530.95 3688.74,-1530.7"/>
<polygon fill="blue" stroke="blue" points="3688.95,-1534.2 3698.87,-1530.46 3688.79,-1527.2 3688.95,-1534.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="3851.5,-1482.86 3702.5,-1482.86 3702.5,-1446.86 3851.5,-1446.86 3851.5,-1482.86"/>
<text text-anchor="middle" x="3777" y="-1461.16" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.74,-186.66C2868.94,-167.62 3430.41,-125.31 3556,-245.86 3572.83,-262.02 3572.62,-431.78 3576,-454.86 3633.47,-847.19 3741.51,-1317.95 3769.33,-1436.65"/>
<polygon fill="blue" stroke="blue" points="3766,-1437.79 3771.7,-1446.72 3772.82,-1436.18 3766,-1437.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node240"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2750.5,-697.86 2453.5,-697.86 2453.5,-661.86 2750.5,-661.86 2750.5,-697.86"/>
<text text-anchor="middle" x="2602" y="-676.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2750.59,-673.77C2903.72,-667.45 3132.89,-657.99 3220.85,-654.36"/>
<polygon fill="blue" stroke="blue" points="3221.01,-657.85 3230.86,-653.94 3220.72,-650.86 3221.01,-657.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2750.73,-673.47C2826.02,-673.72 2906.92,-680.59 2932,-706.86 2992.27,-769.99 2900.01,-1428.47 2960,-1491.86 3012.3,-1547.12 3102.43,-1547.84 3169.71,-1538.42"/>
<polygon fill="blue" stroke="blue" points="3170.52,-1541.84 3179.89,-1536.89 3169.48,-1534.92 3170.52,-1541.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2750.7,-673.5C2825.98,-673.75 2906.88,-680.63 2932,-706.86 2987.98,-765.33 2904.57,-1375.87 2960,-1434.86 3012.66,-1490.9 3104.05,-1492.06 3171.59,-1483.13"/>
<polygon fill="blue" stroke="blue" points="3172.38,-1486.55 3181.79,-1481.68 3171.4,-1479.62 3172.38,-1486.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node241"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="2714,-1129.86 2490,-1129.86 2490,-1093.86 2714,-1093.86 2714,-1129.86"/>
<text text-anchor="middle" x="2602" y="-1108.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2714.29,-1106C2797.76,-1104.26 2902.48,-1108.61 2932,-1138.86 3007.71,-1216.45 2885.02,-1547.57 2960,-1625.86 3010.55,-1678.64 3095.52,-1682.38 3161.66,-1675.09"/>
<polygon fill="blue" stroke="blue" points="3162.18,-1678.55 3171.69,-1673.88 3161.34,-1671.6 3162.18,-1678.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2714.12,-1106.17C2797.48,-1104.53 2902.15,-1108.94 2932,-1138.86 2987.57,-1194.58 2904.68,-1435.9 2960,-1491.86 3012.97,-1545.45 3101.7,-1546.83 3168.41,-1538.05"/>
<polygon fill="blue" stroke="blue" points="3169.09,-1541.49 3178.5,-1536.63 3168.11,-1534.56 3169.09,-1541.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2714.42,-1106.29C2797.64,-1104.74 2901.98,-1109.21 2932,-1138.86 2979.01,-1185.29 2913.43,-1388 2960,-1434.86 3014.03,-1489.24 3104.77,-1490.79 3171.76,-1482.42"/>
<polygon fill="blue" stroke="blue" points="3172.44,-1485.86 3181.88,-1481.05 3171.51,-1478.92 3172.44,-1485.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3247.8,-671.06C3201.17,-755.42 3007.89,-1118.28 2946,-1443.86 2938.82,-1481.63 2927.58,-1583.12 2946,-1616.86 2987.93,-1693.67 3099.69,-1689.58 3177.38,-1675.79"/>
<polygon fill="blue" stroke="blue" points="3178.44,-1679.15 3187.63,-1673.88 3177.16,-1672.27 3178.44,-1679.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3273.78,-670.98C3324.49,-734.33 3491.77,-953.72 3556,-1166.86 3566.44,-1201.5 3551.36,-1465.37 3576,-1491.86 3604.15,-1522.14 3648.84,-1530.24 3688.85,-1530.18"/>
<polygon fill="blue" stroke="blue" points="3688.97,-1533.68 3698.9,-1530 3688.84,-1526.68 3688.97,-1533.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.39,-661.69C3342.93,-682.26 3480.53,-738.82 3556,-831.86 3713.72,-1026.32 3761.74,-1341.17 3773.04,-1436.58"/>
<polygon fill="blue" stroke="blue" points="3769.57,-1437.07 3774.18,-1446.61 3776.52,-1436.28 3769.57,-1437.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node243"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="2732.5,-1399.86 2471.5,-1399.86 2471.5,-1363.86 2732.5,-1363.86 2732.5,-1399.86"/>
<text text-anchor="middle" x="2602" y="-1378.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2732.58,-1368.83C2800.96,-1369.41 2881.02,-1383.16 2932,-1434.86 2992.24,-1495.96 2897.99,-1566.57 2960,-1625.86 3011.65,-1675.24 3093.81,-1680.13 3158.64,-1674.14"/>
<polygon fill="blue" stroke="blue" points="3159.3,-1677.59 3168.89,-1673.08 3158.58,-1670.62 3159.3,-1677.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2732.82,-1375.74C2798.2,-1378.94 2875.37,-1392.97 2932,-1434.86 2954.69,-1451.65 2936.74,-1475.87 2960,-1491.86 3020.44,-1533.43 3104.94,-1537.26 3168.36,-1532.39"/>
<polygon fill="blue" stroke="blue" points="3168.69,-1535.87 3178.35,-1531.54 3168.09,-1528.9 3168.69,-1535.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2715.37,-1399.92C2785.58,-1410.86 2877.93,-1424.63 2960,-1434.86 3031.22,-1443.74 3112.3,-1451.79 3171.73,-1457.32"/>
<polygon fill="blue" stroke="blue" points="3171.54,-1460.81 3181.82,-1458.25 3172.19,-1453.84 3171.54,-1460.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node244"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2821.5,-265.86 2382.5,-265.86 2382.5,-229.86 2821.5,-229.86 2821.5,-265.86"/>
<text text-anchor="middle" x="2602" y="-244.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2821.5,-243.89C2871.45,-247.77 2914.92,-256.7 2932,-274.86 2983.44,-329.55 2909.08,-1570.7 2960,-1625.86 3010.49,-1680.56 3097.81,-1683.32 3164.74,-1675.21"/>
<polygon fill="blue" stroke="blue" points="3165.42,-1678.65 3174.88,-1673.88 3164.51,-1671.71 3165.42,-1678.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2685.34,-229.82C2758.94,-218.85 2865.2,-216.53 2932,-274.86 2975.54,-312.88 2918.76,-361.37 2960,-401.86 3152.81,-591.17 3382.68,-314.57 3556,-521.86 3590.57,-563.21 3540.11,-1451.65 3576,-1491.86 3603.64,-1522.83 3648.52,-1530.92 3688.77,-1530.67"/>
<polygon fill="blue" stroke="blue" points="3688.98,-1534.17 3698.89,-1530.44 3688.82,-1527.17 3688.98,-1534.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2821.73,-247.78C3086.44,-249.87 3503.48,-261 3556,-309.86 3579.81,-332.02 3570.62,-422.78 3576,-454.86 3641.63,-845.91 3743.69,-1317.61 3769.77,-1436.58"/>
<polygon fill="blue" stroke="blue" points="3766.42,-1437.66 3771.98,-1446.68 3773.26,-1436.16 3766.42,-1437.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node245"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="2712,-157.86 2492,-157.86 2492,-121.86 2712,-121.86 2712,-157.86"/>
<text text-anchor="middle" x="2602" y="-136.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.36,-125.81C2780.06,-122.45 2866.3,-128.22 2932,-166.86 2955.94,-180.94 3176.6,-526.34 3240.02,-626.11"/>
<polygon fill="blue" stroke="blue" points="3237.18,-628.15 3245.49,-634.72 3243.08,-624.4 3237.18,-628.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.25,-147.46C2959.52,-164.92 3541.77,-207.54 3556,-222.86 3603.99,-274.52 3529.18,-1439.14 3576,-1491.86 3603.56,-1522.9 3648.44,-1530.99 3688.71,-1530.73"/>
<polygon fill="blue" stroke="blue" points="3688.92,-1534.23 3698.83,-1530.49 3688.75,-1527.23 3688.92,-1534.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.18,-135.27C2949.61,-126.41 3496.43,-112.55 3556,-169.86 3578.88,-191.87 3571.8,-423.4 3576,-454.86 3628.49,-847.89 3740.18,-1318.14 3769.07,-1436.68"/>
<polygon fill="blue" stroke="blue" points="3765.75,-1437.86 3771.52,-1446.74 3772.55,-1436.2 3765.75,-1437.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node246"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="2711,-643.86 2493,-643.86 2493,-607.86 2711,-607.86 2711,-643.86"/>
<text text-anchor="middle" x="2602" y="-622.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.36,-630.34C2861.47,-636.53 3125.01,-647.41 3220.85,-651.37"/>
<polygon fill="blue" stroke="blue" points="3220.77,-654.87 3230.91,-651.79 3221.06,-647.88 3220.77,-654.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.1,-619.89C2795.21,-617.85 2902.45,-621.85 2932,-652.86 2996.34,-720.4 2895.96,-1424.05 2960,-1491.86 3012.32,-1547.27 3102.66,-1547.89 3170.01,-1538.41"/>
<polygon fill="blue" stroke="blue" points="3170.82,-1541.82 3180.19,-1536.87 3169.78,-1534.9 3170.82,-1541.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.08,-619.91C2795.18,-617.88 2902.41,-621.88 2932,-652.86 2992.05,-715.74 2900.55,-1371.42 2960,-1434.86 3012.58,-1490.97 3103.99,-1492.12 3171.55,-1483.16"/>
<polygon fill="blue" stroke="blue" points="3172.35,-1486.58 3181.76,-1481.71 3171.36,-1479.65 3172.35,-1486.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node247"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="2721.5,-589.86 2482.5,-589.86 2482.5,-553.86 2721.5,-553.86 2721.5,-589.86"/>
<text text-anchor="middle" x="2602" y="-568.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.64,-579.22C2784.32,-583.7 2862.47,-590.25 2932,-598.86 3037.49,-611.93 3161.09,-634.48 3220.92,-645.86"/>
<polygon fill="blue" stroke="blue" points="3220.51,-649.35 3230.99,-647.79 3221.82,-642.47 3220.51,-649.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.78,-565.65C2804.07,-564.2 2903.72,-569.11 2932,-598.86 3000.4,-670.81 2891.92,-1419.62 2960,-1491.86 3012.27,-1547.33 3102.62,-1547.94 3169.98,-1538.43"/>
<polygon fill="blue" stroke="blue" points="3170.79,-1541.85 3180.16,-1536.9 3169.75,-1534.93 3170.79,-1541.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.76,-565.67C2804.04,-564.23 2903.69,-569.14 2932,-598.86 2996.11,-666.15 2896.53,-1366.97 2960,-1434.86 3012.52,-1491.03 3103.94,-1492.17 3171.51,-1483.2"/>
<polygon fill="blue" stroke="blue" points="3172.32,-1486.62 3181.72,-1481.74 3171.33,-1479.69 3172.32,-1486.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node248"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="2823,-319.86 2381,-319.86 2381,-283.86 2823,-283.86 2823,-319.86"/>
<text text-anchor="middle" x="2602" y="-298.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.67,-283.83C2751.54,-270.34 2865.67,-263.9 2932,-328.86 2975.41,-371.38 2918.58,-556.4 2960,-600.86 3027.46,-673.28 3157.27,-667.09 3220.54,-658.91"/>
<polygon fill="blue" stroke="blue" points="3221.4,-662.32 3230.83,-657.48 3220.44,-655.39 3221.4,-662.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.26,-283.86C2753.72,-271.21 2865.28,-266.17 2932,-328.86 2995.16,-388.22 2899.6,-459.7 2960,-521.86 3147.39,-714.71 3380.61,-422.05 3556,-625.86 3587.39,-662.34 3543.91,-1456 3576,-1491.86 3603.67,-1522.8 3648.56,-1530.88 3688.81,-1530.64"/>
<polygon fill="blue" stroke="blue" points="3689.01,-1534.14 3698.92,-1530.41 3688.85,-1527.14 3689.01,-1534.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2823.11,-300.06C3042.78,-311.02 3373.19,-364.4 3556,-572.86 3674.9,-708.45 3755.4,-1300.47 3772.57,-1436.8"/>
<polygon fill="blue" stroke="blue" points="3769.11,-1437.36 3773.82,-1446.85 3776.06,-1436.49 3769.11,-1437.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node249"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2702,-535.86 2502,-535.86 2502,-499.86 2702,-499.86 2702,-535.86"/>
<text text-anchor="middle" x="2602" y="-514.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.37,-501.88C2772.38,-496.02 2865.18,-499.68 2932,-544.86 2955.05,-560.45 2937.68,-584.24 2960,-600.86 3038.41,-659.27 3160.51,-660.13 3220.8,-656.32"/>
<polygon fill="blue" stroke="blue" points="3221.25,-659.8 3230.97,-655.6 3220.75,-652.82 3221.25,-659.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.36,-512.1C2787.63,-509.55 2901.48,-512.7 2932,-544.86 3004.46,-621.22 2887.87,-1415.19 2960,-1491.86 3012.3,-1547.46 3102.87,-1547.98 3170.28,-1538.41"/>
<polygon fill="blue" stroke="blue" points="3171.1,-1541.83 3180.47,-1536.87 3170.05,-1534.91 3171.1,-1541.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.34,-512.11C2787.61,-509.58 2901.44,-512.73 2932,-544.86 3000.17,-616.56 2892.5,-1362.52 2960,-1434.86 3012.46,-1491.09 3103.89,-1492.21 3171.48,-1483.22"/>
<polygon fill="blue" stroke="blue" points="3172.29,-1486.64 3181.7,-1481.77 3171.3,-1479.71 3172.29,-1486.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node250"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="2799.5,-1075.86 2404.5,-1075.86 2404.5,-1039.86 2799.5,-1039.86 2799.5,-1075.86"/>
<text text-anchor="middle" x="2602" y="-1054.16" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2799.72,-1052.88C2858.3,-1055.81 2912.2,-1064.45 2932,-1084.86 2973.91,-1128.06 2918.49,-1582.27 2960,-1625.86 3010.56,-1678.97 3095.96,-1682.53 3162.24,-1675.1"/>
<polygon fill="blue" stroke="blue" points="3162.78,-1678.56 3172.28,-1673.87 3161.93,-1671.61 3162.78,-1678.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.85,-1039.85C2756.79,-1028.24 2865.12,-1024.89 2932,-1084.86 2980.87,-1128.68 2917.07,-1180.21 2960,-1229.86 3143.49,-1442.1 3355.75,-1241.37 3556,-1437.86 3574.27,-1455.79 3556.02,-1475.87 3576,-1491.86 3607.26,-1516.89 3650.47,-1524.95 3688.73,-1526.21"/>
<polygon fill="blue" stroke="blue" points="3688.79,-1529.71 3698.85,-1526.39 3688.92,-1522.71 3688.79,-1529.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2799.68,-1063C2843.7,-1067.18 2889.83,-1073.98 2932,-1084.86 3260.32,-1169.56 3620.79,-1372.79 3737.37,-1441.62"/>
<polygon fill="blue" stroke="blue" points="3735.59,-1444.64 3745.98,-1446.72 3739.16,-1438.61 3735.59,-1444.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node251"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="2725.5,-427.86 2478.5,-427.86 2478.5,-391.86 2725.5,-391.86 2725.5,-427.86"/>
<text text-anchor="middle" x="2602" y="-406.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.38,-391.81C2755.56,-379.74 2865.24,-375.69 2932,-436.86 2986.52,-486.82 2907.82,-548.47 2960,-600.86 3029.66,-670.82 3157.87,-665.92 3220.56,-658.5"/>
<polygon fill="blue" stroke="blue" points="3221.28,-661.93 3230.75,-657.2 3220.39,-654.99 3221.28,-661.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node252"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="2695.5,-373.86 2508.5,-373.86 2508.5,-337.86 2695.5,-337.86 2695.5,-373.86"/>
<text text-anchor="middle" x="2602" y="-352.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.43,-337.81C2753.05,-324.85 2865.48,-319.33 2932,-382.86 3002.64,-450.33 2892.52,-530.23 2960,-600.86 3028.37,-672.42 3157.74,-666.65 3220.72,-658.73"/>
<polygon fill="blue" stroke="blue" points="3221.52,-662.16 3230.96,-657.35 3220.59,-655.22 3221.52,-662.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node253"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="2682,-481.86 2522,-481.86 2522,-445.86 2682,-445.86 2682,-481.86"/>
<text text-anchor="middle" x="2602" y="-460.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge516" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.07,-446.74C2755.45,-435.78 2863.39,-432.87 2932,-490.86 2970.53,-523.43 2923,-566.57 2960,-600.86 3032.22,-667.8 3158.68,-664.44 3220.66,-657.95"/>
<polygon fill="blue" stroke="blue" points="3221.21,-661.41 3230.75,-656.81 3220.42,-654.46 3221.21,-661.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge517" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.04,-459.08C2768.18,-455.74 2898.26,-456.83 2932,-490.86 2991.77,-551.15 2913.92,-800.56 2960,-871.86 3123.54,-1124.9 3393.24,-941.32 3556,-1194.86 3591.74,-1250.53 3530.82,-1443.55 3576,-1491.86 3604.24,-1522.06 3648.94,-1530.16 3688.92,-1530.11"/>
<polygon fill="blue" stroke="blue" points="3689.04,-1533.61 3698.97,-1529.93 3688.91,-1526.61 3689.04,-1533.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge518" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.57,-445.84C2753.99,-433.27 2865.29,-428.37 2932,-490.86 2993.97,-548.92 2912.73,-609.32 2960,-679.86 3131.62,-936 3345.11,-809.95 3556,-1034.86 3674.36,-1161.09 3744.85,-1363.21 3767.74,-1436.86"/>
<polygon fill="blue" stroke="blue" points="3764.5,-1438.23 3770.77,-1446.77 3771.19,-1436.18 3764.5,-1438.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node254"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="2740.5,-1345.86 2463.5,-1345.86 2463.5,-1309.86 2740.5,-1309.86 2740.5,-1345.86"/>
<text text-anchor="middle" x="2602" y="-1324.16" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge544" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.67,-1309.84C2751.53,-1296.35 2865.66,-1289.91 2932,-1354.86 2975.26,-1397.22 2917.14,-1583.1 2960,-1625.86 3010.76,-1676.5 3093.39,-1681.17 3158.63,-1674.77"/>
<polygon fill="blue" stroke="blue" points="3159.38,-1678.21 3168.94,-1673.65 3158.62,-1671.25 3159.38,-1678.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge543" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.77,-1309.85C2757.57,-1298.49 2865.11,-1295.54 2932,-1354.86 2978.5,-1396.1 2913.69,-1450.42 2960,-1491.86 3015.58,-1541.59 3102.64,-1543.91 3168.16,-1536.42"/>
<polygon fill="blue" stroke="blue" points="3168.99,-1539.85 3178.49,-1535.14 3168.13,-1532.9 3168.99,-1539.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge542" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2699.69,-1309.83C2771.1,-1302.17 2866.82,-1304.48 2932,-1354.86 2961.81,-1377.9 2930.41,-1411.55 2960,-1434.86 3019.12,-1481.45 3106.74,-1484.83 3171.51,-1479.04"/>
<polygon fill="blue" stroke="blue" points="3172.09,-1482.5 3181.7,-1478.04 3171.4,-1475.53 3172.09,-1482.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node255"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2746,-1021.86 2458,-1021.86 2458,-985.86 2746,-985.86 2746,-1021.86"/>
<text text-anchor="middle" x="2602" y="-1000.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge573" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2746.17,-997.57C2822.66,-997.6 2906.27,-1004.22 2932,-1030.86 2977.98,-1078.47 2914.47,-1577.83 2960,-1625.86 3010.52,-1679.17 3096.13,-1682.65 3162.5,-1675.13"/>
<polygon fill="blue" stroke="blue" points="3163.06,-1678.59 3172.56,-1673.9 3162.2,-1671.64 3163.06,-1678.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge574" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.38,-985.81C2755.56,-973.74 2865.24,-969.69 2932,-1030.86 2986.52,-1080.82 2907.81,-1142.48 2960,-1194.86 3149.79,-1385.35 3372.59,-1102.24 3556,-1298.86 3585.41,-1330.39 3545.99,-1460.91 3576,-1491.86 3604.61,-1521.37 3648.98,-1529.5 3688.67,-1529.66"/>
<polygon fill="blue" stroke="blue" points="3688.96,-1533.16 3698.92,-1529.53 3688.87,-1526.16 3688.96,-1533.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge575" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2746.05,-1006.73C2804.3,-1010.19 2871.94,-1017.15 2932,-1030.86 3221.68,-1097.02 3301.9,-1116.84 3556,-1270.86 3636.22,-1319.49 3714.91,-1398.59 3752.73,-1439.13"/>
<polygon fill="blue" stroke="blue" points="3750.38,-1441.74 3759.74,-1446.7 3755.52,-1436.98 3750.38,-1441.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node256"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="2716,-967.86 2488,-967.86 2488,-931.86 2716,-931.86 2716,-967.86"/>
<text text-anchor="middle" x="2602" y="-946.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge599" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.18,-957.15C2781.51,-957.36 2863.95,-950.64 2932,-922.86 3067.29,-867.64 3188.82,-734.87 3236.08,-678.68"/>
<polygon fill="blue" stroke="blue" points="3238.8,-680.89 3242.51,-670.97 3233.42,-676.41 3238.8,-680.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge598" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.02,-943.94C2799.22,-942.28 2902.73,-946.77 2932,-976.86 3011.92,-1059.02 2880.44,-1409.36 2960,-1491.86 3012.39,-1546.19 3101.41,-1547.4 3168.36,-1538.37"/>
<polygon fill="blue" stroke="blue" points="3169.09,-1541.81 3178.49,-1536.91 3168.09,-1534.88 3169.09,-1541.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge600" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.39,-943.99C2799.48,-942.38 2902.68,-946.92 2932,-976.86 3003.35,-1049.71 2889.34,-1361.35 2960,-1434.86 3013.2,-1490.22 3104.29,-1491.55 3171.6,-1482.85"/>
<polygon fill="blue" stroke="blue" points="3172.34,-1486.28 3181.77,-1481.44 3171.38,-1479.35 3172.34,-1486.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node257"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="2703.5,-913.86 2500.5,-913.86 2500.5,-877.86 2703.5,-877.86 2703.5,-913.86"/>
<text text-anchor="middle" x="2602" y="-892.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge647" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.56,-900.48C2770.12,-900.45 2858.37,-894.43 2932,-868.86 3055.58,-825.95 3177.63,-724.89 3230.15,-677.81"/>
<polygon fill="blue" stroke="blue" points="3232.61,-680.31 3237.68,-671 3227.92,-675.11 3232.61,-680.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge646" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.87,-890.19C2788.85,-887.83 2901.36,-891.2 2932,-922.86 2976.02,-968.35 2916.18,-1446.19 2960,-1491.86 3012.42,-1546.5 3101.87,-1547.53 3168.94,-1538.36"/>
<polygon fill="blue" stroke="blue" points="3169.69,-1541.79 3179.08,-1536.87 3168.68,-1534.86 3169.69,-1541.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge648" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.83,-890.23C2788.78,-887.9 2901.27,-891.29 2932,-922.86 3011.47,-1004.53 2881.3,-1352.46 2960,-1434.86 3013.02,-1490.39 3104.14,-1491.7 3171.5,-1482.94"/>
<polygon fill="blue" stroke="blue" points="3172.26,-1486.37 3181.68,-1481.52 3171.29,-1479.44 3172.26,-1486.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node258"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2748,-859.86 2456,-859.86 2456,-823.86 2748,-823.86 2748,-859.86"/>
<text text-anchor="middle" x="2602" y="-838.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge654" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748,-841.8C2806.08,-838.73 2873.07,-831.31 2932,-814.86 3044.4,-783.5 3164.17,-712.8 3221.88,-676.04"/>
<polygon fill="blue" stroke="blue" points="3224.08,-678.79 3230.61,-670.45 3220.3,-672.9 3224.08,-678.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge652" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748.41,-835.56C2824.3,-835.7 2906.55,-842.45 2932,-868.86 2980.08,-918.76 2912.14,-1441.76 2960,-1491.86 3012.39,-1546.7 3102.06,-1547.63 3169.2,-1538.38"/>
<polygon fill="blue" stroke="blue" points="3169.97,-1541.8 3179.35,-1536.88 3168.95,-1534.88 3169.97,-1541.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge653" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748.37,-835.6C2824.24,-835.76 2906.49,-842.51 2932,-868.86 2975.8,-914.1 2916.63,-1389.21 2960,-1434.86 3012.97,-1490.61 3104.31,-1491.82 3171.75,-1482.97"/>
<polygon fill="blue" stroke="blue" points="3172.53,-1486.4 3181.94,-1481.54 3171.55,-1479.47 3172.53,-1486.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node259"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="2772.5,-805.86 2431.5,-805.86 2431.5,-769.86 2772.5,-769.86 2772.5,-805.86"/>
<text text-anchor="middle" x="2602" y="-784.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge655" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2772.73,-781.7C2824.25,-777.76 2880.76,-771.32 2932,-760.86 3040.16,-738.79 3162.38,-691.92 3221.38,-667.84"/>
<polygon fill="blue" stroke="blue" points="3222.71,-671.08 3230.63,-664.04 3220.05,-664.6 3222.71,-671.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge657" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2772.6,-781.8C2841.06,-783.3 2909.27,-791.2 2932,-814.86 2984.15,-869.17 2908.09,-1437.33 2960,-1491.86 3012.37,-1546.89 3102.27,-1547.71 3169.47,-1538.38"/>
<polygon fill="blue" stroke="blue" points="3170.26,-1541.81 3179.64,-1536.87 3169.23,-1534.88 3170.26,-1541.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge656" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2772.56,-781.84C2841.01,-783.35 2909.23,-791.24 2932,-814.86 2979.86,-864.51 2912.61,-1384.77 2960,-1434.86 3012.85,-1490.73 3104.21,-1491.91 3171.69,-1483.03"/>
<polygon fill="blue" stroke="blue" points="3172.47,-1486.46 3181.88,-1481.59 3171.49,-1479.53 3172.47,-1486.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node260"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2932,-1291.86 2272,-1291.86 2272,-1255.86 2932,-1255.86 2932,-1291.86"/>
<text text-anchor="middle" x="2602" y="-1270.16" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge793" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2919.74,-1292.03C2924.62,-1294.69 2928.75,-1297.63 2932,-1300.86 2983.36,-1352.02 2909.12,-1574.23 2960,-1625.86 3010.32,-1676.93 3093,-1681.57 3158.36,-1675.04"/>
<polygon fill="blue" stroke="blue" points="3159.13,-1678.47 3168.69,-1673.9 3158.37,-1671.52 3159.13,-1678.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge792" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.59,-1255.82C2754.03,-1243.23 2865.34,-1238.32 2932,-1300.86 2994.57,-1359.57 2897.69,-1432.88 2960,-1491.86 3014.45,-1543.41 3102.34,-1545.27 3168.41,-1537.18"/>
<polygon fill="blue" stroke="blue" points="3168.95,-1540.63 3178.4,-1535.85 3168.03,-1533.69 3168.95,-1540.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge794" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.06,-1255.86C2757.82,-1244.6 2865.09,-1241.78 2932,-1300.86 2977.61,-1341.13 2914.77,-1394.17 2960,-1434.86 3016.52,-1485.72 3105.81,-1488.14 3171.74,-1480.94"/>
<polygon fill="blue" stroke="blue" points="3172.18,-1484.41 3181.7,-1479.75 3171.36,-1477.46 3172.18,-1484.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node261"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="2783,-1237.86 2421,-1237.86 2421,-1201.86 2783,-1201.86 2783,-1237.86"/>
<text text-anchor="middle" x="2602" y="-1216.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge799" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2783.44,-1214.46C2847.96,-1216.61 2910.16,-1224.84 2932,-1246.86 2991.47,-1306.82 2901.09,-1565.35 2960,-1625.86 3010.54,-1677.79 3094.48,-1681.94 3160.24,-1675.02"/>
<polygon fill="blue" stroke="blue" points="3160.69,-1678.49 3170.22,-1673.87 3159.89,-1671.53 3160.69,-1678.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge800" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.22,-1201.86C2751.98,-1188.58 2865.52,-1182.47 2932,-1246.86 3010.72,-1323.11 2881.61,-1415.27 2960,-1491.86 3013.72,-1544.35 3101.91,-1546.03 3168.27,-1537.62"/>
<polygon fill="blue" stroke="blue" points="3168.87,-1541.07 3178.31,-1536.25 3167.93,-1534.13 3168.87,-1541.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge801" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.56,-1201.85C2753.98,-1189.29 2865.27,-1184.39 2932,-1246.86 2993.67,-1304.6 2898.87,-1376.55 2960,-1434.86 3015.29,-1487.6 3105.4,-1489.55 3171.89,-1481.71"/>
<polygon fill="blue" stroke="blue" points="3172.45,-1485.16 3181.93,-1480.43 3171.57,-1478.22 3172.45,-1485.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.22,-1576.95C3406.37,-1582.51 3489.11,-1595.51 3556,-1625.86 4033.74,-1842.63 4187.46,-1936.6 4460,-2384.86 4623.24,-2653.35 4650.63,-3050.12 4655.13,-3158.58"/>
<polygon fill="blue" stroke="blue" points="4651.64,-3158.86 4655.52,-3168.72 4658.64,-3158.6 4651.64,-3158.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node263"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="4256,-1536.86 4202,-1536.86 4202,-1500.86 4256,-1500.86 4256,-1536.86"/>
<text text-anchor="middle" x="4229" y="-1515.16" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4243.02,-1536.89C4282.76,-1592.88 4403.25,-1770.03 4460,-1935.86 4620.78,-2405.69 4650.43,-3020.37 4655.18,-3158.5"/>
<polygon fill="blue" stroke="blue" points="4651.68,-3158.78 4655.51,-3168.66 4658.68,-3158.55 4651.68,-3158.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.52,-1518.86C3432.05,-1518.86 3590.34,-1518.86 3688.65,-1518.86"/>
<polygon fill="blue" stroke="blue" points="3688.86,-1522.36 3698.86,-1518.86 3688.86,-1515.36 3688.86,-1522.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-1464.86C3429.39,-1464.86 3592.96,-1464.86 3692.13,-1464.86"/>
<polygon fill="blue" stroke="blue" points="3692.41,-1468.36 3702.41,-1464.86 3692.41,-1461.36 3692.41,-1468.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.1,-1518.86C3953.25,-1518.86 4118.81,-1518.86 4191.7,-1518.86"/>
<polygon fill="blue" stroke="blue" points="4191.76,-1522.36 4201.76,-1518.86 4191.76,-1515.36 4191.76,-1522.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge509" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3851.55,-1473.69C3949.17,-1485.4 4117.78,-1505.64 4191.6,-1514.5"/>
<polygon fill="blue" stroke="blue" points="4191.44,-1518 4201.79,-1515.72 4192.28,-1511.05 4191.44,-1518"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node274"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="5079.5,-4229.86 4960.5,-4229.86 4960.5,-4193.86 5079.5,-4193.86 5079.5,-4229.86"/>
<text text-anchor="middle" x="5020" y="-4208.16" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.18,-4337.12C4717.71,-4333.11 4777.32,-4324.26 4826,-4307.86 4881.98,-4289.01 4942.3,-4256.91 4980.33,-4235.06"/>
<polygon fill="blue" stroke="blue" points="4982.13,-4238.06 4989.03,-4230.02 4978.62,-4232.01 4982.13,-4238.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="4332,-4263.86 4126,-4263.86 4126,-4227.86 4332,-4227.86 4332,-4263.86"/>
<text text-anchor="middle" x="4229" y="-4242.16" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4332.07,-4250.15C4373.9,-4247.9 4421.44,-4239.9 4460,-4218.86 4477.19,-4209.49 4470.61,-4193.86 4488,-4184.86 4698.16,-4076.1 4782.36,-4145.86 5019,-4145.86 5019,-4145.86 5019,-4145.86 5298,-4145.86 5650.49,-4145.86 5517.5,-4538.12 5591,-4882.86 5611.01,-4976.73 5566.54,-5671.33 5627,-5745.86 5627.49,-5746.47 5628,-5747.07 5628.51,-5747.65"/>
<polygon fill="blue" stroke="blue" points="5626.14,-5750.23 5635.81,-5754.56 5630.96,-5745.14 5626.14,-5750.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<g id="a_node275"><a xlink:title="fn scalars_summing_to&lt;R: Rng + CryptoRng&gt;(n: NonZeroUsize, s: &amp;Scalar, rng: &amp;mut R) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut v: Vec&lt;Scalar&gt; = repeat_with(|| random_scalar(rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.take(n.get() &#45; 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4736,-4229.86 4578,-4229.86 4578,-4193.86 4736,-4193.86 4736,-4229.86"/>
<text text-anchor="middle" x="4657" y="-4208.16" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4332.04,-4237.72C4403.8,-4231.99 4498.87,-4224.4 4567.44,-4218.93"/>
<polygon fill="blue" stroke="blue" points="4568.1,-4222.39 4577.79,-4218.11 4567.54,-4215.41 4568.1,-4222.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4255.55,-4173.76C4300.2,-4143.28 4396.4,-4082.62 4488,-4057.86 4716.1,-3996.21 4782.72,-4031.86 5019,-4031.86 5019,-4031.86 5019,-4031.86 5298,-4031.86 5440.65,-4031.86 5512,-4044.09 5591,-4162.86 5638.06,-4233.61 5574.07,-5625.39 5627,-5691.86 5642.97,-5711.92 5671.58,-5718.33 5695.06,-5719.91"/>
<polygon fill="blue" stroke="blue" points="5694.95,-5723.41 5705.08,-5720.32 5695.24,-5716.42 5694.95,-5723.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M4266.06,-4176.82C4405.1,-4121.48 4912.19,-3944.53 5186,-4184.86 5216.03,-4211.22 5394.69,-5571.06 5416,-5604.86 5425.45,-5619.86 5440.15,-5632.1 5454.77,-5641.52"/>
<polygon fill="blue" stroke="blue" points="5452.97,-5644.53 5463.33,-5646.75 5456.62,-5638.55 5452.97,-5644.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266,-4189.41C4358.88,-4183.52 4614.12,-4170.11 4826,-4184.86 4867.34,-4187.74 4913.3,-4194.05 4950,-4199.84"/>
<polygon fill="blue" stroke="blue" points="4949.67,-4203.33 4960.1,-4201.46 4950.77,-4196.42 4949.67,-4203.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node276"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4732,-4283.86 4582,-4283.86 4582,-4247.86 4732,-4247.86 4732,-4283.86"/>
<text text-anchor="middle" x="4657" y="-4262.16" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.39,-4190.64C4312.89,-4190.28 4395.12,-4193.81 4460,-4218.86 4474.27,-4224.37 4473.85,-4233.05 4488,-4238.86 4514.16,-4249.61 4544.25,-4256.1 4571.68,-4260"/>
<polygon fill="blue" stroke="blue" points="4571.27,-4263.48 4581.65,-4261.33 4572.19,-4256.54 4571.27,-4263.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node271"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4694,-4465.86 4620,-4465.86 4620,-4429.86 4694,-4429.86 4694,-4465.86"/>
<text text-anchor="middle" x="4657" y="-4444.16" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M4666.03,-4465.92C4688.96,-4515.29 4759.67,-4653.46 4862,-4722.86 4985.3,-4806.49 5093.83,-4691.81 5186,-4808.86 5216.35,-4847.42 5176.27,-5652.83 5206,-5691.86 5210.02,-5697.14 5215.04,-5701.43 5220.63,-5704.9"/>
<polygon fill="blue" stroke="blue" points="5219.36,-5708.18 5229.84,-5709.71 5222.6,-5701.97 5219.36,-5708.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;fn to_ristretto_scalar(b: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(b.try_into().ok()?).into_option() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5090,-4465.86 4950,-4465.86 4950,-4429.86 5090,-4429.86 5090,-4465.86"/>
<text text-anchor="middle" x="5020" y="-4444.16" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4694.27,-4447.86C4751.33,-4447.86 4863.44,-4447.86 4939.8,-4447.86"/>
<polygon fill="blue" stroke="blue" points="4939.85,-4451.36 4949.85,-4447.86 4939.85,-4444.36 4939.85,-4451.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5038.66,-4466.03C5074.62,-4504.41 5155.53,-4598.22 5186,-4694.86 5201.21,-4743.09 5181.65,-5560.54 5206,-5604.86 5214.47,-5620.27 5228.78,-5632.44 5243.53,-5641.67"/>
<polygon fill="blue" stroke="blue" points="5241.82,-5644.73 5252.22,-5646.76 5245.36,-5638.69 5241.82,-5644.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="3848.5,-4357.86 3705.5,-4357.86 3705.5,-4321.86 3848.5,-4321.86 3848.5,-4357.86"/>
<text text-anchor="middle" x="3777" y="-4336.16" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.74,-4339.86C4026.52,-4339.86 4487.28,-4339.86 4619.84,-4339.86"/>
<polygon fill="blue" stroke="blue" points="4619.87,-4343.36 4629.87,-4339.86 4619.87,-4336.36 4619.87,-4343.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3803.26,-4321.67C3842.69,-4294.29 3922.24,-4243.12 3998,-4218.86 4059.41,-4199.2 4134.14,-4193.58 4181.4,-4192.12"/>
<polygon fill="blue" stroke="blue" points="4181.73,-4195.61 4191.64,-4191.86 4181.55,-4188.62 4181.73,-4195.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.77,-4357.97C3865.54,-4375.16 3935.2,-4400.08 3998,-4411.86 4224.35,-4454.33 4501.57,-4452.27 4609.71,-4449.45"/>
<polygon fill="blue" stroke="blue" points="4610.04,-4452.94 4619.94,-4449.17 4609.85,-4445.95 4610.04,-4452.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create(&amp;mut self, req_bytes: &amp;[u8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.versions.clear(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4258.5,-4402.86 4199.5,-4402.86 4199.5,-4366.86 4258.5,-4366.86 4258.5,-4402.86"/>
<text text-anchor="middle" x="4229" y="-4381.16" font-family="Helvetica,sans-Serif" font-size="14.00">create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.81,-4346.94C3945.02,-4356.57 4113.71,-4373.43 4189.37,-4381"/>
<polygon fill="blue" stroke="blue" points="4189.11,-4384.49 4199.41,-4382 4189.81,-4377.53 4189.11,-4384.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.81,-4334.04C3946,-4326.05 4117.16,-4311.98 4191.66,-4305.85"/>
<polygon fill="blue" stroke="blue" points="4192.25,-4309.31 4201.93,-4305.01 4191.67,-4302.34 4192.25,-4309.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5038.53,-4230.07C5071.19,-4264.76 5142,-4343.78 5186,-4420.86 5433.34,-4854.17 5468.08,-4984.31 5591,-5467.86 5606.35,-5528.24 5585.69,-5699.24 5627,-5745.86 5627.63,-5746.58 5628.28,-5747.28 5628.95,-5747.96"/>
<polygon fill="blue" stroke="blue" points="5626.76,-5750.69 5636.61,-5754.6 5631.35,-5745.41 5626.76,-5750.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge664" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4736.33,-4211.86C4800.04,-4211.86 4889.07,-4211.86 4950.09,-4211.86"/>
<polygon fill="blue" stroke="blue" points="4950.39,-4215.36 4960.39,-4211.86 4950.39,-4208.36 4950.39,-4215.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge700" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M4732.1,-4269.77C4765.08,-4275.32 4801.84,-4287.36 4826,-4312.86 4876.72,-4366.41 4822.32,-4412.69 4862,-4474.86 4959.56,-4627.72 5104.02,-4561.11 5186,-4722.86 5210.34,-4770.89 5173.41,-5649 5206,-5691.86 5210.02,-5697.15 5215.03,-5701.43 5220.62,-5704.91"/>
<polygon fill="blue" stroke="blue" points="5219.34,-5708.19 5229.82,-5709.72 5222.59,-5701.98 5219.34,-5708.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node277"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="4684,-4411.86 4630,-4411.86 4630,-4375.86 4684,-4375.86 4684,-4411.86"/>
<text text-anchor="middle" x="4657" y="-4390.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge789" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-4397.79C4737.16,-4405.7 4858.43,-4423.85 4939.55,-4435.98"/>
<polygon fill="blue" stroke="blue" points="4939.32,-4439.48 4949.73,-4437.5 4940.35,-4432.56 4939.32,-4439.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="edge824" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4258.61,-4385.47C4333.76,-4387.06 4536.66,-4391.34 4619.76,-4393.1"/>
<polygon fill="blue" stroke="blue" points="4619.91,-4396.6 4629.98,-4393.31 4620.05,-4389.6 4619.91,-4396.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge842" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.11,-4303.74C4356.14,-4306.87 4714.85,-4316.21 4826,-4292.86 4880.75,-4281.36 4939.45,-4254.4 4977.55,-4234.73"/>
<polygon fill="blue" stroke="blue" points="4979.54,-4237.64 4986.77,-4229.9 4976.29,-4231.44 4979.54,-4237.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge843" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.04,-4305.4C4300.78,-4308.53 4393.77,-4309.54 4460,-4272.86 4477.12,-4263.38 4471.02,-4248.6 4488,-4238.86 4511.86,-4225.18 4540.59,-4217.88 4567.48,-4214.13"/>
<polygon fill="blue" stroke="blue" points="4568.2,-4217.57 4577.69,-4212.86 4567.33,-4210.62 4568.2,-4217.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge844" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-4300.6C4317.42,-4295.27 4473.63,-4281.7 4571.67,-4273.19"/>
<polygon fill="blue" stroke="blue" points="4572.2,-4276.66 4581.86,-4272.3 4571.59,-4269.68 4572.2,-4276.66"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node280"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3841,-4685.86 3713,-4685.86 3713,-4649.86 3841,-4649.86 3841,-4685.86"/>
<text text-anchor="middle" x="3777" y="-4664.16" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.19,-4656.98C3886.43,-4653.18 3944.97,-4657.19 3978,-4694.86 4007.58,-4728.6 3991.39,-11111.48 3998,-11155.86 4042.17,-11452.61 4176.23,-11794.09 4216.46,-11892.21"/>
<polygon fill="blue" stroke="blue" points="4213.33,-11893.79 4220.37,-11901.7 4219.8,-11891.12 4213.33,-11893.79"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.2,-4656.98C3886.44,-4653.18 3944.98,-4657.18 3978,-4694.86 4011.44,-4733.02 3964.23,-11963 3998,-12000.86 4046.07,-12054.76 4139.92,-12046.31 4191.64,-12036.48"/>
<polygon fill="blue" stroke="blue" points="4192.59,-12039.86 4201.7,-12034.45 4191.2,-12033 4192.59,-12039.86"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node281"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="3329.5,-4739.86 3186.5,-4739.86 3186.5,-4703.86 3329.5,-4703.86 3329.5,-4739.86"/>
<text text-anchor="middle" x="3258" y="-4718.16" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.53,-4714.5C3427.44,-4704.27 3603.66,-4685.86 3702.91,-4675.5"/>
<polygon fill="blue" stroke="blue" points="3703.28,-4678.98 3712.86,-4674.46 3702.55,-4672.02 3703.28,-4678.98"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node282"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3840,-4739.86 3714,-4739.86 3714,-4703.86 3840,-4703.86 3840,-4739.86"/>
<text text-anchor="middle" x="3777" y="-4718.16" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.53,-4721.86C3427.61,-4721.86 3604.27,-4721.86 3703.42,-4721.86"/>
<polygon fill="blue" stroke="blue" points="3703.65,-4725.36 3713.65,-4721.86 3703.65,-4718.36 3703.65,-4725.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.6,-4724.67C3479.43,-4734.89 3827.79,-4782.21 3978,-5000.86 4002.2,-5036.09 3991.7,-11113.59 3998,-11155.86 4042.19,-11452.6 4176.24,-11794.09 4216.47,-11892.21"/>
<polygon fill="blue" stroke="blue" points="4213.33,-11893.79 4220.38,-11901.7 4219.8,-11891.12 4213.33,-11893.79"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3326.72,-4739.96C3391.89,-4760.21 3490.02,-4798.48 3556,-4859.86 3569.4,-4872.33 3562.22,-4883.82 3576,-4895.86 3720.45,-5022.05 3869.59,-4894.63 3978,-5052.86 4005.06,-5092.36 3966.13,-11911.14 3998,-11946.86 4039.86,-11993.79 4116.44,-11993.45 4169.67,-11986.09"/>
<polygon fill="blue" stroke="blue" points="4170.29,-11989.53 4179.66,-11984.59 4169.25,-11982.61 4170.29,-11989.53"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.56,-4734.79C3398.62,-4751.34 3501.19,-4787.08 3556,-4859.86 3590.64,-4905.86 3537.23,-4945.29 3576,-4987.86 3700.11,-5124.15 3864.61,-4944.54 3978,-5089.86 4007.52,-5127.7 3966.05,-11965.05 3998,-12000.86 4046.07,-12054.75 4139.92,-12046.31 4191.64,-12036.48"/>
<polygon fill="blue" stroke="blue" points="4192.59,-12039.86 4201.7,-12034.45 4191.2,-12032.99 4192.59,-12039.86"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge597" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3793.93,-4739.91C3834.44,-4787.16 3940.77,-4920.01 3978,-5052.86 3991.02,-5099.32 3965.88,-11964.86 3998,-12000.86 4046.07,-12054.75 4139.92,-12046.31 4191.64,-12036.48"/>
<polygon fill="blue" stroke="blue" points="4192.59,-12039.86 4201.7,-12034.45 4191.2,-12032.99 4192.59,-12039.86"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node283"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2639.5,-4739.86 2564.5,-4739.86 2564.5,-4703.86 2639.5,-4703.86 2639.5,-4739.86"/>
<text text-anchor="middle" x="2602" y="-4718.16" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge803" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.56,-4721.86C2742.01,-4721.86 3033.7,-4721.86 3176.39,-4721.86"/>
<polygon fill="blue" stroke="blue" points="3176.41,-4725.36 3186.41,-4721.86 3176.41,-4718.36 3176.41,-4725.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node284"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5075,-11991.86 4965,-11991.86 4965,-11955.86 5075,-11955.86 5075,-11991.86"/>
<text text-anchor="middle" x="5020" y="-11970.16" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<g id="a_node298"><a xlink:title="fn username_sha_scalar(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;let mut hash = Sha512::new(); &#160;&#160;&#160;&#160;hash.update(nickname.as_bytes()); &#160;&#160;&#160;&#160;hash.update([0x00]); &#160;&#160;&#160;&#160;hash....">
<polygon fill="white" stroke="black" points="5379.5,-11991.86 5214.5,-11991.86 5214.5,-11955.86 5379.5,-11955.86 5379.5,-11991.86"/>
<text text-anchor="middle" x="5297" y="-11970.16" font-family="Helvetica,sans-Serif" font-size="14.00">username_sha_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5075,-11973.86C5111.79,-11973.86 5161.4,-11973.86 5204.29,-11973.86"/>
<polygon fill="blue" stroke="blue" points="5204.47,-11977.36 5214.47,-11973.86 5204.47,-11970.36 5204.47,-11977.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4237.45,-11901.67C4271.23,-11818.17 4410.47,-11462.52 4460,-11155.86 4468.9,-11100.78 4448,-10190.77 4488,-10151.86 4557.71,-10084.07 4873.08,-10132.75 4981.93,-10151.99"/>
<polygon fill="blue" stroke="blue" points="4981.34,-10155.44 4991.8,-10153.75 4982.57,-10148.55 4981.34,-10155.44"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;fn invalid_nicknames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (nickname, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::NicknameCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; ab🦀d&#39; , UsernameError::BadNicknameCharacter), &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3849,-12207.86 3705,-12207.86 3705,-12171.86 3849,-12171.86 3849,-12207.86"/>
<text text-anchor="middle" x="3777" y="-12186.16" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_nicknames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3849.3,-12181.31C3939.02,-12170.54 4091.19,-12152.28 4172.65,-12142.51"/>
<polygon fill="blue" stroke="blue" points="4173.19,-12145.97 4182.7,-12141.3 4172.35,-12139.02 4173.19,-12145.97"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3849.34,-12197.36C3891.03,-12197.9 3942.31,-12191.44 3978,-12162.86 3997.98,-12146.87 3979.76,-12126.81 3998,-12108.86 4051.67,-12056.05 4141.77,-12037.53 4191.79,-12031.14"/>
<polygon fill="blue" stroke="blue" points="4192.3,-12034.6 4201.82,-12029.95 4191.48,-12027.65 4192.3,-12034.6"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node287"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3922.5,-11991.86 3631.5,-11991.86 3631.5,-11955.86 3922.5,-11955.86 3922.5,-11991.86"/>
<text text-anchor="middle" x="3777" y="-11970.16" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.66,-11956C3947.77,-11952.93 3973.64,-11949.79 3998,-11946.86 4066.51,-11938.64 4146.54,-11929.31 4191.85,-11924.05"/>
<polygon fill="blue" stroke="blue" points="4192.25,-11927.52 4201.78,-11922.9 4191.44,-11920.57 4192.25,-11927.52"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.55,-11973.86C4006.42,-11973.86 4107.46,-11973.86 4169.72,-11973.86"/>
<polygon fill="blue" stroke="blue" points="4169.74,-11977.36 4179.74,-11973.86 4169.74,-11970.36 4169.74,-11977.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.66,-11991.73C3947.77,-11994.8 3973.64,-11997.94 3998,-12000.86 4066.51,-12009.09 4146.54,-12018.42 4191.85,-12023.68"/>
<polygon fill="blue" stroke="blue" points="4191.44,-12027.16 4201.78,-12024.83 4192.25,-12020.2 4191.44,-12027.16"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<g id="a_node296"><a xlink:title=" &#160;&#160;&#160;fn from_parts_without_soft_limit( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;validate_prefix(nickname)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let discriminator = valida...">
<polygon fill="white" stroke="black" points="4766.5,-12045.86 4547.5,-12045.86 4547.5,-12009.86 4766.5,-12009.86 4766.5,-12045.86"/>
<text text-anchor="middle" x="4657" y="-12024.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts_without_soft_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4275.19,-12124.41C4346.5,-12106.33 4486.15,-12070.92 4575.07,-12048.38"/>
<polygon fill="blue" stroke="blue" points="4576.02,-12051.75 4584.85,-12045.9 4574.3,-12044.97 4576.02,-12051.75"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().</title>
<g id="a_node289"><a xlink:title=" &#160;&#160;&#160;fn no_discriminator() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::new(&#39; no_discriminator&#39; ).expect_err(&#39; not a valid username&#39; ), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UsernameError::MissingSeparator &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3843,-12099.86 3711,-12099.86 3711,-12063.86 3843,-12063.86 3843,-12099.86"/>
<text text-anchor="middle" x="3777" y="-12078.16" font-family="Helvetica,sans-Serif" font-size="14.00">no_discriminator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.43,-12074.01C3939.7,-12062.46 4116.26,-12041.27 4191.97,-12032.19"/>
<polygon fill="blue" stroke="blue" points="4192.46,-12035.65 4201.97,-12030.99 4191.62,-12028.7 4192.46,-12035.65"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().</title>
<g id="a_node290"><a xlink:title=" &#160;&#160;&#160;fn nicknames_exceeding_soft_limits() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39; 42&#39; , NicknameLimits::default()).expect(&#39; valid&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39;...">
<polygon fill="white" stroke="black" points="3900,-12261.86 3654,-12261.86 3654,-12225.86 3900,-12225.86 3900,-12261.86"/>
<text text-anchor="middle" x="3777" y="-12240.16" font-family="Helvetica,sans-Serif" font-size="14.00">nicknames_exceeding_soft_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3900.25,-12230.9C3926.08,-12227.17 3953.06,-12222.54 3978,-12216.86 4046.4,-12201.3 4122.81,-12175.21 4172.95,-12156.86"/>
<polygon fill="blue" stroke="blue" points="4174.44,-12160.04 4182.61,-12153.29 4172.02,-12153.47 4174.44,-12160.04"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4278.37,-11979.6C4327.81,-11983 4404.93,-11981.26 4460,-11946.86 4966.3,-11630.64 4971.05,-11373.76 5186,-10816.86 5275.36,-10585.34 5292.19,-10280.43 5295.31,-10187.16"/>
<polygon fill="blue" stroke="blue" points="5298.81,-10187.2 5295.62,-10177.1 5291.81,-10186.99 5298.81,-10187.2"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().</title>
<g id="a_node292"><a xlink:title=" &#160;&#160;&#160;fn invalid_discriminators() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (discriminator, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::DiscriminatorCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; 0&#39; , UsernameError::DiscriminatorCannot...">
<polygon fill="white" stroke="black" points="3861,-12153.86 3693,-12153.86 3693,-12117.86 3861,-12117.86 3861,-12153.86"/>
<text text-anchor="middle" x="3777" y="-12132.16" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_discriminators</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-12135.86C3951.84,-12135.86 4094.71,-12135.86 4172.7,-12135.86"/>
<polygon fill="blue" stroke="blue" points="4172.8,-12139.36 4182.8,-12135.86 4172.8,-12132.36 4172.8,-12139.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.31,-12128C3897.44,-12123.72 3940.08,-12117.49 3978,-12108.86 4055.87,-12091.14 4144.14,-12059.78 4192.18,-12041.72"/>
<polygon fill="blue" stroke="blue" points="4193.68,-12044.89 4201.8,-12038.08 4191.21,-12038.35 4193.68,-12044.89"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().</title>
<g id="a_node293"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(&amp;nickname, discriminator).u...">
<polygon fill="white" stroke="black" points="5168.5,-12045.86 4871.5,-12045.86 4871.5,-12009.86 5168.5,-12009.86 5168.5,-12045.86"/>
<text text-anchor="middle" x="5020" y="-12024.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5138.39,-12009.82C5154.42,-12007.01 5170.64,-12004 5186,-12000.86 5195.75,-11998.87 5205.95,-11996.61 5216.04,-11994.27"/>
<polygon fill="blue" stroke="blue" points="5217.13,-11997.6 5226.06,-11991.9 5215.53,-11990.79 5217.13,-11997.6"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-12027.86C4310.62,-12027.86 4440.18,-12027.86 4537.15,-12027.86"/>
<polygon fill="blue" stroke="blue" points="4537.32,-12031.36 4547.32,-12027.86 4537.32,-12024.36 4537.32,-12031.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node295"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="3904,-11937.86 3650,-11937.86 3650,-11901.86 3904,-11901.86 3904,-11937.86"/>
<text text-anchor="middle" x="3777" y="-11916.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.25,-11919.86C4001.82,-11919.86 4130.29,-11919.86 4191.95,-11919.86"/>
<polygon fill="blue" stroke="blue" points="4191.96,-11923.36 4201.96,-11919.86 4191.96,-11916.36 4191.96,-11923.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.21,-11935.47C3934.9,-11939.23 3967.63,-11943.22 3998,-11946.86 4056.45,-11953.88 4123.28,-11961.7 4169.79,-11967.11"/>
<polygon fill="blue" stroke="blue" points="4169.64,-11970.62 4179.98,-11968.3 4170.45,-11963.67 4169.64,-11970.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.23,-11916.36C3930.8,-11920.96 3957.08,-11930.11 3978,-11946.86 3997.98,-11962.86 3977.88,-11985.04 3998,-12000.86 4053.94,-12044.86 4142.48,-12040.92 4191.8,-12034.3"/>
<polygon fill="blue" stroke="blue" points="4192.6,-12037.72 4201.99,-12032.82 4191.59,-12030.8 4192.6,-12037.72"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="edge645" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4766.8,-12011.59C4828.11,-12002.42 4902.6,-11991.28 4954.66,-11983.49"/>
<polygon fill="blue" stroke="blue" points="4955.39,-11986.92 4964.77,-11981.98 4954.36,-11979.99 4955.39,-11986.92"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node297"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="3843.5,-12045.86 3710.5,-12045.86 3710.5,-12009.86 3843.5,-12009.86 3843.5,-12045.86"/>
<text text-anchor="middle" x="3777" y="-12024.16" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge687" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.92,-12027.86C3940.01,-12027.86 4115.38,-12027.86 4191.32,-12027.86"/>
<polygon fill="blue" stroke="blue" points="4191.78,-12031.36 4201.78,-12027.86 4191.78,-12024.36 4191.78,-12031.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge841" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5299.23,-11955.85C5308.47,-11820.21 5366.96,-10944.73 5387.5,-10231.86 5388.41,-10200.35 5397.24,-5717.2 5416,-5691.86 5423.98,-5681.08 5436.24,-5674.49 5449.05,-5670.49"/>
<polygon fill="blue" stroke="blue" points="5450.1,-5673.83 5458.88,-5667.91 5448.32,-5667.06 5450.1,-5673.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node299"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3814.5,-5137.86 3739.5,-5137.86 3739.5,-5101.86 3814.5,-5101.86 3814.5,-5137.86"/>
<text text-anchor="middle" x="3777" y="-5116.16" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node300"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="4301,-5191.86 4157,-5191.86 4157,-5155.86 4301,-5155.86 4301,-5191.86"/>
<text text-anchor="middle" x="4229" y="-5170.16" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge610" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.58,-5124.41C3858.24,-5129.83 3933.43,-5139.11 3998,-5146.86 4047.35,-5152.79 4102.67,-5159.29 4146.69,-5164.42"/>
<polygon fill="blue" stroke="blue" points="4146.42,-5167.92 4156.76,-5165.6 4147.23,-5160.96 4146.42,-5167.92"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node301"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="4287.5,-5137.86 4170.5,-5137.86 4170.5,-5101.86 4287.5,-5101.86 4287.5,-5137.86"/>
<text text-anchor="middle" x="4229" y="-5116.16" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge611" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.83,-5119.86C3890.37,-5119.86 4063.85,-5119.86 4160.27,-5119.86"/>
<polygon fill="blue" stroke="blue" points="4160.49,-5123.36 4170.49,-5119.86 4160.49,-5116.36 4160.49,-5123.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node302"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="4746,-4969.86 4568,-4969.86 4568,-4933.86 4746,-4933.86 4746,-4969.86"/>
<text text-anchor="middle" x="4657" y="-4948.16" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge609" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3791.23,-5101.83C3826.93,-5052.28 3926.09,-4908.81 3978,-4774.86 3993.12,-4735.85 3965.42,-4709.12 3998,-4682.86 4157.87,-4554.01 4306.59,-4546.38 4460,-4682.86 4539.9,-4753.95 4414.68,-4844 4488,-4921.86 4506.1,-4941.09 4531.96,-4950.56 4557.98,-4954.74"/>
<polygon fill="blue" stroke="blue" points="4557.56,-4958.22 4567.94,-4956.1 4558.5,-4951.28 4557.56,-4958.22"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge693" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4256.27,-5191.88C4299.42,-5221.64 4387.7,-5283.33 4460,-5338.86 4472.77,-5348.67 4473.04,-5355.9 4488,-5361.86 4632.44,-5419.49 5077.09,-5300.86 5186,-5411.86 5215.69,-5442.12 5177.39,-5761.58 5206,-5792.86 5321.81,-5919.53 5446.2,-5915.01 5591,-5822.86 5622.87,-5802.58 5597.9,-5769.95 5627,-5745.86 5646.07,-5730.08 5673.2,-5723.37 5695.24,-5720.58"/>
<polygon fill="blue" stroke="blue" points="5695.7,-5724.06 5705.28,-5719.54 5694.97,-5717.09 5695.7,-5724.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node311" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node311"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="4702.5,-8184.86 4611.5,-8184.86 4611.5,-8148.86 4702.5,-8148.86 4702.5,-8184.86"/>
<text text-anchor="middle" x="4657" y="-8163.16" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge697" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4250.27,-5191.97C4298.01,-5236.13 4416.74,-5355.24 4460,-5483.86 4483.49,-5553.72 4440.39,-8080.61 4488,-8136.86 4514.94,-8168.7 4563.05,-8174.59 4600.9,-8173.45"/>
<polygon fill="blue" stroke="blue" points="4601.46,-8176.93 4611.28,-8172.96 4601.12,-8169.94 4601.46,-8176.93"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node312" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node312"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4737,-8400.86 4577,-8400.86 4577,-8364.86 4737,-8364.86 4737,-8400.86"/>
<text text-anchor="middle" x="4657" y="-8379.16" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge696" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4250.28,-5191.97C4298.03,-5236.13 4416.79,-5355.22 4460,-5483.86 4485.4,-5559.49 4435.96,-8295.39 4488,-8355.86 4507.31,-8378.3 4537.23,-8387.31 4566.51,-8389.96"/>
<polygon fill="blue" stroke="blue" points="4566.61,-8393.48 4576.82,-8390.65 4567.07,-8386.49 4566.61,-8393.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node315" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node315"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="4684,-8346.86 4630,-8346.86 4630,-8310.86 4684,-8310.86 4684,-8346.86"/>
<text text-anchor="middle" x="4657" y="-8325.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge695" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4250.27,-5191.97C4298.02,-5236.13 4416.78,-5355.22 4460,-5483.86 4484.93,-5558.07 4436.93,-8242.53 4488,-8301.86 4519.8,-8338.8 4580.39,-8339.34 4619.45,-8335.06"/>
<polygon fill="blue" stroke="blue" points="4620.37,-8338.47 4629.86,-8333.75 4619.5,-8331.53 4620.37,-8338.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node316" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node316"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4702.5,-8238.86 4611.5,-8238.86 4611.5,-8202.86 4702.5,-8202.86 4702.5,-8238.86"/>
<text text-anchor="middle" x="4657" y="-8217.16" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge692" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4250.27,-5191.97C4298.01,-5236.13 4416.75,-5355.23 4460,-5483.86 4483.99,-5555.22 4438.88,-8136.82 4488,-8193.86 4515.13,-8225.37 4563.22,-8230.4 4601.02,-8228.53"/>
<polygon fill="blue" stroke="blue" points="4601.63,-8232 4611.38,-8227.84 4601.17,-8225.01 4601.63,-8232"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node318" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node318"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="4696.5,-8292.86 4617.5,-8292.86 4617.5,-8256.86 4696.5,-8256.86 4696.5,-8292.86"/>
<text text-anchor="middle" x="4657" y="-8271.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge699" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4250.27,-5191.97C4298.02,-5236.13 4416.77,-5355.23 4460,-5483.86 4484.46,-5556.64 4437.91,-8189.67 4488,-8247.86 4516.66,-8281.16 4568.72,-8284.88 4607.31,-8282.15"/>
<polygon fill="blue" stroke="blue" points="4607.65,-8285.64 4617.31,-8281.29 4607.05,-8278.66 4607.65,-8285.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node320" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node320"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="4690,-8454.86 4624,-8454.86 4624,-8418.86 4690,-8418.86 4690,-8454.86"/>
<text text-anchor="middle" x="4657" y="-8433.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge694" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4250.28,-5191.97C4298.03,-5236.12 4416.8,-5355.22 4460,-5483.86 4485.87,-5560.92 4434.99,-8348.25 4488,-8409.86 4518.33,-8445.12 4574.89,-8447.22 4613.95,-8443.62"/>
<polygon fill="blue" stroke="blue" points="4614.41,-8447.09 4623.97,-8442.53 4613.65,-8440.13 4614.41,-8447.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node332" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node332"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="5547,-6304.86 5460,-6304.86 5460,-6268.86 5547,-6268.86 5547,-6304.86"/>
<text text-anchor="middle" x="5503.5" y="-6283.16" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge698" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4264.48,-5192.03C4312.95,-5218.9 4401.81,-5273.22 4460,-5338.86 4477.15,-5358.21 4466.51,-5375.48 4488,-5389.86 4617.69,-5476.7 5079.23,-5354.02 5186,-5467.86 5218.26,-5502.27 5175.41,-5855.97 5206,-5891.86 5259.46,-5954.59 5326.24,-5874.73 5387.5,-5929.86 5485.62,-6018.16 5500.45,-6190.47 5502.38,-6258.38"/>
<polygon fill="blue" stroke="blue" points="5498.89,-6258.79 5502.59,-6268.72 5505.89,-6258.65 5498.89,-6258.79"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge767" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.67,-5107.78C4340.88,-5100.38 4417.83,-5099.9 4460,-5146.86 4515.49,-5208.67 4434.38,-8073.43 4488,-8136.86 4514.92,-8168.72 4563.03,-8174.61 4600.89,-8173.46"/>
<polygon fill="blue" stroke="blue" points="4601.45,-8176.94 4611.27,-8172.97 4601.11,-8169.95 4601.45,-8176.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge768" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.67,-5107.78C4340.88,-5100.38 4417.83,-5099.89 4460,-5146.86 4516.54,-5209.85 4432.81,-8129.69 4488,-8193.86 4515.12,-8225.39 4563.21,-8230.41 4601.01,-8228.54"/>
<polygon fill="blue" stroke="blue" points="4601.63,-8232.01 4611.37,-8227.85 4601.16,-8225.02 4601.63,-8232.01"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge766" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.67,-5107.78C4340.88,-5100.38 4417.84,-5099.89 4460,-5146.86 4517.54,-5210.97 4431.83,-8182.55 4488,-8247.86 4516.64,-8281.17 4568.7,-8284.89 4607.3,-8282.16"/>
<polygon fill="blue" stroke="blue" points="4607.64,-8285.65 4617.3,-8281.29 4607.04,-8278.67 4607.64,-8285.65"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node303" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node303"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="5064,-5134.86 4976,-5134.86 4976,-5098.86 5064,-5098.86 5064,-5134.86"/>
<text text-anchor="middle" x="5020" y="-5113.16" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge614" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4727.1,-4969.94C4757.95,-4978.94 4794.38,-4990.91 4826,-5004.86 4883.58,-5030.28 4945.81,-5068.55 4983.6,-5093.12"/>
<polygon fill="blue" stroke="blue" points="4981.92,-5096.2 4992.2,-5098.75 4985.75,-5090.34 4981.92,-5096.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="node304" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<g id="a_node304"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a1 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a2 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_scalars(a1, a2) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5069.5,-5188.86 4970.5,-5188.86 4970.5,-5152.86 5069.5,-5152.86 5069.5,-5188.86"/>
<text text-anchor="middle" x="5020" y="-5167.16" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge613" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4713.19,-4969.88C4749.73,-4984.37 4796.22,-5008.1 4826,-5042.86 4857,-5079.05 4825.53,-5113.19 4862,-5143.86 4888.93,-5166.51 4927.87,-5173.32 4960.23,-5174.43"/>
<polygon fill="blue" stroke="blue" points="4960.43,-5177.94 4970.48,-5174.61 4960.55,-5170.94 4960.43,-5177.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5064.21,-5110.41C5102.29,-5107.43 5156.23,-5110.32 5186,-5143.86 5220.04,-5182.21 5170.52,-5567.85 5206,-5604.86 5265.43,-5666.85 5517.09,-5594.15 5591,-5637.86 5615.83,-5652.55 5603.46,-5675.2 5627,-5691.86 5646.98,-5706.01 5673.71,-5712.75 5695.34,-5715.97"/>
<polygon fill="blue" stroke="blue" points="5695.12,-5719.47 5705.49,-5717.28 5696.02,-5712.53 5695.12,-5719.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge722" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5069.64,-5172.5C5107.91,-5176.63 5159.13,-5189.07 5186,-5224.86 5226.11,-5278.3 5168.07,-5770.86 5206,-5825.86 5255.65,-5897.86 5329.03,-5836.83 5387.5,-5901.86 5482.46,-6007.49 5499.11,-6188.64 5501.95,-6258.36"/>
<polygon fill="blue" stroke="blue" points="5498.46,-6258.69 5502.3,-6268.56 5505.46,-6258.45 5498.46,-6258.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="node305" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<g id="a_node305"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CredentialPrivateKey::generate(randomness).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5336.5,-5515.86 5257.5,-5515.86 5257.5,-5479.86 5336.5,-5479.86 5336.5,-5515.86"/>
<text text-anchor="middle" x="5297" y="-5494.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="node307" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<g id="a_node307"><a xlink:title=" &#160;&#160;&#160;fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ShoHmacSha256::new(b&#39; Signal_ZKCredential_CredentialPrivateKey_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_an...">
<polygon fill="white" stroke="black" points="5543,-5542.86 5464,-5542.86 5464,-5506.86 5543,-5506.86 5543,-5542.86"/>
<text text-anchor="middle" x="5503.5" y="-5521.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5336.95,-5503.01C5370.07,-5507.38 5417.79,-5513.68 5453.5,-5518.39"/>
<polygon fill="blue" stroke="blue" points="5453.33,-5521.9 5463.7,-5519.74 5454.24,-5514.96 5453.33,-5521.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair(). -->
<g id="node306" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().</title>
<g id="a_node306"><a xlink:title=" &#160;&#160;&#160;fn round_trip_key_pair() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = CredentialKeyPair::generate([0x42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deserialized: Cr...">
<polygon fill="white" stroke="black" points="5096,-5515.86 4944,-5515.86 4944,-5479.86 5096,-5479.86 5096,-5515.86"/>
<text text-anchor="middle" x="5020" y="-5494.16" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5096.14,-5497.86C5144.23,-5497.86 5205.23,-5497.86 5247.11,-5497.86"/>
<polygon fill="blue" stroke="blue" points="5247.33,-5501.36 5257.33,-5497.86 5247.33,-5494.36 5247.33,-5501.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5480.41,-5542.95C5455.52,-5564.06 5417.38,-5601.53 5401.75,-5643.86 5383.35,-5693.69 5395.21,-5830.16 5401.75,-5882.86 5419.66,-6027.31 5472.29,-6194.3 5493.98,-6259.14"/>
<polygon fill="blue" stroke="blue" points="5490.68,-6260.29 5497.19,-6268.65 5497.31,-6258.05 5490.68,-6260.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node308" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node308"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="5080.5,-5569.86 4959.5,-5569.86 4959.5,-5533.86 5080.5,-5533.86 5080.5,-5569.86"/>
<text text-anchor="middle" x="5020" y="-5548.16" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge675" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5024.09,-5569.99C5035.58,-5631.42 5081.71,-5833.2 5206,-5929.86 5271.06,-5980.46 5325.3,-5913.79 5387.5,-5967.86 5476.15,-6044.92 5496.47,-6195.64 5501.12,-6258.39"/>
<polygon fill="blue" stroke="blue" points="5497.65,-6258.95 5501.8,-6268.7 5504.64,-6258.49 5497.65,-6258.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node309" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node309"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="5124.5,-8454.86 4915.5,-8454.86 4915.5,-8418.86 5124.5,-8418.86 5124.5,-8454.86"/>
<text text-anchor="middle" x="5020" y="-8433.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5034.28,-8418.71C5066.49,-8373.65 5148.84,-8251.98 5186,-8136.86 5444.63,-7335.79 5290.79,-7089.28 5416,-6256.86 5442.14,-6083.08 5482.18,-5875.79 5496.86,-5801.28"/>
<polygon fill="blue" stroke="blue" points="5500.33,-5801.75 5498.83,-5791.27 5493.46,-5800.4 5500.33,-5801.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node310" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node310"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4329,-8400.86 4129,-8400.86 4129,-8364.86 4329,-8364.86 4329,-8400.86"/>
<text text-anchor="middle" x="4229" y="-8379.16" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4329.07,-8382.86C4400.89,-8382.86 4497.18,-8382.86 4566.64,-8382.86"/>
<polygon fill="blue" stroke="blue" points="4566.69,-8386.36 4576.69,-8382.86 4566.69,-8379.36 4566.69,-8386.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4702.59,-8171.19C4872.82,-8186.57 5477.86,-8230.71 5591,-8092.86 5673.73,-7992.06 5546.19,-5848.21 5627,-5745.86 5642.89,-5725.74 5671.5,-5719.33 5695,-5717.77"/>
<polygon fill="blue" stroke="blue" points="5695.19,-5721.27 5705.04,-5717.37 5694.91,-5714.27 5695.19,-5721.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4702.69,-8176.2C4798.06,-8193.69 5025.85,-8222.4 5186,-8136.86 5317.14,-8066.83 5335.2,-8009.03 5387.5,-7869.86 5500.49,-7569.23 5503.06,-6503.56 5502.62,-6315.37"/>
<polygon fill="blue" stroke="blue" points="5506.12,-6315.17 5502.59,-6305.18 5499.12,-6315.19 5506.12,-6315.17"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4737.08,-8377.83C4768.28,-8379.99 4802.26,-8388.11 4826,-8409.86 4874.32,-8454.14 4810.31,-8512.57 4862,-8552.86 4975.57,-8641.39 5050.68,-8602.1 5186,-8552.86 5426.4,-8465.4 5501.09,-8383.36 5591,-8143.86 5637.83,-8019.13 5544.45,-5850.45 5627,-5745.86 5642.89,-5725.74 5671.5,-5719.33 5695,-5717.77"/>
<polygon fill="blue" stroke="blue" points="5695.19,-5721.26 5705.04,-5717.37 5694.9,-5714.27 5695.19,-5721.26"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node313" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node313"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="4327,-8292.86 4131,-8292.86 4131,-8256.86 4327,-8256.86 4327,-8292.86"/>
<text text-anchor="middle" x="4229" y="-8271.16" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.27,-8283.25C4371.25,-8282.34 4421.8,-8274.26 4460,-8247.86 4482.24,-8232.49 4466.09,-8209.7 4488,-8193.86 4520.47,-8170.39 4565.68,-8164.21 4601.03,-8163.59"/>
<polygon fill="blue" stroke="blue" points="4601.19,-8167.09 4611.18,-8163.56 4601.17,-8160.09 4601.19,-8167.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.27,-8266.48C4371.25,-8267.39 4421.8,-8275.47 4460,-8301.86 4482.24,-8317.23 4466.09,-8340.03 4488,-8355.86 4510.6,-8372.2 4539.38,-8380.16 4566.71,-8383.7"/>
<polygon fill="blue" stroke="blue" points="4566.37,-8387.18 4576.7,-8384.81 4567.14,-8380.23 4566.37,-8387.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.14,-8285.83C4368.16,-8290.57 4416.43,-8296.31 4460,-8301.86 4515.83,-8308.99 4580.49,-8318.05 4619.8,-8323.66"/>
<polygon fill="blue" stroke="blue" points="4619.31,-8327.12 4629.71,-8325.07 4620.3,-8320.19 4619.31,-8327.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.14,-8263.9C4368.16,-8259.15 4416.43,-8253.42 4460,-8247.86 4507.8,-8241.77 4562.07,-8234.24 4601.37,-8228.69"/>
<polygon fill="blue" stroke="blue" points="4601.86,-8232.15 4611.27,-8227.28 4600.88,-8225.22 4601.86,-8232.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.2,-8274.86C4414.49,-8274.86 4539.07,-8274.86 4607.08,-8274.86"/>
<polygon fill="blue" stroke="blue" points="4607.49,-8278.36 4617.49,-8274.86 4607.49,-8271.36 4607.49,-8278.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.27,-8262.76C4372.58,-8262.52 4424.24,-8270.69 4460,-8301.86 4497.38,-8334.45 4451.32,-8376.49 4488,-8409.86 4521.75,-8440.57 4575.94,-8444.05 4613.62,-8441.98"/>
<polygon fill="blue" stroke="blue" points="4614.04,-8445.46 4623.77,-8441.27 4613.55,-8438.48 4614.04,-8445.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327,-8289.65C4373.66,-8290.97 4426.57,-8282.93 4460,-8247.86 4522.4,-8182.4 4434.73,-7914.95 4488,-7841.86 4583.28,-7711.14 4682.24,-7781.02 4826,-7706.86 4995.17,-7619.6 5054.82,-7612.79 5186,-7474.86 5309.7,-7344.8 5329.44,-7294.71 5387.5,-7124.86 5491.51,-6820.58 5501.73,-6423.7 5502.51,-6315.28"/>
<polygon fill="blue" stroke="blue" points="5506.01,-6315.16 5502.56,-6305.14 5499.01,-6315.13 5506.01,-6315.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node314" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node314"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="4300.5,-8184.86 4157.5,-8184.86 4157.5,-8148.86 4300.5,-8148.86 4300.5,-8184.86"/>
<text text-anchor="middle" x="4229" y="-8163.16" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.82,-8166.86C4385.22,-8166.86 4524.43,-8166.86 4601.1,-8166.86"/>
<polygon fill="blue" stroke="blue" points="4601.49,-8170.36 4611.49,-8166.86 4601.49,-8163.36 4601.49,-8170.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.61,-8155.84C4350.91,-8152.14 4416.97,-8156.35 4460,-8193.86 4497.38,-8226.45 4451.32,-8268.49 4488,-8301.86 4523.65,-8334.3 4582.1,-8336.36 4619.81,-8333.58"/>
<polygon fill="blue" stroke="blue" points="4620.2,-8337.06 4629.86,-8332.69 4619.59,-8330.09 4620.2,-8337.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.51,-8174.77C4346.05,-8179.97 4406.56,-8187.05 4460,-8193.86 4507.8,-8199.96 4562.07,-8207.48 4601.37,-8213.04"/>
<polygon fill="blue" stroke="blue" points="4600.88,-8216.5 4611.27,-8214.44 4601.86,-8209.57 4600.88,-8216.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.61,-8158.75C4349.48,-8156.81 4413.78,-8161.92 4460,-8193.86 4482.24,-8209.23 4466.09,-8232.03 4488,-8247.86 4522.32,-8272.67 4570.88,-8278.16 4606.97,-8278.19"/>
<polygon fill="blue" stroke="blue" points="4607.32,-8281.69 4617.27,-8278.05 4607.23,-8274.69 4607.32,-8281.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.7,-8154.41C4351.89,-8149.75 4419.03,-8153.38 4460,-8193.86 4528.86,-8261.9 4420.6,-8340.38 4488,-8409.86 4519.96,-8442.81 4575.02,-8445.71 4613.36,-8442.9"/>
<polygon fill="blue" stroke="blue" points="4614.05,-8446.35 4623.7,-8441.97 4613.43,-8439.38 4614.05,-8446.35"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.59,-8179.01C4352.42,-8183.51 4420.42,-8179.38 4460,-8136.86 4532.81,-8058.66 4422.16,-7741.01 4488,-7656.86 4584.93,-7532.97 4704.73,-7652.05 4826,-7551.86 5264.77,-7189.4 5459.25,-6466.08 5495.95,-6314.94"/>
<polygon fill="blue" stroke="blue" points="5499.39,-6315.6 5498.32,-6305.06 5492.59,-6313.97 5499.39,-6315.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684,-8324.1C4721.65,-8318.88 4790.68,-8315.92 4826,-8355.86 4862.13,-8396.72 4855.87,-9282.67 4862,-9336.86 4897.66,-9651.95 4986.63,-10027.25 5012.09,-10131.07"/>
<polygon fill="blue" stroke="blue" points="5008.7,-10131.92 5014.49,-10140.8 5015.49,-10130.25 5008.7,-10131.92"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.26,-8327.18C4719.22,-8326.18 4781.75,-8328.84 4826,-8355.86 4849.06,-8369.95 4839.24,-8390.3 4862,-8404.86 4875.07,-8413.23 4889.9,-8419.46 4905.1,-8424.1"/>
<polygon fill="blue" stroke="blue" points="4904.55,-8427.59 4915.13,-8426.93 4906.45,-8420.85 4904.55,-8427.59"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4702.51,-8214.96C4740.55,-8212.6 4794.05,-8216.1 4826,-8247.86 4895.02,-8316.48 4787.74,-8400.96 4862,-8463.86 4971.87,-8556.94 5065.25,-8542.31 5186,-8463.86 5370.78,-8343.82 5334.57,-8224.76 5387.5,-8010.86 5471.83,-7670.06 5498.09,-6511.15 5501.97,-6315.14"/>
<polygon fill="blue" stroke="blue" points="5505.47,-6315.13 5502.17,-6305.06 5498.47,-6314.99 5505.47,-6315.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node317" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node317"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="4273,-8238.86 4185,-8238.86 4185,-8202.86 4273,-8202.86 4273,-8238.86"/>
<text text-anchor="middle" x="4229" y="-8217.16" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge525" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.27,-8216.05C4319.52,-8210.83 4394.99,-8202.16 4460,-8193.86 4507.8,-8187.77 4562.07,-8180.24 4601.37,-8174.69"/>
<polygon fill="blue" stroke="blue" points="4601.86,-8178.15 4611.27,-8173.28 4600.88,-8171.22 4601.86,-8178.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge522" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.44,-8212.69C4324.46,-8205.76 4408.63,-8203.08 4460,-8247.86 4497.38,-8280.45 4451.32,-8322.49 4488,-8355.86 4509.21,-8375.16 4538.49,-8383.71 4566.68,-8386.88"/>
<polygon fill="blue" stroke="blue" points="4566.72,-8390.4 4576.99,-8387.81 4567.35,-8383.43 4566.72,-8390.4"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge521" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.15,-8214.63C4322.74,-8209.84 4404.43,-8209.47 4460,-8247.86 4482.24,-8263.23 4466.09,-8286.03 4488,-8301.86 4526.57,-8329.74 4583.12,-8333.23 4619.76,-8331.98"/>
<polygon fill="blue" stroke="blue" points="4620.16,-8335.46 4629.98,-8331.49 4619.83,-8328.47 4620.16,-8335.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge526" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.19,-8220.86C4351.24,-8220.86 4515.63,-8220.86 4601.36,-8220.86"/>
<polygon fill="blue" stroke="blue" points="4601.42,-8224.36 4611.42,-8220.86 4601.42,-8217.36 4601.42,-8224.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge524" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.27,-8225.68C4319.52,-8230.89 4394.99,-8239.57 4460,-8247.86 4510.31,-8254.28 4567.78,-8262.28 4607.42,-8267.9"/>
<polygon fill="blue" stroke="blue" points="4606.96,-8271.37 4617.35,-8269.31 4607.95,-8264.43 4606.96,-8271.37"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge527" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.17,-8212.11C4324.73,-8204.4 4410.23,-8200.73 4460,-8247.86 4513.05,-8298.11 4436.03,-8358.5 4488,-8409.86 4520.65,-8442.13 4575.56,-8445.17 4613.68,-8442.58"/>
<polygon fill="blue" stroke="blue" points="4614.28,-8446.04 4623.95,-8441.72 4613.7,-8439.07 4614.28,-8446.04"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge523" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.11,-8230.32C4325.42,-8238.98 4412.5,-8243.85 4460,-8193.86 4525.2,-8125.25 4433.92,-7846.54 4488,-7768.86 4582.01,-7633.84 4685.66,-7703.74 4826,-7617.86 5001.25,-7510.63 5060.07,-7490.2 5186,-7327.86 5445.6,-6993.22 5493.25,-6446.22 5501.08,-6315.54"/>
<polygon fill="blue" stroke="blue" points="5504.6,-6315.38 5501.67,-6305.2 5497.61,-6314.98 5504.6,-6315.38"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge676" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.61,-8269.42C4734.8,-8266.39 4792.27,-8268.54 4826,-8301.86 4892.74,-8367.8 4790.23,-8449.44 4862,-8509.86 4972.16,-8602.6 5057.11,-8574.07 5186,-8509.86 5319.07,-8443.58 5336.16,-8382.38 5387.5,-8242.86 5422.35,-8148.15 5491.44,-6547.58 5501.31,-6314.96"/>
<polygon fill="blue" stroke="blue" points="5504.81,-6315.07 5501.74,-6304.93 5497.82,-6314.78 5504.81,-6315.07"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node319" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node319"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="4279.5,-8346.86 4178.5,-8346.86 4178.5,-8310.86 4279.5,-8310.86 4279.5,-8346.86"/>
<text text-anchor="middle" x="4229" y="-8325.16" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge742" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.92,-8337.87C4331.35,-8344.1 4410.75,-8344.79 4460,-8301.86 4497.38,-8269.28 4451.32,-8227.23 4488,-8193.86 4518.26,-8166.33 4564.94,-8160.69 4601.42,-8161.3"/>
<polygon fill="blue" stroke="blue" points="4601.31,-8164.8 4611.42,-8161.63 4601.54,-8157.81 4601.31,-8164.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge744" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.84,-8334.42C4326.45,-8339.69 4397.98,-8347.95 4460,-8355.86 4494.89,-8360.31 4533.23,-8365.52 4566.68,-8370.17"/>
<polygon fill="blue" stroke="blue" points="4566.51,-8373.68 4576.89,-8371.6 4567.47,-8366.75 4566.51,-8373.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge739" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.7,-8328.86C4366.48,-8328.86 4543.65,-8328.86 4619.84,-8328.86"/>
<polygon fill="blue" stroke="blue" points="4619.91,-8332.36 4629.91,-8328.86 4619.91,-8325.36 4619.91,-8332.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge741" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.51,-8335.67C4329.51,-8339.85 4406.75,-8338.66 4460,-8301.86 4482.24,-8286.49 4466.09,-8263.7 4488,-8247.86 4520.47,-8224.39 4565.68,-8218.21 4601.03,-8217.59"/>
<polygon fill="blue" stroke="blue" points="4601.19,-8221.09 4611.18,-8217.56 4601.17,-8214.09 4601.19,-8221.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge740" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.84,-8323.3C4326.45,-8318.04 4397.98,-8309.77 4460,-8301.86 4510.31,-8295.45 4567.78,-8287.45 4607.42,-8281.83"/>
<polygon fill="blue" stroke="blue" points="4607.95,-8285.29 4617.35,-8280.42 4606.96,-8278.36 4607.95,-8285.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge743" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.51,-8322.06C4329.51,-8317.87 4406.75,-8319.07 4460,-8355.86 4482.24,-8371.23 4466.09,-8394.03 4488,-8409.86 4524.39,-8436.17 4576.79,-8440.75 4613.36,-8440.14"/>
<polygon fill="blue" stroke="blue" points="4613.81,-8443.63 4623.7,-8439.82 4613.6,-8436.63 4613.81,-8443.63"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge738" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.74,-8339.01C4332.17,-8346.53 4413.48,-8348.59 4460,-8301.86 4499.13,-8262.56 4458.97,-8101.12 4488,-8053.86 4682.31,-7737.48 4920.96,-7854.88 5186,-7594.86 5299.08,-7483.93 5332.16,-7449.29 5387.5,-7300.86 5457.85,-7112.17 5493.94,-6459.02 5501.14,-6315.07"/>
<polygon fill="blue" stroke="blue" points="5504.65,-6315.04 5501.65,-6304.88 5497.66,-6314.69 5504.65,-6315.04"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge839" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4677.08,-8454.99C4768.11,-8541.66 5155.1,-8912.39 5186,-8979.86 5207.18,-9026.11 5201.38,-9157.21 5206,-9207.86 5239.26,-9572.65 5282.12,-10015.9 5293.26,-10130.67"/>
<polygon fill="blue" stroke="blue" points="5289.79,-10131.12 5294.24,-10140.74 5296.76,-10130.44 5289.79,-10131.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge838" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4690.04,-8436.86C4737.83,-8436.86 4830.18,-8436.86 4904.9,-8436.86"/>
<polygon fill="blue" stroke="blue" points="4905.32,-8440.36 4915.32,-8436.86 4905.32,-8433.36 4905.32,-8440.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node321" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node321"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="4685,-7339.86 4629,-7339.86 4629,-7303.86 4685,-7303.86 4685,-7339.86"/>
<text text-anchor="middle" x="4657" y="-7318.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4677.93,-7339.96C4760.49,-7416.41 5076.33,-7724.16 5186,-8053.86 5206.24,-8114.71 5202.42,-9143.84 5206,-9207.86 5226.44,-9573.6 5278.61,-10016.16 5292.54,-10130.72"/>
<polygon fill="blue" stroke="blue" points="5289.08,-10131.27 5293.76,-10140.77 5296.03,-10130.42 5289.08,-10131.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node322" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node322"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="4684,-7285.86 4630,-7285.86 4630,-7249.86 4684,-7249.86 4684,-7285.86"/>
<text text-anchor="middle" x="4657" y="-7264.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge615" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.1,-7263.01C4721.87,-7257.68 4791.06,-7254.58 4826,-7294.86 4863.17,-7337.72 4856.16,-9280.43 4862,-9336.86 4894.66,-9652.27 4985.75,-10027.35 5011.9,-10131.09"/>
<polygon fill="blue" stroke="blue" points="5008.51,-10131.97 5014.36,-10140.81 5015.3,-10130.26 5008.51,-10131.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge616" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4665.75,-7249.64C4693.63,-7183.11 4789.11,-6946.44 4826,-6740.86 4886.75,-6402.34 4792.42,-6304.68 4862,-5967.86 4893.56,-5815.06 4973.16,-5644.22 5005.26,-5579.08"/>
<polygon fill="blue" stroke="blue" points="5008.51,-5580.41 5009.82,-5569.9 5002.24,-5577.3 5008.51,-5580.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="node323" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<g id="a_node323"><a xlink:title=" &#160;&#160;&#160;fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y: sho.get_scalar(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5336.5,-6124.86 5257.5,-6124.86 5257.5,-6088.86 5336.5,-6088.86 5336.5,-6124.86"/>
<text text-anchor="middle" x="5297" y="-6103.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5318.73,-6125.11C5355.65,-6157.61 5432.8,-6225.51 5474.43,-6262.16"/>
<polygon fill="blue" stroke="blue" points="5472.2,-6264.85 5482.02,-6268.83 5476.82,-6259.6 5472.2,-6264.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node324" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node324"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="4685,-6177.86 4629,-6177.86 4629,-6141.86 4685,-6141.86 4685,-6177.86"/>
<text text-anchor="middle" x="4657" y="-6156.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.01,-6173.63C4719.16,-6191.55 4779.15,-6224.75 4826,-6259.86 5000.89,-6390.94 5097.98,-6394.81 5186,-6594.86 5215.23,-6661.3 5202.3,-9135.37 5206,-9207.86 5224.68,-9573.69 5278.12,-10016.19 5292.44,-10130.73"/>
<polygon fill="blue" stroke="blue" points="5288.98,-10131.29 5293.7,-10140.77 5295.93,-10130.42 5288.98,-10131.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair(). -->
<g id="node325" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().</title>
<g id="a_node325"><a xlink:title="fn round_trip_key_pair() { &#160;&#160;&#160;&#160;let key_pair = BlindingKeyPair::generate(&amp;mut poksho::ShoSha256::new(b&#39; test&#39; )); &#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;let deserialized: Blin...">
<polygon fill="white" stroke="black" points="4733,-6015.86 4581,-6015.86 4581,-5979.86 4733,-5979.86 4733,-6015.86"/>
<text text-anchor="middle" x="4657" y="-5994.16" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="node328" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<g id="a_node328"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BlindingPrivateKey::generate(sho).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5059.5,-6015.86 4980.5,-6015.86 4980.5,-5979.86 5059.5,-5979.86 5059.5,-6015.86"/>
<text text-anchor="middle" x="5020" y="-5994.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.24,-5997.86C4804.34,-5997.86 4908.94,-5997.86 4969.9,-5997.86"/>
<polygon fill="blue" stroke="blue" points="4970.03,-6001.36 4980.03,-5997.86 4970.03,-5994.36 4970.03,-6001.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node326" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node326"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="4684,-6123.86 4630,-6123.86 4630,-6087.86 4684,-6087.86 4684,-6123.86"/>
<text text-anchor="middle" x="4657" y="-6102.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.13,-6100.98C4721.95,-6095.62 4791.19,-6092.47 4826,-6132.86 4855.05,-6166.57 4857.56,-9292.58 4862,-9336.86 4893.65,-9652.38 4985.45,-10027.38 5011.83,-10131.1"/>
<polygon fill="blue" stroke="blue" points="5008.45,-10131.99 5014.31,-10140.81 5015.23,-10130.26 5008.45,-10131.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.16,-6109.4C4720.44,-6112.76 4786.06,-6113.07 4826,-6078.86 4865.39,-6045.13 4844.84,-6016.8 4862,-5967.86 4913.75,-5820.28 4981.92,-5645.74 5008.11,-5579.35"/>
<polygon fill="blue" stroke="blue" points="5011.39,-5580.58 5011.8,-5570 5004.88,-5578.01 5011.39,-5580.58"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.15,-6103.89C4719.25,-6102.54 4782.26,-6104.76 4826,-6132.86 4850.27,-6148.45 4837.7,-6171.33 4862,-6186.86 4959.61,-6249.27 5314.5,-6275.98 5449.7,-6284.04"/>
<polygon fill="blue" stroke="blue" points="5449.62,-6287.54 5459.81,-6284.63 5450.03,-6280.56 5449.62,-6287.54"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="node327" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<g id="a_node327"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn Attribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedAttribute&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The points in a regular verifiably encrypted attribute ...">
<polygon fill="white" stroke="black" points="4692,-6069.86 4622,-6069.86 4622,-6033.86 4692,-6033.86 4692,-6069.86"/>
<text text-anchor="middle" x="4657" y="-6048.16" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="node329" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<g id="a_node329"><a xlink:title=" &#160;&#160;&#160;pub fn blind( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn RevealedAttribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedPoint&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is technically something you can do with just th...">
<polygon fill="white" stroke="black" points="5047,-6177.86 4993,-6177.86 4993,-6141.86 5047,-6141.86 5047,-6177.86"/>
<text text-anchor="middle" x="5020" y="-6156.16" font-family="Helvetica,sans-Serif" font-size="14.00">blind</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge586" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4692.31,-6054.96C4726.63,-6058.62 4780.7,-6065.92 4826,-6078.86 4883.01,-6095.16 4945.76,-6123.59 4983.76,-6142.06"/>
<polygon fill="blue" stroke="blue" points="4982.35,-6145.27 4992.87,-6146.53 4985.44,-6138.99 4982.35,-6145.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="edge644" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5059.53,-6013.13C5108.79,-6032.66 5194.11,-6066.48 5247.67,-6087.71"/>
<polygon fill="blue" stroke="blue" points="5246.7,-6091.09 5257.29,-6091.52 5249.28,-6084.58 5246.7,-6091.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge677" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5047.13,-6164.29C5107.71,-6174.86 5262.17,-6203.57 5387.5,-6241.86 5408.82,-6248.38 5431.79,-6257.02 5451.56,-6265"/>
<polygon fill="blue" stroke="blue" points="5450.4,-6268.3 5460.99,-6268.84 5453.05,-6261.82 5450.4,-6268.3"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node330" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node330"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4685,-6307.86 4629,-6307.86 4629,-6271.86 4685,-6271.86 4685,-6307.86"/>
<text text-anchor="middle" x="4657" y="-6286.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.09,-6285.34C4722.47,-6280.81 4789.39,-6279.12 4826,-6316.86 4869.37,-6361.58 4847.84,-6534.2 4862,-6594.86 4963.05,-7027.64 5110.38,-7102.92 5186,-7540.86 5217.52,-7723.4 5196.15,-9022.89 5206,-9207.86 5225.47,-9573.65 5278.34,-10016.18 5292.48,-10130.72"/>
<polygon fill="blue" stroke="blue" points="5289.02,-10131.28 5293.73,-10140.77 5295.97,-10130.42 5289.02,-10131.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node331" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node331"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="4691.5,-6361.86 4622.5,-6361.86 4622.5,-6325.86 4691.5,-6325.86 4691.5,-6361.86"/>
<text text-anchor="middle" x="4657" y="-6340.16" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge593" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4691.65,-6352.6C4731.74,-6365.01 4796.93,-6391.97 4826,-6441.86 4866.49,-6511.35 4853.92,-9256.85 4862,-9336.86 4893.84,-9652.36 4985.5,-10027.37 5011.84,-10131.1"/>
<polygon fill="blue" stroke="blue" points="5008.46,-10131.99 5014.32,-10140.81 5015.24,-10130.26 5008.46,-10131.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge594" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4691.63,-6341.59C4821.53,-6332.83 5291.21,-6301.12 5449.79,-6290.42"/>
<polygon fill="blue" stroke="blue" points="5450.03,-6293.91 5459.77,-6289.75 5449.56,-6286.93 5450.03,-6293.91"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge663" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5512.63,-6268.57C5546.92,-6191.44 5679.81,-5892.52 5720.85,-5800.19"/>
<polygon fill="blue" stroke="blue" points="5724.1,-5801.5 5724.97,-5790.94 5717.7,-5798.65 5724.1,-5801.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node333" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node333"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2639.5,-10491.86 2564.5,-10491.86 2564.5,-10455.86 2639.5,-10455.86 2639.5,-10491.86"/>
<text text-anchor="middle" x="2602" y="-10470.16" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="node334" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<g id="a_node334"><a xlink:title="fn bench_server_param_serialization(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;&#160;let serialized_secret_params = zkgroup::seri...">
<polygon fill="white" stroke="black" points="3384,-10491.86 3132,-10491.86 3132,-10455.86 3384,-10455.86 3384,-10491.86"/>
<text text-anchor="middle" x="3258" y="-10470.16" font-family="Helvetica,sans-Serif" font-size="14.00">bench_server_param_serialization</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.56,-10473.86C2730.15,-10473.86 2968.69,-10473.86 3121.36,-10473.86"/>
<polygon fill="blue" stroke="blue" points="3121.75,-10477.36 3131.75,-10473.86 3121.75,-10470.36 3121.75,-10477.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node335" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node335"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="3372,-5700.86 3144,-5700.86 3144,-5664.86 3372,-5664.86 3372,-5700.86"/>
<text text-anchor="middle" x="3258" y="-5679.16" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2603.03,-10455.41C2603.74,-10148.54 2619.57,-6112.69 2960,-5735.86 3002.91,-5688.37 3072.52,-5674.14 3133.57,-5672.24"/>
<polygon fill="blue" stroke="blue" points="3133.76,-5675.74 3143.68,-5672.04 3133.61,-5668.74 3133.76,-5675.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node336" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node336"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="3403,-5646.86 3113,-5646.86 3113,-5610.86 3403,-5610.86 3403,-5646.86"/>
<text text-anchor="middle" x="3258" y="-5625.16" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2602.94,-10455.51C2602.1,-10146.08 2597.76,-6024.2 2960,-5655.86 3012.49,-5602.49 3100.42,-5600.79 3167.02,-5609.42"/>
<polygon fill="blue" stroke="blue" points="3166.71,-5612.92 3177.1,-5610.83 3167.68,-5605.98 3166.71,-5612.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node337" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node337"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="3366,-5592.86 3150,-5592.86 3150,-5556.86 3366,-5556.86 3366,-5592.86"/>
<text text-anchor="middle" x="3258" y="-5571.16" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2602.93,-10455.77C2601.82,-10146.65 2593.69,-5974.65 2960,-5601.86 3012.47,-5548.47 3100.4,-5546.77 3167,-5555.41"/>
<polygon fill="blue" stroke="blue" points="3166.7,-5558.9 3177.09,-5556.82 3167.67,-5551.97 3166.7,-5558.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge576" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3384.15,-10488.39C3494.55,-10501.2 3649.63,-10519.2 3727.44,-10528.23"/>
<polygon fill="blue" stroke="blue" points="3727.11,-10531.71 3737.44,-10529.39 3727.91,-10524.76 3727.11,-10531.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.31,-5677.98C3432.76,-5675.61 3508.41,-5673.04 3576,-5671.86 3754.64,-5668.76 3834.95,-5564.82 3978,-5671.86 4003.22,-5690.74 3973.57,-5719.97 3998,-5739.86 4077.88,-5804.91 4388.51,-5703.69 4460,-5777.86 4507.78,-5827.44 4449.24,-6339.97 4488,-6396.86 4505.21,-6422.12 4533.02,-6438.98 4561.11,-6450.18"/>
<polygon fill="blue" stroke="blue" points="4560.04,-6453.52 4570.63,-6453.77 4562.51,-6446.97 4560.04,-6453.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.19,-5671.17C3436.09,-5671.35 3511.78,-5684.26 3556,-5735.86 3587.5,-5772.61 3543.73,-6570.79 3576,-6606.86 3604.81,-6639.07 3652.28,-6646.51 3693.74,-6645.57"/>
<polygon fill="blue" stroke="blue" points="3694.01,-6649.07 3703.86,-6645.18 3693.73,-6642.07 3694.01,-6649.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.21,-5671.15C3436.12,-5671.32 3511.81,-5684.23 3556,-5735.86 3589.42,-5774.91 3541.76,-6622.53 3576,-6660.86 3604.25,-6692.49 3650.49,-6700.24 3691.39,-6699.63"/>
<polygon fill="blue" stroke="blue" points="3691.5,-6703.13 3701.39,-6699.32 3691.28,-6696.14 3691.5,-6703.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.14,-5695.99C3471.47,-5707.52 3613.24,-5723.97 3699.7,-5734.01"/>
<polygon fill="blue" stroke="blue" points="3699.36,-5737.49 3709.7,-5735.17 3700.17,-5730.54 3699.36,-5737.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.17,-5670.87C3436.28,-5670.89 3512.18,-5683.75 3556,-5735.86 3600.57,-5788.88 3530.31,-10670.8 3576,-10722.86 3588.94,-10737.61 3605.79,-10747.19 3624.21,-10753.17"/>
<polygon fill="blue" stroke="blue" points="3623.4,-10756.58 3633.98,-10755.98 3625.33,-10749.85 3623.4,-10756.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node391" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node391"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="4413.5,-10281.86 4044.5,-10281.86 4044.5,-10245.86 4413.5,-10245.86 4413.5,-10281.86"/>
<text text-anchor="middle" x="4229" y="-10260.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.17,-5679.23C3564.17,-5674.26 3937.02,-5670.32 3978,-5712.86 4021.57,-5758.08 3956.47,-10186.77 3998,-10233.86 4008.43,-10245.69 4021.06,-10254.6 4034.96,-10261.22"/>
<polygon fill="blue" stroke="blue" points="4033.7,-10264.48 4044.27,-10265.23 4036.48,-10258.06 4033.7,-10264.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.17,-5670.87C3436.27,-5670.9 3512.18,-5683.75 3556,-5735.86 3598.65,-5786.58 3532.29,-10457.06 3576,-10506.86 3612.64,-10548.6 3680.58,-10549 3727.02,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.69 3737.16,-10541.86 3726.78,-10539.76 3727.73,-10546.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.17,-5670.87C3436.28,-5670.89 3512.18,-5683.75 3556,-5735.86 3599.61,-5787.73 3531.3,-10563.93 3576,-10614.86 3590.53,-10631.42 3609.99,-10641.47 3631.07,-10647.22"/>
<polygon fill="blue" stroke="blue" points="3630.32,-10650.64 3640.87,-10649.56 3631.95,-10643.83 3630.32,-10650.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.17,-5670.87C3436.28,-5670.89 3512.18,-5683.75 3556,-5735.86 3600.09,-5788.3 3530.81,-10617.37 3576,-10668.86 3583.27,-10677.14 3591.77,-10683.8 3601.09,-10689.1"/>
<polygon fill="blue" stroke="blue" points="3599.77,-10692.35 3610.26,-10693.78 3602.95,-10686.12 3599.77,-10692.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.17,-5670.87C3436.27,-5670.9 3512.18,-5683.75 3556,-5735.86 3599.13,-5787.15 3531.79,-10510.5 3576,-10560.86 3578.06,-10563.21 3580.22,-10565.42 3582.46,-10567.51"/>
<polygon fill="blue" stroke="blue" points="3580.51,-10570.44 3590.43,-10574.15 3584.99,-10565.06 3580.51,-10570.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge633" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3403.24,-5618.17C3693.21,-5600.29 4330.17,-5580.53 4460,-5739.86 4506.15,-5796.51 4446.94,-6336.43 4488,-6396.86 4505.17,-6422.14 4532.98,-6439 4561.07,-6450.21"/>
<polygon fill="blue" stroke="blue" points="4560,-6453.54 4570.59,-6453.79 4562.47,-6446.99 4560,-6453.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge636" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-5610.84C3402.69,-5599.4 3501.24,-5596.31 3556,-5655.86 3611.37,-5716.08 3521.95,-8539.45 3576,-8600.86 3600.17,-8628.33 3637.91,-8637.88 3674.11,-8639.56"/>
<polygon fill="blue" stroke="blue" points="3674.18,-8643.07 3684.27,-8639.84 3674.37,-8636.07 3674.18,-8643.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge630" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.46,-5610.84C3402.9,-5599.48 3501.2,-5596.53 3556,-5655.86 3572.71,-5673.95 3573.63,-7404.35 3576,-7428.86 3617.33,-7856.76 3738.67,-8368.03 3769.04,-8491.86"/>
<polygon fill="blue" stroke="blue" points="3765.68,-8492.82 3771.46,-8501.69 3772.47,-8491.15 3765.68,-8492.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge631" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.19,-5610.84C3402.69,-5599.4 3501.24,-5596.31 3556,-5655.86 3610.36,-5714.98 3522.94,-8486.58 3576,-8546.86 3616.16,-8592.49 3693.74,-8588.68 3739.58,-8581.48"/>
<polygon fill="blue" stroke="blue" points="3740.41,-8584.89 3749.68,-8579.75 3739.23,-8577.99 3740.41,-8584.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node384" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node384"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="3928,-8807.86 3626,-8807.86 3626,-8771.86 3928,-8771.86 3928,-8807.86"/>
<text text-anchor="middle" x="3777" y="-8786.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge635" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-5610.84C3402.7,-5599.39 3501.25,-5596.3 3556,-5655.86 3614.41,-5719.41 3518.99,-8698.06 3576,-8762.86 3587.02,-8775.39 3600.86,-8784.19 3616.09,-8790.22"/>
<polygon fill="blue" stroke="blue" points="3615.14,-8793.59 3625.74,-8793.62 3617.47,-8786.99 3615.14,-8793.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge634" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-5610.84C3402.69,-5599.39 3501.25,-5596.3 3556,-5655.86 3613.39,-5718.3 3519.98,-8645.19 3576,-8708.86 3600.01,-8736.15 3637.41,-8745.76 3673.4,-8747.53"/>
<polygon fill="blue" stroke="blue" points="3673.4,-8751.03 3683.5,-8747.83 3673.61,-8744.04 3673.4,-8751.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge632" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.23,-5610.81C3402.75,-5599.34 3501.32,-5596.24 3556,-5655.86 3601.54,-5705.52 3531.56,-10456.23 3576,-10506.86 3612.64,-10548.6 3680.58,-10549.01 3727.02,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.69 3737.16,-10541.86 3726.78,-10539.76 3727.73,-10546.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node341" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node341"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3805,-7177.86 3749,-7177.86 3749,-7141.86 3805,-7141.86 3805,-7177.86"/>
<text text-anchor="middle" x="3777" y="-7156.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge849" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.77,-5556.81C3403.17,-5545.51 3501.23,-5542.67 3556,-5601.86 3613.66,-5664.18 3520.18,-7065.9 3576,-7129.86 3615.84,-7175.51 3692.84,-7173.25 3738.8,-7166.93"/>
<polygon fill="blue" stroke="blue" points="3739.58,-7170.35 3748.95,-7165.4 3738.54,-7163.43 3739.58,-7170.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node346" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node346"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="3811.5,-7231.86 3742.5,-7231.86 3742.5,-7195.86 3811.5,-7195.86 3811.5,-7231.86"/>
<text text-anchor="middle" x="3777" y="-7210.16" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge855" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.45,-5556.86C3402.87,-5545.51 3501.16,-5542.57 3556,-5601.86 3585.9,-5634.19 3546.81,-7153.89 3576,-7186.86 3614.22,-7230.03 3685.94,-7228.86 3732.3,-7222.51"/>
<polygon fill="blue" stroke="blue" points="3732.99,-7225.95 3742.36,-7221 3731.95,-7219.03 3732.99,-7225.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge851" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.46,-5556.85C3402.89,-5545.49 3501.18,-5542.54 3556,-5601.86 3587.92,-5636.4 3544.84,-7259.64 3576,-7294.86 3606.8,-7329.68 3659.39,-7335.66 3702.91,-7333.34"/>
<polygon fill="blue" stroke="blue" points="3703.16,-7336.84 3712.9,-7332.66 3702.69,-7329.85 3703.16,-7336.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node348" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node348"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="3810,-7393.86 3744,-7393.86 3744,-7357.86 3810,-7357.86 3810,-7393.86"/>
<text text-anchor="middle" x="3777" y="-7372.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge852" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.46,-5556.85C3402.9,-5545.49 3501.19,-5542.53 3556,-5601.86 3588.93,-5637.51 3543.85,-7312.51 3576,-7348.86 3614.62,-7392.54 3687.55,-7390.84 3733.85,-7384.31"/>
<polygon fill="blue" stroke="blue" points="3734.53,-7387.74 3743.88,-7382.76 3733.46,-7380.82 3734.53,-7387.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge850" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.24,-5569.74C3646.32,-5557.49 4383.44,-5532.86 4460,-5608.86 4522.17,-5670.59 4439.02,-6324.22 4488,-6396.86 4505.09,-6422.2 4532.87,-6439.08 4560.97,-6450.28"/>
<polygon fill="blue" stroke="blue" points="4559.9,-6453.62 4570.49,-6453.86 4562.36,-6447.06 4559.9,-6453.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge854" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.01,-5556.84C3403.33,-5545.65 3501.12,-5542.96 3556,-5601.86 3594.07,-5642.72 3538.83,-6565.18 3576,-6606.86 3604.76,-6639.11 3652.23,-6646.56 3693.7,-6645.61"/>
<polygon fill="blue" stroke="blue" points="3693.97,-6649.1 3703.83,-6645.21 3693.7,-6642.11 3693.97,-6649.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge853" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.23,-5556.81C3402.75,-5545.34 3501.33,-5542.24 3556,-5601.86 3602.04,-5652.07 3531.06,-10455.66 3576,-10506.86 3612.64,-10548.6 3680.58,-10549.01 3727.02,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.69 3737.16,-10541.86 3726.78,-10539.76 3727.73,-10546.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3743.78,-8880.06C3691.74,-8889.15 3594.04,-8896.82 3566,-8833.86 3550.86,-8799.86 3562.55,-8535.93 3566,-8498.86 3607.11,-8057.43 3737.25,-7530.87 3769.64,-7404.24"/>
<polygon fill="blue" stroke="blue" points="3773.12,-7404.76 3772.22,-7394.2 3766.34,-7403.02 3773.12,-7404.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge627" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3742.49,-8934.82C3690.12,-8944.64 3593.74,-8953.16 3566,-8890.86 3556.73,-8870.04 3556.73,-7270.68 3566,-7249.86 3592.06,-7191.34 3678.71,-7195.31 3732.52,-7204.15"/>
<polygon fill="blue" stroke="blue" points="3732.04,-7207.62 3742.49,-7205.9 3733.25,-7200.72 3732.04,-7207.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node340" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node340"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4321.5,-7285.86 4136.5,-7285.86 4136.5,-7249.86 4321.5,-7249.86 4321.5,-7285.86"/>
<text text-anchor="middle" x="4229" y="-7264.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4321.65,-7267.86C4414.77,-7267.86 4554.32,-7267.86 4619.73,-7267.86"/>
<polygon fill="blue" stroke="blue" points="4619.95,-7271.36 4629.95,-7267.86 4619.95,-7264.36 4619.95,-7271.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node344" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node344"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="4285.5,-7177.86 4172.5,-7177.86 4172.5,-7141.86 4285.5,-7141.86 4285.5,-7177.86"/>
<text text-anchor="middle" x="4229" y="-7156.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.14,-7159.86C3874.85,-7159.86 4061.8,-7159.86 4162.16,-7159.86"/>
<polygon fill="blue" stroke="blue" points="4162.19,-7163.36 4172.19,-7159.86 4162.19,-7156.36 4162.19,-7163.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node342" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node342"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="4292,-7231.86 4166,-7231.86 4166,-7195.86 4292,-7195.86 4292,-7231.86"/>
<text text-anchor="middle" x="4229" y="-7210.16" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4292.25,-7226.31C4344.98,-7232.86 4418.47,-7231.83 4460,-7186.86 4516.21,-7126.01 4445.4,-6512.91 4488,-6441.86 4515.35,-6396.25 4572.65,-6369.67 4612.68,-6355.96"/>
<polygon fill="blue" stroke="blue" points="4613.8,-6359.28 4622.21,-6352.83 4611.61,-6352.63 4613.8,-6359.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node343" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node343"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="4290.5,-7339.86 4167.5,-7339.86 4167.5,-7303.86 4290.5,-7303.86 4290.5,-7339.86"/>
<text text-anchor="middle" x="4229" y="-7318.16" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4290.58,-7321.86C4380.13,-7321.86 4545.15,-7321.86 4618.81,-7321.86"/>
<polygon fill="blue" stroke="blue" points="4618.99,-7325.36 4628.99,-7321.86 4618.99,-7318.36 4618.99,-7325.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4285.75,-7147.79C4340.5,-7132.7 4421.28,-7101.04 4460,-7039.86 4503,-6971.93 4434.68,-6377.03 4488,-6316.86 4519.97,-6280.79 4579.43,-6279.73 4618.35,-6283.71"/>
<polygon fill="blue" stroke="blue" points="4618.4,-6287.24 4628.75,-6284.94 4619.23,-6280.29 4618.4,-6287.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node345" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node345"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="3861,-7285.86 3693,-7285.86 3693,-7249.86 3861,-7249.86 3861,-7285.86"/>
<text text-anchor="middle" x="3777" y="-7264.16" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861,-7257.15C3901.72,-7256.75 3948.28,-7264.38 3978,-7294.86 4006.56,-7324.15 3967.54,-7450.55 3998,-7477.86 4066.64,-7539.41 4756.33,-7484.25 4826,-7423.86 5250.29,-7056.09 5095.56,-6767.03 5186,-6212.86 5206.7,-6086.02 5167.05,-5757.34 5206,-5634.86 5219.62,-5592.04 5250.68,-5549.92 5272.48,-5523.93"/>
<polygon fill="blue" stroke="blue" points="5275.36,-5525.95 5279.2,-5516.08 5270.04,-5521.4 5275.36,-5525.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-7267.86C3935.83,-7267.86 4045.94,-7267.86 4126.02,-7267.86"/>
<polygon fill="blue" stroke="blue" points="4126.13,-7271.36 4136.13,-7267.86 4126.13,-7264.36 4126.13,-7271.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.04,-7257.57C3902.23,-7252.49 3952.73,-7246.3 3998,-7240.86 4050.7,-7234.54 4110.21,-7227.55 4155.49,-7222.28"/>
<polygon fill="blue" stroke="blue" points="4155.99,-7225.74 4165.51,-7221.11 4155.18,-7218.79 4155.99,-7225.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.04,-7278.16C3902.23,-7283.24 3952.73,-7289.43 3998,-7294.86 4051.44,-7301.28 4111.89,-7308.37 4157.4,-7313.67"/>
<polygon fill="blue" stroke="blue" points="4157.12,-7317.16 4167.46,-7314.84 4157.93,-7310.21 4157.12,-7317.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-7275.32C3900.33,-7274.52 3945.59,-7266.81 3978,-7240.86 3997.98,-7224.87 3977.88,-7202.69 3998,-7186.86 4043.97,-7150.7 4111.97,-7146.92 4162.11,-7150.4"/>
<polygon fill="blue" stroke="blue" points="4161.96,-7153.9 4172.21,-7151.21 4162.52,-7146.92 4161.96,-7153.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.13,-7279.4C3902.27,-7280.12 3949.17,-7272.54 3978,-7240.86 4015.42,-7199.74 3977.7,-6792.63 3998,-6740.86 4040.05,-6633.62 4143.86,-6539.19 4196.42,-6496.32"/>
<polygon fill="blue" stroke="blue" points="4198.81,-6498.89 4204.4,-6489.89 4194.42,-6493.44 4198.81,-6498.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.82,-7213.86C3884.57,-7213.86 4057.28,-7213.86 4155.82,-7213.86"/>
<polygon fill="blue" stroke="blue" points="4156,-7217.36 4166,-7213.86 4156,-7210.36 4156,-7217.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge658" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.05,-7314.04C3885.03,-7308.6 3945.08,-7301.22 3998,-7294.86 4040.04,-7289.82 4086.42,-7284.35 4126.45,-7279.67"/>
<polygon fill="blue" stroke="blue" points="4126.96,-7283.13 4136.49,-7278.49 4126.15,-7276.18 4126.96,-7283.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge798" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3810,-7372.02C3882.02,-7363.38 4058.28,-7342.23 4157.38,-7330.34"/>
<polygon fill="blue" stroke="blue" points="4157.79,-7333.81 4167.31,-7329.15 4156.96,-7326.86 4157.79,-7333.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node349" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node349"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="3391,-6189.86 3125,-6189.86 3125,-6153.86 3391,-6153.86 3391,-6189.86"/>
<text text-anchor="middle" x="3258" y="-6168.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node350" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node350"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="3854,-6009.86 3700,-6009.86 3700,-5973.86 3854,-5973.86 3854,-6009.86"/>
<text text-anchor="middle" x="3777" y="-5988.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3354.01,-6189.88C3419.12,-6196.38 3502.97,-6192.35 3556,-6142.86 3595.21,-6106.27 3537.93,-6061.64 3576,-6023.86 3605.39,-5994.7 3650.06,-5985.6 3689.73,-5984.27"/>
<polygon fill="blue" stroke="blue" points="3690.03,-5987.76 3699.96,-5984.09 3689.9,-5980.76 3690.03,-5987.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="node352" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<g id="a_node352"><a xlink:title=" &#160;&#160;&#160;fn server_secret_params() &#45;&gt; GenericServerSecretParams { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GenericServerSecretParams::generate(SERVER_SECRET_RAND) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4313.5,-5990.86 4144.5,-5990.86 4144.5,-5954.86 4313.5,-5954.86 4313.5,-5990.86"/>
<text text-anchor="middle" x="4229" y="-5969.16" font-family="Helvetica,sans-Serif" font-size="14.00">server_secret_params</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3357.86,-6189.88C3422.17,-6195.62 3503.54,-6190.67 3556,-6142.86 3590.79,-6111.16 3540.47,-6069.73 3576,-6038.86 3609.76,-6009.53 3933.58,-6024.03 3978,-6018.86 4030.49,-6012.76 4088.56,-6002.3 4135.52,-5992.9"/>
<polygon fill="blue" stroke="blue" points="4136.26,-5996.32 4145.37,-5990.91 4134.87,-5989.46 4136.26,-5996.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.13,-6186.18C3503.43,-6198.34 3657.92,-6215.07 3732.38,-6223.14"/>
<polygon fill="blue" stroke="blue" points="3732.03,-6226.62 3742.35,-6224.22 3732.78,-6219.66 3732.03,-6226.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.13,-6172.37C3506.67,-6172.82 3666.87,-6173.44 3738.63,-6173.72"/>
<polygon fill="blue" stroke="blue" points="3738.95,-6177.22 3748.96,-6173.76 3738.97,-6170.22 3738.95,-6177.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.08,-5988.65C3931.31,-5985.39 4051.02,-5980.34 4134.1,-5976.83"/>
<polygon fill="blue" stroke="blue" points="4134.46,-5980.32 4144.3,-5976.4 4134.16,-5973.32 4134.46,-5980.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.08,-6004.37C3952.02,-6020.48 4118.28,-6047.82 4191.52,-6059.86"/>
<polygon fill="blue" stroke="blue" points="4191.19,-6063.36 4201.63,-6061.53 4192.33,-6056.45 4191.19,-6063.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.37,-5990.58C3896.5,-5994.07 3946.5,-6005.82 3978,-6038.86 4011.69,-6074.19 3962.36,-6113.51 3998,-6146.86 4050.34,-6195.85 4141.36,-6189.69 4191.78,-6181.45"/>
<polygon fill="blue" stroke="blue" points="4192.64,-6184.85 4201.89,-6179.67 4191.44,-6177.95 4192.64,-6184.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.28,-5992.9C3895.34,-5997.26 3944.31,-6009.11 3978,-6038.86 3997.18,-6055.81 3977.88,-6077.04 3998,-6092.86 4051.69,-6135.1 4135.43,-6133.16 4185.68,-6127.08"/>
<polygon fill="blue" stroke="blue" points="4186.42,-6130.52 4195.87,-6125.74 4185.5,-6123.58 4186.42,-6130.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node351" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node351"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="3935.5,-6083.86 3618.5,-6083.86 3618.5,-6047.86 3935.5,-6047.86 3935.5,-6083.86"/>
<text text-anchor="middle" x="3777" y="-6062.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3900.71,-6047.83C3926.32,-6043.62 3953.1,-6038.89 3978,-6033.86 4036.18,-6022.13 4101.3,-6006.15 4150.49,-5993.49"/>
<polygon fill="blue" stroke="blue" points="4151.62,-5996.81 4160.42,-5990.92 4149.86,-5990.03 4151.62,-5996.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.7,-6065.86C4027.81,-6065.86 4136.5,-6065.86 4191.77,-6065.86"/>
<polygon fill="blue" stroke="blue" points="4191.77,-6069.36 4201.77,-6065.86 4191.77,-6062.36 4191.77,-6069.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.55,-6070.23C3950.9,-6075.46 3965.42,-6082.79 3978,-6092.86 3997.98,-6108.86 3977.88,-6131.04 3998,-6146.86 4053.94,-6190.86 4142.48,-6186.92 4191.8,-6180.3"/>
<polygon fill="blue" stroke="blue" points="4192.6,-6183.72 4201.99,-6178.82 4191.59,-6176.8 4192.6,-6183.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3923.84,-6083.87C3948.59,-6086.9 3974.03,-6089.98 3998,-6092.86 4063.55,-6100.73 4139.64,-6109.62 4185.78,-6114.97"/>
<polygon fill="blue" stroke="blue" points="4185.66,-6118.48 4195.99,-6116.16 4186.47,-6111.53 4185.66,-6118.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4253.82,-5954.81C4325.84,-5900.2 4541.41,-5736.74 4623.64,-5674.4"/>
<polygon fill="blue" stroke="blue" points="4626.23,-5676.82 4632.09,-5667.99 4622.01,-5671.25 4626.23,-5676.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.61,-6232.3C3947.83,-6250.3 4458.78,-6317.81 4612.19,-6338.07"/>
<polygon fill="blue" stroke="blue" points="4611.81,-6341.56 4622.18,-6339.4 4612.73,-6334.62 4611.81,-6341.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node354" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node354"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="3366,-6074.86 3150,-6074.86 3150,-6038.86 3366,-6038.86 3366,-6074.86"/>
<text text-anchor="middle" x="3258" y="-6053.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.24,-6043.57C3422.7,-6036.56 3493.1,-6027.78 3556,-6019.86 3600.11,-6014.31 3649.18,-6008.07 3689.77,-6002.89"/>
<polygon fill="blue" stroke="blue" points="3690.42,-6006.34 3699.9,-6001.6 3689.54,-5999.39 3690.42,-6006.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.02,-6070.71C3428.32,-6072.73 3504.5,-6063.97 3556,-6019.86 3580.58,-5998.82 3550.17,-5969.35 3576,-5949.86 3611.66,-5922.97 3933.38,-5947.82 3978,-5949.86 4029.72,-5952.24 4087.27,-5957.36 4134.1,-5962.17"/>
<polygon fill="blue" stroke="blue" points="4133.92,-5965.67 4144.23,-5963.22 4134.64,-5958.71 4133.92,-5965.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.03,-6039.2C3429.13,-6035.17 3506.13,-6042.34 3556,-6088.86 3592.97,-6123.36 3539.49,-6165.88 3576,-6200.86 3617.19,-6240.33 3686.88,-6240.52 3732.17,-6235.42"/>
<polygon fill="blue" stroke="blue" points="3732.79,-6238.87 3742.28,-6234.15 3731.92,-6231.93 3732.79,-6238.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.06,-6041.93C3427.81,-6039.27 3503.38,-6046.92 3556,-6088.86 3577.32,-6105.86 3554.91,-6129.58 3576,-6146.86 3622.04,-6184.59 3695.05,-6184.13 3738.96,-6179.56"/>
<polygon fill="blue" stroke="blue" points="3739.4,-6183.03 3748.93,-6178.4 3738.59,-6176.08 3739.4,-6183.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node355" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node355"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="3395.5,-6010.86 3120.5,-6010.86 3120.5,-5974.86 3395.5,-5974.86 3395.5,-6010.86"/>
<text text-anchor="middle" x="3258" y="-5989.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge502" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3395.51,-5992.6C3488.75,-5992.42 3609.47,-5992.19 3689.66,-5992.03"/>
<polygon fill="blue" stroke="blue" points="3689.72,-5995.53 3699.72,-5992.01 3689.71,-5988.53 3689.72,-5995.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge503" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3328.92,-5974.86C3392.76,-5959.41 3490,-5938.33 3576,-5929.86 3753.81,-5912.37 3799.98,-5914.67 3978,-5929.86 4030.12,-5934.31 4087.7,-5943.89 4134.45,-5952.88"/>
<polygon fill="blue" stroke="blue" points="4134.07,-5956.37 4144.56,-5954.85 4135.41,-5949.5 4134.07,-5956.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge504" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3395.52,-5975.6C3452.48,-5976.2 3514.82,-5988.37 3556,-6029.86 3609.9,-6084.17 3522.38,-6146.28 3576,-6200.86 3616.18,-6241.76 3686.7,-6241.41 3732.36,-6235.83"/>
<polygon fill="blue" stroke="blue" points="3732.83,-6239.3 3742.27,-6234.49 3731.9,-6232.36 3732.83,-6239.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge505" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3395.64,-5976.65C3452.1,-5977.6 3514.02,-5989.75 3556,-6029.86 3594.14,-6066.31 3538.05,-6110.22 3576,-6146.86 3619.14,-6188.52 3694.01,-6186.54 3738.88,-6180.66"/>
<polygon fill="blue" stroke="blue" points="3739.4,-6184.12 3748.79,-6179.23 3738.4,-6177.19 3739.4,-6184.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge602" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-6068.31C4328.94,-6075.15 4535.57,-6094.55 4619.69,-6102.45"/>
<polygon fill="blue" stroke="blue" points="4619.51,-6105.95 4629.79,-6103.4 4620.16,-6098.98 4619.51,-6105.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node357" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node357"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="3399,-6133.86 3117,-6133.86 3117,-6097.86 3399,-6097.86 3399,-6133.86"/>
<text text-anchor="middle" x="3258" y="-6112.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge622" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.05,-6131.36C3453.26,-6130.08 3512.59,-6118.84 3556,-6083.86 3577.89,-6066.23 3554.57,-6042.05 3576,-6023.86 3607.01,-5997.54 3650.82,-5988.47 3689.54,-5986.44"/>
<polygon fill="blue" stroke="blue" points="3689.93,-5989.93 3699.79,-5986.06 3689.66,-5982.93 3689.93,-5989.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge625" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3368.73,-6133.87C3431.41,-6137.6 3507.03,-6130.02 3556,-6083.86 3595.03,-6047.08 3535.06,-5999.5 3576,-5964.86 3610.1,-5936.02 3933.34,-5964.15 3978,-5964.86 4029.68,-5965.69 4087.34,-5967.48 4134.25,-5969.15"/>
<polygon fill="blue" stroke="blue" points="4134.28,-5972.66 4144.4,-5969.52 4134.53,-5965.66 4134.28,-5972.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge624" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.3,-6099.24C3453.24,-6100.1 3512.29,-6110.76 3556,-6144.86 3576.84,-6161.12 3555.47,-6184.22 3576,-6200.86 3619.85,-6236.4 3687.71,-6237.9 3731.99,-6234.13"/>
<polygon fill="blue" stroke="blue" points="3732.55,-6237.6 3742.17,-6233.14 3731.87,-6230.63 3732.55,-6237.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge623" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.23,-6128.58C3448.8,-6133.33 3504.92,-6139 3556,-6144.86 3620.35,-6152.24 3695.07,-6162.44 3738.78,-6168.57"/>
<polygon fill="blue" stroke="blue" points="3738.55,-6172.07 3748.94,-6170 3739.53,-6165.14 3738.55,-6172.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge678" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.09,-6177.24C3846.6,-6182.4 3928.46,-6192.53 3998,-6200.86 4203.26,-6225.45 4255.48,-6224.68 4460,-6254.86 4515.56,-6263.06 4579.55,-6274.95 4618.89,-6282.55"/>
<polygon fill="blue" stroke="blue" points="4618.33,-6286 4628.82,-6284.47 4619.67,-6279.13 4618.33,-6286"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge752" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.07,-6175.92C4364.35,-6184.29 4775.36,-6213.97 4826,-6186.86 4851.43,-6173.25 4842.89,-6154.47 4862,-6132.86 4900.32,-6089.55 4952.47,-6047.37 4985.95,-6021.99"/>
<polygon fill="blue" stroke="blue" points="4988.14,-6024.72 4994.03,-6015.91 4983.94,-6019.12 4988.14,-6024.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge753" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.16,-6180.11C4302.54,-6190.82 4402.34,-6212.29 4488,-6219.86 4637.64,-6233.1 4677.48,-6242.42 4826,-6219.86 4882.37,-6211.3 4944.93,-6189.44 4983.12,-6174.61"/>
<polygon fill="blue" stroke="blue" points="4984.73,-6177.74 4992.75,-6170.81 4982.16,-6171.22 4984.73,-6177.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node360" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node360"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3894,-6137.86 3660,-6137.86 3660,-6101.86 3894,-6101.86 3894,-6137.86"/>
<text text-anchor="middle" x="3777" y="-6116.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge776" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.07,-6124.91C3924.01,-6120.98 3954.41,-6111.75 3978,-6092.86 3997.98,-6076.87 3979.23,-6056.27 3998,-6038.86 4034.89,-6004.65 4088.35,-5988.04 4134.45,-5980.03"/>
<polygon fill="blue" stroke="blue" points="4135.16,-5983.46 4144.47,-5978.4 4134.04,-5976.55 4135.16,-5983.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge778" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.16,-6105.49C3927.67,-6101.38 3964.28,-6096.91 3998,-6092.86 4066.51,-6084.64 4146.54,-6075.31 4191.85,-6070.05"/>
<polygon fill="blue" stroke="blue" points="4192.25,-6073.52 4201.78,-6068.9 4191.44,-6066.57 4192.25,-6073.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge779" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.16,-6134.24C3927.67,-6138.35 3964.28,-6142.82 3998,-6146.86 4066.51,-6155.09 4146.54,-6164.42 4191.85,-6169.68"/>
<polygon fill="blue" stroke="blue" points="4191.44,-6173.16 4201.78,-6170.83 4192.25,-6166.2 4191.44,-6173.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge777" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.18,-6119.86C3989.59,-6119.86 4119.4,-6119.86 4185.51,-6119.86"/>
<polygon fill="blue" stroke="blue" points="4185.56,-6123.36 4195.56,-6119.86 4185.56,-6116.36 4185.56,-6123.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge810" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.02,-6122.87C4339.41,-6130.14 4536.32,-6148.63 4618.78,-6156.37"/>
<polygon fill="blue" stroke="blue" points="4618.66,-6159.87 4628.95,-6157.32 4619.32,-6152.9 4618.66,-6159.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.11,-7625.55C4311.3,-7633.76 4405.35,-7641.13 4460,-7591.86 4502.29,-7553.74 4458.75,-7515.71 4488,-7466.86 4520.71,-7412.24 4581.19,-7367.72 4619.97,-7343.02"/>
<polygon fill="blue" stroke="blue" points="4622.22,-7345.73 4628.85,-7337.46 4618.51,-7339.8 4622.22,-7345.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4263.78,-7734.89C4314.76,-7744.75 4410.63,-7754.14 4460,-7699.86 4507.04,-7648.15 4452.51,-6502.09 4488,-6441.86 4515.08,-6395.91 4572.71,-6369.35 4612.88,-6355.75"/>
<polygon fill="blue" stroke="blue" points="4614,-6359.07 4622.43,-6352.65 4611.84,-6352.41 4614,-6359.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4285.8,-7546.82C4338.98,-7526.65 4417.13,-7488.74 4460,-7428.86 4495.42,-7379.39 4443.99,-7336.87 4488,-7294.86 4522.96,-7261.49 4581.86,-7259.75 4619.82,-7262.84"/>
<polygon fill="blue" stroke="blue" points="4619.64,-7266.34 4629.93,-7263.81 4620.31,-7259.37 4619.64,-7266.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge827" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.35,-7679.6C4306.28,-7689.82 4408.5,-7702.55 4460,-7645.86 4509.66,-7591.2 4439.51,-6372.57 4488,-6316.86 4519.73,-6280.41 4579.53,-6279.52 4618.55,-6283.63"/>
<polygon fill="blue" stroke="blue" points="4618.62,-6287.16 4628.97,-6284.9 4619.46,-6280.22 4618.62,-6287.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.05,-6992.61C4303.34,-7001.37 4403.63,-7012.01 4460,-6959.86 4507.22,-6916.18 4443.19,-6864.01 4488,-6817.86 4595.34,-6707.33 4726.39,-6858.41 4826,-6740.86 4913.5,-6637.6 4801.93,-6254.15 4862,-6132.86 4886.67,-6083.06 4938.8,-6044.17 4976.23,-6021.18"/>
<polygon fill="blue" stroke="blue" points="4978.16,-6024.11 4984.93,-6015.96 4974.55,-6018.11 4978.16,-6024.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.29,-6988.26C4349.66,-6991.66 4668.11,-6989.74 4826,-6817.86 5000.47,-6627.94 5017.86,-6288.27 5019.09,-6188.29"/>
<polygon fill="blue" stroke="blue" points="5022.59,-6188.1 5019.17,-6178.08 5015.59,-6188.05 5022.59,-6188.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.34,-6832.47C4312.73,-6842.17 4409.41,-6851.84 4460,-6797.86 4500.93,-6754.19 4457.07,-6311.11 4488,-6259.86 4517.1,-6211.64 4579.06,-6183.92 4619.06,-6170.38"/>
<polygon fill="blue" stroke="blue" points="4620.29,-6173.66 4628.72,-6167.24 4618.13,-6167 4620.29,-6173.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge754" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4263.53,-6940.65C4314.17,-6950.21 4409.61,-6959.19 4460,-6905.86 4530.95,-6830.78 4433.88,-6529.85 4488,-6441.86 4515.81,-6396.66 4572.8,-6370.02 4612.66,-6356.19"/>
<polygon fill="blue" stroke="blue" points="4614.01,-6359.43 4622.39,-6352.95 4611.8,-6352.79 4614.01,-6359.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge797" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.18,-6885.44C4305.83,-6895.41 4407.62,-6907.74 4460,-6851.86 4541.42,-6765.01 4408.44,-6405.43 4488,-6316.86 4520.21,-6281.01 4579.6,-6279.89 4618.45,-6283.79"/>
<polygon fill="blue" stroke="blue" points="4618.48,-6287.32 4628.82,-6285 4619.29,-6280.37 4618.48,-6287.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge848" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.12,-6776.85C4304.46,-6786.19 4407.66,-6797.77 4460,-6740.86 4505.78,-6691.09 4442.97,-6183.31 4488,-6132.86 4520.37,-6096.6 4580.52,-6095.8 4619.38,-6099.85"/>
<polygon fill="blue" stroke="blue" points="4619.39,-6103.38 4629.73,-6101.1 4620.22,-6096.43 4619.39,-6103.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.06,-7822.31C4360.97,-7825.05 4422.39,-7818.69 4460,-7779.86 4504.28,-7734.16 4445.86,-7542.55 4488,-7494.86 4589.96,-7379.49 4728.82,-7538.3 4826,-7418.86 4902.94,-7324.3 4790.38,-5323.51 4862,-5224.86 4884.43,-5193.97 4925.66,-5180.59 4960.25,-5174.87"/>
<polygon fill="blue" stroke="blue" points="4960.89,-5178.31 4970.27,-5173.39 4959.87,-5171.39 4960.89,-5178.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node444" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node444"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="5055,-5326.86 4985,-5326.86 4985,-5290.86 5055,-5290.86 5055,-5326.86"/>
<text text-anchor="middle" x="5020" y="-5305.16" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4278.34,-7873.84C4330.74,-7881.54 4413.14,-7884.1 4460,-7836.86 4540.61,-7755.61 4412.94,-7667.27 4488,-7580.86 4589.66,-7463.85 4729.78,-7616.39 4826,-7494.86 4895.91,-7406.56 4818.3,-5571.67 4862,-5467.86 4886.7,-5409.19 4944.24,-5360.41 4982.37,-5332.94"/>
<polygon fill="blue" stroke="blue" points="4984.52,-5335.71 4990.67,-5327.08 4980.48,-5329.99 4984.52,-5335.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4671,-5631.82C4700.03,-5593.29 4774.47,-5503.82 4862,-5470.86 4994.25,-5421.07 5165.15,-5458.53 5247.46,-5482.27"/>
<polygon fill="blue" stroke="blue" points="5246.7,-5485.69 5257.29,-5485.16 5248.68,-5478.98 5246.7,-5485.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4744.02,-6453.75C4775.1,-6442.67 4807.14,-6424.98 4826,-6396.86 4898.57,-6288.66 4784.71,-5329.74 4862,-5224.86 4884.65,-5194.14 4925.87,-5180.75 4960.4,-5174.98"/>
<polygon fill="blue" stroke="blue" points="4961.03,-5178.43 4970.41,-5173.49 4960,-5171.51 4961.03,-5178.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3850.1,-6622.58C3893.71,-6620.2 3946.76,-6626.05 3978,-6660.86 4006.5,-6692.63 3967.43,-7399.08 3998,-7428.86 4064.04,-7493.2 4765.1,-7444.08 4826,-7374.86 4896,-7295.31 4820.84,-5565.5 4862,-5467.86 4886.8,-5409.04 4944.59,-5360.14 4982.71,-5332.72"/>
<polygon fill="blue" stroke="blue" points="4984.84,-5335.49 4990.99,-5326.87 4980.81,-5329.77 4984.84,-5335.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node422" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node422"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="5055,-4886.86 4985,-4886.86 4985,-4850.86 5055,-4850.86 5055,-4886.86"/>
<text text-anchor="middle" x="5020" y="-4865.16" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3807.23,-6705.88C3853.4,-6736.21 3941.66,-6802.35 3978,-6884.86 4002.38,-6940.22 3954.45,-7386.89 3998,-7428.86 4145.84,-7571.36 4257.68,-7463.91 4460,-7428.86 4473.02,-7426.61 4475.15,-7421.96 4488,-7418.86 4561.64,-7401.14 4775.57,-7431.38 4826,-7374.86 4868.32,-7327.44 4842.01,-5147.2 4862,-5086.86 4888.29,-5007.5 4954.74,-4932.4 4992.22,-4894.5"/>
<polygon fill="blue" stroke="blue" points="4995.14,-4896.53 4999.75,-4886.99 4990.2,-4891.57 4995.14,-4896.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2(). -->
<g id="node377" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().</title>
<g id="a_node377"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3858.5,-6489.86 3695.5,-6489.86 3695.5,-6453.86 3858.5,-6453.86 3858.5,-6489.86"/>
<text text-anchor="middle" x="3777" y="-6468.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.71,-6471.86C3951.83,-6471.86 4101.99,-6471.86 4179,-6471.86"/>
<polygon fill="blue" stroke="blue" points="4179.37,-6475.36 4189.37,-6471.86 4179.37,-6468.36 4179.37,-6475.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding(). -->
<g id="node378" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().</title>
<g id="a_node378"><a xlink:title=" &#160;&#160;&#160;fn test_encrypt_with_padding() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext = b&#39; secret team&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected...">
<polygon fill="white" stroke="black" points="3878.5,-6597.86 3675.5,-6597.86 3675.5,-6561.86 3878.5,-6561.86 3878.5,-6597.86"/>
<text text-anchor="middle" x="3777" y="-6576.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_encrypt_with_padding</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge548" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3878.58,-6569.86C3910.58,-6565.72 3945.97,-6560.15 3978,-6552.86 4049.53,-6536.59 4129.82,-6508.8 4179.66,-6490.39"/>
<polygon fill="blue" stroke="blue" points="4181.05,-6493.6 4189.2,-6486.84 4178.61,-6487.04 4181.05,-6493.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1(). -->
<g id="node379" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().</title>
<g id="a_node379"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec1() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3858.5,-6543.86 3695.5,-6543.86 3695.5,-6507.86 3858.5,-6507.86 3858.5,-6543.86"/>
<text text-anchor="middle" x="3777" y="-6522.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge808" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.71,-6516.18C3951.83,-6505 4101.99,-6486.98 4179,-6477.74"/>
<polygon fill="blue" stroke="blue" points="4179.85,-6481.17 4189.37,-6476.5 4179.02,-6474.22 4179.85,-6481.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge836" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.56,-6471.86C4332.52,-6471.86 4462.6,-6471.86 4554.34,-6471.86"/>
<polygon fill="blue" stroke="blue" points="4554.49,-6475.36 4564.49,-6471.86 4554.49,-6468.36 4554.49,-6475.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3869.66,-8630.14C3905.48,-8627.4 3945.63,-8619.6 3978,-8600.86 3990.62,-8593.56 3985.27,-8581.97 3998,-8574.86 4178.24,-8474.21 4260.88,-8581.33 4460,-8526.86 4516.67,-8511.36 4577.51,-8481.05 4616.12,-8459.91"/>
<polygon fill="blue" stroke="blue" points="4617.9,-8462.92 4624.96,-8455.01 4614.51,-8456.79 4617.9,-8462.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node387" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node387"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="4385.5,-8690.86 4072.5,-8690.86 4072.5,-8654.86 4385.5,-8654.86 4385.5,-8690.86"/>
<text text-anchor="middle" x="4229" y="-8669.16" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3869.61,-8637.02C3924.97,-8642.56 3997.2,-8649.78 4062.3,-8656.29"/>
<polygon fill="blue" stroke="blue" points="4061.96,-8659.78 4072.26,-8657.29 4062.66,-8652.81 4061.96,-8659.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3833.65,-8511.79C3994.44,-8488.34 4449.01,-8421.2 4460,-8409.86 4527.38,-8340.36 4420.6,-8263.35 4488,-8193.86 4516.67,-8164.31 4563.93,-8158.93 4601.03,-8160.17"/>
<polygon fill="blue" stroke="blue" points="4601.04,-8163.67 4611.2,-8160.68 4601.39,-8156.68 4601.04,-8163.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3804.15,-8575.49C3843.88,-8576.87 3920.85,-8575.16 3978,-8546.86 3989.27,-8541.28 3986.59,-8532.15 3998,-8526.86 4091.47,-8483.57 4382.74,-8557 4460,-8488.86 4505.31,-8448.91 4444.27,-8397.54 4488,-8355.86 4522.99,-8322.52 4581.88,-8320.77 4619.83,-8323.85"/>
<polygon fill="blue" stroke="blue" points="4619.65,-8327.35 4629.94,-8324.82 4620.32,-8320.38 4619.65,-8327.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3928.13,-8790.98C3946.69,-8785.29 3964.01,-8776.37 3978,-8762.86 4015.95,-8726.22 3959.3,-8681.71 3998,-8645.86 4073.64,-8575.79 4364.94,-8642.8 4460,-8602.86 4534.53,-8571.55 4601.79,-8501.34 4634.71,-8463.02"/>
<polygon fill="blue" stroke="blue" points="4637.79,-8464.8 4641.57,-8454.91 4632.44,-8460.28 4637.79,-8464.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3928.27,-8773.08C3945.14,-8770.16 3962,-8766.78 3978,-8762.86 4048.72,-8745.57 4127.26,-8715.39 4177.1,-8694.79"/>
<polygon fill="blue" stroke="blue" points="4178.48,-8698 4186.37,-8690.93 4175.79,-8691.54 4178.48,-8698"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="edge621" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.8,-8688.91C3859.94,-8695.21 3935.68,-8697.76 3978,-8654.86 4029.88,-8602.28 3954.6,-8549.64 3998,-8489.86 4029.83,-8446.02 4084.19,-8419.61 4132.06,-8403.99"/>
<polygon fill="blue" stroke="blue" points="4133.37,-8407.25 4141.86,-8400.92 4131.27,-8400.57 4133.37,-8407.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge770" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3870.67,-8745.19C3908.34,-8743.92 3949.6,-8735.31 3978,-8708.86 4009.9,-8679.16 3965.65,-8642.07 3998,-8612.86 4074.61,-8543.69 4362.72,-8599.39 4460,-8564.86 4526.05,-8541.42 4592.06,-8491.47 4628.11,-8461.37"/>
<polygon fill="blue" stroke="blue" points="4630.38,-8464.03 4635.76,-8454.9 4625.86,-8458.69 4630.38,-8464.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge769" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3870.63,-8723.53C3904.43,-8718.99 3942.95,-8713.75 3978,-8708.86 4015.77,-8703.59 4056.74,-8697.75 4094.37,-8692.33"/>
<polygon fill="blue" stroke="blue" points="4094.97,-8695.78 4104.37,-8690.89 4093.97,-8688.85 4094.97,-8695.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge837" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4267.87,-8654.83C4320.87,-8627.37 4415.65,-8569.72 4460,-8489.86 4486.28,-8442.54 4450.57,-8286.98 4488,-8247.86 4516.56,-8218.01 4564.05,-8212.72 4601.27,-8214.06"/>
<polygon fill="blue" stroke="blue" points="4601.3,-8217.57 4611.47,-8214.6 4601.67,-8210.58 4601.3,-8217.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="node416" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<g id="a_node416"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CommitmentWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let commitment_system = SystemParams::get_hardcoded...">
<polygon fill="white" stroke="black" points="4684,-8101.86 4630,-8101.86 4630,-8065.86 4684,-8065.86 4684,-8101.86"/>
<text text-anchor="middle" x="4657" y="-8080.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge626" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3844.05,-5753.56C4007.55,-5780.69 4420.83,-5853.46 4460,-5901.86 4485.74,-5933.67 4482.86,-7334.26 4488,-7374.86 4522.16,-7644.92 4617.59,-7961.91 4647.15,-8056.13"/>
<polygon fill="blue" stroke="blue" points="4643.85,-8057.29 4650.2,-8065.78 4650.53,-8055.19 4643.85,-8057.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node414" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node414"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="4780.5,-9218.86 4533.5,-9218.86 4533.5,-9182.86 4780.5,-9182.86 4780.5,-9218.86"/>
<text text-anchor="middle" x="4657" y="-9197.16" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3868.07,-10437.74C3907.62,-10437.62 3951.08,-10429.2 3978,-10398.86 4027.16,-10343.47 3945.24,-9117.84 3998,-9065.86 4071.14,-8993.81 4378.8,-9003.03 4460,-9065.86 4499.22,-9096.21 4451.32,-9140.49 4488,-9173.86 4498.29,-9183.22 4510.47,-9190.05 4523.51,-9194.97"/>
<polygon fill="blue" stroke="blue" points="4522.54,-9198.33 4533.13,-9198.21 4524.78,-9191.7 4522.54,-9198.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node424" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node424"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="4684,-9600.86 4630,-9600.86 4630,-9564.86 4684,-9564.86 4684,-9600.86"/>
<text text-anchor="middle" x="4657" y="-9579.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3868.1,-10439.45C4017.71,-10456.28 4315.24,-10464.23 4460,-10290.86 4508.54,-10232.73 4437.71,-9666.48 4488,-9609.86 4520.28,-9573.52 4580.46,-9572.74 4619.35,-9576.82"/>
<polygon fill="blue" stroke="blue" points="4619.36,-9580.35 4629.71,-9578.08 4620.2,-9573.4 4619.36,-9580.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node431" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node431"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="4685,-9492.86 4629,-9492.86 4629,-9456.86 4685,-9456.86 4685,-9492.86"/>
<text text-anchor="middle" x="4657" y="-9471.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3920.07,-10737.85C3939.82,-10734.12 3959.63,-10729.24 3978,-10722.86 4213.11,-10641.26 4333.47,-10652.17 4460,-10437.86 4512.9,-10348.27 4419.34,-9580.04 4488,-9501.86 4519.81,-9465.65 4579.31,-9464.63 4618.29,-9468.65"/>
<polygon fill="blue" stroke="blue" points="4618.35,-9472.18 4628.7,-9469.9 4619.18,-9465.23 4618.35,-9472.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node429" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node429"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="4685,-9546.86 4629,-9546.86 4629,-9510.86 4685,-9510.86 4685,-9546.86"/>
<text text-anchor="middle" x="4657" y="-9525.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4413.76,-10264.55C4431.21,-10257.78 4447.15,-10247.9 4460,-10233.86 4510.91,-10178.24 4437.92,-9612.23 4488,-9555.86 4520.01,-9519.83 4579.46,-9518.76 4618.37,-9522.72"/>
<polygon fill="blue" stroke="blue" points="4618.42,-9526.25 4628.76,-9523.95 4619.24,-9519.3 4618.42,-9526.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node437" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node437"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="4257,-10198.86 4201,-10198.86 4201,-10162.86 4257,-10162.86 4257,-10198.86"/>
<text text-anchor="middle" x="4229" y="-10177.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.37,-10922.52C3886.39,-10926.11 3944.57,-10921.95 3978,-10884.86 4026.46,-10831.11 3952.07,-10289.79 3998,-10233.86 4044.47,-10177.28 4138.12,-10173.86 4190.45,-10176.96"/>
<polygon fill="blue" stroke="blue" points="4190.43,-10180.47 4200.65,-10177.68 4190.92,-10173.49 4190.43,-10180.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node427" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node427"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="4684,-9654.86 4630,-9654.86 4630,-9618.86 4684,-9618.86 4684,-9654.86"/>
<text text-anchor="middle" x="4657" y="-9633.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.22,-10480.24C4096.59,-10477.44 4389.95,-10460.71 4460,-10382.86 4513.48,-10323.43 4434.97,-9723.7 4488,-9663.86 4520.24,-9627.49 4580.43,-9626.72 4619.33,-9630.81"/>
<polygon fill="blue" stroke="blue" points="4619.35,-9634.34 4629.7,-9632.07 4620.19,-9627.39 4619.35,-9634.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node440" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node440"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-10144.86 4202,-10144.86 4202,-10108.86 4256,-10108.86 4256,-10144.86"/>
<text text-anchor="middle" x="4229" y="-10123.16" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3804.2,-10863.65C3847.65,-10871.52 3934.16,-10879.55 3978,-10830.86 4028.36,-10774.94 3947.16,-10209.35 3998,-10153.86 4046.79,-10100.62 4140.35,-10108.8 4191.83,-10118.42"/>
<polygon fill="blue" stroke="blue" points="4191.35,-10121.89 4201.84,-10120.41 4192.71,-10115.03 4191.35,-10121.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3645.29,-10816.92C3611.07,-10812.53 3579.91,-10799.09 3566,-10767.86 3555.91,-10745.2 3555.91,-7218.52 3566,-7195.86 3593.07,-7135.08 3685.5,-7141.71 3738.62,-7151.19"/>
<polygon fill="blue" stroke="blue" points="3738.21,-7154.68 3748.68,-7153.11 3739.51,-7147.8 3738.21,-7154.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.67,-10534.79C3947.57,-10537.04 4370.86,-10536.88 4460,-10443.86 4508.62,-10393.12 4442.45,-10182.38 4488,-10128.86 4588.47,-10010.82 4704.91,-10139.63 4826,-10042.86 5101.15,-9822.98 5102.8,-9679.11 5186,-9336.86 5210.29,-9236.94 5176.27,-5733.31 5206,-5634.86 5218.99,-5591.84 5250.2,-5549.77 5272.21,-5523.84"/>
<polygon fill="blue" stroke="blue" points="5275.09,-5525.86 5279,-5516.01 5269.8,-5521.28 5275.09,-5525.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.87,-10541.26C3862.31,-10547.44 3936.54,-10549.39 3978,-10506.86 4035.12,-10448.28 3939.07,-10380.62 3998,-10323.86 4072.13,-10252.46 4389.33,-10365.7 4460,-10290.86 4535.88,-10210.52 4415.73,-8385.47 4488,-8301.86 4516.73,-8268.63 4568.77,-8264.89 4607.35,-8267.6"/>
<polygon fill="blue" stroke="blue" points="4607.08,-8271.09 4617.34,-8268.47 4607.68,-8264.12 4607.08,-8271.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="node412" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<g id="a_node412"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(S::NUM_ATTRS &gt;= 1, &#39; at least one attribute required&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S::NUM_ATTRS &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; mo...">
<polygon fill="white" stroke="black" points="4696.5,-9110.86 4617.5,-9110.86 4617.5,-9074.86 4696.5,-9074.86 4696.5,-9110.86"/>
<text text-anchor="middle" x="4657" y="-9089.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.77,-10541.8C3862.82,-10548.7 3938.37,-10551.57 3978,-10506.86 4031.11,-10446.95 3941,-9122.08 3998,-9065.86 4144.2,-8921.68 4255.15,-9051.82 4460,-9065.86 4510.6,-9069.33 4568.03,-9077.78 4607.58,-9084.31"/>
<polygon fill="blue" stroke="blue" points="4607.04,-9087.77 4617.48,-9085.97 4608.2,-9080.87 4607.04,-9087.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="node439" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<g id="a_node439"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = signing_key * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key, &#160;&#160;...">
<polygon fill="white" stroke="black" points="4268.5,-10090.86 4189.5,-10090.86 4189.5,-10054.86 4268.5,-10054.86 4268.5,-10090.86"/>
<text text-anchor="middle" x="4229" y="-10069.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.5,-10541.56C3862.29,-10548.23 3937.59,-10550.86 3978,-10506.86 4008.62,-10473.51 3967.09,-10132.94 3998,-10099.86 4043.42,-10051.26 4126.22,-10054.2 4179.09,-10062.37"/>
<polygon fill="blue" stroke="blue" points="4178.81,-10065.87 4189.25,-10064.06 4179.96,-10058.96 4178.81,-10065.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node413" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node413"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="4826,-9164.86 4488,-9164.86 4488,-9128.86 4826,-9128.86 4826,-9164.86"/>
<text text-anchor="middle" x="4657" y="-9143.16" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge603" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.16,-10647.83C3937.5,-10642.67 3960.62,-10632.66 3978,-10614.86 4034.53,-10556.95 3944.42,-10494.52 3998,-10433.86 4137.74,-10275.67 4327.16,-10487.9 4460,-10323.86 4500.22,-10274.2 4445.96,-9222 4488,-9173.86 4488.53,-9173.26 4489.06,-9172.66 4489.61,-9172.08"/>
<polygon fill="blue" stroke="blue" points="4492.23,-9174.42 4497.08,-9165 4487.41,-9169.34 4492.23,-9174.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node423" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node423"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="4684,-9708.86 4630,-9708.86 4630,-9672.86 4684,-9672.86 4684,-9708.86"/>
<text text-anchor="middle" x="4657" y="-9687.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge605" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.13,-10644.48C3936.76,-10639.41 3959.62,-10630.3 3978,-10614.86 4000.49,-10595.97 3976.44,-10571.81 3998,-10551.86 4152.79,-10408.66 4325.8,-10606.52 4460,-10443.86 4511.38,-10381.6 4434.47,-9778.29 4488,-9717.86 4520.23,-9681.48 4580.43,-9680.71 4619.33,-9684.81"/>
<polygon fill="blue" stroke="blue" points="4619.35,-9688.34 4629.69,-9686.07 4620.19,-9681.39 4619.35,-9688.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node430" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node430"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="4685,-9816.86 4629,-9816.86 4629,-9780.86 4685,-9780.86 4685,-9816.86"/>
<text text-anchor="middle" x="4657" y="-9795.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge604" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.06,-10633.18C3935.27,-10629.07 3957.66,-10623.2 3978,-10614.86 3988.28,-10610.65 3987.65,-10603.92 3998,-10599.86 4094.1,-10562.2 4389.42,-10627.18 4460,-10551.86 4515.2,-10492.96 4434.47,-9886.29 4488,-9825.86 4519.96,-9789.79 4579.43,-9788.73 4618.35,-9792.71"/>
<polygon fill="blue" stroke="blue" points="4618.4,-9796.24 4628.75,-9793.94 4619.23,-9789.29 4618.4,-9796.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="node433" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node433"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4268.5,-8018.86 4189.5,-8018.86 4189.5,-7982.86 4268.5,-7982.86 4268.5,-8018.86"/>
<text text-anchor="middle" x="4229" y="-7997.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge673" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3930.35,-10264.55C3948.58,-10258.31 3965.22,-10248.57 3978,-10233.86 4017.73,-10188.16 3960.07,-8101.08 3998,-8053.86 4040.79,-8000.59 4125.42,-7994.23 4179.23,-7996.27"/>
<polygon fill="blue" stroke="blue" points="4179.07,-7999.77 4189.23,-7996.76 4179.42,-7992.78 4179.07,-7999.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node434" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node434"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="4264,-7964.86 4194,-7964.86 4194,-7928.86 4264,-7928.86 4264,-7964.86"/>
<text text-anchor="middle" x="4229" y="-7943.16" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge674" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3930.36,-10264.55C3948.58,-10258.31 3965.22,-10248.57 3978,-10233.86 4019.18,-10186.47 3956.07,-8020.59 3998,-7973.86 4043.82,-7922.81 4130.73,-7927.82 4183.61,-7936.83"/>
<polygon fill="blue" stroke="blue" points="4183.24,-7940.32 4193.71,-7938.68 4184.5,-7933.44 4183.24,-7940.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge704" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.75,-10692.51C3956.51,-10686.83 3968.21,-10679.13 3978,-10668.86 4013.55,-10631.57 3965.82,-10478.1 3998,-10437.86 4132.58,-10269.58 4331.69,-10463.97 4460,-10290.86 4531.27,-10194.72 4416.62,-8232.92 4488,-8136.86 4518.31,-8096.08 4580.04,-8085.91 4619.64,-8083.79"/>
<polygon fill="blue" stroke="blue" points="4619.84,-8087.29 4629.69,-8083.4 4619.56,-8080.29 4619.84,-8087.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="node418" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node418"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4696.5,-10007.86 4617.5,-10007.86 4617.5,-9971.86 4696.5,-9971.86 4696.5,-10007.86"/>
<text text-anchor="middle" x="4657" y="-9986.16" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge702" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.7,-10712.87C4122.13,-10727.12 4389.9,-10735.4 4460,-10665.86 4502.42,-10623.79 4461.16,-10182.24 4488,-10128.86 4514.48,-10076.19 4570.91,-10036.17 4611.05,-10012.89"/>
<polygon fill="blue" stroke="blue" points="4612.89,-10015.88 4619.86,-10007.9 4609.43,-10009.79 4612.89,-10015.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node420" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node420"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_struct: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r1 = sho.get_scalar(); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4692,-9953.86 4622,-9953.86 4622,-9917.86 4692,-9917.86 4692,-9953.86"/>
<text text-anchor="middle" x="4657" y="-9932.16" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge703" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.59,-10677.83C3935.15,-10674.89 3957.19,-10671.83 3978,-10668.86 3986.9,-10667.6 3989.07,-10666.9 3998,-10665.86 4049.16,-10659.93 4424.31,-10665 4460,-10627.86 4511.24,-10574.53 4438.86,-10018.13 4488,-9962.86 4518.27,-9928.82 4573.04,-9925.99 4611.8,-9929.13"/>
<polygon fill="blue" stroke="blue" points="4611.49,-9932.61 4621.78,-9930.09 4612.17,-9925.65 4611.49,-9932.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node428" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node428"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="4684,-9870.86 4630,-9870.86 4630,-9834.86 4684,-9834.86 4684,-9870.86"/>
<text text-anchor="middle" x="4657" y="-9849.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge705" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.6,-10687.06C3955.84,-10682.42 3967.49,-10676.45 3978,-10668.86 3994.44,-10656.99 3981.26,-10639.3 3998,-10627.86 4083.05,-10569.74 4388.67,-10664.19 4460,-10589.86 4512.67,-10534.98 4441.78,-9966.28 4488,-9905.86 4518.88,-9865.5 4580.44,-9855.21 4619.85,-9852.95"/>
<polygon fill="blue" stroke="blue" points="4620.01,-9856.45 4629.85,-9852.52 4619.71,-9849.45 4620.01,-9856.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node426" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node426"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="4685,-9438.86 4629,-9438.86 4629,-9402.86 4685,-9402.86 4685,-9438.86"/>
<text text-anchor="middle" x="4657" y="-9417.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge745" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3874.52,-10383.42C3912.16,-10382.35 3952.34,-10373.27 3978,-10344.86 4023.83,-10294.12 3961.26,-9787.53 3998,-9729.86 4121.67,-9535.74 4292.5,-9653.73 4460,-9495.86 4477.97,-9478.92 4467.63,-9461.83 4488,-9447.86 4526.81,-9421.26 4582.36,-9417.31 4618.79,-9418.12"/>
<polygon fill="blue" stroke="blue" points="4618.87,-9421.62 4628.99,-9418.48 4619.12,-9414.63 4618.87,-9421.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node432" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node432"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="4684,-9762.86 4630,-9762.86 4630,-9726.86 4684,-9726.86 4684,-9762.86"/>
<text text-anchor="middle" x="4657" y="-9741.16" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge763" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3963.81,-10573.7C3968.9,-10569.94 3973.66,-10565.68 3978,-10560.86 4026.75,-10506.78 3952.95,-9963.06 3998,-9905.86 4153.08,-9708.99 4505.91,-9728.32 4619.82,-9740.32"/>
<polygon fill="blue" stroke="blue" points="4619.45,-9743.81 4629.78,-9741.42 4620.22,-9736.85 4619.45,-9743.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node425" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node425"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="4685,-9384.86 4629,-9384.86 4629,-9348.86 4685,-9348.86 4685,-9384.86"/>
<text text-anchor="middle" x="4657" y="-9363.16" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge796" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3916.16,-10324.56C3939.73,-10319.2 3961.8,-10308.93 3978,-10290.86 4007.49,-10257.97 3969.7,-9529.79 3998,-9495.86 4156.39,-9306.04 4504.81,-9342.38 4618.98,-9360.29"/>
<polygon fill="blue" stroke="blue" points="4618.54,-9363.76 4628.97,-9361.9 4619.66,-9356.85 4618.54,-9363.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge873" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3929.5,-10963.45C3947.08,-10958.13 3963.78,-10950.25 3978,-10938.86 4191.17,-10768.19 4222.57,-10397.08 4227.2,-10292.06"/>
<polygon fill="blue" stroke="blue" points="4230.7,-10292.06 4227.6,-10281.93 4223.71,-10291.79 4230.7,-10292.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main(). -->
<g id="node404" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().</title>
<g id="a_node404"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;let mut randomness = [0u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut randomness); &#160;&#160;&#160;&#160;&#160;let secret_params = GenericServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-5783.86 3231,-5783.86 3231,-5747.86 3285,-5747.86 3285,-5783.86"/>
<text text-anchor="middle" x="3258" y="-5762.16" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge863" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.43,-5772.91C3343.66,-5786.65 3483.57,-5809.65 3556,-5735.86 3593.96,-5697.2 3539.99,-5533.34 3576,-5492.86 3703.17,-5349.92 3807.62,-5426.85 3998,-5407.86 4202.32,-5387.49 4305.34,-5272.8 4460,-5407.86 4529.6,-5468.64 4425.19,-5546.09 4488,-5613.86 4517.84,-5646.06 4568.89,-5653.14 4606.9,-5653.33"/>
<polygon fill="blue" stroke="blue" points="4607.29,-5656.83 4617.25,-5653.22 4607.21,-5649.83 4607.29,-5656.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge862" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.29,-5760.92C3344.51,-5751.5 3488.41,-5738.49 3556,-5818.86 3597.91,-5868.7 3533.04,-10457.93 3576,-10506.86 3612.64,-10548.6 3680.58,-10549 3727.02,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.69 3737.16,-10541.86 3726.78,-10539.76 3727.73,-10546.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node405" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node405"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5340.5,-9172.86 5253.5,-9172.86 5253.5,-9136.86 5340.5,-9136.86 5340.5,-9172.86"/>
<text text-anchor="middle" x="5297" y="-9151.16" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge601" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5332.73,-9136.83C5397.34,-9101.11 5534.59,-9014.51 5591,-8896.86 5732.31,-8602.18 5733.42,-6098.27 5733.05,-5801.56"/>
<polygon fill="blue" stroke="blue" points="5736.55,-5801.21 5733.04,-5791.21 5729.55,-5801.22 5736.55,-5801.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time(). -->
<g id="node406" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().</title>
<g id="a_node406"><a xlink:title="pub fn encode_redemption_time(redemption_time: u32) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..4].copy_from_slice(&amp;redemption_time.to_be_bytes()); &#160;&#160;&#160;&#160;Sca...">
<polygon fill="white" stroke="black" points="4752.5,-8754.86 4561.5,-8754.86 4561.5,-8718.86 4752.5,-8718.86 4752.5,-8754.86"/>
<text text-anchor="middle" x="4657" y="-8733.16" font-family="Helvetica,sans-Serif" font-size="14.00">encode_redemption_time</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge659" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M4696.74,-8718.81C4818.43,-8662.12 5185.02,-8491.24 5186,-8489.86 5210.52,-8455.47 5200.08,-8342.68 5206,-8300.86 5270.62,-7844.52 5340.62,-7738.36 5387.5,-7279.86 5433.76,-6827.38 5369.53,-6709.33 5416,-6256.86 5433.96,-6082.05 5478.97,-5875.39 5495.92,-5801.16"/>
<polygon fill="blue" stroke="blue" points="5499.38,-5801.72 5498.2,-5791.19 5492.56,-5800.15 5499.38,-5801.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="node407" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<g id="a_node407"><a xlink:title="pub fn encode_receipt_serial_bytes(receipt_serial_bytes: ReceiptSerialBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..16].copy_from_slice(&amp;receipt_seria...">
<polygon fill="white" stroke="black" points="4762,-8808.86 4552,-8808.86 4552,-8772.86 4762,-8772.86 4762,-8808.86"/>
<text text-anchor="middle" x="4657" y="-8787.16" font-family="Helvetica,sans-Serif" font-size="14.00">encode_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge867" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M4762.26,-8779.37C4883.8,-8760.12 5081.34,-8709.55 5186,-8578.86 5510.12,-8174.12 5365.45,-6772.92 5416,-6256.86 5433.13,-6081.97 5478.65,-5875.35 5495.82,-5801.15"/>
<polygon fill="blue" stroke="blue" points="5499.28,-5801.71 5498.14,-5791.18 5492.46,-5800.13 5499.28,-5801.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="node408" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<g id="a_node408"><a xlink:title="pub(crate) fn convert_to_points_receipt_struct( &#160;&#160;&#160;&#160;receipt: receipt_struct::ReceiptStruct, ) &#45;&gt; Vec&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let m1 = receipt.calc_m1(); &#160;...">
<polygon fill="white" stroke="black" points="4349,-9164.86 4109,-9164.86 4109,-9128.86 4349,-9128.86 4349,-9164.86"/>
<text text-anchor="middle" x="4229" y="-9143.16" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_points_receipt_struct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4349.21,-9159.37C4388.89,-9157.21 4430.45,-9147.12 4460,-9119.86 4506.64,-9076.84 4459.71,-9036.66 4488,-8979.86 4522.07,-8911.44 4587.51,-8848.66 4625.89,-8815.5"/>
<polygon fill="blue" stroke="blue" points="4628.31,-8818.04 4633.65,-8808.88 4623.77,-8812.71 4628.31,-8818.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="node436" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<g id="a_node436"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4693.5,-9301.86 4620.5,-9301.86 4620.5,-9265.86 4693.5,-9265.86 4693.5,-9301.86"/>
<text text-anchor="middle" x="4657" y="-9280.16" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4349.25,-9136.85C4388.13,-9139.45 4429.17,-9149.16 4460,-9173.86 4489.4,-9197.42 4459.32,-9229.44 4488,-9253.86 4521.71,-9282.57 4573.32,-9287.98 4610.44,-9287.52"/>
<polygon fill="blue" stroke="blue" points="4610.59,-9291.02 4620.49,-9287.24 4610.4,-9284.02 4610.59,-9291.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node409" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node409"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="5080.5,-9218.86 4959.5,-9218.86 4959.5,-9182.86 5080.5,-9182.86 5080.5,-9218.86"/>
<text text-anchor="middle" x="5020" y="-9197.16" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5080.67,-9190.88C5129.24,-9182.76 5197.12,-9171.4 5243.61,-9163.63"/>
<polygon fill="blue" stroke="blue" points="5244.19,-9167.08 5253.48,-9161.98 5243.04,-9160.17 5244.19,-9167.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="node410" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<g id="a_node410"><a xlink:title="pub(crate) fn convert_to_point_M2_receipt_serial_bytes( &#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, ) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let receipt_serial_scala...">
<polygon fill="white" stroke="black" points="4380,-9110.86 4078,-9110.86 4078,-9074.86 4380,-9074.86 4380,-9110.86"/>
<text text-anchor="middle" x="4229" y="-9089.16" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_point_M2_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4281.11,-9074.69C4329.58,-9056.15 4403.22,-9024.52 4460,-8984.86 4531.98,-8934.6 4601.4,-8856.81 4635,-8816.71"/>
<polygon fill="blue" stroke="blue" points="4637.73,-8818.91 4641.43,-8808.98 4632.34,-8814.44 4637.73,-8818.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node411" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node411"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="4268.5,-9218.86 4189.5,-9218.86 4189.5,-9182.86 4268.5,-9182.86 4268.5,-9218.86"/>
<text text-anchor="middle" x="4229" y="-9197.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.81,-9206.66C4317.86,-9211.83 4402.78,-9213.4 4460,-9173.86 4482.24,-9158.49 4466.09,-9135.7 4488,-9119.86 4522.32,-9095.06 4570.88,-9089.56 4606.97,-9089.54"/>
<polygon fill="blue" stroke="blue" points="4607.23,-9093.04 4617.27,-9089.67 4607.32,-9086.04 4607.23,-9093.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.69,-9196.56C4314.42,-9191.42 4392.8,-9182.44 4460,-9173.86 4478.71,-9171.48 4498.42,-9168.87 4517.83,-9166.25"/>
<polygon fill="blue" stroke="blue" points="4518.51,-9169.69 4527.95,-9164.88 4517.57,-9162.75 4518.51,-9169.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4235.56,-9219.01C4270.31,-9332.14 4457.07,-9936.71 4488,-9962.86 4520.79,-9990.58 4570.49,-9995.53 4607.34,-9994.63"/>
<polygon fill="blue" stroke="blue" points="4607.51,-9998.12 4617.37,-9994.23 4607.24,-9991.13 4607.51,-9998.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4230.47,-9218.93C4233.86,-9309.34 4261.65,-9715.85 4488,-9905.86 4522.33,-9934.68 4574.75,-9939.92 4611.89,-9939.38"/>
<polygon fill="blue" stroke="blue" points="4612.04,-9942.87 4621.94,-9939.09 4611.84,-9935.88 4612.04,-9942.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4234.03,-9218.87C4250.82,-9289.27 4322.17,-9547.74 4488,-9663.86 4526.87,-9691.08 4583.11,-9694.77 4619.62,-9693.75"/>
<polygon fill="blue" stroke="blue" points="4619.97,-9697.23 4629.81,-9693.32 4619.68,-9690.24 4619.97,-9697.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4242.59,-9218.94C4276.26,-9265.71 4373.62,-9390.98 4488,-9447.86 4529.47,-9468.49 4583.16,-9473.98 4618.54,-9475.13"/>
<polygon fill="blue" stroke="blue" points="4618.83,-9478.64 4628.9,-9475.37 4618.98,-9471.64 4618.83,-9478.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge533" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.63,-9093.75C4784.14,-9096.18 5004.08,-9104.61 5186,-9130.86 5204.93,-9133.6 5225.47,-9137.75 5243.61,-9141.83"/>
<polygon fill="blue" stroke="blue" points="5242.89,-9145.26 5253.42,-9144.09 5244.46,-9138.44 5242.89,-9145.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge546" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4826.11,-9138.57C4929.92,-9135.03 5065.81,-9133.25 5186,-9140.86 5204.72,-9142.05 5225.12,-9144.36 5243.21,-9146.77"/>
<polygon fill="blue" stroke="blue" points="5242.9,-9150.26 5253.28,-9148.15 5243.85,-9143.32 5242.9,-9150.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge545" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4778.46,-9164.88C4835.12,-9173.36 4900.69,-9183.17 4949.05,-9190.4"/>
<polygon fill="blue" stroke="blue" points="4948.69,-9193.88 4959.09,-9191.9 4949.72,-9186.96 4948.69,-9193.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="node442" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<g id="a_node442"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m_from(timestamp: Timestamp) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20220524_Timestamp_Calc_m&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;timestamp.to_be_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5071.5,-9027.86 4968.5,-9027.86 4968.5,-8991.86 5071.5,-8991.86 5071.5,-9027.86"/>
<text text-anchor="middle" x="5020" y="-9006.16" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge547" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4810.11,-9128.82C4815.62,-9126.17 4820.95,-9123.2 4826,-9119.86 4851.01,-9103.36 4838.45,-9081.39 4862,-9062.86 4889.85,-9040.96 4927.24,-9027.86 4958.55,-9020.17"/>
<polygon fill="blue" stroke="blue" points="4959.54,-9023.53 4968.48,-9017.86 4957.95,-9016.72 4959.54,-9023.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge833" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4780.51,-9182.87C4807.32,-9179.43 4835.58,-9176.19 4862,-9173.86 4999.25,-9161.8 5161.63,-9157.28 5243.37,-9155.68"/>
<polygon fill="blue" stroke="blue" points="5243.48,-9159.18 5253.41,-9155.49 5243.35,-9152.18 5243.48,-9159.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge834" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4780.72,-9200.86C4836.9,-9200.86 4901.42,-9200.86 4949.15,-9200.86"/>
<polygon fill="blue" stroke="blue" points="4949.37,-9204.36 4959.37,-9200.86 4949.37,-9197.36 4949.37,-9204.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="node435" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<g id="a_node435"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[0u8; std::mem::size_of::&lt;Timestamp&gt;() + std::mem::size_of::&lt;Re...">
<polygon fill="white" stroke="black" points="5076,-9301.86 4964,-9301.86 4964,-9265.86 5076,-9265.86 5076,-9301.86"/>
<text text-anchor="middle" x="5020" y="-9280.16" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge832" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4722.97,-9218.9C4762.91,-9229.7 4815.23,-9243.33 4862,-9253.86 4892.02,-9260.62 4925.49,-9267.16 4953.79,-9272.39"/>
<polygon fill="blue" stroke="blue" points="4953.49,-9275.89 4963.96,-9274.26 4954.76,-9269.01 4953.49,-9275.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="node415" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<g id="a_node415"><a xlink:title=" &#160;&#160;&#160;pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY_LEN].co...">
<polygon fill="white" stroke="black" points="5051.5,-8101.86 4988.5,-8101.86 4988.5,-8065.86 5051.5,-8065.86 5051.5,-8101.86"/>
<text text-anchor="middle" x="5020" y="-8080.16" font-family="Helvetica,sans-Serif" font-size="14.00">calc_j3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5051.75,-8084.26C5089.69,-8086.55 5153.21,-8096.63 5186,-8136.86 5250.36,-8215.84 5287.66,-8969.72 5294.76,-9126.42"/>
<polygon fill="blue" stroke="blue" points="5291.27,-9126.82 5295.21,-9136.66 5298.26,-9126.51 5291.27,-9126.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="edge721" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-8083.86C4746.42,-8083.86 4903.01,-8083.86 4977.88,-8083.86"/>
<polygon fill="blue" stroke="blue" points="4978.32,-8087.36 4988.32,-8083.86 4978.32,-8080.36 4978.32,-8087.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node417" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node417"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="4297.5,-8101.86 4160.5,-8101.86 4160.5,-8065.86 4297.5,-8065.86 4297.5,-8101.86"/>
<text text-anchor="middle" x="4229" y="-8080.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge795" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.5,-8083.86C4388.77,-8083.86 4548.32,-8083.86 4619.69,-8083.86"/>
<polygon fill="blue" stroke="blue" points="4619.96,-8087.36 4629.96,-8083.86 4619.96,-8080.36 4619.96,-8087.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.66,-9987.59C4731.35,-9984.63 4783.23,-9977.92 4826,-9962.86 4999.67,-9901.72 5079.5,-9908.06 5186,-9757.86 5253.33,-9662.91 5285.91,-9289.92 5293.97,-9183.41"/>
<polygon fill="blue" stroke="blue" points="5297.48,-9183.35 5294.73,-9173.12 5290.5,-9182.84 5297.48,-9183.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node419" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node419"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4315,-9953.86 4143,-9953.86 4143,-9917.86 4315,-9917.86 4315,-9953.86"/>
<text text-anchor="middle" x="4229" y="-9932.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4238.42,-9917.69C4273.89,-9840 4411.6,-9527.33 4460,-9253.86 4470.82,-9192.74 4450.67,-8186.46 4488,-8136.86 4518.56,-8096.26 4580.22,-8086.04 4619.74,-8083.86"/>
<polygon fill="blue" stroke="blue" points="4619.91,-8087.36 4629.76,-8083.46 4619.63,-8080.36 4619.91,-8087.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.18,-9946.66C4402.78,-9957.76 4536.14,-9974.67 4607.28,-9983.69"/>
<polygon fill="blue" stroke="blue" points="4606.95,-9987.17 4617.31,-9984.96 4607.83,-9980.23 4606.95,-9987.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.18,-9935.86C4404.56,-9935.86 4541.59,-9935.86 4611.55,-9935.86"/>
<polygon fill="blue" stroke="blue" points="4611.78,-9939.36 4621.78,-9935.86 4611.78,-9932.36 4611.78,-9939.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge868" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4692.06,-9934.9C4727.14,-9932.77 4782.65,-9926.13 4826,-9905.86 5015.19,-9817.41 5075.68,-9781.19 5186,-9603.86 5273.48,-9463.24 5291.4,-9257.59 5295.06,-9183.11"/>
<polygon fill="blue" stroke="blue" points="5298.56,-9183.24 5295.51,-9173.1 5291.57,-9182.93 5298.56,-9183.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node421" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node421"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="4759.5,-4886.86 4554.5,-4886.86 4554.5,-4850.86 4759.5,-4850.86 4759.5,-4886.86"/>
<text text-anchor="middle" x="4657" y="-4865.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge680" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4759.54,-4881.76C4784.48,-4889.6 4808.9,-4902.08 4826,-4921.86 4891.38,-4997.47 4791.66,-5072.85 4862,-5143.86 4887.13,-5169.24 4926.86,-5175.88 4960.07,-5176.24"/>
<polygon fill="blue" stroke="blue" points="4960.16,-5179.74 4970.14,-5176.16 4960.11,-5172.74 4960.16,-5179.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge679" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4759.52,-4868.86C4830.29,-4868.86 4921.25,-4868.86 4974.54,-4868.86"/>
<polygon fill="blue" stroke="blue" points="4974.67,-4872.36 4984.67,-4868.86 4974.67,-4865.36 4974.67,-4872.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge869" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5041.39,-4887.08C5078.43,-4921.68 5155.76,-5001.14 5186,-5086.86 5198.18,-5121.41 5183.12,-5717.26 5206,-5745.86 5259.97,-5813.33 5514.83,-5840.63 5591,-5799.86 5616.43,-5786.25 5603.46,-5762.53 5627,-5745.86 5646.98,-5731.72 5673.71,-5724.97 5695.34,-5721.76"/>
<polygon fill="blue" stroke="blue" points="5696.02,-5725.2 5705.49,-5720.45 5695.12,-5718.26 5696.02,-5725.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.24,-9686.37C4721.55,-9681.64 4789.44,-9679.46 4826,-9717.86 4876.11,-9770.49 4825.74,-9979.89 4862,-10042.86 4889.47,-10090.58 4945.32,-10124.46 4982.45,-10142.84"/>
<polygon fill="blue" stroke="blue" points="4981.4,-10146.21 4991.92,-10147.39 4984.43,-10139.9 4981.4,-10146.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.19,-9695.56C4721.76,-9700.62 4790.32,-9703.29 4826,-9663.86 4915.78,-9564.67 4780.76,-9169.17 4862,-9062.86 4884.56,-9033.34 4924.31,-9020.12 4958.17,-9014.26"/>
<polygon fill="blue" stroke="blue" points="4959.11,-9017.66 4968.46,-9012.67 4958.04,-9010.74 4959.11,-9017.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.07,-9578.28C4721.49,-9573.35 4789.86,-9570.86 4826,-9609.86 4891.62,-9680.7 4814.97,-9958.54 4862,-10042.86 4888.93,-10091.16 4945.32,-10125.02 4982.67,-10143.22"/>
<polygon fill="blue" stroke="blue" points="4981.19,-10146.39 4991.72,-10147.51 4984.18,-10140.06 4981.19,-10146.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.03,-9584.65C4719,-9585.79 4781.85,-9583.33 4826,-9555.86 4922.7,-9495.7 4984.74,-9367.42 5008.29,-9311.21"/>
<polygon fill="blue" stroke="blue" points="5011.56,-9312.47 5012.12,-9301.89 5005.08,-9309.82 5011.56,-9312.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.27,-9364.68C4782.88,-9357.48 5112.89,-9338.68 5186,-9406.86 5293.83,-9507.43 5297.22,-10005.6 5296.35,-10130.45"/>
<polygon fill="blue" stroke="blue" points="5292.84,-10130.68 5296.26,-10140.71 5299.84,-10130.74 5292.84,-10130.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4628.75,-9370.65C4591.5,-9374.17 4525.06,-9374.17 4488,-9336.86 4436.2,-9284.72 4513.34,-9224.44 4460,-9173.86 4433.2,-9148.45 4396.01,-9137.8 4359.35,-9134.59"/>
<polygon fill="blue" stroke="blue" points="4359.25,-9131.07 4349.03,-9133.88 4358.77,-9138.06 4359.25,-9131.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.25,-9418.76C4782.78,-9411.86 5112.56,-9394.01 5186,-9461.86 5286.02,-9554.27 5295.28,-10011.8 5295.98,-10130.63"/>
<polygon fill="blue" stroke="blue" points="5292.48,-10130.76 5296.03,-10140.74 5299.48,-10130.73 5292.48,-10130.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4628.9,-9425.39C4591.5,-9429.94 4524.57,-9431.65 4488,-9393.86 4419.45,-9323.03 4530.04,-9243.22 4460,-9173.86 4433.63,-9147.75 4396.36,-9136.95 4359.49,-9133.83"/>
<polygon fill="blue" stroke="blue" points="4359.32,-9130.31 4349.12,-9133.15 4358.86,-9137.3 4359.32,-9130.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.01,-9632.33C4721.35,-9627.48 4789.64,-9625.07 4826,-9663.86 4883.86,-9725.59 4820.36,-9969.22 4862,-10042.86 4889.22,-10091 4945.52,-10124.9 4982.78,-10143.16"/>
<polygon fill="blue" stroke="blue" points="4981.28,-10146.32 4991.81,-10147.46 4984.29,-10140 4981.28,-10146.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.12,-9636.55C4718.11,-9635.28 4778.74,-9630.07 4826,-9609.86 5010.63,-9530.91 5051.67,-9486.12 5186,-9336.86 5229.76,-9288.24 5265.63,-9219.75 5283.58,-9182.18"/>
<polygon fill="blue" stroke="blue" points="5286.86,-9183.42 5287.95,-9172.88 5280.53,-9180.44 5286.86,-9183.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.1,-9853.1C4721.55,-9854.94 4789.98,-9864.24 4826,-9905.86 4891.12,-9981.12 4793.04,-10055.12 4862,-10126.86 4892.7,-10158.81 4945.98,-10163.39 4981.85,-10162.29"/>
<polygon fill="blue" stroke="blue" points="4982.1,-10165.78 4991.92,-10161.82 4981.77,-10158.79 4982.1,-10165.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.05,-9527.35C4720.04,-9526.63 4781.76,-9529.7 4826,-9555.86 5073.97,-9702.5 5239.31,-10033.94 5283.89,-10131.41"/>
<polygon fill="blue" stroke="blue" points="5280.74,-10132.94 5288.05,-10140.61 5287.12,-10130.06 5280.74,-10132.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.02,-9533.58C4722.64,-9538.42 4790.19,-9540.57 4826,-9501.86 4892.48,-9430.02 4801.71,-9139.98 4862,-9062.86 4884.8,-9033.7 4924.35,-9020.46 4958.05,-9014.51"/>
<polygon fill="blue" stroke="blue" points="4958.97,-9017.91 4968.3,-9012.89 4957.87,-9010.99 4958.97,-9017.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge577" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.22,-9794.49C4722.44,-9790.2 4788.83,-9788.88 4826,-9825.86 4895.3,-9894.82 4796.3,-9970.47 4862,-10042.86 4868.45,-10049.97 5121.38,-10114.68 5238.08,-10144.25"/>
<polygon fill="blue" stroke="blue" points="5237.37,-10147.68 5247.93,-10146.74 5239.09,-10140.89 5237.37,-10147.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge724" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.05,-9471.08C4772.06,-9460.6 5047.14,-9440.73 5186,-9584.86 5262.92,-9664.7 5288.67,-10026.46 5294.56,-10130.68"/>
<polygon fill="blue" stroke="blue" points="5291.07,-10130.97 5295.12,-10140.76 5298.06,-10130.58 5291.07,-10130.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge725" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.28,-9479.56C4722.88,-9484.31 4790.07,-9486.25 4826,-9447.86 4884.72,-9385.13 4808.69,-9130.26 4862,-9062.86 4884.97,-9033.83 4924.52,-9020.59 4958.17,-9014.61"/>
<polygon fill="blue" stroke="blue" points="4959.08,-9018.01 4968.4,-9012.97 4957.98,-9011.09 4959.08,-9018.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge764" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.13,-9740.47C4721.3,-9735.88 4789.02,-9733.86 4826,-9771.86 4910.74,-9858.94 4800.23,-9938.23 4862,-10042.86 4889.91,-10090.15 4945.38,-10124.04 4982.35,-10142.56"/>
<polygon fill="blue" stroke="blue" points="4981.26,-10145.92 4991.78,-10147.15 4984.32,-10139.63 4981.26,-10145.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge765" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.23,-9744.09C4718.08,-9742.32 4778.28,-9736.57 4826,-9717.86 5005.03,-9647.67 5068.78,-9630.3 5186,-9477.86 5257.22,-9385.24 5283.99,-9243.62 5292.53,-9183.48"/>
<polygon fill="blue" stroke="blue" points="5296.04,-9183.6 5293.92,-9173.22 5289.11,-9182.66 5296.04,-9183.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.78,-8000.11C4439.53,-7997.17 5118.85,-7989.62 5186,-8053.86 5265.97,-8130.37 5291.1,-8961.37 5295.32,-9126.45"/>
<polygon fill="blue" stroke="blue" points="5291.83,-9126.85 5295.58,-9136.76 5298.83,-9126.67 5291.83,-9126.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4264.01,-7943.21C4418.4,-7927.43 5051.61,-7871.56 5186,-8000.86 5269.82,-8081.51 5291.96,-8957.54 5295.46,-9126.69"/>
<polygon fill="blue" stroke="blue" points="5291.96,-9126.86 5295.67,-9136.79 5298.96,-9126.72 5291.96,-9126.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4193.87,-7937.76C4135.16,-7924.85 4020.36,-7910.21 3988,-7982.86 3975.92,-8009.99 3975.92,-9024.74 3988,-9051.86 4002.44,-9084.29 4033.17,-9099.9 4068,-9106.23"/>
<polygon fill="blue" stroke="blue" points="4067.51,-9109.7 4077.93,-9107.78 4068.58,-9102.78 4067.51,-9109.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5076.11,-9281.41C5109.36,-9278.13 5151.76,-9270.67 5186,-9253.86 5221.69,-9236.34 5254.43,-9203.83 5274.74,-9180.85"/>
<polygon fill="blue" stroke="blue" points="5277.5,-9183.01 5281.39,-9173.16 5272.2,-9178.43 5277.5,-9183.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4693.6,-9283.86C4753.91,-9283.86 4877.04,-9283.86 4953.34,-9283.86"/>
<polygon fill="blue" stroke="blue" points="4953.79,-9287.36 4963.79,-9283.86 4953.79,-9280.36 4953.79,-9287.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.33,-10177.69C4306.71,-10173.68 4410.25,-10173.44 4460,-10233.86 4519.5,-10306.13 4426.11,-11005.63 4488,-11075.86 4511.1,-11102.07 4548.71,-11109.83 4582.5,-11110.59"/>
<polygon fill="blue" stroke="blue" points="4582.83,-11114.09 4592.84,-11110.61 4582.84,-11107.09 4582.83,-11114.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node438" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node438"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="3834.5,-10144.86 3719.5,-10144.86 3719.5,-10108.86 3834.5,-10108.86 3834.5,-10144.86"/>
<text text-anchor="middle" x="3777" y="-10123.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge589" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.51,-10133.88C3878.94,-10139.38 3942.41,-10147.19 3998,-10153.86 4065.96,-10162.02 4145.24,-10171.27 4190.74,-10176.55"/>
<polygon fill="blue" stroke="blue" points="4190.4,-10180.03 4200.73,-10177.71 4191.2,-10173.08 4190.4,-10180.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge590" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.51,-10119.84C3878.94,-10114.35 3942.41,-10106.54 3998,-10099.86 4060.53,-10092.36 4132.66,-10083.93 4179.22,-10078.51"/>
<polygon fill="blue" stroke="blue" points="4179.8,-10081.97 4189.33,-10077.34 4179,-10075.02 4179.8,-10081.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge588" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.54,-10126.86C3928.21,-10126.86 4113.04,-10126.86 4191.45,-10126.86"/>
<polygon fill="blue" stroke="blue" points="4191.79,-10130.36 4201.79,-10126.86 4191.79,-10123.36 4191.79,-10130.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge821" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.51,-10079.67C4418.3,-10103.67 4964.66,-10167.47 5186,-9866.86 5268.34,-9755.03 5290.6,-9301.46 5295.05,-9183.18"/>
<polygon fill="blue" stroke="blue" points="5298.56,-9183.22 5295.42,-9173.1 5291.56,-9182.97 5298.56,-9183.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge840" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.32,-10121.16C4303.59,-10112.6 4403.24,-10102.44 4460,-10153.86 4493.64,-10184.34 4623.14,-10872.18 4650.79,-11020.74"/>
<polygon fill="blue" stroke="blue" points="4647.4,-11021.67 4652.67,-11030.86 4654.28,-11020.39 4647.4,-11021.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m(). -->
<g id="node441" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().</title>
<g id="a_node441"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m_from(self.timestamp) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4689,-9027.86 4625,-9027.86 4625,-8991.86 4689,-8991.86 4689,-9027.86"/>
<text text-anchor="middle" x="4657" y="-9006.16" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4689.09,-9009.86C4748.83,-9009.86 4880.62,-9009.86 4958.34,-9009.86"/>
<polygon fill="blue" stroke="blue" points="4958.47,-9013.36 4968.47,-9009.86 4958.47,-9006.36 4958.47,-9013.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge528" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5071.78,-9020.77C5105.51,-9029.29 5150.03,-9043.04 5186,-9062.86 5218.43,-9080.73 5250.31,-9108.89 5271.33,-9129.36"/>
<polygon fill="blue" stroke="blue" points="5268.99,-9131.97 5278.56,-9136.51 5273.91,-9126.99 5268.99,-9131.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node443" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node443"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="4733,-5326.86 4581,-5326.86 4581,-5290.86 4733,-5290.86 4733,-5326.86"/>
<text text-anchor="middle" x="4657" y="-5305.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.14,-5310C4764.05,-5307.27 4798.88,-5299.76 4826,-5281.86 4851.01,-5265.36 4838.5,-5243.46 4862,-5224.86 4890.35,-5202.43 4928.61,-5189.02 4960.26,-5181.17"/>
<polygon fill="blue" stroke="blue" points="4961.35,-5184.51 4970.28,-5178.81 4959.75,-5177.69 4961.35,-5184.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.24,-5308.86C4806.14,-5308.86 4914.27,-5308.86 4974.45,-5308.86"/>
<polygon fill="blue" stroke="blue" points="4974.75,-5312.36 4984.75,-5308.86 4974.75,-5305.36 4974.75,-5312.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge701" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5050.99,-5326.97C5090.35,-5352.67 5157.75,-5403.8 5186,-5467.86 5219.42,-5543.63 5164.36,-6141.29 5206,-6212.86 5260.84,-6307.15 5310.94,-6310.56 5416,-6339.86 5490.92,-6360.76 5534.36,-6393.17 5591,-6339.86 5687.3,-6249.23 5542.73,-5847.77 5627,-5745.86 5643.27,-5726.19 5671.67,-5719.73 5694.99,-5718.04"/>
<polygon fill="blue" stroke="blue" points="5695.45,-5721.52 5705.28,-5717.56 5695.13,-5714.53 5695.45,-5721.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node445" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node445"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4733,-5272.86 4581,-5272.86 4581,-5236.86 4733,-5236.86 4733,-5272.86"/>
<text text-anchor="middle" x="4657" y="-5251.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge859" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.1,-5241.8C4762.21,-5236.41 4795.76,-5229.81 4826,-5222.86 4871.48,-5212.42 4922.44,-5198.6 4960.57,-5187.83"/>
<polygon fill="blue" stroke="blue" points="4961.81,-5191.12 4970.47,-5185.02 4959.9,-5184.38 4961.81,-5191.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge858" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.24,-5266.12C4806.29,-5277.05 4914.71,-5293.26 4974.82,-5302.26"/>
<polygon fill="blue" stroke="blue" points="4974.35,-5305.72 4984.75,-5303.74 4975.38,-5298.8 4974.35,-5305.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node446" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node446"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4416.5,-5000.86 4041.5,-5000.86 4041.5,-4964.86 4416.5,-4964.86 4416.5,-5000.86"/>
<text text-anchor="middle" x="4229" y="-4979.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.55,-4983.65C4432.5,-4989.74 4447.34,-4998.24 4460,-5009.86 4505.77,-5051.91 4440.76,-5106.49 4488,-5146.86 4523.18,-5176.93 4829.17,-5174.61 4960.04,-5172.2"/>
<polygon fill="blue" stroke="blue" points="4960.35,-5175.7 4970.28,-5172.01 4960.21,-5168.7 4960.35,-5175.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.67,-4983.79C4432.8,-4977.42 4447.65,-4968.39 4460,-4955.86 4502.51,-4912.76 4443.04,-4725.41 4488,-4684.86 4516.79,-4658.89 5156.8,-4659.35 5186,-4684.86 5246.63,-4737.84 5285.98,-5331.55 5294.33,-5469.4"/>
<polygon fill="blue" stroke="blue" points="5290.85,-5469.8 5294.94,-5479.57 5297.84,-5469.38 5290.85,-5469.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.5,-4980.25C4432.94,-4986.87 4447.89,-4996.42 4460,-5009.86 4502.48,-5057.03 4446.53,-7246.8 4488,-7294.86 4519.71,-7331.62 4579.93,-7332.31 4618.99,-7328.1"/>
<polygon fill="blue" stroke="blue" points="4619.43,-7331.57 4628.92,-7326.87 4618.57,-7324.62 4619.43,-7331.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.72,-4980.41C4433.06,-4987.01 4447.93,-4996.52 4460,-5009.86 4492.25,-5045.54 4480.23,-6693.41 4488,-6740.86 4520.32,-6938.12 4611.15,-7163.02 4643.98,-7240.19"/>
<polygon fill="blue" stroke="blue" points="4640.88,-7241.86 4648.03,-7249.68 4647.32,-7239.11 4640.88,-7241.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.63,-4980.5C4432.98,-4987.08 4447.89,-4996.56 4460,-5009.86 4505.01,-5059.29 4451.24,-6157.02 4488,-6212.86 4517.21,-6257.24 4578.92,-6276.42 4618.87,-6284.44"/>
<polygon fill="blue" stroke="blue" points="4618.29,-6287.89 4628.77,-6286.29 4619.58,-6281.01 4618.29,-6287.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.65,-4980.48C4433,-4987.06 4447.9,-4996.55 4460,-5009.86 4508.85,-5063.61 4440.31,-6262.09 4488,-6316.86 4518.1,-6351.43 4573.41,-6354.01 4612.33,-6350.69"/>
<polygon fill="blue" stroke="blue" points="4612.74,-6354.16 4622.34,-6349.67 4612.04,-6347.2 4612.74,-6354.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential(). -->
<g id="node447" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().</title>
<g id="a_node447"><a xlink:title="fn test_room_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; RoomCredential&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair = Blindin...">
<polygon fill="white" stroke="black" points="4309,-4730.86 4149,-4730.86 4149,-4694.86 4309,-4694.86 4309,-4730.86"/>
<text text-anchor="middle" x="4229" y="-4709.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_room_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4253.94,-4694.75C4297.61,-4662.98 4394.38,-4598.33 4488,-4574.86 4638.46,-4537.15 5070.01,-4471.88 5186,-4574.86 5254.8,-4635.95 5288.31,-5320.62 5294.81,-5469.43"/>
<polygon fill="blue" stroke="blue" points="5291.32,-5469.74 5295.25,-5479.58 5298.32,-5469.44 5291.32,-5469.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4309.12,-4698.76C4359.71,-4694.68 4422.61,-4699.69 4460,-4739.86 4507.13,-4790.51 4445.66,-5307.15 4488,-5361.86 4584.2,-5486.16 4717.39,-5352.25 4826,-5465.86 4870.1,-5511.99 4842.12,-5544.22 4862,-5604.86 4907.94,-5745.03 4978.38,-5907.05 5006.64,-5970.44"/>
<polygon fill="blue" stroke="blue" points="5003.53,-5972.05 5010.8,-5979.75 5009.92,-5969.19 5003.53,-5972.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node448" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node448"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="4328.5,-4838.86 4129.5,-4838.86 4129.5,-4802.86 4328.5,-4802.86 4328.5,-4838.86"/>
<text text-anchor="middle" x="4229" y="-4817.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.51,-4806.82C4374.38,-4806.04 4426.18,-4814.31 4460,-4847.86 4530.92,-4918.21 4416.91,-5000.69 4488,-5070.86 4541.79,-5123.96 4757.67,-5076.56 4826,-5108.86 4846.17,-5118.4 4842.11,-5133.74 4862,-5143.86 4892.23,-5159.25 4929.52,-5166.09 4960.18,-5169.04"/>
<polygon fill="blue" stroke="blue" points="4960.04,-5172.54 4970.3,-5169.9 4960.63,-5165.57 4960.04,-5172.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.61,-4834.42C4374.23,-4835.02 4425.77,-4826.72 4460,-4793.86 4517.14,-4739.01 4427.75,-4669.28 4488,-4617.86 4546.99,-4567.52 5127.86,-4566.54 5186,-4617.86 5251.6,-4675.77 5287.43,-5324.75 5294.64,-5469.4"/>
<polygon fill="blue" stroke="blue" points="5291.16,-5469.84 5295.14,-5479.66 5298.15,-5469.5 5291.16,-5469.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.58,-4805.39C4375.2,-4804.04 4427.61,-4812.24 4460,-4847.86 4508.04,-4900.7 4441.1,-6079.02 4488,-6132.86 4519.75,-6169.31 4579.54,-6170.2 4618.56,-6166.09"/>
<polygon fill="blue" stroke="blue" points="4619.47,-6169.51 4628.97,-6164.83 4618.62,-6162.56 4619.47,-6169.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.57,-4805.41C4375.18,-4804.05 4427.6,-4812.26 4460,-4847.86 4506.04,-4898.46 4443.04,-6027.3 4488,-6078.86 4520.03,-6115.6 4580.56,-6116.2 4619.54,-6111.98"/>
<polygon fill="blue" stroke="blue" points="4620.43,-6115.4 4629.93,-6110.69 4619.57,-6108.45 4620.43,-6115.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.55,-4805.42C4375.16,-4804.07 4427.58,-4812.27 4460,-4847.86 4504.05,-4896.21 4444.99,-5975.59 4488,-6024.86 4517.96,-6059.19 4572.79,-6061.95 4611.65,-6058.73"/>
<polygon fill="blue" stroke="blue" points="4612.06,-6062.21 4621.66,-6057.74 4611.37,-6055.24 4612.06,-6062.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.52,-4805.71C4374.97,-4804.48 4427.26,-4812.7 4460,-4847.86 4506.83,-4898.18 4441.04,-5415.67 4488,-5465.86 4539.63,-5521.06 4766.76,-5456.92 4826,-5503.86 4863.35,-5533.46 4845.16,-5560.28 4862,-5604.86 4914.13,-5742.85 4981.05,-5906.11 5007.51,-5970.14"/>
<polygon fill="blue" stroke="blue" points="5004.34,-5971.64 5011.4,-5979.54 5010.81,-5968.97 5004.34,-5971.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.6,-4805.38C4375.22,-4804.01 4427.64,-4812.22 4460,-4847.86 4510.99,-4904.02 4446.38,-6149.45 4488,-6212.86 4517.15,-6257.28 4578.88,-6276.45 4618.84,-6284.45"/>
<polygon fill="blue" stroke="blue" points="4618.28,-6287.91 4628.75,-6286.3 4619.56,-6281.03 4618.28,-6287.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.62,-4805.36C4375.25,-4803.99 4427.66,-4812.2 4460,-4847.86 4514.83,-4908.33 4434.47,-6255.24 4488,-6316.86 4518.05,-6351.46 4573.38,-6354.04 4612.31,-6350.7"/>
<polygon fill="blue" stroke="blue" points="4612.73,-6354.18 4622.32,-6349.69 4612.02,-6347.22 4612.73,-6354.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node449" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node449"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4266,-4946.86 4192,-4946.86 4192,-4910.86 4266,-4910.86 4266,-4946.86"/>
<text text-anchor="middle" x="4229" y="-4925.16" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.17,-4920.5C4317.54,-4911.01 4410.84,-4903.03 4460,-4955.86 4507.28,-5006.67 4440.75,-5529.03 4488,-5579.86 4590.99,-5690.66 4724.97,-5507.28 4826,-5619.86 4860.48,-5658.29 4856.89,-9285.49 4862,-9336.86 4893.41,-9652.4 4985.38,-10027.38 5011.82,-10131.1"/>
<polygon fill="blue" stroke="blue" points="5008.43,-10132 5014.3,-10140.81 5015.21,-10130.26 5008.43,-10132"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.23,-4934.84C4315.18,-4940.83 4402.86,-4943.94 4460,-4901.86 4484.67,-4883.69 4462.31,-4855.56 4488,-4838.86 4553.03,-4796.6 5131.03,-4784.15 5186,-4838.86 5207.5,-4860.27 5204.5,-9177.56 5206,-9207.86 5224.11,-9573.72 5277.97,-10016.19 5292.4,-10130.73"/>
<polygon fill="blue" stroke="blue" points="5288.95,-10131.29 5293.68,-10140.78 5295.89,-10130.41 5288.95,-10131.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.32,-4920.36C4317.88,-4910.7 4411.4,-4902.51 4460,-4955.86 4504.05,-5004.21 4444.99,-6083.59 4488,-6132.86 4519.78,-6169.28 4579.57,-6170.17 4618.57,-6166.08"/>
<polygon fill="blue" stroke="blue" points="4619.48,-6169.49 4628.98,-6164.82 4618.64,-6162.55 4619.48,-6169.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.31,-4920.37C4317.86,-4910.72 4411.37,-4902.54 4460,-4955.86 4502.06,-5001.97 4446.93,-6031.87 4488,-6078.86 4520.07,-6115.56 4580.58,-6116.17 4619.56,-6111.97"/>
<polygon fill="blue" stroke="blue" points="4620.44,-6115.38 4629.94,-6110.68 4619.58,-6108.44 4620.44,-6115.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.15,-4920.52C4317.5,-4911.05 4410.76,-4903.1 4460,-4955.86 4504.47,-5003.52 4444.11,-5493.67 4488,-5541.86 4590.17,-5654.04 4721.89,-5479.48 4826,-5589.86 4892.55,-5660.43 4817.93,-5938.45 4862,-6024.86 4888.95,-6077.71 4946.39,-6118.52 4983.81,-6140.85"/>
<polygon fill="blue" stroke="blue" points="4982.47,-6144.12 4992.87,-6146.13 4985.99,-6138.07 4982.47,-6144.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.33,-4920.35C4317.9,-4910.68 4411.44,-4902.48 4460,-4955.86 4507,-5007.53 4449.62,-6154.5 4488,-6212.86 4517.19,-6257.25 4578.9,-6276.43 4618.86,-6284.44"/>
<polygon fill="blue" stroke="blue" points="4618.29,-6287.9 4628.76,-6286.29 4619.57,-6281.02 4618.29,-6287.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.34,-4920.34C4317.93,-4910.66 4411.48,-4902.44 4460,-4955.86 4510.84,-5011.85 4438.36,-6259.81 4488,-6316.86 4518.08,-6351.44 4573.4,-6354.02 4612.32,-6350.69"/>
<polygon fill="blue" stroke="blue" points="4612.74,-6354.17 4622.33,-6349.68 4612.03,-6347.21 4612.74,-6354.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node450" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node450"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="4452,-4892.86 4006,-4892.86 4006,-4856.86 4452,-4856.86 4452,-4892.86"/>
<text text-anchor="middle" x="4229" y="-4871.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge713" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.09,-4893.2C4453.54,-4895.88 4456.85,-4898.76 4460,-4901.86 4526.22,-4966.93 4421.62,-5043.96 4488,-5108.86 4542.04,-5161.7 4750.94,-5137.98 4826,-5146.86 4871.09,-5152.2 4922.07,-5158.55 4960.31,-5163.38"/>
<polygon fill="blue" stroke="blue" points="4959.88,-5166.86 4970.24,-5164.64 4960.76,-5159.91 4959.88,-5166.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge717" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4449.56,-4856.83C4453.19,-4854.06 4456.68,-4851.08 4460,-4847.86 4520.36,-4789.39 4424.33,-4715.71 4488,-4660.86 4546.76,-4610.25 5127.7,-4609.72 5186,-4660.86 5248.42,-4715.62 5286.53,-5329.3 5294.45,-5469.47"/>
<polygon fill="blue" stroke="blue" points="5290.98,-5470.01 5295.03,-5479.8 5297.97,-5469.62 5290.98,-5470.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge714" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.03,-4893.12C4454.16,-4895.83 4457.16,-4898.74 4460,-4901.86 4506.04,-4952.46 4443.04,-6081.3 4488,-6132.86 4519.76,-6169.29 4579.55,-6170.19 4618.57,-6166.09"/>
<polygon fill="blue" stroke="blue" points="4619.47,-6169.5 4628.98,-6164.82 4618.63,-6162.55 4619.47,-6169.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge720" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.03,-4893.12C4454.16,-4895.83 4457.16,-4898.74 4460,-4901.86 4504.05,-4950.21 4444.99,-6029.59 4488,-6078.86 4520.05,-6115.58 4580.57,-6116.19 4619.55,-6111.97"/>
<polygon fill="blue" stroke="blue" points="4620.44,-6115.39 4629.93,-6110.69 4619.58,-6108.44 4620.44,-6115.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge716" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.02,-4893.13C4454.16,-4895.84 4457.16,-4898.74 4460,-4901.86 4502.06,-4947.97 4446.93,-5977.87 4488,-6024.86 4517.98,-6059.17 4572.81,-6061.94 4611.66,-6058.72"/>
<polygon fill="blue" stroke="blue" points="4612.06,-6062.2 4621.67,-6057.73 4611.37,-6055.23 4612.06,-6062.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge715" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.93,-4893.21C4454.09,-4895.89 4457.12,-4898.77 4460,-4901.86 4505.65,-4950.85 4442.94,-5454.33 4488,-5503.86 4590.1,-5616.1 4705.37,-5459.83 4826,-5551.86 4862.17,-5579.46 4974.37,-5877.09 5008.83,-5970.19"/>
<polygon fill="blue" stroke="blue" points="5005.62,-5971.61 5012.37,-5979.78 5012.19,-5969.18 5005.62,-5971.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge719" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.04,-4893.11C4454.17,-4895.83 4457.16,-4898.74 4460,-4901.86 4509,-4955.78 4448,-6151.97 4488,-6212.86 4517.17,-6257.27 4578.89,-6276.44 4618.85,-6284.45"/>
<polygon fill="blue" stroke="blue" points="4618.28,-6287.9 4628.75,-6286.3 4619.57,-6281.02 4618.28,-6287.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge718" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.04,-4893.11C4454.17,-4895.82 4457.16,-4898.74 4460,-4901.86 4512.83,-4960.09 4436.41,-6257.52 4488,-6316.86 4518.07,-6351.45 4573.39,-6354.03 4612.31,-6350.7"/>
<polygon fill="blue" stroke="blue" points="4612.73,-6354.17 4622.33,-6349.68 4612.03,-6347.21 4612.73,-6354.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node451" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node451"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="4297.5,-5054.86 4160.5,-5054.86 4160.5,-5018.86 4297.5,-5018.86 4297.5,-5054.86"/>
<text text-anchor="middle" x="4229" y="-5033.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge756" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.56,-5035.13C4348.46,-5037.5 4416.67,-5049.06 4460,-5089.86 4492.05,-5120.04 4452.75,-5158.5 4488,-5184.86 4561,-5239.45 4837.92,-5201.38 4960.27,-5181.21"/>
<polygon fill="blue" stroke="blue" points="4960.93,-5184.65 4970.21,-5179.55 4959.78,-5177.74 4960.93,-5184.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge758" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.66,-5048.68C4348.96,-5053.48 4417.63,-5050.35 4460,-5009.86 4515.68,-4956.66 4429.31,-4888.73 4488,-4838.86 4724.42,-4638.01 4949.27,-4638.37 5186,-4838.86 5283.97,-4921.83 5294.76,-5354.04 5295.88,-5469.49"/>
<polygon fill="blue" stroke="blue" points="5292.39,-5469.68 5295.97,-5479.65 5299.39,-5469.62 5292.39,-5469.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge757" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.67,-5031.99C4350.77,-5032.28 4421.87,-5042.57 4460,-5089.86 4536.89,-5185.24 4407.95,-7202.12 4488,-7294.86 4519.72,-7331.61 4579.93,-7332.31 4618.99,-7328.09"/>
<polygon fill="blue" stroke="blue" points="4619.43,-7331.57 4628.92,-7326.87 4618.57,-7324.62 4619.43,-7331.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge755" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.62,-5032.04C4350.69,-5032.35 4421.77,-5042.65 4460,-5089.86 4488.86,-5125.51 4480.57,-6695.6 4488,-6740.86 4520.39,-6938.11 4611.18,-7163.01 4643.98,-7240.19"/>
<polygon fill="blue" stroke="blue" points="4640.89,-7241.86 4648.04,-7249.67 4647.33,-7239.1 4640.89,-7241.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge760" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.52,-5032.12C4350.53,-5032.47 4421.58,-5042.8 4460,-5089.86 4499.47,-5138.21 4453.64,-6160.76 4488,-6212.86 4517.25,-6257.21 4578.95,-6276.41 4618.88,-6284.43"/>
<polygon fill="blue" stroke="blue" points="4618.3,-6287.88 4628.78,-6286.28 4619.59,-6281 4618.3,-6287.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge759" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.55,-5032.1C4350.57,-5032.44 4421.63,-5042.76 4460,-5089.86 4503.06,-5142.73 4443.19,-6265.47 4488,-6316.86 4518.12,-6351.4 4573.43,-6354 4612.34,-6350.68"/>
<polygon fill="blue" stroke="blue" points="4612.75,-6354.15 4622.35,-6349.66 4612.05,-6347.19 4612.75,-6354.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node452" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node452"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="4294.5,-4784.86 4163.5,-4784.86 4163.5,-4748.86 4294.5,-4748.86 4294.5,-4784.86"/>
<text text-anchor="middle" x="4229" y="-4763.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge780" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4294.59,-4755.04C4346.41,-4749.57 4417.32,-4751.82 4460,-4793.86 4527.39,-4860.25 4420.44,-4938.64 4488,-5004.86 4541.98,-5057.77 4752.56,-5024.97 4826,-5042.86 4877.1,-5055.32 4932.96,-5077.77 4971.37,-5094.69"/>
<polygon fill="blue" stroke="blue" points="4970.19,-5097.99 4980.75,-5098.86 4973.03,-5091.6 4970.19,-5097.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge781" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4294.52,-4754.87C4346.48,-4749.25 4417.62,-4751.38 4460,-4793.86 4537.08,-4871.15 4410.16,-4961.33 4488,-5037.86 4541.81,-5090.77 4763.93,-5027.94 4826,-5070.86 4855.75,-5091.44 4833.02,-5122.22 4862,-5143.86 4889.89,-5164.7 4928.31,-5171.57 4960.17,-5173.17"/>
<polygon fill="blue" stroke="blue" points="4960.14,-5176.67 4970.26,-5173.52 4960.38,-5169.68 4960.14,-5176.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node453" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node453"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="3391.5,-5866.86 3124.5,-5866.86 3124.5,-5830.86 3391.5,-5830.86 3391.5,-5866.86"/>
<text text-anchor="middle" x="3258" y="-5845.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge570" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.57,-5838.46C3450.4,-5841.42 3515.37,-5856.51 3556,-5901.86 3600.43,-5951.46 3530.52,-6152.22 3576,-6200.86 3615.26,-6242.86 3686.36,-6242.11 3732.35,-6236.16"/>
<polygon fill="blue" stroke="blue" points="3732.93,-6239.62 3742.33,-6234.74 3731.94,-6232.69 3732.93,-6239.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge571" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.83,-5836.55C3587.65,-5819.82 3935.35,-5796.04 3978,-5833.86 4033.6,-5883.17 3949.81,-5943.3 3998,-5999.86 4046.39,-6056.66 4140.11,-6066.25 4191.72,-6066.91"/>
<polygon fill="blue" stroke="blue" points="4191.75,-6070.41 4201.76,-6066.93 4191.77,-6063.41 4191.75,-6070.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge572" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.65,-5838.74C3450.32,-5841.81 3515.13,-5856.91 3556,-5901.86 3592.75,-5942.28 3538.41,-6107.23 3576,-6146.86 3617.39,-6190.49 3693.17,-6187.76 3738.63,-6181.21"/>
<polygon fill="blue" stroke="blue" points="3739.34,-6184.65 3748.68,-6179.64 3738.25,-6177.73 3739.34,-6184.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge567" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.73,-5861.6C3588.34,-5881.73 3938.17,-5922.97 3978,-5964.86 4034.07,-6023.84 3940.67,-6089.11 3998,-6146.86 4048.74,-6197.98 4141.11,-6190.78 4191.99,-6181.84"/>
<polygon fill="blue" stroke="blue" points="4192.7,-6185.27 4201.89,-6179.99 4191.41,-6178.39 4192.7,-6185.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge569" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.72,-5843.82C3587.84,-5837.74 3936.49,-5832.71 3978,-5871.86 4013.87,-5905.7 3963.6,-6057.53 3998,-6092.86 4046.38,-6142.55 4133.99,-6137.54 4186,-6128.98"/>
<polygon fill="blue" stroke="blue" points="4186.66,-6132.42 4195.9,-6127.23 4185.45,-6125.52 4186.66,-6132.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge568" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3361.85,-5866.88C3425.56,-5871.86 3504.74,-5865.9 3556,-5818.86 3591.32,-5786.45 3546.71,-5750.81 3576,-5712.86 3702.82,-5548.56 3795.51,-5558.42 3998,-5512.86 4198.33,-5467.8 4296.56,-5388.57 4460,-5512.86 4497.08,-5541.06 4454.1,-5581.92 4488,-5613.86 4519.75,-5643.78 4570.05,-5651.27 4607.35,-5652.18"/>
<polygon fill="blue" stroke="blue" points="4607.46,-5655.68 4617.5,-5652.28 4607.53,-5648.68 4607.46,-5655.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node454" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node454"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="3969,-6932.86 3585,-6932.86 3585,-6896.86 3969,-6896.86 3969,-6932.86"/>
<text text-anchor="middle" x="3777" y="-6911.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3955.53,-6932.92C3963.24,-6935.55 3970.77,-6938.51 3978,-6941.86 3988.85,-6946.89 3987.1,-6954.93 3998,-6959.86 4061.55,-6988.61 4144.59,-6990.8 4191.53,-6989.22"/>
<polygon fill="blue" stroke="blue" points="4191.96,-6992.7 4201.81,-6988.79 4191.67,-6985.71 4191.96,-6992.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3831.65,-6896.86C3875.83,-6882.67 3940.35,-6863.42 3998,-6851.86 4062.87,-6838.86 4139.37,-6831.42 4185.75,-6827.76"/>
<polygon fill="blue" stroke="blue" points="4186.04,-6831.25 4195.74,-6826.99 4185.5,-6824.27 4186.04,-6831.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3804.01,-6896.85C3843.8,-6870.3 3923.06,-6821.28 3998,-6797.86 4064.22,-6777.17 4145.67,-6772.11 4191.73,-6771"/>
<polygon fill="blue" stroke="blue" points="4191.89,-6774.5 4201.82,-6770.81 4191.76,-6767.5 4191.89,-6774.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3813.15,-6896.7C3860.69,-6869.92 3943.49,-6814.91 3978,-6740.86 4004.83,-6683.3 3952.7,-5642.38 3998,-5597.86 4144.46,-5453.95 4264.46,-5535.2 4460,-5597.86 4474.56,-5602.53 4473.94,-5611.85 4488,-5617.86 4526.1,-5634.16 4572.59,-5642.2 4607,-5646.14"/>
<polygon fill="blue" stroke="blue" points="4606.95,-5649.65 4617.26,-5647.24 4607.69,-5642.69 4606.95,-5649.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node455" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node455"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="3970,-7040.86 3584,-7040.86 3584,-7004.86 3970,-7004.86 3970,-7040.86"/>
<text text-anchor="middle" x="3777" y="-7019.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3968.63,-7040.87C3971.93,-7043.63 3975.06,-7046.62 3978,-7049.86 4018.49,-7094.5 3957.13,-7547.58 3998,-7591.86 4045.17,-7642.96 4133.6,-7637.34 4186,-7628.31"/>
<polygon fill="blue" stroke="blue" points="4186.77,-7631.73 4195.97,-7626.48 4185.5,-7624.84 4186.77,-7631.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3968.59,-7040.9C3971.9,-7043.65 3975.04,-7046.63 3978,-7049.86 4011.4,-7086.39 3967.65,-7455.77 3998,-7494.86 4034.59,-7542 4102.05,-7558.32 4154.48,-7563.54"/>
<polygon fill="blue" stroke="blue" points="4154.49,-7567.06 4164.75,-7564.44 4155.1,-7560.08 4154.49,-7567.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3969.12,-7004.61C3972.24,-7001.92 3975.21,-6999.01 3978,-6995.86 4026.76,-6940.93 3946.62,-5726.35 3998,-5673.86 4040.27,-5630.68 4461.66,-5642.46 4607.01,-5647.87"/>
<polygon fill="blue" stroke="blue" points="4607.27,-5651.38 4617.4,-5648.26 4607.54,-5644.39 4607.27,-5651.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node456" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node456"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="3855,-7094.86 3699,-7094.86 3699,-7058.86 3855,-7058.86 3855,-7094.86"/>
<text text-anchor="middle" x="3777" y="-7073.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge550" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.38,-7076.4C3898.4,-7080.58 3948.95,-7093.76 3978,-7129.86 4010.21,-7169.9 3963.03,-7554.22 3998,-7591.86 4045.2,-7642.67 4133.22,-7637.27 4185.62,-7628.34"/>
<polygon fill="blue" stroke="blue" points="4186.39,-7631.75 4195.6,-7626.52 4185.14,-7624.87 4186.39,-7631.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge556" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.24,-7076.28C3898.35,-7080.42 3949.05,-7093.57 3978,-7129.86 4017.52,-7179.4 3955.06,-7653.26 3998,-7699.86 4044.61,-7750.45 4131.65,-7745.48 4184.26,-7736.62"/>
<polygon fill="blue" stroke="blue" points="4185.08,-7740.03 4194.3,-7734.81 4183.84,-7733.14 4185.08,-7740.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge554" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.23,-7076.52C3898.19,-7080.75 3948.75,-7093.93 3978,-7129.86 4029.28,-7192.86 3947.87,-7430.94 3998,-7494.86 4034.82,-7541.82 4102.25,-7558.16 4154.62,-7563.44"/>
<polygon fill="blue" stroke="blue" points="4154.6,-7566.95 4164.88,-7564.35 4155.23,-7559.98 4154.6,-7566.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge553" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.19,-7076.32C3898.28,-7080.47 3948.98,-7093.62 3978,-7129.86 4013.87,-7174.65 3959.04,-7603.74 3998,-7645.86 4046.65,-7698.47 4139.03,-7690.92 4190.68,-7681.47"/>
<polygon fill="blue" stroke="blue" points="4191.6,-7684.86 4200.75,-7679.51 4190.26,-7677.98 4191.6,-7684.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge555" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.05,-7076.22C3898.23,-7080.3 3949.07,-7093.44 3978,-7129.86 4022.94,-7186.44 3949.5,-7726.31 3998,-7779.86 4032.07,-7817.48 4088.34,-7825.33 4136.69,-7823.6"/>
<polygon fill="blue" stroke="blue" points="4137.07,-7827.09 4146.88,-7823.1 4136.72,-7820.1 4137.07,-7827.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge552" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.08,-7076.19C3898.27,-7080.27 3949.11,-7093.4 3978,-7129.86 4026.8,-7191.46 3944.95,-7778.89 3998,-7836.86 4040.46,-7883.26 4116.9,-7883.04 4169.94,-7875.85"/>
<polygon fill="blue" stroke="blue" points="4170.51,-7879.3 4179.89,-7874.38 4169.49,-7872.37 4170.51,-7879.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge551" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.15,-7088.48C3897.8,-7090.17 3948.08,-7083.5 3978,-7049.86 4020.4,-7002.2 3961.39,-5954.1 3998,-5901.86 4071.79,-5796.56 4468.17,-5694.26 4607.51,-5661.05"/>
<polygon fill="blue" stroke="blue" points="4608.56,-5664.4 4617.48,-5658.68 4606.95,-5657.58 4608.56,-5664.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node457" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node457"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="3918.5,-6986.86 3635.5,-6986.86 3635.5,-6950.86 3918.5,-6950.86 3918.5,-6986.86"/>
<text text-anchor="middle" x="3777" y="-6965.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge734" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.53,-6974.48C4013.7,-6978.29 4132.45,-6983.04 4191.35,-6985.4"/>
<polygon fill="blue" stroke="blue" points="4191.5,-6988.91 4201.63,-6985.81 4191.78,-6981.91 4191.5,-6988.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge730" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.63,-6971.75C3940.57,-6966.38 3961.42,-6957.09 3978,-6941.86 4008.17,-6914.14 3967.59,-6879.33 3998,-6851.86 4049.09,-6805.73 4134.71,-6809.23 4185.83,-6816.6"/>
<polygon fill="blue" stroke="blue" points="4185.46,-6820.09 4195.88,-6818.17 4186.54,-6813.17 4185.46,-6820.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge731" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.53,-6957.62C4009.95,-6950.31 4123.13,-6941.25 4184.11,-6936.37"/>
<polygon fill="blue" stroke="blue" points="4184.47,-6939.86 4194.16,-6935.57 4183.91,-6932.88 4184.47,-6939.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge735" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.62,-6966.71C3939.75,-6961.75 3960.35,-6953.91 3978,-6941.86 3993.12,-6931.54 3982.79,-6916.05 3998,-6905.86 4056.35,-6866.77 4142.16,-6868.46 4190.78,-6873.47"/>
<polygon fill="blue" stroke="blue" points="4190.53,-6876.97 4200.86,-6874.62 4191.32,-6870.01 4190.53,-6876.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge732" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.67,-6973.11C3940.87,-6967.66 3961.8,-6958 3978,-6941.86 4023.78,-6896.26 3951.83,-6843.07 3998,-6797.86 4049.33,-6747.6 4141.06,-6754.35 4191.79,-6763.01"/>
<polygon fill="blue" stroke="blue" points="4191.19,-6766.46 4201.66,-6764.81 4192.45,-6759.57 4191.19,-6766.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge737" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.7,-6962.77C3941.32,-6968.28 3962.39,-6978.45 3978,-6995.86 4036.18,-7060.74 3939.68,-7715.12 3998,-7779.86 4031.97,-7817.57 4088.24,-7825.42 4136.62,-7823.67"/>
<polygon fill="blue" stroke="blue" points="4137,-7827.16 4146.81,-7823.16 4136.65,-7820.17 4137,-7827.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge733" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.72,-6962.75C3941.34,-6968.26 3962.4,-6978.44 3978,-6995.86 4009.17,-7030.68 3966.53,-7802.31 3998,-7836.86 4040.35,-7883.35 4116.82,-7883.11 4169.89,-7875.89"/>
<polygon fill="blue" stroke="blue" points="4170.47,-7879.34 4179.85,-7874.42 4169.45,-7872.42 4170.47,-7879.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge736" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.59,-6975.15C3941.29,-6969.64 3962.42,-6959.42 3978,-6941.86 4026.17,-6887.6 3946.3,-5686.78 3998,-5635.86 4083.28,-5551.88 4469.68,-5614.73 4607.21,-5640.34"/>
<polygon fill="blue" stroke="blue" points="4606.59,-5643.78 4617.06,-5642.18 4607.88,-5636.9 4606.59,-5643.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node458" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node458"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="3329,-5152.86 3187,-5152.86 3187,-5116.86 3329,-5116.86 3329,-5152.86"/>
<text text-anchor="middle" x="3258" y="-5131.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.03,-5125.09C3397.93,-5119.85 3500.6,-5124.63 3556,-5187.86 3588.76,-5225.26 3542.17,-5598.43 3576,-5634.86 3698.43,-5766.72 3856.31,-5550.31 3978,-5682.86 4022.96,-5731.84 3968.75,-6221.16 3998,-6280.86 4037.05,-6360.56 4126.54,-6419 4181.67,-6449.03"/>
<polygon fill="blue" stroke="blue" points="4180.07,-6452.14 4190.54,-6453.78 4183.38,-6445.97 4180.07,-6452.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.22,-5124.67C3398.53,-5119.05 3501.76,-5123.47 3556,-5187.86 3586.54,-5224.12 3544.7,-8565.26 3576,-8600.86 3600.16,-8628.34 3637.89,-8637.89 3674.1,-8639.57"/>
<polygon fill="blue" stroke="blue" points="3674.17,-8643.08 3684.26,-8639.85 3674.36,-8636.08 3674.17,-8643.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.18,-5124.71C3398.46,-5119.11 3501.66,-5123.55 3556,-5187.86 3576.09,-5211.64 3573.04,-7397.88 3576,-7428.86 3616.83,-7856.81 3738.54,-8368.04 3769.02,-8491.87"/>
<polygon fill="blue" stroke="blue" points="3765.65,-8492.83 3771.45,-8501.69 3772.45,-8491.15 3765.65,-8492.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.22,-5124.67C3398.53,-5119.05 3501.75,-5123.47 3556,-5187.86 3586.06,-5223.54 3545.19,-8511.83 3576,-8546.86 3616.14,-8592.51 3693.73,-8588.69 3739.57,-8581.48"/>
<polygon fill="blue" stroke="blue" points="3740.4,-8584.89 3749.67,-8579.76 3739.23,-8577.99 3740.4,-8584.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.22,-5124.67C3398.53,-5119.04 3501.76,-5123.47 3556,-5187.86 3587.02,-5224.69 3544.21,-8618.7 3576,-8654.86 3613.21,-8697.19 3682.61,-8696.99 3729.06,-8690.99"/>
<polygon fill="blue" stroke="blue" points="3729.78,-8694.42 3739.18,-8689.54 3728.79,-8687.49 3729.78,-8694.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.23,-5124.67C3398.53,-5119.04 3501.76,-5123.46 3556,-5187.86 3587.5,-5225.27 3543.71,-8672.13 3576,-8708.86 3600,-8736.16 3637.39,-8745.77 3673.38,-8747.54"/>
<polygon fill="blue" stroke="blue" points="3673.39,-8751.04 3683.49,-8747.84 3673.6,-8744.05 3673.39,-8751.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.25,-5124.65C3398.58,-5119 3501.82,-5123.41 3556,-5187.86 3603.53,-5244.41 3527.28,-10451.33 3576,-10506.86 3612.63,-10548.61 3680.58,-10549.01 3727.01,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.7 3737.16,-10541.87 3726.78,-10539.76 3727.73,-10546.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node459" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node459"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="3386.5,-5044.86 3129.5,-5044.86 3129.5,-5008.86 3386.5,-5008.86 3386.5,-5044.86"/>
<text text-anchor="middle" x="3258" y="-5023.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge557" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3339.44,-5008.86C3406.86,-4998.96 3500.73,-4998.2 3556,-5053.86 3593.55,-5091.68 3538.52,-5254.97 3576,-5292.86 3639.11,-5356.65 3916.91,-5265.13 3978,-5330.86 4013.94,-5369.53 3975.07,-6233.32 3998,-6280.86 4036.55,-6360.8 4126.21,-6419.16 4181.5,-6449.11"/>
<polygon fill="blue" stroke="blue" points="4179.93,-6452.23 4190.4,-6453.84 4183.22,-6446.05 4179.93,-6452.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge559" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-5008.83C3402.71,-4997.37 3501.28,-4994.28 3556,-5053.86 3589.32,-5090.15 3543.47,-8563.86 3576,-8600.86 3600.16,-8628.34 3637.89,-8637.9 3674.1,-8639.58"/>
<polygon fill="blue" stroke="blue" points="3674.17,-8643.08 3684.26,-8639.85 3674.36,-8636.08 3674.17,-8643.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge561" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.17,-5008.86C3402.65,-4997.43 3501.2,-4994.36 3556,-5053.86 3578.35,-5078.13 3572.88,-7396.02 3576,-7428.86 3616.72,-7856.82 3738.51,-8368.05 3769.01,-8491.87"/>
<polygon fill="blue" stroke="blue" points="3765.65,-8492.83 3771.44,-8501.69 3772.44,-8491.15 3765.65,-8492.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge560" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-5008.83C3402.71,-4997.37 3501.28,-4994.28 3556,-5053.86 3588.82,-5089.59 3543.97,-8510.43 3576,-8546.86 3616.13,-8592.51 3693.72,-8588.69 3739.57,-8581.48"/>
<polygon fill="blue" stroke="blue" points="3740.4,-8584.89 3749.67,-8579.76 3739.23,-8577.99 3740.4,-8584.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge558" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-5008.86C3402.44,-4997.34 3501.25,-4994.13 3556,-5053.86 3607.17,-5109.7 3526.05,-10449.93 3576,-10506.86 3612.63,-10548.61 3680.57,-10549.01 3727.01,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.7 3737.16,-10541.87 3726.77,-10539.76 3727.73,-10546.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node460" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node460"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="3359.5,-5098.86 3156.5,-5098.86 3156.5,-5062.86 3359.5,-5062.86 3359.5,-5098.86"/>
<text text-anchor="middle" x="3258" y="-5077.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge775" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.02,-5062.85C3407.35,-5053.09 3500.75,-5052.55 3556,-5107.86 3591.16,-5143.07 3551.87,-5287.35 3576,-5330.86 3684.65,-5526.75 3875.13,-5435.88 3978,-5634.86 4010.98,-5698.65 3966.48,-6216.34 3998,-6280.86 4036.95,-6360.61 4126.47,-6419.03 4181.63,-6449.04"/>
<polygon fill="blue" stroke="blue" points="4180.04,-6452.16 4190.51,-6453.79 4183.34,-6445.99 4180.04,-6452.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge774" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-5062.83C3402.71,-5051.37 3501.28,-5048.28 3556,-5107.86 3588.82,-5143.59 3543.97,-8564.43 3576,-8600.86 3600.16,-8628.34 3637.89,-8637.9 3674.1,-8639.58"/>
<polygon fill="blue" stroke="blue" points="3674.17,-8643.08 3684.26,-8639.85 3674.36,-8636.08 3674.17,-8643.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge772" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.5,-5062.81C3402.96,-5051.43 3501.28,-5048.46 3556,-5107.86 3577.84,-5131.57 3572.94,-7396.77 3576,-7428.86 3616.76,-7856.82 3738.52,-8368.05 3769.02,-8491.87"/>
<polygon fill="blue" stroke="blue" points="3765.65,-8492.83 3771.45,-8501.69 3772.44,-8491.15 3765.65,-8492.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge773" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-5062.83C3402.71,-5051.38 3501.27,-5048.28 3556,-5107.86 3588.31,-5143.04 3544.46,-8510.99 3576,-8546.86 3616.14,-8592.51 3693.72,-8588.69 3739.57,-8581.48"/>
<polygon fill="blue" stroke="blue" points="3740.4,-8584.89 3749.67,-8579.76 3739.23,-8577.99 3740.4,-8584.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge771" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-5062.86C3402.44,-5051.34 3501.25,-5048.13 3556,-5107.86 3606.67,-5163.14 3526.55,-10450.5 3576,-10506.86 3612.63,-10548.61 3680.57,-10549.01 3727.01,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.7 3737.16,-10541.87 3726.77,-10539.76 3727.73,-10546.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node461" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node461"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="3377.5,-10300.86 3138.5,-10300.86 3138.5,-10264.86 3377.5,-10264.86 3377.5,-10300.86"/>
<text text-anchor="middle" x="3258" y="-10279.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-10300.91C3403.59,-10312.03 3501.14,-10314.61 3556,-10255.86 3589.98,-10219.47 3542.58,-9396.77 3576,-9359.86 3696.82,-9226.45 3854.92,-9442.19 3978,-9310.86 4031.88,-9253.37 3943.49,-9013.76 3998,-8956.86 4069.38,-8882.36 4390.12,-8986.77 4460,-8910.86 4491.48,-8876.67 4482.61,-7284.03 4488,-7237.86 4522.23,-6944.95 4618.81,-6599.32 4647.72,-6499.89"/>
<polygon fill="blue" stroke="blue" points="4651.16,-6500.59 4650.61,-6490.01 4644.44,-6498.63 4651.16,-6500.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-10300.9C3402.72,-10312.36 3501.28,-10315.45 3556,-10255.86 3589.77,-10219.09 3543.04,-6698.37 3576,-6660.86 3604.53,-6628.41 3651.99,-6620.96 3693.52,-6621.95"/>
<polygon fill="blue" stroke="blue" points="3693.52,-6625.45 3703.65,-6622.36 3693.8,-6618.46 3693.52,-6625.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-10300.9C3402.71,-10312.35 3501.27,-10315.44 3556,-10255.86 3587.68,-10221.38 3557.79,-6928 3576,-6884.86 3608.92,-6806.87 3689.24,-6744.03 3737.48,-6711.68"/>
<polygon fill="blue" stroke="blue" points="3739.67,-6714.42 3746.09,-6705.99 3735.82,-6708.58 3739.67,-6714.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.23,-10300.91C3402.74,-10312.38 3501.31,-10315.48 3556,-10255.86 3596.88,-10211.3 3549.6,-5956.27 3576,-5901.86 3607.21,-5837.57 3678.35,-5791.22 3726.8,-5765.7"/>
<polygon fill="blue" stroke="blue" points="3728.59,-5768.72 3735.87,-5761.03 3725.38,-5762.5 3728.59,-5768.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.93,-10264.84C3404.87,-10254.22 3500.91,-10252.4 3556,-10309.86 3587.79,-10343.03 3544.94,-10689.01 3576,-10722.86 3589.11,-10737.15 3605.9,-10746.52 3624.17,-10752.44"/>
<polygon fill="blue" stroke="blue" points="3623.27,-10755.82 3633.85,-10755.22 3625.21,-10749.09 3623.27,-10755.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3341.2,-10264.82C3408.32,-10255.36 3500.8,-10255.24 3556,-10309.86 3587.28,-10340.81 3545.4,-10475.24 3576,-10506.86 3614.5,-10546.66 3681.7,-10547.61 3727.48,-10542.51"/>
<polygon fill="blue" stroke="blue" points="3727.98,-10545.97 3737.47,-10541.26 3727.12,-10539.03 3727.98,-10545.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.35,-10264.81C3406.03,-10254.57 3500.88,-10253.33 3556,-10309.86 3603.42,-10358.49 3529.65,-10565.21 3576,-10614.86 3590.81,-10630.73 3610.16,-10640.49 3630.99,-10646.19"/>
<polygon fill="blue" stroke="blue" points="3630.44,-10649.66 3640.98,-10648.59 3632.08,-10642.85 3630.44,-10649.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.49,-10264.83C3405.32,-10254.37 3500.88,-10252.78 3556,-10309.86 3611.5,-10367.34 3521.76,-10610.19 3576,-10668.86 3583.39,-10676.86 3591.93,-10683.31 3601.24,-10688.47"/>
<polygon fill="blue" stroke="blue" points="3599.87,-10691.7 3610.38,-10693.04 3603,-10685.44 3599.87,-10691.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3339.16,-10264.86C3406.64,-10254.88 3500.75,-10254 3556,-10309.86 3595.34,-10349.65 3537.53,-10520.23 3576,-10560.86 3578.09,-10563.07 3580.27,-10565.16 3582.52,-10567.13"/>
<polygon fill="blue" stroke="blue" points="3580.47,-10569.97 3590.49,-10573.42 3584.81,-10564.48 3580.47,-10569.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.83,-10264.83C3404,-10253.88 3501.04,-10251.57 3556,-10309.86 3603.97,-10360.74 3529.15,-10886.95 3576,-10938.86 3586.69,-10950.71 3599.9,-10959.19 3614.4,-10965.13"/>
<polygon fill="blue" stroke="blue" points="3613.51,-10968.53 3624.1,-10968.69 3615.91,-10961.96 3613.51,-10968.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node462" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node462"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="3322,-10408.86 3194,-10408.86 3194,-10372.86 3322,-10372.86 3322,-10408.86"/>
<text text-anchor="middle" x="3258" y="-10387.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.06,-10381.67C3390.82,-10375.61 3498.68,-10378.48 3556,-10443.86 3588.33,-10480.75 3542.89,-10848.67 3576,-10884.86 3607.2,-10918.97 3659.36,-10925.09 3702.58,-10923.02"/>
<polygon fill="blue" stroke="blue" points="3703.03,-10926.5 3712.79,-10922.37 3702.59,-10919.51 3703.03,-10926.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.3,-10381.71C3391,-10375.74 3498.57,-10378.76 3556,-10443.86 3612.97,-10508.44 3517.67,-10767.51 3576,-10830.86 3617.17,-10875.58 3694.39,-10872.09 3739.89,-10865.19"/>
<polygon fill="blue" stroke="blue" points="3740.62,-10868.62 3749.92,-10863.54 3739.48,-10861.71 3740.62,-10868.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.09,-10384.5C3388.33,-10381.44 3491.62,-10387.4 3556,-10443.86 3578.09,-10463.23 3553.51,-10487.97 3576,-10506.86 3617.81,-10541.99 3682.84,-10544.35 3727.32,-10540.83"/>
<polygon fill="blue" stroke="blue" points="3727.69,-10544.31 3737.32,-10539.91 3727.05,-10537.34 3727.69,-10544.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption(). -->
<g id="node463" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().</title>
<g id="a_node463"><a xlink:title="fn test_blob_encryption() { &#160;&#160;&#160;&#160;let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1); &#160;&#160;&#160;&#160;let group_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::groups::GroupSecretParams::derive_from_m...">
<polygon fill="white" stroke="black" points="3338.5,-10246.86 3177.5,-10246.86 3177.5,-10210.86 3338.5,-10210.86 3338.5,-10246.86"/>
<text text-anchor="middle" x="3258" y="-10225.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_blob_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-10246.9C3403.58,-10258.02 3501.13,-10260.6 3556,-10201.86 3589.38,-10166.13 3543.17,-9358.1 3576,-9321.86 3696.85,-9188.48 3854.92,-9404.19 3978,-9272.86 4031.88,-9215.37 3943.31,-8975.58 3998,-8918.86 4069.57,-8844.64 4389.9,-8951.48 4460,-8875.86 4490.94,-8842.49 4482.71,-7283.06 4488,-7237.86 4522.28,-6944.96 4618.82,-6599.32 4647.73,-6499.89"/>
<polygon fill="blue" stroke="blue" points="4651.17,-6500.59 4650.61,-6490.01 4644.45,-6498.63 4651.17,-6500.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node464" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node464"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="3473.5,-10354.86 3042.5,-10354.86 3042.5,-10318.86 3473.5,-10318.86 3473.5,-10354.86"/>
<text text-anchor="middle" x="3258" y="-10333.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.89,-10354.89C3406.44,-10364.95 3500.8,-10365.95 3556,-10309.86 3576.87,-10288.66 3567.21,-10071.29 3576,-10042.86 3681.3,-9702.32 3875.37,-9690.22 3978,-9348.86 3988.83,-9312.84 3972.43,-9038.46 3998,-9010.86 4138.83,-8858.84 4322.45,-9102.86 4460,-8947.86 4491.53,-8912.33 4482.5,-7285.05 4488,-7237.86 4522.17,-6944.95 4618.79,-6599.32 4647.72,-6499.89"/>
<polygon fill="blue" stroke="blue" points="4651.16,-6500.59 4650.6,-6490.01 4644.44,-6498.63 4651.16,-6500.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3344.71,-10318.83C3411.15,-10310.25 3500.9,-10311.36 3556,-10363.86 3602.46,-10408.13 3530.51,-10461.59 3576,-10506.86 3615.13,-10545.81 3681.87,-10547.04 3727.4,-10542.23"/>
<polygon fill="blue" stroke="blue" points="3727.83,-10545.7 3737.35,-10541.05 3727,-10538.75 3727.83,-10545.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.12,-10318.82C3404.24,-10307.94 3501.04,-10305.74 3556,-10363.86 3599.92,-10410.31 3533.1,-10891.47 3576,-10938.86 3586.71,-10950.69 3599.93,-10959.16 3614.43,-10965.1"/>
<polygon fill="blue" stroke="blue" points="3613.55,-10968.5 3624.14,-10968.65 3615.95,-10961.93 3613.55,-10968.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node465" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node465"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="3355,-10192.86 3161,-10192.86 3161,-10156.86 3355,-10156.86 3355,-10192.86"/>
<text text-anchor="middle" x="3258" y="-10171.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge535" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3355.27,-10173.75C3423.22,-10167.28 3510.04,-10146.37 3556,-10084.86 3604.19,-10020.38 3522.81,-7247.29 3576,-7186.86 3615.95,-7141.48 3692.91,-7145.01 3738.84,-7152.13"/>
<polygon fill="blue" stroke="blue" points="3738.53,-7155.63 3748.97,-7153.84 3739.7,-7148.73 3738.53,-7155.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge536" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3355.27,-10173.74C3423.22,-10167.28 3510.04,-10146.36 3556,-10084.86 3603.29,-10021.58 3523.8,-7300.16 3576,-7240.86 3614.1,-7197.59 3685.85,-7198.79 3732.26,-7205.17"/>
<polygon fill="blue" stroke="blue" points="3731.91,-7208.66 3742.32,-7206.69 3732.96,-7201.74 3731.91,-7208.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge541" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3355.27,-10173.74C3423.21,-10167.28 3510.03,-10146.36 3556,-10084.86 3601.51,-10023.99 3525.77,-7405.9 3576,-7348.86 3606.72,-7313.98 3659.31,-7308 3702.86,-7310.33"/>
<polygon fill="blue" stroke="blue" points="3702.64,-7313.83 3712.85,-7311.02 3703.12,-7306.84 3702.64,-7313.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge538" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3355.17,-10173.67C3423.07,-10167.17 3509.87,-10146.24 3556,-10084.86 3582.62,-10049.44 3571.79,-8533.97 3576,-8489.86 3617.69,-8052.71 3739.01,-7529.82 3769.16,-7404.05"/>
<polygon fill="blue" stroke="blue" points="3772.62,-7404.62 3771.56,-7394.08 3765.82,-7402.98 3772.62,-7404.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge539" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3355.3,-10173.46C3423.04,-10166.84 3509.57,-10145.84 3556,-10084.86 3582.97,-10049.45 3546.12,-9316.85 3576,-9283.86 3696.87,-9150.42 3855.04,-9365.37 3978,-9233.86 4031.66,-9176.47 3943.15,-8937.12 3998,-8880.86 4069.91,-8807.1 4389.55,-8918.02 4460,-8842.86 4490.49,-8810.33 4482.81,-7282.15 4488,-7237.86 4522.33,-6944.96 4618.84,-6599.32 4647.73,-6499.89"/>
<polygon fill="blue" stroke="blue" points="4651.17,-6500.59 4650.61,-6490.01 4644.45,-6498.63 4651.17,-6500.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge537" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.12,-10156.82C3404.24,-10145.94 3501.04,-10143.74 3556,-10201.86 3599.92,-10248.31 3533.1,-10729.47 3576,-10776.86 3591.74,-10794.25 3612.92,-10804.39 3635.62,-10809.89"/>
<polygon fill="blue" stroke="blue" points="3634.93,-10813.32 3645.44,-10811.96 3636.38,-10806.47 3634.93,-10813.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge540" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.35,-10156.81C3406.03,-10146.57 3500.88,-10145.33 3556,-10201.86 3603.42,-10250.49 3529.65,-10457.21 3576,-10506.86 3613.79,-10547.34 3681.15,-10548.13 3727.16,-10542.81"/>
<polygon fill="blue" stroke="blue" points="3727.74,-10546.26 3737.21,-10541.51 3726.85,-10539.32 3727.74,-10546.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node466" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node466"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="3344,-4907.86 3172,-4907.86 3172,-4871.86 3344,-4871.86 3344,-4907.86"/>
<text text-anchor="middle" x="3258" y="-4886.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3321.6,-4871.83C3385.15,-4854.19 3486.63,-4827.86 3576,-4812.86 3664.49,-4798.01 3914.86,-4838.62 3978,-4774.86 4015.04,-4737.47 3959.24,-4574.47 3998,-4538.86 4035.8,-4504.13 4423.59,-4502.68 4460,-4538.86 4504.57,-4583.16 4447.51,-9014.81 4488,-9062.86 4516.39,-9096.56 4568.49,-9101.23 4607.17,-9099.23"/>
<polygon fill="blue" stroke="blue" points="4607.45,-9102.72 4617.19,-9098.55 4606.98,-9095.73 4607.45,-9102.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3344.06,-4879.03C3407.86,-4870.99 3497.36,-4859.91 3576,-4850.86 3665.25,-4840.6 3915.12,-4872.03 3978,-4807.86 4014.06,-4771.06 3960.03,-4611.69 3998,-4576.86 4035.83,-4542.17 4423.59,-4540.68 4460,-4576.86 4505.28,-4621.87 4446.44,-9125.39 4488,-9173.86 4497.69,-9185.16 4510.07,-9193.06 4523.7,-9198.45"/>
<polygon fill="blue" stroke="blue" points="4522.73,-9201.82 4533.33,-9201.8 4525.03,-9195.21 4522.73,-9201.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3344.27,-4894.77C3524.69,-4904.27 3932.31,-4920.76 3978,-4878.86 4010.27,-4849.27 3965.51,-4712.21 3998,-4682.86 4036.1,-4648.46 4423.6,-4646.67 4460,-4682.86 4508,-4730.58 4443.95,-9504.47 4488,-9555.86 4519.72,-9592.87 4580.33,-9593.39 4619.42,-9589.08"/>
<polygon fill="blue" stroke="blue" points="4620.35,-9592.49 4629.84,-9587.77 4619.48,-9585.55 4620.35,-9592.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3344.07,-4890.33C3524.58,-4890.46 3933.19,-4885.93 3978,-4842.86 4008.61,-4813.44 3966.45,-4681.27 3998,-4652.86 4074.3,-4584.17 4387.19,-4580.48 4460,-4652.86 4506.14,-4698.73 4446.09,-9287.11 4488,-9336.86 4519.36,-9374.1 4579.68,-9375.89 4618.86,-9372.4"/>
<polygon fill="blue" stroke="blue" points="4619.24,-9375.88 4628.82,-9371.36 4618.51,-9368.92 4619.24,-9375.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.04,-4871.85C3405.75,-4861.55 3500.82,-4860.21 3556,-4916.86 3604.17,-4966.31 3529.64,-5175.71 3576,-5226.86 3697.58,-5361.03 3821.97,-5201.02 3978,-5292.86 4275.48,-5467.96 4345.29,-5576.3 4460,-5901.86 4476.12,-5947.61 4456.39,-9357.07 4488,-9393.86 4519.63,-9430.68 4579.87,-9431.36 4618.96,-9427.12"/>
<polygon fill="blue" stroke="blue" points="4619.4,-9430.59 4628.9,-9425.89 4618.54,-9423.65 4619.4,-9430.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.04,-4871.85C3405.75,-4861.55 3500.82,-4860.21 3556,-4916.86 3604.17,-4966.31 3529.4,-5175.94 3576,-5226.86 3698.04,-5360.23 3821.91,-5197.67 3978,-5288.86 4277.25,-5463.7 4345.42,-5574.77 4460,-5901.86 4477.03,-5950.47 4454.45,-9570.79 4488,-9609.86 4519.75,-9646.84 4580.36,-9647.37 4619.44,-9643.07"/>
<polygon fill="blue" stroke="blue" points="4620.36,-9646.48 4629.85,-9641.76 4619.49,-9639.54 4620.36,-9646.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.96,-4871.81C3404.92,-4861.17 3500.98,-4859.34 3556,-4916.86 3589.29,-4951.67 3554.51,-5306.76 3576,-5349.86 3679.53,-5557.48 3878.37,-5473.34 3978,-5682.86 4005.33,-5740.34 3955.5,-7926.5 3998,-7973.86 4042.65,-8023.62 4126.33,-8020.13 4179.51,-8011.57"/>
<polygon fill="blue" stroke="blue" points="4180.13,-8015.02 4189.39,-8009.87 4178.94,-8008.12 4180.13,-8015.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.2,-4871.85C3405.07,-4861.32 3500.87,-4859.62 3556,-4916.86 3614.05,-4977.13 3521.68,-5229.22 3576,-5292.86 3694.62,-5431.83 3862.55,-5237.25 3978,-5378.86 4022.55,-5433.51 3951.27,-7864.07 3998,-7916.86 4043.54,-7968.31 4130.54,-7964.51 4183.51,-7956.25"/>
<polygon fill="blue" stroke="blue" points="4184.35,-7959.66 4193.63,-7954.55 4183.19,-7952.75 4184.35,-7959.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node467" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node467"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="3293.5,-4961.86 3222.5,-4961.86 3222.5,-4925.86 3293.5,-4925.86 3293.5,-4961.86"/>
<text text-anchor="middle" x="3258" y="-4940.16" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge710" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.77,-4937.64C3357.29,-4928.51 3491.46,-4920.08 3556,-4996.86 3604.27,-5054.3 3526.52,-10342.46 3576,-10398.86 3600.45,-10426.73 3638.85,-10436.17 3675.5,-10437.66"/>
<polygon fill="blue" stroke="blue" points="3675.7,-10441.17 3685.77,-10437.88 3675.85,-10434.17 3675.7,-10441.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge711" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.77,-4937.64C3357.29,-4928.51 3491.47,-4920.08 3556,-4996.86 3604.76,-5054.87 3526.03,-10395.9 3576,-10452.86 3589.34,-10468.07 3606.84,-10477.79 3625.94,-10483.73"/>
<polygon fill="blue" stroke="blue" points="3625.18,-10487.15 3635.75,-10486.42 3627.03,-10480.4 3625.18,-10487.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge708" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.77,-4937.64C3357.29,-4928.51 3491.47,-4920.08 3556,-4996.86 3605.24,-5055.45 3525.53,-10449.33 3576,-10506.86 3612.63,-10548.61 3680.57,-10549.01 3727.01,-10543.26"/>
<polygon fill="blue" stroke="blue" points="3727.73,-10546.7 3737.16,-10541.87 3726.77,-10539.76 3727.73,-10546.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge709" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.77,-4937.64C3357.28,-4928.52 3491.46,-4920.08 3556,-4996.86 3602.8,-5052.54 3528.43,-10178.84 3576,-10233.86 3586.45,-10245.96 3599.52,-10254.7 3613.93,-10260.89"/>
<polygon fill="blue" stroke="blue" points="3612.99,-10264.28 3623.58,-10264.61 3615.5,-10257.75 3612.99,-10264.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge707" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.77,-4937.64C3357.29,-4928.52 3491.46,-4920.08 3556,-4996.86 3603.79,-5053.72 3527.01,-10289.03 3576,-10344.86 3599.03,-10371.11 3634.44,-10381.01 3669.1,-10383.32"/>
<polygon fill="blue" stroke="blue" points="3669.18,-10386.83 3679.33,-10383.79 3669.5,-10379.84 3669.18,-10386.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge712" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.77,-4937.64C3357.28,-4928.52 3491.46,-4920.08 3556,-4996.86 3603.31,-5053.15 3527.51,-10235.59 3576,-10290.86 3589.8,-10306.59 3608.05,-10316.45 3627.92,-10322.33"/>
<polygon fill="blue" stroke="blue" points="3627.23,-10325.76 3637.79,-10324.9 3628.99,-10318.99 3627.23,-10325.76"/>
</g>
</g>
</svg>
