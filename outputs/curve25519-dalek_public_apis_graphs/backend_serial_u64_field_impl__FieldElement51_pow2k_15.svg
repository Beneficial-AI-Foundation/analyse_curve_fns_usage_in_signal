<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="5352pt" height="11224pt"
 viewBox="0.00 0.00 5352.00 11224.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 11220)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-11220 5348,-11220 5348,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4549,-8697 4549,-8826 4762,-8826 4762,-8697 4549,-8697"/>
<text text-anchor="middle" x="4655.5" y="-8810.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4992,-8702 4992,-8831 5112,-8831 5112,-8702 4992,-8702"/>
<text text-anchor="middle" x="5052" y="-8815.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4584.5,-9875 4584.5,-9950 4726.5,-9950 4726.5,-9875 4584.5,-9875"/>
<text text-anchor="middle" x="4655.5" y="-9934.8" font-family="Helvetica,sans-Serif" font-size="14.00">straus.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4790,-8584 4790,-8659 4972,-8659 4972,-8584 4790,-8584"/>
<text text-anchor="middle" x="4881" y="-8643.8" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_base.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5140.5,-8702 5140.5,-8831 5336,-8831 5336,-8702 5140.5,-8702"/>
<text text-anchor="middle" x="5238.25" y="-8815.8" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4233,-9468 4233,-9867 4948,-9867 4948,-9468 4233,-9468"/>
<text text-anchor="middle" x="4590.5" y="-9851.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4615,-8886 4615,-9015 5238,-9015 5238,-8886 4615,-8886"/>
<text text-anchor="middle" x="4926.5" y="-8999.8" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4315.5,-1076 4315.5,-1151 4446.5,-1151 4446.5,-1076 4315.5,-1076"/>
<text text-anchor="middle" x="4381" y="-1135.8" font-family="Helvetica,sans-Serif" font-size="14.00">jacobi_quartic.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3608,-1159 3608,-1396 4486,-1396 4486,-1159 3608,-1159"/>
<text text-anchor="middle" x="4047" y="-1380.8" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_ristretto.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4010,-9633 4010,-9708 4132,-9708 4132,-9633 4010,-9633"/>
<text text-anchor="middle" x="4071" y="-9692.8" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3985,-2236 3985,-2473 4479.5,-2473 4479.5,-2236 3985,-2236"/>
<text text-anchor="middle" x="4232.25" y="-2457.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4027.5,-8575 4027.5,-8650 4113.5,-8650 4113.5,-8575 4027.5,-8575"/>
<text text-anchor="middle" x="4070.5" y="-8634.8" font-family="Helvetica,sans-Serif" font-size="14.00">window.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3349,-10224 3349,-10353 4132,-10353 4132,-10224 3349,-10224"/>
<text text-anchor="middle" x="3740.5" y="-10337.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="32.5,-11079 32.5,-11208 284.5,-11208 284.5,-11079 32.5,-11079"/>
<text text-anchor="middle" x="158.5" y="-11192.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1365,-9631 1365,-10354 1655,-10354 1655,-9631 1365,-9631"/>
<text text-anchor="middle" x="1510" y="-10338.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="2414.5,-525 2414.5,-762 2627.5,-762 2627.5,-525 2414.5,-525"/>
<text text-anchor="middle" x="2521" y="-746.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="1212,-3314 1212,-5603 1808,-5603 1808,-3314 1212,-3314"/>
<text text-anchor="middle" x="1510" y="-5587.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="2023.5,-10499 2023.5,-10574 2573.5,-10574 2573.5,-10499 2023.5,-10499"/>
<text text-anchor="middle" x="2298.5" y="-10558.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="2820.5,-8098 2820.5,-8173 2924.5,-8173 2924.5,-8098 2820.5,-8098"/>
<text text-anchor="middle" x="2872.5" y="-8157.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="2782.5,-9523 2782.5,-9692 3570,-9692 3570,-9523 2782.5,-9523"/>
<text text-anchor="middle" x="3176.25" y="-9676.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="3304.5,-9700 3304.5,-9829 3832,-9829 3832,-9700 3304.5,-9700"/>
<text text-anchor="middle" x="3568.25" y="-9813.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="729,-10604 729,-10679 1118,-10679 1118,-10604 729,-10604"/>
<text text-anchor="middle" x="923.5" y="-10663.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1444,-10726 1444,-10855 1576,-10855 1576,-10726 1444,-10726"/>
<text text-anchor="middle" x="1510" y="-10839.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1956.5,-10726 1956.5,-10855 3215,-10855 3215,-10726 1956.5,-10726"/>
<text text-anchor="middle" x="2585.75" y="-10839.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="3305,-10581 3305,-10818 4213,-10818 4213,-10581 3305,-10581"/>
<text text-anchor="middle" x="3759" y="-10802.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="702,-6130 702,-6259 1605,-6259 1605,-6130 702,-6130"/>
<text text-anchor="middle" x="1153.5" y="-6243.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="735.5,-6047 735.5,-6122 1549,-6122 1549,-6047 735.5,-6047"/>
<text text-anchor="middle" x="1142.25" y="-6106.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="1397,-2957 1397,-3032 1623,-3032 1623,-2957 1397,-2957"/>
<text text-anchor="middle" x="1510" y="-3016.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="329,-10726 329,-11017 1152,-11017 1152,-10726 329,-10726"/>
<text text-anchor="middle" x="740.5" y="-11001.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-10726 8,-11071 309,-11071 309,-10726 8,-10726"/>
<text text-anchor="middle" x="158.5" y="-11055.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="1398.5,-5611 1398.5,-5740 1621.5,-5740 1621.5,-5611 1398.5,-5611"/>
<text text-anchor="middle" x="1510" y="-5724.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="3070.5,-10575 3070.5,-10650 3140.5,-10650 3140.5,-10575 3070.5,-10575"/>
<text text-anchor="middle" x="3105.5" y="-10634.8" font-family="Helvetica,sans-Serif" font-size="14.00">env.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="2380,-145 2380,-274 2927.5,-274 2927.5,-145 2380,-145"/>
<text text-anchor="middle" x="2653.75" y="-258.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="2478,-8 2478,-137 2564,-137 2564,-8 2478,-8"/>
<text text-anchor="middle" x="2521" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="2455.5,-6894 2455.5,-7023 2944.5,-7023 2944.5,-6894 2455.5,-6894"/>
<text text-anchor="middle" x="2700" y="-7007.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="2772,-7031 2772,-7126 3881,-7126 3881,-7031 2772,-7031"/>
<text text-anchor="middle" x="3326.5" y="-7110.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="729,-6811 729,-6886 820,-6886 820,-6811 729,-6811"/>
<text text-anchor="middle" x="774.5" y="-6870.8" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="733.5,-8302 733.5,-8377 1604,-8377 1604,-8302 733.5,-8302"/>
<text text-anchor="middle" x="1168.75" y="-8361.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="1444,-6757 1444,-6886 1577,-6886 1577,-6757 1444,-6757"/>
<text text-anchor="middle" x="1510.5" y="-6870.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="959,-6894 959,-6969 1605,-6969 1605,-6894 959,-6894"/>
<text text-anchor="middle" x="1282" y="-6953.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="2002.5,-8682 2002.5,-8811 2135.5,-8811 2135.5,-8682 2002.5,-8682"/>
<text text-anchor="middle" x="2069" y="-8795.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="1388,-10362 1388,-10491 2168.5,-10491 2168.5,-10362 1388,-10362"/>
<text text-anchor="middle" x="1778.25" y="-10475.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="2342,-9087 2342,-9270 2907.5,-9270 2907.5,-9087 2342,-9087"/>
<text text-anchor="middle" x="2624.75" y="-9254.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="1970,-9278 1970,-9515 2916,-9515 2916,-9278 1970,-9278"/>
<text text-anchor="middle" x="2443" y="-9499.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="1972,-8561 1972,-8636 2166,-8636 2166,-8561 1972,-8561"/>
<text text-anchor="middle" x="2069" y="-8620.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="2810,-8181 2810,-8256 2935,-8256 2935,-8181 2810,-8181"/>
<text text-anchor="middle" x="2872.5" y="-8240.8" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="1270.5,-8385 1270.5,-9054 1749.5,-9054 1749.5,-8385 1270.5,-8385"/>
<text text-anchor="middle" x="1510" y="-9038.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="1255.5,-9062 1255.5,-9623 1764.5,-9623 1764.5,-9062 1255.5,-9062"/>
<text text-anchor="middle" x="1510" y="-9607.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="1172,-6977 1172,-8294 2104,-8294 2104,-6977 1172,-6977"/>
<text text-anchor="middle" x="1638" y="-8278.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="1974,-8370 1974,-8553 2907.5,-8553 2907.5,-8370 1974,-8370"/>
<text text-anchor="middle" x="2440.75" y="-8537.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="2793,-371 2793,-762 3814,-762 3814,-371 2793,-371"/>
<text text-anchor="middle" x="3303.5" y="-746.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightblue" stroke="lightblue" points="1464.5,-388 1464.5,-517 2593,-517 2593,-388 1464.5,-388"/>
<text text-anchor="middle" x="2028.75" y="-501.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightblue" stroke="lightblue" points="3033.5,-5485 3033.5,-5560 3177.5,-5560 3177.5,-5485 3033.5,-5485"/>
<text text-anchor="middle" x="3105.5" y="-5544.8" font-family="Helvetica,sans-Serif" font-size="14.00">constants.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightblue" stroke="lightblue" points="2367.5,-770 2367.5,-953 2929.5,-953 2929.5,-770 2367.5,-770"/>
<text text-anchor="middle" x="2648.5" y="-937.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightblue" stroke="lightblue" points="2023.5,-1140 2023.5,-1215 2601,-1215 2601,-1140 2023.5,-1140"/>
<text text-anchor="middle" x="2312.25" y="-1199.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightblue" stroke="lightblue" points="3347.5,-1062 3347.5,-1137 3460.5,-1137 3460.5,-1062 3347.5,-1062"/>
<text text-anchor="middle" x="3404" y="-1121.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightblue" stroke="lightblue" points="3037,-2952 3037,-3135 3451.5,-3135 3451.5,-2952 3037,-2952"/>
<text text-anchor="middle" x="3244.25" y="-3119.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightblue" stroke="lightblue" points="2415,-2418 2415,-2763 3218,-2763 3218,-2418 2415,-2418"/>
<text text-anchor="middle" x="2816.5" y="-2747.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightblue" stroke="lightblue" points="2836.5,-2177 2836.5,-2306 3190.5,-2306 3190.5,-2177 2836.5,-2177"/>
<text text-anchor="middle" x="3013.5" y="-2290.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightblue" stroke="lightblue" points="2836.5,-5318 2836.5,-5447 3190.5,-5447 3190.5,-5318 2836.5,-5318"/>
<text text-anchor="middle" x="3013.5" y="-5431.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightblue" stroke="lightblue" points="2830,-5181 2830,-5310 3190.5,-5310 3190.5,-5181 2830,-5181"/>
<text text-anchor="middle" x="3010.25" y="-5294.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightblue" stroke="lightblue" points="3700.5,-1708 3700.5,-1783 3797.5,-1783 3797.5,-1708 3700.5,-1708"/>
<text text-anchor="middle" x="3749" y="-1767.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightblue" stroke="lightblue" points="972.5,-6321 972.5,-6396 1090.5,-6396 1090.5,-6321 972.5,-6321"/>
<text text-anchor="middle" x="1031.5" y="-6380.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightblue" stroke="lightblue" points="1357,-6267 1357,-6450 1663,-6450 1663,-6267 1357,-6267"/>
<text text-anchor="middle" x="1510" y="-6434.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightblue" stroke="lightblue" points="1966.5,-4307 1966.5,-4436 2172.5,-4436 2172.5,-4307 1966.5,-4307"/>
<text text-anchor="middle" x="2069.5" y="-4420.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightblue" stroke="lightblue" points="1977,-4816 1977,-5107 2621.5,-5107 2621.5,-4816 1977,-4816"/>
<text text-anchor="middle" x="2299.25" y="-5091.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightblue" stroke="lightblue" points="1361,-6458 1361,-6749 2907.5,-6749 2907.5,-6458 1361,-6458"/>
<text text-anchor="middle" x="2134.25" y="-6733.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust68" class="cluster">
<title>cluster_67</title>
<polygon fill="lightblue" stroke="lightblue" points="2449,-4056 2449,-4293 2593,-4293 2593,-4056 2449,-4056"/>
<text text-anchor="middle" x="2521" y="-4277.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust69" class="cluster">
<title>cluster_68</title>
<polygon fill="lightblue" stroke="lightblue" points="2478.5,-4483 2478.5,-4774 2907.5,-4774 2907.5,-4483 2478.5,-4483"/>
<text text-anchor="middle" x="2693" y="-4758.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust70" class="cluster">
<title>cluster_69</title>
<polygon fill="lightblue" stroke="lightblue" points="2464,-3919 2464,-4048 2578,-4048 2578,-3919 2464,-3919"/>
<text text-anchor="middle" x="2521" y="-4032.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust71" class="cluster">
<title>cluster_70</title>
<polygon fill="lightblue" stroke="lightblue" points="1985.5,-6145 1985.5,-6382 2627,-6382 2627,-6145 1985.5,-6145"/>
<text text-anchor="middle" x="2306.25" y="-6366.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust72" class="cluster">
<title>cluster_71</title>
<polygon fill="lightblue" stroke="lightblue" points="1910,-3124 1910,-3577 2228,-3577 2228,-3124 1910,-3124"/>
<text text-anchor="middle" x="2069" y="-3561.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust73" class="cluster">
<title>cluster_72</title>
<polygon fill="lightblue" stroke="lightblue" points="1994,-3949 1994,-4024 2144,-4024 2144,-3949 1994,-3949"/>
<text text-anchor="middle" x="2069" y="-4008.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust74" class="cluster">
<title>cluster_73</title>
<polygon fill="lightblue" stroke="lightblue" points="1874.5,-5468 1874.5,-6137 2713.5,-6137 2713.5,-5468 1874.5,-5468"/>
<text text-anchor="middle" x="2294" y="-6121.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust75" class="cluster">
<title>cluster_74</title>
<polygon fill="lightblue" stroke="lightblue" points="3300,-2534 3300,-2663 3508,-2663 3508,-2534 3300,-2534"/>
<text text-anchor="middle" x="3404" y="-2647.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust76" class="cluster">
<title>cluster_75</title>
<polygon fill="lightblue" stroke="lightblue" points="2011,-3728 2011,-3911 2941,-3911 2941,-3728 2011,-3728"/>
<text text-anchor="middle" x="2476" y="-3895.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust77" class="cluster">
<title>cluster_76</title>
<polygon fill="lightblue" stroke="lightblue" points="2444.5,-970 2444.5,-1099 2920,-1099 2920,-970 2444.5,-970"/>
<text text-anchor="middle" x="2682.25" y="-1083.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust78" class="cluster">
<title>cluster_77</title>
<polygon fill="lightblue" stroke="lightblue" points="2400,-3008 2400,-3083 2643,-3083 2643,-3008 2400,-3008"/>
<text text-anchor="middle" x="2521.5" y="-3067.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust79" class="cluster">
<title>cluster_78</title>
<polygon fill="lightblue" stroke="lightblue" points="2410.5,-1289 2410.5,-1418 2920,-1418 2920,-1289 2410.5,-1289"/>
<text text-anchor="middle" x="2665.25" y="-1402.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust80" class="cluster">
<title>cluster_79</title>
<polygon fill="lightblue" stroke="lightblue" points="2837.5,-2801 2837.5,-2876 3149,-2876 3149,-2801 2837.5,-2801"/>
<text text-anchor="middle" x="2993.25" y="-2860.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_struct.rs</text>
</g>
<g id="clust81" class="cluster">
<title>cluster_80</title>
<polygon fill="lightblue" stroke="lightblue" points="2482,-3159 2482,-3720 2560,-3720 2560,-3159 2482,-3159"/>
<text text-anchor="middle" x="2521" y="-3704.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust82" class="cluster">
<title>cluster_81</title>
<polygon fill="lightblue" stroke="lightblue" points="2003.5,-6757 2003.5,-6886 2557,-6886 2557,-6757 2003.5,-6757"/>
<text text-anchor="middle" x="2280.25" y="-6870.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust83" class="cluster">
<title>cluster_82</title>
<polygon fill="lightblue" stroke="lightblue" points="2437,-1426 2437,-1555 2920,-1555 2920,-1426 2437,-1426"/>
<text text-anchor="middle" x="2678.5" y="-1539.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust84" class="cluster">
<title>cluster_83</title>
<polygon fill="lightblue" stroke="lightblue" points="2802,-2087 2802,-2162 3149,-2162 3149,-2087 2802,-2087"/>
<text text-anchor="middle" x="2975.5" y="-2146.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_struct.rs</text>
</g>
<g id="clust85" class="cluster">
<title>cluster_84</title>
<polygon fill="lightblue" stroke="lightblue" points="2290,-5115 2290,-5460 2752,-5460 2752,-5115 2290,-5115"/>
<text text-anchor="middle" x="2521" y="-5444.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust86" class="cluster">
<title>cluster_85</title>
<polygon fill="lightblue" stroke="lightblue" points="1368.5,-3040 1368.5,-3115 1651.5,-3115 1651.5,-3040 1368.5,-3040"/>
<text text-anchor="middle" x="1510" y="-3099.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust87" class="cluster">
<title>cluster_86</title>
<polygon fill="lightblue" stroke="lightblue" points="1868,-4032 1868,-4269 2270,-4269 2270,-4032 1868,-4032"/>
<text text-anchor="middle" x="2069" y="-4253.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust88" class="cluster">
<title>cluster_87</title>
<polygon fill="lightblue" stroke="lightblue" points="1373.5,-3123 1373.5,-3306 1646.5,-3306 1646.5,-3123 1373.5,-3123"/>
<text text-anchor="middle" x="1510" y="-3290.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust89" class="cluster">
<title>cluster_88</title>
<polygon fill="lightblue" stroke="lightblue" points="1286.5,-5748 1286.5,-6039 1733.5,-6039 1733.5,-5748 1286.5,-5748"/>
<text text-anchor="middle" x="1510" y="-6023.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust90" class="cluster">
<title>cluster_89</title>
<polygon fill="lightblue" stroke="lightblue" points="1416,-2820 1416,-2949 1604,-2949 1604,-2820 1416,-2820"/>
<text text-anchor="middle" x="1510" y="-2933.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().</title>
<g id="a_node1"><a xlink:title="pub fn vartime_double_base_mul(a: &amp;Scalar, A: &amp;EdwardsPoint, b: &amp;Scalar) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;match get_selected_backend() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[cfg(curve25519_dalek_backend = &#39; simd&#39; )] &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackendKind::A...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4754,-8795 4557,-8795 4557,-8759 4754,-8759 4754,-8795"/>
<text text-anchor="middle" x="4655.5" y="-8773.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_base_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().</title>
<g id="a_node6"><a xlink:title="pub fn mul(a: &amp;Scalar, A: &amp;EdwardsPoint, b: &amp;Scalar) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let a_naf = a.non_adjacent_form(5); &#160;&#160;&#160;&#160;&#160;#[cfg(feature = &#39; precomputed&#45;tables&#39; )] &#160;&#160;&#160;&#160;let b_naf = b.non_adjacent_form(8); &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4908,-8628 4854,-8628 4854,-8592 4908,-8592 4908,-8628"/>
<text text-anchor="middle" x="4881" y="-8606.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4744.9,-8758.9C4750.87,-8756.32 4756.64,-8753.37 4762,-8750 4807.82,-8721.24 4844.87,-8668.84 4864.56,-8636.95"/>
<polygon fill="gray" stroke="gray" points="4867.7,-8638.51 4869.88,-8628.14 4861.71,-8634.89 4867.7,-8638.51"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().</title>
<g id="a_node2"><a xlink:title="pub fn straus_multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; EdwardsPoint where &#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;I::Item: core::borrow::Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;J::Item: core::borrow::Borrow&lt;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4743.5,-8741 4567.5,-8741 4567.5,-8705 4743.5,-8705 4743.5,-8741"/>
<text text-anchor="middle" x="4655.5" y="-8719.3" font-family="Helvetica,sans-Serif" font-size="14.00">straus_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; EdwardsPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I::Item: Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J::Item: Borrow&lt;EdwardsPoint&gt;, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4718.5,-9919 4592.5,-9919 4592.5,-9883 4718.5,-9883 4718.5,-9919"/>
<text text-anchor="middle" x="4655.5" y="-9897.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul(). -->
<g id="edge580" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4567.2,-8731.77C4553.78,-8737.45 4542.06,-8746.06 4535,-8759 4520.32,-8785.89 4520.32,-9835.11 4535,-9862 4544.69,-9879.75 4562.97,-9889.78 4582.41,-9895.34"/>
<polygon fill="gray" stroke="gray" points="4581.79,-9898.79 4592.33,-9897.8 4583.47,-9892 4581.79,-9898.79"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]as_extended(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]as_extended().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn as_extended(&amp;self) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;X: &amp;self.X * &amp;self.Z, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y: &amp;self.Y * &amp;self.Z, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Z: self.Z.square(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T: &amp;self.X * &amp;sel...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5104,-8746 5000,-8746 5000,-8710 5104,-8710 5104,-8746"/>
<text text-anchor="middle" x="5052" y="-8724.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_extended</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub fn square(&amp;self) &#45;&gt; FieldElement51 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.pow2k(1) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5217,-8746 5153,-8746 5153,-8710 5217,-8710 5217,-8746"/>
<text text-anchor="middle" x="5185" y="-8724.3" font-family="Helvetica,sans-Serif" font-size="14.00">square</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]as_extended().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]as_extended().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5104.02,-8728C5116.93,-8728 5130.63,-8728 5142.97,-8728"/>
<polygon fill="gray" stroke="gray" points="5142.98,-8731.5 5152.98,-8728 5142.98,-8724.5 5142.98,-8731.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn double(&amp;self) &#45;&gt; CompletedPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Double() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let XX = self.X.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let YY = self.Y.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ZZ2 = self.Z.square2(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let X_plus_Y = &amp;self.X ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5084,-8800 5020,-8800 5020,-8764 5084,-8764 5084,-8800"/>
<text text-anchor="middle" x="5052" y="-8778.3" font-family="Helvetica,sans-Serif" font-size="14.00">double</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn square2(&amp;self) &#45;&gt; FieldElement51 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut square = self.pow2k(1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;square.0[i] *= 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;square &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5221.5,-8800 5148.5,-8800 5148.5,-8764 5221.5,-8764 5221.5,-8800"/>
<text text-anchor="middle" x="5185" y="-8778.3" font-family="Helvetica,sans-Serif" font-size="14.00">square2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2(). -->
<g id="edge722" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5084.05,-8782C5100.11,-8782 5120.04,-8782 5137.87,-8782"/>
<polygon fill="gray" stroke="gray" points="5138.08,-8785.5 5148.08,-8782 5138.08,-8778.5 5138.08,-8785.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge721" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5084.05,-8769.2C5101.78,-8761.89 5124.23,-8752.64 5143.35,-8744.76"/>
<polygon fill="gray" stroke="gray" points="5144.81,-8747.94 5152.72,-8740.89 5142.14,-8741.47 5144.81,-8747.94"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn mul_by_pow_2(&amp;self, k: u32) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(k &gt; 0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut r: CompletedPoint; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s = self.as_projective(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..(k &#45; 1) {...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4940,-9836 4822,-9836 4822,-9800 4940,-9800 4940,-9836"/>
<text text-anchor="middle" x="4881" y="-9814.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_by_pow_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4718.63,-9884.96C4733,-9880.8 4748.14,-9876.05 4762,-9871 4786.26,-9862.16 4812.53,-9850.56 4834.12,-9840.48"/>
<polygon fill="gray" stroke="gray" points="4835.82,-9843.54 4843.37,-9836.11 4832.83,-9837.21 4835.82,-9843.54"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]as_extended(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]as_extended().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4908.27,-8624.04C4926.59,-8634.17 4951.35,-8648.55 4972,-8663 4989.68,-8675.37 5008.38,-8690.64 5023.14,-8703.27"/>
<polygon fill="gray" stroke="gray" points="5021.05,-8706.09 5030.9,-8709.98 5025.62,-8700.79 5021.05,-8706.09"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4908.14,-8618.73C4928.65,-8626.94 4956.27,-8641.26 4972,-8663 4996.53,-8696.9 4965.76,-8722.41 4992,-8755 4996.97,-8761.17 5003.66,-8765.99 5010.75,-8769.73"/>
<polygon fill="gray" stroke="gray" points="5009.3,-8772.91 5019.84,-8773.92 5012.22,-8766.56 5009.3,-8772.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn from(A: &amp;&#39;a EdwardsPoint) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut Ai = [A.as_projective_niels(); 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let A2 = A.double(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..7 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ai[i + 1] = (&amp;A2 + &amp;Ai[i]).as_extended()....">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4097.5,-8619 4043.5,-8619 4043.5,-8583 4097.5,-8583 4097.5,-8619"/>
<text text-anchor="middle" x="4070.5" y="-8597.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4853.76,-8609.71C4734.82,-8608.38 4246.12,-8602.94 4108.01,-8601.41"/>
<polygon fill="gray" stroke="gray" points="4107.98,-8597.91 4097.94,-8601.29 4107.9,-8604.91 4107.98,-8597.91"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn pow2k(&amp;self, mut k: u32) &#45;&gt; FieldElement51 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!( k &gt; 0 ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/// Multiply two 64&#45;bit integers with 128 bits of output. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[inline(always)] &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fn m(x: u6...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="5328,-8800 5266,-8800 5266,-8764 5328,-8764 5328,-8800"/>
<text text-anchor="middle" x="5297" y="-8778.3" font-family="Helvetica,sans-Serif" font-size="14.00">pow2k</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5221.71,-8782C5232.55,-8782 5244.54,-8782 5255.66,-8782"/>
<polygon fill="gray" stroke="gray" points="5255.99,-8785.5 5265.99,-8782 5255.99,-8778.5 5255.99,-8785.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k(). -->
<g id="edge755" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5217.23,-8743.33C5229.49,-8749.35 5243.71,-8756.33 5256.67,-8762.69"/>
<polygon fill="gray" stroke="gray" points="5255.31,-8765.93 5265.83,-8767.19 5258.4,-8759.64 5255.31,-8765.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn double(&amp;self) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_projective().double().as_extended() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4413,-9566 4349,-9566 4349,-9530 4413,-9530 4413,-9566"/>
<text text-anchor="middle" x="4381" y="-9544.3" font-family="Helvetica,sans-Serif" font-size="14.00">double</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4413.05,-9551.9C4445.34,-9554.01 4494.76,-9551.45 4521,-9521 4567.4,-9467.17 4502.73,-8935.94 4549,-8882 4564.2,-8864.28 4892.75,-8808.26 5009.93,-8788.77"/>
<polygon fill="gray" stroke="gray" points="5010.66,-8792.19 5019.95,-8787.1 5009.51,-8785.29 5010.66,-8792.19"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; EdwardsPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I::Item: Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J::Item: Borrow&lt;EdwardsPoint&gt;, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4444,-9512 4318,-9512 4318,-9476 4444,-9476 4444,-9512"/>
<text text-anchor="middle" x="4381" y="-9490.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4383.54,-9475.92C4392.66,-9372.74 4442.96,-8859.24 4549,-8750 4552,-8746.91 4555.3,-8744.16 4558.83,-8741.7"/>
<polygon fill="gray" stroke="gray" points="4560.68,-8744.67 4567.42,-8736.51 4557.05,-8738.68 4560.68,-8744.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (is_valid_y_coord, X, Y, Z) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_valid_y_coord.into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(decompress::step_2(sel...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4431.5,-9728 4330.5,-9728 4330.5,-9692 4431.5,-9692 4431.5,-9728"/>
<text text-anchor="middle" x="4381" y="-9706.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_1( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;repr: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;) &#45;&gt; (Choice, FieldElement, FieldElement, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = FieldElement::from_bytes(repr.as_bytes()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = Fi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4686.5,-9512 4624.5,-9512 4624.5,-9476 4686.5,-9476 4686.5,-9512"/>
<text text-anchor="middle" x="4655.5" y="-9490.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4431.68,-9709.31C4459.82,-9706.83 4494.57,-9700.08 4521,-9683 4582.84,-9643.02 4624.57,-9563.4 4643.28,-9521.4"/>
<polygon fill="gray" stroke="gray" points="4646.56,-9522.63 4647.33,-9512.06 4640.14,-9519.84 4646.56,-9522.63"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="edge513" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4884.04,-9799.78C4898.41,-9671.2 4984.34,-8904.72 4992,-8882 5001.04,-8855.16 5017.93,-8827.67 5031.33,-8808.32"/>
<polygon fill="gray" stroke="gray" points="5034.27,-8810.21 5037.2,-8800.03 5028.56,-8806.17 5034.27,-8810.21"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub fn mul_by_cofactor(&amp;self) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.mul_by_pow_2(3) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4720.5,-9836 4590.5,-9836 4590.5,-9800 4720.5,-9800 4720.5,-9836"/>
<text text-anchor="middle" x="4655.5" y="-9814.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_by_cofactor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2(). -->
<g id="edge591" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4720.55,-9818C4749.05,-9818 4782.64,-9818 4811.63,-9818"/>
<polygon fill="gray" stroke="gray" points="4811.68,-9821.5 4821.68,-9818 4811.68,-9814.5 4811.68,-9821.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;pub fn to_montgomery(&amp;self) &#45;&gt; MontgomeryPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// We have u = (1+y)/(1&#45;y) = (Z+Y)/(Z&#45;Y). &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The denominator is zero only when y=1, the identity point of &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// the...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4444,-9620 4318,-9620 4318,-9584 4444,-9584 4444,-9620"/>
<text text-anchor="middle" x="4381" y="-9598.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn invert(&amp;self) &#45;&gt; FieldElement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The bits of p&#45;2 = 2^255 &#45;19 &#45;2 are 11010111111...11. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonzero bits of exponent &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5080.5,-8930 5023.5,-8930 5023.5,-8894 5080.5,-8894 5080.5,-8930"/>
<text text-anchor="middle" x="5052" y="-8908.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert(). -->
<g id="edge646" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4444.2,-9606.03C4471.86,-9604.25 4502.32,-9596.71 4521,-9575 4569.52,-9518.6 4495.3,-8957.5 4549,-8906 4614.76,-8842.94 4907.93,-8886.88 5013.2,-8905.11"/>
<polygon fill="gray" stroke="gray" points="5012.91,-8908.61 5023.37,-8906.89 5014.12,-8901.72 5012.91,-8908.61"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;pub fn vartime_double_scalar_mul_basepoint( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a: &amp;Scalar, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b: &amp;Scalar, &#160;&#160;&#160;&#160;) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crate::backend::vartime_double_base_mul(a, A, b) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4521,-9674 4241,-9674 4241,-9638 4521,-9638 4521,-9674"/>
<text text-anchor="middle" x="4381" y="-9652.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_scalar_mul_basepoint</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul(). -->
<g id="edge670" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4511.85,-9637.87C4515.14,-9635.21 4518.2,-9632.27 4521,-9629 4575.03,-9565.91 4515.69,-8958.09 4549,-8882 4563.62,-8848.61 4594.16,-8820.14 4618.63,-8801.3"/>
<polygon fill="gray" stroke="gray" points="4620.76,-8804.08 4626.67,-8795.29 4616.57,-8798.48 4620.76,-8804.08"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge686" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4683.48,-9476C4765.11,-9419.83 5010.03,-9238.4 5112,-9019 5161.73,-8912 5077.02,-8854.78 5140,-8755 5141.42,-8752.75 5143.11,-8750.65 5144.98,-8748.71"/>
<polygon fill="gray" stroke="gray" points="5147.57,-8751.1 5152.93,-8741.96 5143.04,-8745.76 5147.57,-8751.1"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn sqrt_ratio_i(u: &amp;FieldElement, v: &amp;FieldElement) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Using the same trick as in ed25519 decoding, we merge the &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// inversion, the square roo...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4927.5,-8984 4834.5,-8984 4834.5,-8948 4927.5,-8948 4927.5,-8984"/>
<text text-anchor="middle" x="4881" y="-8962.3" font-family="Helvetica,sans-Serif" font-size="14.00">sqrt_ratio_i</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge685" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4664.19,-9475.83C4697.37,-9397.44 4828.34,-9088.04 4868.34,-8993.55"/>
<polygon fill="gray" stroke="gray" points="4871.66,-8994.67 4872.34,-8984.1 4865.22,-8991.94 4871.66,-8994.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn is_small_order(&amp;self) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.mul_by_cofactor().is_identity() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4438.5,-9836 4323.5,-9836 4323.5,-9800 4438.5,-9800 4438.5,-9836"/>
<text text-anchor="middle" x="4381" y="-9814.3" font-family="Helvetica,sans-Serif" font-size="14.00">is_small_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="edge701" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4438.79,-9818C4479.75,-9818 4535.42,-9818 4579.95,-9818"/>
<polygon fill="gray" stroke="gray" points="4580.14,-9821.5 4590.14,-9818 4580.14,-9814.5 4580.14,-9821.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;pub fn compress(&amp;self) &#45;&gt; CompressedEdwardsY { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recip = self.Z.invert(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = &amp;self.X * &amp;recip; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = &amp;self.Y * &amp;recip; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s: [u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s = y....">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4422.5,-9782 4339.5,-9782 4339.5,-9746 4422.5,-9746 4422.5,-9782"/>
<text text-anchor="middle" x="4381" y="-9760.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert(). -->
<g id="edge739" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4422.73,-9768.41C4454.6,-9769.36 4497.37,-9764.66 4521,-9737 4578.63,-9669.54 4486.85,-9002.32 4549,-8939 4581.28,-8906.11 4901.93,-8909.11 5013.21,-8911.17"/>
<polygon fill="gray" stroke="gray" points="5013.24,-8914.67 5023.3,-8911.36 5013.37,-8907.67 5013.24,-8914.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;fn pow_p58(&amp;self) &#45;&gt; FieldElement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The bits of (p&#45;5)/8 are 101111.....11. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonzero bits of exponent &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (t19, _) = self.pow...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5091.5,-8984 5012.5,-8984 5012.5,-8948 5091.5,-8948 5091.5,-8984"/>
<text text-anchor="middle" x="5052" y="-8962.3" font-family="Helvetica,sans-Serif" font-size="14.00">pow_p58</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5091.52,-8952.87C5098.89,-8949.17 5106.13,-8944.59 5112,-8939 5131.58,-8920.36 5120.12,-8903.32 5140,-8885 5174.73,-8853.01 5199.23,-8870.95 5238,-8844 5252.16,-8834.16 5265.49,-8820.36 5275.79,-8808.28"/>
<polygon fill="gray" stroke="gray" points="5278.75,-8810.2 5282.42,-8800.26 5273.35,-8805.74 5278.75,-8810.2"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn pow22501(&amp;self) &#45;&gt; (FieldElement, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Instead of managing which temporary variables are used &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// for what, we define as many as we need and leave stack &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5230,-8930 5140,-8930 5140,-8894 5230,-8894 5230,-8930"/>
<text text-anchor="middle" x="5185" y="-8908.3" font-family="Helvetica,sans-Serif" font-size="14.00">pow22501</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5091.6,-8950.09C5103.86,-8945.03 5117.66,-8939.35 5130.77,-8933.94"/>
<polygon fill="gray" stroke="gray" points="5132.25,-8937.12 5140.16,-8930.07 5129.58,-8930.65 5132.25,-8937.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5147.46,-8893.92C5138.88,-8887.89 5130.85,-8880.29 5126,-8871 5114.98,-8849.93 5114.61,-8784.87 5126,-8764 5130.17,-8756.35 5136.73,-8750.15 5143.97,-8745.18"/>
<polygon fill="gray" stroke="gray" points="5145.94,-8748.08 5152.69,-8739.91 5142.32,-8742.09 5145.94,-8748.08"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5220.77,-8893.89C5226.91,-8889.81 5232.95,-8885.14 5238,-8880 5258.22,-8859.43 5274.23,-8830.48 5284.26,-8809.38"/>
<polygon fill="gray" stroke="gray" points="5287.57,-8810.55 5288.57,-8800.01 5281.21,-8807.63 5287.57,-8810.55"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]pow2k().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5079.18,-8893.77C5103.61,-8876.78 5136.79,-8853.79 5140,-8852 5181.54,-8828.84 5194.66,-8828.59 5238,-8809 5243.98,-8806.3 5250.28,-8803.41 5256.45,-8800.55"/>
<polygon fill="gray" stroke="gray" points="5258.36,-8803.53 5265.96,-8796.14 5255.41,-8797.18 5258.36,-8803.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow22501().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5080.78,-8912C5094.96,-8912 5112.72,-8912 5129.49,-8912"/>
<polygon fill="gray" stroke="gray" points="5129.76,-8915.5 5139.76,-8912 5129.76,-8908.5 5129.76,-8915.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn invsqrt(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FieldElement::sqrt_ratio_i(&amp;FieldElement::ONE, self) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4688,-8984 4623,-8984 4623,-8948 4688,-8948 4688,-8984"/>
<text text-anchor="middle" x="4655.5" y="-8962.3" font-family="Helvetica,sans-Serif" font-size="14.00">invsqrt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4688.05,-8966C4723.36,-8966 4781.26,-8966 4824.25,-8966"/>
<polygon fill="gray" stroke="gray" points="4824.28,-8969.5 4834.28,-8966 4824.28,-8962.5 4824.28,-8969.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge678" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4903.27,-8947.92C4924.69,-8930.31 4959.18,-8903.56 4992,-8885 5042.29,-8856.55 5072.35,-8877.02 5112,-8835 5137.85,-8807.6 5116.36,-8784.33 5140,-8755 5141.46,-8753.19 5143.08,-8751.46 5144.81,-8749.83"/>
<polygon fill="gray" stroke="gray" points="5147.38,-8752.26 5152.95,-8743.25 5142.97,-8746.81 5147.38,-8752.26"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58(). -->
<g id="edge679" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4927.73,-8966C4950.81,-8966 4978.81,-8966 5002.29,-8966"/>
<polygon fill="gray" stroke="gray" points="5002.39,-8969.5 5012.39,-8966 5002.39,-8962.5 5002.39,-8969.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_inv(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut out = FieldElement::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Special case: s = 0. &#160;If s is zero, either t = 1 or t = &#45;1. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// If t=1, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4431.5,-1120 4330.5,-1120 4330.5,-1084 4431.5,-1084 4431.5,-1120"/>
<text text-anchor="middle" x="4381" y="-1098.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_inv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4431.7,-1113.58C4459.85,-1121.86 4494.6,-1135.11 4521,-1155 4902.02,-1442.05 5004.66,-1586.18 5112,-2051 5192.21,-2398.34 5184.75,-8243.78 5184.05,-8699.83"/>
<polygon fill="gray" stroke="gray" points="5180.55,-8699.87 5184.03,-8709.87 5187.55,-8699.88 5180.55,-8699.87"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4431.82,-1106.98C4463.04,-1112.96 4501.02,-1126.11 4521,-1155 4581.64,-1242.67 4514.29,-8729.21 4549,-8830 4564.32,-8874.49 4600.71,-8915.7 4626.45,-8940.83"/>
<polygon fill="gray" stroke="gray" points="4624.08,-8943.42 4633.73,-8947.8 4628.92,-8938.36 4624.08,-8943.42"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_encode&lt;D: Digest&gt;(data: &amp;[u8; 16]) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut fe_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let digest...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3804.5,-1311 3693.5,-1311 3693.5,-1275 3804.5,-1275 3804.5,-1311"/>
<text text-anchor="middle" x="3749" y="-1289.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_encode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_ristretto_flavor(r_0: &amp;FieldElement) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i = &amp;constants::SQRT_M1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let d = &amp;constants::EDWARDS_D; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one_minus_d_sq = &amp;constants...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4471.5,-2380 4290.5,-2380 4290.5,-2344 4471.5,-2344 4471.5,-2380"/>
<text text-anchor="middle" x="4381" y="-2358.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3804.71,-1292.84C3834.89,-1295.09 3871.85,-1301.89 3900,-1320 4105.51,-1452.19 4108.76,-1551 4213,-1772 4309.35,-1976.26 4360.7,-2247.17 4375.46,-2333.98"/>
<polygon fill="gray" stroke="gray" points="4372.01,-2334.58 4377.12,-2343.86 4378.92,-2333.42 4372.01,-2334.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes_single_elligator(bytes: &amp;[u8; 32]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::elligator_ristretto_flavor(&amp;FieldElement::from_bytes(bytes)) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3882,-1365 3616,-1365 3616,-1329 3882,-1329 3882,-1365"/>
<text text-anchor="middle" x="3749" y="-1343.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3850.94,-1365.02C3869.8,-1372.83 3887.49,-1384.01 3900,-1400 3951.17,-1465.42 3905.9,-1694.59 3936,-1772 4033.79,-2023.53 4271,-2260.36 4352.2,-2336.57"/>
<polygon fill="gray" stroke="gray" points="4350.3,-2339.58 4360,-2343.85 4355.08,-2334.47 4350.3,-2339.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;pub fn elligator_ristretto_flavor_inverse(&amp;self) &#45;&gt; (u8, [FieldElement; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Elligator2 computes a Point from a FieldElement in two steps: first &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// it computes a (s,t) on the J...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4190,-1230 3951,-1230 3951,-1194 4190,-1194 4190,-1230"/>
<text text-anchor="middle" x="4070.5" y="-1208.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor_inverse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4122.1,-1193.96C4176.55,-1174.54 4263.09,-1143.69 4320.7,-1123.14"/>
<polygon fill="gray" stroke="gray" points="4322.15,-1126.34 4330.4,-1119.69 4319.8,-1119.75 4322.15,-1126.34"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn to_jacobi_quartic_ristretto(self) &#45;&gt; [JacobiPoint; 4] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x2 = self.0.X.square(); // X^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y2 = self.0.Y.square(); // Y^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y4 = y2.square(); // Y^4 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let z2...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4478,-1365 4284,-1365 4284,-1329 4478,-1329 4478,-1365"/>
<text text-anchor="middle" x="4381" y="-1343.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_jacobi_quartic_ristretto</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4112.79,-1230.07C4168.74,-1254.55 4268.58,-1298.24 4329.1,-1324.73"/>
<polygon fill="gray" stroke="gray" points="4327.9,-1328.02 4338.47,-1328.82 4330.71,-1321.61 4327.9,-1328.02"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge554" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4403.74,-1365.19C4508.05,-1454.1 4958.48,-1856.6 5112,-2302 5167.88,-2464.14 5182.84,-8245.62 5183.93,-8699.76"/>
<polygon fill="gray" stroke="gray" points="5180.43,-8699.77 5183.96,-8709.77 5187.43,-8699.76 5180.43,-8699.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge553" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4385.93,-1365.25C4405.51,-1457.35 4492.81,-1880.47 4521,-2232 4528.32,-2323.35 4519.13,-8743.36 4549,-8830 4564.34,-8874.48 4600.72,-8915.7 4626.46,-8940.83"/>
<polygon fill="gray" stroke="gray" points="4624.09,-8943.41 4633.74,-8947.79 4628.93,-8938.35 4624.09,-8943.41"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;pub fn decode_253_bits(&amp;self) &#45;&gt; (u8, [[u8; 32]; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut ret = [[0u8; 32]; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (mask, fes) = self.elligator_ristretto_flavor_inverse(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3815.5,-1203 3682.5,-1203 3682.5,-1167 3815.5,-1167 3815.5,-1203"/>
<text text-anchor="middle" x="3749" y="-1181.3" font-family="Helvetica,sans-Serif" font-size="14.00">decode_253_bits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge754" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3815.81,-1190.56C3851.84,-1193.61 3897.74,-1197.49 3940.57,-1201.1"/>
<polygon fill="gray" stroke="gray" points="3940.55,-1204.62 3950.81,-1201.97 3941.14,-1197.64 3940.55,-1204.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_decode&lt;D: Digest&gt;(&amp;self) &#45;&gt; Option&lt;[u8; 16]&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut result: [u8; 16] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3804.5,-1257 3693.5,-1257 3693.5,-1221 3804.5,-1221 3804.5,-1257"/>
<text text-anchor="middle" x="3749" y="-1235.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_decode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge787" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3804.56,-1234.39C3842,-1231.23 3893.31,-1226.89 3940.82,-1222.87"/>
<polygon fill="gray" stroke="gray" points="3941.22,-1226.35 3950.89,-1222.02 3940.63,-1219.38 3941.22,-1226.35"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;pub fn to_edwards(&amp;self, sign: u8) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// To decompress the Montgomery u coordinate to an &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// `EdwardsPoint`, we apply the birational map to obtain the &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4118,-9677 4023,-9677 4023,-9641 4118,-9641 4118,-9677"/>
<text text-anchor="middle" x="4070.5" y="-9655.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_edwards</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4118.02,-9666.69C4172.04,-9675.62 4261.27,-9690.37 4320.35,-9700.14"/>
<polygon fill="gray" stroke="gray" points="4319.85,-9703.6 4330.29,-9701.78 4320.99,-9696.7 4319.85,-9703.6"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4073.63,-9640.8C4087.91,-9528 4180.72,-8921.77 4549,-8693 4720.79,-8586.28 4953.65,-8808.07 5027.51,-8886.16"/>
<polygon fill="gray" stroke="gray" points="5025.16,-8888.77 5034.55,-8893.68 5030.27,-8883.99 5025.16,-8888.77"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes(bytes: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This follows the one&#45;way map construction from the Ristretto RFC: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://datatracker.ietf.org/doc/html/draft&#45;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4148,-2280 3993,-2280 3993,-2244 4148,-2244 4148,-2280"/>
<text text-anchor="middle" x="4070.5" y="-2258.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4148.27,-2273.42C4169.48,-2277.44 4192.34,-2282.6 4213,-2289 4255.92,-2302.29 4302.6,-2323.29 4335.67,-2339.37"/>
<polygon fill="gray" stroke="gray" points="4334.53,-2342.71 4345.05,-2343.97 4337.61,-2336.42 4334.53,-2342.71"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_2(s: FieldElement) &#45;&gt; (Choice, Choice, Choice, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Step 2. &#160;Compute (X:Y:Z:T). &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ss = s.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4412,-2442 4350,-2442 4350,-2406 4412,-2406 4412,-2442"/>
<text text-anchor="middle" x="4381" y="-2420.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4384.3,-2442.08C4429.45,-2796.96 5124.54,-8260.62 5180.44,-8699.98"/>
<polygon fill="gray" stroke="gray" points="5176.97,-8700.47 5181.7,-8709.95 5183.91,-8699.59 5176.97,-8700.47"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4382.31,-2442.18C4388.7,-2810.92 4491.03,-8667.64 4549,-8830 4564.82,-8874.31 4601.09,-8915.56 4626.67,-8940.76"/>
<polygon fill="gray" stroke="gray" points="4624.28,-8943.31 4633.9,-8947.74 4629.14,-8938.27 4624.28,-8943.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I::Item: Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J::Item: Borrow&lt;RistrettoPoin...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4133.5,-2442 4007.5,-2442 4007.5,-2406 4133.5,-2406 4133.5,-2442"/>
<text text-anchor="middle" x="4070.5" y="-2420.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4071.6,-2442.11C4073.35,-2765.42 4100.38,-7324.27 4233,-8653 4265.16,-8975.25 4349.51,-9360.06 4373.53,-9465.89"/>
<polygon fill="gray" stroke="gray" points="4370.15,-9466.82 4375.79,-9475.79 4376.98,-9465.26 4370.15,-9466.82"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4471.57,-2370.34C4489.72,-2375.68 4507.39,-2384.04 4521,-2397 4787.43,-2650.76 4692.35,-2827.72 4762,-3189 5106.85,-4977.83 4989.18,-5455.38 5112,-7273 5150.84,-7847.82 5177.57,-8551.74 5182.99,-8699.85"/>
<polygon fill="gray" stroke="gray" points="5179.49,-8700.05 5183.35,-8709.91 5186.49,-8699.79 5179.49,-8700.05"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4471.74,-2367.13C4490.67,-2372.52 4508.64,-2381.71 4521,-2397 4548.68,-2431.24 4547.25,-3145.01 4549,-3189 4645.58,-5622.33 4386.73,-6261.38 4790,-8663 4807.46,-8767.01 4849.43,-8885.62 4869.27,-8938.29"/>
<polygon fill="gray" stroke="gray" points="4866.1,-8939.82 4872.93,-8947.92 4872.65,-8937.33 4866.1,-8939.82"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!s_encoding_is_canonical | s_is_negative).into...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4121,-2388 4020,-2388 4020,-2352 4121,-2352 4121,-2388"/>
<text text-anchor="middle" x="4070.5" y="-2366.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4121.07,-2378.68C4181.84,-2389.31 4283.65,-2407.14 4339.8,-2416.96"/>
<polygon fill="gray" stroke="gray" points="4339.27,-2420.42 4349.73,-2418.7 4340.48,-2413.53 4339.27,-2420.42"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn compress(&amp;self) &#45;&gt; CompressedRistretto { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut X = self.0.X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut Y = self.0.Y; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = &amp;self.0.Z; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let T = &amp;self.0.T; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let u1 = &amp;(Z + &amp;Y) * &amp;(Z ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4112,-2334 4029,-2334 4029,-2298 4112,-2298 4112,-2334"/>
<text text-anchor="middle" x="4070.5" y="-2312.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square(). -->
<g id="edge690" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4112.14,-2316C4207.08,-2316 4450.8,-2316 4654.5,-2316 4654.5,-2316 4654.5,-2316 4882,-2316 5158.41,-2316 5096.68,-4517.02 5112,-4793 5157.72,-5616.84 5181.26,-8388.53 5183.77,-8699.55"/>
<polygon fill="gray" stroke="gray" points="5180.28,-8699.97 5183.86,-8709.94 5187.28,-8699.91 5180.28,-8699.97"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge691" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4112.16,-2311.49C4144.6,-2310.37 4188.51,-2314.91 4213,-2343 4272.28,-2411 4517.58,-8745.43 4549,-8830 4565.39,-8874.11 4601.53,-8915.41 4626.92,-8940.67"/>
<polygon fill="gray" stroke="gray" points="4624.5,-8943.19 4634.1,-8947.66 4629.38,-8938.18 4624.5,-8943.19"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4097.62,-8602.38C4130.69,-8605.68 4186.56,-8616.79 4213,-8654 4240.91,-8693.28 4201.74,-9484.34 4233,-9521 4258.41,-9550.79 4304.93,-9554.84 4338.85,-9553.15"/>
<polygon fill="gray" stroke="gray" points="4339.2,-9556.63 4348.94,-9552.46 4338.73,-9549.65 4339.2,-9556.63"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4124,-10268 4017,-10268 4017,-10232 4124,-10232 4124,-10268"/>
<text text-anchor="middle" x="4070.5" y="-10246.3" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4077.59,-10231.71C4098.33,-10169 4167.5,-9956.65 4213,-9778 4223.65,-9736.19 4202.1,-9713.11 4233,-9683 4233.84,-9682.19 4234.69,-9681.39 4235.56,-9680.62"/>
<polygon fill="gray" stroke="gray" points="4238.06,-9683.1 4243.75,-9674.17 4233.73,-9677.6 4238.06,-9683.1"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4088.62,-10231.75C4119.8,-10197.26 4185.18,-10118.75 4213,-10039 4231.21,-9986.79 4195.93,-9832.02 4233,-9791 4256.7,-9764.77 4296.82,-9758.81 4329.16,-9758.98"/>
<polygon fill="gray" stroke="gray" points="4329.27,-9762.48 4339.35,-9759.23 4329.44,-9755.48 4329.27,-9762.48"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3793,-10295 3705,-10295 3705,-10259 3793,-10259 3793,-10295"/>
<text text-anchor="middle" x="3749" y="-10273.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3793.09,-10273.36C3848.03,-10268.72 3943.44,-10260.65 4006.54,-10255.32"/>
<polygon fill="gray" stroke="gray" points="4007.09,-10258.79 4016.76,-10254.46 4006.5,-10251.81 4007.09,-10258.79"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3432,-10322 3376,-10322 3376,-10286 3432,-10286 3432,-10322"/>
<text text-anchor="middle" x="3404" y="-10300.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3432.2,-10301.86C3488.88,-10297.4 3620.48,-10287.04 3694.67,-10281.2"/>
<polygon fill="gray" stroke="gray" points="3695.05,-10284.68 3704.74,-10280.4 3694.5,-10277.7 3695.05,-10284.68"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; PUBLIC_KEY_LENGTH]) &#45;&gt; Result&lt;VerifyingKey, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed = CompressedEdwardsY(*bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let point = compressed &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decomp...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3451,-10268 3357,-10268 3357,-10232 3451,-10232 3451,-10268"/>
<text text-anchor="middle" x="3404" y="-10246.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3437.48,-10231.95C3548.59,-10169.8 3922.73,-9957.21 4213,-9753 4222.31,-9746.45 4222.64,-9741.73 4233,-9737 4260.11,-9724.63 4292.47,-9717.92 4319.92,-9714.29"/>
<polygon fill="gray" stroke="gray" points="4320.68,-9717.72 4330.18,-9713.04 4319.83,-9710.77 4320.68,-9717.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().</title>
<g id="a_node44"><a xlink:title="async fn KeyTransparency_Distinguished( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedCha...">
<polygon fill="white" stroke="black" points="276.5,-11123 40.5,-11123 40.5,-11087 276.5,-11087 276.5,-11123"/>
<text text-anchor="middle" x="158.5" y="-11101.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;async fn distinguished( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished: Option&lt;LastTreeHead&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;SearchStateUpdate, RequestError&lt;Error&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ChatDistinguishedResponse { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="539,-10824 429,-10824 429,-10788 539,-10788 539,-10824"/>
<text text-anchor="middle" x="484" y="-10802.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge574" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M276.65,-11097.34C288.91,-11092.2 300.11,-11084.98 309,-11075 344.89,-11034.7 292.62,-10872.85 329,-10833 351.29,-10808.58 387.24,-10801.29 418.8,-10800.35"/>
<polygon fill="blue" stroke="blue" points="418.9,-10803.85 428.87,-10800.25 418.84,-10796.85 418.9,-10803.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().</title>
<g id="a_node45"><a xlink:title="async fn KeyTransparency_Search( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedChatConnec...">
<polygon fill="white" stroke="black" points="252.5,-11177 64.5,-11177 64.5,-11141 252.5,-11141 252.5,-11177"/>
<text text-anchor="middle" x="158.5" y="-11155.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;async fn search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_identity_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;(E164, Vec&lt;u8&gt;)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored_acco...">
<polygon fill="white" stroke="black" points="515,-10986 453,-10986 453,-10950 515,-10950 515,-10986"/>
<text text-anchor="middle" x="484" y="-10964.3" font-family="Helvetica,sans-Serif" font-size="14.00">search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge681" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M252.72,-11150.71C272,-11146.68 291.69,-11140.73 309,-11132 375.39,-11098.5 434.07,-11031.58 463.32,-10994.42"/>
<polygon fill="blue" stroke="blue" points="466.42,-10996.13 469.77,-10986.08 460.88,-10991.84 466.42,-10996.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node46"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1638.5,-10323 1381.5,-10323 1381.5,-10287 1638.5,-10287 1638.5,-10323"/>
<text text-anchor="middle" x="1510" y="-10301.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="2160.5,-10460 1977.5,-10460 1977.5,-10424 2160.5,-10424 2160.5,-10460"/>
<text text-anchor="middle" x="2069" y="-10438.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1638.81,-10298.78C1704.61,-10301.79 1782.79,-10315.68 1840,-10358 1862.69,-10374.79 1845.1,-10398.5 1868,-10415 1896.4,-10435.45 1933.09,-10444.06 1967.27,-10446.94"/>
<polygon fill="blue" stroke="blue" points="1967.09,-10450.44 1977.31,-10447.64 1967.57,-10443.46 1967.09,-10450.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node47"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1627.5,-10161 1392.5,-10161 1392.5,-10125 1627.5,-10125 1627.5,-10161"/>
<text text-anchor="middle" x="1510" y="-10139.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node196"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="2157,-9484 1981,-9484 1981,-9448 2157,-9448 2157,-9484"/>
<text text-anchor="middle" x="2069" y="-9462.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.69,-10161.05C1659.58,-10174.56 1773.72,-10181.02 1840,-10116 1884.01,-10072.83 1850.01,-9898.97 1868,-9840 1910.71,-9699.99 2007.69,-9551.9 2048.9,-9492.71"/>
<polygon fill="blue" stroke="blue" points="2051.92,-9494.5 2054.79,-9484.31 2046.18,-9490.48 2051.92,-9494.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node48"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="1642,-9999 1378,-9999 1378,-9963 1642,-9963 1642,-9999"/>
<text text-anchor="middle" x="1510" y="-9977.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="2585,-9239 2457,-9239 2457,-9203 2585,-9203 2585,-9239"/>
<text text-anchor="middle" x="2521" y="-9217.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1642.31,-9987.29C1721.84,-9987.98 1813.01,-9982.11 1840,-9954 1892.37,-9899.45 1815.61,-9328.53 1868,-9274 1945.88,-9192.95 2293.16,-9205.55 2446.65,-9215.44"/>
<polygon fill="blue" stroke="blue" points="2446.7,-9218.95 2456.91,-9216.11 2447.16,-9211.96 2446.7,-9218.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node49"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="1647,-9675 1373,-9675 1373,-9639 1647,-9639 1647,-9675"/>
<text text-anchor="middle" x="1510" y="-9653.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node197"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="2158,-8605 1980,-8605 1980,-8569 2158,-8569 2158,-8605"/>
<text text-anchor="middle" x="2069" y="-8583.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.7,-9675.03C1660.44,-9688.67 1776.05,-9695 1840,-9627 1912.27,-9550.15 1809.6,-8765.85 1868,-8678 1891.31,-8642.93 1931.71,-8621.18 1970.12,-8607.79"/>
<polygon fill="blue" stroke="blue" points="1971.45,-8611.04 1979.83,-8604.56 1969.24,-8604.4 1971.45,-8611.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node50"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="1583.5,-9891 1436.5,-9891 1436.5,-9855 1583.5,-9855 1583.5,-9891"/>
<text text-anchor="middle" x="1510" y="-9869.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3169.5,-9621 3041.5,-9621 3041.5,-9585 3169.5,-9585 3169.5,-9621"/>
<text text-anchor="middle" x="3105.5" y="-9599.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1583.79,-9877.74C1669.96,-9881.6 1806.09,-9881.57 1840,-9846 1903.43,-9779.44 1802.12,-9083.14 1868,-9019 2042.96,-8848.65 2813.46,-8891.52 2965,-9083 3033.17,-9169.14 2930.72,-9491.58 3001,-9576 3009.02,-9585.63 3019.99,-9592.06 3031.82,-9596.3"/>
<polygon fill="blue" stroke="blue" points="3030.85,-9599.67 3041.44,-9599.26 3032.91,-9592.98 3030.85,-9599.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node51"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1604,-9945 1416,-9945 1416,-9909 1604,-9909 1604,-9945"/>
<text text-anchor="middle" x="1510" y="-9923.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node190"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2899.5,-9131 2845.5,-9131 2845.5,-9095 2899.5,-9095 2899.5,-9131"/>
<text text-anchor="middle" x="2872.5" y="-9109.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1604.14,-9932.5C1689.93,-9935.32 1808.56,-9932.78 1840,-9900 1893.57,-9844.14 1819.99,-9264.7 1868,-9204 2108.8,-8899.54 2686.12,-9054.52 2835.65,-9101.21"/>
<polygon fill="blue" stroke="blue" points="2834.68,-9104.57 2845.27,-9104.25 2836.79,-9097.9 2834.68,-9104.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node52"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="1595,-10053 1425,-10053 1425,-10017 1595,-10017 1595,-10053"/>
<text text-anchor="middle" x="1510" y="-10031.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node195"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="2096,-9322 2042,-9322 2042,-9286 2096,-9286 2096,-9322"/>
<text text-anchor="middle" x="2069" y="-9300.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1595.32,-10040.18C1681.58,-10043.44 1807.45,-10041.9 1840,-10008 1892.15,-9953.7 1817.29,-9386.65 1868,-9331 1908.94,-9286.07 1986.24,-9289.64 2031.82,-9296.6"/>
<polygon fill="blue" stroke="blue" points="2031.42,-9300.09 2041.86,-9298.27 2032.57,-9293.18 2031.42,-9300.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node53"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="1623,-9729 1397,-9729 1397,-9693 1623,-9693 1623,-9729"/>
<text text-anchor="middle" x="1510" y="-9707.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node183"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="2127.5,-8726 2010.5,-8726 2010.5,-8690 2127.5,-8690 2127.5,-8726"/>
<text text-anchor="middle" x="2069" y="-8704.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1623.37,-9717.1C1706.83,-9718.92 1811,-9714.56 1840,-9684 1912.61,-9607.48 1797.41,-8813.39 1868,-8735 1900.3,-8699.13 1955.76,-8694.05 2000.09,-8697"/>
<polygon fill="blue" stroke="blue" points="1999.98,-8700.51 2010.24,-8697.83 2000.55,-8693.53 1999.98,-8700.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node54"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="1647,-10269 1373,-10269 1373,-10233 1647,-10233 1647,-10269"/>
<text text-anchor="middle" x="1510" y="-10247.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="2155.5,-10406 1982.5,-10406 1982.5,-10370 2155.5,-10370 2155.5,-10406"/>
<text text-anchor="middle" x="2069" y="-10384.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.39,-10251.02C1707.35,-10253.87 1778.07,-10261.15 1840,-10278 1911.21,-10297.38 1987.11,-10338.67 2030.9,-10364.78"/>
<polygon fill="blue" stroke="blue" points="2029.11,-10367.79 2039.48,-10369.95 2032.72,-10361.79 2029.11,-10367.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node55"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="1583,-9837 1437,-9837 1437,-9801 1583,-9801 1583,-9837"/>
<text text-anchor="middle" x="1510" y="-9815.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="3180.5,-9567 3030.5,-9567 3030.5,-9531 3180.5,-9531 3180.5,-9567"/>
<text text-anchor="middle" x="3105.5" y="-9545.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge501" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1583.05,-9823.72C1669.19,-9827.63 1806.03,-9827.71 1840,-9792 1907.65,-9720.87 1797.65,-8977.46 1868,-8909 1955.36,-8823.99 2870.13,-8828.48 2965,-8905 3063.45,-8984.4 3095.9,-9407.09 3102.92,-9520.81"/>
<polygon fill="blue" stroke="blue" points="3099.43,-9521.06 3103.52,-9530.83 3106.41,-9520.64 3099.43,-9521.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node56"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="1623.5,-9783 1396.5,-9783 1396.5,-9747 1623.5,-9747 1623.5,-9783"/>
<text text-anchor="middle" x="1510" y="-9761.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node182"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="2127.5,-8780 2010.5,-8780 2010.5,-8744 2127.5,-8744 2127.5,-8780"/>
<text text-anchor="middle" x="2069" y="-8758.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge575" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1623.79,-9771.1C1707.17,-9772.9 1811.04,-9768.49 1840,-9738 1910.66,-9663.6 1804.2,-8895.36 1868,-8815 1899.04,-8775.9 1955.33,-8763.63 2000.3,-8760.59"/>
<polygon fill="blue" stroke="blue" points="2000.5,-8764.08 2010.3,-8760.05 2000.12,-8757.09 2000.5,-8764.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node57"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="1597,-10107 1423,-10107 1423,-10071 1597,-10071 1597,-10107"/>
<text text-anchor="middle" x="1510" y="-10085.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node191"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2096,-9376 2042,-9376 2042,-9340 2096,-9340 2096,-9376"/>
<text text-anchor="middle" x="2069" y="-9354.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge699" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.3,-10094.25C1683.5,-10097.42 1807.7,-10095.64 1840,-10062 1892.15,-10007.7 1817.29,-9440.65 1868,-9385 1908.94,-9340.07 1986.24,-9343.64 2031.82,-9350.6"/>
<polygon fill="blue" stroke="blue" points="2031.42,-9354.09 2041.86,-9352.27 2032.57,-9347.18 2031.42,-9354.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node58"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="1609.5,-10215 1410.5,-10215 1410.5,-10179 1609.5,-10179 1609.5,-10215"/>
<text text-anchor="middle" x="1510" y="-10193.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node194"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="2556.5,-9456 2485.5,-9456 2485.5,-9420 2556.5,-9420 2556.5,-9456"/>
<text text-anchor="middle" x="2521" y="-9434.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge736" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1609.81,-10207.06C1677.83,-10209.75 1768.47,-10204.73 1840,-10170 2185.68,-10002.14 2442.32,-9576.6 2505.15,-9465.09"/>
<polygon fill="blue" stroke="blue" points="2508.32,-9466.59 2510.14,-9456.16 2502.21,-9463.18 2508.32,-9466.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node59"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="2619.5,-677 2422.5,-677 2422.5,-641 2619.5,-641 2619.5,-677"/>
<text text-anchor="middle" x="2521" y="-655.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;pub fn hash(&amp;self) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*Self::hash_from_scalars(&amp;self.scalars).compress().as_bytes() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2899.5,-922 2845.5,-922 2845.5,-886 2899.5,-886 2899.5,-922"/>
<text text-anchor="middle" x="2872.5" y="-900.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.64,-644.69C2665.88,-643.66 2718.24,-651.82 2752,-686 2781.99,-716.37 2744.34,-844.5 2772,-877 2787.35,-895.04 2813.42,-901.64 2835.03,-903.81"/>
<polygon fill="blue" stroke="blue" points="2834.98,-907.32 2845.21,-904.55 2835.49,-900.34 2834.98,-907.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node60"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="2587.5,-623 2454.5,-623 2454.5,-587 2587.5,-587 2587.5,-623"/>
<text text-anchor="middle" x="2521" y="-601.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="2921.5,-868 2823.5,-868 2823.5,-832 2921.5,-832 2921.5,-868"/>
<text text-anchor="middle" x="2872.5" y="-846.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2587.68,-592.78C2639.61,-587.25 2710.12,-589.59 2752,-632 2781.99,-662.37 2744.34,-790.5 2772,-823 2782.37,-835.19 2797.64,-842.16 2813.11,-846.06"/>
<polygon fill="blue" stroke="blue" points="2812.75,-849.57 2823.26,-848.21 2814.2,-842.72 2812.75,-849.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node61"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2585.5,-569 2456.5,-569 2456.5,-533 2585.5,-533 2585.5,-569"/>
<text text-anchor="middle" x="2521" y="-547.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node275"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="2899.5,-814 2845.5,-814 2845.5,-778 2899.5,-778 2899.5,-814"/>
<text text-anchor="middle" x="2872.5" y="-792.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge514" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2585.57,-539.03C2637.68,-533.22 2709.52,-535.05 2752,-578 2781.55,-607.87 2745.19,-733.65 2772,-766 2787.24,-784.39 2813.31,-791.78 2834.95,-794.63"/>
<polygon fill="blue" stroke="blue" points="2834.83,-798.14 2845.14,-795.7 2835.56,-791.18 2834.83,-798.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node62"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="2585.5,-731 2456.5,-731 2456.5,-695 2585.5,-695 2585.5,-731"/>
<text text-anchor="middle" x="2521" y="-709.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge789" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2585.57,-709.84C2637.68,-710.92 2709.53,-721.43 2752,-766 2786.58,-802.29 2738.12,-840.05 2772,-877 2787.9,-894.35 2813.72,-901 2835.07,-903.36"/>
<polygon fill="blue" stroke="blue" points="2834.87,-906.86 2845.13,-904.21 2835.46,-899.88 2834.87,-906.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node63"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="1698,-4060 1322,-4060 1322,-4024 1698,-4024 1698,-4060"/>
<text text-anchor="middle" x="1510" y="-4038.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node335" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node335"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="2585,-4154 2457,-4154 2457,-4118 2585,-4118 2585,-4154"/>
<text text-anchor="middle" x="2521" y="-4132.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1698.25,-4036.73C1760.34,-4039.22 1819.02,-4047.64 1840,-4069 1908.19,-4138.42 1797.03,-4439.43 1868,-4506 1933.16,-4567.12 2205.02,-4567.3 2270,-4506 2325.54,-4453.61 2237.62,-4218.55 2290,-4163 2329.11,-4121.52 2395.46,-4117.71 2446.87,-4122.56"/>
<polygon fill="blue" stroke="blue" points="2446.63,-4126.06 2456.94,-4123.64 2447.37,-4119.1 2446.63,-4126.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node64"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="1721.5,-4222 1298.5,-4222 1298.5,-4186 1721.5,-4186 1721.5,-4222"/>
<text text-anchor="middle" x="1510" y="-4200.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node343" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node343"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="2554,-4527 2488,-4527 2488,-4491 2554,-4491 2554,-4527"/>
<text text-anchor="middle" x="2521" y="-4505.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1721.53,-4200.08C1774.51,-4203.67 1821.59,-4212.43 1840,-4231 1900.07,-4291.61 1805.5,-4555.9 1868,-4614 1933.43,-4674.82 2199.42,-4668.76 2270,-4614 2298.27,-4592.06 2263.05,-4559.55 2290,-4536 2341.68,-4490.82 2426.73,-4493.9 2477.65,-4500.96"/>
<polygon fill="blue" stroke="blue" points="2477.26,-4504.44 2487.67,-4502.46 2478.3,-4497.51 2477.26,-4504.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node65"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="1698.5,-4276 1321.5,-4276 1321.5,-4240 1698.5,-4240 1698.5,-4276"/>
<text text-anchor="middle" x="1510" y="-4254.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node344" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node344"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="2548,-4581 2494,-4581 2494,-4545 2548,-4545 2548,-4581"/>
<text text-anchor="middle" x="2521" y="-4559.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1698.55,-4252.89C1760.46,-4255.42 1818.93,-4263.82 1840,-4285 1897.22,-4342.51 1808.47,-4593.88 1868,-4649 1933.55,-4709.7 2197.4,-4701.05 2270,-4649 2292.5,-4632.87 2268.48,-4607.42 2290,-4590 2345.44,-4545.13 2434.47,-4549.48 2483.93,-4556.38"/>
<polygon fill="blue" stroke="blue" points="2483.45,-4559.85 2493.86,-4557.88 2484.49,-4552.93 2483.45,-4559.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId().</title>
<g id="a_node66"><a xlink:title="fn GroupSecretParams_EncryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;service_id: ServiceId, ) &#45;&gt; Serialized&lt;UuidCiphertext&gt; { &#160;&#160;&#160;&#160;params.encrypt_service_id(service_id).into() }">
<polygon fill="white" stroke="black" points="1649,-5194 1371,-5194 1371,-5158 1649,-5158 1649,-5194"/>
<text text-anchor="middle" x="1510" y="-5172.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_EncryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="node350" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<g id="a_node350"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;service_id: libsignal_core::ServiceId, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(ser...">
<polygon fill="white" stroke="black" points="2142,-6189 1996,-6189 1996,-6153 2142,-6153 2142,-6189"/>
<text text-anchor="middle" x="2069" y="-6167.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1649.02,-5169.56C1726.97,-5169.22 1813.91,-5175.52 1840,-5203 1911.79,-5278.62 1798.79,-6063.02 1868,-6141 1896.74,-6173.39 1944.21,-6181.53 1985.69,-6181.27"/>
<polygon fill="blue" stroke="blue" points="1985.89,-6184.77 1995.81,-6181.05 1985.74,-6177.77 1985.89,-6184.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId().</title>
<g id="a_node67"><a xlink:title="fn CallLinkSecretParams_EncryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;UuidCiphertext&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLinkSecretParams&gt;(params_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1646,-3952 1374,-3952 1374,-3916 1646,-3916 1646,-3952"/>
<text text-anchor="middle" x="1510" y="-3930.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_EncryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid(). -->
<g id="node345" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().</title>
<g id="a_node345"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_uid(&amp;self, user_id: libsignal_core::Aci) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(user_id.into()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.encrypt_uid_...">
<polygon fill="white" stroke="black" points="2570,-4017 2472,-4017 2472,-3981 2570,-3981 2570,-4017"/>
<text text-anchor="middle" x="2521" y="-3995.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.1,-3927.83C1724.62,-3927.44 1813.22,-3933.58 1840,-3961 1914.51,-4037.28 1790.44,-4366.84 1868,-4440 1900.49,-4470.65 2237.61,-4470.76 2270,-4440 2301.3,-4410.27 2262.26,-4085.08 2290,-4052 2331.31,-4002.74 2408.37,-3993.95 2461.85,-3994.53"/>
<polygon fill="blue" stroke="blue" points="2461.8,-3998.03 2471.88,-3994.75 2461.96,-3991.03 2461.8,-3998.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node68"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="1669,-4438 1351,-4438 1351,-4402 1669,-4402 1669,-4438"/>
<text text-anchor="middle" x="1510" y="-4416.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node339" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node339"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="2549,-4743 2493,-4743 2493,-4707 2549,-4707 2549,-4743"/>
<text text-anchor="middle" x="2521" y="-4721.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1669.38,-4414.21C1741.21,-4415.22 1815.53,-4422.63 1840,-4447 1891.36,-4498.15 1814.59,-4722.99 1868,-4772 1958.08,-4854.65 2358.32,-4764.9 2482.88,-4734.39"/>
<polygon fill="blue" stroke="blue" points="2483.84,-4737.75 2492.71,-4731.96 2482.17,-4730.96 2483.84,-4737.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node69"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1715,-4546 1305,-4546 1305,-4510 1715,-4510 1715,-4546"/>
<text text-anchor="middle" x="1510" y="-4524.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node366" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node366"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="2208,-5512 1930,-5512 1930,-5476 2208,-5476 2208,-5512"/>
<text text-anchor="middle" x="2069" y="-5490.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1715.23,-4523.41C1770.87,-4526.69 1821.06,-4535.45 1840,-4555 1883.04,-4599.42 1851.75,-5051.32 1868,-5111 1907.26,-5255.23 2006.58,-5406.99 2048.67,-5467.16"/>
<polygon fill="blue" stroke="blue" points="2046.06,-5469.53 2054.69,-5475.69 2051.79,-5465.5 2046.06,-5469.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node70"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="1783,-4870 1237,-4870 1237,-4834 1783,-4834 1783,-4870"/>
<text text-anchor="middle" x="1510" y="-4848.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node373" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node373"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="2235.5,-5836 1902.5,-5836 1902.5,-5800 2235.5,-5800 2235.5,-5836"/>
<text text-anchor="middle" x="2069" y="-5814.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1783.08,-4855.09C1808.93,-4860.24 1829.44,-4867.89 1840,-4879 1909.83,-4952.5 1800.12,-5715.7 1868,-5791 1875.29,-5799.09 1883.76,-5805.61 1893,-5810.82"/>
<polygon fill="blue" stroke="blue" points="1891.6,-5814.03 1902.1,-5815.43 1894.76,-5807.79 1891.6,-5814.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node71"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="1678,-4384 1342,-4384 1342,-4348 1678,-4348 1678,-4384"/>
<text text-anchor="middle" x="1510" y="-4362.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node341" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node341"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2555.5,-4689 2486.5,-4689 2486.5,-4653 2555.5,-4653 2555.5,-4689"/>
<text text-anchor="middle" x="2521" y="-4667.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1678.37,-4360.32C1747.34,-4361.82 1816.6,-4369.6 1840,-4393 1893.76,-4446.76 1812.08,-4682.48 1868,-4734 1900.85,-4764.26 2231.5,-4756.65 2270,-4734 2285.78,-4724.72 2274.79,-4708.19 2290,-4698 2345.82,-4660.6 2426.77,-4660.53 2476.26,-4664.98"/>
<polygon fill="blue" stroke="blue" points="2476.02,-4668.47 2486.32,-4665.99 2476.72,-4661.51 2476.02,-4668.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node72"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="1661.5,-5572 1358.5,-5572 1358.5,-5536 1661.5,-5536 1661.5,-5572"/>
<text text-anchor="middle" x="1510" y="-5550.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node329" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node329"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="2097,-6556 2041,-6556 2041,-6520 2097,-6520 2097,-6556"/>
<text text-anchor="middle" x="2069" y="-6534.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1661.77,-5539.09C1726.15,-5541.46 1796.36,-5557.35 1840,-5607 1906.34,-5682.48 1800.7,-6436.37 1868,-6511 1908.38,-6555.78 1984.85,-6552.55 2030.64,-6545.63"/>
<polygon fill="blue" stroke="blue" points="2031.45,-6549.04 2040.75,-6543.97 2030.32,-6542.14 2031.45,-6549.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node73"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="1633.5,-3466 1386.5,-3466 1386.5,-3430 1633.5,-3430 1633.5,-3466"/>
<text text-anchor="middle" x="1510" y="-3444.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node358" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node358"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="2106.5,-3384 2031.5,-3384 2031.5,-3348 2106.5,-3348 2106.5,-3384"/>
<text text-anchor="middle" x="2069" y="-3362.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1633.73,-3457.69C1697.9,-3457.98 1776.16,-3450.56 1840,-3421 1855.97,-3413.61 1852.23,-3400.81 1868,-3393 1916.34,-3369.06 1978.87,-3364.15 2021.04,-3364.04"/>
<polygon fill="blue" stroke="blue" points="2021.28,-3367.54 2031.3,-3364.11 2021.32,-3360.54 2021.28,-3367.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node74"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="1746.5,-4492 1273.5,-4492 1273.5,-4456 1746.5,-4456 1746.5,-4492"/>
<text text-anchor="middle" x="1510" y="-4470.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node316" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node316"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="2133,-4860 2005,-4860 2005,-4824 2133,-4824 2133,-4860"/>
<text text-anchor="middle" x="2069" y="-4838.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1746.88,-4472.49C1789.02,-4477 1824.48,-4485.62 1840,-4501 1888.96,-4549.55 1820.94,-4759.61 1868,-4810 1899.55,-4843.78 1951.44,-4851.31 1994.46,-4850.64"/>
<polygon fill="blue" stroke="blue" points="1994.73,-4854.13 2004.62,-4850.32 1994.51,-4847.13 1994.73,-4854.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey().</title>
<g id="a_node75"><a xlink:title="fn GroupSecretParams_EncryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCiphertext&gt; { &#160;&#160;&#160;&#160;params &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1650.5,-5302 1369.5,-5302 1369.5,-5266 1650.5,-5266 1650.5,-5302"/>
<text text-anchor="middle" x="1510" y="-5280.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_EncryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="node347" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<g id="a_node347"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::ProfileKeyCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.encrypt_p...">
<polygon fill="white" stroke="black" points="2144.5,-6297 1993.5,-6297 1993.5,-6261 2144.5,-6261 2144.5,-6297"/>
<text text-anchor="middle" x="2069" y="-6275.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1650.79,-5277.55C1728.29,-5277.32 1814.11,-5283.72 1840,-5311 1912.01,-5386.87 1798,-6174.28 1868,-6252 1896.32,-6283.44 1942.43,-6291.23 1983.24,-6290.68"/>
<polygon fill="blue" stroke="blue" points="1983.6,-6294.17 1993.49,-6290.37 1983.38,-6287.17 1983.6,-6294.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node76"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="1708,-3358 1312,-3358 1312,-3322 1708,-3322 1708,-3358"/>
<text text-anchor="middle" x="1510" y="-3336.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node355" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node355"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="2096,-3222 2042,-3222 2042,-3186 2096,-3186 2096,-3222"/>
<text text-anchor="middle" x="2069" y="-3200.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1620.27,-3358.01C1690.06,-3363.29 1778.63,-3357.68 1840,-3310 1869.42,-3287.14 1839.09,-3254.49 1868,-3231 1914.48,-3193.25 1988.04,-3193.87 2031.81,-3198.45"/>
<polygon fill="blue" stroke="blue" points="2031.65,-3201.96 2041.99,-3199.65 2032.47,-3195.01 2031.65,-3201.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node77"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="1767,-3520 1253,-3520 1253,-3484 1767,-3484 1767,-3520"/>
<text text-anchor="middle" x="1510" y="-3498.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node354" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node354"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="2161.5,-3276 1976.5,-3276 1976.5,-3240 2161.5,-3240 2161.5,-3276"/>
<text text-anchor="middle" x="2069" y="-3254.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587.58,-3520.03C1662.01,-3532.62 1773.32,-3537.52 1840,-3475 1902.27,-3416.62 1807.28,-3344.99 1868,-3285 1893.52,-3259.79 1930.62,-3250.42 1965.96,-3248.26"/>
<polygon fill="blue" stroke="blue" points="1966.51,-3251.74 1976.36,-3247.83 1966.22,-3244.75 1966.51,-3251.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="node356" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<g id="a_node356"><a xlink:title=" &#160;&#160;&#160;pub fn compress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: self.reserved, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2110.5,-3438 2027.5,-3438 2027.5,-3402 2110.5,-3402 2110.5,-3438"/>
<text text-anchor="middle" x="2069" y="-3416.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1767.11,-3498.92C1792.38,-3493.35 1817.12,-3485.6 1840,-3475 1855.97,-3467.61 1852.23,-3454.81 1868,-3447 1914.99,-3423.73 1975.39,-3418.44 2017.47,-3418.06"/>
<polygon fill="blue" stroke="blue" points="2017.48,-3421.56 2027.48,-3418.06 2017.48,-3414.56 2017.48,-3421.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node78"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="1722.5,-4330 1297.5,-4330 1297.5,-4294 1722.5,-4294 1722.5,-4330"/>
<text text-anchor="middle" x="1510" y="-4308.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node340" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node340"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="2548,-4635 2494,-4635 2494,-4599 2548,-4599 2548,-4635"/>
<text text-anchor="middle" x="2521" y="-4613.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1722.74,-4308.26C1775.18,-4311.91 1821.67,-4320.65 1840,-4339 1894.37,-4393.41 1811.45,-4631.86 1868,-4684 1933.67,-4744.56 2194.01,-4730.97 2270,-4684 2286.91,-4673.55 2273.73,-4655.42 2290,-4644 2347.94,-4603.33 2434.99,-4605.83 2483.69,-4611.36"/>
<polygon fill="blue" stroke="blue" points="2483.41,-4614.85 2493.76,-4612.61 2484.27,-4607.91 2483.41,-4614.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node79"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1716.5,-4816 1303.5,-4816 1303.5,-4780 1716.5,-4780 1716.5,-4816"/>
<text text-anchor="middle" x="1510" y="-4794.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node364" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node364"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2160,-5782 1978,-5782 1978,-5746 2160,-5746 2160,-5782"/>
<text text-anchor="middle" x="2069" y="-5760.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1716.77,-4793.27C1771.9,-4796.6 1821.4,-4805.42 1840,-4825 1909.83,-4898.5 1800.12,-5661.7 1868,-5737 1892.77,-5764.47 1931.12,-5773.88 1967.64,-5775.45"/>
<polygon fill="blue" stroke="blue" points="1967.8,-5778.95 1977.88,-5775.69 1967.97,-5771.95 1967.8,-5778.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node80"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="1678,-4654 1342,-4654 1342,-4618 1678,-4618 1678,-4654"/>
<text text-anchor="middle" x="1510" y="-4632.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node363" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node363"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="2166.5,-5620 1971.5,-5620 1971.5,-5584 2166.5,-5584 2166.5,-5620"/>
<text text-anchor="middle" x="2069" y="-5598.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1678.02,-4629.77C1747.41,-4631.1 1817.11,-4638.9 1840,-4663 1909.83,-4736.5 1800.12,-5499.7 1868,-5575 1891.33,-5600.88 1926.71,-5610.72 1961.26,-5613.09"/>
<polygon fill="blue" stroke="blue" points="1961.29,-5616.6 1971.45,-5613.58 1961.63,-5609.61 1961.29,-5616.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node81"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1660.5,-4006 1359.5,-4006 1359.5,-3970 1660.5,-3970 1660.5,-4006"/>
<text text-anchor="middle" x="1510" y="-3984.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node336" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node336"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="2554,-4100 2488,-4100 2488,-4064 2554,-4064 2554,-4100"/>
<text text-anchor="middle" x="2521" y="-4078.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1660.69,-3981.88C1735.26,-3982.33 1814.82,-3989.32 1840,-4015 1910.14,-4086.54 1794.99,-4396.39 1868,-4465 1900.55,-4495.59 2237.54,-4495.69 2270,-4465 2327.58,-4410.57 2235.7,-4166.7 2290,-4109 2337.53,-4058.49 2425.44,-4063.79 2477.72,-4072.62"/>
<polygon fill="blue" stroke="blue" points="2477.22,-4076.09 2487.68,-4074.42 2478.47,-4069.2 2477.22,-4076.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node82"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="1651,-5248 1369,-5248 1369,-5212 1651,-5212 1651,-5248"/>
<text text-anchor="middle" x="1510" y="-5226.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node351" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node351"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="2144.5,-6243 1993.5,-6243 1993.5,-6207 2144.5,-6207 2144.5,-6243"/>
<text text-anchor="middle" x="2069" y="-6221.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.23,-5223.55C1728.61,-5223.34 1814.16,-5229.77 1840,-5257 1912.01,-5332.87 1798,-6120.28 1868,-6198 1896.32,-6229.44 1942.43,-6237.23 1983.24,-6236.68"/>
<polygon fill="blue" stroke="blue" points="1983.6,-6240.17 1993.49,-6236.37 1983.38,-6233.17 1983.6,-6240.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node83"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="1672,-4114 1348,-4114 1348,-4078 1672,-4078 1672,-4114"/>
<text text-anchor="middle" x="1510" y="-4092.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node338" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node338"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="2555.5,-4208 2486.5,-4208 2486.5,-4172 2555.5,-4172 2555.5,-4208"/>
<text text-anchor="middle" x="2521" y="-4186.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1672.26,-4090.05C1743.3,-4091.16 1816.07,-4098.71 1840,-4123 1905.48,-4189.48 1799.85,-4478.25 1868,-4542 1933.24,-4603.03 2204.92,-4603.2 2270,-4542 2322.71,-4492.43 2240.27,-4269.56 2290,-4217 2337.27,-4167.03 2424.09,-4171.79 2476.48,-4180.45"/>
<polygon fill="blue" stroke="blue" points="2476.02,-4183.92 2486.48,-4182.22 2477.24,-4177.03 2476.02,-4183.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node84"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="1691,-5464 1329,-5464 1329,-5428 1691,-5428 1691,-5464"/>
<text text-anchor="middle" x="1510" y="-5442.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node323" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node323"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2548,-6556 2494,-6556 2494,-6520 2548,-6520 2548,-6556"/>
<text text-anchor="middle" x="2521" y="-6534.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1691.04,-5440.09C1755.95,-5442.13 1818.55,-5450.4 1840,-5473 1912.01,-5548.87 1796.93,-6337.25 1868,-6414 1929.04,-6479.92 2199.1,-6401.82 2270,-6457 2290.2,-6472.72 2269.88,-6495.18 2290,-6511 2345.94,-6555 2434.48,-6551.06 2483.8,-6544.44"/>
<polygon fill="blue" stroke="blue" points="2484.6,-6547.86 2493.99,-6542.96 2483.59,-6540.93 2484.6,-6547.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().</title>
<g id="a_node85"><a xlink:title="fn ServerPublicParams_VerifySignature( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;notary_signature: &amp;[u8; SIGNATURE_LEN], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1643.5,-5086 1376.5,-5086 1376.5,-5050 1643.5,-5050 1643.5,-5086"/>
<text text-anchor="middle" x="1510" y="-5064.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node362" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node362"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="2133,-6052 2005,-6052 2005,-6016 2133,-6016 2133,-6052"/>
<text text-anchor="middle" x="2069" y="-6030.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.72,-5061.6C1722.99,-5060.96 1813.31,-5066.9 1840,-5095 1909.83,-5168.5 1800.12,-5931.7 1868,-6007 1898.95,-6041.33 1951.11,-6047.45 1994.41,-6045.31"/>
<polygon fill="blue" stroke="blue" points="1994.88,-6048.79 2004.63,-6044.65 1994.43,-6041.81 1994.88,-6048.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node86"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="1663,-4168 1357,-4168 1357,-4132 1663,-4132 1663,-4168"/>
<text text-anchor="middle" x="1510" y="-4146.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node337" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node337"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="2549,-4262 2493,-4262 2493,-4226 2549,-4226 2549,-4262"/>
<text text-anchor="middle" x="2521" y="-4240.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1663.29,-4143.97C1737.06,-4144.6 1815.03,-4151.72 1840,-4177 1902.78,-4240.55 1802.67,-4517.08 1868,-4578 1933.33,-4638.93 2204.63,-4638.88 2270,-4578 2315.81,-4535.33 2249.3,-4344.57 2290,-4297 2337.6,-4241.36 2430.81,-4237.57 2482.76,-4240.36"/>
<polygon fill="blue" stroke="blue" points="2482.68,-4243.86 2492.89,-4241.01 2483.13,-4236.88 2482.68,-4243.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node87"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="1649.5,-5356 1370.5,-5356 1370.5,-5320 1649.5,-5320 1649.5,-5356"/>
<text text-anchor="middle" x="1510" y="-5334.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node349" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node349"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="2142,-6351 1996,-6351 1996,-6315 2142,-6315 2142,-6351"/>
<text text-anchor="middle" x="2069" y="-6329.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1649.91,-5331.56C1727.63,-5331.27 1814.01,-5337.62 1840,-5365 1912.01,-5440.87 1798,-6228.28 1868,-6306 1896.92,-6338.11 1944.39,-6345.55 1985.83,-6344.63"/>
<polygon fill="blue" stroke="blue" points="1986.09,-6348.12 1995.94,-6344.24 1985.82,-6341.13 1986.09,-6348.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().</title>
<g id="a_node88"><a xlink:title="fn ServerSecretParams_SignDeterministic( &#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; [u8; SIGNATURE_LEN] { &#160;&#160;&#160;&#160;params.sign(*randomness, message) }">
<polygon fill="white" stroke="black" points="1653,-5140 1367,-5140 1367,-5104 1653,-5104 1653,-5140"/>
<text text-anchor="middle" x="1510" y="-5118.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_SignDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node369" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node369"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="2096,-6106 2042,-6106 2042,-6070 2096,-6070 2096,-6106"/>
<text text-anchor="middle" x="2069" y="-6084.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge533" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.44,-5115.56C1730.23,-5115.48 1814.39,-5122.05 1840,-5149 1909.83,-5222.5 1800.12,-5985.7 1868,-6061 1908.7,-6106.15 1986.09,-6102.5 2031.75,-6095.46"/>
<polygon fill="blue" stroke="blue" points="2032.52,-6098.88 2041.81,-6093.78 2031.36,-6091.98 2032.52,-6098.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node89"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="1689.5,-3574 1330.5,-3574 1330.5,-3538 1689.5,-3538 1689.5,-3574"/>
<text text-anchor="middle" x="1510" y="-3552.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge539" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.1,-3574.05C1665.89,-3585.34 1773.18,-3588.18 1840,-3529 1886.2,-3488.08 1822.89,-3435.11 1868,-3393 1908.75,-3354.96 1976.1,-3353.78 2021.25,-3358.33"/>
<polygon fill="blue" stroke="blue" points="2021.04,-3361.83 2031.37,-3359.48 2021.83,-3354.87 2021.04,-3361.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node90"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1670.5,-5518 1349.5,-5518 1349.5,-5482 1670.5,-5482 1670.5,-5518"/>
<text text-anchor="middle" x="1510" y="-5496.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node334" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node334"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="2103.5,-6502 2034.5,-6502 2034.5,-6466 2103.5,-6466 2103.5,-6502"/>
<text text-anchor="middle" x="2069" y="-6480.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge540" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1670.85,-5493.65C1742.55,-5494.57 1816.32,-5502.07 1840,-5527 1910.81,-5601.56 1800.11,-6374.78 1868,-6452 1906.21,-6495.46 1977.93,-6496.27 2024.3,-6491.3"/>
<polygon fill="blue" stroke="blue" points="2024.85,-6494.76 2034.36,-6490.09 2024.01,-6487.81 2024.85,-6494.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node91"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="1706,-4600 1314,-4600 1314,-4564 1706,-4564 1706,-4600"/>
<text text-anchor="middle" x="1510" y="-4578.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node361" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node361"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="2200.5,-5566 1937.5,-5566 1937.5,-5530 2200.5,-5530 2200.5,-5566"/>
<text text-anchor="middle" x="2069" y="-5544.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge547" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1706.18,-4576.7C1765.47,-4579.52 1820.21,-4588.17 1840,-4609 1909.83,-4682.5 1800.12,-5445.7 1868,-5521 1883.7,-5538.42 1904.87,-5548.58 1927.57,-5554.08"/>
<polygon fill="blue" stroke="blue" points="1926.87,-5557.5 1937.38,-5556.15 1928.32,-5550.66 1926.87,-5557.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().</title>
<g id="a_node92"><a xlink:title="fn GroupSendFullToken_Verify( &#160;&#160;&#160;&#160;token: &amp;[u8], &#160;&#160;&#160;&#160;user_ids: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;key_pair: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let token = zkgroup::des...">
<polygon fill="white" stroke="black" points="1611.5,-3412 1408.5,-3412 1408.5,-3376 1611.5,-3376 1611.5,-3412"/>
<text text-anchor="middle" x="1510" y="-3390.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendFullToken_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="node353" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<g id="a_node353"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroup...">
<polygon fill="white" stroke="black" points="2097,-3330 2041,-3330 2041,-3294 2097,-3294 2097,-3330"/>
<text text-anchor="middle" x="2069" y="-3308.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="edge564" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.62,-3403.3C1679.21,-3405.42 1768.62,-3400.05 1840,-3367 1855.97,-3359.61 1852.23,-3346.81 1868,-3339 1920.25,-3313.13 1989.07,-3309.48 2030.85,-3310.1"/>
<polygon fill="blue" stroke="blue" points="2030.78,-3313.6 2040.86,-3310.34 2030.95,-3306.6 2030.78,-3313.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node93"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="1800,-5032 1220,-5032 1220,-4996 1800,-4996 1800,-5032"/>
<text text-anchor="middle" x="1510" y="-5010.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node371" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node371"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="2255.5,-5998 1882.5,-5998 1882.5,-5962 2255.5,-5962 2255.5,-5998"/>
<text text-anchor="middle" x="2069" y="-5976.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge578" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1800.26,-5021.12C1817.97,-5026 1831.91,-5032.48 1840,-5041 1909.83,-5114.5 1800.12,-5877.7 1868,-5953 1870.03,-5955.26 1872.16,-5957.39 1874.37,-5959.41"/>
<polygon fill="blue" stroke="blue" points="1872.24,-5962.19 1882.19,-5965.83 1876.68,-5956.78 1872.24,-5962.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node94"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="1714,-5410 1306,-5410 1306,-5374 1714,-5374 1714,-5410"/>
<text text-anchor="middle" x="1510" y="-5388.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node328" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node328"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="2554,-6502 2488,-6502 2488,-6466 2554,-6466 2554,-6502"/>
<text text-anchor="middle" x="2521" y="-6480.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge579" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1714.16,-5387.09C1770.34,-5390.3 1821.12,-5399.09 1840,-5419 1913.97,-5496.99 1793.55,-6308.47 1868,-6386 1899.01,-6418.3 2225.88,-6406.37 2270,-6414 2344.58,-6426.9 2428.89,-6453 2478.08,-6469.43"/>
<polygon fill="blue" stroke="blue" points="2477.13,-6472.8 2487.73,-6472.68 2479.37,-6466.17 2477.13,-6472.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node95"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="1763,-4762 1257,-4762 1257,-4726 1763,-4726 1763,-4762"/>
<text text-anchor="middle" x="1510" y="-4740.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node372" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node372"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="2210,-5728 1928,-5728 1928,-5692 2210,-5692 2210,-5728"/>
<text text-anchor="middle" x="2069" y="-5706.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge589" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1763.36,-4743.77C1798.37,-4748.73 1826.87,-4757.19 1840,-4771 1909.83,-4844.5 1800.12,-5607.7 1868,-5683 1881.5,-5697.97 1899.03,-5707.58 1918.1,-5713.47"/>
<polygon fill="blue" stroke="blue" points="1917.31,-5716.89 1927.88,-5716.15 1919.16,-5710.14 1917.31,-5716.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().</title>
<g id="a_node96"><a xlink:title="fn ProfileKey_GetCommitment( &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCommitment&gt; { &#160;&#160;&#160;&#160;profile_key.get_commitment(user_id).into() }">
<polygon fill="white" stroke="black" points="1612.5,-3736 1407.5,-3736 1407.5,-3700 1612.5,-3700 1612.5,-3736"/>
<text text-anchor="middle" x="1510" y="-3714.3" font-family="Helvetica,sans-Serif" font-size="14.00">ProfileKey_GetCommitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node360" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node360"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="2136,-3993 2002,-3993 2002,-3957 2136,-3957 2136,-3993"/>
<text text-anchor="middle" x="2069" y="-3971.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge625" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587.3,-3699.94C1661.8,-3687.25 1773.39,-3682.19 1840,-3745 1904.66,-3805.98 1805.73,-3879.59 1868,-3943 1899.52,-3975.1 1949.5,-3983.11 1991.6,-3983.09"/>
<polygon fill="blue" stroke="blue" points="1991.9,-3986.58 2001.84,-3982.93 1991.79,-3979.58 1991.9,-3986.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node97"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1771,-3628 1249,-3628 1249,-3592 1771,-3592 1771,-3628"/>
<text text-anchor="middle" x="1510" y="-3606.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="edge665" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.1,-3628.05C1665.89,-3639.34 1773.18,-3642.18 1840,-3583 1886.2,-3542.08 1822.89,-3489.11 1868,-3447 1907.56,-3410.07 1972.2,-3407.88 2017.25,-3411.95"/>
<polygon fill="blue" stroke="blue" points="2017.09,-3415.45 2027.39,-3413 2017.81,-3408.48 2017.09,-3415.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node357" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node357"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="2162.5,-3492 1975.5,-3492 1975.5,-3456 2162.5,-3456 2162.5,-3492"/>
<text text-anchor="middle" x="2069" y="-3470.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge664" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1606.32,-3628.02C1677.94,-3635.94 1774.56,-3633.98 1840,-3583 1870.38,-3559.33 1838.25,-3525.45 1868,-3501 1894.91,-3478.88 1931.09,-3469.87 1965.28,-3467.12"/>
<polygon fill="blue" stroke="blue" points="1965.58,-3470.61 1975.34,-3466.48 1965.14,-3463.62 1965.58,-3470.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node98"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="1736,-3844 1284,-3844 1284,-3808 1736,-3808 1736,-3844"/>
<text text-anchor="middle" x="1510" y="-3822.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node312" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node312"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="2102,-4351 2036,-4351 2036,-4315 2102,-4315 2102,-4351"/>
<text text-anchor="middle" x="2069" y="-4329.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge680" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1736.28,-3823.1C1783.15,-3827.26 1823.4,-3836.07 1840,-3853 1909.84,-3924.22 1800.94,-4227.16 1868,-4301 1907.23,-4344.2 1979.64,-4344.84 2025.73,-4339.94"/>
<polygon fill="blue" stroke="blue" points="2026.2,-4343.41 2035.71,-4338.75 2025.37,-4336.46 2026.2,-4343.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node99"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="1646,-3682 1374,-3682 1374,-3646 1646,-3646 1646,-3682"/>
<text text-anchor="middle" x="1510" y="-3660.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node346" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node346"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="2570,-3963 2472,-3963 2472,-3927 2570,-3927 2570,-3963"/>
<text text-anchor="middle" x="2521" y="-3941.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge700" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.12,-3645.96C1660.78,-3632.92 1773.49,-3627.26 1840,-3691 1912.43,-3760.42 1794.33,-3846.89 1868,-3915 1889.6,-3934.97 2305.44,-3942.29 2461.5,-3944.33"/>
<polygon fill="blue" stroke="blue" points="2461.79,-3947.84 2471.84,-3944.47 2461.88,-3940.84 2461.79,-3947.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().</title>
<g id="a_node100"><a xlink:title="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serialized&lt;Gr...">
<polygon fill="white" stroke="black" points="1780,-3898 1240,-3898 1240,-3862 1780,-3862 1780,-3898"/>
<text text-anchor="middle" x="1510" y="-3876.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="node311" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<g id="a_node311"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AnyAuthCredentialPresentat...">
<polygon fill="white" stroke="black" points="2103.5,-4405 2034.5,-4405 2034.5,-4369 2103.5,-4369 2103.5,-4405"/>
<text text-anchor="middle" x="2069" y="-4383.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="edge715" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1780.2,-3882.91C1807.3,-3888.01 1828.92,-3895.69 1840,-3907 1910.6,-3979.03 1799.31,-4286.15 1868,-4360 1907.15,-4402.1 1978.28,-4401.32 2024.31,-4395.34"/>
<polygon fill="blue" stroke="blue" points="2024.9,-4398.79 2034.3,-4393.91 2023.91,-4391.86 2024.9,-4398.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node101"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="1669,-3790 1351,-3790 1351,-3754 1669,-3754 1669,-3790"/>
<text text-anchor="middle" x="1510" y="-3768.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node325" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node325"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="2548,-6650 2494,-6650 2494,-6614 2548,-6614 2548,-6650"/>
<text text-anchor="middle" x="2521" y="-6628.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge723" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1669.21,-3765.93C1741.25,-3766.85 1815.81,-3774.26 1840,-3799 1913.75,-3874.46 1793.97,-4197.81 1868,-4273 1930.85,-4336.83 2208.77,-4237.61 2270,-4303 2312.95,-4348.87 2252.07,-6514.9 2290,-6565 2335.33,-6624.87 2431.14,-6633.62 2483.66,-6633.57"/>
<polygon fill="blue" stroke="blue" points="2483.91,-6637.07 2493.87,-6633.45 2483.83,-6630.07 2483.91,-6637.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node102"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="1715,-4708 1305,-4708 1305,-4672 1715,-4672 1715,-4708"/>
<text text-anchor="middle" x="1510" y="-4686.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node370" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node370"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="2212,-5674 1926,-5674 1926,-5638 2212,-5638 2212,-5674"/>
<text text-anchor="middle" x="2069" y="-5652.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge724" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1715.02,-4685.16C1770.84,-4688.41 1821.2,-4697.21 1840,-4717 1909.83,-4790.5 1800.12,-5553.7 1868,-5629 1881.04,-5643.46 1897.83,-5652.91 1916.15,-5658.86"/>
<polygon fill="blue" stroke="blue" points="1915.27,-5662.25 1925.85,-5661.65 1917.21,-5655.52 1915.27,-5662.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node103"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="1754,-4924 1266,-4924 1266,-4888 1754,-4888 1754,-4924"/>
<text text-anchor="middle" x="1510" y="-4902.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node367" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node367"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2205,-5890 1933,-5890 1933,-5854 2205,-5854 2205,-5890"/>
<text text-anchor="middle" x="2069" y="-5868.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge728" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1754.14,-4904.56C1793.32,-4909.3 1825.74,-4917.99 1840,-4933 1909.83,-5006.5 1800.12,-5769.7 1868,-5845 1882.7,-5861.3 1902.18,-5871.25 1923.23,-5876.96"/>
<polygon fill="blue" stroke="blue" points="1922.46,-5880.38 1933,-5879.3 1924.09,-5873.57 1922.46,-5880.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().</title>
<g id="a_node104"><a xlink:title="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1723.5,-4978 1296.5,-4978 1296.5,-4942 1723.5,-4942 1723.5,-4978"/>
<text text-anchor="middle" x="1510" y="-4956.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyProfileKeyCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node368" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node368"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="2221.5,-5944 1916.5,-5944 1916.5,-5908 2221.5,-5908 2221.5,-5944"/>
<text text-anchor="middle" x="2069" y="-5922.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge790" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1723.76,-4955.72C1776.04,-4959.37 1822.19,-4968.25 1840,-4987 1909.83,-5060.5 1800.12,-5823.7 1868,-5899 1878.68,-5910.85 1891.89,-5919.34 1906.39,-5925.28"/>
<polygon fill="blue" stroke="blue" points="1905.49,-5928.68 1916.09,-5928.84 1907.9,-5922.11 1905.49,-5928.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node105"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="2565.5,-10543 2476.5,-10543 2476.5,-10507 2565.5,-10507 2565.5,-10543"/>
<text text-anchor="middle" x="2521" y="-10521.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2533.37,-10507C2605.64,-10392.6 3000.58,-9767.49 3087.55,-9629.82"/>
<polygon fill="blue" stroke="blue" points="3090.67,-9631.44 3093.05,-9621.12 3084.75,-9627.7 3090.67,-9631.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="2947.5,-9576 2797.5,-9576 2797.5,-9540 2947.5,-9540 2947.5,-9576"/>
<text text-anchor="middle" x="2872.5" y="-9554.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2521.55,-10506.72C2519.99,-10403.99 2525.22,-9892.78 2772,-9603 2779.73,-9593.92 2789.67,-9586.59 2800.26,-9580.69"/>
<polygon fill="blue" stroke="blue" points="2801.98,-9583.74 2809.28,-9576.07 2798.78,-9577.51 2801.98,-9583.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node106"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2106.5,-10543 2031.5,-10543 2031.5,-10507 2106.5,-10507 2106.5,-10543"/>
<text text-anchor="middle" x="2069" y="-10521.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge720" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2106.83,-10525C2186.16,-10525 2373.5,-10525 2466.17,-10525"/>
<polygon fill="blue" stroke="blue" points="2466.45,-10528.5 2476.45,-10525 2466.45,-10521.5 2466.45,-10528.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node107"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2899.5,-8142 2845.5,-8142 2845.5,-8106 2899.5,-8106 2899.5,-8142"/>
<text text-anchor="middle" x="2872.5" y="-8120.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge504" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M2899.59,-8132.03C2920.74,-8139.96 2949.48,-8154.25 2965,-8177 3024.79,-8264.65 2953.1,-8318.33 3001,-8413 3100.81,-8610.28 3181.91,-8706 3403,-8706 3403,-8706 3403,-8706 3750,-8706 4208.94,-8706 4030.13,-9208.06 4213,-9629 4223.2,-9652.47 4213.41,-9666.53 4233,-9683 4256.99,-9703.16 4291.06,-9710.31 4320.36,-9712.23"/>
<polygon fill="blue" stroke="blue" points="4320.34,-9715.74 4330.5,-9712.71 4320.67,-9708.74 4320.34,-9715.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery(). -->
<g id="edge505" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]to_montgomery().</title>
<path fill="none" stroke="blue" d="M2899.75,-8136.37C2918.85,-8146.03 2944.79,-8160.53 2965,-8177 3191.7,-8361.72 3110.57,-8668 3403,-8668 3403,-8668 3403,-8668 3750,-8668 3801.51,-8668 4177.11,-8655.05 4213,-8692 4247.19,-8727.2 4201.17,-9537.66 4233,-9575 4251.21,-9596.37 4280.3,-9604.5 4307.8,-9606.76"/>
<polygon fill="blue" stroke="blue" points="4307.66,-9610.26 4317.84,-9607.34 4308.06,-9603.27 4307.66,-9610.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge503" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.67,-8131.55C2921.16,-8139.25 2950.37,-8153.45 2965,-8177 2996.91,-8228.36 2995.25,-8659.81 3001,-8720 3031.1,-9035.16 3085.11,-9415.56 3100.38,-9520.83"/>
<polygon fill="blue" stroke="blue" points="3096.95,-9521.57 3101.85,-9530.96 3103.88,-9520.56 3096.95,-9521.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge502" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.91,-8131.4C2921.56,-8139.01 2950.85,-8153.16 2965,-8177 3044.38,-8310.71 2904.36,-9454.18 3001,-9576 3008.83,-9585.87 3019.78,-9592.41 3031.65,-9596.68"/>
<polygon fill="blue" stroke="blue" points="3030.74,-9600.06 3041.32,-9599.65 3032.79,-9593.37 3030.74,-9600.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="3562,-9587 3246,-9587 3246,-9551 3562,-9551 3562,-9587"/>
<text text-anchor="middle" x="3404" y="-9565.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3180.55,-9554C3197.64,-9555.15 3216.51,-9556.42 3235.8,-9557.72"/>
<polygon fill="blue" stroke="blue" points="3235.71,-9561.22 3245.93,-9558.4 3236.19,-9554.24 3235.71,-9561.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="2954.5,-9648 2790.5,-9648 2790.5,-9612 2954.5,-9612 2954.5,-9648"/>
<text text-anchor="middle" x="2872.5" y="-9626.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2911.99,-9611.97C2937,-9600.68 2970.5,-9586.37 3001,-9576 3007.32,-9573.85 3013.9,-9571.77 3020.56,-9569.79"/>
<polygon fill="blue" stroke="blue" points="3021.7,-9573.1 3030.33,-9566.95 3019.75,-9566.38 3021.7,-9573.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2954.62,-9620.52C2979.53,-9617.61 3006.79,-9614.42 3031.15,-9611.57"/>
<polygon fill="blue" stroke="blue" points="3031.87,-9615.01 3041.4,-9610.38 3031.06,-9608.06 3031.87,-9615.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2954.82,-9636.44C3041.2,-9642.14 3171.58,-9647.17 3218,-9630 3233.37,-9624.31 3231.39,-9613.42 3246,-9606 3258.36,-9599.72 3271.8,-9594.49 3285.45,-9590.13"/>
<polygon fill="blue" stroke="blue" points="3286.86,-9593.36 3295.42,-9587.11 3284.83,-9586.66 3286.86,-9593.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="3550.5,-9651 3257.5,-9651 3257.5,-9615 3550.5,-9615 3550.5,-9651"/>
<text text-anchor="middle" x="3404" y="-9629.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2954.65,-9640.99C2970.02,-9642.66 2985.98,-9644.12 3001,-9645 3082.05,-9649.75 3172.41,-9647.71 3246.9,-9644.07"/>
<polygon fill="blue" stroke="blue" points="3247.49,-9647.54 3257.3,-9643.54 3247.14,-9640.55 3247.49,-9647.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3169.74,-9609.4C3192.69,-9611.72 3219.74,-9614.46 3247.14,-9617.23"/>
<polygon fill="blue" stroke="blue" points="3246.95,-9620.73 3257.25,-9618.25 3247.65,-9613.76 3246.95,-9620.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="3824,-9744 3674,-9744 3674,-9708 3824,-9708 3824,-9744"/>
<text text-anchor="middle" x="3749" y="-9722.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3512.91,-9587.11C3532.32,-9592.07 3552.07,-9598.27 3570,-9606 3626.95,-9630.54 3685.07,-9673.88 3718.78,-9701.21"/>
<polygon fill="blue" stroke="blue" points="3716.85,-9704.16 3726.81,-9707.79 3721.29,-9698.74 3716.85,-9704.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge607" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2947.54,-9555.12C2970.75,-9554.21 2996.54,-9553.21 3020.39,-9552.28"/>
<polygon fill="blue" stroke="blue" points="3020.62,-9555.77 3030.48,-9551.88 3020.35,-9548.78 3020.62,-9555.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="3813,-9798 3685,-9798 3685,-9762 3813,-9762 3813,-9798"/>
<text text-anchor="middle" x="3749" y="-9776.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge791" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3487.2,-9651.08C3516,-9660.64 3546.89,-9674.92 3570,-9696 3590.85,-9715.02 3575.46,-9736.01 3598,-9753 3619.82,-9769.46 3648.46,-9777.03 3674.86,-9780.21"/>
<polygon fill="blue" stroke="blue" points="3674.54,-9783.69 3684.84,-9781.22 3675.25,-9776.73 3674.54,-9783.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3495.5,-9744 3312.5,-9744 3312.5,-9708 3495.5,-9708 3495.5,-9744"/>
<text text-anchor="middle" x="3404" y="-9722.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3495.57,-9740.26C3551.6,-9749.08 3622.59,-9760.26 3675,-9768.51"/>
<polygon fill="blue" stroke="blue" points="3674.47,-9771.97 3684.89,-9770.07 3675.56,-9765.05 3674.47,-9771.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3495.57,-9726C3547.76,-9726 3612.93,-9726 3663.98,-9726"/>
<polygon fill="blue" stroke="blue" points="3663.99,-9729.5 3673.99,-9726 3663.99,-9722.5 3663.99,-9729.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<path fill="none" stroke="blue" d="M3813.39,-9776.9C3924.17,-9770.48 4147.46,-9752.76 4213,-9712 4226.29,-9703.73 4219.86,-9691.51 4233,-9683 4235.32,-9681.5 4237.7,-9680.08 4240.13,-9678.73"/>
<polygon fill="blue" stroke="blue" points="4241.81,-9681.8 4249.16,-9674.16 4238.65,-9675.55 4241.81,-9681.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="blue" d="M3813.32,-9781.31C3902.52,-9782.8 4070.26,-9784.28 4213,-9778 4251.95,-9776.29 4295.88,-9772.53 4328.9,-9769.34"/>
<polygon fill="blue" stroke="blue" points="4329.61,-9772.79 4339.22,-9768.33 4328.93,-9765.82 4329.61,-9772.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="blue" d="M3813.22,-9773.31C3840.46,-9769.24 3872.33,-9762.86 3900,-9753 3949.61,-9735.33 4001.92,-9704.13 4035.08,-9682.55"/>
<polygon fill="blue" stroke="blue" points="4037.06,-9685.43 4043.49,-9677.01 4033.22,-9679.58 4037.06,-9685.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="3461.5,-9798 3346.5,-9798 3346.5,-9762 3461.5,-9762 3461.5,-9798"/>
<text text-anchor="middle" x="3404" y="-9776.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge567" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3461.64,-9780C3519.86,-9780 3610.76,-9780 3674.49,-9780"/>
<polygon fill="blue" stroke="blue" points="3674.87,-9783.5 3684.87,-9780 3674.87,-9776.5 3674.87,-9783.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge745" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="blue" d="M3824.12,-9730.47C3953.63,-9738.28 4217.87,-9754.22 4328.98,-9760.92"/>
<polygon fill="blue" stroke="blue" points="4329.05,-9764.43 4339.25,-9761.54 4329.48,-9757.45 4329.05,-9764.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node118"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1110,-10648 952,-10648 952,-10612 1110,-10612 1110,-10648"/>
<text text-anchor="middle" x="1031" y="-10626.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1110.04,-10621.14C1130.2,-10619.14 1151.89,-10617.25 1172,-10616 1347.27,-10605.14 2583.51,-10627.48 2752,-10578 2998.68,-10505.56 3005.27,-10367.27 3246,-10277 3278.22,-10264.92 3316.21,-10258.2 3346.75,-10254.49"/>
<polygon fill="blue" stroke="blue" points="3347.27,-10257.95 3356.8,-10253.34 3346.47,-10251 3347.27,-10257.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub fn verify_search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: SlimSearchRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: FullSearchResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime,...">
<polygon fill="white" stroke="black" points="1564,-10824 1456,-10824 1456,-10788 1564,-10788 1564,-10824"/>
<text text-anchor="middle" x="1510" y="-10802.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1065.07,-10648.02C1091.91,-10664.18 1128.97,-10690.22 1152,-10722 1167.75,-10743.74 1150.74,-10762.61 1172,-10779 1250.48,-10839.49 1371.99,-10831.94 1445.66,-10819.79"/>
<polygon fill="blue" stroke="blue" points="1446.47,-10823.2 1455.73,-10818.05 1445.28,-10816.3 1446.47,-10823.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;fn try_from(public_key: [u8; 32]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match CompressedEdwardsY(public_key).decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Error::InvalidCurvePoint), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(pt) if pt.is_sma...">
<polygon fill="white" stroke="black" points="3786.5,-10625 3711.5,-10625 3711.5,-10589 3786.5,-10589 3786.5,-10625"/>
<text text-anchor="middle" x="3749" y="-10603.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1110.17,-10632.59C1353.7,-10639.85 2120.17,-10656.78 2752,-10606 2863.4,-10597.05 2889.52,-10578.8 3001,-10571 3097.21,-10564.27 3121.61,-10567.73 3218,-10571 3396.84,-10577.07 3609.03,-10594.62 3701.29,-10602.76"/>
<polygon fill="blue" stroke="blue" points="3701.15,-10606.26 3711.42,-10603.66 3701.77,-10599.29 3701.15,-10606.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node119"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="812,-10648 737,-10648 737,-10612 812,-10612 812,-10648"/>
<text text-anchor="middle" x="774.5" y="-10626.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge581" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.23,-10630C845.95,-10630 897.24,-10630 941.58,-10630"/>
<polygon fill="blue" stroke="blue" points="941.8,-10633.5 951.8,-10630 941.8,-10626.5 941.8,-10633.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;a self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;M...">
<polygon fill="white" stroke="black" points="1568,-10770 1452,-10770 1452,-10734 1568,-10734 1568,-10770"/>
<text text-anchor="middle" x="1510" y="-10748.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<g id="a_node122"><a xlink:title="pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;config: &amp;&#39;a PublicConfig, &#160;&#160;&#160;&#160;req: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;res: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;MonitorStateUpdate&gt; { ...">
<polygon fill="white" stroke="black" points="2579,-10824 2463,-10824 2463,-10788 2579,-10788 2579,-10824"/>
<text text-anchor="middle" x="2521" y="-10802.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1568.13,-10741.09C1638.33,-10730.94 1758.17,-10724.55 1840,-10779 1862.51,-10793.98 1844.9,-10818.96 1868,-10833 2020.67,-10925.81 2091.59,-10842.61 2270,-10833 2331.99,-10829.66 2402.25,-10821.7 2452.47,-10815.28"/>
<polygon fill="blue" stroke="blue" points="2453.08,-10818.73 2462.55,-10813.98 2452.18,-10811.79 2453.08,-10818.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node126"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="2123,-10824 2015,-10824 2015,-10788 2123,-10788 2123,-10824"/>
<text text-anchor="middle" x="2069" y="-10802.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="edge624" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1564.16,-10806C1667.26,-10806 1893.97,-10806 2004.67,-10806"/>
<polygon fill="blue" stroke="blue" points="2004.69,-10809.5 2014.69,-10806 2004.69,-10802.5 2004.69,-10809.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node128"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2952,-10770 2793,-10770 2793,-10734 2952,-10734 2952,-10770"/>
<text text-anchor="middle" x="2872.5" y="-10748.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2579.42,-10800.95C2626.1,-10796.44 2693.55,-10789.01 2752,-10779 2763.46,-10777.04 2775.48,-10774.68 2787.3,-10772.19"/>
<polygon fill="blue" stroke="blue" points="2788.12,-10775.59 2797.16,-10770.07 2786.65,-10768.75 2788.12,-10775.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node123"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="2945,-10824 2800,-10824 2800,-10788 2945,-10788 2945,-10824"/>
<text text-anchor="middle" x="2872.5" y="-10802.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="3805.5,-10679 3692.5,-10679 3692.5,-10643 3805.5,-10643 3805.5,-10679"/>
<text text-anchor="middle" x="3749" y="-10657.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2945.24,-10821.87C3021.42,-10834.29 3141.2,-10840.5 3218,-10779 3251.03,-10752.55 3212.65,-10714.05 3246,-10688 3312.09,-10636.39 3561.78,-10647.04 3682.23,-10655.57"/>
<polygon fill="blue" stroke="blue" points="3682.19,-10659.08 3692.42,-10656.31 3682.7,-10652.09 3682.19,-10659.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="2173.5,-10770 1964.5,-10770 1964.5,-10734 2173.5,-10734 2173.5,-10770"/>
<text text-anchor="middle" x="2069" y="-10748.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M2123.07,-10733.9C2167.18,-10719.74 2231.9,-10700.99 2290,-10692 2340.99,-10684.11 3180.91,-10689.88 3218,-10654 3278.38,-10595.59 3189.52,-10339.19 3246,-10277 3270.77,-10249.72 3312.28,-10243.53 3346.39,-10243.85"/>
<polygon fill="blue" stroke="blue" points="3346.62,-10247.36 3356.72,-10244.15 3346.82,-10240.36 3346.62,-10247.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node125"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="2604.5,-10770 2437.5,-10770 2437.5,-10734 2604.5,-10734 2604.5,-10770"/>
<text text-anchor="middle" x="2521" y="-10748.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2173.52,-10752C2249.99,-10752 2353.19,-10752 2427.03,-10752"/>
<polygon fill="blue" stroke="blue" points="2427.25,-10755.5 2437.25,-10752 2427.25,-10748.5 2427.25,-10755.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2173.64,-10737.7C2210.33,-10733.05 2251.95,-10728.26 2290,-10725 2589.26,-10699.36 2665.02,-10707.04 2965,-10692 3077.45,-10686.36 3117.44,-10729.65 3218,-10679 3235.48,-10670.19 3228.62,-10654.02 3246,-10645 3266.02,-10634.61 3580.32,-10616.26 3701.17,-10609.55"/>
<polygon fill="blue" stroke="blue" points="3701.44,-10613.04 3711.23,-10608.99 3701.05,-10606.05 3701.44,-10613.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2604.53,-10759.56C2648.48,-10764.12 2703.36,-10770.67 2752,-10779 2764.24,-10781.1 2777.12,-10783.64 2789.7,-10786.32"/>
<polygon fill="blue" stroke="blue" points="2789.19,-10789.79 2799.71,-10788.49 2790.68,-10782.95 2789.19,-10789.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2604.83,-10752C2658.42,-10752 2728.13,-10752 2782.83,-10752"/>
<polygon fill="blue" stroke="blue" points="2782.87,-10755.5 2792.87,-10752 2782.87,-10748.5 2782.87,-10755.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2123.34,-10799.37C2167.88,-10793.86 2233.07,-10785.83 2290,-10779 2335.17,-10773.58 2385.36,-10767.67 2427.29,-10762.77"/>
<polygon fill="blue" stroke="blue" points="2427.96,-10766.22 2437.49,-10761.58 2427.15,-10759.26 2427.96,-10766.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node127"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="3207,-10770 3004,-10770 3004,-10734 3207,-10734 3207,-10770"/>
<text text-anchor="middle" x="3105.5" y="-10748.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M3150.61,-10733.97C3173.85,-10722.36 3200.98,-10705.09 3218,-10682 3246.66,-10643.13 3227.58,-10621.65 3246,-10577 3285.47,-10481.32 3352.41,-10377.87 3384.62,-10330.46"/>
<polygon fill="blue" stroke="blue" points="3387.64,-10332.23 3390.4,-10322 3381.86,-10328.28 3387.64,-10332.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge692" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2952.03,-10752C2965.4,-10752 2979.5,-10752 2993.52,-10752"/>
<polygon fill="blue" stroke="blue" points="2993.7,-10755.5 3003.7,-10752 2993.7,-10748.5 2993.7,-10755.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="3477,-10733 3331,-10733 3331,-10697 3477,-10697 3477,-10733"/>
<text text-anchor="middle" x="3404" y="-10711.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3447.52,-10696.88C3501.99,-10673.7 3590.33,-10636.27 3598,-10634 3631.93,-10623.96 3671.35,-10617.04 3701.25,-10612.72"/>
<polygon fill="blue" stroke="blue" points="3701.99,-10616.15 3711.41,-10611.3 3701.02,-10609.22 3701.99,-10616.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3477.32,-10703.61C3537.99,-10694.06 3623.87,-10680.54 3682.53,-10671.31"/>
<polygon fill="blue" stroke="blue" points="3683.09,-10674.76 3692.43,-10669.75 3682,-10667.85 3683.09,-10674.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;fn test_encode_to_curve_try_and_increment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let got = encode_to_curve_try_and_increment(&amp;v.pk, v.alpha) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.compress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.0...">
<polygon fill="white" stroke="black" points="3900,-10733 3598,-10733 3598,-10697 3900,-10697 3900,-10733"/>
<text text-anchor="middle" x="3749" y="-10711.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="blue" d="M3887.87,-10696.89C3892.14,-10694.24 3896.2,-10691.29 3900,-10688 3938.25,-10654.88 3898.45,-10613.92 3936,-10580 4029.62,-10495.44 4132.79,-10615.37 4213,-10518 4264.38,-10455.63 4180.43,-9852.37 4233,-9791 4256.08,-9764.06 4296.43,-9758.19 4329.02,-9758.58"/>
<polygon fill="blue" stroke="blue" points="4329.19,-9762.08 4339.3,-9758.9 4329.41,-9755.09 4329.19,-9762.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<g id="a_node136"><a xlink:title="fn encode_to_curve_try_and_increment(salt: &amp;[u8], data: &amp;[u8]) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;&#160;for i in 0u8..=u8::MAX { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...">
<polygon fill="white" stroke="black" points="4205,-10679 3936,-10679 3936,-10643 4205,-10643 4205,-10679"/>
<text text-anchor="middle" x="4070.5" y="-10657.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3856.83,-10696.94C3887.61,-10691.74 3921.34,-10686.04 3952.68,-10680.74"/>
<polygon fill="blue" stroke="blue" points="3953.49,-10684.16 3962.77,-10679.04 3952.32,-10677.25 3953.49,-10684.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M3764.05,-10588.97C3792.57,-10553.61 3860.94,-10474.98 3936,-10433 4047.42,-10370.69 4133.96,-10457.25 4213,-10357 4255.67,-10302.87 4188.04,-9789.24 4233,-9737 4254.06,-9712.53 4289.38,-9705.47 4320.12,-9704.67"/>
<polygon fill="blue" stroke="blue" points="4320.36,-9708.17 4330.34,-9704.63 4320.33,-9701.17 4320.36,-9708.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().</title>
<path fill="none" stroke="blue" d="M3786.54,-10601.61C3876.29,-10586.26 4107.89,-10533.4 4213,-10385 4236.65,-10351.62 4223.39,-10241.76 4233,-10202 4266.52,-10063.36 4337.27,-9907.21 4366.71,-9845.34"/>
<polygon fill="blue" stroke="blue" points="4369.9,-9846.77 4371.07,-9836.24 4363.59,-9843.75 4369.9,-9846.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3495,-10787 3313,-10787 3313,-10751 3495,-10751 3495,-10787"/>
<text text-anchor="middle" x="3404" y="-10765.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3495.38,-10772.34C3522.24,-10768.92 3549.84,-10760.39 3570,-10742 3606.63,-10708.58 3561.64,-10667.71 3598,-10634 3625.4,-10608.6 3668.22,-10603 3701.1,-10603.09"/>
<polygon fill="blue" stroke="blue" points="3701.33,-10606.6 3711.4,-10603.31 3701.47,-10599.6 3701.33,-10606.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3495.2,-10769.19C3521.29,-10765.48 3548.5,-10757.59 3570,-10742 3591.89,-10726.13 3576.24,-10704.04 3598,-10688 3622,-10670.31 3653.92,-10662.96 3682.15,-10660.28"/>
<polygon fill="blue" stroke="blue" points="3682.66,-10663.75 3692.36,-10659.49 3682.12,-10656.77 3682.66,-10663.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().</title>
<g id="a_node133"><a xlink:title="fn proof_to_hash(gamma: &amp;EdwardsPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]); &#160;&#160;&#160;&#160;hasher.update(gamma.mul_by_cofactor().compress().0);...">
<polygon fill="white" stroke="black" points="4127,-10625 4014,-10625 4014,-10589 4127,-10589 4127,-10625"/>
<text text-anchor="middle" x="4070.5" y="-10603.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<path fill="none" stroke="blue" d="M4127,-10608.78C4156.71,-10606.62 4191.52,-10598.53 4213,-10575 4235.82,-10550 4222.18,-10456.07 4233,-10424 4323.5,-10155.78 4343.54,-10065.73 4549,-9871 4562.06,-9858.62 4578.56,-9848.5 4594.62,-9840.55"/>
<polygon fill="blue" stroke="blue" points="4596.45,-9843.55 4603.99,-9836.11 4593.45,-9837.23 4596.45,-9843.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="blue" d="M4127.27,-10609.67C4157.46,-10607.86 4192.63,-10599.83 4213,-10575 4268.26,-10507.63 4176.38,-9857.23 4233,-9791 4256.05,-9764.04 4296.4,-9758.17 4329,-9758.56"/>
<polygon fill="blue" stroke="blue" points="4329.18,-9762.07 4339.28,-9758.89 4329.4,-9755.07 4329.18,-9762.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;fn try_and_increment_terminates() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(data: [u8; 34])| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _ = encode_to_curve_try_and_increment(&amp;data[..32], &amp;data[32..]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3862.5,-10787 3635.5,-10787 3635.5,-10751 3862.5,-10751 3862.5,-10787"/>
<text text-anchor="middle" x="3749" y="-10765.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_and_increment_terminates</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge596" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3862.62,-10752.12C3875.35,-10749.21 3888.04,-10745.86 3900,-10742 3946.11,-10727.13 3995.77,-10702.25 4029.34,-10683.98"/>
<polygon fill="blue" stroke="blue" points="4031.29,-10686.9 4038.37,-10679.01 4027.92,-10680.77 4031.29,-10686.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge655" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M3805.69,-10665.24C3837.35,-10664.53 3875.44,-10657.9 3900,-10634 3956.28,-10579.22 3878.59,-10514.59 3936,-10461 4026.84,-10376.21 4129.97,-10515.45 4213,-10423 4263.95,-10366.27 4183.34,-9794.87 4233,-9737 4254.03,-9712.5 4289.34,-9705.43 4320.09,-9704.65"/>
<polygon fill="blue" stroke="blue" points="4320.33,-9708.15 4330.31,-9704.61 4320.3,-9701.15 4320.33,-9708.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="edge656" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<path fill="none" stroke="blue" d="M3805.65,-10665.57C3837.49,-10665.01 3875.79,-10658.43 3900,-10634 3966.96,-10566.43 3870.95,-10492.42 3936,-10423 4022.54,-10330.65 4133.1,-10455.15 4213,-10357 4260.3,-10298.9 4184.2,-9739.85 4233,-9683 4233.52,-9682.39 4234.05,-9681.79 4234.59,-9681.2"/>
<polygon fill="blue" stroke="blue" points="4237.2,-9683.56 4242.08,-9674.15 4232.4,-9678.46 4237.2,-9683.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress(). -->
<g id="edge653" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]compress().</title>
<path fill="none" stroke="blue" d="M3805.58,-10663.42C3836.42,-10661.95 3873.73,-10655.17 3900,-10634 3932.58,-10607.74 3905.09,-10575.21 3936,-10547 4031.22,-10460.1 4135.01,-10563.64 4213,-10461 4258.06,-10401.7 4184.48,-9847.51 4233,-9791 4256.11,-9764.09 4296.46,-9758.22 4329.04,-9758.59"/>
<polygon fill="blue" stroke="blue" points="4329.21,-9762.1 4339.32,-9758.91 4329.43,-9755.1 4329.21,-9762.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash(). -->
<g id="edge657" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.65,-10651.59C3860.92,-10642.25 3945.63,-10627.94 4004.08,-10618.06"/>
<polygon fill="blue" stroke="blue" points="4004.67,-10621.51 4013.95,-10616.39 4003.51,-10614.6 4004.67,-10621.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge654" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.65,-10661C3839,-10661 3883.08,-10661 3925.63,-10661"/>
<polygon fill="blue" stroke="blue" points="3925.83,-10664.5 3935.83,-10661 3925.83,-10657.5 3925.83,-10664.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge803" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M4204.03,-10642.83C4207.25,-10640.18 4210.25,-10637.25 4213,-10634 4245.2,-10595.95 4200.67,-9774.94 4233,-9737 4253.94,-9712.42 4289.26,-9705.36 4320.02,-9704.59"/>
<polygon fill="blue" stroke="blue" points="4320.27,-9708.09 4330.25,-9704.56 4320.24,-9701.09 4320.27,-9708.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="edge802" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<path fill="none" stroke="blue" d="M4196.81,-10642.97C4202.45,-10640.34 4207.88,-10637.37 4213,-10634 4417.21,-10499.43 4438.86,-10408.36 4521,-10178 4544.01,-10113.47 4510.43,-9927.61 4549,-9871 4557.76,-9858.15 4570.59,-9848.26 4584.32,-9840.7"/>
<polygon fill="blue" stroke="blue" points="4586.1,-9843.72 4593.43,-9836.07 4582.93,-9837.48 4586.1,-9843.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="819,-6228 730,-6228 730,-6192 819,-6192 819,-6228"/>
<text text-anchor="middle" x="774.5" y="-6206.3" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="1071,-6211 991,-6211 991,-6175 1071,-6175 1071,-6211"/>
<text text-anchor="middle" x="1031" y="-6189.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.25,-6207.08C864.17,-6204.08 933.95,-6199.42 980.78,-6196.29"/>
<polygon fill="blue" stroke="blue" points="981.24,-6199.76 990.99,-6195.61 980.78,-6192.78 981.24,-6199.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="839,-6174 710,-6174 710,-6138 839,-6138 839,-6174"/>
<text text-anchor="middle" x="774.5" y="-6152.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M839.06,-6165.24C882.95,-6171.62 940.44,-6179.98 980.83,-6185.85"/>
<polygon fill="blue" stroke="blue" points="980.57,-6189.35 990.97,-6187.33 981.58,-6182.42 980.57,-6189.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="1597,-6174 1423,-6174 1423,-6138 1597,-6138 1597,-6174"/>
<text text-anchor="middle" x="1510" y="-6152.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M839.31,-6156C968.19,-6156 1260.19,-6156 1412.49,-6156"/>
<polygon fill="blue" stroke="blue" points="1412.77,-6159.5 1422.77,-6156 1412.77,-6152.5 1412.77,-6159.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge546" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1071.03,-6189.97C1145,-6184.23 1307.55,-6171.63 1412.47,-6163.49"/>
<polygon fill="blue" stroke="blue" points="1413.05,-6166.95 1422.75,-6162.69 1412.51,-6159.97 1413.05,-6166.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge688" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.44,-6174.05C1661.91,-6187.14 1775.75,-6192.52 1840,-6126 1916.85,-6046.44 1792.89,-5710.21 1868,-5629 1891.55,-5603.54 1926.79,-5593.73 1961.15,-5591.28"/>
<polygon fill="blue" stroke="blue" points="1961.48,-5594.77 1971.29,-5590.76 1961.13,-5587.78 1961.48,-5594.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge687" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.18,-6174.05C1663.35,-6186.58 1775.46,-6191.03 1840,-6126 1892.62,-6072.98 1816.53,-5845.15 1868,-5791 1893.32,-5764.36 1931.46,-5755.02 1967.68,-5753.27"/>
<polygon fill="blue" stroke="blue" points="1967.93,-5756.77 1977.83,-5752.97 1967.73,-5749.77 1967.93,-5756.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge689" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587.28,-6174.02C1662.58,-6186.82 1775.53,-6191.71 1840,-6126 1900.7,-6064.13 1808.66,-5800.16 1868,-5737 1881.7,-5722.42 1899.24,-5713 1918.22,-5707.16"/>
<polygon fill="blue" stroke="blue" points="1919.23,-5710.52 1927.96,-5704.51 1917.39,-5703.76 1919.23,-5710.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="1062,-6091 1000,-6091 1000,-6055 1062,-6055 1062,-6091"/>
<text text-anchor="middle" x="1031" y="-6069.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="1541,-6091 1479,-6091 1479,-6055 1541,-6055 1541,-6091"/>
<text text-anchor="middle" x="1510" y="-6069.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1062.2,-6073C1144.92,-6073 1375.21,-6073 1468.74,-6073"/>
<polygon fill="blue" stroke="blue" points="1468.93,-6076.5 1478.93,-6073 1468.93,-6069.5 1468.93,-6076.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="805.5,-6091 743.5,-6091 743.5,-6055 805.5,-6055 805.5,-6091"/>
<text text-anchor="middle" x="774.5" y="-6069.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M805.69,-6073C851.52,-6073 938.68,-6073 989.82,-6073"/>
<polygon fill="blue" stroke="blue" points="989.85,-6076.5 999.85,-6073 989.85,-6069.5 989.85,-6076.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1541.3,-6081.47C1606.46,-6097.62 1760.44,-6124.44 1840,-6043 1904.43,-5977.04 1805.01,-5696.34 1868,-5629 1891.69,-5603.67 1926.96,-5593.9 1961.31,-5591.43"/>
<polygon fill="blue" stroke="blue" points="1961.64,-5594.92 1971.45,-5590.9 1961.28,-5587.93 1961.64,-5594.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1541.03,-6081.2C1605.68,-6096.84 1758.71,-6122.71 1840,-6043 1920.47,-5964.11 1789.26,-5871.62 1868,-5791 1893.62,-5764.77 1931.72,-5755.47 1967.82,-5753.65"/>
<polygon fill="blue" stroke="blue" points="1968.05,-5757.14 1977.93,-5753.32 1967.82,-5750.15 1968.05,-5757.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1541.15,-6081.32C1606.03,-6097.2 1759.48,-6123.49 1840,-6043 1888.29,-5994.72 1820.76,-5786.31 1868,-5737 1881.79,-5722.61 1899.33,-5713.28 1918.26,-5707.47"/>
<polygon fill="blue" stroke="blue" points="1919.24,-5710.83 1927.97,-5704.82 1917.4,-5704.08 1919.24,-5710.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node144"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1537,-3001 1483,-3001 1483,-2965 1537,-2965 1537,-3001"/>
<text text-anchor="middle" x="1510" y="-2979.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge778" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.29,-2990.65C1600.35,-3007.22 1760.84,-3038.38 1840,-2953 1908.64,-2878.97 1810.86,-1219.23 1868,-1136 2096.27,-803.5 2353.15,-990.84 2752,-931 2780.22,-926.77 2811.68,-919.56 2835.23,-913.65"/>
<polygon fill="blue" stroke="blue" points="2836.31,-916.99 2845.13,-911.13 2834.58,-910.21 2836.31,-916.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge779" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.14,-2977.52C1600.59,-2965.92 1763.17,-2946.79 1840,-3036 1887,-3090.58 1820.3,-5575.02 1868,-5629 1880.94,-5643.64 1897.74,-5653.19 1916.09,-5659.16"/>
<polygon fill="blue" stroke="blue" points="1915.24,-5662.56 1925.82,-5661.97 1917.18,-5655.83 1915.24,-5662.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge780" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.15,-2977.51C1600.61,-2965.91 1763.2,-2946.76 1840,-3036 1889.92,-3094.01 1817.34,-5733.63 1868,-5791 1875.29,-5799.26 1883.81,-5805.9 1893.15,-5811.19"/>
<polygon fill="blue" stroke="blue" points="1891.83,-5814.44 1902.33,-5815.85 1895.01,-5808.2 1891.83,-5814.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;fn search_returns_data_not_requested(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="615,-10932 353,-10932 353,-10896 615,-10896 615,-10932"/>
<text text-anchor="middle" x="484" y="-10910.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_returns_data_not_requested</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<g id="a_node147"><a xlink:title="fn verify_chat_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&gt;, &#160;&#160;&#160;&#160;stored_account_data: Option&lt;AccountData&gt;, &#160;&#160;&#160;&#160;chat_search_...">
<polygon fill="white" stroke="black" points="882,-10905 667,-10905 667,-10869 882,-10869 882,-10905"/>
<text text-anchor="middle" x="774.5" y="-10883.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_chat_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M615.32,-10901.8C629.01,-10900.52 642.86,-10899.23 656.38,-10897.96"/>
<polygon fill="blue" stroke="blue" points="657.02,-10901.42 666.65,-10897 656.37,-10894.45 657.02,-10901.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;async fn monitor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;account_data: AccountData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished_tree_...">
<polygon fill="white" stroke="black" points="519.5,-10770 448.5,-10770 448.5,-10734 519.5,-10734 519.5,-10770"/>
<text text-anchor="middle" x="484" y="-10748.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.66,-10752C667.07,-10752 1243.45,-10752 1441.63,-10752"/>
<polygon fill="blue" stroke="blue" points="1441.9,-10755.5 1451.9,-10752 1441.9,-10748.5 1441.9,-10755.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<g id="a_node148"><a xlink:title="fn verify_single_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;search_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;response: CondensedTreeSearchResponse, &#160;&#160;&#160;&#160;monitoring_data: Option&lt;MonitoringData&gt;, &#160;&#160;&#160;&#160;full_tree_head: &amp;FullTr...">
<polygon fill="white" stroke="black" points="1144,-10901 918,-10901 918,-10865 1144,-10865 1144,-10901"/>
<text text-anchor="middle" x="1031" y="-10879.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_single_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="edge532" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M882.32,-10885.32C890.64,-10885.19 899.08,-10885.06 907.49,-10884.93"/>
<polygon fill="blue" stroke="blue" points="907.78,-10888.42 917.72,-10884.76 907.67,-10881.42 907.78,-10888.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge644" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1143.53,-10865C1237.6,-10849.81 1368.87,-10828.62 1445.8,-10816.2"/>
<polygon fill="blue" stroke="blue" points="1446.51,-10819.63 1455.82,-10814.58 1445.39,-10812.72 1446.51,-10819.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge684" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M515.28,-10964.02C545.06,-10959.73 591.65,-10952 631,-10941 661.86,-10932.37 695.42,-10919.82 722.22,-10908.99"/>
<polygon fill="blue" stroke="blue" points="723.83,-10912.11 731.76,-10905.09 721.18,-10905.63 723.83,-10912.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;fn search_does_not_return_requested_data(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="631,-10878 337,-10878 337,-10842 631,-10842 631,-10878"/>
<text text-anchor="middle" x="484" y="-10856.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_does_not_return_requested_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge698" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M631.36,-10873.7C639.89,-10874.5 648.41,-10875.29 656.8,-10876.08"/>
<polygon fill="blue" stroke="blue" points="656.68,-10879.58 666.96,-10877.03 657.33,-10872.61 656.68,-10879.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge735" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M539.33,-10806C713.73,-10806 1258.83,-10806 1445.53,-10806"/>
<polygon fill="blue" stroke="blue" points="1445.73,-10809.5 1455.72,-10806 1445.72,-10802.5 1445.73,-10809.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;async fn distinguished_integration_test(have_last_distinguished: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running in...">
<polygon fill="white" stroke="black" points="271.5,-10824 45.5,-10824 45.5,-10788 271.5,-10788 271.5,-10824"/>
<text text-anchor="middle" x="158.5" y="-10802.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M271.74,-10806C320.8,-10806 376.58,-10806 418.5,-10806"/>
<polygon fill="blue" stroke="blue" points="418.58,-10809.5 428.58,-10806 418.58,-10802.5 418.58,-10809.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn prompt(text: &amp;str) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; {} &gt;&#39; , text); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_line(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="192,-10878 125,-10878 125,-10842 192,-10842 192,-10878"/>
<text text-anchor="middle" x="158.5" y="-10856.3" font-family="Helvetica,sans-Serif" font-size="14.00">prompt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.23,-10857.14C225.4,-10856.06 276.35,-10859.64 309,-10887 328.62,-10903.44 309.34,-10924.61 329,-10941 360.56,-10967.3 408.62,-10971.94 442.65,-10971.34"/>
<polygon fill="blue" stroke="blue" points="442.85,-10974.83 452.73,-10971 442.62,-10967.84 442.85,-10974.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-10854.53C245.24,-10845.69 350.48,-10828.12 418.75,-10816.72"/>
<polygon fill="blue" stroke="blue" points="419.67,-10820.12 428.96,-10815.02 418.52,-10813.21 419.67,-10820.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;async fn search_for_deleted_account() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39; )...">
<polygon fill="white" stroke="black" points="263,-10986 54,-10986 54,-10950 263,-10950 263,-10986"/>
<text text-anchor="middle" x="158.5" y="-10964.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_deleted_account</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M263.19,-10968C324.27,-10968 398.09,-10968 442.75,-10968"/>
<polygon fill="blue" stroke="blue" points="442.9,-10971.5 452.9,-10968 442.9,-10964.5 442.9,-10971.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKI...">
<polygon fill="white" stroke="black" points="297,-10932 20,-10932 20,-10896 297,-10896 297,-10932"/>
<text text-anchor="middle" x="158.5" y="-10910.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge569" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-10932.06C327.87,-10942.1 399.23,-10954.02 442.79,-10961.29"/>
<polygon fill="blue" stroke="blue" points="442.27,-10964.75 452.71,-10962.94 443.43,-10957.85 442.27,-10964.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SK...">
<polygon fill="white" stroke="black" points="301,-10770 16,-10770 16,-10734 301,-10734 301,-10770"/>
<text text-anchor="middle" x="158.5" y="-10748.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="edge645" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M301.39,-10752C350.84,-10752 402.79,-10752 438.41,-10752"/>
<polygon fill="blue" stroke="blue" points="438.46,-10755.5 448.46,-10752 438.46,-10748.5 438.46,-10755.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;async fn search_for_account_that_isnt() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39;...">
<polygon fill="white" stroke="black" points="267,-11040 50,-11040 50,-11004 267,-11004 267,-11040"/>
<text text-anchor="middle" x="158.5" y="-11018.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_account_that_isnt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge669" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.22,-11004.02C327.63,-10993.94 399.39,-10981.96 443.04,-10974.67"/>
<polygon fill="blue" stroke="blue" points="443.69,-10978.11 452.98,-10973.01 442.54,-10971.21 443.69,-10978.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="1613.5,-5709 1406.5,-5709 1406.5,-5673 1613.5,-5673 1613.5,-5709"/>
<text text-anchor="middle" x="1510" y="-5687.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1613.79,-5685.8C1683.18,-5687.2 1773.83,-5699.06 1840,-5744 1860.11,-5757.66 1847.71,-5777.6 1868,-5791 1875.78,-5796.14 1884.11,-5800.51 1892.78,-5804.2"/>
<polygon fill="blue" stroke="blue" points="1891.73,-5807.55 1902.32,-5807.95 1894.29,-5801.03 1891.73,-5807.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="1601,-5655 1419,-5655 1419,-5619 1601,-5619 1601,-5655"/>
<text text-anchor="middle" x="1510" y="-5633.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge522" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1601.11,-5641.67C1687.3,-5643.95 1808.67,-5640.72 1840,-5607 1899.73,-5542.73 1813.88,-4097.05 1868,-4028 1896.88,-3991.15 1948.2,-3978.08 1991.62,-3974.14"/>
<polygon fill="blue" stroke="blue" points="1991.91,-3977.62 2001.61,-3973.37 1991.38,-3970.65 1991.91,-3977.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge523" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.18,-5618.95C1662.54,-5606.53 1773.3,-5601.91 1840,-5664 1899.58,-5719.46 1809.89,-5788 1868,-5845 1883.22,-5859.93 1902.51,-5869.29 1923.07,-5874.88"/>
<polygon fill="blue" stroke="blue" points="1922.38,-5878.32 1932.93,-5877.26 1924.03,-5871.51 1922.38,-5878.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge524" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1601.11,-5640.07C1685.95,-5642.97 1814.69,-5647.36 1915.51,-5650.8"/>
<polygon fill="blue" stroke="blue" points="1915.69,-5654.31 1925.8,-5651.15 1915.92,-5647.31 1915.69,-5654.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge525" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1593.34,-5618.95C1666.94,-5607.99 1773.2,-5605.67 1840,-5664 1883.54,-5702.02 1825.47,-5751.86 1868,-5791 1875.54,-5797.94 1883.97,-5803.65 1892.98,-5808.31"/>
<polygon fill="blue" stroke="blue" points="1891.64,-5811.55 1902.18,-5812.64 1894.62,-5805.21 1891.64,-5811.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;fn from(src: KeyTransConfig) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let KeyTransConfig { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;vrf_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auditor_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = src; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s...">
<polygon fill="white" stroke="black" points="3132.5,-10619 3078.5,-10619 3078.5,-10583 3132.5,-10583 3132.5,-10619"/>
<text text-anchor="middle" x="3105.5" y="-10597.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M3132.6,-10592.31C3158.91,-10582.07 3198.33,-10562.37 3218,-10531 3248.16,-10482.89 3207.08,-10318.35 3246,-10277 3271.17,-10250.26 3312.46,-10244 3346.38,-10244.16"/>
<polygon fill="blue" stroke="blue" points="3346.56,-10247.66 3356.64,-10244.4 3346.73,-10240.67 3346.56,-10247.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3132.84,-10601.25C3230.88,-10602.16 3575.41,-10605.39 3701.4,-10606.56"/>
<polygon fill="blue" stroke="blue" points="3701.47,-10610.06 3711.5,-10606.66 3701.53,-10603.07 3701.47,-10610.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="2654,-243 2388,-243 2388,-207 2654,-207 2654,-243"/>
<text text-anchor="middle" x="2521" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node162"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="2919.5,-243 2825.5,-243 2825.5,-207 2919.5,-207 2919.5,-243"/>
<text text-anchor="middle" x="2872.5" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2654.13,-225C2709.79,-225 2771.59,-225 2815.02,-225"/>
<polygon fill="blue" stroke="blue" points="2815.1,-228.5 2825.1,-225 2815.1,-221.5 2815.1,-228.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="3132.5,-577 3078.5,-577 3078.5,-541 3132.5,-541 3132.5,-577"/>
<text text-anchor="middle" x="3105.5" y="-555.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2888.23,-243.09C2908.56,-268.97 2944.98,-318.79 2965,-367 2993.79,-436.32 2949.01,-477.87 3001,-532 3018.21,-549.92 3045.71,-556.48 3068.03,-558.67"/>
<polygon fill="blue" stroke="blue" points="3067.97,-562.17 3078.19,-559.4 3068.47,-555.19 3067.97,-562.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="2652.5,-189 2389.5,-189 2389.5,-153 2652.5,-153 2652.5,-189"/>
<text text-anchor="middle" x="2521" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node164"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="2917,-189 2828,-189 2828,-153 2917,-153 2917,-189"/>
<text text-anchor="middle" x="2872.5" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2652.64,-171C2709.72,-171 2773.52,-171 2817.44,-171"/>
<polygon fill="blue" stroke="blue" points="2817.6,-174.5 2827.6,-171 2817.6,-167.5 2817.6,-174.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node258"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="3142.5,-523 3068.5,-523 3068.5,-487 3142.5,-487 3142.5,-523"/>
<text text-anchor="middle" x="3105.5" y="-501.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge558" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2917.3,-173.8C2934.63,-177.2 2953.18,-184.13 2965,-198 3046.39,-293.49 2918.1,-383.82 3001,-478 3015.22,-494.16 3037.78,-501.22 3058.22,-504.11"/>
<polygon fill="blue" stroke="blue" points="3058.02,-507.61 3068.34,-505.24 3058.79,-500.65 3058.02,-507.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<g id="a_node263"><a xlink:title=" &#160;&#160;&#160;pub fn restore(self, responses2_bytes: &amp;[Vec&lt;u8&gt;]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if responses2_bytes.len() != self.server_ids.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(Error::NumServers { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3436.5,-563 3371.5,-563 3371.5,-527 3436.5,-527 3436.5,-563"/>
<text text-anchor="middle" x="3404" y="-541.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge559" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2917.23,-182.32C2992.76,-204.39 3146.42,-260.83 3218,-370 3254.71,-425.98 3198.27,-471.06 3246,-518 3275.97,-547.48 3325.7,-551.47 3361.16,-549.85"/>
<polygon fill="blue" stroke="blue" points="3361.44,-553.34 3371.21,-549.22 3361.01,-546.35 3361.44,-553.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node264"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3132.5,-415 3078.5,-415 3078.5,-379 3132.5,-379 3132.5,-415"/>
<text text-anchor="middle" x="3105.5" y="-393.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge560" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2917.22,-176.16C2933.71,-179.96 2951.69,-186.55 2965,-198 2993.64,-222.63 2980.6,-243.2 3001,-275 3024.04,-310.92 3056.7,-347.66 3079.14,-371.31"/>
<polygon fill="blue" stroke="blue" points="3076.88,-374.01 3086.33,-378.8 3081.93,-369.16 3076.88,-374.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2556,-106 2486,-106 2486,-70 2556,-70 2556,-106"/>
<text text-anchor="middle" x="2521" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2556.24,-86.24C2605.65,-85.6 2697.03,-91.82 2752,-141 2772.01,-158.9 2752.34,-179.72 2772,-198 2783.83,-209 2799.68,-215.6 2815.25,-219.53"/>
<polygon fill="blue" stroke="blue" points="2814.88,-223.04 2825.39,-221.75 2816.37,-216.2 2814.88,-223.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2553.5,-52 2488.5,-52 2488.5,-16 2553.5,-16 2553.5,-52"/>
<text text-anchor="middle" x="2521" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2553.77,-31.72C2599.73,-29.73 2686.42,-30.89 2752,-61 2793.39,-80 2830.12,-118.82 2851.6,-144.88"/>
<polygon fill="blue" stroke="blue" points="2849.02,-147.26 2858.02,-152.85 2854.47,-142.87 2849.02,-147.26"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node167"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="2899.5,-6992 2845.5,-6992 2845.5,-6956 2899.5,-6956 2899.5,-6992"/>
<text text-anchor="middle" x="2872.5" y="-6970.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="3133.5,-7075 3077.5,-7075 3077.5,-7039 3133.5,-7039 3133.5,-7075"/>
<text text-anchor="middle" x="3105.5" y="-7053.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.55,-6983.36C2940.75,-6998.16 3021.07,-7027.02 3068,-7043.88"/>
<polygon fill="blue" stroke="blue" points="3066.88,-7047.2 3077.48,-7047.29 3069.25,-7040.61 3066.88,-7047.2"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2578.5,-6965 2463.5,-6965 2463.5,-6929 2578.5,-6929 2578.5,-6965"/>
<text text-anchor="middle" x="2521" y="-6943.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2578.54,-6951.37C2650.9,-6956.96 2774.15,-6966.48 2835.12,-6971.19"/>
<polygon fill="blue" stroke="blue" points="2835.17,-6974.7 2845.41,-6971.98 2835.71,-6967.72 2835.17,-6974.7"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node169"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="2936.5,-6938 2808.5,-6938 2808.5,-6902 2936.5,-6902 2936.5,-6938"/>
<text text-anchor="middle" x="2872.5" y="-6916.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2578.54,-6942.63C2638.23,-6938.02 2732.57,-6930.73 2797.99,-6925.68"/>
<polygon fill="blue" stroke="blue" points="2798.54,-6929.15 2808.24,-6924.89 2798,-6922.17 2798.54,-6929.15"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="3453,-7075 3355,-7075 3355,-7039 3453,-7039 3453,-7075"/>
<text text-anchor="middle" x="3404" y="-7053.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge788" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2936.58,-6936.32C3040.11,-6963.11 3244.56,-7016.01 3344.81,-7041.94"/>
<polygon fill="blue" stroke="blue" points="3344.2,-7045.4 3354.76,-7044.52 3345.96,-7038.63 3344.2,-7045.4"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="2965,-7085 2780,-7085 2780,-7049 2965,-7049 2965,-7085"/>
<text text-anchor="middle" x="2872.5" y="-7063.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2965.13,-7063.03C3000.87,-7061.49 3039.8,-7059.8 3067.41,-7058.61"/>
<polygon fill="blue" stroke="blue" points="3067.57,-7062.1 3077.41,-7058.17 3067.27,-7055.11 3067.57,-7062.1"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2965.28,-7080.72C2977.27,-7082.07 2989.41,-7083.23 3001,-7084 3097.23,-7090.39 3121.81,-7090.98 3218,-7084 3260.76,-7080.9 3308.64,-7073.81 3344.98,-7067.67"/>
<polygon fill="blue" stroke="blue" points="3345.64,-7071.11 3354.91,-7065.97 3344.46,-7064.21 3345.64,-7071.11"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3109.13,-7038.77C3139.55,-6826.97 3426.64,-4811.26 3570,-3172 3574.87,-3116.35 3574.32,-2720.6 3598,-2670 3675.83,-2503.67 3775.2,-2522.72 3900,-2388 3917.41,-2369.21 3914.14,-2356.34 3936,-2343 3960.77,-2327.89 3992.47,-2321.06 4018.76,-2318.05"/>
<polygon fill="blue" stroke="blue" points="4019.31,-2321.51 4028.92,-2317.04 4018.62,-2314.54 4019.31,-2321.51"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3133.6,-7057C3181.2,-7057 3280.82,-7057 3344.67,-7057"/>
<polygon fill="blue" stroke="blue" points="3344.99,-7060.5 3354.99,-7057 3344.99,-7053.5 3344.99,-7060.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;fn homomorphism_with_subtraction( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g1: &amp;[Scalar], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;all_points: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;challenge: Option&lt;Scalar&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; G2 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.equations &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="3873,-7075 3625,-7075 3625,-7039 3873,-7039 3873,-7075"/>
<text text-anchor="middle" x="3749" y="-7053.3" font-family="Helvetica,sans-Serif" font-size="14.00">homomorphism_with_subtraction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3133.54,-7063.83C3161.48,-7070.51 3206.47,-7080.21 3246,-7084 3389.34,-7097.74 3426.41,-7094.83 3570,-7084 3591.76,-7082.36 3614.89,-7079.61 3637.02,-7076.47"/>
<polygon fill="blue" stroke="blue" points="3637.72,-7079.9 3647.11,-7075 3636.71,-7072.98 3637.72,-7079.9"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3407,-7038.59C3441.61,-6719.77 3914.56,-2366.4 3936,-2343 3956.56,-2320.56 3990.18,-2313.86 4018.55,-2312.74"/>
<polygon fill="blue" stroke="blue" points="4018.78,-2316.24 4028.72,-2312.57 4018.66,-2309.24 4018.78,-2316.24"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3453.05,-7057C3494.97,-7057 3557.82,-7057 3614.74,-7057"/>
<polygon fill="blue" stroke="blue" points="3614.93,-7060.5 3624.93,-7057 3614.93,-7053.5 3614.93,-7060.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="blue" d="M3751.25,-7038.82C3771.94,-6738.91 4041.83,-2825.26 4067.54,-2452.47"/>
<polygon fill="blue" stroke="blue" points="4071.04,-2452.47 4068.24,-2442.25 4064.06,-2451.99 4071.04,-2452.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node174"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="812,-6855 737,-6855 737,-6819 812,-6819 812,-6855"/>
<text text-anchor="middle" x="774.5" y="-6833.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node178"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="1537,-6855 1483,-6855 1483,-6819 1537,-6819 1537,-6855"/>
<text text-anchor="middle" x="1510" y="-6833.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge733" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.13,-6837C937.43,-6837 1348.12,-6837 1472.79,-6837"/>
<polygon fill="blue" stroke="blue" points="1472.95,-6840.5 1482.95,-6837 1472.95,-6833.5 1472.95,-6840.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node179"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="1537,-6801 1483,-6801 1483,-6765 1537,-6765 1537,-6801"/>
<text text-anchor="middle" x="1510" y="-6779.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge731" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.13,-6834.3C937.43,-6825.08 1348.12,-6794.84 1472.79,-6785.67"/>
<polygon fill="blue" stroke="blue" points="1473.23,-6789.14 1482.95,-6784.92 1472.72,-6782.16 1473.23,-6789.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node180"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="1095,-6938 967,-6938 967,-6902 1095,-6902 1095,-6938"/>
<text text-anchor="middle" x="1031" y="-6916.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge732" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.23,-6848.98C852.03,-6861.96 916.31,-6882.92 964.74,-6898.72"/>
<polygon fill="blue" stroke="blue" points="963.91,-6902.13 974.51,-6901.9 966.08,-6895.47 963.91,-6902.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node175"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="1094,-8346 968,-8346 968,-8310 1094,-8310 1094,-8346"/>
<text text-anchor="middle" x="1031" y="-8324.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node177"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="1596,-8346 1424,-8346 1424,-8310 1596,-8310 1596,-8346"/>
<text text-anchor="middle" x="1510" y="-8324.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1094.36,-8328C1175.62,-8328 1318.51,-8328 1413.47,-8328"/>
<polygon fill="blue" stroke="blue" points="1413.66,-8331.5 1423.66,-8328 1413.66,-8324.5 1413.66,-8331.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node176"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="807.5,-8346 741.5,-8346 741.5,-8310 807.5,-8310 807.5,-8346"/>
<text text-anchor="middle" x="774.5" y="-8324.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge671" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M807.73,-8328C845.27,-8328 908.45,-8328 957.87,-8328"/>
<polygon fill="blue" stroke="blue" points="957.87,-8331.5 967.87,-8328 957.87,-8324.5 957.87,-8331.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge709" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.2,-8315.43C1671.77,-8309.57 1779.3,-8315.19 1840,-8381 1893.5,-8439.01 1813.76,-8677.68 1868,-8735 1901.06,-8769.94 1956.19,-8775.17 2000.21,-8772.51"/>
<polygon fill="blue" stroke="blue" points="2000.57,-8775.99 2010.28,-8771.75 2000.04,-8769.01 2000.57,-8775.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge708" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.12,-8315.82C1671.37,-8310.29 1778.46,-8316.17 1840,-8381 1919.71,-8464.97 1795.61,-8549.64 1868,-8640 1899.76,-8679.65 1955.71,-8696.3 2000.37,-8703.23"/>
<polygon fill="blue" stroke="blue" points="1999.9,-8706.7 2010.29,-8704.64 2000.89,-8699.77 1999.9,-8706.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge536" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.14,-6831.52C1600.58,-6819.93 1763.14,-6800.81 1840,-6890 1884.27,-6941.37 1823.08,-9280.2 1868,-9331 1908.26,-9376.54 1985.81,-9372.75 2031.61,-9365.59"/>
<polygon fill="blue" stroke="blue" points="2032.43,-9369 2041.7,-9363.87 2031.26,-9362.1 2032.43,-9369"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge534" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.12,-6831.53C1600.53,-6819.98 1763.01,-6800.93 1840,-6890 1874.97,-6930.46 1857.3,-8762.6 1868,-8815 1905.84,-9000.34 2012.52,-9204.43 2052.56,-9276.76"/>
<polygon fill="blue" stroke="blue" points="2049.61,-9278.67 2057.54,-9285.7 2055.72,-9275.26 2049.61,-9278.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge535" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.11,-6831.55C1600.48,-6820.01 1762.91,-6801.02 1840,-6890 1900.65,-6960 1806.97,-8487.32 1868,-8557 1892.9,-8585.43 1932.21,-8595.25 1969.42,-8597.1"/>
<polygon fill="blue" stroke="blue" points="1969.75,-8600.61 1979.85,-8597.41 1969.96,-8593.61 1969.75,-8600.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node250"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="2156,-8522 1982,-8522 1982,-8486 2156,-8486 2156,-8522"/>
<text text-anchor="middle" x="2069" y="-8500.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge537" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.1,-6831.55C1600.47,-6820.03 1762.87,-6801.05 1840,-6890 1897.77,-6956.62 1809.38,-8411.12 1868,-8477 1893.55,-8505.71 1933.93,-8514.78 1971.73,-8515.76"/>
<polygon fill="blue" stroke="blue" points="1971.77,-8519.26 1981.79,-8515.84 1971.82,-8512.26 1971.77,-8519.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge551" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.27,-6775.05C1600.29,-6757.78 1760.7,-6724.88 1840,-6810 1887.74,-6861.24 1821.62,-9278.53 1868,-9331 1908.26,-9376.54 1985.8,-9372.76 2031.61,-9365.59"/>
<polygon fill="blue" stroke="blue" points="2032.43,-9369 2041.7,-9363.87 2031.26,-9362.1 2032.43,-9369"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge548" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.25,-6775.06C1600.24,-6757.82 1760.58,-6724.99 1840,-6810 1878.03,-6850.7 1856.87,-8760.42 1868,-8815 1905.79,-9000.36 2012.5,-9204.43 2052.55,-9276.77"/>
<polygon fill="blue" stroke="blue" points="2049.6,-9278.67 2057.53,-9285.7 2055.72,-9275.26 2049.6,-9278.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge549" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.24,-6775.07C1600.2,-6757.86 1760.49,-6725.07 1840,-6810 1906.34,-6880.86 1804.07,-8483.96 1868,-8557 1892.89,-8585.44 1932.2,-8595.26 1969.41,-8597.1"/>
<polygon fill="blue" stroke="blue" points="1969.74,-8600.62 1979.84,-8597.42 1969.95,-8593.62 1969.74,-8600.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge550" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.24,-6775.08C1600.19,-6757.87 1760.46,-6725.1 1840,-6810 1903.33,-6877.59 1806.46,-8407.78 1868,-8477 1893.54,-8505.73 1933.91,-8514.79 1971.72,-8515.77"/>
<polygon fill="blue" stroke="blue" points="1971.75,-8519.27 1981.78,-8515.85 1971.81,-8512.27 1971.75,-8519.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node181"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="1597,-6938 1423,-6938 1423,-6902 1597,-6902 1597,-6938"/>
<text text-anchor="middle" x="1510" y="-6916.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1095.34,-6920C1176.52,-6920 1318.04,-6920 1412.62,-6920"/>
<polygon fill="blue" stroke="blue" points="1412.77,-6923.5 1422.77,-6920 1412.77,-6916.5 1412.77,-6923.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.1,-6914.7C1773.04,-6905.65 2165.93,-6895.05 2270,-6973 2290.48,-6988.34 2280.9,-7003.08 2290,-7027 2499.3,-7576.9 2383.76,-7817.88 2772,-8260 2836.57,-8333.54 2910.96,-8284.41 2965,-8366 3008.66,-8431.93 2992.1,-8641.43 3001,-8720 3036.63,-9034.58 3086.74,-9415.39 3100.74,-9520.79"/>
<polygon fill="blue" stroke="blue" points="3097.3,-9521.48 3102.09,-9530.93 3104.24,-9520.56 3097.3,-9521.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.16,-6906.57C1673.38,-6900.13 1781.35,-6905.36 1840,-6973 1897.66,-7039.49 1809.98,-8490.82 1868,-8557 1892.91,-8585.42 1932.23,-8595.24 1969.44,-8597.08"/>
<polygon fill="blue" stroke="blue" points="1969.76,-8600.6 1979.86,-8597.4 1969.97,-8593.6 1969.76,-8600.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2090.61,-8780.16C2132.72,-8818.64 2228.16,-8913.24 2270,-9015 2285.22,-9052.02 2261.78,-9165.62 2290,-9194 2330,-9234.22 2395.77,-9238.31 2446.76,-9233.88"/>
<polygon fill="blue" stroke="blue" points="2447.14,-9237.35 2456.75,-9232.88 2446.45,-9230.39 2447.14,-9237.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2127.94,-8701.91C2171.05,-8700.44 2229.24,-8705.26 2270,-8735 2286.7,-8747.19 2275.97,-8761.81 2290,-8777 2332.7,-8823.23 2716.98,-9030.47 2836.31,-9094.26"/>
<polygon fill="blue" stroke="blue" points="2834.94,-9097.49 2845.41,-9099.12 2838.24,-9091.32 2834.94,-9097.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node184"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="1624,-10433 1396,-10433 1396,-10397 1624,-10397 1624,-10433"/>
<text text-anchor="middle" x="1510" y="-10411.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.05,-10420.48C1724.63,-10425.36 1870.38,-10432.42 1967.09,-10437.11"/>
<polygon fill="blue" stroke="blue" points="1967.01,-10440.61 1977.17,-10437.6 1967.35,-10433.62 1967.01,-10440.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.05,-10409.52C1726.48,-10404.56 1875.73,-10397.32 1972.36,-10392.64"/>
<polygon fill="blue" stroke="blue" points="1972.6,-10396.13 1982.41,-10392.15 1972.26,-10389.14 1972.6,-10396.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2160.59,-10453.88C2199.99,-10453.68 2243.2,-10445.2 2270,-10415 2319.12,-10359.64 2237.28,-9134.94 2290,-9083 2503.72,-8872.47 2705.25,-8932.9 2965,-9083 3159.98,-9195.67 3121.62,-9318.47 3218,-9522 3233.05,-9553.78 3219.57,-9572.81 3246,-9596 3252.35,-9601.58 3259.39,-9606.35 3266.87,-9610.44"/>
<polygon fill="blue" stroke="blue" points="3265.32,-9613.57 3275.82,-9614.92 3268.45,-9607.32 3265.32,-9613.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2075.54,-10369.89C2102.93,-10279.39 2224.39,-9866.67 2270,-9519 2274.17,-9487.2 2266.93,-8964.28 2290,-8942 2591.19,-8651.07 2931.93,-8799.18 3218,-9105 3341.63,-9237.17 3386.63,-9462.19 3399.05,-9540.85"/>
<polygon fill="blue" stroke="blue" points="3395.62,-9541.6 3400.59,-9550.96 3402.54,-9540.54 3395.62,-9541.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="2692,-9185 2350,-9185 2350,-9149 2692,-9149 2692,-9185"/>
<text text-anchor="middle" x="2521" y="-9163.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.17,-9149.07C2712.38,-9146.33 2732.68,-9143.31 2752,-9140 2780.12,-9135.19 2811.59,-9128 2835.17,-9122.26"/>
<polygon fill="blue" stroke="blue" points="2836.21,-9125.6 2845.08,-9119.81 2834.53,-9118.81 2836.21,-9125.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge507" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2585.08,-9207.02C2681.48,-9189.74 2864.79,-9173.75 2965,-9274 3060.56,-9369.6 2912.16,-9474.12 3001,-9576 3009.06,-9585.24 3019.84,-9591.51 3031.41,-9595.73"/>
<polygon fill="blue" stroke="blue" points="3030.68,-9599.17 3041.27,-9598.81 3032.77,-9592.48 3030.68,-9599.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="2637.5,-9131 2404.5,-9131 2404.5,-9095 2637.5,-9095 2637.5,-9131"/>
<text text-anchor="middle" x="2521" y="-9109.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge538" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2637.89,-9113C2706.47,-9113 2788.74,-9113 2835.08,-9113"/>
<polygon fill="blue" stroke="blue" points="2835.23,-9116.5 2845.23,-9113 2835.23,-9109.5 2835.23,-9116.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge637" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2890.72,-9131.02C2910.5,-9152.39 2943.04,-9189.72 2965,-9226 3027.05,-9328.54 3075.94,-9463.65 3095.38,-9521.16"/>
<polygon fill="blue" stroke="blue" points="3092.07,-9522.29 3098.56,-9530.66 3098.71,-9520.06 3092.07,-9522.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2096.28,-9363.6C2139.45,-9371.08 2225.05,-9378.43 2270,-9331 2308.03,-9290.87 2249.36,-9120.49 2290,-9083 2400.25,-8981.29 2844.68,-8993.42 2965,-9083 3037.73,-9137.15 3086.6,-9428.37 3100.47,-9520.82"/>
<polygon fill="blue" stroke="blue" points="3097.02,-9521.45 3101.95,-9530.84 3103.95,-9520.43 3097.02,-9521.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="2908,-9417 2837,-9417 2837,-9381 2908,-9381 2908,-9417"/>
<text text-anchor="middle" x="2872.5" y="-9395.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge506" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2908.24,-9415.61C2927.44,-9426.4 2950.32,-9442.15 2965,-9462 2996.6,-9504.72 2962.49,-9539.39 3001,-9576 3009.62,-9584.2 3020.41,-9589.98 3031.74,-9594.05"/>
<polygon fill="blue" stroke="blue" points="3030.76,-9597.41 3041.35,-9597.08 3032.86,-9590.73 3030.76,-9597.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node193"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="2160,-9430 1978,-9430 1978,-9394 2160,-9394 2160,-9430"/>
<text text-anchor="middle" x="2069" y="-9408.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge585" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2160.25,-9417.21C2255.5,-9422.72 2401.76,-9431.17 2474.98,-9435.4"/>
<polygon fill="blue" stroke="blue" points="2475.05,-9438.91 2485.24,-9435.99 2475.45,-9431.92 2475.05,-9438.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge592" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2556.51,-9437.58C2635.07,-9438.16 2830.79,-9448.44 2965,-9531 2986.82,-9544.42 2979.51,-9562.06 3001,-9576 3010.24,-9582 3020.76,-9586.67 3031.47,-9590.3"/>
<polygon fill="blue" stroke="blue" points="3030.73,-9593.74 3041.32,-9593.35 3032.81,-9587.05 3030.73,-9593.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge593" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2556.79,-9434.12C2620.51,-9427.01 2755.88,-9411.9 2826.51,-9404.02"/>
<polygon fill="blue" stroke="blue" points="2827.3,-9407.45 2836.85,-9402.87 2826.53,-9400.5 2827.3,-9407.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge740" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2076.64,-9285.73C2097.7,-9230.95 2168.79,-9068.05 2290,-9007 2557.96,-8872.02 2732.22,-8828.7 2965,-9018 3045.36,-9083.35 3089.82,-9420.44 3101.41,-9520.79"/>
<polygon fill="blue" stroke="blue" points="3097.94,-9521.25 3102.55,-9530.79 3104.9,-9520.46 3097.94,-9521.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge744" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2157.03,-9460.58C2252.13,-9454.67 2400.77,-9445.42 2474.86,-9440.81"/>
<polygon fill="blue" stroke="blue" points="2475.47,-9444.28 2485.24,-9440.16 2475.04,-9437.29 2475.47,-9444.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge594" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2158.04,-8597.78C2293.16,-8617.24 2556.54,-8666.94 2752,-8777 2865.15,-8840.71 2909.87,-8859.43 2965,-8977 3021.61,-9097.74 2916.34,-9472.97 3001,-9576 3008.95,-9585.68 3019.9,-9592.13 3031.72,-9596.39"/>
<polygon fill="blue" stroke="blue" points="3030.75,-9599.75 3041.34,-9599.35 3032.81,-9593.06 3030.75,-9599.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node198"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="2912,-8225 2833,-8225 2833,-8189 2912,-8189 2912,-8225"/>
<text text-anchor="middle" x="2872.5" y="-8203.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2912.19,-8219.58C2931.38,-8227.91 2952.97,-8240.89 2965,-8260 3019.63,-8346.77 2990.65,-8617.99 3001,-8720 3032.97,-9034.97 3085.67,-9415.51 3100.5,-9520.82"/>
<polygon fill="blue" stroke="blue" points="3097.07,-9521.54 3101.93,-9530.95 3104,-9520.56 3097.07,-9521.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node199"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="1592,-8699 1428,-8699 1428,-8663 1592,-8663 1592,-8699"/>
<text text-anchor="middle" x="1510" y="-8677.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.19,-8672.89C1661.18,-8669.38 1761.27,-8672.41 1840,-8708 1855.75,-8715.12 1852.44,-8727.47 1868,-8735 1908.91,-8754.8 1959.71,-8761.46 1999.87,-8763.22"/>
<polygon fill="blue" stroke="blue" points="1999.99,-8766.73 2010.1,-8763.58 2000.23,-8759.73 1999.99,-8766.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.29,-8684.94C1702.49,-8690.28 1897.3,-8699.73 2000.1,-8704.71"/>
<polygon fill="blue" stroke="blue" points="2000.2,-8708.22 2010.36,-8705.21 2000.54,-8701.23 2000.2,-8708.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.16,-8675.96C1678.46,-8672.56 1806.99,-8673.75 1840,-8708 1888.08,-8757.89 1821.24,-9279.87 1868,-9331 1909.02,-9375.86 1986.29,-9372.32 2031.85,-9365.37"/>
<polygon fill="blue" stroke="blue" points="2032.59,-9368.8 2041.88,-9363.71 2031.44,-9361.89 2032.59,-9368.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.1,-8663.67C1665.36,-8653.04 1771.86,-8650.79 1840,-8708 1877.65,-8739.61 1852.44,-8768.37 1868,-8815 1927.9,-8994.49 2021.14,-9202.25 2055.08,-9276.16"/>
<polygon fill="blue" stroke="blue" points="2052.11,-9278.06 2059.47,-9285.68 2058.47,-9275.13 2052.11,-9278.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.06,-8678.95C1659.02,-8676.15 1756.33,-8669.56 1840,-8654 1898.01,-8643.21 1962.35,-8623.57 2007.86,-8608.33"/>
<polygon fill="blue" stroke="blue" points="2009.21,-8611.57 2017.56,-8605.05 2006.97,-8604.94 2009.21,-8611.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.12,-8697.98C1665.15,-8708.29 1771.25,-8710.26 1840,-8654 1874.73,-8625.58 1835.92,-8588.38 1868,-8557 1895.52,-8530.08 1935.05,-8516.41 1971.71,-8509.61"/>
<polygon fill="blue" stroke="blue" points="1972.69,-8513 1981.96,-8507.88 1971.52,-8506.1 1972.69,-8513"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node200"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="1620,-8915 1400,-8915 1400,-8879 1620,-8879 1620,-8915"/>
<text text-anchor="middle" x="1510" y="-8893.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1620.11,-8913.57C1688.75,-8918.2 1776.11,-8912.86 1840,-8870 1862.78,-8854.72 1846.66,-8832.24 1868,-8815 1905.3,-8784.87 1958.08,-8771.75 2000.06,-8766.09"/>
<polygon fill="blue" stroke="blue" points="2000.71,-8769.54 2010.21,-8764.84 1999.85,-8762.59 2000.71,-8769.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.08,-8915.02C1665.85,-8926.31 1773.13,-8929.13 1840,-8870 1885.9,-8829.41 1823.17,-8776.78 1868,-8735 1902.76,-8702.6 1956.83,-8696.95 1999.98,-8698.8"/>
<polygon fill="blue" stroke="blue" points="1999.95,-8702.31 2010.14,-8699.38 2000.35,-8695.32 1999.95,-8702.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node201"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="1614.5,-8861 1405.5,-8861 1405.5,-8825 1614.5,-8825 1614.5,-8861"/>
<text text-anchor="middle" x="1510" y="-8839.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1614.83,-8838.49C1679.83,-8834.68 1765.14,-8827.87 1840,-8816 1894.65,-8807.34 1955.59,-8792.63 2000.71,-8780.76"/>
<polygon fill="blue" stroke="blue" points="2001.61,-8784.14 2010.38,-8778.19 1999.82,-8777.37 2001.61,-8784.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.01,-8861.03C1678.52,-8868.82 1774.69,-8866.68 1840,-8816 1870.09,-8792.65 1838.53,-8759.13 1868,-8735 1904.44,-8705.16 1957.75,-8699.22 2000.17,-8700.3"/>
<polygon fill="blue" stroke="blue" points="2000.3,-8703.8 2010.43,-8700.7 2000.57,-8696.81 2000.3,-8703.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node202"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="1597.5,-8807 1422.5,-8807 1422.5,-8771 1597.5,-8771 1597.5,-8807"/>
<text text-anchor="middle" x="1510" y="-8785.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.73,-8784.8C1708.88,-8779.41 1899.26,-8770.18 2000.33,-8765.28"/>
<polygon fill="blue" stroke="blue" points="2000.6,-8768.77 2010.42,-8764.79 2000.26,-8761.78 2000.6,-8768.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.74,-8797.37C1666.48,-8800.44 1763.36,-8796.64 1840,-8762 1855.75,-8754.88 1852.44,-8742.53 1868,-8735 1908.91,-8715.2 1959.71,-8708.54 1999.87,-8706.78"/>
<polygon fill="blue" stroke="blue" points="2000.23,-8710.27 2010.1,-8706.42 1999.99,-8703.27 2000.23,-8710.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node203"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="1585,-8591 1435,-8591 1435,-8555 1585,-8555 1585,-8591"/>
<text text-anchor="middle" x="1510" y="-8569.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.08,-8556.09C1658.92,-8543.94 1770.99,-8538.97 1840,-8600 1885.9,-8640.59 1823.17,-8693.22 1868,-8735 1902.76,-8767.4 1956.83,-8773.05 1999.98,-8771.2"/>
<polygon fill="blue" stroke="blue" points="2000.35,-8774.68 2010.14,-8770.62 1999.95,-8767.69 2000.35,-8774.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.2,-8561.93C1655.56,-8555.21 1761.84,-8555.14 1840,-8600 1858.82,-8610.8 1850.64,-8626.97 1868,-8640 1906.88,-8669.19 1959.13,-8686.38 2000.47,-8696.18"/>
<polygon fill="blue" stroke="blue" points="1999.93,-8699.64 2010.46,-8698.45 2001.49,-8692.82 1999.93,-8699.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node204"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="1600,-8429 1420,-8429 1420,-8393 1600,-8393 1600,-8429"/>
<text text-anchor="middle" x="1510" y="-8407.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.99,-8392.96C1661.52,-8380.2 1773.38,-8375 1840,-8438 1905.85,-8500.27 1810.28,-8570.12 1868,-8640 1900.18,-8678.95 1955.64,-8695.68 2000.02,-8702.81"/>
<polygon fill="blue" stroke="blue" points="1999.76,-8706.31 2010.17,-8704.31 2000.78,-8699.39 1999.76,-8706.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node205"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="1570.5,-8537 1449.5,-8537 1449.5,-8501 1570.5,-8501 1570.5,-8537"/>
<text text-anchor="middle" x="1510" y="-8515.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1570.79,-8504.05C1644.28,-8489.59 1768.06,-8478.61 1840,-8546 1901.97,-8604.06 1807.57,-8675.34 1868,-8735 1902.05,-8768.61 1956.68,-8774.05 2000.25,-8771.8"/>
<polygon fill="blue" stroke="blue" points="2000.75,-8775.28 2010.49,-8771.13 2000.28,-8768.29 2000.75,-8775.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1570.56,-8505.53C1642.67,-8492.95 1763.9,-8484.26 1840,-8546 1873.85,-8573.46 1837.77,-8608.59 1868,-8640 1902.68,-8676.04 1957.17,-8692.98 2000.52,-8700.94"/>
<polygon fill="blue" stroke="blue" points="1999.99,-8704.4 2010.43,-8702.64 2001.17,-8697.5 1999.99,-8704.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node206"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1653,-8753 1367,-8753 1367,-8717 1653,-8717 1653,-8753"/>
<text text-anchor="middle" x="1510" y="-8731.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.36,-8741.9C1764.7,-8747.3 1914.56,-8754.56 2000.27,-8758.72"/>
<polygon fill="blue" stroke="blue" points="2000.24,-8762.22 2010.4,-8759.21 2000.58,-8755.23 2000.24,-8762.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.36,-8728.1C1764.7,-8722.7 1914.56,-8715.44 2000.27,-8711.28"/>
<polygon fill="blue" stroke="blue" points="2000.58,-8714.77 2010.4,-8710.79 2000.24,-8707.78 2000.58,-8714.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.26,-8728.73C1729.98,-8728.71 1814.14,-8735.28 1840,-8762 1884.02,-8807.49 1825.18,-9284.38 1868,-9331 1909.12,-9375.77 1986.36,-9372.26 2031.88,-9365.35"/>
<polygon fill="blue" stroke="blue" points="2032.61,-9368.77 2041.9,-9363.69 2031.47,-9361.87 2032.61,-9368.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.65,-8716.99C1688.97,-8711.55 1777.24,-8716.51 1840,-8762 1851.41,-8770.27 2012.83,-9167.67 2056.93,-9276.63"/>
<polygon fill="blue" stroke="blue" points="2053.72,-9278.01 2060.71,-9285.97 2060.21,-9275.38 2053.72,-9278.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.38,-8745.5C1713.6,-8744.44 1782.87,-8735.66 1840,-8708 1856.42,-8700.05 1853.19,-8688.65 1868,-8678 1909.81,-8647.94 1963.13,-8624.28 2004.2,-8608.63"/>
<polygon fill="blue" stroke="blue" points="2005.43,-8611.9 2013.57,-8605.11 2002.98,-8605.35 2005.43,-8611.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1590.24,-8753.01C1664.27,-8764.79 1773.13,-8768.41 1840,-8708 1890.65,-8662.25 1821.6,-8607.06 1868,-8557 1894.56,-8528.34 1934.66,-8514.47 1972,-8507.99"/>
<polygon fill="blue" stroke="blue" points="1972.6,-8511.44 1981.93,-8506.43 1971.51,-8504.53 1972.6,-8511.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node207"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="1588,-8483 1432,-8483 1432,-8447 1588,-8447 1588,-8483"/>
<text text-anchor="middle" x="1510" y="-8461.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.55,-8446.95C1660.31,-8433.72 1773.59,-8427.74 1840,-8492 1918.12,-8567.6 1791.88,-8657.38 1868,-8735 1901.57,-8769.23 1956.4,-8774.58 2000.16,-8772.15"/>
<polygon fill="blue" stroke="blue" points="2000.44,-8775.63 2010.17,-8771.44 1999.95,-8768.65 2000.44,-8775.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.09,-8447.38C1662.11,-8435.37 1772.38,-8431.14 1840,-8492 1889.76,-8536.79 1824.11,-8589.45 1868,-8640 1901.01,-8678.02 1956.15,-8694.82 2000.18,-8702.22"/>
<polygon fill="blue" stroke="blue" points="1999.83,-8705.71 2010.25,-8703.79 2000.9,-8698.79 1999.83,-8705.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node208"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="1741.5,-8645 1278.5,-8645 1278.5,-8609 1741.5,-8609 1741.5,-8645"/>
<text text-anchor="middle" x="1510" y="-8623.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.01,-8608.97C1678.52,-8601.18 1774.69,-8603.32 1840,-8654 1870.09,-8677.35 1838.53,-8710.87 1868,-8735 1904.44,-8764.84 1957.75,-8770.78 2000.17,-8769.7"/>
<polygon fill="blue" stroke="blue" points="2000.57,-8773.19 2010.43,-8769.3 2000.3,-8766.2 2000.57,-8773.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1741.62,-8641.49C1774.73,-8644.86 1808.3,-8648.97 1840,-8654 1894.65,-8662.66 1955.59,-8677.37 2000.71,-8689.24"/>
<polygon fill="blue" stroke="blue" points="1999.82,-8692.63 2010.38,-8691.81 2001.61,-8685.86 1999.82,-8692.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1741.6,-8624.33C1786.28,-8628.68 1824.17,-8637.52 1840,-8654 1892.15,-8708.3 1817.29,-9275.35 1868,-9331 1908.94,-9375.93 1986.24,-9372.36 2031.82,-9365.4"/>
<polygon fill="blue" stroke="blue" points="2032.57,-9368.82 2041.86,-9363.73 2031.42,-9361.91 2032.57,-9368.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1589.34,-8608.99C1663.49,-8596.96 1773.15,-8592.93 1840,-8654 1893.62,-8702.99 1847.91,-8745.2 1868,-8815 1920.44,-8997.21 2018.6,-9204 2054.45,-9276.87"/>
<polygon fill="blue" stroke="blue" points="2051.32,-9278.45 2058.89,-9285.86 2057.6,-9275.34 2051.32,-9278.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1741.57,-8610.44C1821.4,-8604.71 1906.65,-8598.59 1970,-8594.04"/>
<polygon fill="blue" stroke="blue" points="1970.25,-8597.53 1979.98,-8593.32 1969.75,-8590.55 1970.25,-8597.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1741.89,-8634.8C1776.42,-8628.54 1810.34,-8617.69 1840,-8600 1859.59,-8588.32 1849.52,-8570.37 1868,-8557 1898.19,-8535.16 1936.76,-8522.31 1971.96,-8514.76"/>
<polygon fill="blue" stroke="blue" points="1972.68,-8518.19 1981.78,-8512.77 1971.29,-8511.33 1972.68,-8518.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node209"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="1598,-9023 1422,-9023 1422,-8987 1598,-8987 1598,-9023"/>
<text text-anchor="middle" x="1510" y="-9001.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1589.36,-9023.04C1663.54,-9035.1 1773.21,-9039.14 1840,-8978 1894.22,-8928.37 1818.39,-8869.24 1868,-8815 1901.29,-8778.61 1956.4,-8766.01 2000.35,-8762.15"/>
<polygon fill="blue" stroke="blue" points="2000.69,-8765.63 2010.41,-8761.4 2000.17,-8758.65 2000.69,-8765.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.55,-9023.05C1660.31,-9036.28 1773.59,-9042.26 1840,-8978 1918.12,-8902.4 1791.88,-8812.62 1868,-8735 1901.57,-8700.77 1956.4,-8695.42 2000.16,-8697.85"/>
<polygon fill="blue" stroke="blue" points="1999.95,-8701.35 2010.17,-8698.56 2000.44,-8694.37 1999.95,-8701.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node210"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="1607,-8969 1413,-8969 1413,-8933 1607,-8933 1607,-8969"/>
<text text-anchor="middle" x="1510" y="-8947.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge602" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.45,-8969.01C1669.57,-8979.14 1773.3,-8980.25 1840,-8924 1878.24,-8891.75 1832.77,-8850.5 1868,-8815 1902.43,-8780.3 1956.78,-8767.52 2000.13,-8763.15"/>
<polygon fill="blue" stroke="blue" points="2000.68,-8766.62 2010.33,-8762.26 2000.06,-8759.65 2000.68,-8766.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge603" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587.57,-8969.02C1661.99,-8981.6 1773.29,-8986.5 1840,-8924 1901.97,-8865.94 1807.57,-8794.66 1868,-8735 1902.05,-8701.39 1956.68,-8695.95 2000.25,-8698.2"/>
<polygon fill="blue" stroke="blue" points="2000.28,-8701.71 2010.49,-8698.87 2000.75,-8694.72 2000.28,-8701.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node211"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1575.5,-9592 1444.5,-9592 1444.5,-9556 1575.5,-9556 1575.5,-9592"/>
<text text-anchor="middle" x="1510" y="-9570.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1575.71,-9589.66C1649.46,-9603.3 1768.95,-9611.98 1840,-9547 1893.92,-9497.69 1815.39,-9435.7 1868,-9385 1911.44,-9343.13 1986.93,-9345.37 2031.7,-9351.33"/>
<polygon fill="blue" stroke="blue" points="2031.44,-9354.83 2041.84,-9352.81 2032.45,-9347.9 2031.44,-9354.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1575.51,-9590.3C1649.93,-9604.84 1770.89,-9614.65 1840,-9547 1883.11,-9504.81 1823.2,-9317.39 1868,-9277 2000.69,-9157.36 2098.59,-9226.58 2270,-9277 2360.92,-9303.74 2450,-9374.92 2493.12,-9413.05"/>
<polygon fill="blue" stroke="blue" points="2490.85,-9415.71 2500.63,-9419.77 2495.51,-9410.49 2490.85,-9415.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1575.54,-9590.06C1649.7,-9604.27 1770.13,-9613.66 1840,-9547 1910.04,-9480.18 1799.73,-9399.63 1868,-9331 1910.75,-9288.02 1987.07,-9290.8 2032.06,-9297.12"/>
<polygon fill="blue" stroke="blue" points="2031.56,-9300.59 2041.97,-9298.65 2032.62,-9293.67 2031.56,-9300.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node212"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="1733.5,-9376 1286.5,-9376 1286.5,-9340 1733.5,-9340 1733.5,-9376"/>
<text text-anchor="middle" x="1510" y="-9354.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1733.54,-9358C1846.17,-9358 1971.53,-9358 2031.79,-9358"/>
<polygon fill="blue" stroke="blue" points="2031.92,-9361.5 2041.92,-9358 2031.92,-9354.5 2031.92,-9361.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1733.64,-9340.82C1769.23,-9337.76 1805.64,-9334.44 1840,-9331 1907.74,-9324.21 1986.59,-9314.46 2031.56,-9308.72"/>
<polygon fill="blue" stroke="blue" points="2032.23,-9312.17 2041.7,-9307.43 2031.34,-9305.22 2032.23,-9312.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1733.53,-9361.38C1781.67,-9357.33 1823.22,-9348.45 1840,-9331 1890.34,-9278.66 1827.4,-8738.21 1868,-8678 1891.5,-8643.16 1931.81,-8621.45 1970.11,-8608.03"/>
<polygon fill="blue" stroke="blue" points="1971.42,-8611.28 1979.79,-8604.79 1969.2,-8604.64 1971.42,-8611.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1733.61,-9361.46C1781.75,-9357.4 1823.27,-9348.51 1840,-9331 1899.44,-9268.77 1814.29,-8624.24 1868,-8557 1892.8,-8525.95 1933.51,-8511.84 1971.75,-8505.83"/>
<polygon fill="blue" stroke="blue" points="1972.51,-8509.25 1981.92,-8504.4 1971.54,-8502.32 1972.51,-8509.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node213"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1655,-9268 1365,-9268 1365,-9232 1655,-9232 1655,-9268"/>
<text text-anchor="middle" x="1510" y="-9246.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.05,-9232.27C1716.6,-9231.78 1786.44,-9241.36 1840,-9277 1862.51,-9291.98 1845.89,-9315.44 1868,-9331 1916.7,-9365.28 1988.91,-9365.94 2031.93,-9362.51"/>
<polygon fill="blue" stroke="blue" points="2032.31,-9365.99 2041.95,-9361.6 2031.67,-9359.02 2032.31,-9365.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.24,-9260.71C1712.76,-9265.27 1779.55,-9270.94 1840,-9277 1907.74,-9283.79 1986.59,-9293.54 2031.56,-9299.28"/>
<polygon fill="blue" stroke="blue" points="2031.34,-9302.78 2041.7,-9300.57 2032.23,-9295.83 2031.34,-9302.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.01,-9256.25C1731.25,-9256.16 1814.31,-9249.48 1840,-9223 1882.22,-9179.47 1833.88,-8728.13 1868,-8678 1891.64,-8643.26 1931.98,-8621.56 1970.25,-8608.12"/>
<polygon fill="blue" stroke="blue" points="1971.56,-8611.38 1979.93,-8604.88 1969.34,-8604.74 1971.56,-8611.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.11,-9256.34C1731.37,-9256.28 1814.44,-9249.6 1840,-9223 1891.32,-9169.59 1821.61,-8614.74 1868,-8557 1892.84,-8526.09 1933.44,-8511.98 1971.6,-8505.93"/>
<polygon fill="blue" stroke="blue" points="1972.34,-8509.36 1981.75,-8504.5 1971.36,-8502.43 1972.34,-8509.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node214"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="1604.5,-9160 1415.5,-9160 1415.5,-9124 1604.5,-9124 1604.5,-9160"/>
<text text-anchor="middle" x="1510" y="-9138.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1604.56,-9147.53C1690.34,-9150.34 1808.66,-9147.77 1840,-9115 1897.56,-9054.82 1808.02,-8423.78 1868,-8366 1903.37,-8331.93 2716.89,-8331.66 2752,-8366 2788.07,-8401.28 2754.83,-9226.55 2772,-9274 2786.39,-9313.77 2818.94,-9350.52 2842.91,-9373.73"/>
<polygon fill="blue" stroke="blue" points="2840.69,-9376.44 2850.36,-9380.77 2845.5,-9371.36 2840.69,-9376.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1604.63,-9138.61C1671.67,-9138.82 1763.27,-9144.57 1840,-9169 1916.89,-9193.48 1995.46,-9247.8 2037.3,-9279.57"/>
<polygon fill="blue" stroke="blue" points="2035.35,-9282.48 2045.42,-9285.8 2039.62,-9276.93 2035.35,-9282.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node215"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="1639,-9538 1381,-9538 1381,-9502 1639,-9502 1639,-9538"/>
<text text-anchor="middle" x="1510" y="-9516.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.77,-9538.02C1669.86,-9548.09 1773.35,-9549.09 1840,-9493 1877.94,-9461.07 1830.91,-9417.91 1868,-9385 1913.01,-9345.07 1987.64,-9346.56 2031.89,-9351.87"/>
<polygon fill="blue" stroke="blue" points="2031.54,-9355.36 2041.91,-9353.2 2032.46,-9348.42 2031.54,-9355.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1589.35,-9538.02C1663.52,-9550.07 1773.18,-9554.11 1840,-9493 1893.92,-9443.69 1815.39,-9381.7 1868,-9331 1911.44,-9289.13 1986.93,-9291.37 2031.7,-9297.33"/>
<polygon fill="blue" stroke="blue" points="2031.44,-9300.83 2041.84,-9298.81 2032.45,-9293.9 2031.44,-9300.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.22,-9510.55C1700.1,-9505.79 1773.85,-9499.63 1840,-9493 1882.96,-9488.69 1930.39,-9483.2 1970.81,-9478.29"/>
<polygon fill="blue" stroke="blue" points="1971.42,-9481.74 1980.93,-9477.06 1970.57,-9474.79 1971.42,-9481.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.3,-9526.32C1719.58,-9527.21 1812.76,-9521.57 1840,-9493 1902.53,-9427.43 1817.66,-8753.34 1868,-8678 1891.4,-8642.98 1931.81,-8621.25 1970.21,-8607.85"/>
<polygon fill="blue" stroke="blue" points="1971.53,-8611.09 1979.91,-8604.62 1969.32,-8604.45 1971.53,-8611.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1639.35,-9526.36C1719.64,-9527.26 1812.82,-9521.63 1840,-9493 1911.64,-9417.54 1803.32,-8638.5 1868,-8557 1892.7,-8525.88 1933.4,-8511.75 1971.65,-8505.75"/>
<polygon fill="blue" stroke="blue" points="1972.42,-8509.18 1981.84,-8504.33 1971.45,-8502.25 1972.42,-8509.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node216"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1637,-9322 1383,-9322 1383,-9286 1637,-9286 1637,-9322"/>
<text text-anchor="middle" x="1510" y="-9300.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.32,-9310.08C1717.88,-9310.96 1812.19,-9305.41 1840,-9277 1911.95,-9203.5 1802.84,-8894.58 1868,-8815 1899.46,-8776.58 1955.26,-8764.2 1999.94,-8760.94"/>
<polygon fill="blue" stroke="blue" points="2000.38,-8764.42 2010.16,-8760.33 1999.97,-8757.43 2000.38,-8764.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.4,-9310.15C1717.99,-9311.07 1812.31,-9305.54 1840,-9277 1881.99,-9233.72 1827.16,-8779.36 1868,-8735 1900.69,-8699.49 1956.12,-8694.38 2000.35,-8697.23"/>
<polygon fill="blue" stroke="blue" points="2000.22,-8700.73 2010.46,-8698.04 2000.77,-8693.76 2000.22,-8700.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.25,-9313.29C1698.51,-9318.07 1773.14,-9324.3 1840,-9331 1907.74,-9337.79 1986.59,-9347.54 2031.56,-9353.28"/>
<polygon fill="blue" stroke="blue" points="2031.34,-9356.78 2041.7,-9354.57 2032.23,-9349.83 2031.34,-9356.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.04,-9304C1764.24,-9304 1952.77,-9304 2031.44,-9304"/>
<polygon fill="blue" stroke="blue" points="2031.8,-9307.5 2041.8,-9304 2031.8,-9300.5 2031.8,-9307.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.01,-9310.19C1717.72,-9311.15 1812.34,-9305.66 1840,-9277 1886.28,-9229.07 1830.64,-8733.17 1868,-8678 1891.56,-8643.2 1931.88,-8621.5 1970.18,-8608.07"/>
<polygon fill="blue" stroke="blue" points="1971.48,-8611.32 1979.86,-8604.83 1969.26,-8604.69 1971.48,-8611.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1637.08,-9310.26C1717.82,-9311.25 1812.45,-9305.76 1840,-9277 1895.38,-9219.18 1817.95,-8619.49 1868,-8557 1892.84,-8525.99 1933.55,-8511.88 1971.79,-8505.86"/>
<polygon fill="blue" stroke="blue" points="1972.55,-8509.29 1981.96,-8504.43 1971.57,-8502.35 1972.55,-8509.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node217"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="1584.5,-9484 1435.5,-9484 1435.5,-9448 1584.5,-9448 1584.5,-9484"/>
<text text-anchor="middle" x="1510" y="-9462.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.57,-9479.09C1655.94,-9487.68 1764.26,-9489.4 1840,-9439 1862.51,-9424.02 1845.89,-9400.56 1868,-9385 1916.7,-9350.72 1988.91,-9350.06 2031.93,-9353.49"/>
<polygon fill="blue" stroke="blue" points="2031.67,-9356.98 2041.95,-9354.4 2032.31,-9350.01 2031.67,-9356.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.81,-9482.26C1658.17,-9493.8 1769.62,-9498.22 1840,-9439 1877.94,-9407.07 1830.91,-9363.91 1868,-9331 1913.01,-9291.07 1987.64,-9292.56 2031.89,-9297.87"/>
<polygon fill="blue" stroke="blue" points="2031.54,-9301.36 2041.91,-9299.2 2032.46,-9294.42 2031.54,-9301.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.68,-9466C1683.88,-9466 1860.63,-9466 1970.68,-9466"/>
<polygon fill="blue" stroke="blue" points="1970.79,-9469.5 1980.79,-9466 1970.79,-9462.5 1970.79,-9469.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.53,-9470.76C1670.72,-9474.57 1806.14,-9474.42 1840,-9439 1898.47,-9377.84 1820.9,-8748.29 1868,-8678 1891.44,-8643.01 1931.86,-8621.28 1970.25,-8607.87"/>
<polygon fill="blue" stroke="blue" points="1971.57,-8611.12 1979.95,-8604.64 1969.36,-8604.48 1971.57,-8611.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.56,-9470.79C1670.78,-9474.63 1806.23,-9474.51 1840,-9439 1907.57,-9367.95 1806.98,-8633.75 1868,-8557 1892.73,-8525.9 1933.43,-8511.78 1971.68,-8505.77"/>
<polygon fill="blue" stroke="blue" points="1972.44,-8509.2 1981.86,-8504.35 1971.47,-8502.27 1972.44,-8509.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node218"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1574,-9106 1446,-9106 1446,-9070 1574,-9070 1574,-9106"/>
<text text-anchor="middle" x="1510" y="-9084.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1574.05,-9103.93C1649.09,-9118.69 1772.68,-9128.93 1840,-9058 1895.27,-8999.77 1810.14,-8391.66 1868,-8336 1903.39,-8301.95 2716.91,-8301.65 2752,-8336 2789.25,-8372.46 2754.28,-9224.98 2772,-9274 2786.38,-9313.78 2818.93,-9350.52 2842.91,-9373.73"/>
<polygon fill="blue" stroke="blue" points="2840.69,-9376.45 2850.36,-9380.78 2845.5,-9371.36 2840.69,-9376.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1574.21,-9082.21C1642.42,-9078.42 1752.96,-9079.53 1840,-9115 1929.01,-9151.28 2009.61,-9235.37 2046.61,-9278.09"/>
<polygon fill="blue" stroke="blue" points="2044.06,-9280.48 2053.22,-9285.81 2049.38,-9275.93 2044.06,-9280.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node219"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="1756.5,-9214 1263.5,-9214 1263.5,-9178 1756.5,-9178 1756.5,-9214"/>
<text text-anchor="middle" x="1510" y="-9192.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge543" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.77,-9177.98C1669.86,-9167.91 1773.35,-9166.91 1840,-9223 1877.94,-9254.93 1830.91,-9298.09 1868,-9331 1913.01,-9370.93 1987.64,-9369.44 2031.89,-9364.13"/>
<polygon fill="blue" stroke="blue" points="2032.46,-9367.58 2041.91,-9362.8 2031.54,-9360.64 2032.46,-9367.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge545" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1756.82,-9209.12C1785.02,-9212.71 1813.24,-9217.25 1840,-9223 1910.26,-9238.09 1988.42,-9269.18 2032.56,-9288.15"/>
<polygon fill="blue" stroke="blue" points="2031.41,-9291.47 2041.97,-9292.24 2034.19,-9285.04 2031.41,-9291.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge544" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1756.67,-9196.79C1794.61,-9192.01 1825.89,-9183.46 1840,-9169 1878.15,-9129.88 1837.13,-8723.09 1868,-8678 1891.69,-8643.4 1931.92,-8621.73 1970.11,-8608.27"/>
<polygon fill="blue" stroke="blue" points="1971.4,-8611.53 1979.76,-8605.03 1969.17,-8604.9 1971.4,-8611.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge542" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1756.8,-9196.92C1794.72,-9192.12 1825.98,-9183.54 1840,-9169 1887.26,-9120 1825.26,-8609.98 1868,-8557 1892.89,-8526.14 1933.5,-8512.04 1971.65,-8505.98"/>
<polygon fill="blue" stroke="blue" points="1972.39,-8509.41 1981.8,-8504.54 1971.41,-8502.48 1972.39,-8509.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node220"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="1749.5,-9430 1270.5,-9430 1270.5,-9394 1749.5,-9394 1749.5,-9430"/>
<text text-anchor="middle" x="1510" y="-9408.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge600" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1743.41,-9393.98C1775.86,-9391.15 1808.78,-9388.13 1840,-9385 1907.74,-9378.21 1986.59,-9368.46 2031.56,-9362.72"/>
<polygon fill="blue" stroke="blue" points="2032.23,-9366.17 2041.7,-9361.43 2031.34,-9359.22 2032.23,-9366.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge599" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1749.88,-9421.05C1781.96,-9414.27 1813.04,-9402.94 1840,-9385 1862.51,-9370.02 1845.89,-9346.56 1868,-9331 1916.7,-9296.72 1988.91,-9296.06 2031.93,-9299.49"/>
<polygon fill="blue" stroke="blue" points="2031.67,-9302.98 2041.95,-9300.4 2032.31,-9296.01 2031.67,-9302.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge597" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1749.53,-9413.86C1790.73,-9409.26 1825.13,-9400.51 1840,-9385 1894.4,-9328.25 1824.15,-8743.25 1868,-8678 1891.49,-8643.05 1931.91,-8621.32 1970.29,-8607.91"/>
<polygon fill="blue" stroke="blue" points="1971.62,-8611.15 1980,-8604.67 1969.4,-8604.51 1971.62,-8611.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge598" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1749.6,-9413.93C1790.8,-9409.32 1825.17,-9400.56 1840,-9385 1903.51,-9318.36 1810.64,-8628.99 1868,-8557 1892.76,-8525.92 1933.46,-8511.81 1971.71,-8505.8"/>
<polygon fill="blue" stroke="blue" points="1972.47,-8509.23 1981.89,-8504.37 1971.5,-8502.29 1972.47,-8509.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node221"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="1640.5,-8209 1379.5,-8209 1379.5,-8173 1640.5,-8173 1640.5,-8209"/>
<text text-anchor="middle" x="1510" y="-8187.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1640.62,-8185.09C1720.3,-8184.49 1812.28,-8190.3 1840,-8218 1893.46,-8271.44 1816.36,-8501.8 1868,-8557 1893.65,-8584.42 1932.78,-8594.16 1969.64,-8596.22"/>
<polygon fill="blue" stroke="blue" points="1969.84,-8599.73 1979.96,-8596.6 1970.1,-8592.73 1969.84,-8599.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node249"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2145,-8414 1993,-8414 1993,-8378 2145,-8378 2145,-8414"/>
<text text-anchor="middle" x="2069" y="-8392.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.69,-8172.96C1679.1,-8165.31 1774.82,-8167.62 1840,-8218 1869.81,-8241.04 1842.99,-8269.83 1868,-8298 1900.62,-8334.75 1950.15,-8359.17 1991.76,-8374.44"/>
<polygon fill="blue" stroke="blue" points="1990.73,-8377.79 2001.32,-8377.84 1993.08,-8371.19 1990.73,-8377.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node251"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2148.5,-8468 1989.5,-8468 1989.5,-8432 2148.5,-8432 2148.5,-8468"/>
<text text-anchor="middle" x="2069" y="-8446.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.67,-8173C1661.21,-8160.17 1773.33,-8154.83 1840,-8218 1906.75,-8281.25 1802.93,-8358.03 1868,-8423 1896.56,-8451.52 1939.92,-8459.84 1978.98,-8460.36"/>
<polygon fill="blue" stroke="blue" points="1979.34,-8463.86 1989.33,-8460.32 1979.32,-8456.86 1979.34,-8463.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node222"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="1707.5,-7345 1312.5,-7345 1312.5,-7309 1707.5,-7309 1707.5,-7345"/>
<text text-anchor="middle" x="1510" y="-7323.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1707.6,-7321.68C1766.38,-7324.56 1820.44,-7333.26 1840,-7354 1885.87,-7402.64 1823.79,-8506.85 1868,-8557 1892.99,-8585.35 1932.32,-8595.16 1969.52,-8597.01"/>
<polygon fill="blue" stroke="blue" points="1969.83,-8600.53 1979.94,-8597.33 1970.05,-8593.53 1969.83,-8600.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node246"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="2599,-8468 2443,-8468 2443,-8432 2599,-8432 2599,-8468"/>
<text text-anchor="middle" x="2521" y="-8446.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.97,-7308.98C1661.48,-7296.23 1773.33,-7291.04 1840,-7354 1905.26,-7415.63 1803.51,-7491.57 1868,-7554 1932.55,-7616.49 2209.14,-7530.91 2270,-7597 2301.09,-7630.77 2259.08,-8389.07 2290,-8423 2325.09,-8461.5 2383.58,-8467.95 2432.8,-8464.92"/>
<polygon fill="blue" stroke="blue" points="2433.11,-8468.41 2442.82,-8464.17 2432.59,-8461.43 2433.11,-8468.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node247"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="2595.5,-8414 2446.5,-8414 2446.5,-8378 2595.5,-8378 2595.5,-8414"/>
<text text-anchor="middle" x="2521" y="-8392.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1604.3,-7308.97C1676.25,-7300.62 1774.25,-7302.02 1840,-7354 1871.53,-7378.93 1839.36,-7411.8 1868,-7440 2001.23,-7571.18 2143.06,-7426.73 2270,-7564 2297.53,-7593.77 2279.55,-7613.83 2290,-7653 2365.2,-7934.98 2477.36,-8270.41 2510.47,-8368.06"/>
<polygon fill="blue" stroke="blue" points="2507.24,-8369.43 2513.77,-8377.77 2513.87,-8367.18 2507.24,-8369.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node223"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="1731,-7291 1289,-7291 1289,-7255 1731,-7255 1731,-7291"/>
<text text-anchor="middle" x="1510" y="-7269.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node244"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="2096,-7642 2042,-7642 2042,-7606 2096,-7606 2096,-7642"/>
<text text-anchor="middle" x="2069" y="-7620.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.27,-7254.94C1660.08,-7241.62 1773.65,-7235.47 1840,-7300 1880.71,-7339.59 1832.65,-7509.56 1868,-7554 1907.84,-7604.08 1985.88,-7618.42 2031.81,-7622.47"/>
<polygon fill="blue" stroke="blue" points="2031.69,-7625.97 2041.93,-7623.24 2032.22,-7618.99 2031.69,-7625.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.15,-7254.99C1662.48,-7242.6 1773.22,-7238 1840,-7300 1898.69,-7354.49 1812.25,-7420.51 1868,-7478 1994.58,-7608.54 2152.38,-7415.34 2270,-7554 2301.24,-7590.83 2257.49,-8387.29 2290,-8423 2325.07,-8461.52 2383.56,-8467.97 2432.78,-8464.94"/>
<polygon fill="blue" stroke="blue" points="2433.1,-8468.42 2442.81,-8464.18 2432.57,-8461.44 2433.1,-8468.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1627.4,-7254.98C1695.23,-7250.77 1779.12,-7257.06 1840,-7300 1864.71,-7317.43 1844.28,-7343.25 1868,-7362 2010.75,-7474.89 2147.77,-7305.16 2270,-7440 2301.93,-7475.22 2280.7,-7606.38 2290,-7653 2347.1,-7939.2 2471.72,-8271.72 2509.15,-8368.37"/>
<polygon fill="blue" stroke="blue" points="2506,-8369.93 2512.89,-8377.98 2512.53,-8367.39 2506,-8369.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node224"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1729.5,-7237 1290.5,-7237 1290.5,-7201 1729.5,-7201 1729.5,-7237"/>
<text text-anchor="middle" x="1510" y="-7215.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1729.93,-7215.06C1779.69,-7218.96 1822.96,-7227.9 1840,-7246 1889.93,-7299.05 1819.87,-8502.31 1868,-8557 1892.96,-8585.37 1932.29,-8595.19 1969.49,-8597.04"/>
<polygon fill="blue" stroke="blue" points="1969.81,-8600.55 1979.91,-8597.36 1970.02,-8593.55 1969.81,-8600.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1589.95,-7200.97C1664.03,-7189.1 1773.16,-7185.34 1840,-7246 1891.84,-7293.05 1818.76,-7351.24 1868,-7401 1995.95,-7530.31 2152.62,-7339.02 2270,-7478 2303.88,-7518.12 2254.69,-8384.14 2290,-8423 2325.03,-8461.56 2383.52,-8468 2432.75,-8464.96"/>
<polygon fill="blue" stroke="blue" points="2433.08,-8468.45 2442.78,-8464.2 2432.55,-8461.46 2433.08,-8468.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1729.78,-7216.51C1767.63,-7221.77 1805.78,-7230.92 1840,-7246 1855.54,-7252.85 1852.97,-7264.09 1868,-7272 2030.03,-7357.25 2150.71,-7223.1 2270,-7362 2291.12,-7386.59 2284.06,-7621.14 2290,-7653 2343.51,-7939.86 2470.57,-8271.87 2508.88,-8368.39"/>
<polygon fill="blue" stroke="blue" points="2505.65,-8369.74 2512.61,-8377.74 2512.16,-8367.15 2505.65,-8369.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node225"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="1648.5,-8155 1371.5,-8155 1371.5,-8119 1648.5,-8119 1648.5,-8155"/>
<text text-anchor="middle" x="1510" y="-8133.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1648.63,-8130.94C1726.43,-8130.75 1813.35,-8137.06 1840,-8164 1901.58,-8226.24 1808.54,-8492.73 1868,-8557 1893.5,-8584.56 1932.6,-8594.33 1969.48,-8596.37"/>
<polygon fill="blue" stroke="blue" points="1969.69,-8599.87 1979.81,-8596.74 1969.95,-8592.88 1969.69,-8599.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.06,-8119C1665.82,-8107.73 1773.09,-8104.92 1840,-8164 1885.61,-8204.27 1830.67,-8249.96 1868,-8298 1897.27,-8335.67 1944.79,-8359.8 1986.16,-8374.68"/>
<polygon fill="blue" stroke="blue" points="1985.11,-8378.02 1995.71,-8377.99 1987.41,-8371.41 1985.11,-8378.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.95,-8118.98C1659.77,-8105.58 1773.61,-8099.3 1840,-8164 1881.46,-8204.4 1827.61,-8381.53 1868,-8423 1896.33,-8452.09 1940.01,-8460.38 1979.33,-8460.73"/>
<polygon fill="blue" stroke="blue" points="1979.51,-8464.23 1989.48,-8460.65 1979.46,-8457.23 1979.51,-8464.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node226"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1840,-8101 1180,-8101 1180,-8065 1840,-8065 1840,-8101"/>
<text text-anchor="middle" x="1510" y="-8079.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1827.84,-8101.07C1832.7,-8103.76 1836.79,-8106.73 1840,-8110 1909.69,-8181.05 1800.73,-8483.65 1868,-8557 1893.44,-8584.73 1932.63,-8594.5 1969.6,-8596.49"/>
<polygon fill="blue" stroke="blue" points="1969.84,-8600 1979.95,-8596.85 1970.08,-8593 1969.84,-8600"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587.56,-8064.99C1661.98,-8052.42 1773.27,-8047.53 1840,-8110 1901.67,-8167.73 1818.13,-8229.82 1868,-8298 1895.74,-8335.93 1942.22,-8359.93 1983.39,-8374.68"/>
<polygon fill="blue" stroke="blue" points="1982.31,-8378.01 1992.9,-8377.96 1984.59,-8371.4 1982.31,-8378.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1827.73,-8101.18C1832.61,-8103.84 1836.75,-8106.77 1840,-8110 1889.56,-8159.2 1819.74,-8372.52 1868,-8423 1896.06,-8452.36 1939.72,-8460.66 1979.09,-8460.96"/>
<polygon fill="blue" stroke="blue" points="1979.29,-8464.46 1989.26,-8460.87 1979.23,-8457.46 1979.29,-8464.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node227"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="1620,-7183 1400,-7183 1400,-7147 1620,-7147 1620,-7183"/>
<text text-anchor="middle" x="1510" y="-7161.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.7,-7146.96C1661.27,-7134.1 1773.42,-7128.75 1840,-7192 1873.97,-7224.27 1848.38,-7358.45 1868,-7401 1907.35,-7486.31 1990.76,-7562.27 2036.45,-7599.59"/>
<polygon fill="blue" stroke="blue" points="2034.27,-7602.33 2044.25,-7605.89 2038.67,-7596.88 2034.27,-7602.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1594.55,-7147C1667.94,-7136.39 1773.17,-7134.57 1840,-7192 1880.88,-7227.13 1829.69,-7272.08 1868,-7310 1998.2,-7438.86 2154.26,-7259.01 2270,-7401 2305.88,-7445.02 2251.84,-8380.94 2290,-8423 2325,-8461.58 2383.49,-8468.03 2432.73,-8464.98"/>
<polygon fill="blue" stroke="blue" points="2433.06,-8468.47 2442.76,-8464.22 2432.53,-8461.49 2433.06,-8468.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1620.14,-7172.59C1819.9,-7187.61 2227.79,-7223.84 2270,-7272 2297.94,-7303.88 2282.56,-7611.27 2290,-7653 2341.19,-7940.28 2469.85,-8272 2508.71,-8368.42"/>
<polygon fill="blue" stroke="blue" points="2505.5,-8369.8 2512.49,-8377.76 2511.98,-8367.18 2505.5,-8369.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node228"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="1680.5,-7885 1339.5,-7885 1339.5,-7849 1680.5,-7849 1680.5,-7885"/>
<text text-anchor="middle" x="1510" y="-7863.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1680.83,-7874.62C1733.7,-7871.4 1790.94,-7861.91 1840,-7840 1935.14,-7797.5 2015.29,-7698.08 2049.82,-7650.41"/>
<polygon fill="blue" stroke="blue" points="2052.76,-7652.31 2055.72,-7642.14 2047.06,-7648.24 2052.76,-7652.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1680.75,-7861.24C1749,-7862.82 1817,-7870.7 1840,-7894 1903.23,-7958.04 1817.77,-8223.33 1868,-8298 1894.43,-8337.29 1941.34,-8361.41 1983.09,-8375.89"/>
<polygon fill="blue" stroke="blue" points="1982.14,-8379.27 1992.74,-8379.1 1984.35,-8372.63 1982.14,-8379.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1680.92,-7861.07C1749.21,-7862.62 1817.19,-7870.52 1840,-7894 1922.02,-7978.44 1788.21,-8336.44 1868,-8423 1895.64,-8452.98 1939.47,-8461.28 1979.07,-8461.42"/>
<polygon fill="blue" stroke="blue" points="1979.35,-8464.92 1989.3,-8461.28 1979.26,-8457.92 1979.35,-8464.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node229"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1610,-7831 1410,-7831 1410,-7795 1610,-7795 1610,-7831"/>
<text text-anchor="middle" x="1510" y="-7809.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1610.37,-7818.37C1677.2,-7818.75 1766.24,-7812.91 1840,-7786 1922.97,-7755.73 2003.13,-7686.7 2042.59,-7649.27"/>
<polygon fill="blue" stroke="blue" points="2045.14,-7651.67 2049.93,-7642.22 2040.29,-7646.62 2045.14,-7651.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1610.12,-7807.46C1695.24,-7805.07 1808.97,-7808.32 1840,-7840 1911.35,-7912.85 1811.43,-8213.16 1868,-8298 1894.27,-8337.4 1941.17,-8361.53 1982.96,-8375.98"/>
<polygon fill="blue" stroke="blue" points="1982.02,-8379.36 1992.62,-8379.19 1984.23,-8372.71 1982.02,-8379.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1610.22,-7807.37C1695.4,-7804.91 1809.18,-7808.12 1840,-7840 1885.07,-7886.63 1824.16,-8375.21 1868,-8423 1895.56,-8453.05 1939.39,-8461.36 1979.01,-8461.48"/>
<polygon fill="blue" stroke="blue" points="1979.29,-8464.98 1989.24,-8461.34 1979.19,-8457.98 1979.29,-8464.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node230"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="1624,-7777 1396,-7777 1396,-7741 1624,-7741 1624,-7777"/>
<text text-anchor="middle" x="1510" y="-7755.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.26,-7759.7C1688.5,-7757.63 1769.84,-7750.82 1840,-7732 1912.27,-7712.61 1989.63,-7671 2033.09,-7645.46"/>
<polygon fill="blue" stroke="blue" points="2035.03,-7648.38 2041.84,-7640.27 2031.45,-7642.36 2035.03,-7648.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.02,-7753.08C1707.21,-7751.42 1810.72,-7755.91 1840,-7786 1879.73,-7826.83 1836.54,-8250.5 1868,-8298 1894.14,-8337.48 1941.04,-8361.61 1982.85,-8376.05"/>
<polygon fill="blue" stroke="blue" points="1981.93,-8379.43 1992.52,-8379.25 1984.13,-8372.78 1981.93,-8379.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.1,-7752.99C1707.35,-7751.29 1810.88,-7755.76 1840,-7786 1889.14,-7837.04 1820.22,-8370.7 1868,-8423 1895.5,-8453.1 1939.33,-8461.42 1978.95,-8461.53"/>
<polygon fill="blue" stroke="blue" points="1979.24,-8465.03 1989.19,-8461.38 1979.14,-8458.03 1979.24,-8465.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node231"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="1590,-7129 1430,-7129 1430,-7093 1590,-7093 1590,-7129"/>
<text text-anchor="middle" x="1510" y="-7107.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.78,-7092.95C1663.05,-7080.71 1773.27,-7076.37 1840,-7138 1896.9,-7190.55 1840.41,-7237.63 1868,-7310 1912.6,-7426.99 2004.22,-7546.72 2046.17,-7598.06"/>
<polygon fill="blue" stroke="blue" points="2043.63,-7600.49 2052.69,-7605.98 2049.04,-7596.04 2043.63,-7600.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1590.25,-7094.41C1663.25,-7083.98 1770.46,-7081.58 1840,-7138 1873.85,-7165.46 1835.71,-7202.72 1868,-7232 2002.83,-7354.24 2152.95,-7170.63 2270,-7310 2309.77,-7357.36 2248.48,-8377.16 2290,-8423 2324.97,-8461.61 2383.46,-8468.05 2432.71,-8465"/>
<polygon fill="blue" stroke="blue" points="2433.04,-8468.49 2442.74,-8464.24 2432.51,-8461.51 2433.04,-8468.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1590.16,-7106.77C1765.82,-7099.27 2179.84,-7092.59 2270,-7190 2304.98,-7227.79 2281.2,-7602.26 2290,-7653 2339.85,-7940.52 2469.43,-8272.07 2508.61,-8368.44"/>
<polygon fill="blue" stroke="blue" points="2505.41,-8369.84 2512.43,-8377.77 2511.89,-8367.19 2505.41,-8369.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node232"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="1725.5,-8047 1294.5,-8047 1294.5,-8011 1725.5,-8011 1725.5,-8047"/>
<text text-anchor="middle" x="1510" y="-8025.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1725.63,-8025.16C1777.02,-8028.9 1822.2,-8037.73 1840,-8056 1917.81,-8135.87 1792.91,-8474.57 1868,-8557 1893.34,-8584.82 1932.52,-8594.6 1969.5,-8596.58"/>
<polygon fill="blue" stroke="blue" points="1969.75,-8600.09 1979.86,-8596.93 1969.99,-8593.09 1969.75,-8600.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.55,-8010.95C1660.3,-7997.73 1773.58,-7991.75 1840,-8056 1878.91,-8093.64 1836.76,-8253.79 1868,-8298 1895.22,-8336.52 1941.92,-8360.59 1983.35,-8375.22"/>
<polygon fill="blue" stroke="blue" points="1982.33,-8378.57 1992.92,-8378.47 1984.58,-8371.94 1982.33,-8378.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1725.83,-8025.42C1777.03,-8029.19 1822.07,-8037.97 1840,-8056 1897.67,-8114 1811.87,-8363.51 1868,-8423 1895.87,-8452.54 1939.5,-8460.86 1978.91,-8461.13"/>
<polygon fill="blue" stroke="blue" points="1979.13,-8464.63 1989.1,-8461.02 1979.06,-8457.63 1979.13,-8464.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node233"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="1658.5,-7723 1361.5,-7723 1361.5,-7687 1658.5,-7687 1658.5,-7723"/>
<text text-anchor="middle" x="1510" y="-7701.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1658.55,-7697.65C1715.48,-7693.57 1780.99,-7687.35 1840,-7678 1908.77,-7667.1 1987.51,-7646.63 2032.14,-7634.27"/>
<polygon fill="blue" stroke="blue" points="2033.24,-7637.6 2041.93,-7631.53 2031.35,-7630.85 2033.24,-7637.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1658.59,-7698.74C1733.84,-7699.03 1814.74,-7705.9 1840,-7732 1883.8,-7777.24 1833.37,-8245.41 1868,-8298 1894.14,-8337.7 1941.29,-8361.87 1983.25,-8376.27"/>
<polygon fill="blue" stroke="blue" points="1982.35,-8379.66 1992.94,-8379.46 1984.54,-8373.01 1982.35,-8379.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1658.68,-7698.66C1733.96,-7698.92 1814.85,-7705.79 1840,-7732 1893.2,-7787.45 1816.27,-8366.18 1868,-8423 1895.45,-8453.15 1939.27,-8461.47 1978.91,-8461.57"/>
<polygon fill="blue" stroke="blue" points="1979.2,-8465.07 1989.15,-8461.42 1979.1,-8458.07 1979.2,-8465.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node234"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="1622,-7993 1398,-7993 1398,-7957 1622,-7957 1622,-7993"/>
<text text-anchor="middle" x="1510" y="-7971.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.35,-7969.08C1705.85,-7967.31 1810.59,-7971.65 1840,-8002 1882.97,-8046.34 1826.54,-8511.24 1868,-8557 1893.27,-8584.89 1932.43,-8594.68 1969.43,-8596.64"/>
<polygon fill="blue" stroke="blue" points="1969.68,-8600.16 1979.79,-8597 1969.92,-8593.16 1969.68,-8600.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.42,-7969.43C1705.64,-7967.88 1809.98,-7972.35 1840,-8002 1887.01,-8048.43 1830.43,-8243.65 1868,-8298 1894.82,-8336.81 1941.5,-8360.88 1983.02,-8375.45"/>
<polygon fill="blue" stroke="blue" points="1982.02,-8378.81 1992.61,-8378.69 1984.25,-8372.18 1982.02,-8378.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.22,-7969.21C1705.64,-7967.51 1810.35,-7971.88 1840,-8002 1905.79,-8068.81 1803.98,-8354.49 1868,-8423 1895.84,-8452.79 1939.69,-8461.08 1979.25,-8461.25"/>
<polygon fill="blue" stroke="blue" points="1979.52,-8464.75 1989.47,-8461.12 1979.43,-8457.75 1979.52,-8464.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node235"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="1619,-7669 1401,-7669 1401,-7633 1619,-7633 1619,-7669"/>
<text text-anchor="middle" x="1510" y="-7647.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.06,-7645.76C1745.89,-7639.61 1949.37,-7629.75 2031.69,-7625.76"/>
<polygon fill="blue" stroke="blue" points="2031.98,-7629.25 2041.8,-7625.27 2031.64,-7622.26 2031.98,-7629.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.01,-7645.12C1703.06,-7643.13 1810.27,-7647.16 1840,-7678 1887.86,-7727.65 1830.2,-8240.32 1868,-8298 1894.05,-8337.75 1941.2,-8361.93 1983.18,-8376.31"/>
<polygon fill="blue" stroke="blue" points="1982.29,-8379.71 1992.88,-8379.5 1984.47,-8373.05 1982.29,-8379.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.07,-7645.06C1703.16,-7643.04 1810.39,-7647.04 1840,-7678 1897.26,-7737.86 1812.32,-8361.67 1868,-8423 1895.4,-8453.19 1939.22,-8461.51 1978.87,-8461.61"/>
<polygon fill="blue" stroke="blue" points="1979.17,-8465.1 1989.11,-8461.46 1979.06,-8458.11 1979.17,-8465.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node236"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="1603.5,-7453 1416.5,-7453 1416.5,-7417 1603.5,-7417 1603.5,-7453"/>
<text text-anchor="middle" x="1510" y="-7431.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1592.69,-7416.99C1666.36,-7405.88 1773.12,-7403.31 1840,-7462 1884.42,-7500.98 1825.11,-7551.34 1868,-7592 1911.95,-7633.66 1987.26,-7633.75 2031.86,-7629.35"/>
<polygon fill="blue" stroke="blue" points="2032.41,-7632.81 2041.96,-7628.22 2031.64,-7625.85 2032.41,-7632.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node237"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="1633.5,-7399 1386.5,-7399 1386.5,-7363 1633.5,-7363 1633.5,-7399"/>
<text text-anchor="middle" x="1510" y="-7377.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587.86,-7362.97C1662.25,-7350.49 1773.27,-7345.73 1840,-7408 1900.48,-7464.43 1809.73,-7533.29 1868,-7592 1910.77,-7635.09 1986.82,-7634.62 2031.81,-7629.74"/>
<polygon fill="blue" stroke="blue" points="2032.49,-7633.18 2042,-7628.5 2031.65,-7626.23 2032.49,-7633.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node238"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="1656,-7615 1364,-7615 1364,-7579 1656,-7579 1656,-7615"/>
<text text-anchor="middle" x="1510" y="-7593.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1656.25,-7604.04C1782.52,-7610.16 1956.61,-7618.6 2031.42,-7622.23"/>
<polygon fill="blue" stroke="blue" points="2031.56,-7625.74 2041.72,-7622.73 2031.9,-7618.75 2031.56,-7625.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1656,-7590.66C1732.02,-7590.77 1814.54,-7597.49 1840,-7624 1891.92,-7678.06 1827.03,-8235.24 1868,-8298 1893.98,-8337.8 1941.13,-8361.97 1983.12,-8376.35"/>
<polygon fill="blue" stroke="blue" points="1982.23,-8379.74 1992.83,-8379.54 1984.41,-8373.09 1982.23,-8379.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1656.06,-7590.6C1732.11,-7590.69 1814.63,-7597.41 1840,-7624 1901.33,-7688.27 1808.38,-8357.15 1868,-8423 1895.37,-8453.22 1939.18,-8461.55 1978.83,-8461.64"/>
<polygon fill="blue" stroke="blue" points="1979.13,-8465.14 1989.08,-8461.48 1979.03,-8458.14 1979.13,-8465.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node239"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="1611.5,-7561 1408.5,-7561 1408.5,-7525 1611.5,-7525 1611.5,-7561"/>
<text text-anchor="middle" x="1510" y="-7539.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge528" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.53,-7536.48C1678.48,-7535.65 1767.18,-7541.43 1840,-7570 1854.73,-7575.78 1853.5,-7585.66 1868,-7592 1921.79,-7615.53 1990.49,-7621.98 2031.77,-7623.62"/>
<polygon fill="blue" stroke="blue" points="2031.79,-7627.12 2041.9,-7623.95 2032.02,-7620.12 2031.79,-7627.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge527" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.53,-7537.26C1696.62,-7534.83 1809.48,-7538.13 1840,-7570 1895.98,-7628.47 1823.85,-8230.15 1868,-8298 1893.92,-8337.84 1941.06,-8362.02 1983.07,-8376.38"/>
<polygon fill="blue" stroke="blue" points="1982.19,-8379.78 1992.78,-8379.57 1984.37,-8373.13 1982.19,-8379.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge529" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.58,-7537.22C1696.69,-7534.76 1809.57,-7538.04 1840,-7570 1905.39,-7638.68 1804.43,-8352.63 1868,-8423 1895.33,-8453.25 1939.14,-8461.58 1978.8,-8461.67"/>
<polygon fill="blue" stroke="blue" points="1979.11,-8465.16 1989.05,-8461.51 1979,-8458.16 1979.11,-8465.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node240"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="1645.5,-7507 1374.5,-7507 1374.5,-7471 1645.5,-7471 1645.5,-7507"/>
<text text-anchor="middle" x="1510" y="-7485.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge627" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1610.45,-7470.96C1681.4,-7463.85 1775.32,-7466.85 1840,-7516 1868.66,-7537.78 1840.2,-7569.14 1868,-7592 1914.42,-7630.17 1988,-7631.64 2031.78,-7628.4"/>
<polygon fill="blue" stroke="blue" points="2032.31,-7631.86 2041.98,-7627.52 2031.71,-7624.89 2032.31,-7631.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge626" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.87,-7482.63C1724.58,-7482.13 1813.48,-7488.23 1840,-7516 1900.05,-7578.88 1820.68,-8225.06 1868,-8298 1893.92,-8337.95 1941.19,-8362.14 1983.26,-8376.49"/>
<polygon fill="blue" stroke="blue" points="1982.4,-8379.89 1992.99,-8379.67 1984.57,-8373.24 1982.4,-8379.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge628" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.92,-7482.59C1724.65,-7482.07 1813.55,-7488.16 1840,-7516 1909.45,-7589.09 1800.48,-8348.12 1868,-8423 1895.3,-8453.28 1939.11,-8461.61 1978.78,-8461.69"/>
<polygon fill="blue" stroke="blue" points="1979.08,-8465.19 1989.03,-8461.53 1978.97,-8458.19 1979.08,-8465.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node241"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="1629.5,-7939 1390.5,-7939 1390.5,-7903 1629.5,-7903 1629.5,-7939"/>
<text text-anchor="middle" x="1510" y="-7917.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge642" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.69,-7932.77C1695.1,-7934.13 1775.81,-7927.07 1840,-7894 1947.76,-7838.49 2024.99,-7707.84 2054.63,-7651.1"/>
<polygon fill="blue" stroke="blue" points="2057.84,-7652.52 2059.29,-7642.02 2051.61,-7649.32 2057.84,-7652.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge641" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.8,-7915.18C1711.79,-7913.97 1811.05,-7919 1840,-7948 1895.12,-8003.23 1824.1,-8233.49 1868,-8298 1894.64,-8337.15 1941.56,-8361.27 1983.26,-8375.78"/>
<polygon fill="blue" stroke="blue" points="1982.3,-8379.15 1992.9,-8379 1984.52,-8372.51 1982.3,-8379.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge643" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.55,-7915.01C1711.71,-7913.69 1811.31,-7918.64 1840,-7948 1913.9,-8023.62 1796.1,-8345.47 1868,-8423 1895.72,-8452.9 1939.57,-8461.19 1979.15,-8461.35"/>
<polygon fill="blue" stroke="blue" points="1979.43,-8464.84 1989.38,-8461.21 1979.33,-8457.84 1979.43,-8464.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node242"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="1654,-7075 1366,-7075 1366,-7039 1654,-7039 1654,-7075"/>
<text text-anchor="middle" x="1510" y="-7053.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge662" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654,-7050.45C1730.71,-7050.36 1814.6,-7056.95 1840,-7084 1896.03,-7143.67 1814,-8495.49 1868,-8557 1892.93,-8585.4 1932.25,-8595.22 1969.45,-8597.07"/>
<polygon fill="blue" stroke="blue" points="1969.78,-8600.58 1979.88,-8597.39 1969.99,-8593.58 1969.78,-8600.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge663" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1638.07,-7038.99C1703.66,-7036.32 1781.88,-7044.11 1840,-7084 1863.6,-7100.2 1845.57,-7124.21 1868,-7142 2011.44,-7255.79 2154.35,-7090.06 2270,-7232 2311.8,-7283.3 2245.61,-8373.92 2290,-8423 2324.95,-8461.63 2383.44,-8468.07 2432.69,-8465.02"/>
<polygon fill="blue" stroke="blue" points="2433.02,-8468.5 2442.73,-8464.26 2432.49,-8461.52 2433.02,-8468.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge661" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.08,-7043.37C1850.13,-7028.18 2187.45,-7015.74 2270,-7100 2291.51,-7121.96 2284.85,-7622.69 2290,-7653 2338.84,-7940.69 2469.12,-8272.13 2508.54,-8368.45"/>
<polygon fill="blue" stroke="blue" points="2505.34,-8369.86 2512.38,-8377.78 2511.81,-8367.2 2505.34,-8369.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node243"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="1579.5,-7021 1440.5,-7021 1440.5,-6985 1579.5,-6985 1579.5,-7021"/>
<text text-anchor="middle" x="1510" y="-6999.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge697" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1579.5,-6987.5C1652.78,-6975.24 1768.13,-6968.99 1840,-7030 1879.12,-7063.21 1851.9,-7093.28 1868,-7142 1926.64,-7319.46 2020.65,-7523.92 2054.94,-7596.62"/>
<polygon fill="blue" stroke="blue" points="2051.93,-7598.44 2059.37,-7605.98 2058.26,-7595.45 2051.93,-7598.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge696" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1579.8,-7005.18C1646.66,-7008.12 1750.87,-7014.85 1840,-7030 2034.7,-7063.09 2148.01,-6986.69 2270,-7142 2313.96,-7197.97 2242.28,-8370.19 2290,-8423 2324.99,-8461.72 2383.63,-8468.12 2432.94,-8465.01"/>
<polygon fill="blue" stroke="blue" points="2433.29,-8468.5 2442.99,-8464.24 2432.75,-8461.52 2433.29,-8468.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge695" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1579.78,-7000.42C1757.58,-6994.46 2222.01,-6983.72 2270,-7032 2294.33,-7056.48 2284.29,-7618.96 2290,-7653 2338.27,-7940.79 2468.94,-8272.16 2508.5,-8368.45"/>
<polygon fill="blue" stroke="blue" points="2505.3,-8369.87 2512.35,-8377.78 2511.77,-8367.2 2505.3,-8369.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge726" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2060.96,-7642.24C2027.11,-7720.21 1895.97,-8033.92 1854,-8307 1845.87,-8359.93 1828.34,-8500.99 1854,-8548 1875.76,-8587.85 1924.17,-8598.97 1969.56,-8599.5"/>
<polygon fill="blue" stroke="blue" points="1969.81,-8603 1979.79,-8599.45 1969.78,-8596 1969.81,-8603"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge725" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2074.82,-7642.02C2106.33,-7759.89 2282.05,-8416.18 2290,-8423 2328.58,-8456.12 2385.17,-8463.11 2432.57,-8461.7"/>
<polygon fill="blue" stroke="blue" points="2433,-8465.18 2442.84,-8461.26 2432.7,-8458.19 2433,-8465.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge727" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2080.68,-7642.32C2140.41,-7744.8 2432.99,-8246.74 2504.31,-8369.07"/>
<polygon fill="blue" stroke="blue" points="2501.36,-8370.97 2509.42,-8377.85 2507.41,-8367.45 2501.36,-8370.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node245"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="1691,-8263 1329,-8263 1329,-8227 1691,-8227 1691,-8263"/>
<text text-anchor="middle" x="1510" y="-8241.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge772" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1691.09,-8234.03C1745.94,-8240.2 1801.76,-8257.72 1840,-8298 1919.71,-8381.97 1787.83,-8473.46 1868,-8557 1893.89,-8583.98 1932.84,-8593.7 1969.52,-8595.86"/>
<polygon fill="blue" stroke="blue" points="1969.66,-8599.37 1979.79,-8596.27 1969.94,-8592.37 1969.66,-8599.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge771" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1672.98,-8263C1726.76,-8271.11 1786.53,-8282.46 1840,-8298 1906.44,-8317.31 1979.23,-8350.95 2024.27,-8373.35"/>
<polygon fill="blue" stroke="blue" points="2022.94,-8376.6 2033.45,-8377.95 2026.08,-8370.34 2022.94,-8376.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge773" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1691.07,-8236.93C1744.94,-8243.5 1800.19,-8260.53 1840,-8298 1881.46,-8337.02 1826.05,-8384.51 1868,-8423 1897.51,-8450.07 1940.53,-8458.35 1979.12,-8459.22"/>
<polygon fill="blue" stroke="blue" points="1979.32,-8462.72 1989.34,-8459.29 1979.37,-8455.72 1979.32,-8462.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node248"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="2899.5,-8468 2845.5,-8468 2845.5,-8432 2899.5,-8432 2899.5,-8468"/>
<text text-anchor="middle" x="2872.5" y="-8446.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2599.13,-8450C2672.6,-8450 2779.95,-8450 2835.39,-8450"/>
<polygon fill="blue" stroke="blue" points="2835.43,-8453.5 2845.43,-8450 2835.43,-8446.5 2835.43,-8453.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2595.57,-8402.64C2640.85,-8407.23 2699.99,-8414.1 2752,-8423 2780.12,-8427.81 2811.59,-8435 2835.17,-8440.74"/>
<polygon fill="blue" stroke="blue" points="2834.53,-8444.19 2845.08,-8443.19 2836.21,-8437.4 2834.53,-8444.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2879.43,-8468.11C2895.07,-8516.4 2938.13,-8652.45 2965,-8768 3032.79,-9059.57 3086.02,-9418.96 3100.55,-9520.88"/>
<polygon fill="blue" stroke="blue" points="3097.12,-9521.57 3101.99,-9530.98 3104.05,-9520.59 3097.12,-9521.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge566" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2145.07,-8396C2225.36,-8396 2352.42,-8396 2435.99,-8396"/>
<polygon fill="blue" stroke="blue" points="2436.22,-8399.5 2446.22,-8396 2436.22,-8392.5 2436.22,-8399.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge693" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2156.1,-8513.77C2195.61,-8513.41 2240.19,-8505.39 2270,-8477 2305.35,-8443.34 2252.47,-8400.22 2290,-8369 2405.69,-8272.77 2865.6,-8310.02 2965,-8423 3008.92,-8472.91 2992.88,-8654.01 3001,-8720 3039.66,-9034.22 3087.64,-9415.28 3100.94,-9520.77"/>
<polygon fill="blue" stroke="blue" points="3097.49,-9521.43 3102.22,-9530.92 3104.44,-9520.56 3097.49,-9521.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge705" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2148.64,-8450C2228.09,-8450 2350.55,-8450 2432.89,-8450"/>
<polygon fill="blue" stroke="blue" points="2432.98,-8453.5 2442.98,-8450 2432.98,-8446.5 2432.98,-8453.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<g id="a_node252"><a xlink:title="fn to_ristretto_pt(b: &amp;[u8]) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;CompressedRistretto::from_slice(b).ok()?.decompress() }">
<polygon fill="white" stroke="black" points="3805.5,-677 3692.5,-677 3692.5,-641 3805.5,-641 3805.5,-677"/>
<text text-anchor="middle" x="3749" y="-655.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M3757.37,-677.05C3783.02,-740.94 3868.59,-962.78 3900,-1155 3910.65,-1220.17 3893.42,-2292.53 3936,-2343 3953.78,-2364.07 3983.06,-2371.55 4009.67,-2373.45"/>
<polygon fill="blue" stroke="blue" points="4009.56,-2376.95 4019.71,-2373.92 4009.89,-2369.95 4009.56,-2376.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<g id="a_node253"><a xlink:title="fn auth_secret(input: &amp;[u8; 64], auth_pt: &amp;RistrettoPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;Kdf::make( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_SVR_MasterAuthorizationKey_20240823&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;auth_pt.compress().to_bytes(), ...">
<polygon fill="white" stroke="black" points="3797.5,-591 3700.5,-591 3700.5,-555 3797.5,-555 3797.5,-591"/>
<text text-anchor="middle" x="3749" y="-569.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_secret</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3797.78,-578.02C3832.37,-584.41 3876.95,-598.95 3900,-632 3952.66,-707.53 3876.93,-2218.37 3936,-2289 3955.66,-2312.51 3989.62,-2319.13 4018.37,-2319.95"/>
<polygon fill="blue" stroke="blue" points="4018.67,-2323.45 4028.69,-2320 4018.71,-2316.45 4018.67,-2323.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node254"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="2944,-577 2801,-577 2801,-541 2944,-541 2944,-577"/>
<text text-anchor="middle" x="2872.5" y="-555.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node255"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3441,-677 3367,-677 3367,-641 3441,-641 3441,-677"/>
<text text-anchor="middle" x="3404" y="-655.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2931.85,-577.03C2953.44,-583.29 2978.2,-589.98 3001,-595 3128.72,-623.1 3281.84,-644.01 3356.91,-653.45"/>
<polygon fill="blue" stroke="blue" points="3356.62,-656.94 3366.97,-654.71 3357.48,-650 3356.62,-656.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2944.06,-542.5C2981.34,-533.79 3026.01,-523.35 3058.74,-515.7"/>
<polygon fill="blue" stroke="blue" points="3059.55,-519.1 3068.49,-513.42 3057.96,-512.29 3059.55,-519.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<g id="a_node260"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore1(&amp;mut self, req_bytes: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.inner &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3142.5,-469 3068.5,-469 3068.5,-433 3142.5,-433 3142.5,-469"/>
<text text-anchor="middle" x="3105.5" y="-447.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2897.15,-540.78C2921.84,-522.54 2962.29,-494.85 3001,-478 3019.1,-470.12 3040.02,-464.13 3058.29,-459.82"/>
<polygon fill="blue" stroke="blue" points="3059.15,-463.21 3068.13,-457.59 3057.61,-456.38 3059.15,-463.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<g id="a_node261"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create(&amp;mut self, req_bytes: &amp;[u8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.versions.clear(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3135,-711 3076,-711 3076,-675 3135,-675 3135,-711"/>
<text text-anchor="middle" x="3105.5" y="-689.3" font-family="Helvetica,sans-Serif" font-size="14.00">create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.3,-577.1C2924.66,-594.58 2964.73,-621.36 3001,-642 3022.34,-654.15 3046.98,-666.36 3066.86,-675.78"/>
<polygon fill="blue" stroke="blue" points="3065.37,-678.95 3075.91,-680.04 3068.35,-672.62 3065.37,-678.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2944.23,-576.72C2962.59,-580.56 2982.43,-584.06 3001,-586 3096.92,-596.04 3122.13,-596.5 3218,-586 3267.92,-580.53 3324.08,-567.01 3361.3,-556.98"/>
<polygon fill="blue" stroke="blue" points="3362.55,-560.27 3371.27,-554.25 3360.7,-553.51 3362.55,-560.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2885.64,-540.62C2905.95,-511.36 2949.68,-454.39 3001,-424 3021.5,-411.86 3047.46,-405.11 3068.25,-401.39"/>
<polygon fill="blue" stroke="blue" points="3068.98,-404.82 3078.29,-399.75 3067.86,-397.91 3068.98,-404.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2944.06,-559C2985.13,-559 3035.17,-559 3068.33,-559"/>
<polygon fill="blue" stroke="blue" points="3068.47,-562.5 3078.47,-559 3068.47,-555.5 3068.47,-562.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3441.06,-659C3498.19,-659 3610.38,-659 3682.14,-659"/>
<polygon fill="blue" stroke="blue" points="3682.43,-662.5 3692.43,-659 3682.43,-655.5 3682.43,-662.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<g id="a_node256"><a xlink:title="fn input_hash_pt(input: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(input) }">
<polygon fill="white" stroke="black" points="3806,-436 3692,-436 3692,-400 3806,-400 3806,-436"/>
<text text-anchor="middle" x="3749" y="-414.3" font-family="Helvetica,sans-Serif" font-size="14.00">input_hash_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M3784.67,-436.16C3820.77,-457.19 3875.41,-495.52 3900,-546 3941.59,-631.38 3926.72,-1305.48 3936,-1400 3968.41,-1730.03 4043.05,-2126.17 4063.97,-2233.84"/>
<polygon fill="blue" stroke="blue" points="4060.58,-2234.75 4065.93,-2243.9 4067.45,-2233.41 4060.58,-2234.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<g id="a_node257"><a xlink:title="fn auth_pt(input: &amp;[u8; 64], k_oprf: &amp;Scalar) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;input_hash_pt(input) * k_oprf }">
<polygon fill="white" stroke="black" points="3438.5,-455 3369.5,-455 3369.5,-419 3438.5,-419 3438.5,-455"/>
<text text-anchor="middle" x="3404" y="-433.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3438.51,-435.14C3494.7,-432.03 3608.9,-425.71 3681.76,-421.67"/>
<polygon fill="blue" stroke="blue" points="3681.97,-425.16 3691.76,-421.12 3681.58,-418.17 3681.97,-425.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3142.57,-505.54C3167.03,-503.92 3198.38,-497.67 3218,-478 3255.76,-440.14 3204.12,-394.24 3246,-361 3302.92,-315.83 3848.14,-308.1 3900,-359 3976.53,-434.12 3867.33,-2206.63 3936,-2289 3955.69,-2312.62 3989.82,-2319.21 4018.64,-2319.98"/>
<polygon fill="blue" stroke="blue" points="4018.97,-2323.48 4028.98,-2320.02 4019,-2316.48 4018.97,-2323.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3142.5,-506.11C3166.16,-508.54 3196.59,-515.08 3218,-532 3239.52,-549.01 3223.66,-571.09 3246,-587 3305.21,-629.17 3498.06,-621.55 3570,-632 3607.14,-637.4 3648.6,-643.67 3682.16,-648.81"/>
<polygon fill="blue" stroke="blue" points="3681.89,-652.31 3692.31,-650.37 3682.95,-645.39 3681.89,-652.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3142.69,-504.46C3166.59,-502.29 3197.21,-495.83 3218,-478 3242.81,-456.72 3218.84,-428.19 3246,-410 3281.26,-386.39 3553.33,-403.33 3681.55,-412.79"/>
<polygon fill="blue" stroke="blue" points="3681.41,-416.29 3691.64,-413.54 3681.93,-409.31 3681.41,-416.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node262"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3479,-509 3329,-509 3329,-473 3479,-473 3479,-509"/>
<text text-anchor="middle" x="3404" y="-487.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3142.56,-503.3C3186.02,-501.25 3260.45,-497.73 3318.65,-494.98"/>
<polygon fill="blue" stroke="blue" points="3319.12,-498.46 3328.94,-494.5 3318.79,-491.47 3319.12,-498.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node259"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="3431,-731 3377,-731 3377,-695 3431,-695 3431,-731"/>
<text text-anchor="middle" x="3404" y="-709.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3431.06,-708.9C3484.1,-700.55 3606.01,-681.35 3682.23,-669.35"/>
<polygon fill="blue" stroke="blue" points="3682.88,-672.8 3692.21,-667.78 3681.79,-665.88 3682.88,-672.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M3142.7,-451.94C3167.4,-450.54 3198.96,-444.37 3218,-424 3268.19,-370.3 3189.8,-308.37 3246,-261 3468.25,-73.67 3691.25,-58.74 3900,-261 3945.47,-305.05 3930.14,-1336.96 3936,-1400 3966.67,-1730.19 4042.55,-2126.22 4063.86,-2233.85"/>
<polygon fill="blue" stroke="blue" points="4060.47,-2234.78 4065.85,-2243.9 4067.34,-2233.41 4060.47,-2234.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3142.64,-451.33C3166.99,-449.6 3198.15,-443.3 3218,-424 3252.01,-390.93 3208.35,-349.86 3246,-321 3361.34,-232.57 3796.3,-218.18 3900,-320 3978.07,-396.65 3865.96,-2204.95 3936,-2289 3955.68,-2312.62 3989.81,-2319.21 4018.64,-2319.98"/>
<polygon fill="blue" stroke="blue" points="4018.97,-2323.48 4028.98,-2320.02 4018.99,-2316.48 4018.97,-2323.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3142.76,-450.84C3167,-452.66 3197.99,-459.01 3218,-478 3249.61,-508.01 3211.66,-545.14 3246,-572 3274.39,-594.2 3535,-578.42 3570,-587 3583.33,-590.27 3585.39,-594.6 3598,-600 3628.26,-612.96 3662.38,-626.47 3690.43,-637.28"/>
<polygon fill="blue" stroke="blue" points="3689.49,-640.67 3700.08,-640.99 3692,-634.14 3689.49,-640.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3135.2,-694.94C3189.49,-698.6 3307.12,-706.53 3366.76,-710.56"/>
<polygon fill="blue" stroke="blue" points="3366.64,-714.06 3376.85,-711.24 3367.11,-707.07 3366.64,-714.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge552" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3479.35,-500.94C3507.87,-505.34 3540.61,-511.09 3570,-518 3610.69,-527.57 3655.67,-541.49 3690.23,-552.94"/>
<polygon fill="blue" stroke="blue" points="3689.55,-556.4 3700.14,-556.25 3691.76,-549.76 3689.55,-556.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge568" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3436.65,-547.58C3494.27,-552.29 3617.05,-562.31 3690.03,-568.27"/>
<polygon fill="blue" stroke="blue" points="3690.17,-571.79 3700.42,-569.12 3690.74,-564.81 3690.17,-571.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge636" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3116.37,-378.82C3135.9,-345.04 3183.06,-273.54 3246,-246 3512.29,-129.48 3692.66,-42.29 3900,-246 3980.97,-325.56 3863.35,-2201.77 3936,-2289 3955.68,-2312.63 3989.81,-2319.22 4018.63,-2319.98"/>
<polygon fill="blue" stroke="blue" points="4018.96,-2323.48 4028.97,-2320.02 4018.99,-2316.48 4018.96,-2323.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge635" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3132.72,-396.51C3160.76,-396.02 3206.52,-395.28 3246,-395 3390,-393.97 3426.3,-385.75 3570,-395 3607.06,-397.38 3648.19,-402.53 3681.57,-407.36"/>
<polygon fill="blue" stroke="blue" points="3681.26,-410.85 3691.66,-408.84 3682.28,-403.92 3681.26,-410.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge750" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3132.81,-560.01C3158.12,-559.49 3195.74,-554.53 3218,-532 3257.1,-492.43 3203.43,-445.82 3246,-410 3301.62,-363.19 3848.11,-340.08 3900,-391 3975.28,-464.86 3868.45,-2208.01 3936,-2289 3955.69,-2312.61 3989.82,-2319.21 4018.64,-2319.97"/>
<polygon fill="blue" stroke="blue" points="4018.97,-2323.48 4028.98,-2320.01 4019,-2316.48 4018.97,-2323.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge752" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3132.68,-562.16C3160.67,-565.36 3206.4,-570.12 3246,-572 3406.69,-579.63 3596.63,-576.78 3690.11,-574.59"/>
<polygon fill="blue" stroke="blue" points="3690.29,-578.09 3700.21,-574.35 3690.12,-571.09 3690.29,-578.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="edge753" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3132.51,-559.17C3157.24,-557.97 3194.11,-552.49 3218,-532 3242.81,-510.72 3220.49,-484.43 3246,-464 3277.69,-438.62 3324.67,-433.47 3358.98,-433.69"/>
<polygon fill="blue" stroke="blue" points="3359.11,-437.2 3369.19,-433.92 3359.27,-430.2 3359.11,-437.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge751" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3132.68,-554.4C3155.59,-549.97 3189.57,-542.4 3218,-532 3231.07,-527.22 3232.78,-522.34 3246,-518 3269.11,-510.42 3294.87,-504.86 3318.73,-500.83"/>
<polygon fill="blue" stroke="blue" points="3319.51,-504.25 3328.82,-499.19 3318.39,-497.34 3319.51,-504.25"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node266"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2140.5,-432 1997.5,-432 1997.5,-396 2140.5,-396 2140.5,-432"/>
<text text-anchor="middle" x="2069" y="-410.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node268"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2585,-432 2457,-432 2457,-396 2585,-396 2585,-432"/>
<text text-anchor="middle" x="2521" y="-410.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2140.81,-414C2224.29,-414 2362.34,-414 2446.84,-414"/>
<polygon fill="blue" stroke="blue" points="2446.87,-417.5 2456.87,-414 2446.87,-410.5 2446.87,-417.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node269"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="2584,-486 2458,-486 2458,-450 2584,-450 2584,-486"/>
<text text-anchor="middle" x="2521" y="-464.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2140.83,-422.79C2183.94,-428.11 2240.14,-435.01 2290,-441 2342.7,-447.33 2402.21,-454.31 2447.49,-459.59"/>
<polygon fill="blue" stroke="blue" points="2447.18,-463.07 2457.51,-460.75 2447.99,-456.12 2447.18,-463.07"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2121.21,-395.86C2165.29,-381.26 2230.95,-361.91 2290,-354 2391.76,-340.37 2677.87,-282.97 2752,-354 2789.66,-390.09 2739.44,-782.25 2772,-823 2782.18,-835.74 2797.71,-842.83 2813.5,-846.68"/>
<polygon fill="blue" stroke="blue" points="2812.82,-850.11 2823.32,-848.68 2814.22,-843.25 2812.82,-850.11"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2140.64,-403.1C2183.69,-397.02 2239.88,-390.06 2290,-387 2392.48,-380.74 2677.94,-315.9 2752,-387 2791.31,-424.74 2738.02,-834.4 2772,-877 2786.93,-895.72 2813.44,-902.25 2835.34,-904.22"/>
<polygon fill="blue" stroke="blue" points="2835.14,-907.71 2845.34,-904.84 2835.57,-900.72 2835.14,-907.71"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2099.59,-395.96C2140.59,-372.12 2217.82,-331.35 2290,-316 2390.42,-294.64 2677.81,-245.03 2752,-316 2788.17,-350.6 2741.27,-726.5 2772,-766 2786.82,-785.05 2813.34,-792.39 2835.27,-795.04"/>
<polygon fill="blue" stroke="blue" points="2834.99,-798.53 2845.28,-795.98 2835.65,-791.56 2834.99,-798.53"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node267"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1547.5,-432 1472.5,-432 1472.5,-396 1547.5,-396 1547.5,-432"/>
<text text-anchor="middle" x="1510" y="-410.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1547.55,-414C1636.18,-414 1864.27,-414 1986.99,-414"/>
<polygon fill="blue" stroke="blue" points="1987.08,-417.5 1997.08,-414 1987.08,-410.5 1987.08,-417.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2585.02,-401.67C2637.51,-395.43 2710.21,-396.83 2752,-441 2801.73,-493.56 2727.08,-709.27 2772,-766 2786.99,-784.93 2813.49,-792.26 2835.38,-794.96"/>
<polygon fill="blue" stroke="blue" points="2835.08,-798.44 2845.36,-795.91 2835.74,-791.48 2835.08,-798.44"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2584.12,-463.55C2637.34,-463.49 2711.6,-473.06 2752,-521 2803.06,-581.59 2722.12,-815.44 2772,-877 2787.01,-895.52 2813.34,-902.08 2835.14,-904.11"/>
<polygon fill="blue" stroke="blue" points="2835.21,-907.62 2845.41,-904.77 2835.66,-900.64 2835.21,-907.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().</title>
<g id="a_node270"><a xlink:title=" &#160;&#160;&#160;fn generate_points() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Signal_Username_20230130_Constant_Points_Generate&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for p in BASE_POINTS.iter() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(&amp;sho.get_point(),...">
<polygon fill="white" stroke="black" points="3169.5,-5529 3041.5,-5529 3041.5,-5493 3169.5,-5493 3169.5,-5529"/>
<text text-anchor="middle" x="3105.5" y="-5507.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="node375" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<g id="a_node375"><a xlink:title=" &#160;&#160;&#160;pub fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3444.5,-2578 3363.5,-2578 3363.5,-2542 3444.5,-2542 3444.5,-2578"/>
<text text-anchor="middle" x="3404" y="-2556.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3169.58,-5507.02C3188.07,-5502.56 3206.41,-5494.23 3218,-5479 3266.65,-5415.07 3193.93,-2648.18 3246,-2587 3271.61,-2556.9 3317.55,-2551.99 3353.14,-2553.53"/>
<polygon fill="blue" stroke="blue" points="3353.15,-2557.04 3363.35,-2554.15 3353.58,-2550.05 3353.15,-2557.04"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node271"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="2648,-814 2394,-814 2394,-778 2648,-778 2648,-814"/>
<text text-anchor="middle" x="2521" y="-792.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2648.28,-808.4C2682.08,-812.38 2718.51,-817.27 2752,-823 2772.17,-826.45 2794.07,-831.13 2813.53,-835.61"/>
<polygon fill="blue" stroke="blue" points="2812.94,-839.07 2823.47,-837.93 2814.53,-832.25 2812.94,-839.07"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2648.14,-786.86C2684.84,-790.16 2722.85,-800.07 2752,-823 2772.12,-838.82 2753.11,-859.73 2772,-877 2789.07,-892.6 2814.24,-899.33 2835,-902.17"/>
<polygon fill="blue" stroke="blue" points="2834.76,-905.67 2845.08,-903.3 2835.54,-898.71 2834.76,-905.67"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2648.18,-796C2714.47,-796 2790.89,-796 2834.96,-796"/>
<polygon fill="blue" stroke="blue" points="2835.18,-799.5 2845.18,-796 2835.18,-792.5 2835.18,-799.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M2921.6,-855.37C2937.08,-859.23 2953.24,-865.81 2965,-877 3000.12,-910.43 2963.46,-949.3 3001,-980 3198.61,-1141.57 3395.07,-872.11 3570,-1058 3626.51,-1118.05 3561.92,-1353.86 3598,-1428 3677.57,-1591.5 3822.01,-1539.75 3900,-1704 3930.5,-1768.24 3889.44,-2289.25 3936,-2343 3954.05,-2363.84 3983.35,-2371.3 4009.92,-2373.24"/>
<polygon fill="blue" stroke="blue" points="4009.77,-2376.74 4019.93,-2373.73 4010.11,-2369.75 4009.77,-2376.74"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2921.69,-854.69C2937.36,-858.48 2953.62,-865.19 2965,-877 3009.88,-923.57 2984.6,-955.44 3001,-1018 3095.16,-1377.27 3165.44,-1457.33 3218,-1825 3259.33,-2114.13 3237.04,-2847.07 3246,-3139 3295.89,-4764.85 3389.42,-6768.95 3401.67,-7028.79"/>
<polygon fill="blue" stroke="blue" points="3398.18,-7029.08 3402.14,-7038.9 3405.17,-7028.75 3398.18,-7029.08"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2897.43,-922.3C2922.01,-940.09 2962.09,-966.37 3001,-980 3121.45,-1022.19 3482.53,-965.06 3570,-1058 3626.51,-1118.05 3561.92,-1353.86 3598,-1428 3677.57,-1591.5 3821.58,-1539.95 3900,-1704 3956.17,-1821.51 3850.48,-2190.77 3936,-2289 3956.12,-2312.11 3990.08,-2318.74 4018.71,-2319.66"/>
<polygon fill="blue" stroke="blue" points="4018.95,-2323.16 4028.98,-2319.76 4019.02,-2316.16 4018.95,-2323.16"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node274"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2666.5,-868 2375.5,-868 2375.5,-832 2666.5,-832 2666.5,-868"/>
<text text-anchor="middle" x="2521" y="-846.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.68,-850C2718.16,-850 2773.23,-850 2813.29,-850"/>
<polygon fill="blue" stroke="blue" points="2813.39,-853.5 2823.39,-850 2813.39,-846.5 2813.39,-853.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.8,-864.64C2695.13,-868.17 2724.56,-872.3 2752,-877 2780.12,-881.81 2811.59,-889 2835.17,-894.74"/>
<polygon fill="blue" stroke="blue" points="2834.53,-898.19 2845.08,-897.19 2836.21,-891.4 2834.53,-898.19"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.8,-835.36C2695.13,-831.83 2724.56,-827.7 2752,-823 2780.12,-818.19 2811.59,-811 2835.17,-805.26"/>
<polygon fill="blue" stroke="blue" points="2836.21,-808.6 2845.08,-802.81 2834.53,-801.81 2836.21,-808.6"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge571" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2899.54,-794.01C3003.99,-787.62 3395.27,-779.27 3570,-995 3626.78,-1065.11 3534.96,-1335.47 3598,-1400 3645.1,-1448.21 3853.56,-1379.15 3900,-1428 3965.97,-1497.4 3873.84,-2216.17 3936,-2289 3955.89,-2312.31 3989.85,-2318.94 4018.54,-2319.8"/>
<polygon fill="blue" stroke="blue" points="4018.81,-2323.3 4028.84,-2319.88 4018.86,-2316.3 4018.81,-2323.3"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge572" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.88,-795.85C2921.21,-797.3 2950.05,-803.16 2965,-823 3004.63,-875.59 2998.47,-5498.2 3001,-5564 3023.75,-6156.07 3088.1,-6878.03 3101.88,-7028.66"/>
<polygon fill="blue" stroke="blue" points="3098.42,-7029.24 3102.82,-7038.88 3105.39,-7028.6 3098.42,-7029.24"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node276"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="2587.5,-922 2454.5,-922 2454.5,-886 2587.5,-886 2587.5,-922"/>
<text text-anchor="middle" x="2521" y="-900.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge703" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2587.74,-904C2660.9,-904 2776.49,-904 2835,-904"/>
<polygon fill="blue" stroke="blue" points="2835.23,-907.5 2845.23,-904 2835.23,-900.5 2835.23,-907.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node277"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2106.5,-1184 2031.5,-1184 2031.5,-1148 2106.5,-1148 2106.5,-1184"/>
<text text-anchor="middle" x="2069" y="-1162.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node278"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="2593,-1184 2449,-1184 2449,-1148 2593,-1148 2593,-1184"/>
<text text-anchor="middle" x="2521" y="-1162.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge561" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2106.83,-1166C2178.9,-1166 2340.11,-1166 2438.5,-1166"/>
<polygon fill="blue" stroke="blue" points="2438.71,-1169.5 2448.71,-1166 2438.71,-1162.5 2438.71,-1169.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="2899.5,-2516 2845.5,-2516 2845.5,-2480 2899.5,-2480 2899.5,-2516"/>
<text text-anchor="middle" x="2872.5" y="-2494.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge711" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2593.15,-1181.99C2646.92,-1198.18 2717.21,-1229.07 2752,-1285 2782.08,-1333.36 2757.74,-2254.86 2772,-2310 2788.11,-2372.29 2828.38,-2436.88 2852.46,-2471.78"/>
<polygon fill="blue" stroke="blue" points="2849.61,-2473.81 2858.21,-2479.99 2855.35,-2469.79 2849.61,-2473.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node287"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="2905.5,-2678 2839.5,-2678 2839.5,-2642 2905.5,-2642 2905.5,-2678"/>
<text text-anchor="middle" x="2872.5" y="-2656.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge714" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2593.22,-1181.95C2647.03,-1198.11 2717.34,-1228.99 2752,-1285 2791.41,-1348.69 2726.06,-2573.85 2772,-2633 2785.34,-2650.17 2808.42,-2657.13 2829,-2659.69"/>
<polygon fill="blue" stroke="blue" points="2828.87,-2663.2 2839.15,-2660.65 2829.53,-2656.23 2828.87,-2663.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<g id="a_node290"><a xlink:title=" &#160;&#160;&#160;pub fn verify(&amp;self, point: &amp;RistrettoPoint, token: &amp;[u8]) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.sk_prime * point; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected = Endorsement::to_token_raw(P); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2900.5,-2570 2844.5,-2570 2844.5,-2534 2900.5,-2534 2900.5,-2570"/>
<text text-anchor="middle" x="2872.5" y="-2548.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge713" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2593.2,-1181.96C2647,-1198.13 2717.31,-1229.01 2752,-1285 2788.29,-1343.57 2729.7,-2470.61 2772,-2525 2786.45,-2543.58 2812.3,-2550.19 2834.03,-2552.24"/>
<polygon fill="blue" stroke="blue" points="2834.1,-2555.75 2844.3,-2552.9 2834.55,-2548.76 2834.1,-2555.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<g id="a_node294"><a xlink:title=" &#160;&#160;&#160;pub fn to_token(&amp;self, client_key: &amp;ClientDecryptionKey) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.R * client_key.a_inv; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::to_token_raw(P) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2910,-2624 2835,-2624 2835,-2588 2910,-2588 2910,-2624"/>
<text text-anchor="middle" x="2872.5" y="-2602.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge710" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2593.21,-1181.95C2647.02,-1198.12 2717.33,-1229 2752,-1285 2789.85,-1346.13 2727.88,-2522.23 2772,-2579 2784.44,-2595.01 2805.35,-2602.14 2824.8,-2605.11"/>
<polygon fill="blue" stroke="blue" points="2824.43,-2608.59 2834.78,-2606.31 2825.27,-2601.64 2824.43,-2608.59"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="node306" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<g id="a_node306"><a xlink:title=" &#160;&#160;&#160;fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut point_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut point_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;point_byte...">
<polygon fill="white" stroke="black" points="3789.5,-1752 3708.5,-1752 3708.5,-1716 3789.5,-1716 3789.5,-1752"/>
<text text-anchor="middle" x="3749" y="-1730.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge712" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2593.32,-1163.29C2807.5,-1156.8 3438.44,-1150.37 3570,-1293 3602.07,-1327.77 3581.56,-1459.65 3598,-1504 3628.22,-1585.55 3691.55,-1667.67 3725.44,-1708.14"/>
<polygon fill="blue" stroke="blue" points="3722.88,-1710.52 3732.01,-1715.89 3728.22,-1706 3722.88,-1710.52"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;fn derive_impl&lt;D: Domain&gt;() &#45;&gt; [RistrettoPoint; 2] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new(b&#39; Signal_ZKCredential_Domain_20231011&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_and_ratchet(D::ID.as_bytes()); &#160;...">
<polygon fill="white" stroke="black" points="3452.5,-1106 3355.5,-1106 3355.5,-1070 3452.5,-1070 3452.5,-1106"/>
<text text-anchor="middle" x="3404" y="-1084.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge704" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3443.21,-1106.14C3482.38,-1126.96 3541.47,-1165.05 3570,-1217 3631.7,-1329.33 3555.55,-1383.07 3598,-1504 3626.8,-1586.06 3690.73,-1667.97 3725.09,-1708.26"/>
<polygon fill="blue" stroke="blue" points="3722.57,-1710.7 3731.75,-1715.99 3727.87,-1706.13 3722.57,-1710.7"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize().</title>
<g id="a_node280"><a xlink:title=" &#160;&#160;&#160;fn serialize&lt;S&gt;(&amp;self, serializer: S) &#45;&gt; Result&lt;S::Ok, S::Error&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S: serde::Serializer, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.serialize(serializer) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3142.5,-3104 3068.5,-3104 3068.5,-3068 3142.5,-3068 3142.5,-3104"/>
<text text-anchor="middle" x="3105.5" y="-3082.3" font-family="Helvetica,sans-Serif" font-size="14.00">serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<g id="a_node283"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Signal_ZKCredential_ConstantSystemParams_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get_point(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_wprime = sho.get_poi...">
<polygon fill="white" stroke="black" points="3443.5,-3050 3364.5,-3050 3364.5,-3014 3443.5,-3014 3443.5,-3050"/>
<text text-anchor="middle" x="3404" y="-3028.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3142.56,-3079.43C3195.66,-3069.76 3295.02,-3051.67 3354.48,-3040.84"/>
<polygon fill="blue" stroke="blue" points="3355.17,-3044.27 3364.38,-3039.03 3353.91,-3037.38 3355.17,-3044.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node281"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="3166,-2996 3045,-2996 3045,-2960 3166,-2960 3166,-2996"/>
<text text-anchor="middle" x="3105.5" y="-2974.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3166.01,-2965.54C3183.31,-2960.7 3201.88,-2954.29 3218,-2946 3395.54,-2854.73 3466.59,-2837.75 3570,-2667 3594.43,-2626.67 3717.33,-1913.41 3743.21,-1762.07"/>
<polygon fill="blue" stroke="blue" points="3746.67,-1762.61 3744.91,-1752.17 3739.77,-1761.43 3746.67,-1762.61"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system().</title>
<g id="a_node282"><a xlink:title=" &#160;&#160;&#160;fn test_system() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let params = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;params).expect(&#39; can serialize&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; PARAMS = {serialized:#x?}&#39; ); &#160;...">
<polygon fill="white" stroke="black" points="3155.5,-3050 3055.5,-3050 3055.5,-3014 3155.5,-3014 3155.5,-3050"/>
<text text-anchor="middle" x="3105.5" y="-3028.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_system</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="edge719" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3155.79,-3032C3210.87,-3032 3299.47,-3032 3354.3,-3032"/>
<polygon fill="blue" stroke="blue" points="3354.46,-3035.5 3364.46,-3032 3354.46,-3028.5 3354.46,-3035.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge734" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3428,-3013.99C3465.19,-2983.39 3537.62,-2917.27 3570,-2843 3617.68,-2733.62 3581.3,-2694.14 3598,-2576 3643.4,-2254.76 3720.57,-1868.51 3742.21,-1762.24"/>
<polygon fill="blue" stroke="blue" points="3745.67,-1762.79 3744.24,-1752.29 3738.81,-1761.39 3745.67,-1762.79"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<g id="a_node284"><a xlink:title=" &#160;&#160;&#160;fn to_token_raw(unblinded_endorsement: RistrettoPoint) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Skip the Sho for this, we&#39;re hashing a single point into a single bitstring. We don&#39;t &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// need domain separa...">
<polygon fill="white" stroke="black" points="3159,-2594 3052,-2594 3052,-2558 3159,-2558 3159,-2594"/>
<text text-anchor="middle" x="3105.5" y="-2572.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token_raw</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3159.12,-2567.31C3178.16,-2563.12 3199.52,-2557.19 3218,-2549 3231.75,-2542.91 3232.09,-2535.71 3246,-2530 3520.46,-2417.29 3654.68,-2562.89 3900,-2396 3923.54,-2379.98 3912.29,-2358.77 3936,-2343 3960.25,-2326.87 3992.06,-2320.02 4018.55,-2317.24"/>
<polygon fill="blue" stroke="blue" points="4019.13,-2320.7 4028.79,-2316.34 4018.52,-2313.73 4019.13,-2320.7"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="blue" d="M2899.59,-2496.39C3045.85,-2487.34 3765.54,-2442.81 3997.39,-2428.46"/>
<polygon fill="blue" stroke="blue" points="3997.64,-2431.95 4007.4,-2427.84 3997.21,-2424.97 3997.64,-2431.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2882.56,-2479.82C2900.17,-2446.72 2942.5,-2377.35 3001,-2348 3090.37,-2303.17 3800.04,-2308.23 3900,-2310 3939.89,-2310.71 3985.03,-2312.35 4018.69,-2313.73"/>
<polygon fill="blue" stroke="blue" points="4018.62,-2317.23 4028.75,-2314.15 4018.91,-2310.24 4018.62,-2317.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.86,-2497.86C2921.17,-2499.33 2950.01,-2505.19 2965,-2525 2990.47,-2558.66 2999.29,-5521.82 3001,-5564 3025.01,-6156.02 3088.37,-6878.02 3101.93,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3098.46,-7029.23 3102.85,-7038.88 3105.44,-7028.6 3098.46,-7029.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node289"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="3210,-2540 3001,-2540 3001,-2504 3210,-2504 3210,-2540"/>
<text text-anchor="middle" x="3105.5" y="-2518.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.55,-2500.71C2922.16,-2503.06 2956.54,-2506.63 2990.73,-2510.18"/>
<polygon fill="blue" stroke="blue" points="2990.52,-2513.68 3000.83,-2511.23 2991.25,-2506.71 2990.52,-2513.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(self) &#45;&gt; Result&lt;Endorsement&lt;RistrettoPoint&gt;, VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.R.decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(R) =&gt; Ok(Endorsement { R }), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Veri...">
<polygon fill="white" stroke="black" points="2571.5,-2462 2470.5,-2462 2470.5,-2426 2571.5,-2426 2571.5,-2462"/>
<text text-anchor="middle" x="2521" y="-2440.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M2522.65,-2425.84C2526.83,-2340.27 2557.14,-1975.42 2772,-1831 2843.19,-1783.15 2881.73,-1810.39 2965,-1831 3438.59,-1948.21 3476.45,-2179.2 3936,-2343 3959.48,-2351.37 3986.25,-2357.42 4009.63,-2361.65"/>
<polygon fill="blue" stroke="blue" points="4009.31,-2365.15 4019.76,-2363.41 4010.51,-2358.25 4009.31,-2365.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M2905.51,-2658.31C2925.21,-2655.59 2949.56,-2648.94 2965,-2633 3009.1,-2587.47 2953.18,-2536.61 3001,-2495 3077.64,-2428.32 3795.74,-2384.7 4009.65,-2373.1"/>
<polygon fill="blue" stroke="blue" points="4009.95,-2376.59 4019.75,-2372.55 4009.58,-2369.6 4009.95,-2376.59"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2905.54,-2661.59C2976.26,-2667.02 3145.19,-2691.04 3218,-2797 3249.92,-2843.46 3388.67,-6660.73 3401.97,-7028.59"/>
<polygon fill="blue" stroke="blue" points="3398.48,-7028.82 3402.34,-7038.68 3405.48,-7028.56 3398.48,-7028.82"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2905.6,-2657.35C2924.84,-2654.25 2948.66,-2647.52 2965,-2633 2995.36,-2606.02 2970.21,-2575.49 3001,-2549 3002.35,-2547.83 3003.75,-2546.72 3005.19,-2545.65"/>
<polygon fill="blue" stroke="blue" points="3007.35,-2548.42 3013.82,-2540.03 3003.53,-2542.55 3007.35,-2548.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<g id="a_node288"><a xlink:title=" &#160;&#160;&#160;pub fn compress(self) &#45;&gt; Endorsement&lt;CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Endorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: self.R.compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2914,-2732 2831,-2732 2831,-2696 2914,-2696 2914,-2732"/>
<text text-anchor="middle" x="2872.5" y="-2710.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M2914.11,-2711.4C2932.13,-2708.14 2952.12,-2701.26 2965,-2687 3023.2,-2622.57 2943.37,-2559.94 3001,-2495 3137.99,-2340.63 3825.37,-2319.38 4018.79,-2316.46"/>
<polygon fill="blue" stroke="blue" points="4019.01,-2319.96 4028.95,-2316.32 4018.91,-2312.96 4019.01,-2319.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M3188.25,-2503.99C3336.94,-2471.32 3661.64,-2400.34 3936,-2343 3963.36,-2337.28 3993.92,-2331.09 4018.89,-2326.08"/>
<polygon fill="blue" stroke="blue" points="4019.75,-2329.47 4028.87,-2324.08 4018.37,-2322.61 4019.75,-2329.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2900.91,-2554.85C2935.35,-2558.43 2995.53,-2564.68 3041.55,-2569.46"/>
<polygon fill="blue" stroke="blue" points="3041.43,-2572.97 3051.73,-2570.52 3042.15,-2566 3041.43,-2572.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node291"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="2565,-2570 2477,-2570 2477,-2534 2565,-2534 2565,-2570"/>
<text text-anchor="middle" x="2521" y="-2548.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2565.01,-2548.32C2611.36,-2544.03 2687.21,-2536.09 2752,-2525 2780.12,-2520.19 2811.59,-2513 2835.17,-2507.26"/>
<polygon fill="blue" stroke="blue" points="2836.21,-2510.6 2845.08,-2504.81 2834.53,-2503.81 2836.21,-2510.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2565.13,-2544.68C2615.47,-2538.68 2698.59,-2536.99 2752,-2579 2772.12,-2594.82 2753.11,-2615.73 2772,-2633 2787.53,-2647.19 2809.76,-2654.04 2829.28,-2657.3"/>
<polygon fill="blue" stroke="blue" points="2828.8,-2660.77 2839.19,-2658.7 2829.78,-2653.84 2828.8,-2660.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2565.46,-2561.78C2618.13,-2570.77 2705.57,-2575.98 2752,-2525 2783.88,-2489.99 2738.13,-1706.08 2772,-1673 2898.89,-1549.05 3394.42,-1666.75 3570,-1692 3613.91,-1698.31 3662.91,-1710.25 3698.36,-1719.78"/>
<polygon fill="blue" stroke="blue" points="3697.88,-1723.28 3708.45,-1722.53 3699.72,-1716.52 3697.88,-1723.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node292"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="2592.5,-2516 2449.5,-2516 2449.5,-2480 2592.5,-2480 2592.5,-2516"/>
<text text-anchor="middle" x="2521" y="-2494.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge588" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2592.73,-2498C2666.15,-2498 2778.08,-2498 2835.21,-2498"/>
<polygon fill="blue" stroke="blue" points="2835.22,-2501.5 2845.22,-2498 2835.22,-2494.5 2835.22,-2501.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge587" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2592.61,-2486.15C2643.41,-2481.91 2710.1,-2485.78 2752,-2525 2787.64,-2558.36 2738.92,-2597.1 2772,-2633 2786.46,-2648.69 2809.03,-2655.63 2829.02,-2658.55"/>
<polygon fill="blue" stroke="blue" points="2828.84,-2662.06 2839.18,-2659.74 2829.66,-2655.1 2828.84,-2662.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge586" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2592.62,-2511.54C2644.64,-2517.01 2712.87,-2513.94 2752,-2471 2783.29,-2436.66 2745.39,-1673.08 2772,-1635 2824.8,-1559.43 2888.59,-1610.58 2965,-1559 2984.28,-1545.98 2979.63,-1530.19 3001,-1521 3233.31,-1421.08 3340.91,-1413.89 3570,-1521 3652.91,-1559.76 3710.77,-1658.24 3735.11,-1706.5"/>
<polygon fill="blue" stroke="blue" points="3732.1,-1708.3 3739.67,-1715.72 3738.38,-1705.2 3732.1,-1708.3"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node293"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="2571.5,-2678 2470.5,-2678 2470.5,-2642 2571.5,-2642 2571.5,-2678"/>
<text text-anchor="middle" x="2521" y="-2656.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge650" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.59,-2669.56C2623.5,-2676.47 2704,-2677.92 2752,-2633 2787.64,-2599.64 2738.92,-2560.9 2772,-2525 2787.95,-2507.69 2813.76,-2501.04 2835.1,-2498.66"/>
<polygon fill="blue" stroke="blue" points="2835.48,-2502.14 2845.15,-2497.81 2834.89,-2495.17 2835.48,-2502.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge648" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.7,-2660C2640.61,-2660 2764,-2660 2828.91,-2660"/>
<polygon fill="blue" stroke="blue" points="2829.18,-2663.5 2839.18,-2660 2829.18,-2656.5 2829.18,-2663.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge652" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.57,-2664.3C2618.3,-2668.71 2690.18,-2676.42 2752,-2687 2774.8,-2690.9 2799.8,-2696.36 2821.02,-2701.35"/>
<polygon fill="blue" stroke="blue" points="2820.25,-2704.77 2830.79,-2703.68 2821.87,-2697.96 2820.25,-2704.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge647" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.55,-2668.04C2622.3,-2673.38 2700.81,-2673.27 2752,-2633 2772.12,-2617.18 2753.11,-2596.27 2772,-2579 2788.84,-2563.61 2813.58,-2556.85 2834.17,-2553.94"/>
<polygon fill="blue" stroke="blue" points="2834.67,-2557.41 2844.2,-2552.78 2833.86,-2550.46 2834.67,-2557.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge649" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.57,-2655.7C2618.3,-2651.29 2690.18,-2643.58 2752,-2633 2776.27,-2628.85 2803.03,-2622.93 2825.06,-2617.69"/>
<polygon fill="blue" stroke="blue" points="2825.92,-2621.08 2834.82,-2615.34 2824.28,-2614.28 2825.92,-2621.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge651" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.58,-2670.77C2624.67,-2679.06 2707.3,-2682.01 2752,-2633 2782.03,-2600.07 2741.67,-1863.66 2772,-1831 2898.3,-1694.97 3517.35,-1720.28 3698.26,-1730.79"/>
<polygon fill="blue" stroke="blue" points="3698.11,-1734.29 3708.3,-1731.38 3698.52,-1727.3 3698.11,-1734.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge666" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2910.1,-2601.25C2945.36,-2596.67 2999.41,-2589.65 3041.57,-2584.17"/>
<polygon fill="blue" stroke="blue" points="3042.28,-2587.61 3051.74,-2582.85 3041.38,-2580.67 3042.28,-2587.61"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().</title>
<g id="a_node295"><a xlink:title=" &#160;&#160;&#160;fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter&lt;&#39;_&gt;) &#45;&gt; std::fmt::Result { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.compress().fmt(f) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2548,-2732 2494,-2732 2494,-2696 2548,-2696 2548,-2732"/>
<text text-anchor="middle" x="2521" y="-2710.3" font-family="Helvetica,sans-Serif" font-size="14.00">fmt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge757" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.27,-2714C2606.04,-2714 2744.96,-2714 2820.5,-2714"/>
<polygon fill="blue" stroke="blue" points="2820.73,-2717.5 2830.73,-2714 2820.73,-2710.5 2820.73,-2717.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node296"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="2619,-2624 2423,-2624 2423,-2588 2619,-2588 2619,-2624"/>
<text text-anchor="middle" x="2521" y="-2602.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge797" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.09,-2616.48C2663.81,-2616.22 2715.03,-2608.08 2752,-2579 2772.12,-2563.18 2753.11,-2542.27 2772,-2525 2789.07,-2509.4 2814.24,-2502.67 2835,-2499.83"/>
<polygon fill="blue" stroke="blue" points="2835.54,-2503.29 2845.08,-2498.7 2834.76,-2496.33 2835.54,-2503.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge794" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.13,-2615.11C2660.26,-2619.56 2708.61,-2625.57 2752,-2633 2778.02,-2637.45 2806.91,-2643.94 2829.76,-2649.43"/>
<polygon fill="blue" stroke="blue" points="2828.93,-2652.84 2839.48,-2651.8 2830.59,-2646.03 2828.93,-2652.84"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge795" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.13,-2596.89C2660.26,-2592.44 2708.61,-2586.43 2752,-2579 2779.76,-2574.25 2810.77,-2567.19 2834.24,-2561.48"/>
<polygon fill="blue" stroke="blue" points="2835.26,-2564.83 2844.14,-2559.05 2833.59,-2558.04 2835.26,-2564.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge798" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.36,-2606C2686.25,-2606 2772.1,-2606 2824.4,-2606"/>
<polygon fill="blue" stroke="blue" points="2824.71,-2609.5 2834.71,-2606 2824.71,-2602.5 2824.71,-2609.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge796" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.1,-2621.41C2666.08,-2622.97 2719.25,-2614.97 2752,-2579 2784.47,-2543.33 2737.5,-1744.71 2772,-1711 2838.55,-1645.97 3509.02,-1709.42 3698.41,-1728.79"/>
<polygon fill="blue" stroke="blue" points="3698.07,-1732.27 3708.37,-1729.81 3698.78,-1725.31 3698.07,-1732.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node297"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3182.5,-2270 3028.5,-2270 3028.5,-2234 3182.5,-2234 3182.5,-2270"/>
<text text-anchor="middle" x="3105.5" y="-2248.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3130.57,-2233.73C3153.25,-2216.45 3188.12,-2189.7 3218,-2166 3410.44,-2013.4 3638,-1825.29 3718.22,-1758.74"/>
<polygon fill="blue" stroke="blue" points="3720.5,-1761.4 3725.96,-1752.32 3716.03,-1756.02 3720.5,-1761.4"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node298"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="2899.5,-2275 2845.5,-2275 2845.5,-2239 2899.5,-2239 2899.5,-2275"/>
<text text-anchor="middle" x="2872.5" y="-2253.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2888.54,-2275.36C2910.35,-2303.27 2949.79,-2358.96 2965,-2414 3011.61,-2582.69 2993.95,-5389.13 3001,-5564 3024.88,-6156.03 3088.35,-6878.02 3101.92,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3098.46,-7029.23 3102.85,-7038.88 3105.43,-7028.6 3098.46,-7029.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2887.73,-2275.03C2908.87,-2302.96 2947.9,-2359.19 2965,-2414 3026.86,-2612.3 2911.6,-2692.49 3001,-2880 3015.51,-2910.44 3043.9,-2936.24 3067.28,-2953.71"/>
<polygon fill="blue" stroke="blue" points="3065.48,-2956.73 3075.63,-2959.77 3069.59,-2951.07 3065.48,-2956.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.55,-2256.44C2928.33,-2255.81 2976.21,-2254.78 3018.46,-2253.86"/>
<polygon fill="blue" stroke="blue" points="3018.58,-2257.36 3028.5,-2253.65 3018.43,-2250.36 3018.58,-2257.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node299"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="2900.5,-2221 2844.5,-2221 2844.5,-2185 2900.5,-2185 2900.5,-2221"/>
<text text-anchor="middle" x="2872.5" y="-2199.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge562" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2900.73,-2206.33C2920.07,-2209.75 2945.89,-2216.58 2965,-2230 2987.12,-2245.53 2981.17,-2260.64 3001,-2279 3084.35,-2356.16 3160.93,-2315.79 3218,-2414 3238.25,-2448.85 3244.42,-3098.72 3246,-3139 3309.95,-4764.36 3391.3,-6768.88 3401.85,-7028.78"/>
<polygon fill="blue" stroke="blue" points="3398.36,-7029.05 3402.26,-7038.9 3405.36,-7028.76 3398.36,-7029.05"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge563" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2900.91,-2208.81C2929.84,-2214.95 2976.93,-2224.94 3018.54,-2233.77"/>
<polygon fill="blue" stroke="blue" points="3017.92,-2237.21 3028.43,-2235.86 3019.37,-2230.36 3017.92,-2237.21"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node300"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="2900.5,-5362 2844.5,-5362 2844.5,-5326 2900.5,-5326 2900.5,-5362"/>
<text text-anchor="middle" x="2872.5" y="-5340.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2900.52,-5341.23C2973.62,-5334.39 3172.78,-5320.15 3218,-5363 3344.51,-5482.89 3394.87,-6817.48 3402.08,-7028.87"/>
<polygon fill="blue" stroke="blue" points="3398.58,-7028.99 3402.41,-7038.86 3405.58,-7028.75 3398.58,-7028.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().</title>
<g id="a_node302"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.inner.finalize_public_attrs() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3182.5,-5408 3028.5,-5408 3028.5,-5372 3182.5,-5372 3182.5,-5408"/>
<text text-anchor="middle" x="3105.5" y="-5386.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2900.91,-5349.46C2929.84,-5355.22 2976.93,-5364.6 3018.54,-5372.88"/>
<polygon fill="blue" stroke="blue" points="3017.93,-5376.33 3028.43,-5374.85 3019.3,-5369.47 3017.93,-5376.33"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node301"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="2899.5,-5416 2845.5,-5416 2845.5,-5380 2899.5,-5380 2899.5,-5416"/>
<text text-anchor="middle" x="2872.5" y="-5394.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2876.86,-5416.34C2889.43,-5485.37 2934.58,-5736.21 2965,-5944 3028.11,-6375.1 3087.46,-6902.77 3101.42,-7028.95"/>
<polygon fill="blue" stroke="blue" points="3097.94,-7029.39 3102.52,-7038.95 3104.9,-7028.63 3097.94,-7029.39"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.84,-5398.12C2921.14,-5396.65 2949.97,-5390.78 2965,-5371 3044.51,-5266.31 2919.84,-3108.41 3001,-3005 3009.53,-2994.13 3021.85,-2987.29 3035.04,-2983.07"/>
<polygon fill="blue" stroke="blue" points="3036.02,-2986.43 3044.75,-2980.44 3034.18,-2979.68 3036.02,-2986.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.55,-5397.1C2928.33,-5396.1 2976.21,-5394.44 3018.46,-5392.98"/>
<polygon fill="blue" stroke="blue" points="3018.63,-5396.48 3028.5,-5392.63 3018.38,-5389.48 3018.63,-5396.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge595" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3028.28,-5381.37C3010.09,-5375.3 2993.08,-5365.31 2983,-5349 2961.63,-5314.43 2970.57,-2461.69 2983,-2423 3001.84,-2364.34 3049.05,-2308.73 3079.05,-2277.63"/>
<polygon fill="blue" stroke="blue" points="3081.78,-2279.85 3086.28,-2270.26 3076.78,-2274.95 3081.78,-2279.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node303" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node303"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.core.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.core.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3182.5,-5229 3028.5,-5229 3028.5,-5193 3182.5,-5193 3182.5,-5229"/>
<text text-anchor="middle" x="3105.5" y="-5207.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3106.37,-5192.76C3105.14,-4999.45 3098.81,-3331.47 3246,-3177 3346.02,-3072.03 3470.97,-3244.9 3570,-3139 3612.78,-3093.25 3590.94,-2638.23 3598,-2576 3634.58,-2253.64 3717.99,-1868.18 3741.64,-1762.16"/>
<polygon fill="blue" stroke="blue" points="3745.09,-1762.77 3743.86,-1752.24 3738.26,-1761.24 3745.09,-1762.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node304" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node304"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2900.5,-5279 2844.5,-5279 2844.5,-5243 2900.5,-5243 2900.5,-5279"/>
<text text-anchor="middle" x="2872.5" y="-5257.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2900.78,-5255.45C2966.27,-5243.87 3133.2,-5225.13 3218,-5314 3341.89,-5443.84 3394.54,-6814.41 3402.05,-7028.85"/>
<polygon fill="blue" stroke="blue" points="3398.56,-7029.1 3402.4,-7038.97 3405.55,-7028.86 3398.56,-7029.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2900.91,-5255.07C2929.84,-5248.81 2976.93,-5238.61 3018.54,-5229.61"/>
<polygon fill="blue" stroke="blue" points="3019.39,-5233 3028.43,-5227.47 3017.91,-5226.16 3019.39,-5233"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node305" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node305"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="2907,-5225 2838,-5225 2838,-5189 2907,-5189 2907,-5225"/>
<text text-anchor="middle" x="2872.5" y="-5203.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge776" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2907.43,-5207.9C2927.35,-5210.35 2951.25,-5217 2965,-5234 2979.78,-5252.28 3086.75,-6799.07 3102.55,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3099.08,-7029.12 3103.25,-7038.86 3106.06,-7028.64 3099.08,-7029.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M3761,-1752.17C3808.57,-1830.8 3996.79,-2141.85 4053.35,-2235.31"/>
<polygon fill="blue" stroke="blue" points="4050.38,-2237.16 4058.55,-2243.9 4056.37,-2233.53 4050.38,-2237.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node307" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node307"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1068.5,-6365 993.5,-6365 993.5,-6329 1068.5,-6329 1068.5,-6365"/>
<text text-anchor="middle" x="1031" y="-6343.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node308" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node308"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="1624,-6419 1396,-6419 1396,-6383 1624,-6383 1624,-6419"/>
<text text-anchor="middle" x="1510" y="-6397.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.66,-6355.22C1096.8,-6361.25 1136.68,-6369.19 1172,-6374 1242.52,-6383.6 1321.85,-6390.16 1385.82,-6394.41"/>
<polygon fill="blue" stroke="blue" points="1385.74,-6397.91 1395.95,-6395.07 1386.2,-6390.93 1385.74,-6397.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node309" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node309"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="1655,-6311 1365,-6311 1365,-6275 1655,-6275 1655,-6311"/>
<text text-anchor="middle" x="1510" y="-6289.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.66,-6338.78C1096.8,-6332.75 1136.68,-6324.81 1172,-6320 1231.39,-6311.92 1297.02,-6305.99 1354.47,-6301.78"/>
<polygon fill="blue" stroke="blue" points="1355,-6305.25 1364.72,-6301.04 1354.5,-6298.27 1355,-6305.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node310" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node310"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="1618,-6365 1402,-6365 1402,-6329 1618,-6329 1618,-6365"/>
<text text-anchor="middle" x="1510" y="-6343.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.64,-6347C1136.79,-6347 1285.74,-6347 1391.5,-6347"/>
<polygon fill="blue" stroke="blue" points="1391.6,-6350.5 1401.6,-6347 1391.6,-6343.5 1391.6,-6350.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1617.85,-6419.01C1687.5,-6424.76 1776.84,-6420.15 1840,-6374 1866.39,-6354.72 1842.12,-6325.97 1868,-6306 1900.21,-6281.15 1944.35,-6273.28 1982.97,-6272.11"/>
<polygon fill="blue" stroke="blue" points="1983.24,-6275.61 1993.18,-6271.95 1983.13,-6268.61 1983.24,-6275.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.34,-6394.39C1687.9,-6390.01 1768.54,-6383.34 1840,-6374 1888.65,-6367.64 1942.71,-6358.03 1985.98,-6349.72"/>
<polygon fill="blue" stroke="blue" points="1986.73,-6353.14 1995.88,-6347.8 1985.4,-6346.26 1986.73,-6353.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.47,-6419.05C1662.79,-6431.37 1773.27,-6435.85 1840,-6374 1898.09,-6320.16 1811.34,-6253.34 1868,-6198 1898.5,-6168.21 1945.2,-6160.64 1985.8,-6160.9"/>
<polygon fill="blue" stroke="blue" points="1985.9,-6164.4 1995.97,-6161.12 1986.05,-6157.4 1985.9,-6164.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1593.93,-6419.02C1667.43,-6429.8 1773.16,-6431.86 1840,-6374 1882.06,-6337.59 1826.91,-6289.5 1868,-6252 1898.59,-6224.08 1943.58,-6216.19 1983.14,-6215.78"/>
<polygon fill="blue" stroke="blue" points="1983.32,-6219.28 1993.33,-6215.84 1983.35,-6212.28 1983.32,-6219.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1580,-6419.07C1655.69,-6434.25 1775.03,-6443.69 1840,-6374 1884.44,-6326.33 1827.95,-4079.41 1868,-4028 1896.78,-3991.06 1948.1,-3978 1991.55,-3974.08"/>
<polygon fill="blue" stroke="blue" points="1991.84,-3977.56 2001.54,-3973.32 1991.31,-3970.58 1991.84,-3977.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node365" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node365"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="2705.5,-5512 2336.5,-5512 2336.5,-5476 2705.5,-5476 2705.5,-5512"/>
<text text-anchor="middle" x="2521" y="-5490.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1579.7,-6419.04C1655.41,-6434.3 1775.04,-6443.9 1840,-6374 1901.53,-6307.78 1803.81,-3183.64 1868,-3120 1994.88,-2994.21 2143.13,-2994.2 2270,-3120 2316.24,-3165.85 2246.83,-5415.25 2290,-5464 2300.46,-5475.81 2313.1,-5484.71 2327.01,-5491.31"/>
<polygon fill="blue" stroke="blue" points="2325.76,-5494.58 2336.33,-5495.32 2328.53,-5488.15 2325.76,-5494.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1582.14,-6419.02C1657.41,-6433.37 1774.21,-6441.32 1840,-6374 1913.9,-6298.38 1796.1,-5976.53 1868,-5899 1882.76,-5883.09 1902.08,-5873.29 1922.9,-5867.59"/>
<polygon fill="blue" stroke="blue" points="1923.99,-5870.93 1932.89,-5865.18 1922.35,-5864.12 1923.99,-5870.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.34,-6419.06C1656.78,-6433.73 1774.53,-6442.23 1840,-6374 1893.2,-6318.55 1816.27,-5739.82 1868,-5683 1881.11,-5668.6 1897.95,-5659.19 1916.28,-5653.26"/>
<polygon fill="blue" stroke="blue" points="1917.34,-5656.6 1925.99,-5650.48 1915.41,-5649.87 1917.34,-5656.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1583.29,-6419.06C1658.41,-6433.05 1774.03,-6440.35 1840,-6374 1897.67,-6316 1811.87,-6066.49 1868,-6007 1870.09,-6004.79 1872.26,-6002.7 1874.51,-6000.72"/>
<polygon fill="blue" stroke="blue" points="1876.8,-6003.37 1882.47,-5994.42 1872.46,-5997.89 1876.8,-6003.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.87,-6419.03C1657.2,-6433.49 1774.31,-6441.62 1840,-6374 1922.02,-6289.56 1788.21,-5931.56 1868,-5845 1875.38,-5837 1883.91,-5830.54 1893.21,-5825.37"/>
<polygon fill="blue" stroke="blue" points="1894.97,-5828.4 1902.35,-5820.79 1891.84,-5822.14 1894.97,-5828.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.17,-6310.99C1717.28,-6311.36 1787.54,-6301.05 1840,-6263 1865.46,-6244.53 1842.94,-6217.01 1868,-6198 1901.05,-6172.92 1946.32,-6165.26 1985.43,-6164.28"/>
<polygon fill="blue" stroke="blue" points="1985.79,-6167.78 1995.76,-6164.17 1985.72,-6160.78 1985.79,-6167.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node352" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node352"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="2220,-3546 1918,-3546 1918,-3510 2220,-3510 2220,-3546"/>
<text text-anchor="middle" x="2069" y="-3524.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.05,-6298.25C1731.56,-6297.59 1814.91,-6290.18 1840,-6263 1887.84,-6211.17 1840.32,-3788.87 1868,-3724 1901.14,-3646.33 1981.37,-3583.83 2029.55,-3551.67"/>
<polygon fill="blue" stroke="blue" points="2031.71,-3554.43 2038.15,-3546.02 2027.87,-3548.58 2031.71,-3554.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.06,-6298.26C1731.58,-6297.61 1814.93,-6290.2 1840,-6263 1896.06,-6202.17 1813.27,-3347.03 1868,-3285 1892.21,-3257.56 1929.95,-3248.02 1966.15,-3246.33"/>
<polygon fill="blue" stroke="blue" points="1966.41,-3249.83 1976.31,-3246.06 1966.22,-3242.83 1966.41,-3249.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.06,-6298.26C1731.59,-6297.61 1814.93,-6290.21 1840,-6263 1897.07,-6201.06 1812.28,-3294.16 1868,-3231 1908.21,-3185.42 1985.77,-3189.22 2031.59,-3196.4"/>
<polygon fill="blue" stroke="blue" points="2031.25,-3199.89 2041.69,-3198.12 2032.42,-3192.99 2031.25,-3199.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.05,-6298.25C1731.57,-6297.6 1814.92,-6290.19 1840,-6263 1892.02,-6206.6 1817.21,-3558.51 1868,-3501 1892.01,-3473.81 1929.3,-3464.2 1965.21,-3462.39"/>
<polygon fill="blue" stroke="blue" points="1965.4,-3465.89 1975.29,-3462.08 1965.19,-3458.89 1965.4,-3465.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node314" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node314"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="2102,-4914 2036,-4914 2036,-4878 2102,-4878 2102,-4914"/>
<text text-anchor="middle" x="2069" y="-4892.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge629" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.37,-6353.05C1702.67,-6355.21 1810.56,-6351.32 1840,-6320 1893.17,-6263.44 1816.33,-4980.93 1868,-4923 1906.81,-4879.49 1979.68,-4881.14 2025.92,-4887.62"/>
<polygon fill="blue" stroke="blue" points="2025.52,-4891.1 2035.93,-4889.16 2026.58,-4884.18 2025.52,-4891.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge630" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.37,-6353.06C1702.68,-6355.21 1810.57,-6351.33 1840,-6320 1895.2,-6261.23 1814.36,-4929.19 1868,-4869 1898.93,-4834.3 1951.51,-4828.31 1995,-4830.6"/>
<polygon fill="blue" stroke="blue" points="1994.77,-4834.09 2004.98,-4831.27 1995.24,-4827.11 1994.77,-4834.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node318" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node318"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="2097,-5076 2041,-5076 2041,-5040 2097,-5040 2097,-5076"/>
<text text-anchor="middle" x="2069" y="-5054.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge631" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.26,-6352.96C1702.5,-6355.05 1810.36,-6351.13 1840,-6320 1872.81,-6285.54 1856.45,-5510.16 1868,-5464 1906.36,-5310.71 2007.88,-5147.7 2049.65,-5084.85"/>
<polygon fill="blue" stroke="blue" points="2052.71,-5086.57 2055.36,-5076.32 2046.89,-5082.68 2052.71,-5086.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node319" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node319"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="2103.5,-5022 2034.5,-5022 2034.5,-4986 2103.5,-4986 2103.5,-5022"/>
<text text-anchor="middle" x="2069" y="-5000.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge634" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.35,-6353.04C1702.65,-6355.18 1810.53,-6351.29 1840,-6320 1889.1,-6267.85 1820.28,-5084.42 1868,-5031 1906.41,-4988 1978.08,-4989.13 2024.38,-4995.42"/>
<polygon fill="blue" stroke="blue" points="2024.01,-4998.9 2034.42,-4996.91 2025.05,-4991.98 2024.01,-4998.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge633" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.07,-6344.31C1725.35,-6341.61 1888.17,-6337.52 1985.72,-6335.07"/>
<polygon fill="blue" stroke="blue" points="1985.92,-6338.56 1995.82,-6334.81 1985.74,-6331.57 1985.92,-6338.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge632" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1593.93,-6365.02C1667.43,-6375.8 1773.16,-6377.86 1840,-6320 1882.06,-6283.59 1826.91,-6235.5 1868,-6198 1899.26,-6169.48 1945.53,-6161.86 1985.7,-6161.77"/>
<polygon fill="blue" stroke="blue" points="1985.72,-6165.27 1995.77,-6161.9 1985.81,-6158.27 1985.72,-6165.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge742" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2034.41,-4384.01C1982.77,-4381.76 1887.97,-4386.77 1854,-4449 1840.18,-4474.31 1840.18,-4942.69 1854,-4968 1885.09,-5024.95 1970.97,-5021.77 2024.31,-5013.45"/>
<polygon fill="blue" stroke="blue" points="2024.91,-5016.9 2034.19,-5011.79 2023.75,-5010 2024.91,-5016.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge756" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2035.88,-4325.51C1984.36,-4316.07 1887.46,-4307.71 1854,-4369 1840.93,-4392.94 1840.93,-4836.06 1854,-4860 1885.37,-4917.46 1972.5,-4913.71 2025.72,-4905.23"/>
<polygon fill="blue" stroke="blue" points="2026.62,-4908.63 2035.88,-4903.49 2025.44,-4901.73 2026.62,-4908.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node313" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node313"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="2153,-4968 1985,-4968 1985,-4932 2153,-4932 2153,-4968"/>
<text text-anchor="middle" x="2069" y="-4946.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node315" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node315"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="2582.5,-4860 2459.5,-4860 2459.5,-4824 2582.5,-4824 2582.5,-4860"/>
<text text-anchor="middle" x="2521" y="-4838.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2153.06,-4957.46C2192.33,-4956.66 2237.59,-4948.95 2270,-4923 2289.98,-4907 2269.88,-4884.82 2290,-4869 2334.57,-4833.95 2399.84,-4829.32 2449.47,-4832.24"/>
<polygon fill="blue" stroke="blue" points="2449.27,-4835.73 2459.49,-4832.94 2449.76,-4828.75 2449.27,-4835.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node317" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node317"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="2584,-5022 2458,-5022 2458,-4986 2584,-4986 2584,-5022"/>
<text text-anchor="middle" x="2521" y="-5000.3" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2153.06,-4959.97C2237.57,-4970.11 2367.23,-4985.67 2447.65,-4995.32"/>
<polygon fill="blue" stroke="blue" points="2447.35,-4998.81 2457.69,-4996.52 2448.18,-4991.86 2447.35,-4998.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node320" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node320"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2613.5,-4914 2428.5,-4914 2428.5,-4878 2613.5,-4878 2613.5,-4914"/>
<text text-anchor="middle" x="2521" y="-4892.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2153.06,-4940.03C2227.83,-4931.06 2337.94,-4917.85 2418.02,-4908.24"/>
<polygon fill="blue" stroke="blue" points="2418.62,-4911.69 2428.13,-4907.02 2417.78,-4904.74 2418.62,-4911.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node321" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node321"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="2577.5,-5076 2464.5,-5076 2464.5,-5040 2577.5,-5040 2577.5,-5076"/>
<text text-anchor="middle" x="2521" y="-5054.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2153.06,-4942.54C2192.33,-4943.34 2237.59,-4951.05 2270,-4977 2289.98,-4993 2269.88,-5015.18 2290,-5031 2335.97,-5067.16 2403.97,-5070.94 2454.11,-5067.47"/>
<polygon fill="blue" stroke="blue" points="2454.52,-5070.95 2464.21,-5066.65 2453.96,-5063.97 2454.52,-5070.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2102.06,-4892.01C2144.88,-4886.7 2223.14,-4877.03 2290,-4869 2343.44,-4862.58 2403.89,-4855.49 2449.4,-4850.19"/>
<polygon fill="blue" stroke="blue" points="2449.93,-4853.65 2459.46,-4849.02 2449.12,-4846.7 2449.93,-4853.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2582.65,-4843.8C2636.61,-4841.75 2712.87,-4829.08 2752,-4778 2795.04,-4721.81 2728.78,-2286.05 2772,-2230 2786.44,-2211.28 2812.46,-2204.69 2834.28,-2202.69"/>
<polygon fill="blue" stroke="blue" points="2834.5,-2206.19 2844.26,-2202.06 2834.06,-2199.2 2834.5,-2206.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="node409" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<g id="a_node409"><a xlink:title=" &#160;&#160;&#160;pub fn from_service_id(service_id: ServiceId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M1 = Self::calc_M1(service_id); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let raw_uuid_bytes = service_id.raw_uuid().into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = RistrettoPoint...">
<polygon fill="white" stroke="black" points="2935,-2131 2810,-2131 2810,-2095 2935,-2095 2935,-2131"/>
<text text-anchor="middle" x="2872.5" y="-2109.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2582.65,-4843.8C2636.62,-4841.75 2712.88,-4829.09 2752,-4778 2796,-4720.55 2736.17,-2235.87 2772,-2173 2780.97,-2157.25 2795.91,-2145.16 2811.51,-2136.11"/>
<polygon fill="blue" stroke="blue" points="2813.6,-2138.96 2820.74,-2131.13 2810.28,-2132.8 2813.6,-2138.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.05,-4849.83C2177.03,-4855.27 2237.08,-4862.65 2290,-4869 2332.04,-4874.05 2378.42,-4879.51 2418.45,-4884.2"/>
<polygon fill="blue" stroke="blue" points="2418.15,-4887.68 2428.49,-4885.37 2418.96,-4880.73 2418.15,-4887.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2584.11,-4997.84C2633.14,-4995.98 2701.48,-5000.33 2752,-5031 2809.05,-5065.63 2845.1,-5139.05 2861.37,-5179.26"/>
<polygon fill="blue" stroke="blue" points="2858.17,-5180.69 2865.08,-5188.72 2864.69,-5178.13 2858.17,-5180.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2097.14,-5058C2166.85,-5058 2353.8,-5058 2454.16,-5058"/>
<polygon fill="blue" stroke="blue" points="2454.19,-5061.5 2464.19,-5058 2454.19,-5054.5 2454.19,-5061.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2103.82,-5004C2176.57,-5004 2349.28,-5004 2447.82,-5004"/>
<polygon fill="blue" stroke="blue" points="2448,-5007.5 2458,-5004 2448,-5000.5 2448,-5007.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2613.53,-4911.36C2661.93,-4913.84 2718.18,-4906.71 2752,-4869 2774.77,-4843.61 2762.36,-2446.71 2772,-2414 2787.09,-2362.79 2824.23,-2312.2 2848.62,-2282.81"/>
<polygon fill="blue" stroke="blue" points="2851.35,-2285 2855.13,-2275.1 2846.01,-2280.48 2851.35,-2285"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2613.54,-4911.37C2661.95,-4913.86 2718.19,-4906.73 2752,-4869 2801.98,-4813.23 2734.93,-2238.07 2772,-2173 2780.97,-2157.25 2795.91,-2145.16 2811.51,-2136.11"/>
<polygon fill="blue" stroke="blue" points="2813.6,-2138.96 2820.74,-2131.12 2810.27,-2132.8 2813.6,-2138.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge743" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2577.85,-5054.58C2630.5,-5054.64 2707.74,-5063.75 2752,-5111 2789.86,-5151.42 2734.92,-5192.86 2772,-5234 2787.55,-5251.25 2812.9,-5257.95 2834.12,-5260.36"/>
<polygon fill="blue" stroke="blue" points="2833.88,-5263.86 2844.15,-5261.23 2834.49,-5256.88 2833.88,-5263.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="node322" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<g id="a_node322"><a xlink:title=" &#160;&#160;&#160;fn new(backup_id: &amp;libsignal_account_keys::BackupId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20231003_Signal_BackupId&#39; , &amp;backup_id.0).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2899.5,-6603 2845.5,-6603 2845.5,-6567 2899.5,-6567 2899.5,-6603"/>
<text text-anchor="middle" x="2872.5" y="-6581.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2874.27,-6566.9C2880.3,-6430.11 2921.5,-5562.3 3001,-5481 3069.07,-5411.39 3153.68,-5524.09 3218,-5451 3270.56,-5391.27 3194.43,-2647.59 3246,-2587 3271.61,-2556.9 3317.55,-2551.99 3353.14,-2553.53"/>
<polygon fill="blue" stroke="blue" points="3353.15,-2557.04 3363.35,-2554.16 3353.58,-2550.05 3353.15,-2557.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.13,-6544.14C2596,-6553.68 2697.83,-6565.71 2752,-6511 2791.51,-6471.09 2857.11,-5595.66 2869.46,-5426.24"/>
<polygon fill="blue" stroke="blue" points="2872.96,-5426.35 2870.2,-5416.12 2865.98,-5425.84 2872.96,-5426.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node324" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node324"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="1651,-6556 1369,-6556 1369,-6520 1651,-6520 1651,-6556"/>
<text text-anchor="middle" x="1510" y="-6534.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.2,-6538C1777.54,-6538 1954.79,-6538 2030.9,-6538"/>
<polygon fill="blue" stroke="blue" points="2030.95,-6541.5 2040.95,-6538 2030.95,-6534.5 2030.95,-6541.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node331" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node331"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="2146,-6610 1992,-6610 1992,-6574 2146,-6574 2146,-6610"/>
<text text-anchor="middle" x="2069" y="-6588.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.18,-6548.39C1709.6,-6553.01 1778.13,-6558.8 1840,-6565 1886.91,-6569.7 1939.14,-6575.82 1981.76,-6581.05"/>
<polygon fill="blue" stroke="blue" points="1981.46,-6584.54 1991.82,-6582.28 1982.32,-6577.59 1981.46,-6584.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.18,-6527.61C1709.6,-6522.99 1778.13,-6517.2 1840,-6511 1904.21,-6504.57 1978.39,-6495.47 2024.25,-6489.66"/>
<polygon fill="blue" stroke="blue" points="2024.95,-6493.09 2034.43,-6488.36 2024.07,-6486.15 2024.95,-6493.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.27,-6628.47C2610.03,-6620.16 2764.55,-6599.38 2835.21,-6589.88"/>
<polygon fill="blue" stroke="blue" points="2835.96,-6593.31 2845.4,-6588.51 2835.03,-6586.37 2835.96,-6593.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node326" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node326"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="1643,-6502 1377,-6502 1377,-6466 1643,-6466 1643,-6502"/>
<text text-anchor="middle" x="1510" y="-6480.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.17,-6493.76C1703.27,-6498.47 1775.28,-6504.51 1840,-6511 1907.19,-6517.73 1985.31,-6527.38 2030.46,-6533.13"/>
<polygon fill="blue" stroke="blue" points="2030.3,-6536.64 2040.66,-6534.44 2031.19,-6529.7 2030.3,-6536.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.23,-6466.48C1707.51,-6464.66 1782.98,-6473.06 1840,-6511 1862.51,-6525.98 1845.89,-6549.44 1868,-6565 1900.61,-6587.96 1943.77,-6595.84 1981.64,-6597.51"/>
<polygon fill="blue" stroke="blue" points="1981.55,-6601.01 1991.65,-6597.81 1981.76,-6594.01 1981.55,-6601.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643,-6484C1766.15,-6484 1942.73,-6484 2024,-6484"/>
<polygon fill="blue" stroke="blue" points="2024.36,-6487.5 2034.36,-6484 2024.36,-6480.5 2024.36,-6487.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node327" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node327"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="1618,-6664 1402,-6664 1402,-6628 1618,-6628 1618,-6664"/>
<text text-anchor="middle" x="1510" y="-6642.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.09,-6662.28C1686.97,-6667.06 1775.35,-6662.02 1840,-6619 1862.51,-6604.02 1845.89,-6580.56 1868,-6565 1916.31,-6531 1987.73,-6530.07 2030.87,-6533.4"/>
<polygon fill="blue" stroke="blue" points="2030.67,-6536.9 2040.94,-6534.3 2031.29,-6529.93 2030.67,-6536.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.14,-6638.19C1682.51,-6633.25 1766.01,-6626.41 1840,-6619 1886.91,-6614.3 1939.14,-6608.18 1981.76,-6602.95"/>
<polygon fill="blue" stroke="blue" points="1982.32,-6606.41 1991.82,-6601.72 1981.46,-6599.46 1982.32,-6606.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.77,-6664.02C1669.86,-6674.09 1773.35,-6675.09 1840,-6619 1877.94,-6587.07 1830.91,-6543.91 1868,-6511 1910.55,-6473.25 1979.57,-6472.52 2024.37,-6477.04"/>
<polygon fill="blue" stroke="blue" points="2024.05,-6480.53 2034.38,-6478.18 2024.84,-6473.57 2024.05,-6480.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2554.25,-6490.93C2604.97,-6499.71 2702.65,-6507.65 2752,-6452 2791.86,-6407.06 2735.07,-5418.37 2772,-5371 2786.47,-5352.44 2812.32,-5345.82 2834.05,-5343.78"/>
<polygon fill="blue" stroke="blue" points="2834.57,-5347.25 2844.32,-5343.11 2834.11,-5340.26 2834.57,-5347.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2097.3,-6542.44C2139.25,-6547.65 2219.95,-6551.07 2270,-6511 2289.98,-6495 2269.69,-6472.58 2290,-6457 2371.81,-6394.23 2681.86,-6489.58 2752,-6414 2793.58,-6369.2 2740.06,-5366.11 2772,-5314 2785.72,-5291.61 2812.38,-5278.14 2834.66,-5270.38"/>
<polygon fill="blue" stroke="blue" points="2835.76,-5273.7 2844.2,-5267.3 2833.61,-5267.04 2835.76,-5273.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2097.31,-6537.4C2136.89,-6537.48 2211.8,-6541.16 2270,-6565 2280.28,-6569.21 2279.47,-6576.44 2290,-6580 2391.57,-6614.34 2724.89,-6595.14 2835.48,-6587.6"/>
<polygon fill="blue" stroke="blue" points="2835.74,-6591.09 2845.47,-6586.91 2835.25,-6584.11 2835.74,-6591.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node330" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node330"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="2227.5,-6718 1910.5,-6718 1910.5,-6682 2227.5,-6682 2227.5,-6718"/>
<text text-anchor="middle" x="2069" y="-6696.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2227.77,-6696.67C2243.17,-6691.26 2257.64,-6683.61 2270,-6673 2293.9,-6652.48 2267.7,-6627.25 2290,-6605 2342.51,-6552.63 2433.46,-6540.71 2483.82,-6538.3"/>
<polygon fill="blue" stroke="blue" points="2484.06,-6541.79 2493.92,-6537.92 2483.8,-6534.79 2484.06,-6541.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2207.25,-6682C2228.28,-6679.09 2249.73,-6676.03 2270,-6673 2346.19,-6661.61 2435.15,-6646.62 2483.74,-6638.28"/>
<polygon fill="blue" stroke="blue" points="2484.5,-6641.7 2493.76,-6636.55 2483.31,-6634.8 2484.5,-6641.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2227.64,-6699.36C2243.45,-6693.56 2258.05,-6685.08 2270,-6673 2321.01,-6621.41 2238.55,-6562.14 2290,-6511 2339.05,-6462.24 2426.04,-6466.82 2477.83,-6475.07"/>
<polygon fill="blue" stroke="blue" points="2477.25,-6478.52 2487.7,-6476.76 2478.43,-6471.62 2477.25,-6478.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge510" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2146.08,-6582.87C2244.02,-6571.12 2410.28,-6551.17 2483.52,-6542.38"/>
<polygon fill="blue" stroke="blue" points="2484.12,-6545.83 2493.63,-6541.16 2483.28,-6538.88 2484.12,-6545.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge508" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2146.08,-6598.76C2244.02,-6607.47 2410.28,-6622.25 2483.52,-6628.76"/>
<polygon fill="blue" stroke="blue" points="2483.36,-6632.26 2493.63,-6629.66 2483.98,-6625.28 2483.36,-6632.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge509" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2146.17,-6599.53C2186.94,-6599.51 2235.67,-6592.48 2270,-6565 2289.98,-6549 2269.88,-6526.82 2290,-6511 2343.69,-6468.77 2427.43,-6470.7 2477.68,-6476.78"/>
<polygon fill="blue" stroke="blue" points="2477.5,-6480.29 2487.87,-6478.12 2478.42,-6473.35 2477.5,-6480.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node332" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node332"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2186,-6664 1952,-6664 1952,-6628 2186,-6628 2186,-6664"/>
<text text-anchor="middle" x="2069" y="-6642.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge640" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.07,-6639.8C2214.2,-6635.74 2243.73,-6629.26 2270,-6619 2280.11,-6615.05 2280.22,-6609.69 2290,-6605 2355.02,-6573.82 2437.47,-6554.14 2483.92,-6544.69"/>
<polygon fill="blue" stroke="blue" points="2484.69,-6548.1 2493.81,-6542.72 2483.32,-6541.24 2484.69,-6548.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge638" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.18,-6642.39C2284.61,-6639.32 2419.63,-6635.12 2483.58,-6633.13"/>
<polygon fill="blue" stroke="blue" points="2483.69,-6636.63 2493.58,-6632.82 2483.48,-6629.63 2483.69,-6636.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge639" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.24,-6653.88C2216.89,-6650.15 2247.61,-6640.32 2270,-6619 2305.35,-6585.34 2254.36,-6544.36 2290,-6511 2340.26,-6463.97 2426.16,-6467.77 2477.56,-6475.44"/>
<polygon fill="blue" stroke="blue" points="2477.23,-6478.94 2487.66,-6477.07 2478.35,-6472.03 2477.23,-6478.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node333" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node333"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="1647.5,-6610 1372.5,-6610 1372.5,-6574 1647.5,-6574 1647.5,-6610"/>
<text text-anchor="middle" x="1510" y="-6588.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge718" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.56,-6581.9C1706.76,-6577.23 1776.85,-6571.33 1840,-6565 1907.19,-6558.27 1985.31,-6548.62 2030.46,-6542.87"/>
<polygon fill="blue" stroke="blue" points="2031.19,-6546.3 2040.66,-6541.56 2030.3,-6539.36 2031.19,-6546.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge716" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.61,-6592C1751.98,-6592 1892.61,-6592 1981.81,-6592"/>
<polygon fill="blue" stroke="blue" points="1981.89,-6595.5 1991.89,-6592 1981.89,-6588.5 1981.89,-6595.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge717" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.69,-6609.63C1710.97,-6610.94 1784.3,-6602.07 1840,-6565 1862.51,-6550.02 1845.89,-6526.56 1868,-6511 1913.89,-6478.7 1980.64,-6476.25 2024.19,-6478.94"/>
<polygon fill="blue" stroke="blue" points="2023.96,-6482.43 2034.19,-6479.67 2024.48,-6475.45 2023.96,-6482.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge748" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2103.62,-6470.42C2146.21,-6453.89 2222.23,-6426.63 2290,-6414 2340.56,-6404.58 2716.43,-6423.14 2752,-6386 2796.27,-6339.77 2732.67,-5284.5 2772,-5234 2785.08,-5217.21 2807.47,-5210.19 2827.71,-5207.49"/>
<polygon fill="blue" stroke="blue" points="2828.13,-5210.96 2837.73,-5206.46 2827.42,-5204 2828.13,-5210.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="edge749" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2103.77,-6478.81C2147.12,-6474.12 2222.41,-6472.9 2270,-6511 2289.98,-6527 2269.23,-6550.04 2290,-6565 2310.84,-6580.01 2726.34,-6579.05 2752,-6580 2779.89,-6581.04 2811.44,-6582.36 2835.11,-6583.39"/>
<polygon fill="blue" stroke="blue" points="2835.25,-6586.9 2845.39,-6583.84 2835.56,-6579.9 2835.25,-6586.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2585.05,-4148.77C2637.94,-4155.42 2711.18,-4154.35 2752,-4109 2783.5,-4074 2758.61,-2459.14 2772,-2414 2787.18,-2362.82 2824.3,-2312.22 2848.66,-2282.82"/>
<polygon fill="blue" stroke="blue" points="2851.39,-2285.01 2855.16,-2275.11 2846.04,-2280.5 2851.39,-2285.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2585.07,-4148.79C2637.97,-4155.44 2711.22,-4154.38 2752,-4109 2787.95,-4069 2745.31,-2219.69 2772,-2173 2781.12,-2157.04 2796.36,-2144.84 2812.2,-2135.75"/>
<polygon fill="blue" stroke="blue" points="2813.87,-2138.82 2821.02,-2131.01 2810.56,-2132.65 2813.87,-2138.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge512" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2554.26,-4089.29C2604.98,-4098.62 2702.67,-4107.56 2752,-4052 2785.6,-4014.15 2741.03,-2270.03 2772,-2230 2786.46,-2211.3 2812.49,-2204.71 2834.3,-2202.71"/>
<polygon fill="blue" stroke="blue" points="2834.52,-2206.2 2844.28,-2202.08 2834.08,-2199.22 2834.52,-2206.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge511" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2554.26,-4089.29C2604.99,-4098.62 2702.68,-4107.57 2752,-4052 2786.65,-4012.96 2746.09,-2218.31 2772,-2173 2781.12,-2157.04 2796.36,-2144.84 2812.2,-2135.75"/>
<polygon fill="blue" stroke="blue" points="2813.87,-2138.82 2821.03,-2131.01 2810.56,-2132.66 2813.87,-2138.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge557" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.13,-4261.26C2600.13,-4295.5 2709.04,-4377.54 2752,-4479 2768.36,-4517.64 2746.07,-5201.01 2772,-5234 2786.54,-5252.5 2812.4,-5259.12 2834.1,-5261.18"/>
<polygon fill="blue" stroke="blue" points="2834.15,-5264.69 2844.36,-5261.86 2834.61,-5257.71 2834.15,-5264.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge737" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2555.69,-4182.06C2606.55,-4172.3 2702.27,-4163.05 2752,-4217 2773.14,-4239.93 2767.9,-4747.08 2772,-4778 2792.36,-4931.6 2842.84,-5110.86 2862.99,-5178.89"/>
<polygon fill="blue" stroke="blue" points="2859.75,-5180.25 2865.96,-5188.83 2866.45,-5178.25 2859.75,-5180.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge738" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2555.86,-4198.1C2606.95,-4208.06 2702.96,-4217.58 2752,-4163 2788.95,-4121.88 2744.58,-2221 2772,-2173 2781.12,-2157.04 2796.35,-2144.84 2812.19,-2135.74"/>
<polygon fill="blue" stroke="blue" points="2813.87,-2138.82 2821.02,-2131.01 2810.56,-2132.65 2813.87,-2138.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.29,-4726.19C2599.08,-4729.99 2703.95,-4745.86 2752,-4812 2779.59,-4849.98 2742.61,-5197.4 2772,-5234 2786.74,-5252.35 2812.58,-5258.97 2834.24,-5261.07"/>
<polygon fill="blue" stroke="blue" points="2834.25,-5264.58 2844.47,-5261.77 2834.73,-5257.6 2834.25,-5264.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="node342" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<g id="a_node342"><a xlink:title=" &#160;&#160;&#160;fn new(room_id: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20230413_Signal_CallLinkRoomId&#39; , room_id).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2899.5,-4662 2845.5,-4662 2845.5,-4626 2899.5,-4626 2899.5,-4662"/>
<text text-anchor="middle" x="2872.5" y="-4640.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.08,-4724.5C2592.61,-4723.1 2680.52,-4717.83 2752,-4698 2781.5,-4689.82 2812.98,-4675.33 2836.22,-4663.42"/>
<polygon fill="blue" stroke="blue" points="2838.09,-4666.4 2845.33,-4658.67 2834.85,-4660.19 2838.09,-4666.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.27,-4619.03C2610.03,-4623.8 2764.55,-4635.74 2835.21,-4641.2"/>
<polygon fill="blue" stroke="blue" points="2835.16,-4644.7 2845.4,-4641.98 2835.7,-4637.72 2835.16,-4644.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge604" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2555.67,-4664.12C2605.21,-4656.12 2697.7,-4649.55 2752,-4698 2754.32,-4700.07 2840.49,-5072.67 2865.03,-5178.98"/>
<polygon fill="blue" stroke="blue" points="2861.68,-5180.01 2867.34,-5188.97 2868.5,-5178.44 2861.68,-5180.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge606" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2555.51,-4668.41C2621.36,-4663.32 2767.1,-4652.06 2835.16,-4646.81"/>
<polygon fill="blue" stroke="blue" points="2835.7,-4650.28 2845.4,-4646.02 2835.16,-4643.3 2835.7,-4650.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge605" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2555.88,-4679.11C2606.98,-4689.09 2703.01,-4698.63 2752,-4644 2797.83,-4592.9 2738.01,-2232.63 2772,-2173 2780.98,-2157.25 2795.91,-2145.17 2811.52,-2136.11"/>
<polygon fill="blue" stroke="blue" points="2813.61,-2138.96 2820.74,-2131.13 2810.28,-2132.8 2813.61,-2138.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge668" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2876.39,-4625.75C2889.28,-4543.57 2941.9,-4199.47 2965,-3915 2969.35,-3861.42 2965.39,-2988.27 3001,-2948 3065.71,-2874.82 3151.53,-2984.59 3218,-2913 3267.47,-2859.71 3196.81,-2640.54 3246,-2587 3272.57,-2558.08 3317.96,-2552.94 3353.12,-2554.09"/>
<polygon fill="blue" stroke="blue" points="3353.05,-2557.59 3363.21,-2554.6 3353.4,-2550.6 3353.05,-2557.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge706" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2554.1,-4501.32C2604.6,-4491.37 2701.99,-4481.21 2752,-4536 2781.15,-4567.93 2745.77,-5279.63 2772,-5314 2786.46,-5332.94 2812.48,-5340.33 2834.29,-5343.03"/>
<polygon fill="blue" stroke="blue" points="2833.98,-5346.52 2844.27,-5344 2834.65,-5339.55 2833.98,-5346.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge707" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2554.32,-4515.99C2605.12,-4524.84 2702.92,-4532.89 2752,-4477 2794.23,-4428.91 2740.29,-2228.59 2772,-2173 2781.11,-2157.03 2796.34,-2144.83 2812.18,-2135.74"/>
<polygon fill="blue" stroke="blue" points="2813.85,-2138.81 2821.01,-2131 2810.54,-2132.64 2813.85,-2138.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge793" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.18,-4556.53C2596.61,-4546.3 2699.96,-4532.98 2752,-4590 2781.26,-4622.06 2745.19,-5336.86 2772,-5371 2786.79,-5389.84 2813.3,-5396.36 2835.24,-5398.29"/>
<polygon fill="blue" stroke="blue" points="2835.07,-5401.79 2845.26,-5398.9 2835.49,-5394.8 2835.07,-5401.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge792" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.27,-4569.56C2596.85,-4579.92 2700.45,-4593.46 2752,-4536 2795.83,-4487.14 2739.48,-2230.02 2772,-2173 2780.98,-2157.25 2795.92,-2145.17 2811.52,-2136.12"/>
<polygon fill="blue" stroke="blue" points="2813.61,-2138.96 2820.75,-2131.13 2810.28,-2132.81 2813.61,-2138.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2570.26,-4009.66C2623.41,-4018.22 2707.23,-4021.77 2752,-3972 2785.42,-3934.84 2747.18,-2216.38 2772,-2173 2781.13,-2157.04 2796.36,-2144.85 2812.2,-2135.75"/>
<polygon fill="blue" stroke="blue" points="2813.88,-2138.83 2821.03,-2131.01 2810.57,-2132.66 2813.88,-2138.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node405" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node405"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="2907.5,-1524 2837.5,-1524 2837.5,-1488 2907.5,-1488 2907.5,-1524"/>
<text text-anchor="middle" x="2872.5" y="-1502.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge741" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2570.36,-3954.95C2623.58,-3962.75 2707.49,-3965.14 2752,-3915 2768.89,-3895.97 2769.69,-2108.34 2772,-2083 2791.39,-1870.12 2846.06,-1617.65 2864.97,-1534.27"/>
<polygon fill="blue" stroke="blue" points="2868.43,-1534.82 2867.24,-1524.29 2861.61,-1533.26 2868.43,-1534.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="node348" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<g id="a_node348"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_profile_key_bytes( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_bytes: ProfileKeyBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::ProfileKeyCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_...">
<polygon fill="white" stroke="black" points="2619,-6189 2423,-6189 2423,-6153 2619,-6153 2619,-6189"/>
<text text-anchor="middle" x="2521" y="-6167.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_profile_key_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2144.65,-6272.14C2182.5,-6267.85 2229,-6261.33 2270,-6252 2337.56,-6236.62 2412.95,-6210.98 2463.1,-6192.67"/>
<polygon fill="blue" stroke="blue" points="2464.61,-6195.84 2472.78,-6189.11 2462.19,-6189.27 2464.61,-6195.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="node389" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<g id="a_node389"><a xlink:title=" &#160;&#160;&#160;pub fn new(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut encoded_profile_key = profile_key_bytes; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profile_key[0] &amp;= 254; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profil...">
<polygon fill="white" stroke="black" points="2899.5,-2845 2845.5,-2845 2845.5,-2809 2899.5,-2809 2899.5,-2845"/>
<text text-anchor="middle" x="2872.5" y="-2823.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2619.19,-6185.2C2666.33,-6186.21 2719.63,-6177.56 2752,-6141 2774.25,-6115.87 2770.01,-3757.51 2772,-3724 2792.43,-3380.4 2851.07,-2965.96 2867.29,-2855.29"/>
<polygon fill="blue" stroke="blue" points="2870.78,-2855.66 2868.77,-2845.26 2863.85,-2854.64 2870.78,-2855.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2142.28,-6344.45C2185.97,-6346.89 2239.02,-6341.05 2270,-6306 2303.61,-6267.97 2257.02,-4517.58 2290,-4479 2425.3,-4320.71 2616.88,-4559.45 2752,-4401 2772.89,-4376.5 2769.12,-2115.07 2772,-2083 2791.15,-1870.1 2845.97,-1617.64 2864.95,-1534.26"/>
<polygon fill="blue" stroke="blue" points="2868.41,-1534.82 2867.23,-1524.29 2861.59,-1533.26 2868.41,-1534.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2142.4,-6181.24C2186.13,-6182.97 2239.2,-6176.33 2270,-6141 2300.34,-6106.2 2260.5,-4514.52 2290,-4479 2423.77,-4317.95 2618.47,-4548.25 2752,-4387 2791.23,-4339.63 2741.52,-2226.42 2772,-2173 2781.11,-2157.04 2796.34,-2144.83 2812.18,-2135.74"/>
<polygon fill="blue" stroke="blue" points="2813.86,-2138.81 2821.01,-2131 2810.55,-2132.65 2813.86,-2138.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node386" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node386"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="2907.5,-1387 2837.5,-1387 2837.5,-1351 2907.5,-1351 2907.5,-1387"/>
<text text-anchor="middle" x="2872.5" y="-1365.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge694" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2144.74,-6236.57C2187.94,-6238.65 2239.6,-6232.39 2270,-6198 2303.06,-6160.6 2258.6,-4439.81 2290,-4401 2422.38,-4237.38 2619.96,-4460.9 2752,-4297 2802.1,-4234.81 2730.66,-1490.33 2772,-1422 2784.25,-1401.76 2807.11,-1388.82 2827.83,-1380.8"/>
<polygon fill="blue" stroke="blue" points="2829.23,-1384.01 2837.46,-1377.34 2826.87,-1377.42 2829.23,-1384.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.3,-3531.19C2239.19,-3525.3 2256.56,-3515.77 2270,-3501 2307.2,-3460.13 2252.96,-3045.02 2290,-3004 2429.02,-2850.07 2609.98,-3089.17 2752,-2938 2790.31,-2897.22 2736.27,-2730.06 2772,-2687 2785.79,-2670.39 2808.67,-2663.43 2829.02,-2660.73"/>
<polygon fill="blue" stroke="blue" points="2829.47,-2664.2 2839.06,-2659.69 2828.75,-2657.24 2829.47,-2664.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="node408" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<g id="a_node408"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M1(service_id: ServiceId) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_UID_CalcM1&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;service_id.service_id_binary(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3141,-2131 3070,-2131 3070,-2095 3141,-2095 3141,-2131"/>
<text text-anchor="middle" x="3105.5" y="-2109.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.15,-3531.66C2239.18,-3525.73 2256.63,-3516.07 2270,-3501 2320.44,-3444.14 2238.52,-2188.92 2290,-2133 2493.96,-1911.46 2921.97,-2044.56 3060.34,-2095.66"/>
<polygon fill="blue" stroke="blue" points="3059.2,-2098.97 3069.79,-2099.2 3061.65,-2092.42 3059.2,-2098.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2097.16,-3317.89C2140.8,-3325.57 2226.09,-3332.92 2270,-3285 2301.94,-3250.15 2258.86,-2895.57 2290,-2860 2427.45,-2702.96 2610.35,-2929.26 2752,-2776 2781.87,-2743.69 2743.54,-2612.56 2772,-2579 2787.12,-2561.17 2812.72,-2554.51 2834.16,-2552.26"/>
<polygon fill="blue" stroke="blue" points="2834.59,-2555.73 2844.29,-2551.48 2834.05,-2548.75 2834.59,-2555.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2097.34,-3318.05C2141.24,-3325.96 2226.88,-3333.63 2270,-3285 2322.41,-3225.88 2233.74,-1918.47 2290,-1863 2396.81,-1757.68 2835.65,-1787.05 2965,-1863 3048.18,-1911.84 3085.41,-2030.29 3098.56,-2084.76"/>
<polygon fill="blue" stroke="blue" points="3095.21,-2085.8 3100.88,-2094.75 3102.03,-2084.22 3095.21,-2085.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2161.51,-3269.31C2200.38,-3268.79 2242.88,-3260.21 2270,-3231 2320.44,-3176.67 2243.14,-2955.44 2290,-2898 2424.39,-2733.26 2604.42,-2927.03 2752,-2774 2779.54,-2745.44 2744.5,-2715.6 2772,-2687 2786.79,-2671.62 2809.39,-2664.71 2829.31,-2661.71"/>
<polygon fill="blue" stroke="blue" points="2829.92,-2665.17 2839.42,-2660.48 2829.08,-2658.22 2829.92,-2665.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2161.62,-3269.88C2200.75,-3269.55 2243.44,-3260.95 2270,-3231 2321.83,-3172.55 2234.37,-1879.84 2290,-1825 2503.64,-1614.38 2710.8,-1665.68 2965,-1825 3058.48,-1883.59 3090.87,-2024.57 3100.7,-2084.87"/>
<polygon fill="blue" stroke="blue" points="3097.25,-2085.48 3102.24,-2094.83 3104.17,-2084.41 3097.25,-2085.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2096.09,-3209.68C2139.37,-3217.4 2225.64,-3225.22 2270,-3177 2299.6,-3144.82 2259.74,-2815.56 2290,-2784 2361.36,-2709.58 2679.11,-2813.93 2752,-2741 2786.08,-2706.91 2740.98,-2561.9 2772,-2525 2787.24,-2506.87 2813.32,-2500.27 2834.95,-2498.12"/>
<polygon fill="blue" stroke="blue" points="2835.42,-2501.6 2845.15,-2497.39 2834.92,-2494.61 2835.42,-2501.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2110.52,-3427.97C2156.46,-3434.4 2230.14,-3436.31 2270,-3393 2299.31,-3361.16 2262.52,-3037.43 2290,-3004 2424.45,-2840.46 2604.54,-3039.9 2752,-2888 2780.84,-2858.29 2750.5,-2832.39 2772,-2797 2786.68,-2772.84 2810.93,-2752.39 2831.81,-2737.84"/>
<polygon fill="blue" stroke="blue" points="2833.89,-2740.66 2840.22,-2732.17 2829.97,-2734.86 2833.89,-2740.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge570" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2162.52,-3485.52C2201.23,-3484.94 2243.32,-3476.25 2270,-3447 2305.45,-3408.13 2256.11,-3014.23 2290,-2974 2425.33,-2813.31 2611.57,-3030.26 2752,-2874 2807.87,-2811.83 2717.76,-2750.6 2772,-2687 2786.01,-2670.57 2808.91,-2663.63 2829.21,-2660.88"/>
<polygon fill="blue" stroke="blue" points="2829.64,-2664.36 2839.22,-2659.83 2828.91,-2657.4 2829.64,-2664.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge770" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2106.54,-3373.44C2152.15,-3380.34 2229.11,-3383.74 2270,-3339 2303.84,-3301.97 2255.91,-2924.8 2290,-2888 2430.57,-2736.27 2607.25,-2979.74 2752,-2832 2783.1,-2800.25 2743.27,-2666.91 2772,-2633 2784.95,-2617.72 2805.59,-2610.64 2824.72,-2607.51"/>
<polygon fill="blue" stroke="blue" points="2825.37,-2610.95 2834.83,-2606.18 2824.46,-2604.01 2825.37,-2610.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress(). -->
<g id="node359" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().</title>
<g id="a_node359"><a xlink:title=" &#160;&#160;&#160;pub fn decompress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement&lt;curve25519_dalek_signal::RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ZkGroupDeserializationFailure, &#160;&#160;&#160;&#160;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GroupSendEndorsem...">
<polygon fill="white" stroke="black" points="2119.5,-3168 2018.5,-3168 2018.5,-3132 2119.5,-3132 2119.5,-3168"/>
<text text-anchor="middle" x="2069" y="-3146.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="edge801" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2069.44,-3131.83C2067.79,-3042.69 2073.27,-2648.84 2290,-2471 2337.1,-2432.35 2409.05,-2430 2459.91,-2434.51"/>
<polygon fill="blue" stroke="blue" points="2459.81,-2438.02 2470.11,-2435.54 2460.51,-2431.06 2459.81,-2438.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2136.02,-3974.14C2181.43,-3969.68 2238.95,-3955.6 2270,-3915 2295.66,-3881.45 2260.88,-3185.59 2290,-3155 2360.99,-3080.42 2668.78,-3180.62 2752,-3120 2839.99,-3055.9 2863.36,-2915.47 2869.43,-2855.29"/>
<polygon fill="blue" stroke="blue" points="2872.95,-2855.3 2870.38,-2845.02 2865.97,-2854.66 2872.95,-2855.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1937.32,-5560.16C1902.79,-5555.66 1870.59,-5542.39 1854,-5512 1809.35,-5430.22 1989.04,-5168.64 2049.66,-5084.4"/>
<polygon fill="blue" stroke="blue" points="2052.61,-5086.3 2055.64,-5076.14 2046.94,-5082.2 2052.61,-5086.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node402" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node402"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="2549,-6801 2493,-6801 2493,-6765 2549,-6765 2549,-6801"/>
<text text-anchor="middle" x="2521" y="-6779.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.39,-6023.33C2178.42,-6019.72 2236.6,-6023.89 2270,-6061 2321.45,-6118.18 2238.42,-6695.94 2290,-6753 2338.13,-6806.24 2430.72,-6799.89 2482.54,-6791.12"/>
<polygon fill="blue" stroke="blue" points="2483.42,-6794.52 2492.64,-6789.29 2482.17,-6787.63 2483.42,-6794.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node394" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node394"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="2549,-3203 2493,-3203 2493,-3167 2549,-3167 2549,-3203"/>
<text text-anchor="middle" x="2521" y="-3181.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2166.6,-5613.87C2204.37,-5612.88 2244.63,-5603.78 2270,-5575 2313.41,-5525.76 2246.17,-3260.86 2290,-3212 2337.97,-3158.52 2431.03,-3166.55 2482.87,-3176.27"/>
<polygon fill="blue" stroke="blue" points="2482.47,-3179.76 2492.96,-3178.28 2483.84,-3172.89 2482.47,-3179.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node378" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node378"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="2644.5,-3826 2397.5,-3826 2397.5,-3790 2644.5,-3790 2644.5,-3826"/>
<text text-anchor="middle" x="2521" y="-3804.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2160.14,-5775.94C2199.69,-5775.82 2243.15,-5767.39 2270,-5737 2304.98,-5697.4 2254.68,-3874.29 2290,-3835 2314.45,-3807.81 2350.55,-3796.53 2386.95,-3793.29"/>
<polygon fill="blue" stroke="blue" points="2387.47,-3796.76 2397.21,-3792.58 2386.99,-3789.78 2387.47,-3796.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node397" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node397"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="2548,-3527 2494,-3527 2494,-3491 2548,-3491 2548,-3527"/>
<text text-anchor="middle" x="2521" y="-3505.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2160.15,-5775.95C2199.72,-5775.84 2243.17,-5767.41 2270,-5737 2310.45,-5691.15 2249.16,-3581.5 2290,-3536 2338.24,-3482.26 2432.02,-3490.64 2483.68,-3500.43"/>
<polygon fill="blue" stroke="blue" points="2483.24,-3503.91 2493.73,-3502.45 2484.62,-3497.04 2483.24,-3503.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node395" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node395"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="2549,-3365 2493,-3365 2493,-3329 2549,-3329 2549,-3365"/>
<text text-anchor="middle" x="2521" y="-3343.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2336.28,-5502.91C2311.62,-5494.61 2291.04,-5479.78 2280,-5455 2268.29,-5428.71 2268.29,-3409.29 2280,-3383 2311.81,-3311.58 2423.29,-3324.52 2482.83,-3337.23"/>
<polygon fill="blue" stroke="blue" points="2482.1,-3340.66 2492.62,-3339.42 2483.62,-3333.82 2482.1,-3340.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node396" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node396"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="2549,-3257 2493,-3257 2493,-3221 2549,-3221 2549,-3257"/>
<text text-anchor="middle" x="2521" y="-3235.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2083.61,-5475.77C2122.15,-5422.87 2231.72,-5263.42 2270,-5111 2282.48,-5061.29 2255.73,-3304.11 2290,-3266 2338.04,-3212.58 2431.07,-3220.58 2482.88,-3230.28"/>
<polygon fill="blue" stroke="blue" points="2482.49,-3233.77 2492.98,-3232.29 2483.85,-3226.91 2482.49,-3233.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node377" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node377"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="2690,-3880 2352,-3880 2352,-3844 2690,-3844 2690,-3880"/>
<text text-anchor="middle" x="2521" y="-3858.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2205.04,-5879.62C2229.85,-5874.46 2253.18,-5864.04 2270,-5845 2305.49,-5804.82 2256.4,-3956.78 2290,-3915 2303.92,-3897.69 2322.25,-3885.34 2342.51,-3876.62"/>
<polygon fill="blue" stroke="blue" points="2343.95,-3879.81 2351.94,-3872.86 2341.36,-3873.31 2343.95,-3879.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node391" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node391"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="2549,-3311 2493,-3311 2493,-3275 2549,-3275 2549,-3311"/>
<text text-anchor="middle" x="2521" y="-3289.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2205.08,-5879.65C2229.89,-5874.49 2253.21,-5864.06 2270,-5845 2316.37,-5792.37 2243.18,-3372.22 2290,-3320 2337.96,-3266.51 2431.03,-3274.54 2482.86,-3284.27"/>
<polygon fill="blue" stroke="blue" points="2482.47,-3287.76 2492.96,-3286.28 2483.84,-3280.89 2482.47,-3287.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node392" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node392"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="2548,-3689 2494,-3689 2494,-3653 2548,-3653 2548,-3689"/>
<text text-anchor="middle" x="2521" y="-3667.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2205.06,-5879.63C2229.86,-5874.47 2253.19,-5864.05 2270,-5845 2308.98,-5800.82 2253.1,-3769.93 2290,-3724 2336.22,-3666.47 2431.24,-3663.66 2483.52,-3667.04"/>
<polygon fill="blue" stroke="blue" points="2483.45,-3670.55 2493.69,-3667.82 2483.98,-3663.57 2483.45,-3670.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2205.24,-5879.51C2229.96,-5874.34 2253.2,-5863.94 2270,-5845 2321.46,-5786.97 2244.08,-4511.51 2290,-4449 2417.98,-4274.8 2624.44,-4471.51 2752,-4297 2786.82,-4249.37 2742.74,-2224.24 2772,-2173 2781.11,-2157.04 2796.35,-2144.84 2812.19,-2135.74"/>
<polygon fill="blue" stroke="blue" points="2813.86,-2138.82 2821.02,-2131 2810.55,-2132.65 2813.86,-2138.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2221.55,-5920.22C2238.73,-5915.39 2255.31,-5908.54 2270,-5899 2413.95,-5805.51 2488.9,-5597.08 2512.04,-5521.8"/>
<polygon fill="blue" stroke="blue" points="2515.43,-5522.67 2514.96,-5512.08 2508.73,-5520.65 2515.43,-5522.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node401" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node401"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2548,-6855 2494,-6855 2494,-6819 2548,-6819 2548,-6855"/>
<text text-anchor="middle" x="2521" y="-6833.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge521" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2096.3,-6086.02C2140.31,-6084.34 2228.13,-6088.24 2270,-6141 2316.23,-6199.25 2239.75,-6755.18 2290,-6810 2338.8,-6863.24 2432.35,-6855.06 2483.83,-6845.44"/>
<polygon fill="blue" stroke="blue" points="2484.72,-6848.83 2493.84,-6843.45 2483.35,-6841.97 2484.72,-6848.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node398" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node398"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="2549,-3419 2493,-3419 2493,-3383 2549,-3383 2549,-3419"/>
<text text-anchor="middle" x="2521" y="-3397.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge590" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2212.2,-5661.99C2234.31,-5656.38 2254.82,-5646.21 2270,-5629 2310.45,-5583.15 2249.16,-3473.5 2290,-3428 2337.99,-3374.54 2431.04,-3382.55 2482.87,-3392.27"/>
<polygon fill="blue" stroke="blue" points="2482.48,-3395.76 2492.97,-3394.29 2483.84,-3388.9 2482.48,-3395.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="edge658" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2255.53,-5995.14C2260.66,-5998.63 2265.51,-6002.57 2270,-6007 2312.88,-6049.28 2247.03,-6098.82 2290,-6141 2321.86,-6172.28 2369.26,-6182.09 2412.76,-6183.16"/>
<polygon fill="blue" stroke="blue" points="2412.82,-6186.66 2422.85,-6183.26 2412.88,-6179.66 2412.82,-6186.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge659" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1882.25,-5986.11C1870.73,-5993.45 1860.98,-6003.21 1854,-6016 1841.65,-6038.63 1841.65,-6109.37 1854,-6132 1878.36,-6176.62 1936.14,-6185.21 1985.67,-6183.27"/>
<polygon fill="blue" stroke="blue" points="1985.98,-6186.76 1995.77,-6182.73 1985.6,-6179.77 1985.98,-6186.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node393" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node393"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="2548,-3581 2494,-3581 2494,-3545 2548,-3545 2548,-3581"/>
<text text-anchor="middle" x="2521" y="-3559.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge660" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2255.54,-5966.26C2260.75,-5962.39 2265.6,-5957.99 2270,-5953 2313.41,-5903.76 2246.17,-3638.86 2290,-3590 2338.22,-3536.24 2432.01,-3544.63 2483.68,-3554.42"/>
<polygon fill="blue" stroke="blue" points="2483.23,-3557.9 2493.73,-3556.44 2484.62,-3551.04 2483.23,-3557.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node400" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node400"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="2548,-3473 2494,-3473 2494,-3437 2548,-3437 2548,-3473"/>
<text text-anchor="middle" x="2521" y="-3451.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge702" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.17,-5716.49C2233.06,-5711 2254.35,-5700.74 2270,-5683 2310.45,-5637.15 2249.16,-3527.5 2290,-3482 2338.24,-3428.26 2432.02,-3436.64 2483.68,-3446.43"/>
<polygon fill="blue" stroke="blue" points="2483.24,-3449.91 2493.73,-3448.45 2484.62,-3443.04 2483.24,-3449.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge775" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2235.61,-5815.8C2248.57,-5809.93 2260.35,-5801.87 2270,-5791 2318.39,-5736.48 2248.52,-4538.94 2290,-4479 2415.59,-4297.53 2624.63,-4477.23 2752,-4297 2770.38,-4270.99 2769.69,-3755.77 2772,-3724 2797,-3380.7 2852.36,-2966.04 2867.57,-2855.31"/>
<polygon fill="blue" stroke="blue" points="2871.06,-2855.65 2868.95,-2845.27 2864.12,-2854.7 2871.06,-2855.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node399" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node399"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="2548,-3635 2494,-3635 2494,-3599 2548,-3599 2548,-3635"/>
<text text-anchor="middle" x="2521" y="-3613.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge774" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2235.67,-5815.86C2248.62,-5809.98 2260.38,-5801.9 2270,-5791 2309.46,-5746.28 2250.15,-3688.38 2290,-3644 2338.25,-3590.26 2432.02,-3598.64 2483.68,-3608.43"/>
<polygon fill="blue" stroke="blue" points="2483.24,-3611.91 2493.73,-3610.45 2484.62,-3605.04 2483.24,-3611.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="node374" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<g id="a_node374"><a xlink:title=" &#160;&#160;&#160;pub fn get_point_single_elligator(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes_single_elligator( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.internal_sho.squeeze_and_ratchet_as_array(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3500,-2632 3308,-2632 3308,-2596 3500,-2596 3500,-2632"/>
<text text-anchor="middle" x="3404" y="-2610.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M3500.13,-2619.61C3526.41,-2616.11 3552.48,-2606.97 3570,-2587 3602.37,-2550.11 3587.54,-1751.95 3598,-1704 3626.29,-1574.27 3700.21,-1432.22 3732.52,-1374.08"/>
<polygon fill="blue" stroke="blue" points="3735.68,-1375.6 3737.51,-1365.17 3729.57,-1372.18 3735.68,-1375.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M3433.4,-2541.95C3510.85,-2493.53 3733.47,-2359.67 3936,-2289 3950.98,-2283.77 3967.27,-2279.43 3983.16,-2275.87"/>
<polygon fill="blue" stroke="blue" points="3983.95,-2279.28 3992.99,-2273.76 3982.48,-2272.44 3983.95,-2279.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate(). -->
<g id="node376" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().</title>
<g id="a_node376"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_Credentials_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get...">
<polygon fill="white" stroke="black" points="2560.5,-3772 2481.5,-3772 2481.5,-3736 2560.5,-3736 2560.5,-3772"/>
<text text-anchor="middle" x="2521" y="-3750.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2560.66,-3762.41C2612.82,-3771.22 2704.65,-3777.27 2752,-3724 2782.29,-3689.93 2739.57,-2115.04 2772,-2083 2913.02,-1943.69 3069.14,-1952.11 3218,-2083 3254.51,-2115.11 3229.98,-2254.09 3246,-2300 3278.48,-2393.07 3347.25,-2488.87 3381.99,-2533.77"/>
<polygon fill="blue" stroke="blue" points="3379.35,-2536.08 3388.26,-2541.81 3384.86,-2531.77 3379.35,-2536.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node380" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node380"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2933,-3826 2812,-3826 2812,-3790 2933,-3790 2933,-3826"/>
<text text-anchor="middle" x="2872.5" y="-3804.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2690.3,-3844.32C2711.13,-3841.52 2732.09,-3838.41 2752,-3835 2768.23,-3832.22 2785.58,-3828.65 2801.88,-3825.03"/>
<polygon fill="blue" stroke="blue" points="2802.89,-3828.39 2811.87,-3822.77 2801.35,-3821.56 2802.89,-3828.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2644.73,-3808C2697.28,-3808 2756.74,-3808 2801.59,-3808"/>
<polygon fill="blue" stroke="blue" points="2801.79,-3811.5 2811.79,-3808 2801.79,-3804.5 2801.79,-3811.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node379" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node379"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="2108.5,-3772 2029.5,-3772 2029.5,-3736 2108.5,-3736 2108.5,-3772"/>
<text text-anchor="middle" x="2069" y="-3750.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge672" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2108.76,-3748.3C2152.7,-3744.08 2224.19,-3744.32 2270,-3781 2289.98,-3797 2269.88,-3819.18 2290,-3835 2305.41,-3847.12 2323.29,-3855.6 2342.15,-3861.39"/>
<polygon fill="blue" stroke="blue" points="2341.21,-3864.76 2351.78,-3864.1 2343.1,-3858.03 2341.21,-3864.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge676" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2108.87,-3745.55C2156.15,-3732.99 2234.08,-3704.43 2270,-3647 2300.78,-3597.79 2249.87,-3166.93 2290,-3125 2361.23,-3050.58 2667.63,-3146.1 2752,-3087 2831.15,-3031.56 2859.01,-2910.24 2867.83,-2855.18"/>
<polygon fill="blue" stroke="blue" points="2871.32,-2855.5 2869.35,-2845.09 2864.4,-2854.46 2871.32,-2855.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge675" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2108.76,-3746.85C2194.73,-3730.99 2400.38,-3693.06 2483.86,-3677.67"/>
<polygon fill="blue" stroke="blue" points="2484.68,-3681.07 2493.88,-3675.82 2483.41,-3674.19 2484.68,-3681.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge674" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2108.79,-3745.12C2155.61,-3732.18 2232.69,-3703.29 2270,-3647 2297,-3606.27 2255.89,-3463 2290,-3428 2339.88,-3376.82 2431.38,-3383.7 2482.65,-3392.68"/>
<polygon fill="blue" stroke="blue" points="2482.18,-3396.15 2492.65,-3394.55 2483.46,-3389.27 2482.18,-3396.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge673" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2108.66,-3745.78C2156.11,-3733.41 2234.62,-3704.99 2270,-3647 2305.68,-3588.52 2253.92,-2472.24 2290,-2414 2404.25,-2229.59 2671.3,-2152.85 2799.85,-2125.74"/>
<polygon fill="blue" stroke="blue" points="2800.9,-2129.09 2809.98,-2123.64 2799.48,-2122.24 2800.9,-2129.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge677" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2873.33,-3789.8C2872.65,-3674.67 2874.84,-3048.15 3001,-2918 3069.15,-2847.7 3151.52,-2951.88 3218,-2880 3262.41,-2831.98 3201.52,-2634.95 3246,-2587 3272.71,-2558.21 3318.08,-2553.05 3353.21,-2554.16"/>
<polygon fill="blue" stroke="blue" points="3353.12,-2557.66 3363.28,-2554.66 3353.46,-2550.67 3353.12,-2557.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system(). -->
<g id="node381" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system().</title>
<g id="a_node381"><a xlink:title=" &#160;&#160;&#160;fn test_system() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let params = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; PARAMS = {:#x?}&#39; , bincode::serialize(&amp;params)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(SystemParams::generate() == SystemParams::get_...">
<polygon fill="white" stroke="black" points="2119,-3826 2019,-3826 2019,-3790 2119,-3790 2119,-3826"/>
<text text-anchor="middle" x="2069" y="-3804.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_system</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate(). -->
<g id="edge777" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2119.36,-3801.87C2163.94,-3796.35 2231.35,-3788.04 2290,-3781 2352.53,-3773.49 2424.66,-3765.06 2471.22,-3759.65"/>
<polygon fill="blue" stroke="blue" points="2471.8,-3763.11 2481.33,-3758.48 2471,-3756.15 2471.8,-3763.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node382" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node382"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="2589.5,-1068 2452.5,-1068 2452.5,-1032 2589.5,-1032 2589.5,-1068"/>
<text text-anchor="middle" x="2521" y="-1046.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.54,-1055.24C2643.31,-1063.36 2715.41,-1083.94 2752,-1136 2804.11,-1210.14 2726.96,-2688.37 2772,-2767 2785.77,-2791.05 2813.42,-2806.56 2836.08,-2815.78"/>
<polygon fill="blue" stroke="blue" points="2834.84,-2819.05 2845.43,-2819.35 2837.34,-2812.51 2834.84,-2819.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system(). -->
<g id="node383" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system().</title>
<g id="a_node383"><a xlink:title=" &#160;&#160;&#160;fn test_system() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let params = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; PARAMS = {:#x?}&#39; , bincode::serialize(&amp;params)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(SystemParams::generate() == SystemParams::get_...">
<polygon fill="white" stroke="black" points="2571,-1014 2471,-1014 2471,-978 2571,-978 2571,-1014"/>
<text text-anchor="middle" x="2521" y="-992.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_system</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate(). -->
<g id="node384" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().</title>
<g id="a_node384"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyCommitment_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2912,-1041 2833,-1041 2833,-1005 2912,-1005 2912,-1041"/>
<text text-anchor="middle" x="2872.5" y="-1019.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2571.33,-999.81C2638.04,-1004.96 2756.29,-1014.1 2822.72,-1019.23"/>
<polygon fill="blue" stroke="blue" points="2822.68,-1022.74 2832.92,-1020.02 2823.22,-1015.76 2822.68,-1022.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2888.07,-1041.17C2941.46,-1108.73 3127.99,-1353.63 3218,-1587 3355.26,-1942.88 3393.55,-2412.57 3401.33,-2531.64"/>
<polygon fill="blue" stroke="blue" points="3397.84,-2531.99 3401.97,-2541.75 3404.83,-2531.55 3397.84,-2531.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node385" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node385"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2607,-3052 2435,-3052 2435,-3016 2607,-3016 2607,-3052"/>
<text text-anchor="middle" x="2521" y="-3030.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.12,-3038.31C2653.11,-3036.84 2709.08,-3028.61 2752,-3002 2808.5,-2966.97 2844.77,-2894.21 2861.23,-2854.43"/>
<polygon fill="blue" stroke="blue" points="2864.51,-2855.66 2864.98,-2845.07 2858.01,-2853.05 2864.51,-2855.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="edge556" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<path fill="none" stroke="blue" d="M2907.73,-1361.13C3011.42,-1337.4 3331.31,-1264.88 3598,-1212 3622.07,-1207.23 3648.39,-1202.37 3672.17,-1198.11"/>
<polygon fill="blue" stroke="blue" points="3672.96,-1201.53 3682.19,-1196.33 3671.73,-1194.64 3672.96,-1201.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="node390" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<g id="a_node390"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY...">
<polygon fill="white" stroke="black" points="3141,-2845 3070,-2845 3070,-2809 3141,-2809 3141,-2845"/>
<text text-anchor="middle" x="3105.5" y="-2823.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="edge555" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2907.93,-1379.41C2928.32,-1387.53 2952.53,-1401.01 2965,-1422 3041.38,-1550.51 2924.64,-2638.48 3001,-2767 3014.08,-2789.01 3038.55,-2803.73 3060.42,-2813.09"/>
<polygon fill="blue" stroke="blue" points="3059.33,-2816.42 3069.92,-2816.89 3061.94,-2809.92 3059.33,-2816.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node387" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node387"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="2623.5,-1387 2418.5,-1387 2418.5,-1351 2623.5,-1351 2623.5,-1387"/>
<text text-anchor="middle" x="2521" y="-1365.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge582" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2623.56,-1369C2691.06,-1369 2776.35,-1369 2827.27,-1369"/>
<polygon fill="blue" stroke="blue" points="2827.28,-1372.5 2837.28,-1369 2827.28,-1365.5 2827.28,-1372.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="node388" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<g id="a_node388"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2912,-1333 2833,-1333 2833,-1297 2912,-1297 2912,-1333"/>
<text text-anchor="middle" x="2872.5" y="-1311.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="edge583" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2623.56,-1353.31C2688.99,-1343.2 2771.12,-1330.51 2822.48,-1322.57"/>
<polygon fill="blue" stroke="blue" points="2823.29,-1325.99 2832.64,-1321 2822.22,-1319.07 2823.29,-1325.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge584" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2623.66,-1365.78C2670.15,-1370.13 2721.55,-1384.31 2752,-1422 2798.97,-1480.13 2734.77,-2702.2 2772,-2767 2785.81,-2791.03 2813.45,-2806.55 2836.1,-2815.77"/>
<polygon fill="blue" stroke="blue" points="2834.86,-2819.04 2845.45,-2819.34 2837.36,-2812.5 2834.86,-2819.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge601" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2912.04,-1316.98C2930.7,-1320.01 2951.86,-1326.87 2965,-1342 3037.15,-1425.11 2924.25,-1508.12 3001,-1587 3069.28,-1657.18 3148.01,-1556.53 3218,-1625 3352.3,-1756.38 3393.91,-2390.39 3401.59,-2531.94"/>
<polygon fill="blue" stroke="blue" points="3398.1,-2532.18 3402.13,-2541.98 3405.09,-2531.81 3398.1,-2532.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M2899.78,-2820.97C2925.5,-2815.18 2965.83,-2806.39 3001,-2800 3048.99,-2791.28 3184.09,-2802.06 3218,-2767 3254.87,-2728.88 3232.39,-2581.26 3246,-2530 3279.1,-2405.32 3662.11,-1540.39 3735.78,-1374.48"/>
<polygon fill="blue" stroke="blue" points="3739.04,-1375.76 3739.91,-1365.2 3732.65,-1372.92 3739.04,-1375.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2899.55,-2827C2938.46,-2827 3012.28,-2827 3059.89,-2827"/>
<polygon fill="blue" stroke="blue" points="3059.93,-2830.5 3069.93,-2827 3059.93,-2823.5 3059.93,-2830.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="edge565" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3141.17,-2821.63C3164.12,-2817 3194.24,-2808.83 3218,-2795 3288.59,-2753.93 3352.2,-2679.94 3383.16,-2640.48"/>
<polygon fill="blue" stroke="blue" points="3386.25,-2642.2 3389.61,-2632.15 3380.72,-2637.91 3386.25,-2642.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.38,-3299.76C2598.36,-3310.02 2700.64,-3322.82 2752,-3266 2798.31,-3214.77 2722.77,-2071.44 2772,-2023 2842.64,-1953.48 3147.04,-1953.8 3218,-2023 3240.2,-2044.65 3244.99,-3108.01 3246,-3139 3298.96,-4764.75 3389.83,-6768.93 3401.71,-7028.79"/>
<polygon fill="blue" stroke="blue" points="3398.22,-7029.07 3402.17,-7038.9 3405.21,-7028.75 3398.22,-7029.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.15,-3669.89C2634.64,-3666.84 2909.12,-3662.27 2965,-3724 2999.31,-3761.9 2998.73,-5512.93 3001,-5564 3027.29,-6155.93 3088.87,-6878 3102.01,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3098.54,-7029.22 3102.9,-7038.88 3105.52,-7028.61 3098.54,-7029.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.14,-3561.76C2634.61,-3558.29 2909.05,-3552.39 2965,-3614 3001.42,-3654.11 2998.63,-5509.88 3001,-5564 3026.97,-6155.94 3088.8,-6878 3102,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3098.53,-7029.22 3102.89,-7038.88 3105.51,-7028.61 3098.53,-7029.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.19,-3568.9C2595.71,-3577.9 2696.36,-3588.92 2752,-3536 2852.65,-3440.27 2868.61,-2975.15 2871.07,-2855.24"/>
<polygon fill="blue" stroke="blue" points="2874.57,-2855.11 2871.26,-2845.05 2867.57,-2854.98 2874.57,-2855.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.24,-3569.53C2596.76,-3579.84 2700.28,-3593.3 2752,-3536 2802.74,-3479.79 2734.28,-2238.67 2772,-2173 2781.16,-2157.06 2796.4,-2144.87 2812.24,-2135.77"/>
<polygon fill="blue" stroke="blue" points="2813.91,-2138.85 2821.07,-2131.03 2810.6,-2132.68 2813.91,-2138.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.21,-3182.65C2599.35,-3176.69 2705.45,-3156.12 2752,-3087 2787.69,-3034 2726.43,-1981.79 2772,-1937 2913.38,-1798.06 3076.21,-1798.48 3218,-1937 3241.89,-1960.34 3244.94,-3105.62 3246,-3139 3297.51,-4764.8 3389.64,-6768.94 3401.69,-7028.79"/>
<polygon fill="blue" stroke="blue" points="3398.2,-7029.07 3402.16,-7038.9 3405.19,-7028.75 3398.2,-7029.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.38,-3353.76C2598.36,-3364.03 2700.65,-3376.82 2752,-3320 2799.2,-3267.77 2721.83,-2102.38 2772,-2053 2807.32,-2018.24 3182.51,-2018.41 3218,-2053 3239.61,-2074.06 3245.01,-3108.84 3246,-3139 3299.53,-4764.73 3389.91,-6768.93 3401.71,-7028.79"/>
<polygon fill="blue" stroke="blue" points="3398.22,-7029.07 3402.17,-7038.9 3405.22,-7028.75 3398.22,-7029.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge573" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.38,-3245.76C2598.36,-3256.03 2700.64,-3268.82 2752,-3212 2798.39,-3160.68 2722.69,-2015.52 2772,-1967 2807.32,-1932.24 3182.54,-1932.38 3218,-1967 3241.3,-1989.75 3244.96,-3106.45 3246,-3139 3297.99,-4764.78 3389.7,-6768.94 3401.69,-7028.79"/>
<polygon fill="blue" stroke="blue" points="3398.2,-7029.07 3402.16,-7038.9 3405.2,-7028.75 3398.2,-7029.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge667" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.14,-3507.76C2634.62,-3504.29 2909.06,-3498.38 2965,-3560 3002.42,-3601.22 2998.57,-5508.38 3001,-5564 3026.82,-6155.95 3088.77,-6878 3101.99,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3098.53,-7029.22 3102.89,-7038.88 3105.5,-7028.61 3098.53,-7029.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge759" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.38,-3407.76C2598.36,-3418.03 2700.66,-3430.83 2752,-3374 2800.09,-3320.77 2720.89,-2133.33 2772,-2083 2807.31,-2048.23 3182.5,-2048.43 3218,-2083 3239.02,-2103.47 3245.02,-3109.67 3246,-3139 3300.12,-4764.71 3389.99,-6768.93 3401.72,-7028.79"/>
<polygon fill="blue" stroke="blue" points="3398.23,-7029.07 3402.18,-7038.9 3405.22,-7028.75 3398.23,-7029.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge758" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.38,-3407.76C2598.35,-3418.02 2700.62,-3430.8 2752,-3374 2796.76,-3324.51 2738.7,-2230.83 2772,-2173 2781.17,-2157.07 2796.42,-2144.88 2812.26,-2135.78"/>
<polygon fill="blue" stroke="blue" points="2813.93,-2138.86 2821.08,-2131.04 2810.62,-2132.69 2813.93,-2138.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge799" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.15,-3615.83C2634.63,-3612.57 2909.09,-3607.33 2965,-3669 3000.36,-3708 2998.68,-5511.4 3001,-5564 3027.12,-6155.93 3088.83,-6878 3102,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3098.54,-7029.22 3102.9,-7038.88 3105.51,-7028.61 3098.54,-7029.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge800" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.15,-3453.76C2634.62,-3450.29 2909.08,-3444.36 2965,-3506 3003.42,-3548.34 2998.52,-5506.88 3001,-5564 3026.68,-6155.95 3088.74,-6878.01 3101.99,-7028.65"/>
<polygon fill="blue" stroke="blue" points="3098.52,-7029.22 3102.89,-7038.88 3105.49,-7028.61 3098.52,-7029.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.04,-6835.41C2594.87,-6834.02 2693.83,-6837.95 2752,-6890 2772.01,-6907.9 2752.34,-6928.72 2772,-6947 2789.04,-6962.85 2814.44,-6969.56 2835.31,-6972.33"/>
<polygon fill="blue" stroke="blue" points="2835.12,-6975.83 2845.44,-6973.43 2835.87,-6968.87 2835.12,-6975.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge526" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2549.3,-6780.93C2593.91,-6778.68 2684.22,-6778.88 2752,-6810 2793.39,-6829 2830.12,-6867.82 2851.6,-6893.88"/>
<polygon fill="blue" stroke="blue" points="2849.02,-6896.26 2858.02,-6901.85 2854.47,-6891.87 2849.02,-6896.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node403" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node403"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="2126.5,-6828 2011.5,-6828 2011.5,-6792 2126.5,-6792 2126.5,-6828"/>
<text text-anchor="middle" x="2069" y="-6806.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge531" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.54,-6813.39C2220.21,-6819.01 2405.04,-6830.1 2483.45,-6834.81"/>
<polygon fill="blue" stroke="blue" points="2483.6,-6838.32 2493.79,-6835.43 2484.02,-6831.33 2483.6,-6838.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge530" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2126.54,-6806.61C2219.76,-6801.01 2403.27,-6790 2482.31,-6785.26"/>
<polygon fill="blue" stroke="blue" points="2482.98,-6788.73 2492.75,-6784.63 2482.56,-6781.74 2482.98,-6788.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node404" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node404"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="2597,-1524 2445,-1524 2445,-1488 2597,-1488 2597,-1524"/>
<text text-anchor="middle" x="2521" y="-1502.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2597.41,-1506C2667.3,-1506 2768.95,-1506 2826.8,-1506"/>
<polygon fill="blue" stroke="blue" points="2827.08,-1509.5 2837.08,-1506 2827.08,-1502.5 2827.08,-1509.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2532.46,-1524.17C2582.35,-1610.82 2796.21,-1982.24 2855.95,-2085.99"/>
<polygon fill="blue" stroke="blue" points="2853.06,-2087.98 2861.08,-2094.9 2859.12,-2084.49 2853.06,-2087.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M2907.92,-1496.18C2925.11,-1491.18 2946.2,-1484.93 2965,-1479 3248.07,-1389.65 3310.49,-1339.82 3598,-1266 3625.73,-1258.88 3656.8,-1252.96 3683.45,-1248.49"/>
<polygon fill="blue" stroke="blue" points="3684.13,-1251.93 3693.43,-1246.85 3683,-1245.02 3684.13,-1251.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2879.97,-1524.13C2898.42,-1575.72 2953.06,-1727.72 3001,-1853 3033.58,-1938.15 3074.01,-2038.17 3093.27,-2085.51"/>
<polygon fill="blue" stroke="blue" points="3090.04,-2086.84 3097.05,-2094.78 3096.52,-2084.2 3090.04,-2086.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node406" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node406"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2597,-1470 2445,-1470 2445,-1434 2597,-1434 2597,-1470"/>
<text text-anchor="middle" x="2521" y="-1448.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2597.13,-1458.8C2642.2,-1463.38 2700.58,-1470.2 2752,-1479 2777.18,-1483.31 2805.04,-1489.52 2827.52,-1494.9"/>
<polygon fill="blue" stroke="blue" points="2826.89,-1498.35 2837.44,-1497.3 2828.54,-1491.54 2826.89,-1498.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="node407" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<g id="a_node407"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_UidEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_a1 = ...">
<polygon fill="white" stroke="black" points="2912,-1470 2833,-1470 2833,-1434 2912,-1434 2912,-1470"/>
<text text-anchor="middle" x="2872.5" y="-1448.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2597.41,-1452C2665.74,-1452 2764.44,-1452 2822.87,-1452"/>
<polygon fill="blue" stroke="blue" points="2822.94,-1455.5 2832.94,-1452 2822.94,-1448.5 2822.94,-1455.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2597.15,-1439.84C2647.3,-1436.23 2711.28,-1441.02 2752,-1479 2763.42,-1489.65 2845.63,-1962.91 2866.63,-2084.67"/>
<polygon fill="blue" stroke="blue" points="2863.21,-2085.45 2868.36,-2094.71 2870.11,-2084.27 2863.21,-2085.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2912.37,-1454.68C2930.65,-1457.92 2951.38,-1464.75 2965,-1479 3011.18,-1527.31 2969.52,-1566.05 3001,-1625 3068.43,-1751.27 3149.45,-1737.33 3218,-1863 3347.58,-2100.57 3390.23,-2433.85 3400.37,-2531.86"/>
<polygon fill="blue" stroke="blue" points="3396.89,-2532.27 3401.37,-2541.87 3403.86,-2531.57 3396.89,-2532.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3141.16,-2123C3166.25,-2132.03 3198.98,-2147.83 3218,-2173 3252.84,-2219.12 3224.55,-2246.33 3246,-2300 3282.67,-2391.77 3349.8,-2488.53 3383.13,-2533.78"/>
<polygon fill="blue" stroke="blue" points="3380.37,-2535.93 3389.14,-2541.87 3385.99,-2531.76 3380.37,-2535.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge747" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M2914.76,-2131.1C2983.59,-2158.26 3123.58,-2200.31 3218,-2140 3556.51,-1923.78 3280.06,-1565.47 3598,-1320 3621.97,-1301.49 3654.49,-1294.14 3683.12,-1291.66"/>
<polygon fill="blue" stroke="blue" points="3683.73,-1295.13 3693.47,-1290.96 3683.25,-1288.14 3683.73,-1295.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge746" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2935.1,-2113C2974.39,-2113 3024.41,-2113 3059.88,-2113"/>
<polygon fill="blue" stroke="blue" points="3059.94,-2116.5 3069.94,-2113 3059.94,-2109.5 3059.94,-2116.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node410" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node410"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="2586.5,-5159 2455.5,-5159 2455.5,-5123 2586.5,-5123 2586.5,-5159"/>
<text text-anchor="middle" x="2521" y="-5137.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2586.54,-5153.05C2639.42,-5158.79 2711.86,-5156.4 2752,-5111 2779.03,-5080.43 2751.81,-2208.46 2772,-2173 2780.97,-2157.25 2795.9,-2145.16 2811.5,-2136.11"/>
<polygon fill="blue" stroke="blue" points="2813.6,-2138.95 2820.73,-2131.12 2810.27,-2132.8 2813.6,-2138.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node411" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node411"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2708.5,-5267 2333.5,-5267 2333.5,-5231 2708.5,-5231 2708.5,-5267"/>
<text text-anchor="middle" x="2521" y="-5245.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2708.57,-5251.67C2724.99,-5245.05 2739.93,-5235.48 2752,-5222 2778.02,-5192.95 2761,-2451.42 2772,-2414 2787.06,-2362.78 2824.21,-2312.19 2848.61,-2282.81"/>
<polygon fill="blue" stroke="blue" points="2851.34,-2285 2855.13,-2275.1 2846,-2280.48 2851.34,-2285"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2708.58,-5251.68C2725,-5245.05 2739.93,-5235.48 2752,-5222 2807.44,-5160.08 2721.29,-2295.85 2772,-2230 2786.42,-2211.27 2812.45,-2204.68 2834.27,-2202.69"/>
<polygon fill="blue" stroke="blue" points="2834.49,-2206.18 2844.25,-2202.06 2834.05,-2199.19 2834.49,-2206.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2708.52,-5255.4C2756.39,-5257.05 2803.08,-5258.65 2834.12,-5259.72"/>
<polygon fill="blue" stroke="blue" points="2834.32,-5263.23 2844.43,-5260.07 2834.56,-5256.23 2834.32,-5263.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.98,-5230.98C2702.06,-5228.01 2727.75,-5224.94 2752,-5222 2777.11,-5218.95 2805.17,-5215.43 2827.79,-5212.57"/>
<polygon fill="blue" stroke="blue" points="2828.29,-5216.04 2837.77,-5211.31 2827.41,-5209.09 2828.29,-5216.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2708.58,-5251.68C2725,-5245.05 2739.93,-5235.48 2752,-5222 2780.25,-5190.45 2751.06,-2209.81 2772,-2173 2780.97,-2157.25 2795.9,-2145.16 2811.5,-2136.1"/>
<polygon fill="blue" stroke="blue" points="2813.59,-2138.95 2820.73,-2131.12 2810.27,-2132.79 2813.59,-2138.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node412" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node412"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="2589.5,-5213 2452.5,-5213 2452.5,-5177 2589.5,-5177 2589.5,-5213"/>
<text text-anchor="middle" x="2521" y="-5191.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.6,-5208.36C2642.1,-5214.4 2712.43,-5212.17 2752,-5168 2777.53,-5139.51 2761.21,-2450.7 2772,-2414 2787.07,-2362.78 2824.22,-2312.19 2848.61,-2282.81"/>
<polygon fill="blue" stroke="blue" points="2851.35,-2285 2855.13,-2275.1 2846,-2280.48 2851.35,-2285"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.6,-5208.37C2642.11,-5214.41 2712.44,-5212.18 2752,-5168 2806.45,-5107.2 2722.2,-2294.66 2772,-2230 2786.43,-2211.27 2812.45,-2204.68 2834.27,-2202.69"/>
<polygon fill="blue" stroke="blue" points="2834.5,-2206.18 2844.26,-2202.06 2834.05,-2199.2 2834.5,-2206.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.57,-5195.48C2636.3,-5197.6 2699.3,-5204.03 2752,-5222 2761.81,-5225.35 2762.46,-5229.94 2772,-5234 2791.96,-5242.5 2815.33,-5249.01 2834.4,-5253.5"/>
<polygon fill="blue" stroke="blue" points="2833.69,-5256.93 2844.22,-5255.73 2835.24,-5250.1 2833.69,-5256.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.8,-5197.33C2660.03,-5199.74 2767.69,-5203.44 2827.53,-5205.49"/>
<polygon fill="blue" stroke="blue" points="2827.66,-5209 2837.78,-5205.84 2827.9,-5202 2827.66,-5209"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2589.61,-5208.37C2642.11,-5214.41 2712.44,-5212.18 2752,-5168 2779.75,-5137.01 2751.42,-2209.15 2772,-2173 2780.97,-2157.25 2795.9,-2145.16 2811.5,-2136.11"/>
<polygon fill="blue" stroke="blue" points="2813.59,-2138.95 2820.73,-2131.12 2810.27,-2132.8 2813.59,-2138.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node413" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node413"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="2744,-5375 2298,-5375 2298,-5339 2744,-5339 2744,-5375"/>
<text text-anchor="middle" x="2521" y="-5353.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge518" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2744.33,-5348.73C2779.12,-5347.44 2811.19,-5346.24 2834.42,-5345.38"/>
<polygon fill="blue" stroke="blue" points="2834.59,-5348.88 2844.45,-5345.01 2834.33,-5341.88 2834.59,-5348.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge515" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.55,-5375.01C2734.69,-5381.95 2797.11,-5389.27 2835.19,-5393.74"/>
<polygon fill="blue" stroke="blue" points="2834.92,-5397.23 2845.26,-5394.92 2835.74,-5390.28 2834.92,-5397.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge519" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2727.33,-5338.93C2735.77,-5336.3 2744.02,-5333.33 2752,-5330 2762.5,-5325.61 2762.49,-5320.26 2772,-5314 2792.09,-5300.78 2815.82,-5288.04 2835.07,-5278.36"/>
<polygon fill="blue" stroke="blue" points="2836.72,-5281.45 2844.12,-5273.87 2833.61,-5275.18 2836.72,-5281.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge516" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2741.32,-5338.7C2745.02,-5336.02 2748.59,-5333.12 2752,-5330 2784.15,-5300.58 2742.11,-5265.72 2772,-5234 2786.32,-5218.8 2808.25,-5211.85 2827.88,-5208.78"/>
<polygon fill="blue" stroke="blue" points="2828.41,-5212.24 2837.89,-5207.51 2827.53,-5205.3 2828.41,-5212.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge520" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2743.08,-5338.79C2746.19,-5336.06 2749.17,-5333.14 2752,-5330 2766.93,-5313.42 2770.63,-3746.27 2772,-3724 2793.14,-3380.44 2851.27,-2965.97 2867.34,-2855.29"/>
<polygon fill="blue" stroke="blue" points="2870.82,-2855.66 2868.8,-2845.26 2863.89,-2854.65 2870.82,-2855.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge517" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2743.1,-5338.81C2746.21,-5336.08 2749.18,-5333.15 2752,-5330 2781.25,-5297.33 2750.32,-2211.11 2772,-2173 2780.96,-2157.24 2795.89,-2145.16 2811.5,-2136.1"/>
<polygon fill="blue" stroke="blue" points="2813.59,-2138.95 2820.73,-2131.12 2810.26,-2132.79 2813.59,-2138.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node414" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node414"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2558,-5429 2484,-5429 2484,-5393 2558,-5393 2558,-5429"/>
<text text-anchor="middle" x="2521" y="-5407.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge611" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2558.32,-5408.35C2609,-5406.78 2700.51,-5412.05 2752,-5464 2985.27,-5699.31 3086.58,-6834.95 3102.3,-7028.82"/>
<polygon fill="blue" stroke="blue" points="3098.81,-7029.11 3103.1,-7038.8 3105.79,-7028.55 3098.81,-7029.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge613" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2558.03,-5419.54C2609.66,-5429.38 2703.77,-5437.96 2752,-5384 2789.94,-5341.55 2731.65,-1325.16 2772,-1285 2802.4,-1254.75 2931.32,-1258.45 2965,-1285 3018.84,-1327.45 2982.1,-1369.1 3001,-1435 3084.74,-1726.95 3165.17,-1783.91 3218,-2083 3258.83,-2314.17 3238.19,-2904.38 3246,-3139 3300.12,-4764.71 3389.99,-6768.93 3401.72,-7028.79"/>
<polygon fill="blue" stroke="blue" points="3398.23,-7029.07 3402.18,-7038.9 3405.22,-7028.75 3398.23,-7029.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge616" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2558.22,-5411.78C2604.54,-5411.65 2686.58,-5407.63 2752,-5384 2761.97,-5380.4 2762.32,-5375.33 2772,-5371 2791.8,-5362.14 2815.16,-5355.62 2834.27,-5351.2"/>
<polygon fill="blue" stroke="blue" points="2835.1,-5354.6 2844.11,-5349.03 2833.59,-5347.77 2835.1,-5354.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge615" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2558.09,-5409.66C2625.13,-5407.16 2768.19,-5401.84 2835.31,-5399.35"/>
<polygon fill="blue" stroke="blue" points="2835.55,-5402.84 2845.41,-5398.97 2835.29,-5395.84 2835.55,-5402.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge612" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2558.28,-5417.98C2608.09,-5425.33 2697.63,-5430.23 2752,-5384 2776.65,-5363.04 2751.66,-5339.16 2772,-5314 2788.11,-5294.07 2813.77,-5280.66 2835,-5272.32"/>
<polygon fill="blue" stroke="blue" points="2836.23,-5275.59 2844.39,-5268.83 2833.8,-5269.03 2836.23,-5275.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge614" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2558.41,-5418.92C2609.21,-5427.61 2700.86,-5434.35 2752,-5384 2799.93,-5336.82 2727.69,-5284.6 2772,-5234 2785.86,-5218.18 2807.96,-5211.19 2827.82,-5208.26"/>
<polygon fill="blue" stroke="blue" points="2828.42,-5211.72 2837.94,-5207.08 2827.6,-5204.76 2828.42,-5211.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge617" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2558.03,-5419.54C2609.66,-5429.39 2703.77,-5437.96 2752,-5384 2790.18,-5341.28 2731.39,-1299.41 2772,-1259 2861.1,-1170.33 3426.29,-1281.24 3570,-1439 3613.02,-1486.23 3568.26,-1523.45 3598,-1580 3626.55,-1634.28 3680.25,-1682.33 3715.05,-1709.78"/>
<polygon fill="blue" stroke="blue" points="3712.99,-1712.61 3723.04,-1715.98 3717.28,-1707.08 3712.99,-1712.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node415" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node415"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="2620.5,-5321 2421.5,-5321 2421.5,-5285 2620.5,-5285 2620.5,-5321"/>
<text text-anchor="middle" x="2521" y="-5299.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge785" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2620.75,-5314.58C2691.8,-5322.92 2783.66,-5333.7 2834.14,-5339.62"/>
<polygon fill="blue" stroke="blue" points="2833.93,-5343.12 2844.27,-5340.81 2834.74,-5336.16 2833.93,-5343.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge786" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2620.71,-5294.22C2664.48,-5295.16 2714.45,-5303.37 2752,-5330 2768.54,-5341.73 2756.38,-5358.08 2772,-5371 2789.7,-5385.64 2814.66,-5392.38 2835.15,-5395.47"/>
<polygon fill="blue" stroke="blue" points="2834.73,-5398.95 2845.09,-5396.75 2835.62,-5392.01 2834.73,-5398.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge783" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2620.51,-5291.61C2661.23,-5286.86 2708.9,-5281.24 2752,-5276 2779.66,-5272.64 2810.91,-5268.71 2834.52,-5265.72"/>
<polygon fill="blue" stroke="blue" points="2834.98,-5269.19 2844.46,-5264.46 2834.09,-5262.25 2834.98,-5269.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge782" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2620.54,-5311.95C2664.4,-5311.07 2714.5,-5302.87 2752,-5276 2768.81,-5263.96 2756.13,-5247.25 2772,-5234 2787.61,-5220.97 2808.95,-5214.19 2827.87,-5210.67"/>
<polygon fill="blue" stroke="blue" points="2828.47,-5214.12 2837.79,-5209.08 2827.36,-5207.21 2828.47,-5214.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge781" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2620.71,-5318.59C2667.37,-5319.98 2719.77,-5311.77 2752,-5276 2766.43,-5259.99 2770.67,-3745.52 2772,-3724 2793.22,-3380.44 2851.29,-2965.97 2867.34,-2855.29"/>
<polygon fill="blue" stroke="blue" points="2870.83,-2855.66 2868.8,-2845.26 2863.9,-2854.65 2870.83,-2855.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge784" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2620.52,-5318.67C2667.27,-5320.12 2719.82,-5311.95 2752,-5276 2780.75,-5243.89 2750.69,-2210.46 2772,-2173 2780.96,-2157.24 2795.9,-2145.16 2811.5,-2136.1"/>
<polygon fill="blue" stroke="blue" points="2813.59,-2138.95 2820.73,-2131.12 2810.26,-2132.79 2813.59,-2138.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node416" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node416"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="1643.5,-3084 1376.5,-3084 1376.5,-3048 1643.5,-3048 1643.5,-3084"/>
<text text-anchor="middle" x="1510" y="-3062.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.79,-3053.45C1849.65,-3035.47 2226.77,-3009.02 2270,-3052 2304.07,-3085.87 2257.97,-6475.2 2290,-6511 2338.15,-6564.82 2431.97,-6556.41 2483.66,-6546.6"/>
<polygon fill="blue" stroke="blue" points="2484.6,-6549.98 2493.71,-6544.57 2483.22,-6543.11 2484.6,-6549.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.71,-3065.87C1849.95,-3067.06 2228.2,-3075.38 2270,-3120 2302.71,-3154.92 2261.17,-6526.81 2290,-6565 2335.24,-6624.94 2431.08,-6633.66 2483.64,-6633.59"/>
<polygon fill="blue" stroke="blue" points="2483.9,-6637.09 2493.85,-6633.46 2483.81,-6630.09 2483.9,-6637.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.89,-3070.93C1705.46,-3068.97 1778.44,-3060.48 1840,-3036 1854.71,-3030.15 1853.04,-3019.17 1868,-3014 1952.43,-2984.8 2206.64,-2951.02 2270,-3014 2303.21,-3047.02 2264.06,-6347 2290,-6386 2332.01,-6449.15 2423.83,-6471.75 2477.89,-6479.73"/>
<polygon fill="blue" stroke="blue" points="2477.46,-6483.21 2487.84,-6481.1 2478.41,-6476.27 2477.46,-6483.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.85,-3050.34C1713.02,-3050.16 1792.78,-3064.03 1840,-3119 1901.4,-3190.48 1805.7,-6440.31 1868,-6511 1907.98,-6556.36 1984.93,-6552.84 2030.85,-6545.72"/>
<polygon fill="blue" stroke="blue" points="2031.7,-6549.13 2040.98,-6544.01 2030.54,-6542.22 2031.7,-6549.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.84,-3050.34C1713.01,-3050.17 1792.78,-3064.04 1840,-3119 1899.14,-3187.83 1819.65,-6309.2 1868,-6386 1902.26,-6440.42 1976.4,-6465.49 2024.16,-6476.38"/>
<polygon fill="blue" stroke="blue" points="2023.71,-6479.86 2034.22,-6478.55 2025.18,-6473.02 2023.71,-6479.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node417" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node417"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="2210.5,-4238 1927.5,-4238 1927.5,-4202 2210.5,-4202 2210.5,-4238"/>
<text text-anchor="middle" x="2069" y="-4216.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.59,-4233.12C2233.5,-4241.44 2254.71,-4254.07 2270,-4273 2299.7,-4309.78 2257.76,-4663.43 2290,-4698 2338.87,-4750.4 2431.17,-4742.93 2482.74,-4733.55"/>
<polygon fill="blue" stroke="blue" points="2483.64,-4736.94 2492.79,-4731.6 2482.31,-4730.07 2483.64,-4736.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.59,-4233.41C2233.44,-4241.72 2254.62,-4254.26 2270,-4273 2314.79,-4327.56 2241.45,-4538.76 2290,-4590 2339.54,-4642.29 2432.39,-4634.61 2483.66,-4625.3"/>
<polygon fill="blue" stroke="blue" points="2484.49,-4628.7 2493.64,-4623.37 2483.16,-4621.83 2484.49,-4628.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.73,-4233.29C2233.57,-4241.61 2254.7,-4254.19 2270,-4273 2322.1,-4337.05 2233.49,-4583.81 2290,-4644 2337.08,-4694.15 2423.97,-4689.32 2476.42,-4680.61"/>
<polygon fill="blue" stroke="blue" points="2477.2,-4684.03 2486.43,-4678.83 2475.97,-4677.13 2477.2,-4684.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.38,-4238.01C2215.18,-4245.83 2244.94,-4257.02 2270,-4273 2281.71,-4280.46 2280.43,-4286.94 2290,-4297 2358.18,-4368.68 2445.79,-4445.69 2490.65,-4484.15"/>
<polygon fill="blue" stroke="blue" points="2488.64,-4487.04 2498.52,-4490.88 2493.19,-4481.72 2488.64,-4487.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.65,-4233.66C2233.42,-4241.96 2254.55,-4254.43 2270,-4273 2307.48,-4318.06 2249.41,-4493.71 2290,-4536 2339.88,-4587.96 2432.59,-4580.42 2483.75,-4571.21"/>
<polygon fill="blue" stroke="blue" points="2484.55,-4574.62 2493.71,-4569.3 2483.23,-4567.75 2484.55,-4574.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.55,-4225.07C2232.97,-4219.59 2254.01,-4209.71 2270,-4193 2304.09,-4157.37 2255.6,-4007.33 2290,-3972 2333.65,-3927.17 2409.23,-3926.87 2461.78,-3933.52"/>
<polygon fill="blue" stroke="blue" points="2461.58,-3937.03 2471.97,-3934.94 2462.55,-3930.1 2461.58,-3937.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node418" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node418"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="2147,-4130 1991,-4130 1991,-4094 2147,-4094 2147,-4130"/>
<text text-anchor="middle" x="2069" y="-4108.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2147.1,-4116.11C2231.13,-4120.59 2364.55,-4127.71 2446.95,-4132.1"/>
<polygon fill="blue" stroke="blue" points="2446.81,-4135.6 2456.98,-4132.64 2447.19,-4128.61 2446.81,-4135.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2147.1,-4106.86C2242.69,-4100.49 2402.22,-4089.85 2477.81,-4084.81"/>
<polygon fill="blue" stroke="blue" points="2478.16,-4088.3 2487.91,-4084.14 2477.69,-4081.31 2478.16,-4088.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2147.32,-4103.11C2188.44,-4102.72 2237.15,-4109.78 2270,-4139 2296.74,-4162.79 2263.05,-4193.45 2290,-4217 2343.41,-4263.69 2432.46,-4258.84 2482.65,-4251.32"/>
<polygon fill="blue" stroke="blue" points="2483.42,-4254.74 2492.74,-4249.7 2482.31,-4247.83 2483.42,-4254.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2147.24,-4109.49C2186.19,-4111.33 2232.9,-4118.48 2270,-4139 2282.15,-4145.72 2277.79,-4156.39 2290,-4163 2348.62,-4194.76 2427.81,-4196.7 2476.32,-4194.13"/>
<polygon fill="blue" stroke="blue" points="2476.72,-4197.61 2486.48,-4193.5 2476.28,-4190.63 2476.72,-4197.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2147.21,-4121.82C2188.81,-4122.64 2238.02,-4115.69 2270,-4085 2306.8,-4049.68 2252.9,-4007 2290,-3972 2335.24,-3929.32 2409.78,-3928.36 2461.7,-3934.29"/>
<polygon fill="blue" stroke="blue" points="2461.41,-3937.78 2471.77,-3935.55 2462.28,-3930.83 2461.41,-3937.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node419" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node419"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="2261,-4184 1877,-4184 1877,-4148 2261,-4148 2261,-4184"/>
<text text-anchor="middle" x="2069" y="-4162.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2260.57,-4184.06C2263.88,-4186.8 2267.04,-4189.78 2270,-4193 2299.89,-4225.51 2259.83,-4557.75 2290,-4590 2339.34,-4642.74 2432.67,-4634.76 2483.97,-4625.31"/>
<polygon fill="blue" stroke="blue" points="2484.81,-4628.71 2493.95,-4623.35 2483.46,-4621.84 2484.81,-4628.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2259.14,-4184.03C2262.93,-4186.77 2266.56,-4189.75 2270,-4193 2304.2,-4225.34 2267.1,-4255.88 2290,-4297 2336.95,-4381.32 2429.56,-4450.74 2481.8,-4485.31"/>
<polygon fill="blue" stroke="blue" points="2480.16,-4488.42 2490.45,-4490.95 2483.99,-4482.56 2480.16,-4488.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2260.54,-4184.09C2263.86,-4186.82 2267.02,-4189.79 2270,-4193 2321.9,-4249 2237.62,-4480.45 2290,-4536 2339.55,-4588.54 2432.8,-4580.64 2484.03,-4571.25"/>
<polygon fill="blue" stroke="blue" points="2484.85,-4574.66 2493.99,-4569.31 2483.51,-4567.79 2484.85,-4574.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node420" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node420"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="2262,-4076 1876,-4076 1876,-4040 2262,-4040 2262,-4076"/>
<text text-anchor="middle" x="2069" y="-4054.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge729" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2251.39,-4076.09C2257.79,-4078.73 2264.02,-4081.69 2270,-4085 2282.15,-4091.72 2277.79,-4102.39 2290,-4109 2337.84,-4134.91 2399.37,-4140.98 2446.75,-4140.93"/>
<polygon fill="blue" stroke="blue" points="2446.97,-4144.43 2456.94,-4140.83 2446.9,-4137.43 2446.97,-4144.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge730" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2262.15,-4068.25C2342.21,-4072.52 2427.95,-4077.09 2477.62,-4079.74"/>
<polygon fill="blue" stroke="blue" points="2477.49,-4083.24 2487.66,-4080.28 2477.86,-4076.25 2477.49,-4083.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node421" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node421"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="1638.5,-3167 1381.5,-3167 1381.5,-3131 1638.5,-3131 1638.5,-3167"/>
<text text-anchor="middle" x="1510" y="-3145.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1579.69,-3130.97C1655.39,-3115.72 1775.01,-3106.13 1840,-3176 1896.09,-3236.31 1813.96,-6078.84 1868,-6141 1896.41,-6173.68 1943.87,-6181.83 1985.42,-6181.51"/>
<polygon fill="blue" stroke="blue" points="1985.65,-6185 1995.57,-6181.26 1985.49,-6178.01 1985.65,-6185"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1638.53,-3131.46C1703.86,-3129.03 1781.7,-3136.89 1840,-3176 1862.78,-3191.28 1845.63,-3215.13 1868,-3231 1896.16,-3250.98 1932.28,-3259.58 1966.06,-3262.6"/>
<polygon fill="blue" stroke="blue" points="1966.23,-3266.12 1976.46,-3263.36 1966.74,-3259.14 1966.23,-3266.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1638.84,-3158.29C1699.8,-3163.02 1773.72,-3169.21 1840,-3176 1907.76,-3182.94 1986.6,-3193.08 2031.57,-3199.07"/>
<polygon fill="blue" stroke="blue" points="2031.33,-3202.57 2041.71,-3200.42 2032.26,-3195.63 2031.33,-3202.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node422" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node422"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="1611.5,-3221 1408.5,-3221 1408.5,-3185 1611.5,-3185 1611.5,-3221"/>
<text text-anchor="middle" x="1510" y="-3199.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge610" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.75,-3197.06C1696.99,-3194.48 1809.94,-3197.69 1840,-3230 1895.08,-3289.21 1814.94,-6079.98 1868,-6141 1896.41,-6173.68 1943.87,-6181.83 1985.43,-6181.51"/>
<polygon fill="blue" stroke="blue" points="1985.66,-6185 1995.57,-6181.26 1985.49,-6178 1985.66,-6185"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge608" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.53,-3210.19C1676.72,-3215.12 1763.46,-3222.16 1840,-3230 1881.33,-3234.23 1926.78,-3239.66 1966.16,-3244.6"/>
<polygon fill="blue" stroke="blue" points="1965.93,-3248.1 1976.29,-3245.88 1966.81,-3241.16 1965.93,-3248.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge609" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.55,-3203.18C1737.76,-3203.41 1947.87,-3203.78 2031.77,-3203.93"/>
<polygon fill="blue" stroke="blue" points="2031.82,-3207.43 2041.83,-3203.95 2031.84,-3200.43 2031.82,-3207.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node423" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node423"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="1581,-3275 1439,-3275 1439,-3239 1581,-3239 1581,-3275"/>
<text text-anchor="middle" x="1510" y="-3253.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge623" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.17,-3245.05C1657.62,-3236.53 1777.36,-3237.2 1840,-3310 1891.29,-3369.61 1816.39,-6081.66 1868,-6141 1896.42,-6173.67 1943.87,-6181.83 1985.43,-6181.5"/>
<polygon fill="blue" stroke="blue" points="1985.66,-6185 1995.57,-6181.26 1985.49,-6178 1985.66,-6185"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="edge621" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.26,-3263.94C1700.54,-3275.72 1938.65,-3299.23 2030.58,-3308.31"/>
<polygon fill="blue" stroke="blue" points="2030.5,-3311.81 2040.8,-3309.31 2031.19,-3304.85 2030.5,-3311.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge619" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.26,-3257.13C1678.4,-3257.3 1854.33,-3257.62 1965.96,-3257.82"/>
<polygon fill="blue" stroke="blue" points="1966.21,-3261.32 1976.22,-3257.84 1966.23,-3254.32 1966.21,-3261.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge622" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.01,-3251.9C1647.66,-3246.89 1750.74,-3238.75 1840,-3230 1907.72,-3223.36 1986.58,-3214.01 2031.56,-3208.52"/>
<polygon fill="blue" stroke="blue" points="2032.2,-3211.96 2041.7,-3207.27 2031.35,-3205.02 2032.2,-3211.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge618" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.06,-3247.2C1655.4,-3241.04 1771.41,-3244.23 1840,-3310 1884.86,-3353.02 1822.6,-3404.56 1868,-3447 1893.8,-3471.12 1930.29,-3480.43 1965.05,-3482.85"/>
<polygon fill="blue" stroke="blue" points="1965.12,-3486.36 1975.28,-3483.38 1965.48,-3479.37 1965.12,-3486.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge620" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.14,-3255.7C1650.62,-3257.22 1758.21,-3267.28 1840,-3310 1855.88,-3318.29 1852.01,-3330.91 1868,-3339 1916.23,-3363.41 1978.97,-3368.21 2021.21,-3368.16"/>
<polygon fill="blue" stroke="blue" points="2021.25,-3371.66 2031.22,-3368.06 2021.18,-3364.66 2021.25,-3371.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node424" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node424"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="1607,-5846 1413,-5846 1413,-5810 1607,-5810 1607,-5846"/>
<text text-anchor="middle" x="1510" y="-5824.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.05,-5833.65C1692.65,-5836.36 1809.04,-5833.55 1840,-5801 1907.27,-5730.28 1802.6,-4995.46 1868,-4923 1906.96,-4879.84 1979.45,-4881.29 2025.63,-4887.65"/>
<polygon fill="blue" stroke="blue" points="2025.22,-4891.13 2035.63,-4889.16 2026.27,-4884.21 2025.22,-4891.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.06,-5833.66C1692.67,-5836.38 1809.07,-5833.57 1840,-5801 1911.33,-5725.87 1798.65,-4945.97 1868,-4869 1898.94,-4834.66 1951.1,-4828.54 1994.4,-4830.68"/>
<polygon fill="blue" stroke="blue" points="1994.42,-4834.19 2004.63,-4831.34 1994.87,-4827.2 1994.42,-4834.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.09,-5833.3C1692.38,-5835.73 1808.27,-5832.69 1840,-5801 1893.16,-5747.89 1847.93,-5536.42 1868,-5464 1910.3,-5311.36 2009.99,-5147.36 2050.47,-5084.54"/>
<polygon fill="blue" stroke="blue" points="2053.49,-5086.32 2055.99,-5076.02 2047.62,-5082.51 2053.49,-5086.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.02,-5833.62C1692.59,-5836.3 1808.97,-5833.48 1840,-5801 1899.14,-5739.1 1810.5,-5094.42 1868,-5031 1906.62,-4988.41 1977.9,-4989.32 2024.1,-4995.47"/>
<polygon fill="blue" stroke="blue" points="2023.73,-4998.95 2034.13,-4996.94 2024.75,-4992.03 2023.73,-4998.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.39,-5809.97C1659.31,-5796.38 1773.73,-5789.77 1840,-5855 1885.51,-5899.8 1824.02,-6094.7 1868,-6141 1897.6,-6172.16 1944.62,-6180.38 1985.63,-6180.47"/>
<polygon fill="blue" stroke="blue" points="1985.69,-6183.97 1995.64,-6180.34 1985.6,-6176.97 1985.69,-6183.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.14,-5846.06C1660.81,-5859.11 1773.52,-5864.78 1840,-5801 1913.03,-5730.93 1796.82,-5646.96 1868,-5575 1884.15,-5558.67 1905.14,-5548.93 1927.44,-5543.48"/>
<polygon fill="blue" stroke="blue" points="1928.37,-5546.86 1937.41,-5541.34 1926.9,-5540.02 1928.37,-5546.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node425" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node425"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="1725.5,-5900 1294.5,-5900 1294.5,-5864 1725.5,-5864 1725.5,-5900"/>
<text text-anchor="middle" x="1510" y="-5878.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge541" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1725.55,-5898.95C1785.54,-5903.69 1849.72,-5908.76 1906.11,-5913.21"/>
<polygon fill="blue" stroke="blue" points="1905.93,-5916.71 1916.18,-5914.01 1906.48,-5909.73 1905.93,-5916.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard(). -->
<g id="node426" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().</title>
<g id="a_node426"><a xlink:title="fn test_lizard() { &#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(&amp;zkgroup::common::constants::TEST_ARRAY_16); &#160;&#160;&#160;&#160;let data_out = p.lizard_decode::&lt;Sha256&gt;(); &#160;&#160;&#160;&#160;assert_hex_eq!(data_out.unwrap()...">
<polygon fill="white" stroke="black" points="1553.5,-5792 1466.5,-5792 1466.5,-5756 1553.5,-5756 1553.5,-5792"/>
<text text-anchor="middle" x="1510" y="-5770.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge577" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M1553.51,-5776.79C1633.63,-5781.02 1802.3,-5784.72 1840,-5744 1916.24,-5661.64 1799.81,-3813.14 1868,-3724 1980.91,-3576.4 2157.48,-3756.9 2270,-3609 2309.09,-3557.62 2246.06,-1332.29 2290,-1285 2360.12,-1209.53 2660.58,-1294.48 2752,-1247 2764.32,-1240.6 2759.43,-1228.89 2772,-1223 2849.68,-1186.62 2879.23,-1221.98 2965,-1223 3077.47,-1224.33 3105.81,-1220.92 3218,-1229 3386.47,-1241.14 3583.67,-1268.43 3683.32,-1283.15"/>
<polygon fill="blue" stroke="blue" points="3682.83,-1286.61 3693.23,-1284.62 3683.86,-1279.69 3682.83,-1286.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge576" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M1553.52,-5776.79C1633.64,-5781.03 1802.32,-5784.73 1840,-5744 1920.55,-5656.92 1786.52,-3695.21 1868,-3609 1929.51,-3543.92 2208.64,-3646.22 2270,-3581 2314.43,-3533.78 2245.36,-1294.02 2290,-1247 2325.41,-1209.7 2704.29,-1238.2 2752,-1219 2762.82,-1214.65 2761.05,-1206.02 2772,-1202 2852.51,-1172.41 2879.24,-1200.23 2965,-1202 3234.06,-1207.56 3301.28,-1212.39 3570,-1227 3607.56,-1229.04 3649.54,-1231.85 3683.29,-1234.23"/>
<polygon fill="blue" stroke="blue" points="3683.27,-1237.74 3693.49,-1234.96 3683.76,-1230.76 3683.27,-1237.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node427" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node427"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="1574,-6008 1446,-6008 1446,-5972 1574,-5972 1574,-6008"/>
<text text-anchor="middle" x="1510" y="-5986.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge682" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1574.08,-5994.98C1677.93,-6003.19 1884.36,-6019.49 1994.6,-6028.2"/>
<polygon fill="blue" stroke="blue" points="1994.39,-6031.7 2004.63,-6028.99 1994.94,-6024.72 1994.39,-6031.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge683" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1574.22,-5992.52C1641.96,-5996.95 1751.66,-6009.19 1840,-6043 1853.82,-6048.29 1854.12,-6055.89 1868,-6061 1922.75,-6081.16 1990.88,-6086.51 2031.83,-6087.8"/>
<polygon fill="blue" stroke="blue" points="2031.8,-6091.3 2041.88,-6088.05 2031.97,-6084.3 2031.8,-6091.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node428" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node428"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="1629.5,-5954 1390.5,-5954 1390.5,-5918 1629.5,-5918 1629.5,-5954"/>
<text text-anchor="middle" x="1510" y="-5932.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="edge763" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.4,-5917.95C1659.33,-5904.35 1773.77,-5897.73 1840,-5963 1885.96,-6008.29 1823.24,-6205.53 1868,-6252 1897.13,-6282.24 1942.81,-6290.09 1983.17,-6289.88"/>
<polygon fill="blue" stroke="blue" points="1983.38,-6293.37 1993.31,-6289.66 1983.23,-6286.38 1983.38,-6293.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge768" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.78,-5930.2C1711.77,-5928.99 1811.03,-5934.02 1840,-5963 1894.06,-6017.09 1815.37,-6250.52 1868,-6306 1897.52,-6337.12 1944.53,-6344.65 1985.56,-6344.04"/>
<polygon fill="blue" stroke="blue" points="1985.69,-6347.53 1995.58,-6343.73 1985.48,-6340.54 1985.69,-6347.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge766" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.15,-5917.99C1662.48,-5905.6 1773.22,-5901 1840,-5963 1898.69,-6017.49 1811.17,-6084.57 1868,-6141 1898.32,-6171.1 1945,-6179.37 1985.65,-6179.75"/>
<polygon fill="blue" stroke="blue" points="1985.86,-6183.25 1995.83,-6179.69 1985.81,-6176.25 1985.86,-6183.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge769" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.85,-5917.94C1660.57,-5904.79 1773.57,-5898.96 1840,-5963 1915.73,-6036 1794.21,-6123.05 1868,-6198 1897.35,-6227.81 1942.82,-6235.69 1982.99,-6235.61"/>
<polygon fill="blue" stroke="blue" points="1983.14,-6239.1 1993.08,-6235.42 1983.01,-6232.1 1983.14,-6239.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge767" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.93,-5942.35C1712.29,-5943.86 1811.96,-5938.98 1840,-5909 1911.38,-5832.67 1803.65,-4110.35 1868,-4028 1896.83,-3991.11 1948.15,-3978.04 1991.59,-3974.11"/>
<polygon fill="blue" stroke="blue" points="1991.87,-3977.6 2001.58,-3973.35 1991.34,-3970.62 1991.87,-3977.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge760" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.72,-5933.73C1692.77,-5930.65 1771.23,-5923.83 1840,-5909 1852.92,-5906.21 1855.16,-5902.12 1868,-5899 1885.6,-5894.72 1904.25,-5891.06 1922.81,-5887.96"/>
<polygon fill="blue" stroke="blue" points="1923.49,-5891.4 1932.8,-5886.34 1922.37,-5884.49 1923.49,-5891.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge761" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.81,-5933.87C1710.41,-5932.42 1817.97,-5930.49 1906.35,-5928.9"/>
<polygon fill="blue" stroke="blue" points="1906.54,-5932.4 1916.48,-5928.72 1906.42,-5925.4 1906.54,-5932.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge764" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.14,-5954.06C1660.81,-5967.11 1773.52,-5972.78 1840,-5909 1913.03,-5838.93 1796.82,-5754.96 1868,-5683 1881.31,-5669.55 1897.9,-5660.57 1915.79,-5654.78"/>
<polygon fill="blue" stroke="blue" points="1917.22,-5658.01 1925.86,-5651.88 1915.28,-5651.28 1917.22,-5658.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge765" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.81,-5945.39C1700.2,-5950.95 1791.16,-5958.13 1871.94,-5964.51"/>
<polygon fill="blue" stroke="blue" points="1872,-5968.03 1882.25,-5965.33 1872.55,-5961.05 1872,-5968.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge762" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1623.68,-5954.02C1692.24,-5958.81 1778.2,-5953.13 1840,-5909 1865.27,-5890.96 1843.21,-5863.7 1868,-5845 1875.68,-5839.21 1884.02,-5834.34 1892.78,-5830.28"/>
<polygon fill="blue" stroke="blue" points="1894.22,-5833.47 1902.05,-5826.33 1891.48,-5827.03 1894.22,-5833.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node429" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node429"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="1596,-2864 1424,-2864 1424,-2828 1596,-2828 1596,-2864"/>
<text text-anchor="middle" x="1510" y="-2842.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.34,-2831.59C1667.44,-2824.29 1768.31,-2825.3 1840,-2873 1862.51,-2887.98 1845.79,-2911.58 1868,-2927 1941.92,-2978.32 2209.51,-2909.37 2270,-2976 2300.07,-3009.12 2259.86,-3747.95 2290,-3781 2314.64,-3808.02 2350.8,-3819.25 2387.19,-3822.49"/>
<polygon fill="blue" stroke="blue" points="2387.23,-3826.01 2397.45,-3823.21 2387.71,-3819.02 2387.23,-3826.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1551.5,-2827.82C1677.2,-2774.44 2064.54,-2633.58 2270,-2824 2312.99,-2863.84 2255.85,-3039.36 2290,-3087 2335.4,-3150.33 2430.24,-3173.03 2482.85,-3180.94"/>
<polygon fill="blue" stroke="blue" points="2482.39,-3184.41 2492.78,-3182.34 2483.36,-3177.48 2482.39,-3184.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.1,-2834.1C1773.92,-2811.33 2176.15,-2771.47 2270,-2862 2326.07,-2916.09 2236.58,-3155.29 2290,-3212 2339.13,-3264.16 2431.33,-3256.78 2482.81,-3247.48"/>
<polygon fill="blue" stroke="blue" points="2483.69,-3250.88 2492.85,-3245.55 2482.37,-3244 2483.69,-3250.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.07,-2842.95C1663.65,-2842.9 1759.8,-2848.15 1840,-2873 1853.69,-2877.24 1854.4,-2884.49 1868,-2889 1953.42,-2917.33 2209.11,-2871.73 2270,-2938 2310.92,-2982.54 2248.98,-3437.55 2290,-3482 2338.98,-3535.07 2432.46,-3526.96 2483.88,-3517.4"/>
<polygon fill="blue" stroke="blue" points="2484.75,-3520.79 2493.88,-3515.42 2483.39,-3513.92 2484.75,-3520.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.06,-2845.8C1784.46,-2846.24 2223.96,-2852.41 2270,-2900 2310.82,-2942.2 2250.16,-3384.88 2290,-3428 2339.01,-3481.04 2432.48,-3472.94 2483.89,-3463.39"/>
<polygon fill="blue" stroke="blue" points="2484.75,-3466.78 2493.88,-3461.41 2483.4,-3459.92 2484.75,-3466.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node430" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node430"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="1545.5,-2918 1474.5,-2918 1474.5,-2882 1545.5,-2882 1545.5,-2918"/>
<text text-anchor="middle" x="1510" y="-2896.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.6,-2893.03C1614.03,-2881.51 1766.39,-2867.51 1840,-2953 1887.53,-3008.2 1819.77,-5520.42 1868,-5575 1891.12,-5601.17 1926.55,-5611.05 1961.2,-5613.37"/>
<polygon fill="blue" stroke="blue" points="1961.28,-5616.88 1971.43,-5613.84 1961.6,-5609.88 1961.28,-5616.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.6,-2893.03C1614.04,-2881.5 1766.41,-2867.49 1840,-2953 1890.44,-3011.62 1816.81,-5679.03 1868,-5737 1892.54,-5764.79 1930.95,-5774.22 1967.59,-5775.72"/>
<polygon fill="blue" stroke="blue" points="1967.79,-5779.22 1977.86,-5775.94 1967.94,-5772.23 1967.79,-5779.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.58,-2893.05C1613.98,-2881.55 1766.29,-2867.59 1840,-2953 1879.17,-2998.38 1853.34,-5052.87 1868,-5111 1904.64,-5256.24 2005.8,-5407.92 2048.54,-5467.63"/>
<polygon fill="blue" stroke="blue" points="2045.72,-5469.7 2054.41,-5475.76 2051.39,-5465.61 2045.72,-5469.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.6,-2893.03C1614.04,-2881.5 1766.41,-2867.49 1840,-2953 1889.47,-3010.48 1817.8,-5626.16 1868,-5683 1881.39,-5698.16 1898.92,-5707.86 1918.03,-5713.79"/>
<polygon fill="blue" stroke="blue" points="1917.28,-5717.21 1927.85,-5716.47 1919.13,-5710.46 1917.28,-5717.21"/>
</g>
</g>
</svg>
