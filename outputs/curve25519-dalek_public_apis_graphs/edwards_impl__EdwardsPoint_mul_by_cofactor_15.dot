digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [label="mul_by_cofactor", tooltip="    pub fn mul_by_cofactor(&self) -> EdwardsPoint {         self.mul_by_pow_2(3)     }", fillcolor=green, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." [label="is_small_order", tooltip="    pub fn is_small_order(&self) -> bool {         self.mul_by_cofactor().is_identity()     }", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." [label="KeyTransparency_Distinguished", tooltip="async fn KeyTransparency_Distinguished(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedCha...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." [label="KeyTransparency_Search", tooltip="async fn KeyTransparency_Search(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedChatConnec...", fillcolor=white, style="filled"]
  }
  subgraph cluster_2 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." [label="benches", tooltip="criterion_group!(benches, bench_verify_search); criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [label="bench_verify_search", tooltip="fn bench_verify_search(c: &mut Criterion) {     let sig_key = VerifyingKey::from_bytes(&hex!(         ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'      ))     .unwrap();     let...", fillcolor=white, style="filled"]
  }
  subgraph cluster_3 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [label="verify_search", tooltip="    pub fn verify_search(         &self,         request: SlimSearchRequest,         response: FullSearchResponse,         context: SearchContext,         force_monitor: bool,         now: SystemTime,...", fillcolor=white, style="filled"]
  }
  subgraph cluster_4 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [label="evaluate_vrf_proof", tooltip="fn evaluate_vrf_proof(     proof: &[u8],     vrf_key: &vrf::PublicKey,     search_key: &[u8], ) -> Result<[u8; 32]> {     let proof = proof.try_into().map_err(|_| MalformedProof)?;     Ok(vrf_key.proo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." [label="can_verify_search_response", tooltip="    fn can_verify_search_response() {         let sig_key = VerifyingKey::from_bytes(&hex!(             ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'          ))         .unwrap(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [label="verify_search_internal", tooltip="fn verify_search_internal(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     monitor: bool,     now: SystemTime, ) -> Result<SearchSta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [label="verify_search", tooltip="pub fn verify_search(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     force_monitor: bool,     now: SystemTime, ) -> Result<SearchSt...", fillcolor=white, style="filled"]
  }
  subgraph cluster_5 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." [label="test_proof_to_hash_fails", tooltip="    fn test_proof_to_hash_fails() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();              assert!(pk.proof_to_hash(b' a' , &v.pi).is_err());            ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." [label="test_proof_to_hash", tooltip="    fn test_proof_to_hash() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();             let index = pk.proof_to_hash(v.alpha, &v.pi).unwrap();             as...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." [label="test_encode_to_curve_try_and_increment", tooltip="    fn test_encode_to_curve_try_and_increment() {         for v in TEST_VECTORS {             let got = encode_to_curve_try_and_increment(&v.pk, v.alpha)                 .compress()                 .0...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." [label="try_and_increment_terminates", tooltip="    fn try_and_increment_terminates() {         proptest!(|(data: [u8; 34])| {             let _ = encode_to_curve_try_and_increment(&data[..32], &data[32..]);         })     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [label="encode_to_curve_try_and_increment", tooltip="fn encode_to_curve_try_and_increment(salt: &[u8], data: &[u8]) -> EdwardsPoint {     let mut hasher = Sha512::new();      for i in 0u8..=u8::MAX {         hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [label="try_from", tooltip="    fn try_from(public_key: [u8; 32]) -> Result<Self> {         match CompressedEdwardsY(public_key).decompress() {             None => Err(Error::InvalidCurvePoint),             Some(pt) if pt.is_sma...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [label="proof_to_hash", tooltip="fn proof_to_hash(gamma: &EdwardsPoint) -> [u8; 32] {     let mut hasher = Sha512::new();     hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]);     hasher.update(gamma.mul_by_cofactor().compress().0);...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [label="verify_single_search_response", tooltip="fn verify_single_search_response(     kt: &KeyTransparency,     search_key: Vec<u8>,     response: CondensedTreeSearchResponse,     monitoring_data: Option<MonitoringData>,     full_tree_head: &FullTr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [label="distinguished", tooltip="    async fn distinguished(         &self,         last_distinguished: Option<LastTreeHead>,     ) -> Result<SearchStateUpdate, RequestError<Error>> {         let ChatDistinguishedResponse {          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [label="verify_chat_search_response", tooltip="fn verify_chat_search_response(     kt: &KeyTransparency,     aci: &Aci,     e164: Option<E164>,     username_hash: Option<UsernameHash>,     stored_account_data: Option<AccountData>,     chat_search_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." [label="search_returns_data_not_requested", tooltip="    fn search_returns_data_not_requested(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();         let...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [label="search", tooltip="    async fn search(         &self,         aci: &Aci,         aci_identity_key: &PublicKey,         e164: Option<(E164, Vec<u8>)>,         username_hash: Option<UsernameHash<'_>>,         stored_acco...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." [label="search_does_not_return_requested_data", tooltip="    fn search_does_not_return_requested_data(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." [label="search_for_account_that_isnt", tooltip="    async fn search_for_account_that_isnt() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled'...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." [label="distinguished_integration_test", tooltip="    async fn distinguished_integration_test(have_last_distinguished: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running in...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." [label="prompt", tooltip="        fn prompt(text: &str) {             println!(' {} >' , text);              let mut input = String::new();              std::io::stdin()                 .read_line(&mut input)                 ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." [label="search_permutations_integration_test", tooltip="    async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKI...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." [label="search_for_deleted_account", tooltip="    async fn search_for_deleted_account() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled' )...", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "env.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." [label="from", tooltip="    fn from(src: KeyTransConfig) -> Self {         let KeyTransConfig {             signing_key_material,             vrf_key_material,             auditor_key_material,         } = src;         let s...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net 0.1.0 env/impl#[PublicConfig][`From<KeyTransConfig>`]from()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/try_and_increment_terminates()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/encode_to_curve_try_and_increment()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom<[u8; 32]>`]try_from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order()." [color=blue]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor()." [color=blue]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
}
