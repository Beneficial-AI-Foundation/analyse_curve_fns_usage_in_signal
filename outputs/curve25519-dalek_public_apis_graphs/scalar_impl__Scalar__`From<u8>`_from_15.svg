<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="3629pt" height="2033pt"
 viewBox="0.00 0.00 3629.00 2033.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 2029)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-2029 3625,-2029 3625,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3541,-1780 3541,-1855 3615,-1855 3615,-1780 3541,-1780"/>
<text text-anchor="middle" x="3578" y="-1839.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightblue" stroke="lightblue" points="24,-145 24,-274 291,-274 291,-145 24,-145"/>
<text text-anchor="middle" x="157.5" y="-258.8" font-family="Helvetica,sans-Serif" font-size="14.00">message_backup.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="2199,-1427 2199,-1610 2412,-1610 2412,-1427 2199,-1427"/>
<text text-anchor="middle" x="2305.5" y="-1594.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-282 8,-357 307,-357 307,-282 8,-282"/>
<text text-anchor="middle" x="157.5" y="-341.8" font-family="Helvetica,sans-Serif" font-size="14.00">message_backup.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="107.5,-8 107.5,-137 493,-137 493,-8 107.5,-8"/>
<text text-anchor="middle" x="300.25" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">validation.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="694.5,-372 694.5,-791 1898.5,-791 1898.5,-372 694.5,-372"/>
<text text-anchor="middle" x="1296.5" y="-775.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="1967,-1290 1967,-1419 2394.5,-1419 2394.5,-1290 1967,-1290"/>
<text text-anchor="middle" x="2180.75" y="-1403.8" font-family="Helvetica,sans-Serif" font-size="14.00">account_data.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="1724,-799 1724,-1252 2366,-1252 2366,-799 1724,-799"/>
<text text-anchor="middle" x="2045" y="-1236.8" font-family="Helvetica,sans-Serif" font-size="14.00">recipient.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="632,-953 632,-1136 1146,-1136 1146,-953 632,-953"/>
<text text-anchor="middle" x="889" y="-1120.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialize.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="114,-610 114,-739 201,-739 201,-610 114,-610"/>
<text text-anchor="middle" x="157.5" y="-723.8" font-family="Helvetica,sans-Serif" font-size="14.00">main.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="355,-228 355,-357 1150.5,-357 1150.5,-228 355,-228"/>
<text text-anchor="middle" x="752.75" y="-341.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="17.5,-365 17.5,-602 297.5,-602 297.5,-365 17.5,-365"/>
<text text-anchor="middle" x="157.5" y="-586.8" font-family="Helvetica,sans-Serif" font-size="14.00">test_cases.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="2192.5,-716 2192.5,-791 2418.5,-791 2418.5,-716 2192.5,-716"/>
<text text-anchor="middle" x="2305.5" y="-775.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="1790,-235 1790,-364 2377.5,-364 2377.5,-235 1790,-235"/>
<text text-anchor="middle" x="2083.75" y="-348.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="2152,-1618 2152,-2017 3521,-2017 3521,-1618 2152,-1618"/>
<text text-anchor="middle" x="2836.5" y="-2001.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`From&lt;u8&gt;`]from(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`From&lt;u8&gt;`]from().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;fn from(x: u8) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s_bytes = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s_bytes[0] = x; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar { bytes: s_bytes } &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="3605,-1824 3551,-1824 3551,-1788 3605,-1788 3605,-1824"/>
<text text-anchor="middle" x="3578" y="-1802.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().</title>
<g id="a_node2"><a xlink:title="fn OnlineBackupValidator_AddFrame( &#160;&#160;&#160;&#160;backup: &amp;mut OnlineBackupValidator, &#160;&#160;&#160;&#160;frame: &amp;[u8], ) &#45;&gt; Result&lt;(), ReadError&gt; { &#160;&#160;&#160;&#160;let unknown_fields = backup &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_mut() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_and_add_fram...">
<polygon fill="white" stroke="black" points="282.5,-189 32.5,-189 32.5,-153 282.5,-153 282.5,-189"/>
<text text-anchor="middle" x="157.5" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">OnlineBackupValidator_AddFrame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;pub fn parse_and_add_frame( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;raw_frame: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut visitor: impl FnMut(&amp;proto::backup::Frame) + Send, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;(Vec&lt;PathPart&gt;, UnknownValue)&gt;, crate::E...">
<polygon fill="white" stroke="black" points="1142.5,-272 972.5,-272 972.5,-236 1142.5,-236 1142.5,-272"/>
<text text-anchor="middle" x="1057.5" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M282.79,-175.69C433.41,-182.41 694.66,-197.38 917,-227 931.74,-228.96 947.28,-231.5 962.42,-234.23"/>
<polygon fill="blue" stroke="blue" points="961.83,-237.68 972.3,-236.05 963.09,-230.8 961.83,-237.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/MessageBackupValidator_Validate(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/MessageBackupValidator_Validate().</title>
<g id="a_node3"><a xlink:title="async fn MessageBackupValidator_Validate( &#160;&#160;&#160;&#160;key: &amp;MessageBackupKey, &#160;&#160;&#160;&#160;first_stream: &amp;mut dyn InputStream, &#160;&#160;&#160;&#160;second_stream: &amp;mut dyn InputStream, &#160;&#160;&#160;&#160;len: u64, &#160;&#160;&#160;&#160;purpose: AsType&lt;Purpose, u8&gt;, )...">
<polygon fill="white" stroke="black" points="283,-243 32,-243 32,-207 283,-207 283,-243"/>
<text text-anchor="middle" x="157.5" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">MessageBackupValidator_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;pub async fn validate_all(self) &#45;&gt; ReadResult&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.collect_all().await.and_then(|partial| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _: CompletedBackup&lt;ValidateOnly&gt; = partial.try_into()?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(())...">
<polygon fill="white" stroke="black" points="457,-272 363,-272 363,-236 457,-236 457,-272"/>
<text text-anchor="middle" x="410" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/MessageBackupValidator_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/MessageBackupValidator_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M283.02,-239.42C307.39,-242.24 331.79,-245.06 352.55,-247.46"/>
<polygon fill="blue" stroke="blue" points="352.4,-250.97 362.74,-248.64 353.2,-244.02 352.4,-250.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node4"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="2370,-1471 2241,-1471 2241,-1435 2370,-1435 2370,-1471"/>
<text text-anchor="middle" x="2305.5" y="-1449.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;pub fn new(s: &amp;str) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (nickname, discriminator) = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s.rsplit_once(&#39;.&#39;).ok_or(UsernameError::MissingSeparator)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_parts_withou...">
<polygon fill="white" stroke="black" points="2560,-1662 2506,-1662 2506,-1626 2560,-1626 2560,-1662"/>
<text text-anchor="middle" x="2533" y="-1640.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2370.24,-1452.6C2397.44,-1455.35 2428.12,-1462.66 2451,-1480 2495.46,-1513.69 2517.04,-1578.36 2526.21,-1615.64"/>
<polygon fill="blue" stroke="blue" points="2522.9,-1616.87 2528.57,-1625.82 2529.72,-1615.28 2522.9,-1616.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node5"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2370,-1525 2241,-1525 2241,-1489 2370,-1489 2370,-1525"/>
<text text-anchor="middle" x="2305.5" y="-1503.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2370.33,-1508.73C2396.92,-1511.93 2427.11,-1519.01 2451,-1534 2482.71,-1553.9 2506.11,-1591.07 2519.39,-1616.66"/>
<polygon fill="blue" stroke="blue" points="2516.38,-1618.46 2523.98,-1625.84 2522.64,-1615.33 2516.38,-1618.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node6"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="2404,-1579 2207,-1579 2207,-1543 2404,-1543 2404,-1579"/>
<text text-anchor="middle" x="2305.5" y="-1557.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;pub fn from_parts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limits: NicknameLimits, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should perform the same set of checks...">
<polygon fill="white" stroke="black" points="2579,-1878 2487,-1878 2487,-1842 2579,-1842 2579,-1878"/>
<text text-anchor="middle" x="2533" y="-1856.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2394.16,-1579.06C2414.97,-1586.88 2435.58,-1598.06 2451,-1614 2481.82,-1645.87 2513.23,-1774.64 2526.03,-1832.09"/>
<polygon fill="blue" stroke="blue" points="2522.63,-1832.94 2528.19,-1841.95 2529.46,-1831.43 2522.63,-1832.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;testing 0.1.0 message_backup/ComparableBackup_ReadUnencrypted(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;testing 0.1.0 message_backup/ComparableBackup_ReadUnencrypted().</title>
<g id="a_node7"><a xlink:title="async fn ComparableBackup_ReadUnencrypted( &#160;&#160;&#160;&#160;stream: &amp;mut dyn InputStream, &#160;&#160;&#160;&#160;len: u64, &#160;&#160;&#160;&#160;purpose: AsType&lt;Purpose, u8&gt;, ) &#45;&gt; Result&lt;ComparableBackup, ReadError&gt; { &#160;&#160;&#160;&#160;let reader = BackupReader::n...">
<polygon fill="white" stroke="black" points="299,-326 16,-326 16,-290 299,-290 299,-326"/>
<text text-anchor="middle" x="157.5" y="-304.3" font-family="Helvetica,sans-Serif" font-size="14.00">ComparableBackup_ReadUnencrypted</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;pub async fn read_all(self) &#45;&gt; ReadResult&lt;backup::CompletedBackup&lt;Store&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.collect_all() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.await &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.and_then(|r| Ok(CompletedBackup::try_from(r)?)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="445,-326 375,-326 375,-290 445,-290 445,-326"/>
<text text-anchor="middle" x="410" y="-304.3" font-family="Helvetica,sans-Serif" font-size="14.00">read_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;testing 0.1.0 message_backup/ComparableBackup_ReadUnencrypted().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;testing 0.1.0 message_backup/ComparableBackup_ReadUnencrypted().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M299.13,-308C322.92,-308 345.96,-308 364.74,-308"/>
<polygon fill="blue" stroke="blue" points="365,-311.5 375,-308 365,-304.5 365,-311.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn process&lt;R: ReaderFactory&lt;Reader: Unpin&gt;&gt;(input: R, key: &amp;MessageBackupKey) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;futures::executor::block_on(async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupReader::new_encrypted_compressed( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key,...">
<polygon fill="white" stroke="black" points="192.5,-52 122.5,-52 122.5,-16 192.5,-16 192.5,-52"/>
<text text-anchor="middle" x="157.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">process</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.66,-31.04C225.71,-30.08 275.32,-33.94 307,-61 335.64,-85.47 318.34,-107.22 335,-141 350.39,-172.19 372.78,-205.17 388.9,-227.39"/>
<polygon fill="blue" stroke="blue" points="386.22,-229.66 394.96,-235.65 391.86,-225.51 386.22,-229.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.58,-28.94C303.78,-14.08 663.49,20.87 917,-105 972.65,-132.63 1017.51,-192.31 1040.25,-227.17"/>
<polygon fill="blue" stroke="blue" points="1037.48,-229.34 1045.81,-235.88 1043.38,-225.57 1037.48,-229.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;validation, &#160;&#160;&#160;&#160;hmac_only, &#160;&#160;&#160;&#160;decrypt_only, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment_and_parse, &#160;&#160;&#160;&#160;de...">
<polygon fill="white" stroke="black" points="199.5,-106 115.5,-106 115.5,-70 199.5,-70 199.5,-106"/>
<text text-anchor="middle" x="157.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">validation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<g id="a_node10"><a xlink:title="fn parse_and_validate(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; PartialBackup&#39; ); &#160;&#160;&#160;&#160;benchmark_multiple_backup_sizes(|size, _backup, _key| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if size == 0 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;retu...">
<polygon fill="white" stroke="black" points="485,-106 335,-106 335,-70 485,-70 485,-106"/>
<text text-anchor="middle" x="410" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M199.58,-88C233.51,-88 282.76,-88 324.98,-88"/>
<polygon fill="blue" stroke="blue" points="324.99,-91.5 334.99,-88 324.99,-84.5 324.99,-91.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M485.07,-92.73C585.49,-100.92 769.25,-122.27 917,-175 955.32,-188.67 995.36,-212.49 1022.67,-230.41"/>
<polygon fill="blue" stroke="blue" points="1020.8,-233.37 1031.06,-236 1024.68,-227.54 1020.8,-233.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_foreign_key&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let frame = proto::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item:...">
<polygon fill="white" stroke="black" points="1162,-743 953,-743 953,-707 1162,-707 1162,-743"/>
<text text-anchor="middle" x="1057.5" y="-721.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_foreign_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;pub fn add_frame(&amp;mut self, frame: proto::Frame) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_frame_item(frame.item.ok_or(ValidationError::EmptyFrame)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1355.5,-743 1264.5,-743 1264.5,-707 1355.5,-707 1355.5,-743"/>
<text text-anchor="middle" x="1310" y="-721.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1162.2,-725C1193.82,-725 1227.34,-725 1254.35,-725"/>
<polygon fill="blue" stroke="blue" points="1254.37,-728.5 1264.37,-725 1254.37,-721.5 1254.37,-728.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;fn rejects_multiple_account_data&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expe...">
<polygon fill="white" stroke="black" points="1422,-578 1198,-578 1198,-542 1422,-542 1422,-578"/>
<text text-anchor="middle" x="1310" y="-556.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_multiple_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn add_frame_item(&amp;mut self, item: FrameItem) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FrameItem::Account(account_data) =&gt; self.add_account_data(account_data), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1641,-436 1513,-436 1513,-400 1641,-400 1641,-436"/>
<text text-anchor="middle" x="1577" y="-414.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame_item</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1409.33,-541.92C1413.83,-539.32 1418.09,-536.36 1422,-533 1454.03,-505.44 1425.78,-472.34 1458,-445 1470.61,-434.3 1486.61,-427.63 1502.73,-423.52"/>
<polygon fill="blue" stroke="blue" points="1503.76,-426.88 1512.75,-421.28 1502.23,-420.04 1503.76,-426.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn add_recipient(&amp;mut self, recipient: proto::Recipient) &#45;&gt; Result&lt;(), RecipientFrameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = recipient.id(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err_with_id = |e| RecipientFrameError(id, e); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="1890.5,-598 1780.5,-598 1780.5,-562 1890.5,-562 1890.5,-598"/>
<text text-anchor="middle" x="1835.5" y="-576.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;Destination&lt;R&gt;, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2102,-1032 1997,-1032 1997,-996 2102,-996 2102,-1032"/>
<text text-anchor="middle" x="2049.5" y="-1010.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1845.34,-598.1C1878.47,-665.93 1995.43,-905.35 2035.17,-986.71"/>
<polygon fill="blue" stroke="blue" points="2032.09,-988.38 2039.62,-995.83 2038.38,-985.31 2032.09,-988.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn duplicate_contact_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, fill_in_field): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; CompletionE...">
<polygon fill="white" stroke="black" points="1656,-598 1498,-598 1498,-562 1656,-562 1656,-598"/>
<text text-anchor="middle" x="1577" y="-576.3" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_contact_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1656,-580C1692.63,-580 1735.74,-580 1770.42,-580"/>
<polygon fill="blue" stroke="blue" points="1770.43,-583.5 1780.43,-580 1770.43,-576.5 1770.43,-583.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn pni_matching_aci_is_okay&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid...">
<polygon fill="white" stroke="black" points="1674,-544 1480,-544 1480,-508 1674,-508 1674,-544"/>
<text text-anchor="middle" x="1577" y="-522.3" font-family="Helvetica,sans-Serif" font-size="14.00">pni_matching_aci_is_okay</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1663.77,-544.06C1698.46,-551.36 1737.83,-559.65 1770.01,-566.42"/>
<polygon fill="blue" stroke="blue" points="1769.69,-569.93 1780.2,-568.57 1771.13,-563.08 1769.69,-569.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn chat_item_order() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut partial = Store::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account data&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1641,-490 1513,-490 1513,-454 1641,-454 1641,-490"/>
<text text-anchor="middle" x="1577" y="-468.3" font-family="Helvetica,sans-Serif" font-size="14.00">chat_item_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1641.24,-482.76C1659.27,-486.81 1678.71,-492.15 1696,-499 1733.86,-513.99 1773.64,-538.27 1800.81,-556.35"/>
<polygon fill="blue" stroke="blue" points="1798.91,-559.29 1809.16,-561.98 1802.82,-553.49 1798.91,-559.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1355.72,-709.95C1379.1,-699.77 1406.09,-683.94 1422,-661 1477.47,-581.03 1391.27,-515.84 1458,-445 1469.8,-432.47 1486.14,-425.19 1502.89,-421.09"/>
<polygon fill="blue" stroke="blue" points="1503.7,-424.5 1512.77,-419.03 1502.27,-417.64 1503.7,-424.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expec...">
<polygon fill="white" stroke="black" points="1411.5,-524 1208.5,-524 1208.5,-488 1411.5,-488 1411.5,-524"/>
<text text-anchor="middle" x="1310" y="-502.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1402.42,-487.89C1409.21,-485.31 1415.81,-482.36 1422,-479 1441.34,-468.49 1438.59,-455.37 1458,-445 1471.76,-437.65 1487.46,-432.29 1502.82,-428.38"/>
<polygon fill="blue" stroke="blue" points="1503.91,-431.72 1512.84,-426.02 1502.31,-424.91 1503.91,-431.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(...">
<polygon fill="white" stroke="black" points="1406.5,-470 1213.5,-470 1213.5,-434 1406.5,-434 1406.5,-470"/>
<text text-anchor="middle" x="1310" y="-448.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1406.67,-439.73C1438.23,-435.68 1472.83,-431.24 1502.47,-427.43"/>
<polygon fill="blue" stroke="blue" points="1503.26,-430.86 1512.74,-426.12 1502.37,-423.92 1503.26,-430.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;fn allows_lone_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; ac...">
<polygon fill="white" stroke="black" points="1392.5,-416 1227.5,-416 1227.5,-380 1392.5,-380 1392.5,-416"/>
<text text-anchor="middle" x="1310" y="-394.3" font-family="Helvetica,sans-Serif" font-size="14.00">allows_lone_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1372.95,-379.95C1452.48,-360.41 1592.55,-338.55 1696,-391 1763.15,-425.04 1805.6,-508.65 1823.96,-552.36"/>
<polygon fill="blue" stroke="blue" points="1820.8,-553.87 1827.82,-561.81 1827.28,-551.23 1820.8,-553.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1392.67,-404.16C1427.68,-406.81 1468.26,-409.87 1502.33,-412.44"/>
<polygon fill="blue" stroke="blue" points="1502.45,-415.96 1512.69,-413.22 1502.98,-408.98 1502.45,-415.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err = partial.add_frame_item(item.into()).unwra...">
<polygon fill="white" stroke="black" points="854.5,-652 702.5,-652 702.5,-616 854.5,-616 854.5,-652"/>
<text text-anchor="middle" x="778.5" y="-630.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake() &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::fake_with([ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Recipient::test_data_contact().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Chat::test_data().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1084.5,-652 1030.5,-652 1030.5,-616 1084.5,-616 1084.5,-652"/>
<text text-anchor="middle" x="1057.5" y="-630.3" font-family="Helvetica,sans-Serif" font-size="14.00">fake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M854.83,-634C908.47,-634 978.21,-634 1020.04,-634"/>
<polygon fill="blue" stroke="blue" points="1020.31,-637.5 1030.31,-634 1020.31,-630.5 1020.31,-637.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M854.85,-620.4C885.24,-615.4 920.69,-610.19 953,-607 978.95,-604.44 1401.76,-603.45 1422,-587 1472.52,-545.93 1411.43,-490.5 1458,-445 1470.08,-433.2 1486.19,-426.15 1502.62,-422.03"/>
<polygon fill="blue" stroke="blue" points="1503.82,-425.35 1512.86,-419.82 1502.35,-418.51 1503.82,-425.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake_with(frames: impl IntoIterator&lt;Item = proto::frame::Item&gt;) &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut backup = Self::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for frame in frames { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backu...">
<polygon fill="white" stroke="black" points="1351,-652 1269,-652 1269,-616 1351,-616 1351,-652"/>
<text text-anchor="middle" x="1310" y="-630.3" font-family="Helvetica,sans-Serif" font-size="14.00">fake_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M854.78,-648.31C885.17,-653.4 920.63,-658.5 953,-661 1045.61,-668.16 1069.49,-669.42 1162,-661 1194.45,-658.04 1230.44,-651.49 1258.68,-645.58"/>
<polygon fill="blue" stroke="blue" points="1259.67,-648.95 1268.72,-643.44 1258.21,-642.1 1259.67,-648.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1084.83,-629.66C1125.93,-626.92 1206.05,-626.51 1258.53,-628.46"/>
<polygon fill="blue" stroke="blue" points="1258.5,-631.96 1268.64,-628.88 1258.79,-624.97 1258.5,-631.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn zero_chat_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account dat...">
<polygon fill="white" stroke="black" points="1628,-760 1526,-760 1526,-724 1628,-724 1628,-760"/>
<text text-anchor="middle" x="1577" y="-738.3" font-family="Helvetica,sans-Serif" font-size="14.00">zero_chat_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1628.09,-736.72C1649.94,-732.89 1675.24,-726.31 1696,-715 1746.13,-687.69 1790.76,-637.11 1815.09,-606.22"/>
<polygon fill="blue" stroke="blue" points="1818.05,-608.11 1821.4,-598.06 1812.51,-603.83 1818.05,-608.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;fn zero_recipient_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid accoun...">
<polygon fill="white" stroke="black" points="1643,-706 1511,-706 1511,-670 1643,-670 1643,-706"/>
<text text-anchor="middle" x="1577" y="-684.3" font-family="Helvetica,sans-Serif" font-size="14.00">zero_recipient_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.07,-676.83C1660.58,-672.82 1679.29,-667.62 1696,-661 1733.86,-646.01 1773.64,-621.73 1800.81,-603.65"/>
<polygon fill="blue" stroke="blue" points="1802.82,-606.51 1809.16,-598.02 1798.91,-600.71 1802.82,-606.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;fn duplicate_non_contact_recipient&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, destination): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; Co...">
<polygon fill="white" stroke="black" points="1696,-652 1458,-652 1458,-616 1696,-616 1696,-652"/>
<text text-anchor="middle" x="1577" y="-630.3" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_non_contact_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1663.77,-615.94C1698.46,-608.64 1737.83,-600.35 1770.01,-593.58"/>
<polygon fill="blue" stroke="blue" points="1771.13,-596.92 1780.2,-591.43 1769.69,-590.07 1771.13,-596.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1641.24,-425.86C1659.66,-429.86 1679.3,-435.9 1696,-445 1746.13,-472.31 1790.76,-522.89 1815.09,-553.78"/>
<polygon fill="blue" stroke="blue" points="1812.51,-556.17 1821.4,-561.94 1818.05,-551.89 1812.51,-556.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1268.64,-639.12C1220.64,-641.35 1141.24,-641.29 1095,-638.93"/>
<polygon fill="blue" stroke="blue" points="1095.02,-635.43 1084.83,-638.34 1094.61,-642.42 1095.02,-635.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1351.09,-632.28C1374.86,-629.14 1403.8,-621.23 1422,-602 1471.2,-550 1407.37,-495.61 1458,-445 1470.11,-432.89 1486.48,-425.76 1503.15,-421.65"/>
<polygon fill="blue" stroke="blue" points="1503.92,-425.07 1512.98,-419.58 1502.47,-418.22 1503.92,-425.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn try_from( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(username, username_link): (String, Option&lt;proto::account_data::UsernameLink&gt;), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;username)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2087,-1388 2012,-1388 2012,-1352 2087,-1352 2087,-1388"/>
<text text-anchor="middle" x="2049.5" y="-1366.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2087.04,-1363.42C2163.68,-1351.83 2343.04,-1336.49 2451,-1423 2511.04,-1471.11 2526.58,-1567.98 2530.6,-1615.87"/>
<polygon fill="blue" stroke="blue" points="2527.11,-1616.14 2531.33,-1625.86 2534.09,-1615.63 2527.11,-1616.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn valid_account_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::AccountData::test_data().try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(AccountData::from_proto_test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2124,-1334 1975,-1334 1975,-1298 2124,-1298 2124,-1334"/>
<text text-anchor="middle" x="2049.5" y="-1312.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(crate) fn from_proto_test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: FAKE_PROFILE_KEY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Some(UsernameData { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Use...">
<polygon fill="white" stroke="black" points="2386.5,-1334 2224.5,-1334 2224.5,-1298 2386.5,-1298 2386.5,-1334"/>
<text text-anchor="middle" x="2305.5" y="-1312.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_proto_test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2124.31,-1316C2152.35,-1316 2184.61,-1316 2214.02,-1316"/>
<polygon fill="blue" stroke="blue" points="2214.29,-1319.5 2224.29,-1316 2214.29,-1312.5 2214.29,-1319.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2386.65,-1333.88C2410.08,-1342.57 2433.95,-1355.34 2451,-1374 2514.77,-1443.8 2528.42,-1562.02 2531.28,-1615.82"/>
<polygon fill="blue" stroke="blue" points="2527.79,-1616.15 2531.73,-1625.99 2534.79,-1615.84 2527.79,-1616.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;ContactData, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2358,-1140 2253,-1140 2253,-1104 2358,-1104 2358,-1140"/>
<text text-anchor="middle" x="2305.5" y="-1118.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2328.13,-1140C2360.13,-1167.87 2419.66,-1224.67 2451,-1286 2508.72,-1398.95 2525.65,-1552.69 2530.33,-1615.5"/>
<polygon fill="blue" stroke="blue" points="2526.86,-1616.07 2531.04,-1625.8 2533.84,-1615.58 2526.86,-1616.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_self() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;recipient.try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Destination::...">
<polygon fill="white" stroke="black" points="1918,-1167 1753,-1167 1753,-1131 1918,-1131 1918,-1167"/>
<text text-anchor="middle" x="1835.5" y="-1145.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1918.08,-1131.76C1925.36,-1128.97 1932.45,-1125.74 1939,-1122 1975.68,-1101.09 2008.83,-1064.81 2028.81,-1040.12"/>
<polygon fill="blue" stroke="blue" points="2031.59,-1042.24 2035.06,-1032.23 2026.11,-1037.89 2031.59,-1042.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_group() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Group::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;...">
<polygon fill="white" stroke="black" points="1926,-1113 1745,-1113 1745,-1077 1926,-1077 1926,-1113"/>
<text text-anchor="middle" x="1835.5" y="-1091.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1912.06,-1076.95C1921.22,-1074.22 1930.38,-1071.22 1939,-1068 1962.24,-1059.31 1987.13,-1047.27 2007.29,-1036.77"/>
<polygon fill="blue" stroke="blue" points="2008.99,-1039.83 2016.2,-1032.07 2005.72,-1033.64 2008.99,-1039.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2093.01,-1032.08C2136.88,-1050.73 2205.35,-1079.84 2252.44,-1099.86"/>
<polygon fill="blue" stroke="blue" points="2251.28,-1103.17 2261.85,-1103.86 2254.01,-1096.73 2251.28,-1103.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;fn destination_distribution_list( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier: fn(&amp;mut proto::DistributionListItem), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut distribution_list = proto::DistributionListItem::tes...">
<polygon fill="white" stroke="black" points="1939,-1059 1732,-1059 1732,-1023 1939,-1023 1939,-1059"/>
<text text-anchor="middle" x="1835.5" y="-1037.3" font-family="Helvetica,sans-Serif" font-size="14.00">destination_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1939.08,-1027.93C1955.4,-1025.86 1971.82,-1023.77 1986.81,-1021.86"/>
<polygon fill="blue" stroke="blue" points="1987.45,-1025.3 1996.93,-1020.57 1986.57,-1018.36 1987.45,-1025.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;fn requires_destination() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: None, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r...">
<polygon fill="white" stroke="black" points="1914,-1005 1757,-1005 1757,-969 1914,-969 1914,-1005"/>
<text text-anchor="middle" x="1835.5" y="-983.3" font-family="Helvetica,sans-Serif" font-size="14.00">requires_destination</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1914.24,-996.9C1938.11,-999.94 1964.06,-1003.25 1986.71,-1006.13"/>
<polygon fill="blue" stroke="blue" points="1986.51,-1009.63 1996.87,-1007.43 1987.4,-1002.69 1986.51,-1009.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn destination_contact(modifier: fn(&amp;mut proto::Contact)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut contact = proto::Contact::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut contact); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipi...">
<polygon fill="white" stroke="black" points="1911.5,-951 1759.5,-951 1759.5,-915 1911.5,-915 1911.5,-951"/>
<text text-anchor="middle" x="1835.5" y="-929.3" font-family="Helvetica,sans-Serif" font-size="14.00">destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1911.51,-950.89C1920.85,-953.66 1930.21,-956.71 1939,-960 1962.24,-968.69 1987.13,-980.73 2007.29,-991.23"/>
<polygon fill="blue" stroke="blue" points="2005.72,-994.36 2016.2,-995.93 2008.99,-988.17 2005.72,-994.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;fn valid_distribution_list() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::DistributionListItem::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data(...">
<polygon fill="white" stroke="black" points="1917,-897 1754,-897 1754,-861 1917,-861 1917,-897"/>
<text text-anchor="middle" x="1835.5" y="-875.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1917.02,-895.83C1924.67,-898.72 1932.13,-902.08 1939,-906 1975.68,-926.91 2008.83,-963.19 2028.81,-987.88"/>
<polygon fill="blue" stroke="blue" points="2026.11,-990.11 2035.06,-995.77 2031.59,-985.76 2026.11,-990.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_contact() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Contact::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}...">
<polygon fill="white" stroke="black" points="1931,-843 1740,-843 1740,-807 1931,-807 1931,-843"/>
<text text-anchor="middle" x="1835.5" y="-821.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1923.56,-843.01C1928.99,-845.62 1934.2,-848.59 1939,-852 1987.59,-886.47 2021.02,-949.81 2037.24,-986.24"/>
<polygon fill="blue" stroke="blue" points="2034.18,-987.97 2041.36,-995.76 2040.6,-985.19 2034.18,-987.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn destination_group(modifier: fn(&amp;mut proto::Group)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut group = proto::Group::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut group); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = prot...">
<polygon fill="white" stroke="black" points="1906,-1221 1765,-1221 1765,-1185 1906,-1185 1906,-1221"/>
<text text-anchor="middle" x="1835.5" y="-1199.3" font-family="Helvetica,sans-Serif" font-size="14.00">destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1906.24,-1191.9C1917.83,-1188.07 1929.24,-1182.92 1939,-1176 1987.59,-1141.53 2021.02,-1078.19 2037.24,-1041.76"/>
<polygon fill="blue" stroke="blue" points="2040.6,-1042.81 2041.36,-1032.24 2034.18,-1040.03 2040.6,-1042.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chats_and_recipient_ids() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base = vec![crate::proto::backup::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: Some(proto::AccountData::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: Default::d...">
<polygon fill="white" stroke="black" points="900.5,-1051 656.5,-1051 656.5,-1015 900.5,-1015 900.5,-1051"/>
<text text-anchor="middle" x="778.5" y="-1029.3" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chats_and_recipient_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;fn backup_from_frames( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;frames: impl IntoIterator&lt;Item = proto::Frame&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; crate::CompletedBackup&lt;Store&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut reader = crate::backup::PartialBackup::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prot...">
<polygon fill="white" stroke="black" points="1138,-997 977,-997 977,-961 1138,-961 1138,-997"/>
<text text-anchor="middle" x="1057.5" y="-975.3" font-family="Helvetica,sans-Serif" font-size="14.00">backup_from_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M872.12,-1014.94C902.64,-1008.99 936.52,-1002.39 966.82,-996.48"/>
<polygon fill="blue" stroke="blue" points="967.8,-999.86 976.94,-994.51 966.46,-992.99 967.8,-999.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn can_serialize() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = Backup { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;meta: BackupMeta { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_time: Timestamp::test_value(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;purpose: crate::...">
<polygon fill="white" stroke="black" points="831,-1105 726,-1105 726,-1069 831,-1069 831,-1105"/>
<text text-anchor="middle" x="778.5" y="-1083.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.99,-1105.05C887.34,-1151.22 1108.4,-1270 1309,-1270 1309,-1270 1309,-1270 1836.5,-1270 1964.56,-1270 1996.68,-1275.29 2124,-1289 2153.45,-1292.17 2185.46,-1296.63 2214.23,-1301"/>
<polygon fill="blue" stroke="blue" points="2213.85,-1304.49 2224.26,-1302.55 2214.91,-1297.57 2213.85,-1304.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1076.52,-960.73C1120.48,-916.16 1233.34,-801.72 1283.88,-750.48"/>
<polygon fill="blue" stroke="blue" points="1286.62,-752.68 1291.15,-743.1 1281.63,-747.76 1286.62,-752.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chat_item_frames_not_equal() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let first_contact = make_contact(&#39; first&#39; , 1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let second_contact = make_contact(&#39; second&#39; , 2); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let constant_frames = vec![ &#160;&#160;...">
<polygon fill="white" stroke="black" points="917,-997 640,-997 640,-961 917,-961 917,-997"/>
<text text-anchor="middle" x="778.5" y="-975.3" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chat_item_frames_not_equal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.19,-979C934.01,-979 950.84,-979 966.7,-979"/>
<polygon fill="blue" stroke="blue" points="966.97,-982.5 976.97,-979 966.97,-975.5 966.97,-982.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().</title>
<g id="a_node45"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;futures::executor::block_on(async_main()) }">
<polygon fill="white" stroke="black" points="184.5,-708 130.5,-708 130.5,-672 184.5,-672 184.5,-708"/>
<text text-anchor="middle" x="157.5" y="-686.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M161.06,-708.16C176.56,-810.24 267.22,-1308 561.5,-1308 561.5,-1308 561.5,-1308 779.5,-1308 965.17,-1308 1035.62,-1276.02 1162,-1140 1268.89,-1024.96 1298.89,-827.27 1306.57,-753.69"/>
<polygon fill="blue" stroke="blue" points="1310.09,-753.66 1307.59,-743.37 1303.13,-752.98 1310.09,-753.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M184.54,-689.56C215.29,-688.09 267.29,-682.6 307,-663 481.93,-576.67 460.78,-461.47 632,-368 688.59,-337.11 855.42,-297.33 962.3,-273.86"/>
<polygon fill="blue" stroke="blue" points="963.11,-277.26 972.13,-271.7 961.62,-270.42 963.11,-277.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validate(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validate().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;async fn validate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut backup_reader: BackupReader&lt;impl AsyncRead + Unpin + VerifyHmac&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PrintOutput(print): PrintOutput, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verbosity: ParseVerbosity, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="193,-654 122,-654 122,-618 193,-618 193,-654"/>
<text text-anchor="middle" x="157.5" y="-632.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M193.22,-639.63C227.43,-641.09 278.59,-637.23 307,-606 347,-562.03 299.8,-387.9 335,-340 342.38,-329.95 353.58,-323.03 365.06,-318.26"/>
<polygon fill="blue" stroke="blue" points="366.48,-321.47 374.68,-314.75 364.08,-314.89 366.48,-321.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;pub async fn collect_all&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; ReadResult&lt;backup::PartialBackup&lt;M&gt;&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup::PartialBackup&lt;M&gt;: Send, &#160;&#160;&#160;&#160;{ &#160;...">
<polygon fill="white" stroke="black" points="604,-272 521,-272 521,-236 604,-236 604,-272"/>
<text text-anchor="middle" x="562.5" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">collect_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<g id="a_node50"><a xlink:title="async fn read_all_frames&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;purpose: Purpose, &#160;&#160;&#160;&#160;mut reader: VarintDelimitedReader&lt;impl AsyncRead + Unpin + VerifyHmac&gt;, &#160;&#160;&#160;&#160;mut visitor: impl F...">
<polygon fill="white" stroke="black" points="841,-272 716,-272 716,-236 841,-236 841,-272"/>
<text text-anchor="middle" x="778.5" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">read_all_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604,-254C632.55,-254 671.57,-254 705.38,-254"/>
<polygon fill="blue" stroke="blue" points="705.68,-257.5 715.68,-254 705.68,-250.5 705.68,-257.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M445.06,-297.27C459.86,-292.48 477.35,-286.65 493,-281 498.92,-278.86 505.09,-276.55 511.2,-274.2"/>
<polygon fill="blue" stroke="blue" points="512.66,-277.4 520.72,-270.52 510.13,-270.87 512.66,-277.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]validate_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M457.38,-254C474.19,-254 493.26,-254 510.45,-254"/>
<polygon fill="blue" stroke="blue" points="510.87,-257.5 520.87,-254 510.87,-250.5 510.87,-257.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M841.32,-254C876.89,-254 922.32,-254 962.26,-254"/>
<polygon fill="blue" stroke="blue" points="962.28,-257.5 972.28,-254 962.28,-250.5 962.28,-257.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1081.92,-272.15C1106.4,-292.57 1143.74,-328.15 1162,-368 1216.66,-487.27 1125.55,-551.62 1198,-661 1211.54,-681.44 1233.99,-696.14 1255.17,-706.25"/>
<polygon fill="blue" stroke="blue" points="1253.9,-709.52 1264.45,-710.45 1256.78,-703.14 1253.9,-709.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 invalid_jsonproto(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 invalid_jsonproto().</title>
<g id="a_node52"><a xlink:title="fn invalid_jsonproto(input: Fixture&lt;PathBuf&gt;) { &#160;&#160;&#160;&#160;let path = input.into_content(); &#160;&#160;&#160;&#160;let expected_path = path.with_extension(EXPECTED_SUFFIX); &#160;&#160;&#160;&#160;&#160;let json_contents = json5::from_str(&amp;std::fs::re...">
<polygon fill="white" stroke="black" points="224.5,-517 90.5,-517 90.5,-481 224.5,-481 224.5,-517"/>
<text text-anchor="middle" x="157.5" y="-495.3" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_jsonproto</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 invalid_jsonproto().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 invalid_jsonproto().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M224.73,-502.53C253.5,-500.51 285.48,-492.9 307,-472 350.02,-430.22 297.02,-386.41 335,-340 342.83,-330.44 354.05,-323.66 365.41,-318.89"/>
<polygon fill="blue" stroke="blue" points="366.76,-322.12 374.9,-315.34 364.31,-315.57 366.76,-322.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 can_serialize_json_proto(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 can_serialize_json_proto().</title>
<g id="a_node53"><a xlink:title="fn can_serialize_json_proto(input: Fixture&lt;&amp;str&gt;) { &#160;&#160;&#160;&#160;let json_contents = input.into_content(); &#160;&#160;&#160;&#160;let json_contents = json5::from_str(json_contents).expect(&#39; invalid JSON&#39; ); &#160;&#160;&#160;&#160;let json_array = ...">
<polygon fill="white" stroke="black" points="249,-463 66,-463 66,-427 249,-427 249,-463"/>
<text text-anchor="middle" x="157.5" y="-441.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_serialize_json_proto</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 can_serialize_json_proto().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 can_serialize_json_proto().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M249.11,-443.64C269.99,-439.46 290.81,-431.72 307,-418 335.1,-394.19 309.8,-366.86 335,-340 343.22,-331.24 354.25,-324.75 365.28,-320"/>
<polygon fill="blue" stroke="blue" points="366.85,-323.15 374.9,-316.26 364.32,-316.63 366.85,-323.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scrambler_smoke_test(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scrambler_smoke_test().</title>
<g id="a_node54"><a xlink:title="fn scrambler_smoke_test() { &#160;&#160;&#160;&#160;// Scrambling is deterministic, so we can check against expected output. &#160;&#160;&#160;&#160;let binproto = include_bytes!(&#39; res/canonical&#45;backup.binproto&#39; ); &#160;&#160;&#160;&#160;let scrambled_binprot...">
<polygon fill="white" stroke="black" points="243,-409 72,-409 72,-373 243,-373 243,-409"/>
<text text-anchor="middle" x="157.5" y="-387.3" font-family="Helvetica,sans-Serif" font-size="14.00">scrambler_smoke_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scrambler_smoke_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scrambler_smoke_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M243.39,-380.57C264.74,-376.15 287.2,-369.88 307,-361 321.19,-354.64 321.55,-347.81 335,-340 344.55,-334.46 355.23,-329.3 365.45,-324.8"/>
<polygon fill="blue" stroke="blue" points="366.84,-328.02 374.66,-320.87 364.09,-321.58 366.84,-328.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 serialized_account_settings_is_valid(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 serialized_account_settings_is_valid().</title>
<g id="a_node55"><a xlink:title="fn serialized_account_settings_is_valid() { &#160;&#160;&#160;&#160;let binproto = include_bytes!(&#39; res/canonical&#45;backup.binproto&#39; ); &#160;&#160;&#160;&#160;let expected_canonical_str = include_str!(&#39; res/canonical&#45;backup.expected.json&#39; );...">
<polygon fill="white" stroke="black" points="289.5,-571 25.5,-571 25.5,-535 289.5,-535 289.5,-571"/>
<text text-anchor="middle" x="157.5" y="-549.3" font-family="Helvetica,sans-Serif" font-size="14.00">serialized_account_settings_is_valid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 serialized_account_settings_is_valid().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 serialized_account_settings_is_valid().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]read_all().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M289.57,-539.63C295.92,-535.86 301.8,-531.36 307,-526 365.21,-465.99 284.01,-406.24 335,-340 342.6,-330.12 353.87,-323.24 365.34,-318.47"/>
<polygon fill="blue" stroke="blue" points="366.76,-321.68 374.94,-314.94 364.34,-315.11 366.76,-321.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node56"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2332.5,-760 2278.5,-760 2278.5,-724 2332.5,-724 2332.5,-760"/>
<text text-anchor="middle" x="2305.5" y="-738.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2332.74,-743.5C2366.05,-746.93 2422.6,-758.19 2451,-795 2502.24,-861.41 2526.24,-1475.52 2531.07,-1615.63"/>
<polygon fill="blue" stroke="blue" points="2527.58,-1616.08 2531.42,-1625.95 2534.58,-1615.84 2527.58,-1616.08"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node57"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2121,-279 1978,-279 1978,-243 2121,-243 2121,-279"/>
<text text-anchor="middle" x="2049.5" y="-257.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node59"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="2368.5,-279 2242.5,-279 2242.5,-243 2368.5,-243 2368.5,-279"/>
<text text-anchor="middle" x="2305.5" y="-257.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2121.25,-261C2155.86,-261 2197.44,-261 2232.24,-261"/>
<polygon fill="blue" stroke="blue" points="2232.34,-264.5 2242.34,-261 2232.34,-257.5 2232.34,-264.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node60"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2369.5,-333 2241.5,-333 2241.5,-297 2369.5,-297 2369.5,-333"/>
<text text-anchor="middle" x="2305.5" y="-311.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2115,-279.04C2127.25,-282.21 2139.98,-285.34 2152,-288 2177.73,-293.69 2206.1,-298.98 2231.33,-303.34"/>
<polygon fill="blue" stroke="blue" points="2230.75,-306.79 2241.2,-305.03 2231.93,-299.89 2230.75,-306.79"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2087.41,-242.88C2165.96,-207.23 2350.67,-139.27 2451,-234 2503.16,-283.25 2527.65,-1421.26 2531.47,-1615.83"/>
<polygon fill="blue" stroke="blue" points="2527.97,-1615.91 2531.66,-1625.84 2534.97,-1615.77 2527.97,-1615.91"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node58"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1873,-279 1798,-279 1798,-243 1873,-243 1873,-279"/>
<text text-anchor="middle" x="1835.5" y="-257.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1873.43,-261C1899.33,-261 1934.99,-261 1967.36,-261"/>
<polygon fill="blue" stroke="blue" points="1967.74,-264.5 1977.74,-261 1967.74,-257.5 1967.74,-264.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2368.73,-256.34C2398,-257.73 2430.82,-265.13 2451,-288 2496.53,-339.61 2526.38,-1424.89 2531.29,-1615.53"/>
<polygon fill="blue" stroke="blue" points="2527.79,-1615.7 2531.54,-1625.61 2534.79,-1615.53 2527.79,-1615.7"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2315.04,-333.09C2340.71,-388.37 2417.47,-560.54 2451,-712 2528.55,-1062.25 2532.58,-1501.91 2532.22,-1615.96"/>
<polygon fill="blue" stroke="blue" points="2528.72,-1615.95 2532.18,-1625.97 2535.72,-1615.98 2528.72,-1615.95"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;fn from_parts_without_soft_limit( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;validate_prefix(nickname)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let discriminator = valida...">
<polygon fill="white" stroke="black" points="2834,-1770 2615,-1770 2615,-1734 2834,-1734 2834,-1770"/>
<text text-anchor="middle" x="2724.5" y="-1748.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts_without_soft_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2560.35,-1659.02C2592.04,-1677.08 2645.58,-1707.59 2682.64,-1728.72"/>
<polygon fill="blue" stroke="blue" points="2681.27,-1731.96 2691.69,-1733.87 2684.73,-1725.88 2681.27,-1731.96"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn invalid_nicknames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (nickname, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::NicknameCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; ab🦀d&#39; , UsernameError::BadNicknameCharacter), &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2377.5,-1932 2233.5,-1932 2233.5,-1896 2377.5,-1896 2377.5,-1932"/>
<text text-anchor="middle" x="2305.5" y="-1910.3" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_nicknames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2377.67,-1915.19C2403.39,-1912.16 2430.99,-1904.44 2451,-1887 2484.06,-1858.19 2514.26,-1729.54 2526.38,-1671.99"/>
<polygon fill="blue" stroke="blue" points="2529.82,-1672.61 2528.43,-1662.11 2522.97,-1671.19 2529.82,-1672.61"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2377.85,-1902.67C2401.3,-1898.41 2427.4,-1893.11 2451,-1887 2459.55,-1884.79 2468.51,-1882.14 2477.22,-1879.39"/>
<polygon fill="blue" stroke="blue" points="2478.48,-1882.66 2486.92,-1876.24 2476.32,-1876 2478.48,-1882.66"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar().</title>
<g id="a_node63"><a xlink:title="fn nickname_scalar(nickname: &amp;str) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;!nickname.is_empty(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; should be checked before calling nickname_scalar&#39; , &#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;let bytes: Vec...">
<polygon fill="white" stroke="black" points="3334,-1824 3202,-1824 3202,-1788 3334,-1788 3334,-1824"/>
<text text-anchor="middle" x="3268" y="-1802.3" font-family="Helvetica,sans-Serif" font-size="14.00">nickname_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/to_base_37_scalar(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/to_base_37_scalar().</title>
<g id="a_node65"><a xlink:title="fn to_base_37_scalar(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes.len() &lt;= MAX_NICKNAME_LENGTH, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; may not fit in a Scalar&#39; &#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;let thirty_seven = Scalar::from(37u8); &#160;&#160;&#160;&#160;let m...">
<polygon fill="white" stroke="black" points="3513,-1824 3370,-1824 3370,-1788 3513,-1788 3513,-1824"/>
<text text-anchor="middle" x="3441.5" y="-1802.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_base_37_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/to_base_37_scalar(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/to_base_37_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.33,-1806C3342.69,-1806 3351.34,-1806 3359.91,-1806"/>
<polygon fill="blue" stroke="blue" points="3359.93,-1809.5 3369.93,-1806 3359.93,-1802.5 3359.93,-1809.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;fn no_discriminator() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::new(&#39; no_discriminator&#39; ).expect_err(&#39; not a valid username&#39; ), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UsernameError::MissingSeparator &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2371.5,-1770 2239.5,-1770 2239.5,-1734 2371.5,-1734 2371.5,-1770"/>
<text text-anchor="middle" x="2305.5" y="-1748.3" font-family="Helvetica,sans-Serif" font-size="14.00">no_discriminator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2371.82,-1748.15C2397.64,-1744.54 2426.84,-1737.73 2451,-1725 2475.87,-1711.89 2497.97,-1688.57 2512.78,-1670.3"/>
<polygon fill="blue" stroke="blue" points="2515.62,-1672.34 2519.05,-1662.32 2510.12,-1668.02 2515.62,-1672.34"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/to_base_37_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`From&lt;u8&gt;`]from(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/to_base_37_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar][`From&lt;u8&gt;`]from().</title>
<path fill="none" stroke="blue" d="M3513.29,-1806C3522.73,-1806 3532.07,-1806 3540.57,-1806"/>
<polygon fill="blue" stroke="blue" points="3540.84,-1809.5 3550.84,-1806 3540.84,-1802.5 3540.84,-1809.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;fn invalid_discriminators() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (discriminator, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::DiscriminatorCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; 0&#39; , UsernameError::DiscriminatorCannot...">
<polygon fill="white" stroke="black" points="2389.5,-1878 2221.5,-1878 2221.5,-1842 2389.5,-1842 2389.5,-1878"/>
<text text-anchor="middle" x="2305.5" y="-1856.3" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_discriminators</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2389.62,-1858.38C2411.43,-1854.44 2433.67,-1846.88 2451,-1833 2501.62,-1792.45 2521.19,-1714.26 2528.28,-1672.28"/>
<polygon fill="blue" stroke="blue" points="2531.77,-1672.61 2529.86,-1662.19 2524.86,-1671.53 2531.77,-1672.61"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2389.51,-1860C2418.55,-1860 2450.44,-1860 2476.67,-1860"/>
<polygon fill="blue" stroke="blue" points="2476.79,-1863.5 2486.79,-1860 2476.79,-1856.5 2476.79,-1863.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nicknames_should_produce_scalar(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nicknames_should_produce_scalar().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn valid_nicknames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(&amp;nickname).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3166,-1878 2870,-1878 2870,-1842 3166,-1842 3166,-1878"/>
<text text-anchor="middle" x="3018" y="-1856.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_nicknames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nicknames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nicknames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3123.21,-1841.92C3137.62,-1839.11 3152.2,-1836.11 3166,-1833 3174.71,-1831.04 3183.81,-1828.83 3192.81,-1826.55"/>
<polygon fill="blue" stroke="blue" points="3193.72,-1829.93 3202.53,-1824.05 3191.98,-1823.15 3193.72,-1829.93"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2451,-1716 2160,-1716 2160,-1680 2451,-1680 2451,-1716"/>
<text text-anchor="middle" x="2305.5" y="-1694.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2412.23,-1679.98C2425.35,-1677.23 2438.52,-1674.23 2451,-1671 2465.9,-1667.14 2482.03,-1661.98 2495.95,-1657.19"/>
<polygon fill="blue" stroke="blue" points="2497.36,-1660.41 2505.64,-1653.8 2495.05,-1653.8 2497.36,-1660.41"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2565.72,-1841.92C2597.83,-1823.62 2647.62,-1795.25 2682.66,-1775.28"/>
<polygon fill="blue" stroke="blue" points="2684.72,-1778.13 2691.68,-1770.14 2681.26,-1772.05 2684.72,-1778.13"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="2432.5,-1662 2178.5,-1662 2178.5,-1626 2432.5,-1626 2432.5,-1662"/>
<text text-anchor="middle" x="2305.5" y="-1640.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2432.76,-1644C2455.77,-1644 2478.01,-1644 2495.58,-1644"/>
<polygon fill="blue" stroke="blue" points="2495.89,-1647.5 2505.89,-1644 2495.89,-1640.5 2495.89,-1647.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node73"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3073,-1770 2963,-1770 2963,-1734 3073,-1734 3073,-1770"/>
<text text-anchor="middle" x="3018" y="-1748.3" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2834.04,-1752C2873.97,-1752 2917.89,-1752 2952.68,-1752"/>
<polygon fill="blue" stroke="blue" points="2952.71,-1755.5 2962.71,-1752 2952.71,-1748.5 2952.71,-1755.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nickname_scalar(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nickname_scalar().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn valid_nickname_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// the results should be 1 + 27*27 + 37*27*37^1 + 1*27*37^2 = 74656 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _z9_&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Scalar::from(74656_u32), nickname_scala...">
<polygon fill="white" stroke="black" points="3104,-1824 2932,-1824 2932,-1788 3104,-1788 3104,-1824"/>
<text text-anchor="middle" x="3018" y="-1802.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_nickname_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nickname_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_nickname_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3104,-1806C3132.47,-1806 3164,-1806 3191.68,-1806"/>
<polygon fill="blue" stroke="blue" points="3191.69,-1809.5 3201.69,-1806 3191.69,-1802.5 3191.69,-1809.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/nickname_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3073.32,-1760.91C3101.14,-1765.75 3135.5,-1772.13 3166,-1779 3174.71,-1780.96 3183.81,-1783.17 3192.81,-1785.45"/>
<polygon fill="blue" stroke="blue" points="3191.98,-1788.85 3202.53,-1787.95 3193.72,-1782.07 3191.98,-1788.85"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn nicknames_exceeding_soft_limits() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39; 42&#39; , NicknameLimits::default()).expect(&#39; valid&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39;...">
<polygon fill="white" stroke="black" points="2428.5,-1986 2182.5,-1986 2182.5,-1950 2428.5,-1950 2428.5,-1986"/>
<text text-anchor="middle" x="2305.5" y="-1964.3" font-family="Helvetica,sans-Serif" font-size="14.00">nicknames_exceeding_soft_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2428.57,-1950.77C2436.34,-1947.98 2443.89,-1944.75 2451,-1941 2475.87,-1927.89 2497.97,-1904.57 2512.78,-1886.3"/>
<polygon fill="blue" stroke="blue" points="2515.62,-1888.34 2519.05,-1878.32 2510.12,-1884.02 2515.62,-1888.34"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="2372,-1824 2239,-1824 2239,-1788 2372,-1788 2372,-1824"/>
<text text-anchor="middle" x="2305.5" y="-1802.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2372.13,-1805.22C2398.57,-1802.13 2428.16,-1794.88 2451,-1779 2488.66,-1752.81 2511.76,-1702.94 2523.2,-1671.69"/>
<polygon fill="blue" stroke="blue" points="2526.5,-1672.85 2526.51,-1662.25 2519.89,-1670.53 2526.5,-1672.85"/>
</g>
</g>
</svg>
