<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="4035pt" height="4194pt"
 viewBox="0.00 0.00 4035.00 4194.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 4190)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-4190 4031,-4190 4031,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3599,-3337 3599,-3466 4019,-3466 4019,-3337 3599,-3337"/>
<text text-anchor="middle" x="3809" y="-3450.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3373,-3270 3373,-3345 3495,-3345 3495,-3270 3373,-3270"/>
<text text-anchor="middle" x="3434" y="-3329.8" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3057,-3727 3057,-3856 3906,-3856 3906,-3727 3057,-3727"/>
<text text-anchor="middle" x="3481.5" y="-3840.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="32.5,-4049 32.5,-4178 284.5,-4178 284.5,-4049 32.5,-4049"/>
<text text-anchor="middle" x="158.5" y="-4162.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="1103,-768 1103,-1491 1393,-1491 1393,-768 1103,-768"/>
<text text-anchor="middle" x="1248" y="-1475.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="1660,-1871 1660,-1946 2056.5,-1946 2056.5,-1871 1660,-1871"/>
<text text-anchor="middle" x="1858.25" y="-1930.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="2242.5,-2288 2242.5,-2363 2346.5,-2363 2346.5,-2288 2242.5,-2288"/>
<text text-anchor="middle" x="2294.5" y="-2347.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="2204.5,-1837 2204.5,-2006 2933,-2006 2933,-1837 2204.5,-1837"/>
<text text-anchor="middle" x="2568.75" y="-1990.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="2667.5,-3170 2667.5,-3299 3195,-3299 3195,-3170 2667.5,-3170"/>
<text text-anchor="middle" x="2931.25" y="-3283.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="729,-4049 729,-4124 1335,-4124 1335,-4049 729,-4049"/>
<text text-anchor="middle" x="1032" y="-4108.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="1639.5,-3750 1639.5,-3879 1771.5,-3879 1771.5,-3750 1639.5,-3750"/>
<text text-anchor="middle" x="1705.5" y="-3863.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="1891.5,-3750 1891.5,-3879 2876.5,-3879 2876.5,-3750 1891.5,-3750"/>
<text text-anchor="middle" x="2384" y="-3863.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="2668,-3383 2668,-3620 3576,-3620 3576,-3383 2668,-3383"/>
<text text-anchor="middle" x="3122" y="-3604.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="329,-3750 329,-4041 1369,-4041 1369,-3750 329,-3750"/>
<text text-anchor="middle" x="849" y="-4025.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-3696 8,-4041 309,-4041 309,-3696 8,-3696"/>
<text text-anchor="middle" x="158.5" y="-4025.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="2732,-3667 2732,-3742 2802,-3742 2802,-3667 2732,-3667"/>
<text text-anchor="middle" x="2767" y="-3726.8" font-family="Helvetica,sans-Serif" font-size="14.00">env.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="438.5,-2122 438.5,-2197 529.5,-2197 529.5,-2122 438.5,-2122"/>
<text text-anchor="middle" x="484" y="-2181.8" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="443,-8 443,-83 1342,-83 1342,-8 443,-8"/>
<text text-anchor="middle" x="892.5" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="1182,-2068 1182,-2197 1315,-2197 1315,-2068 1182,-2068"/>
<text text-anchor="middle" x="1248.5" y="-2181.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="702.5,-2205 702.5,-2280 1343,-2280 1343,-2205 702.5,-2205"/>
<text text-anchor="middle" x="1022.75" y="-2264.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="1639,-415 1639,-544 1772,-544 1772,-415 1639,-415"/>
<text text-anchor="middle" x="1705.5" y="-528.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1126,-3613 1126,-3742 1805,-3742 1805,-3613 1126,-3613"/>
<text text-anchor="middle" x="1465.5" y="-3726.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1825,-876 1825,-1059 2329.5,-1059 2329.5,-876 1825,-876"/>
<text text-anchor="middle" x="2077.25" y="-1043.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1606.5,-1562 1606.5,-1799 2338,-1799 2338,-1562 1606.5,-1562"/>
<text text-anchor="middle" x="1972.25" y="-1783.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1608.5,-1984 1608.5,-2059 1802.5,-2059 1802.5,-1984 1608.5,-1984"/>
<text text-anchor="middle" x="1705.5" y="-2043.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="2232,-793 2232,-868 2357,-868 2357,-793 2232,-793"/>
<text text-anchor="middle" x="2294.5" y="-852.8" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1008.5,-91 1008.5,-760 1487.5,-760 1487.5,-91 1008.5,-91"/>
<text text-anchor="middle" x="1248" y="-744.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="993.5,-1499 993.5,-2060 1502.5,-2060 1502.5,-1499 993.5,-1499"/>
<text text-anchor="middle" x="1248" y="-2044.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="910,-2288 910,-3605 1740.5,-3605 1740.5,-2288 910,-2288"/>
<text text-anchor="middle" x="1325.25" y="-3589.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="1610.5,-2097 1610.5,-2280 2329.5,-2280 2329.5,-2097 1610.5,-2097"/>
<text text-anchor="middle" x="1970" y="-2264.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (is_valid_y_coord, X, Y, Z) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_valid_y_coord.into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(decompress::step_2(sel...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3708,-3435 3607,-3435 3607,-3399 3708,-3399 3708,-3435"/>
<text text-anchor="middle" x="3657.5" y="-3413.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_2(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_2().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_2( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;repr: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut X: FieldElement, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Y: FieldElement, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Z: FieldElement, &#160;&#160;&#160;&#160;) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// FieldElement::sqrt_ratio...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3853.5,-3435 3791.5,-3435 3791.5,-3399 3853.5,-3399 3853.5,-3435"/>
<text text-anchor="middle" x="3822.5" y="-3413.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_2(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3708.29,-3417C3731.73,-3417 3759.31,-3417 3781.39,-3417"/>
<polygon fill="gray" stroke="gray" points="3781.42,-3420.5 3791.42,-3417 3781.42,-3413.5 3781.42,-3420.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_1( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;repr: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;) &#45;&gt; (Choice, FieldElement, FieldElement, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = FieldElement::from_bytes(repr.as_bytes()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = Fi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3853.5,-3381 3791.5,-3381 3791.5,-3345 3853.5,-3345 3853.5,-3381"/>
<text text-anchor="middle" x="3822.5" y="-3359.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3708.29,-3400.5C3731.84,-3392.7 3759.56,-3383.52 3781.69,-3376.19"/>
<polygon fill="gray" stroke="gray" points="3783.03,-3379.43 3791.42,-3372.97 3780.83,-3372.79 3783.03,-3379.43"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub const fn as_bytes(&amp;self) &#45;&gt; &amp;[u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.0 &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="4011,-3381 3934,-3381 3934,-3345 4011,-3345 4011,-3381"/>
<text text-anchor="middle" x="3972.5" y="-3359.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3853.86,-3407.66C3869.53,-3402.69 3888.89,-3396.32 3906,-3390 3911.98,-3387.79 3918.23,-3385.37 3924.38,-3382.91"/>
<polygon fill="gray" stroke="gray" points="3925.98,-3386.04 3933.94,-3379.05 3923.35,-3379.55 3925.98,-3386.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3853.81,-3363C3873.9,-3363 3900.69,-3363 3923.64,-3363"/>
<polygon fill="gray" stroke="gray" points="3923.87,-3366.5 3933.87,-3363 3923.87,-3359.5 3923.87,-3366.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub fn to_edwards(&amp;self, sign: u8) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// To decompress the Montgomery u coordinate to an &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// `EdwardsPoint`, we apply the birational map to obtain the &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3481,-3314 3386,-3314 3386,-3278 3481,-3278 3481,-3314"/>
<text text-anchor="middle" x="3433.5" y="-3292.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_edwards</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3481.23,-3309.04C3509.71,-3318.06 3546.23,-3331.56 3576,-3349 3596.16,-3360.81 3616.25,-3377.77 3631.31,-3391.79"/>
<polygon fill="gray" stroke="gray" points="3629.04,-3394.46 3638.7,-3398.81 3633.86,-3389.39 3629.04,-3394.46"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3477.5,-3771 3389.5,-3771 3389.5,-3735 3477.5,-3735 3477.5,-3771"/>
<text text-anchor="middle" x="3433.5" y="-3749.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3711,-3771 3604,-3771 3604,-3735 3711,-3735 3711,-3771"/>
<text text-anchor="middle" x="3657.5" y="-3749.3" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3477.57,-3753C3510.53,-3753 3556.48,-3753 3593.56,-3753"/>
<polygon fill="gray" stroke="gray" points="3593.77,-3756.5 3603.77,-3753 3593.77,-3749.5 3593.77,-3756.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3898,-3771 3747,-3771 3747,-3735 3898,-3735 3898,-3771"/>
<text text-anchor="middle" x="3822.5" y="-3749.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3830.34,-3734.97C3853.96,-3672.73 3932.19,-3466.58 3960.86,-3391.05"/>
<polygon fill="gray" stroke="gray" points="3964.28,-3391.88 3964.56,-3381.29 3957.74,-3389.39 3964.28,-3391.88"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3711.42,-3753C3719.57,-3753 3728.16,-3753 3736.8,-3753"/>
<polygon fill="gray" stroke="gray" points="3736.93,-3756.5 3746.93,-3753 3736.93,-3749.5 3736.93,-3756.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3140,-3771 3084,-3771 3084,-3735 3140,-3735 3140,-3771"/>
<text text-anchor="middle" x="3112" y="-3749.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3140.24,-3753C3193.06,-3753 3310.26,-3753 3379.12,-3753"/>
<polygon fill="gray" stroke="gray" points="3379.33,-3756.5 3389.33,-3753 3379.33,-3749.5 3379.33,-3756.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; PUBLIC_KEY_LENGTH]) &#45;&gt; Result&lt;VerifyingKey, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed = CompressedEdwardsY(*bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let point = compressed &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decomp...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3159,-3825 3065,-3825 3065,-3789 3159,-3789 3159,-3825"/>
<text text-anchor="middle" x="3112" y="-3803.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3159.08,-3807.87C3190.66,-3806.4 3232.24,-3800.17 3263,-3780 3287.12,-3764.18 3276.35,-3743.86 3299,-3726 3402.01,-3644.76 3482.4,-3715.93 3576,-3624 3626.58,-3574.33 3646.03,-3489.25 3652.97,-3445.23"/>
<polygon fill="gray" stroke="gray" points="3656.45,-3445.62 3654.45,-3435.22 3649.53,-3444.6 3656.45,-3445.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().</title>
<g id="a_node11"><a xlink:title="async fn KeyTransparency_Search( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedChatConnec...">
<polygon fill="white" stroke="black" points="252.5,-4147 64.5,-4147 64.5,-4111 252.5,-4111 252.5,-4147"/>
<text text-anchor="middle" x="158.5" y="-4125.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;async fn search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_identity_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;(E164, Vec&lt;u8&gt;)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored_acco...">
<polygon fill="white" stroke="black" points="515,-3956 453,-3956 453,-3920 515,-3920 515,-3956"/>
<text text-anchor="middle" x="484" y="-3934.3" font-family="Helvetica,sans-Serif" font-size="14.00">search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M252.75,-4129.93C273.73,-4125.7 294.15,-4117.36 309,-4102 351.77,-4057.76 286.12,-4009.13 329,-3965 357.97,-3935.19 407.4,-3931.38 442.44,-3933.14"/>
<polygon fill="blue" stroke="blue" points="442.59,-3936.66 452.81,-3933.84 443.07,-3929.67 442.59,-3936.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().</title>
<g id="a_node12"><a xlink:title="async fn KeyTransparency_Distinguished( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedCha...">
<polygon fill="white" stroke="black" points="276.5,-4093 40.5,-4093 40.5,-4057 276.5,-4057 276.5,-4093"/>
<text text-anchor="middle" x="158.5" y="-4071.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;async fn distinguished( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished: Option&lt;LastTreeHead&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;SearchStateUpdate, RequestError&lt;Error&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ChatDistinguishedResponse { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="539,-3848 429,-3848 429,-3812 539,-3812 539,-3848"/>
<text text-anchor="middle" x="484" y="-3826.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M276.79,-4066.98C288.94,-4061.88 300.08,-4054.78 309,-4045 365.62,-3982.91 271.63,-3918.39 329,-3857 351.49,-3832.93 387.27,-3825.62 418.68,-3824.58"/>
<polygon fill="blue" stroke="blue" points="418.75,-3828.08 428.71,-3824.45 418.66,-3821.08 418.75,-3828.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node13"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1365.5,-1082 1130.5,-1082 1130.5,-1046 1365.5,-1046 1365.5,-1082"/>
<text text-anchor="middle" x="1248" y="-1060.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node93"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="1793.5,-1606 1617.5,-1606 1617.5,-1570 1793.5,-1570 1793.5,-1606"/>
<text text-anchor="middle" x="1705.5" y="-1584.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1324.43,-1045.94C1399.05,-1032.98 1511.49,-1027.46 1578,-1091 1613.97,-1125.36 1594.92,-1264.63 1606.5,-1313 1628.8,-1406.15 1671.58,-1511.63 1692.45,-1560.48"/>
<polygon fill="blue" stroke="blue" points="1689.27,-1561.94 1696.44,-1569.74 1695.7,-1559.18 1689.27,-1561.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node14"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="1321,-1298 1175,-1298 1175,-1262 1321,-1262 1321,-1298"/>
<text text-anchor="middle" x="1248" y="-1276.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="2568.5,-1975 2418.5,-1975 2418.5,-1939 2568.5,-1939 2568.5,-1975"/>
<text text-anchor="middle" x="2493.5" y="-1953.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1321.35,-1275.33C1407.44,-1271.52 1543.86,-1271.55 1578,-1307 1627.61,-1358.51 1555.45,-1899.92 1606.5,-1950 1653.95,-1996.54 2138.04,-1964.17 2204.5,-1965 2281.61,-1965.97 2300.94,-1967.69 2378,-1965 2387.78,-1964.66 2398.03,-1964.15 2408.2,-1963.56"/>
<polygon fill="blue" stroke="blue" points="2408.55,-1967.05 2418.32,-1962.94 2408.13,-1960.06 2408.55,-1967.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node15"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="1347.5,-1028 1148.5,-1028 1148.5,-992 1347.5,-992 1347.5,-1028"/>
<text text-anchor="middle" x="1248" y="-1006.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="2039.5,-1713 1968.5,-1713 1968.5,-1677 2039.5,-1677 2039.5,-1713"/>
<text text-anchor="middle" x="2004" y="-1691.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1347.66,-992.56C1418.44,-985.67 1512.51,-988.7 1578,-1037 1605.37,-1057.18 1590.56,-1077.96 1606.5,-1108 1728.31,-1337.54 1919.16,-1588.07 1982.1,-1668.56"/>
<polygon fill="blue" stroke="blue" points="1979.53,-1670.96 1988.46,-1676.67 1985.04,-1666.64 1979.53,-1670.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node16"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="1361.5,-812 1134.5,-812 1134.5,-776 1361.5,-776 1361.5,-812"/>
<text text-anchor="middle" x="1248" y="-790.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node80"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="1764,-459 1647,-459 1647,-423 1764,-423 1764,-459"/>
<text text-anchor="middle" x="1705.5" y="-437.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1327.06,-812.05C1402.1,-824.32 1513.35,-828.32 1578,-764 1624.84,-717.39 1563.98,-518.59 1606.5,-468 1614.52,-458.46 1625.57,-452.13 1637.37,-447.96"/>
<polygon fill="blue" stroke="blue" points="1638.4,-451.31 1646.96,-445.06 1636.37,-444.61 1638.4,-451.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node17"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="1333,-1190 1163,-1190 1163,-1154 1333,-1154 1333,-1190"/>
<text text-anchor="middle" x="1248" y="-1168.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="1732.5,-1768 1678.5,-1768 1678.5,-1732 1732.5,-1732 1732.5,-1768"/>
<text text-anchor="middle" x="1705.5" y="-1746.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1333.23,-1166.9C1419.43,-1163.71 1545.23,-1165.32 1578,-1199 1618.66,-1240.79 1569.92,-1677.59 1606.5,-1723 1621.15,-1741.19 1646.85,-1747.79 1668.25,-1749.92"/>
<polygon fill="blue" stroke="blue" points="1668.12,-1753.42 1678.34,-1750.64 1668.62,-1746.44 1668.12,-1753.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node18"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1342,-974 1154,-974 1154,-938 1342,-938 1342,-974"/>
<text text-anchor="middle" x="1248" y="-952.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2321.5,-1028 2267.5,-1028 2267.5,-992 2321.5,-992 2321.5,-1028"/>
<text text-anchor="middle" x="2294.5" y="-1006.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1342.31,-958.01C1408.61,-960.81 1499.44,-967.42 1578,-983 1691.06,-1005.41 1711.12,-1044.23 1825,-1062 1978.7,-1085.98 2022.76,-1093.93 2175,-1062 2204.37,-1055.84 2235.36,-1041.95 2258.28,-1030.07"/>
<polygon fill="blue" stroke="blue" points="2260.07,-1033.08 2267.27,-1025.3 2256.79,-1026.9 2260.07,-1033.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node19"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="1335,-1136 1161,-1136 1161,-1100 1335,-1100 1335,-1136"/>
<text text-anchor="middle" x="1248" y="-1114.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1732.5,-1660 1678.5,-1660 1678.5,-1624 1732.5,-1624 1732.5,-1660"/>
<text text-anchor="middle" x="1705.5" y="-1638.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1335.17,-1112.87C1421.26,-1109.81 1545.38,-1111.67 1578,-1145 1651.2,-1219.77 1540.6,-1533.72 1606.5,-1615 1621.21,-1633.14 1646.9,-1639.74 1668.29,-1641.89"/>
<polygon fill="blue" stroke="blue" points="1668.15,-1645.38 1678.38,-1642.61 1668.65,-1638.4 1668.15,-1645.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node20"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="1361,-866 1135,-866 1135,-830 1361,-830 1361,-866"/>
<text text-anchor="middle" x="1248" y="-844.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node79"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="1764,-513 1647,-513 1647,-477 1764,-477 1764,-513"/>
<text text-anchor="middle" x="1705.5" y="-491.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1351.59,-866.03C1422,-872.55 1513.93,-868.83 1578,-821 1675.72,-748.05 1697.97,-588.86 1703.02,-523.69"/>
<polygon fill="blue" stroke="blue" points="1706.54,-523.57 1703.74,-513.35 1699.56,-523.09 1706.54,-523.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node21"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="1385,-1352 1111,-1352 1111,-1316 1385,-1316 1385,-1352"/>
<text text-anchor="middle" x="1248" y="-1330.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node94"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="1794.5,-2028 1616.5,-2028 1616.5,-1992 1794.5,-1992 1794.5,-2028"/>
<text text-anchor="middle" x="1705.5" y="-2006.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1385.1,-1327.72C1463.44,-1327.33 1551.49,-1333.52 1578,-1361 1625.65,-1410.39 1564.93,-1923.39 1606.5,-1978 1608.61,-1980.78 1610.97,-1983.32 1613.53,-1985.64"/>
<polygon fill="blue" stroke="blue" points="1611.69,-1988.64 1621.74,-1991.97 1615.96,-1983.09 1611.69,-1988.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node22"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="1321.5,-1244 1174.5,-1244 1174.5,-1208 1321.5,-1208 1321.5,-1244"/>
<text text-anchor="middle" x="1248" y="-1222.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2557.5,-1881 2429.5,-1881 2429.5,-1845 2557.5,-1845 2557.5,-1881"/>
<text text-anchor="middle" x="2493.5" y="-1859.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1321.69,-1221.36C1407.75,-1217.6 1543.78,-1217.73 1578,-1253 1620.61,-1296.92 1563.04,-1759.93 1606.5,-1803 1667.44,-1863.4 2293.01,-1824.27 2378,-1836 2391.51,-1837.87 2405.77,-1840.59 2419.46,-1843.61"/>
<polygon fill="blue" stroke="blue" points="2418.78,-1847.05 2429.31,-1845.85 2420.33,-1840.22 2418.78,-1847.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node23"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="1385,-1406 1111,-1406 1111,-1370 1385,-1370 1385,-1406"/>
<text text-anchor="middle" x="1248" y="-1384.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="1792,-3657 1619,-3657 1619,-3621 1792,-3621 1792,-3657"/>
<text text-anchor="middle" x="1705.5" y="-3635.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1385.41,-1381.42C1463.88,-1380.92 1551.95,-1387.09 1578,-1415 1619.59,-1459.56 1569.94,-3560.24 1606.5,-3609 1607.93,-3610.91 1609.48,-3612.7 1611.13,-3614.38"/>
<polygon fill="blue" stroke="blue" points="1609.1,-3617.25 1618.98,-3621.06 1613.64,-3611.91 1609.1,-3617.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node24"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="1380,-920 1116,-920 1116,-884 1380,-884 1380,-920"/>
<text text-anchor="middle" x="1248" y="-898.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="2068,-920 1940,-920 1940,-884 2068,-884 2068,-920"/>
<text text-anchor="middle" x="2004" y="-898.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1380.34,-902C1539.73,-902 1802.89,-902 1929.91,-902"/>
<polygon fill="blue" stroke="blue" points="1929.93,-905.5 1939.93,-902 1929.93,-898.5 1929.93,-905.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node25"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1376.5,-1460 1119.5,-1460 1119.5,-1424 1376.5,-1424 1376.5,-1460"/>
<text text-anchor="middle" x="1248" y="-1438.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="1797,-3711 1614,-3711 1614,-3675 1797,-3675 1797,-3711"/>
<text text-anchor="middle" x="1705.5" y="-3689.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1376.8,-1426.46C1447.04,-1425.64 1529.52,-1438.83 1578,-1495 1656.82,-1586.31 1532.78,-3570.53 1606.5,-3666 1606.99,-3666.63 1607.48,-3667.24 1608,-3667.84"/>
<polygon fill="blue" stroke="blue" points="1605.68,-3670.48 1615.3,-3674.93 1610.56,-3665.45 1605.68,-3670.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node26"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1743,-1915 1668,-1915 1668,-1879 1743,-1879 1743,-1915"/>
<text text-anchor="middle" x="1705.5" y="-1893.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node27"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="2048.5,-1915 1959.5,-1915 1959.5,-1879 2048.5,-1879 2048.5,-1915"/>
<text text-anchor="middle" x="2004" y="-1893.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1743.15,-1897C1794.75,-1897 1889.15,-1897 1948.85,-1897"/>
<polygon fill="blue" stroke="blue" points="1949.21,-1900.5 1959.21,-1897 1949.21,-1893.5 1949.21,-1900.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2048.6,-1914.28C2119.38,-1939.75 2262.93,-1980.59 2378,-1944 2412.51,-1933.03 2445.57,-1907.46 2467.22,-1887.97"/>
<polygon fill="blue" stroke="blue" points="2469.68,-1890.45 2474.66,-1881.1 2464.94,-1885.31 2469.68,-1890.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="2369.5,-1935 2219.5,-1935 2219.5,-1899 2369.5,-1899 2369.5,-1935"/>
<text text-anchor="middle" x="2294.5" y="-1913.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2048.5,-1900.02C2090.95,-1902.96 2156.63,-1907.51 2209.3,-1911.16"/>
<polygon fill="blue" stroke="blue" points="2209.1,-1914.66 2219.32,-1911.86 2209.58,-1907.67 2209.1,-1914.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node28"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2321.5,-2332 2267.5,-2332 2267.5,-2296 2321.5,-2296 2321.5,-2332"/>
<text text-anchor="middle" x="2294.5" y="-2310.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M2295.04,-2332.21C2292.54,-2471.5 2294.95,-3363 2766,-3363 2766,-3363 2766,-3363 3113,-3363 3318.9,-3363 3375.89,-3330.5 3576,-3379 3589.76,-3382.34 3603.99,-3388.15 3616.58,-3394.25"/>
<polygon fill="blue" stroke="blue" points="3615.35,-3397.55 3625.86,-3398.93 3618.51,-3391.3 3615.35,-3397.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2321.73,-2310.45C2339.74,-2306.73 2363,-2299.18 2378,-2284 2462.35,-2198.63 2484.77,-2047.7 2490.56,-1985.26"/>
<polygon fill="blue" stroke="blue" points="2494.07,-1985.26 2491.43,-1975 2487.09,-1984.67 2494.07,-1985.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2321.7,-2311.68C2340.44,-2308.54 2364.61,-2301.19 2378,-2284 2426.59,-2221.62 2377.29,-2000.03 2414,-1930 2422.9,-1913.02 2438.07,-1898.53 2452.72,-1887.41"/>
<polygon fill="blue" stroke="blue" points="2455.18,-1889.96 2461.24,-1881.27 2451.08,-1884.28 2455.18,-1889.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="2925,-1975 2609,-1975 2609,-1939 2925,-1939 2925,-1975"/>
<text text-anchor="middle" x="2767" y="-1953.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2568.69,-1957C2578.33,-1957 2588.49,-1957 2598.91,-1957"/>
<polygon fill="blue" stroke="blue" points="2598.98,-1960.5 2608.98,-1957 2598.98,-1953.5 2598.98,-1960.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="3187,-3214 3037,-3214 3037,-3178 3187,-3178 3187,-3214"/>
<text text-anchor="middle" x="3112" y="-3192.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2773.11,-1975.48C2811.68,-2114.8 3056.61,-2999.51 3103.31,-3168.23"/>
<polygon fill="blue" stroke="blue" points="3099.94,-3169.16 3105.98,-3177.87 3106.69,-3167.3 3099.94,-3169.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="2913.5,-1919 2620.5,-1919 2620.5,-1883 2913.5,-1883 2913.5,-1919"/>
<text text-anchor="middle" x="2767" y="-1897.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2557.81,-1871.86C2578.75,-1874.79 2602.93,-1878.18 2627.24,-1881.58"/>
<polygon fill="blue" stroke="blue" points="2626.9,-1885.07 2637.29,-1882.99 2627.87,-1878.13 2626.9,-1885.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2369.7,-1932.07C2382.26,-1934.62 2395.39,-1937.28 2408.19,-1939.88"/>
<polygon fill="blue" stroke="blue" points="2407.87,-1943.39 2418.37,-1941.95 2409.27,-1936.53 2407.87,-1943.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="3176,-3268 3048,-3268 3048,-3232 3176,-3232 3176,-3268"/>
<text text-anchor="middle" x="3112" y="-3246.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2913.81,-1913.64C2920.92,-1918.09 2927.41,-1923.49 2933,-1930 2979.79,-1984.52 2914.32,-3168.38 2961,-3223 2979.68,-3244.86 3009.52,-3253.02 3037.69,-3255.18"/>
<polygon fill="blue" stroke="blue" points="3037.8,-3258.69 3047.97,-3255.72 3038.17,-3251.7 3037.8,-3258.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="2376.5,-1881 2212.5,-1881 2212.5,-1845 2376.5,-1845 2376.5,-1881"/>
<text text-anchor="middle" x="2294.5" y="-1859.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2360.28,-1881.01C2366.44,-1883.66 2372.45,-1886.65 2378,-1890 2397.1,-1901.55 2395.32,-1912.79 2414,-1925 2419.25,-1928.44 2424.94,-1931.62 2430.76,-1934.53"/>
<polygon fill="blue" stroke="blue" points="2429.45,-1937.78 2439.98,-1938.89 2432.44,-1931.45 2429.45,-1937.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2350.58,-1881.02C2375.26,-1888.92 2401.57,-1897.07 2414,-1900 2454.81,-1909.62 2550.98,-1925.02 2632.51,-1937.39"/>
<polygon fill="blue" stroke="blue" points="2632.47,-1940.92 2642.88,-1938.96 2633.52,-1934 2632.47,-1940.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2376.76,-1863C2390.79,-1863 2405.29,-1863 2419.08,-1863"/>
<polygon fill="blue" stroke="blue" points="2419.48,-1866.5 2429.48,-1863 2419.48,-1859.5 2419.48,-1866.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2364.34,-1881.04C2380.52,-1884.62 2397.78,-1887.92 2414,-1890 2477.91,-1898.2 2548.85,-1901.51 2610.2,-1902.57"/>
<polygon fill="blue" stroke="blue" points="2610.31,-1906.08 2620.36,-1902.73 2610.41,-1899.08 2610.31,-1906.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes().</title>
<path fill="none" stroke="blue" d="M3187.16,-3187.36C3334.04,-3173.8 3668.31,-3160.84 3906,-3288 3926.77,-3299.11 3943.98,-3319.64 3955.55,-3336.41"/>
<polygon fill="blue" stroke="blue" points="3952.63,-3338.36 3961.06,-3344.77 3958.48,-3334.5 3952.63,-3338.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]as_bytes().</title>
<path fill="none" stroke="blue" d="M3176.18,-3248.71C3265.56,-3247.67 3433.9,-3248.61 3576,-3266 3724.82,-3284.21 3762.77,-3291.69 3906,-3336 3912.01,-3337.86 3918.24,-3340.06 3924.36,-3342.38"/>
<polygon fill="blue" stroke="blue" points="3923.24,-3345.7 3933.83,-3346.1 3925.8,-3339.19 3923.24,-3345.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="blue" d="M3176.12,-3259.09C3234.16,-3267.44 3319.45,-3279.72 3375.48,-3287.79"/>
<polygon fill="blue" stroke="blue" points="3375.19,-3291.28 3385.58,-3289.25 3376.19,-3284.36 3375.19,-3291.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="2824.5,-3268 2709.5,-3268 2709.5,-3232 2824.5,-3232 2824.5,-3268"/>
<text text-anchor="middle" x="2767" y="-3246.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2824.64,-3250C2882.86,-3250 2973.76,-3250 3037.49,-3250"/>
<polygon fill="blue" stroke="blue" points="3037.87,-3253.5 3047.87,-3250 3037.87,-3246.5 3037.87,-3253.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2858.5,-3214 2675.5,-3214 2675.5,-3178 2858.5,-3178 2858.5,-3214"/>
<text text-anchor="middle" x="2767" y="-3192.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2858.57,-3196C2910.76,-3196 2975.93,-3196 3026.98,-3196"/>
<polygon fill="blue" stroke="blue" points="3026.99,-3199.5 3036.99,-3196 3026.99,-3192.5 3026.99,-3199.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2858.57,-3210.26C2914.6,-3219.08 2985.59,-3230.26 3038,-3238.51"/>
<polygon fill="blue" stroke="blue" points="3037.47,-3241.97 3047.89,-3240.07 3038.56,-3235.05 3037.47,-3241.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node39"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="812,-4093 737,-4093 737,-4057 812,-4057 812,-4093"/>
<text text-anchor="middle" x="774.5" y="-4071.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node40"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1327,-4093 1169,-4093 1169,-4057 1327,-4057 1327,-4093"/>
<text text-anchor="middle" x="1248" y="-4071.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.11,-4075C885.92,-4075 1054.44,-4075 1158.69,-4075"/>
<polygon fill="blue" stroke="blue" points="1158.89,-4078.5 1168.89,-4075 1158.89,-4071.5 1158.89,-4078.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1327.31,-4067.83C1506.63,-4051.51 1936.75,-4013 2003,-4013 2003,-4013 2003,-4013 2494.5,-4013 2693.91,-4013 2748.22,-3992.98 2933,-3918 2988.22,-3895.59 3045.57,-3856.48 3079.77,-3831.17"/>
<polygon fill="blue" stroke="blue" points="3082.04,-3833.85 3087.95,-3825.05 3077.85,-3828.24 3082.04,-3833.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;pub fn verify_search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: SlimSearchRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: FullSearchResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime,...">
<polygon fill="white" stroke="black" points="1759.5,-3848 1651.5,-3848 1651.5,-3812 1759.5,-3812 1759.5,-3848"/>
<text text-anchor="middle" x="1705.5" y="-3826.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1327.14,-4091.86C1401.15,-4102.89 1510.7,-4105.69 1578,-4045 1626.77,-4001.01 1570.93,-3955.21 1606.5,-3900 1619.01,-3880.58 1638.98,-3864.88 1657.64,-3853.31"/>
<polygon fill="blue" stroke="blue" points="1659.56,-3856.24 1666.37,-3848.13 1655.99,-3850.22 1659.56,-3856.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;fn try_from(public_key: [u8; 32]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match CompressedEdwardsY(public_key).decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Error::InvalidCurvePoint), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(pt) if pt.is_sma...">
<polygon fill="white" stroke="black" points="3149.5,-3589 3074.5,-3589 3074.5,-3553 3149.5,-3553 3149.5,-3589"/>
<text text-anchor="middle" x="3112" y="-3567.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1327.1,-4080.36C1395.7,-4082.21 1496.94,-4077.85 1578,-4045 1593.09,-4038.89 1592.01,-4029.41 1606.5,-4022 1769.13,-3938.88 1820.36,-3914 2003,-3914 2003,-3914 2003,-3914 2295.5,-3914 2419.6,-3914 2483.04,-3968.49 2573,-3883 2644.82,-3814.75 2539.36,-3733.48 2609,-3663 2660.38,-3611 2861.13,-3619.39 2933,-3606 2977.52,-3597.71 3028.19,-3587.69 3064.06,-3580.5"/>
<polygon fill="blue" stroke="blue" points="3065.11,-3583.86 3074.22,-3578.45 3063.73,-3576.99 3065.11,-3583.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node43"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="2058,-3848 1950,-3848 1950,-3812 2058,-3812 2058,-3848"/>
<text text-anchor="middle" x="2004" y="-3826.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1759.51,-3830C1810.05,-3830 1886.21,-3830 1939.87,-3830"/>
<polygon fill="blue" stroke="blue" points="1939.95,-3833.5 1949.95,-3830 1939.95,-3826.5 1939.95,-3833.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;a self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;M...">
<polygon fill="white" stroke="black" points="1763.5,-3794 1647.5,-3794 1647.5,-3758 1763.5,-3758 1763.5,-3794"/>
<text text-anchor="middle" x="1705.5" y="-3772.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<g id="a_node46"><a xlink:title="pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;config: &amp;&#39;a PublicConfig, &#160;&#160;&#160;&#160;req: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;res: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;MonitorStateUpdate&gt; { ...">
<polygon fill="white" stroke="black" points="2352.5,-3794 2236.5,-3794 2236.5,-3758 2352.5,-3758 2352.5,-3794"/>
<text text-anchor="middle" x="2294.5" y="-3772.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1763.62,-3760.27C1782.95,-3755.67 1804.77,-3751.28 1825,-3749 1979.58,-3731.61 2020.42,-3731.61 2175,-3749 2191.76,-3750.88 2209.6,-3754.22 2226.22,-3757.93"/>
<polygon fill="blue" stroke="blue" points="2225.85,-3761.43 2236.38,-3760.27 2227.42,-3754.61 2225.85,-3761.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node48"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="2378,-3848 2211,-3848 2211,-3812 2378,-3812 2378,-3848"/>
<text text-anchor="middle" x="2294.5" y="-3826.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2058.25,-3830C2098.07,-3830 2153.52,-3830 2200.59,-3830"/>
<polygon fill="blue" stroke="blue" points="2200.8,-3833.5 2210.8,-3830 2200.8,-3826.5 2200.8,-3833.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="2108.5,-3794 1899.5,-3794 1899.5,-3758 2108.5,-3758 2108.5,-3794"/>
<text text-anchor="middle" x="2004" y="-3772.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M2108.75,-3777.36C2132.13,-3781.62 2155.71,-3789.4 2175,-3803 2197.35,-3818.76 2180.98,-3843.05 2204.5,-3857 2487.09,-4024.63 2910.54,-3886.11 3058.06,-3828.87"/>
<polygon fill="blue" stroke="blue" points="3059.76,-3831.97 3067.79,-3825.06 3057.2,-3825.45 3059.76,-3831.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2108.58,-3791.32C2130.55,-3794.89 2153.58,-3798.86 2175,-3803 2185.63,-3805.05 2196.75,-3807.37 2207.75,-3809.75"/>
<polygon fill="blue" stroke="blue" points="2207.28,-3813.23 2217.8,-3811.96 2208.78,-3806.4 2207.28,-3813.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2070.64,-3757.96C2181.03,-3728.18 2411.19,-3668.52 2609,-3633 2775.28,-3603.14 2975.15,-3583.15 3064.21,-3575.05"/>
<polygon fill="blue" stroke="blue" points="3064.61,-3578.53 3074.26,-3574.15 3063.99,-3571.56 3064.61,-3578.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node45"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2573,-3794 2414,-3794 2414,-3758 2573,-3758 2573,-3794"/>
<text text-anchor="middle" x="2493.5" y="-3772.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node47"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="2868.5,-3794 2665.5,-3794 2665.5,-3758 2868.5,-3758 2868.5,-3794"/>
<text text-anchor="middle" x="2767" y="-3772.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2573.03,-3776C2598.69,-3776 2627.7,-3776 2655.27,-3776"/>
<polygon fill="blue" stroke="blue" points="2655.36,-3779.5 2665.36,-3776 2655.36,-3772.5 2655.36,-3779.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2352.75,-3776C2368.7,-3776 2386.42,-3776 2403.73,-3776"/>
<polygon fill="blue" stroke="blue" points="2403.86,-3779.5 2413.86,-3776 2403.86,-3772.5 2403.86,-3779.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M2868.59,-3769.25C2937.47,-3764.64 3024.87,-3758.78 3073.68,-3755.5"/>
<polygon fill="blue" stroke="blue" points="3074.03,-3758.99 3083.78,-3754.83 3073.56,-3752 3074.03,-3758.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2361.37,-3811.94C2379.2,-3807.06 2398.63,-3801.73 2416.94,-3796.71"/>
<polygon fill="blue" stroke="blue" points="2417.97,-3800.06 2426.69,-3794.04 2416.12,-3793.31 2417.97,-3800.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node49"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="2566,-3848 2421,-3848 2421,-3812 2566,-3812 2566,-3848"/>
<text text-anchor="middle" x="2493.5" y="-3826.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2378.19,-3830C2388.96,-3830 2399.99,-3830 2410.75,-3830"/>
<polygon fill="blue" stroke="blue" points="2410.96,-3833.5 2420.96,-3830 2410.96,-3826.5 2410.96,-3833.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="3168.5,-3535 3055.5,-3535 3055.5,-3499 3168.5,-3499 3168.5,-3535"/>
<text text-anchor="middle" x="3112" y="-3513.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2562.97,-3811.85C2566.65,-3809.28 2570.04,-3806.35 2573,-3803 2624.16,-3745.15 2555.39,-3688.59 2609,-3633 2712.04,-3526.16 2789.62,-3590.39 2933,-3552 2945.5,-3548.65 2948.39,-3546.93 2961,-3544 2988.43,-3537.63 3018.97,-3531.89 3045.3,-3527.36"/>
<polygon fill="blue" stroke="blue" points="3045.89,-3530.81 3055.16,-3525.68 3044.72,-3523.91 3045.89,-3530.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M3149.82,-3574.24C3183.23,-3575.11 3231.89,-3570.93 3263,-3544 3301.25,-3510.88 3258.75,-3466.66 3299,-3436 3385.11,-3370.39 3519.54,-3385.27 3596.68,-3401.48"/>
<polygon fill="blue" stroke="blue" points="3596.19,-3404.95 3606.71,-3403.66 3597.68,-3398.11 3596.19,-3404.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="2840,-3489 2694,-3489 2694,-3453 2840,-3453 2840,-3489"/>
<text text-anchor="middle" x="2767" y="-3467.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2840.3,-3469.77C2871.09,-3472.39 2906.04,-3479.83 2933,-3498 2952.85,-3511.38 2941.26,-3530.47 2961,-3544 2991.1,-3564.64 3032.3,-3570.87 3063.9,-3572.24"/>
<polygon fill="blue" stroke="blue" points="3064.13,-3575.75 3074.23,-3572.53 3064.33,-3568.75 3064.13,-3575.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2840.32,-3480.7C2900.86,-3488.82 2986.52,-3500.31 3045.17,-3508.17"/>
<polygon fill="blue" stroke="blue" points="3045.05,-3511.69 3055.43,-3509.55 3045.98,-3504.75 3045.05,-3511.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M3168.76,-3525.27C3258.51,-3536.11 3438.84,-3547.57 3576,-3490 3599.92,-3479.96 3621.37,-3459.65 3636.1,-3442.99"/>
<polygon fill="blue" stroke="blue" points="3638.94,-3445.05 3642.77,-3435.17 3633.62,-3440.5 3638.94,-3445.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<g id="a_node55"><a xlink:title="fn encode_to_curve_try_and_increment(salt: &amp;[u8], data: &amp;[u8]) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;&#160;for i in 0u8..=u8::MAX { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...">
<polygon fill="white" stroke="black" points="3568,-3481 3299,-3481 3299,-3445 3568,-3445 3568,-3481"/>
<text text-anchor="middle" x="3433.5" y="-3459.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3168.65,-3507.59C3209.21,-3500.74 3265.64,-3491.2 3315.9,-3482.71"/>
<polygon fill="blue" stroke="blue" points="3316.58,-3486.14 3325.86,-3481.02 3315.42,-3479.24 3316.58,-3486.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;fn test_encode_to_curve_try_and_increment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let got = encode_to_curve_try_and_increment(&amp;v.pk, v.alpha) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.compress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.0...">
<polygon fill="white" stroke="black" points="3263,-3427 2961,-3427 2961,-3391 3263,-3391 3263,-3427"/>
<text text-anchor="middle" x="3112" y="-3405.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3219.83,-3427.06C3250.61,-3432.26 3284.34,-3437.96 3315.68,-3443.26"/>
<polygon fill="blue" stroke="blue" points="3315.32,-3446.75 3325.77,-3444.96 3316.49,-3439.84 3315.32,-3446.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn try_and_increment_terminates() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(data: [u8; 34])| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _ = encode_to_curve_try_and_increment(&amp;data[..32], &amp;data[32..]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3225.5,-3481 2998.5,-3481 2998.5,-3445 3225.5,-3445 3225.5,-3481"/>
<text text-anchor="middle" x="3112" y="-3459.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_and_increment_terminates</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3225.64,-3463C3246.12,-3463 3267.72,-3463 3288.94,-3463"/>
<polygon fill="blue" stroke="blue" points="3288.99,-3466.5 3298.99,-3463 3288.99,-3459.5 3288.99,-3466.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M3521.6,-3444.95C3546.79,-3439.73 3573.69,-3434.16 3596.8,-3429.37"/>
<polygon fill="blue" stroke="blue" points="3597.71,-3432.76 3606.79,-3427.3 3596.29,-3425.9 3597.71,-3432.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2858,-3543 2676,-3543 2676,-3507 2858,-3507 2858,-3543"/>
<text text-anchor="middle" x="2767" y="-3521.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2858.12,-3537.09C2924.18,-3545.95 3011.21,-3557.62 3064.03,-3564.7"/>
<polygon fill="blue" stroke="blue" points="3063.75,-3568.19 3074.13,-3566.05 3064.68,-3561.26 3063.75,-3568.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2858.12,-3522.9C2916.73,-3521.53 2991.86,-3519.78 3044.95,-3518.54"/>
<polygon fill="blue" stroke="blue" points="3045.35,-3522.03 3055.27,-3518.3 3045.19,-3515.03 3045.35,-3522.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<g id="a_node57"><a xlink:title="fn verify_chat_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&gt;, &#160;&#160;&#160;&#160;stored_account_data: Option&lt;AccountData&gt;, &#160;&#160;&#160;&#160;chat_search_...">
<polygon fill="white" stroke="black" points="882,-3929 667,-3929 667,-3893 882,-3893 882,-3929"/>
<text text-anchor="middle" x="774.5" y="-3907.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_chat_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<g id="a_node60"><a xlink:title="fn verify_single_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;search_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;response: CondensedTreeSearchResponse, &#160;&#160;&#160;&#160;monitoring_data: Option&lt;MonitoringData&gt;, &#160;&#160;&#160;&#160;full_tree_head: &amp;FullTr...">
<polygon fill="white" stroke="black" points="1361,-3898 1135,-3898 1135,-3862 1361,-3862 1361,-3898"/>
<text text-anchor="middle" x="1248" y="-3876.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_single_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M882.2,-3903.98C954.34,-3899.24 1049.79,-3892.97 1124.96,-3888.02"/>
<polygon fill="blue" stroke="blue" points="1125.21,-3891.51 1134.96,-3887.37 1124.75,-3884.53 1125.21,-3891.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M539.37,-3830C738.56,-3830 1427.85,-3830 1641.12,-3830"/>
<polygon fill="blue" stroke="blue" points="1641.21,-3833.5 1651.21,-3830 1641.21,-3826.5 1641.21,-3833.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M515.06,-3935.19C548.61,-3932.05 604.99,-3926.77 656.53,-3921.95"/>
<polygon fill="blue" stroke="blue" points="657.14,-3925.41 666.77,-3920.99 656.49,-3918.44 657.14,-3925.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1361.3,-3867.75C1424.89,-3860.8 1505.89,-3851.94 1578,-3844 1598.57,-3841.74 1621.03,-3839.25 1641.23,-3837.02"/>
<polygon fill="blue" stroke="blue" points="1641.71,-3840.49 1651.26,-3835.91 1640.94,-3833.53 1641.71,-3840.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;async fn monitor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;account_data: AccountData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished_tree_...">
<polygon fill="white" stroke="black" points="519.5,-3794 448.5,-3794 448.5,-3758 519.5,-3758 519.5,-3794"/>
<text text-anchor="middle" x="484" y="-3772.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.53,-3776C686.55,-3776 1411.67,-3776 1637.26,-3776"/>
<polygon fill="blue" stroke="blue" points="1637.31,-3779.5 1647.31,-3776 1637.31,-3772.5 1637.31,-3779.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn search_does_not_return_requested_data(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="631,-3902 337,-3902 337,-3866 631,-3866 631,-3902"/>
<text text-anchor="middle" x="484" y="-3880.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_does_not_return_requested_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M631.36,-3897.7C639.89,-3898.5 648.41,-3899.29 656.8,-3900.08"/>
<polygon fill="blue" stroke="blue" points="656.68,-3903.58 666.96,-3901.03 657.33,-3896.61 656.68,-3903.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn search_returns_data_not_requested(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="615,-4010 353,-4010 353,-3974 615,-3974 615,-4010"/>
<text text-anchor="middle" x="484" y="-3988.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_returns_data_not_requested</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M594.71,-3973.92C607.03,-3971.24 619.33,-3968.26 631,-3965 661.86,-3956.37 695.42,-3943.82 722.22,-3932.99"/>
<polygon fill="blue" stroke="blue" points="723.83,-3936.11 731.76,-3929.09 721.18,-3929.63 723.83,-3936.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SK...">
<polygon fill="white" stroke="black" points="301,-3740 16,-3740 16,-3704 301,-3704 301,-3740"/>
<text text-anchor="middle" x="158.5" y="-3718.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-3740.06C325.83,-3749.76 394.4,-3761.21 438.27,-3768.53"/>
<polygon fill="blue" stroke="blue" points="437.88,-3772.02 448.32,-3770.21 439.04,-3765.11 437.88,-3772.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;async fn search_for_account_that_isnt() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39;...">
<polygon fill="white" stroke="black" points="267,-4010 50,-4010 50,-3974 267,-3974 267,-4010"/>
<text text-anchor="middle" x="158.5" y="-3988.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_account_that_isnt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.22,-3974.02C327.63,-3963.94 399.39,-3951.96 443.04,-3944.67"/>
<polygon fill="blue" stroke="blue" points="443.69,-3948.11 452.98,-3943.01 442.54,-3941.21 443.69,-3948.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn prompt(text: &amp;str) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; {} &gt;&#39; , text); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_line(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="192,-3848 125,-3848 125,-3812 192,-3812 192,-3848"/>
<text text-anchor="middle" x="158.5" y="-3826.3" font-family="Helvetica,sans-Serif" font-size="14.00">prompt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-3830C245.24,-3830 350.48,-3830 418.75,-3830"/>
<polygon fill="blue" stroke="blue" points="418.96,-3833.5 428.96,-3830 418.96,-3826.5 418.96,-3833.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.23,-3827.14C225.4,-3826.06 276.35,-3829.64 309,-3857 328.62,-3873.44 309.34,-3894.61 329,-3911 360.56,-3937.3 408.62,-3941.94 442.65,-3941.34"/>
<polygon fill="blue" stroke="blue" points="442.85,-3944.83 452.73,-3941 442.62,-3937.84 442.85,-3944.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;async fn distinguished_integration_test(have_last_distinguished: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running in...">
<polygon fill="white" stroke="black" points="271.5,-3794 45.5,-3794 45.5,-3758 271.5,-3758 271.5,-3794"/>
<text text-anchor="middle" x="158.5" y="-3772.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-3794.06C317.83,-3802.43 375.75,-3812.1 418.87,-3819.3"/>
<polygon fill="blue" stroke="blue" points="418.51,-3822.78 428.95,-3820.98 419.66,-3815.88 418.51,-3822.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKI...">
<polygon fill="white" stroke="black" points="297,-3956 20,-3956 20,-3920 297,-3920 297,-3956"/>
<text text-anchor="middle" x="158.5" y="-3934.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M297.16,-3938C349.75,-3938 405.82,-3938 442.45,-3938"/>
<polygon fill="blue" stroke="blue" points="442.7,-3941.5 452.7,-3938 442.7,-3934.5 442.7,-3941.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;async fn search_for_deleted_account() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39; )...">
<polygon fill="white" stroke="black" points="263,-3902 54,-3902 54,-3866 263,-3866 263,-3902"/>
<text text-anchor="middle" x="158.5" y="-3880.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_deleted_account</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M263.19,-3901.31C324.4,-3911.53 398.4,-3923.88 443.03,-3931.33"/>
<polygon fill="blue" stroke="blue" points="442.46,-3934.78 452.9,-3932.98 443.62,-3927.88 442.46,-3934.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;fn from(src: KeyTransConfig) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let KeyTransConfig { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;vrf_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auditor_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = src; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s...">
<polygon fill="white" stroke="black" points="2794,-3711 2740,-3711 2740,-3675 2794,-3675 2794,-3711"/>
<text text-anchor="middle" x="2767" y="-3689.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M2794.02,-3696.68C2828.33,-3702.52 2889.44,-3716.43 2933,-3746 2949.2,-3756.99 2944.11,-3770.1 2961,-3780 2989.18,-3796.51 3025.06,-3803.38 3054.67,-3806.06"/>
<polygon fill="blue" stroke="blue" points="3054.61,-3809.57 3064.85,-3806.84 3055.15,-3802.59 3054.61,-3809.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2794.01,-3690.21C2827.02,-3686.16 2885.38,-3677.3 2933,-3661 2983.37,-3643.75 3037.45,-3614.76 3072.61,-3594.35"/>
<polygon fill="blue" stroke="blue" points="3074.71,-3597.17 3081.56,-3589.1 3071.17,-3591.13 3074.71,-3597.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node71"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="521.5,-2166 446.5,-2166 446.5,-2130 521.5,-2130 521.5,-2166"/>
<text text-anchor="middle" x="484" y="-2144.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node75"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="1275,-2166 1221,-2166 1221,-2130 1275,-2130 1275,-2166"/>
<text text-anchor="middle" x="1248" y="-2144.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M521.75,-2148C650.86,-2148 1082.75,-2148 1210.87,-2148"/>
<polygon fill="blue" stroke="blue" points="1210.95,-2151.5 1220.95,-2148 1210.95,-2144.5 1210.95,-2151.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node76"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="1275,-2112 1221,-2112 1221,-2076 1275,-2076 1275,-2112"/>
<text text-anchor="middle" x="1248" y="-2090.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M521.75,-2145.4C650.86,-2136.25 1082.75,-2105.64 1210.87,-2096.56"/>
<polygon fill="blue" stroke="blue" points="1211.22,-2100.04 1220.95,-2095.85 1210.72,-2093.06 1211.22,-2100.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node77"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="838.5,-2249 710.5,-2249 710.5,-2213 838.5,-2213 838.5,-2249"/>
<text text-anchor="middle" x="774.5" y="-2227.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M521.54,-2158.51C566.47,-2171.44 643.8,-2193.69 700.97,-2210.13"/>
<polygon fill="blue" stroke="blue" points="700.11,-2213.53 710.68,-2212.93 702.04,-2206.8 700.11,-2213.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node72"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="517,-52 451,-52 451,-16 517,-16 517,-52"/>
<text text-anchor="middle" x="484" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node73"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="837.5,-52 711.5,-52 711.5,-16 837.5,-16 837.5,-52"/>
<text text-anchor="middle" x="774.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M517.25,-34C561.53,-34 642.34,-34 701.41,-34"/>
<polygon fill="blue" stroke="blue" points="701.43,-37.5 711.43,-34 701.43,-30.5 701.43,-37.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node74"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="1334,-52 1162,-52 1162,-16 1334,-16 1334,-52"/>
<text text-anchor="middle" x="1248" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M837.63,-34C917.85,-34 1058.26,-34 1151.94,-34"/>
<polygon fill="blue" stroke="blue" points="1151.99,-37.5 1161.99,-34 1151.99,-30.5 1151.99,-37.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1334.27,-21.37C1409.88,-15.47 1517.44,-21.06 1578,-87 1635.43,-149.53 1552.57,-402.43 1606.5,-468 1614.42,-477.63 1625.42,-484 1637.21,-488.17"/>
<polygon fill="blue" stroke="blue" points="1636.21,-491.52 1646.79,-491.07 1638.24,-484.83 1636.21,-491.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1334.3,-25.3C1407.08,-22.63 1510.38,-30.78 1578,-87 1679.73,-171.59 1699.67,-344.18 1703.56,-412.37"/>
<polygon fill="blue" stroke="blue" points="1700.09,-412.94 1704.07,-422.75 1707.08,-412.59 1700.09,-412.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.45,-2155.81C1338.17,-2172.52 1496.72,-2203.83 1578,-2121 1648.49,-2049.16 1543.02,-1747.1 1606.5,-1669 1621.23,-1650.88 1646.92,-1644.27 1668.3,-1642.13"/>
<polygon fill="blue" stroke="blue" points="1668.67,-1645.61 1678.39,-1641.4 1668.16,-1638.63 1668.67,-1645.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.19,-2155.55C1337.34,-2171.68 1494.72,-2201.83 1578,-2121 1618.76,-2081.44 1584.15,-1919.22 1606.5,-1867 1622.05,-1830.67 1652.74,-1796.96 1675.66,-1775.15"/>
<polygon fill="blue" stroke="blue" points="1678.16,-1777.6 1683.1,-1768.22 1673.39,-1772.48 1678.16,-1777.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.29,-2153.86C1335.01,-2165.61 1483.03,-2185.69 1578,-2121 1601.74,-2104.83 1586.59,-2083.7 1606.5,-2063 1618.27,-2050.76 1633.49,-2040.68 1648.41,-2032.73"/>
<polygon fill="blue" stroke="blue" points="1650.3,-2035.69 1657.63,-2028.04 1647.13,-2029.45 1650.3,-2035.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node146"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="1792.5,-2141 1618.5,-2141 1618.5,-2105 1792.5,-2105 1792.5,-2141"/>
<text text-anchor="middle" x="1705.5" y="-2119.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.13,-2146.57C1338.31,-2143.1 1501.96,-2134.12 1608,-2128.3"/>
<polygon fill="blue" stroke="blue" points="1608.28,-2131.79 1618.07,-2127.74 1607.9,-2124.8 1608.28,-2131.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.44,-2101.48C1338.14,-2117.42 1496.65,-2146.9 1578,-2064 1639.64,-2001.18 1550.69,-1737.04 1606.5,-1669 1621.31,-1650.94 1647,-1644.34 1668.36,-1642.17"/>
<polygon fill="blue" stroke="blue" points="1668.72,-1645.66 1678.43,-1641.44 1668.2,-1638.68 1668.72,-1645.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.06,-2101.09C1336.92,-2116.18 1493.74,-2143.93 1578,-2064 1642.18,-2003.12 1570.39,-1947.76 1606.5,-1867 1622.63,-1830.92 1653.23,-1797.17 1675.96,-1775.28"/>
<polygon fill="blue" stroke="blue" points="1678.46,-1777.73 1683.34,-1768.33 1673.66,-1772.64 1678.46,-1777.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.05,-2094.36C1331.3,-2094.54 1467.89,-2091.79 1578,-2064 1606.72,-2056.75 1637.3,-2043.85 1661.21,-2032.48"/>
<polygon fill="blue" stroke="blue" points="1662.88,-2035.56 1670.35,-2028.04 1659.83,-2029.26 1662.88,-2035.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.13,-2095.66C1338.31,-2099.69 1501.96,-2110.11 1608,-2116.86"/>
<polygon fill="blue" stroke="blue" points="1607.87,-2120.36 1618.07,-2117.5 1608.32,-2113.37 1607.87,-2120.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node78"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="1335,-2249 1161,-2249 1161,-2213 1335,-2213 1335,-2249"/>
<text text-anchor="middle" x="1248" y="-2227.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M838.6,-2231C918.62,-2231 1057.38,-2231 1150.68,-2231"/>
<polygon fill="blue" stroke="blue" points="1150.69,-2234.5 1160.69,-2231 1150.69,-2227.5 1150.69,-2234.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1335.18,-2248.08C1408.26,-2257.31 1511.54,-2257.19 1578,-2201 1615.91,-2168.95 1568.57,-2125.02 1606.5,-2093 1630.73,-2072.54 2143.6,-2046.41 2175,-2042 2265.98,-2029.21 2289.86,-2028.91 2378,-2003 2400,-1996.53 2423.62,-1987.43 2443.66,-1979.03"/>
<polygon fill="blue" stroke="blue" points="2445.06,-1982.24 2452.89,-1975.1 2442.32,-1975.8 2445.06,-1982.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1335.22,-2248.87C1408.84,-2258.76 1512.87,-2259.17 1578,-2201 1624.71,-2159.28 1569.13,-2113.26 1606.5,-2063 1615.87,-2050.39 1629.16,-2040.45 1642.94,-2032.75"/>
<polygon fill="blue" stroke="blue" points="1644.78,-2035.74 1652.02,-2028.01 1641.54,-2029.54 1644.78,-2035.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1707.53,-513.06C1712.84,-599.41 1740.31,-968.83 1825,-1037 1885.59,-1085.77 2097.71,-1045.69 2175,-1037 2203.13,-1033.84 2234.32,-1026.57 2257.63,-1020.38"/>
<polygon fill="blue" stroke="blue" points="2258.7,-1023.71 2267.43,-1017.71 2256.87,-1016.96 2258.7,-1023.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1764.01,-447.9C1778.63,-451.9 1793.46,-458.17 1805,-468 1936.31,-579.76 1985,-796.81 1998.6,-873.95"/>
<polygon fill="blue" stroke="blue" points="1995.17,-874.62 2000.3,-883.89 2002.07,-873.44 1995.17,-874.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1789.59,-3674.86C1795.01,-3672.29 1800.2,-3669.35 1805,-3666 2037.5,-3503.52 2043.86,-3397.51 2175,-3146 2208.16,-3082.4 2554.38,-1976.5 2609,-1930 2611.28,-1928.06 2613.64,-1926.24 2616.08,-1924.52"/>
<polygon fill="blue" stroke="blue" points="2618.08,-1927.39 2624.64,-1919.07 2614.32,-1921.48 2618.08,-1927.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="1362,-3684 1134,-3684 1134,-3648 1362,-3648 1362,-3684"/>
<text text-anchor="middle" x="1248" y="-3662.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1362.18,-3672.71C1436.14,-3677.09 1531.89,-3682.77 1603.31,-3687"/>
<polygon fill="blue" stroke="blue" points="1603.48,-3690.52 1613.67,-3687.62 1603.89,-3683.53 1603.48,-3690.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1362.18,-3659.29C1437.9,-3654.8 1536.46,-3648.96 1608.36,-3644.7"/>
<polygon fill="blue" stroke="blue" points="1609,-3648.17 1618.77,-3644.08 1608.58,-3641.18 1609,-3648.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1791.31,-3620.85C1796.39,-3617.52 1801.04,-3613.61 1805,-3609 1845.11,-3562.34 1803.88,-3529.8 1825,-3472 2067.8,-2807.64 2626.62,-2122.54 2744.09,-1982.78"/>
<polygon fill="blue" stroke="blue" points="2746.81,-1984.98 2750.57,-1975.08 2741.45,-1980.47 2746.81,-1984.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2025.68,-883.9C2087.28,-832.21 2271.83,-693.55 2378,-789 2458.25,-861.15 2486.76,-1672.05 2491.69,-1834.69"/>
<polygon fill="blue" stroke="blue" points="2488.2,-1834.97 2491.99,-1844.86 2495.19,-1834.76 2488.2,-1834.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2298.56,-1028.41C2309.99,-1097.71 2351.02,-1349.52 2378,-1558 2387.53,-1631.6 2379.33,-1824.39 2414,-1890 2423.11,-1907.24 2438.67,-1921.93 2453.54,-1933.13"/>
<polygon fill="blue" stroke="blue" points="2451.52,-1935.99 2461.68,-1938.98 2455.6,-1930.3 2451.52,-1935.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="2175,-1028 1833,-1028 1833,-992 2175,-992 2175,-1028"/>
<text text-anchor="middle" x="2004" y="-1006.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2175.32,-1010C2206.36,-1010 2235.72,-1010 2257.42,-1010"/>
<polygon fill="blue" stroke="blue" points="2257.43,-1013.5 2267.43,-1010 2257.43,-1006.5 2257.43,-1013.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="2120.5,-974 1887.5,-974 1887.5,-938 2120.5,-938 2120.5,-974"/>
<text text-anchor="middle" x="2004" y="-952.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2120.86,-973.34C2139.02,-976.37 2157.54,-979.63 2175,-983 2202.79,-988.37 2234,-995.52 2257.41,-1001.12"/>
<polygon fill="blue" stroke="blue" points="2256.71,-1004.55 2267.25,-1003.49 2258.35,-997.75 2256.71,-1004.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1732.61,-1638.76C1844.31,-1625.48 2280.63,-1579.98 2378,-1666 2453.57,-1732.76 2364.62,-1802.09 2414,-1890 2423.55,-1907 2439.17,-1921.66 2453.97,-1932.89"/>
<polygon fill="blue" stroke="blue" points="2451.92,-1935.73 2462.07,-1938.77 2456.03,-1930.06 2451.92,-1935.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="2330,-1711 2259,-1711 2259,-1675 2330,-1675 2330,-1711"/>
<text text-anchor="middle" x="2294.5" y="-1689.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2330.35,-1702.66C2345.85,-1708 2363.76,-1715.67 2378,-1726 2420.02,-1756.48 2456.06,-1805.71 2475.97,-1836.12"/>
<polygon fill="blue" stroke="blue" points="2473.03,-1838.01 2481.38,-1844.53 2478.91,-1834.23 2473.03,-1838.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node90"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="1796.5,-1714 1614.5,-1714 1614.5,-1678 1796.5,-1678 1796.5,-1714"/>
<text text-anchor="middle" x="1705.5" y="-1692.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1796.67,-1695.7C1850.18,-1695.52 1915.69,-1695.29 1958.34,-1695.15"/>
<polygon fill="blue" stroke="blue" points="1958.41,-1698.65 1968.4,-1695.12 1958.39,-1691.65 1958.41,-1698.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1732.75,-1746.11C1827.94,-1733.4 2160.75,-1701.28 2378,-1836 2402.51,-1851.2 2394.85,-1868.43 2414,-1890 2427.75,-1905.49 2445.09,-1920.65 2459.97,-1932.62"/>
<polygon fill="blue" stroke="blue" points="2457.93,-1935.47 2467.95,-1938.93 2462.27,-1929.98 2457.93,-1935.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2039.79,-1699.07C2120.47,-1708.89 2318.05,-1735.19 2378,-1764 2414.66,-1781.61 2448.84,-1814.11 2470.14,-1837.06"/>
<polygon fill="blue" stroke="blue" points="2467.8,-1839.69 2477.12,-1844.74 2472.98,-1834.98 2467.8,-1839.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2039.51,-1694.76C2091.75,-1694.4 2190.91,-1693.71 2248.67,-1693.31"/>
<polygon fill="blue" stroke="blue" points="2248.97,-1696.81 2258.95,-1693.24 2248.92,-1689.81 2248.97,-1696.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1776.23,-1606.02C1785.94,-1608.85 1795.76,-1611.88 1805,-1615 1858.87,-1633.2 1919.25,-1658.3 1959.01,-1675.51"/>
<polygon fill="blue" stroke="blue" points="1957.84,-1678.81 1968.41,-1679.59 1960.64,-1672.4 1957.84,-1678.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1794.52,-2022.68C1927.36,-2037.83 2184.15,-2051.36 2378,-1965 2398.38,-1955.92 2397.5,-1945.03 2414,-1930 2429.76,-1915.64 2447.82,-1900.16 2462.65,-1887.7"/>
<polygon fill="blue" stroke="blue" points="2465.09,-1890.22 2470.51,-1881.11 2460.6,-1884.85 2465.09,-1890.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="2334,-837 2255,-837 2255,-801 2334,-801 2334,-837"/>
<text text-anchor="middle" x="2294.5" y="-815.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2334.2,-834.04C2350.68,-842.56 2368.31,-854.99 2378,-872 2434,-970.36 2364.79,-1788.08 2414,-1890 2422.41,-1907.43 2437.7,-1922.07 2452.56,-1933.19"/>
<polygon fill="blue" stroke="blue" points="2450.55,-1936.05 2460.73,-1938.99 2454.61,-1930.34 2450.55,-1936.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node96"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="1479.5,-729 1016.5,-729 1016.5,-693 1479.5,-693 1479.5,-729"/>
<text text-anchor="middle" x="1248" y="-707.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1479.69,-718.48C1514.25,-712.26 1548.23,-701.5 1578,-684 1640.71,-647.14 1678.68,-565.45 1695.03,-522.54"/>
<polygon fill="blue" stroke="blue" points="1698.37,-523.61 1698.55,-513.01 1691.8,-521.18 1698.37,-523.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1324.38,-729.01C1398.97,-741.93 1511.37,-747.42 1578,-684 1648.14,-617.24 1542.9,-541.02 1606.5,-468 1614.56,-458.75 1625.47,-452.53 1637.09,-448.38"/>
<polygon fill="blue" stroke="blue" points="1638.43,-451.63 1646.97,-445.36 1636.38,-444.94 1638.43,-451.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1479.87,-707.34C1517.37,-717.3 1552.28,-734.81 1578,-764 1640.55,-834.99 1547.92,-1540.71 1606.5,-1615 1620.96,-1633.34 1646.66,-1639.93 1668.12,-1642.02"/>
<polygon fill="blue" stroke="blue" points="1668.02,-1645.53 1678.24,-1642.72 1668.5,-1638.54 1668.02,-1645.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1479.54,-707.15C1517.19,-717.09 1552.24,-734.65 1578,-764 1648.32,-844.12 1540.65,-1639.17 1606.5,-1723 1620.93,-1741.37 1646.63,-1747.96 1668.09,-1750.04"/>
<polygon fill="blue" stroke="blue" points="1668,-1753.55 1678.22,-1750.74 1668.48,-1746.56 1668,-1753.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1479.68,-707.03C1517.31,-716.99 1552.32,-734.58 1578,-764 1621.34,-813.66 1573.6,-1892.89 1606.5,-1950 1615.53,-1965.68 1630.47,-1977.78 1645.99,-1986.87"/>
<polygon fill="blue" stroke="blue" points="1644.7,-1990.15 1655.15,-1991.88 1648.05,-1984.01 1644.7,-1990.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1479.73,-706.99C1517.36,-716.95 1552.35,-734.55 1578,-764 1625.41,-818.43 1570.53,-2000.42 1606.5,-2063 1615.52,-2078.69 1630.45,-2090.79 1645.97,-2099.88"/>
<polygon fill="blue" stroke="blue" points="1644.68,-2103.16 1655.13,-2104.89 1648.03,-2097.02 1644.68,-2103.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node97"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="1358,-459 1138,-459 1138,-423 1358,-423 1358,-459"/>
<text text-anchor="middle" x="1248" y="-437.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1358.32,-446.44C1422.53,-450.52 1505.14,-457.28 1578,-468 1597.21,-470.83 1617.87,-474.82 1636.82,-478.88"/>
<polygon fill="blue" stroke="blue" points="1636.33,-482.35 1646.85,-481.06 1637.82,-475.51 1636.33,-482.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1358.1,-441C1444.83,-441 1563.39,-441 1636.9,-441"/>
<polygon fill="blue" stroke="blue" points="1636.96,-444.5 1646.96,-441 1636.96,-437.5 1636.96,-444.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node98"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="1336,-405 1160,-405 1160,-369 1336,-369 1336,-405"/>
<text text-anchor="middle" x="1248" y="-383.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1336.03,-372.55C1406.98,-365.52 1506.74,-366.95 1578,-414 1600.65,-428.95 1585.35,-451 1606.5,-468 1615.44,-475.18 1626.15,-480.46 1637.16,-484.33"/>
<polygon fill="blue" stroke="blue" points="1636.29,-487.73 1646.88,-487.39 1638.39,-481.05 1636.29,-487.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1336.28,-391.1C1402.79,-394.97 1496.49,-402.01 1578,-414 1597.21,-416.83 1617.87,-420.82 1636.82,-424.88"/>
<polygon fill="blue" stroke="blue" points="1636.33,-428.35 1646.85,-427.06 1637.82,-421.51 1636.33,-428.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node99"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="1352.5,-351 1143.5,-351 1143.5,-315 1352.5,-315 1352.5,-351"/>
<text text-anchor="middle" x="1248" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1335.44,-314.95C1408.44,-305.02 1511.44,-304.24 1578,-360 1616.05,-391.88 1571.59,-432.71 1606.5,-468 1614.94,-476.53 1625.8,-482.43 1637.21,-486.5"/>
<polygon fill="blue" stroke="blue" points="1636.29,-489.88 1646.88,-489.51 1638.37,-483.2 1636.29,-489.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1352.74,-328.81C1418.83,-329.2 1505.38,-335.47 1578,-360 1614.47,-372.32 1650.93,-397.36 1675.28,-416.35"/>
<polygon fill="blue" stroke="blue" points="1673.36,-419.3 1683.36,-422.79 1677.72,-413.82 1673.36,-419.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node100"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="1308.5,-297 1187.5,-297 1187.5,-261 1308.5,-261 1308.5,-297"/>
<text text-anchor="middle" x="1248" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1308.81,-264.3C1382.04,-250.2 1505.26,-239.68 1578,-306 1632.02,-355.25 1557.31,-413.92 1606.5,-468 1614.66,-476.98 1625.51,-483.08 1637.01,-487.2"/>
<polygon fill="blue" stroke="blue" points="1636.19,-490.61 1646.78,-490.22 1638.26,-483.92 1636.19,-490.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1308.78,-271.48C1377.39,-265.58 1491.56,-264.26 1578,-306 1627.44,-329.87 1667.25,-382.05 1688.25,-414.09"/>
<polygon fill="blue" stroke="blue" points="1685.33,-416.02 1693.67,-422.56 1691.23,-412.25 1685.33,-416.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node101"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="1335.5,-243 1160.5,-243 1160.5,-207 1335.5,-207 1335.5,-243"/>
<text text-anchor="middle" x="1248" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1324.38,-206.99C1398.97,-194.07 1511.37,-188.58 1578,-252 1648.14,-318.76 1542.9,-394.98 1606.5,-468 1614.56,-477.25 1625.47,-483.47 1637.09,-487.62"/>
<polygon fill="blue" stroke="blue" points="1636.38,-491.06 1646.97,-490.64 1638.43,-484.37 1636.38,-491.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1335.51,-212.47C1405.68,-206.69 1504.63,-208.87 1578,-252 1640.71,-288.86 1678.68,-370.55 1695.03,-413.46"/>
<polygon fill="blue" stroke="blue" points="1691.8,-414.82 1698.55,-422.99 1698.37,-412.39 1691.8,-414.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node102"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="1323,-189 1173,-189 1173,-153 1323,-153 1323,-189"/>
<text text-anchor="middle" x="1248" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.98,-152.94C1397.83,-139.52 1511.69,-133.22 1578,-198 1621.16,-240.16 1567.47,-421.99 1606.5,-468 1614.44,-477.36 1625.29,-483.62 1636.9,-487.79"/>
<polygon fill="blue" stroke="blue" points="1636.18,-491.23 1646.77,-490.81 1638.23,-484.54 1636.18,-491.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1323.23,-157.85C1394.59,-149.36 1502.46,-147.82 1578,-198 1654.17,-248.6 1687.28,-360.25 1699.04,-412.71"/>
<polygon fill="blue" stroke="blue" points="1695.66,-413.63 1701.18,-422.68 1702.51,-412.16 1695.66,-413.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node103"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1391,-675 1105,-675 1105,-639 1391,-639 1391,-675"/>
<text text-anchor="middle" x="1248" y="-653.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.35,-667.44C1451.57,-666.37 1520.84,-657.6 1578,-630 1627.44,-606.13 1667.25,-553.95 1688.25,-521.91"/>
<polygon fill="blue" stroke="blue" points="1691.23,-523.75 1693.67,-513.44 1685.33,-519.98 1691.23,-523.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1327.66,-675.04C1401.79,-687.01 1511.19,-690.91 1578,-630 1632.02,-580.75 1557.31,-522.08 1606.5,-468 1614.66,-459.02 1625.51,-452.92 1637.01,-448.8"/>
<polygon fill="blue" stroke="blue" points="1638.26,-452.08 1646.78,-445.78 1636.19,-445.39 1638.26,-452.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.44,-650.56C1468.23,-650.48 1552.39,-657.04 1578,-684 1649.28,-759.03 1542.53,-1533.64 1606.5,-1615 1620.94,-1633.36 1646.64,-1639.95 1668.1,-1642.04"/>
<polygon fill="blue" stroke="blue" points="1668.01,-1645.54 1678.22,-1642.73 1668.49,-1638.56 1668.01,-1645.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.03,-650.53C1467.95,-650.41 1552.39,-656.95 1578,-684 1657.41,-767.86 1535.27,-1632.1 1606.5,-1723 1620.91,-1741.38 1646.61,-1747.98 1668.08,-1750.05"/>
<polygon fill="blue" stroke="blue" points="1667.99,-1753.56 1678.21,-1750.74 1668.47,-1746.57 1667.99,-1753.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.08,-650.48C1468.01,-650.35 1552.45,-656.89 1578,-684 1626.25,-735.2 1571.42,-1889.02 1606.5,-1950 1615.52,-1965.68 1630.45,-1977.79 1645.97,-1986.88"/>
<polygon fill="blue" stroke="blue" points="1644.68,-1990.16 1655.14,-1991.88 1648.04,-1984.02 1644.68,-1990.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.1,-650.46C1468.04,-650.33 1552.48,-656.87 1578,-684 1630.5,-739.82 1568.36,-1996.54 1606.5,-2063 1615.51,-2078.69 1630.43,-2090.8 1645.95,-2099.89"/>
<polygon fill="blue" stroke="blue" points="1644.67,-2103.17 1655.12,-2104.89 1648.02,-2097.03 1644.67,-2103.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node104"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="1330,-621 1166,-621 1166,-585 1330,-585 1330,-621"/>
<text text-anchor="middle" x="1248" y="-599.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.3,-607.1C1398.26,-608.02 1496.83,-603.42 1578,-576 1614.47,-563.68 1650.93,-538.64 1675.28,-519.65"/>
<polygon fill="blue" stroke="blue" points="1677.72,-522.18 1683.36,-513.21 1673.36,-516.7 1677.72,-522.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.07,-620.29C1403.32,-630.9 1509.8,-633.14 1578,-576 1616.05,-544.12 1571.59,-503.29 1606.5,-468 1614.94,-459.47 1625.8,-453.57 1637.21,-449.5"/>
<polygon fill="blue" stroke="blue" points="1638.37,-452.8 1646.88,-446.49 1636.29,-446.12 1638.37,-452.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.26,-597.87C1416.65,-594.38 1545.27,-595.49 1578,-630 1653.34,-709.44 1538.9,-1528.87 1606.5,-1615 1620.92,-1633.37 1646.62,-1639.97 1668.09,-1642.05"/>
<polygon fill="blue" stroke="blue" points="1668,-1645.55 1678.22,-1642.74 1668.48,-1638.57 1668,-1645.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.28,-597.85C1416.68,-594.35 1545.32,-595.44 1578,-630 1619.74,-674.13 1569.07,-1675.16 1606.5,-1723 1620.89,-1741.39 1646.6,-1747.98 1668.07,-1750.06"/>
<polygon fill="blue" stroke="blue" points="1667.99,-1753.56 1678.2,-1750.75 1668.46,-1746.58 1667.99,-1753.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.31,-597.82C1416.74,-594.3 1545.39,-595.37 1578,-630 1628.28,-683.41 1569.96,-1886.4 1606.5,-1950 1615.51,-1965.69 1630.44,-1977.79 1645.96,-1986.88"/>
<polygon fill="blue" stroke="blue" points="1644.67,-1990.17 1655.13,-1991.89 1648.03,-1984.02 1644.67,-1990.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.32,-597.81C1416.76,-594.28 1545.42,-595.34 1578,-630 1632.53,-688.02 1566.89,-1993.92 1606.5,-2063 1615.5,-2078.7 1630.43,-2090.8 1645.95,-2099.89"/>
<polygon fill="blue" stroke="blue" points="1644.66,-2103.18 1655.11,-2104.9 1648.01,-2097.03 1644.66,-2103.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node105"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="1338,-567 1158,-567 1158,-531 1338,-531 1338,-567"/>
<text text-anchor="middle" x="1248" y="-545.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1338.02,-544.79C1404.42,-540.91 1497.2,-533.89 1578,-522 1597.21,-519.17 1617.87,-515.18 1636.82,-511.12"/>
<polygon fill="blue" stroke="blue" points="1637.82,-514.49 1646.85,-508.94 1636.33,-507.65 1637.82,-514.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node106"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="1345,-513 1151,-513 1151,-477 1345,-477 1345,-513"/>
<text text-anchor="middle" x="1248" y="-491.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1345.04,-495C1432.47,-495 1559.35,-495 1636.65,-495"/>
<polygon fill="blue" stroke="blue" points="1636.75,-498.5 1646.75,-495 1636.75,-491.5 1636.75,-498.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1345.11,-490.37C1410.91,-486.41 1500.04,-479.47 1578,-468 1597.21,-465.17 1617.87,-461.18 1636.82,-457.12"/>
<polygon fill="blue" stroke="blue" points="1637.82,-460.49 1646.85,-454.94 1636.33,-453.65 1637.82,-460.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node107"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="1326,-135 1170,-135 1170,-99 1326,-99 1326,-135"/>
<text text-anchor="middle" x="1248" y="-113.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1321.83,-98.96C1396.84,-85.18 1511.85,-78.24 1578,-144 1629.26,-194.96 1560.22,-412.48 1606.5,-468 1614.48,-477.57 1625.51,-483.92 1637.31,-488.09"/>
<polygon fill="blue" stroke="blue" points="1636.31,-491.44 1646.89,-490.99 1638.33,-484.74 1636.31,-491.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1326.16,-102.33C1398.16,-93.12 1505.15,-91.44 1578,-144 1668.25,-209.12 1694.6,-351.92 1701.88,-412.7"/>
<polygon fill="blue" stroke="blue" points="1698.42,-413.18 1703,-422.73 1705.37,-412.4 1698.42,-413.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node108"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="1322.5,-1759 1173.5,-1759 1173.5,-1723 1322.5,-1723 1322.5,-1759"/>
<text text-anchor="middle" x="1248" y="-1737.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.67,-1752.76C1393.36,-1760.17 1500.52,-1760.87 1578,-1714 1598.26,-1701.75 1587.48,-1683.09 1606.5,-1669 1624.37,-1655.76 1648.4,-1649.01 1668.19,-1645.57"/>
<polygon fill="blue" stroke="blue" points="1668.74,-1649.03 1678.1,-1644.06 1667.68,-1642.11 1668.74,-1649.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.69,-1742.46C1421.56,-1744.41 1593.37,-1747.8 1668.07,-1749.28"/>
<polygon fill="blue" stroke="blue" points="1668.3,-1752.79 1678.37,-1749.48 1668.44,-1745.79 1668.3,-1752.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.83,-1756.91C1395.93,-1768.11 1506.95,-1772.19 1578,-1714 1613.42,-1684.99 1573.94,-1647.19 1606.5,-1615 1607.45,-1614.06 1608.44,-1613.15 1609.45,-1612.27"/>
<polygon fill="blue" stroke="blue" points="1611.76,-1614.91 1617.67,-1606.12 1607.57,-1609.3 1611.76,-1614.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.6,-1723.35C1397.13,-1710.25 1510.74,-1704.21 1578,-1768 1646.34,-1832.81 1546.18,-1905.66 1606.5,-1978 1608.94,-1980.92 1611.64,-1983.58 1614.56,-1985.99"/>
<polygon fill="blue" stroke="blue" points="1612.55,-1988.86 1622.72,-1991.84 1616.63,-1983.17 1612.55,-1988.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.41,-1722.95C1397.34,-1709.35 1511.78,-1702.73 1578,-1768 1624.91,-1814.23 1571.58,-2007.16 1606.5,-2063 1616.36,-2078.77 1632.04,-2091.01 1647.99,-2100.2"/>
<polygon fill="blue" stroke="blue" points="1646.38,-2103.31 1656.84,-2105 1649.72,-2097.16 1646.38,-2103.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node109"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1393,-2029 1103,-2029 1103,-1993 1393,-1993 1393,-2029"/>
<text text-anchor="middle" x="1248" y="-2007.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1321.79,-2029.01C1396.78,-2042.76 1511.77,-2049.68 1578,-1984 1627.91,-1934.51 1561.43,-1722.93 1606.5,-1669 1621.38,-1651.19 1646.83,-1644.56 1668.06,-1642.31"/>
<polygon fill="blue" stroke="blue" points="1668.38,-1645.8 1678.08,-1641.53 1667.84,-1638.82 1668.38,-1645.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1333.18,-2029.01C1406.49,-2039.46 1511.22,-2041.04 1578,-1984 1618.7,-1949.24 1582.35,-1914.76 1606.5,-1867 1624.44,-1831.52 1655.01,-1797.44 1677.25,-1775.31"/>
<polygon fill="blue" stroke="blue" points="1679.74,-1777.77 1684.44,-1768.27 1674.84,-1772.76 1679.74,-1777.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1393.12,-2010.68C1462.5,-2010.53 1543.9,-2010.35 1606.07,-2010.22"/>
<polygon fill="blue" stroke="blue" points="1606.28,-2013.72 1616.27,-2010.19 1606.26,-2006.72 1606.28,-2013.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1393.07,-2025.43C1451.33,-2033.52 1518.69,-2045.78 1578,-2064 1607.58,-2073.09 1639.12,-2087.79 1663.31,-2100.24"/>
<polygon fill="blue" stroke="blue" points="1661.72,-2103.36 1672.2,-2104.89 1664.96,-2097.15 1661.72,-2103.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node110"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="1487.5,-1975 1008.5,-1975 1008.5,-1939 1487.5,-1939 1487.5,-1975"/>
<text text-anchor="middle" x="1248" y="-1953.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.94,-1975.01C1397.75,-1988.39 1511.58,-1994.66 1578,-1930 1619.81,-1889.3 1568.67,-1713.42 1606.5,-1669 1621.54,-1651.33 1646.99,-1644.69 1668.18,-1642.41"/>
<polygon fill="blue" stroke="blue" points="1668.48,-1645.9 1678.17,-1641.61 1667.93,-1638.92 1668.48,-1645.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1365.39,-1975.01C1433.21,-1979.21 1517.1,-1972.92 1578,-1930 1603.12,-1912.3 1590.15,-1893.02 1606.5,-1867 1627.81,-1833.08 1658.13,-1798.42 1679.38,-1775.73"/>
<polygon fill="blue" stroke="blue" points="1682.16,-1777.88 1686.49,-1768.22 1677.08,-1773.07 1682.16,-1777.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1487.93,-1973.19C1518.31,-1976.25 1548.93,-1979.83 1578,-1984 1589.7,-1985.68 1601.95,-1987.77 1614.03,-1990.03"/>
<polygon fill="blue" stroke="blue" points="1613.63,-1993.51 1624.11,-1991.96 1614.95,-1986.64 1613.63,-1993.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1347.05,-1938.99C1418.22,-1931.61 1513.03,-1934.28 1578,-1984 1607.64,-2006.68 1582.92,-2034.07 1606.5,-2063 1618.84,-2078.14 1636.06,-2090.47 1652.64,-2099.93"/>
<polygon fill="blue" stroke="blue" points="1651.29,-2103.18 1661.75,-2104.89 1654.64,-2097.03 1651.29,-2103.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node111"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="1494.5,-1921 1001.5,-1921 1001.5,-1885 1494.5,-1885 1494.5,-1921"/>
<text text-anchor="middle" x="1248" y="-1899.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1325,-1921.05C1399.54,-1933.82 1511.4,-1939.03 1578,-1876 1645.45,-1812.16 1545.31,-1738.86 1606.5,-1669 1621.72,-1651.63 1646.99,-1644.96 1668.06,-1642.59"/>
<polygon fill="blue" stroke="blue" points="1668.64,-1646.06 1678.31,-1641.73 1668.06,-1639.08 1668.64,-1646.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1494.72,-1902.03C1523.58,-1896.37 1551.99,-1888.01 1578,-1876 1625.38,-1854.12 1665.16,-1806.51 1686.84,-1776.49"/>
<polygon fill="blue" stroke="blue" points="1689.82,-1778.34 1692.72,-1768.15 1684.1,-1774.31 1689.82,-1778.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1494.64,-1897.03C1524.15,-1903.72 1552.73,-1914.21 1578,-1930 1599.04,-1943.15 1587.14,-1962.49 1606.5,-1978 1610.82,-1981.46 1615.53,-1984.55 1620.47,-1987.32"/>
<polygon fill="blue" stroke="blue" points="1619.07,-1990.53 1629.57,-1991.94 1622.24,-1984.29 1619.07,-1990.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.7,-1884.97C1404.39,-1873.85 1511.16,-1871.28 1578,-1930 1623.42,-1969.9 1571.56,-2013.67 1606.5,-2063 1617.49,-2078.52 1633.89,-2090.8 1650.14,-2100.11"/>
<polygon fill="blue" stroke="blue" points="1648.66,-2103.29 1659.12,-2104.97 1652,-2097.13 1648.66,-2103.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node112"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1312,-1543 1184,-1543 1184,-1507 1312,-1507 1312,-1543"/>
<text text-anchor="middle" x="1248" y="-1521.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1312.16,-1521.17C1495.05,-1511.05 2021.82,-1489.06 2175,-1561 2222.44,-1583.28 2259.18,-1634.28 2278.48,-1665.96"/>
<polygon fill="blue" stroke="blue" points="2275.57,-1667.92 2283.68,-1674.74 2281.59,-1664.35 2275.57,-1667.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1312.14,-1509.58C1385.82,-1495.69 1506.62,-1486.33 1578,-1552 1634.7,-1604.17 1554.92,-1665.77 1606.5,-1723 1621.96,-1740.16 1647.23,-1746.83 1668.24,-1749.25"/>
<polygon fill="blue" stroke="blue" points="1668.19,-1752.76 1678.45,-1750.15 1668.8,-1745.79 1668.19,-1752.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node113"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="1377,-1813 1119,-1813 1119,-1777 1377,-1777 1377,-1813"/>
<text text-anchor="middle" x="1248" y="-1791.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1337.66,-1813.01C1410.31,-1822.38 1511.6,-1822.38 1578,-1768 1613.42,-1738.99 1573.94,-1701.19 1606.5,-1669 1622.71,-1652.97 1647.52,-1646.25 1668.11,-1643.51"/>
<polygon fill="blue" stroke="blue" points="1668.56,-1646.99 1678.13,-1642.45 1667.81,-1640.03 1668.56,-1646.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1377.29,-1786.25C1438.19,-1781.64 1511.93,-1775.4 1578,-1768 1608.48,-1764.58 1642.93,-1759.61 1668.17,-1755.75"/>
<polygon fill="blue" stroke="blue" points="1669.04,-1759.16 1678.39,-1754.18 1667.98,-1752.24 1669.04,-1759.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.23,-1813C1402.25,-1824.77 1511.1,-1828.38 1578,-1768 1629.35,-1721.65 1559.7,-1665.94 1606.5,-1615 1607.41,-1614.01 1608.35,-1613.06 1609.31,-1612.14"/>
<polygon fill="blue" stroke="blue" points="1611.68,-1614.73 1617.28,-1605.74 1607.29,-1609.28 1611.68,-1614.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.28,-1776.95C1402.33,-1765.14 1511.21,-1761.5 1578,-1822 1630.24,-1869.32 1560.14,-1924.92 1606.5,-1978 1609.06,-1980.94 1611.9,-1983.6 1614.95,-1986.03"/>
<polygon fill="blue" stroke="blue" points="1613.23,-1989.1 1623.45,-1991.89 1617.21,-1983.33 1613.23,-1989.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1323.51,-1776.99C1398.24,-1763.79 1511.49,-1757.84 1578,-1822 1616.81,-1859.44 1577.42,-2017.58 1606.5,-2063 1616.53,-2078.66 1632.25,-2090.88 1648.19,-2100.07"/>
<polygon fill="blue" stroke="blue" points="1646.58,-2103.18 1657.03,-2104.88 1649.92,-2097.03 1646.58,-2103.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node114"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="1471.5,-1867 1024.5,-1867 1024.5,-1831 1471.5,-1831 1471.5,-1867"/>
<text text-anchor="middle" x="1248" y="-1845.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.23,-1867C1402.25,-1878.77 1511.1,-1882.38 1578,-1822 1629.35,-1775.65 1559.7,-1719.94 1606.5,-1669 1622.03,-1652.1 1647.06,-1645.4 1667.94,-1642.9"/>
<polygon fill="blue" stroke="blue" points="1668.47,-1646.37 1678.11,-1641.97 1667.83,-1639.4 1668.47,-1646.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1471.84,-1843.94C1507.84,-1839.37 1544.32,-1832.4 1578,-1822 1612.19,-1811.44 1647.26,-1790.53 1671.78,-1773.95"/>
<polygon fill="blue" stroke="blue" points="1674.07,-1776.63 1680.31,-1768.07 1670.09,-1770.86 1674.07,-1776.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1337.05,-1830.95C1409.81,-1821.41 1511.6,-1821.18 1578,-1876 1614.3,-1905.97 1573.94,-1944.01 1606.5,-1978 1609.49,-1981.13 1612.8,-1983.95 1616.32,-1986.49"/>
<polygon fill="blue" stroke="blue" points="1614.6,-1989.55 1624.92,-1991.95 1618.35,-1983.64 1614.6,-1989.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1325.86,-1830.98C1400.25,-1818.49 1511.27,-1813.74 1578,-1876 1639.47,-1933.35 1559.98,-1992.97 1606.5,-2063 1616.88,-2078.63 1632.87,-2090.88 1648.94,-2100.12"/>
<polygon fill="blue" stroke="blue" points="1647.38,-2103.25 1657.84,-2104.94 1650.72,-2097.1 1647.38,-2103.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node115"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1313.5,-1705 1182.5,-1705 1182.5,-1669 1313.5,-1669 1313.5,-1705"/>
<text text-anchor="middle" x="1248" y="-1683.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1313.72,-1682.83C1380.15,-1678.28 1486.45,-1670.26 1578,-1660 1608.48,-1656.58 1642.93,-1651.61 1668.17,-1647.75"/>
<polygon fill="blue" stroke="blue" points="1669.04,-1651.16 1678.39,-1646.18 1667.98,-1644.24 1669.04,-1651.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1313.58,-1688.04C1380.34,-1690.11 1487.32,-1696.2 1578,-1714 1591.03,-1716.56 1593.76,-1719.24 1606.5,-1723 1626.92,-1729.03 1649.86,-1735.38 1668.41,-1740.4"/>
<polygon fill="blue" stroke="blue" points="1667.65,-1743.82 1678.22,-1743.04 1669.48,-1737.06 1667.65,-1743.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1313.56,-1674.34C1384.99,-1664.11 1500.24,-1659.19 1578,-1714 1603.12,-1731.7 1580.68,-1760.34 1606.5,-1777 1680.63,-1824.83 1718.47,-1794.21 1805,-1777 1861.76,-1765.71 1922.63,-1737.87 1961.67,-1717.76"/>
<polygon fill="blue" stroke="blue" points="1963.38,-1720.82 1970.63,-1713.08 1960.14,-1714.61 1963.38,-1720.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node116"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1375,-1651 1121,-1651 1121,-1615 1375,-1615 1375,-1651"/>
<text text-anchor="middle" x="1248" y="-1629.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1323.22,-1651.01C1397.99,-1664.3 1511.53,-1670.41 1578,-1606 1658.32,-1528.17 1696.54,-690.13 1703.37,-523.65"/>
<polygon fill="blue" stroke="blue" points="1706.89,-523.39 1703.79,-513.26 1699.89,-523.11 1706.89,-523.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1375.21,-1639.38C1456,-1640.43 1550.65,-1634.95 1578,-1606 1621.43,-1560.03 1567.55,-517.82 1606.5,-468 1614.26,-458.07 1625.32,-451.58 1637.23,-447.38"/>
<polygon fill="blue" stroke="blue" points="1638.34,-450.7 1646.92,-444.49 1636.33,-444 1638.34,-450.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1375.28,-1635.5C1474.33,-1637.45 1605.58,-1640.05 1668.23,-1641.28"/>
<polygon fill="blue" stroke="blue" points="1668.32,-1644.79 1678.39,-1641.48 1668.46,-1637.79 1668.32,-1644.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1365.39,-1614.99C1433.21,-1610.79 1517.1,-1617.08 1578,-1660 1603.12,-1677.7 1583.14,-1703.03 1606.5,-1723 1623.63,-1737.65 1648.07,-1744.4 1668.25,-1747.49"/>
<polygon fill="blue" stroke="blue" points="1667.99,-1750.99 1678.36,-1748.79 1668.89,-1744.04 1667.99,-1750.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1375.07,-1627.18C1455.51,-1626.41 1549.78,-1631.99 1578,-1660 1628.36,-1709.98 1562.31,-1922.49 1606.5,-1978 1608.67,-1980.73 1611.08,-1983.23 1613.68,-1985.52"/>
<polygon fill="blue" stroke="blue" points="1611.9,-1988.56 1622,-1991.77 1616.11,-1982.97 1611.9,-1988.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1375.23,-1627.01C1455.75,-1626.17 1550.05,-1631.73 1578,-1660 1641.12,-1723.84 1559.88,-1986.27 1606.5,-2063 1616.07,-2078.75 1631.5,-2090.95 1647.31,-2100.11"/>
<polygon fill="blue" stroke="blue" points="1645.64,-2103.18 1656.1,-2104.88 1648.98,-2097.03 1645.64,-2103.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node117"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="1342.5,-1597 1153.5,-1597 1153.5,-1561 1342.5,-1561 1342.5,-1597"/>
<text text-anchor="middle" x="1248" y="-1575.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1342.66,-1572.99C1414.75,-1568.68 1516.88,-1563.25 1606.5,-1561 1694.69,-1558.78 1717.54,-1549.39 1805,-1561 1972.75,-1583.26 2164.63,-1646.76 2249.35,-1676.83"/>
<polygon fill="blue" stroke="blue" points="2248.31,-1680.17 2258.9,-1680.24 2250.66,-1673.58 2248.31,-1680.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1333.18,-1560.99C1406.49,-1550.54 1511.22,-1548.96 1578,-1606 1618.7,-1640.76 1569.23,-1684.59 1606.5,-1723 1622.48,-1739.47 1647.51,-1746.17 1668.28,-1748.78"/>
<polygon fill="blue" stroke="blue" points="1668.07,-1752.28 1678.37,-1749.78 1668.76,-1745.31 1668.07,-1752.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node118"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="1383.5,-2872 1112.5,-2872 1112.5,-2836 1383.5,-2836 1383.5,-2872"/>
<text text-anchor="middle" x="1248" y="-2850.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="1732.5,-2980 1678.5,-2980 1678.5,-2944 1732.5,-2944 1732.5,-2980"/>
<text text-anchor="middle" x="1705.5" y="-2958.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1383.65,-2850.42C1444.41,-2852.49 1516.24,-2860.14 1578,-2881 1614.47,-2893.32 1650.93,-2918.36 1675.28,-2937.35"/>
<polygon fill="blue" stroke="blue" points="1673.36,-2940.3 1683.36,-2943.79 1677.72,-2934.82 1673.36,-2940.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1785,-2195 1626,-2195 1626,-2159 1785,-2159 1785,-2195"/>
<text text-anchor="middle" x="1705.5" y="-2173.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1383.78,-2860.28C1462.45,-2860.74 1551.34,-2854.64 1578,-2827 1626.1,-2777.12 1563.26,-2258.15 1606.5,-2204 1609.57,-2200.15 1613.14,-2196.82 1617.06,-2193.94"/>
<polygon fill="blue" stroke="blue" points="1618.92,-2196.91 1625.55,-2188.64 1615.21,-2190.97 1618.92,-2196.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1781.5,-2249 1629.5,-2249 1629.5,-2213 1781.5,-2213 1781.5,-2249"/>
<text text-anchor="middle" x="1705.5" y="-2227.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1383.72,-2860.22C1462.36,-2860.65 1551.25,-2854.55 1578,-2827 1620.09,-2783.65 1574.22,-2335.07 1606.5,-2284 1614.48,-2271.38 1626.55,-2261.55 1639.53,-2253.98"/>
<polygon fill="blue" stroke="blue" points="1641.47,-2256.91 1648.62,-2249.09 1638.16,-2250.75 1641.47,-2256.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1689,-2943.9C1662.44,-2913.42 1611.29,-2848.7 1592.25,-2783 1581.72,-2746.66 1575.99,-2136.16 1592.25,-2102 1606.42,-2072.23 1635.46,-2048.95 1660.58,-2033.26"/>
<polygon fill="blue" stroke="blue" points="1662.51,-2036.18 1669.27,-2028.02 1658.9,-2030.18 1662.51,-2036.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="2078.5,-2249 1929.5,-2249 1929.5,-2213 2078.5,-2213 2078.5,-2249"/>
<text text-anchor="middle" x="2004" y="-2227.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1718.61,-2943.74C1738.47,-2913.25 1778.42,-2849.61 1805,-2792 1896.07,-2594.58 1971.24,-2342.53 1995.09,-2259.16"/>
<polygon fill="blue" stroke="blue" points="1998.49,-2259.98 1997.86,-2249.41 1991.76,-2258.07 1998.49,-2259.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="2082,-2195 1926,-2195 1926,-2159 2082,-2159 2082,-2195"/>
<text text-anchor="middle" x="2004" y="-2173.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1711.41,-2943.97C1727.78,-2883.05 1780.83,-2679.08 1805,-2507 1809.69,-2473.59 1802.17,-2228.85 1825,-2204 1847.71,-2179.28 1882.69,-2170.55 1915.65,-2168.74"/>
<polygon fill="blue" stroke="blue" points="1915.92,-2172.24 1925.8,-2168.39 1915.68,-2165.24 1915.92,-2172.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node120"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="1463.5,-2602 1032.5,-2602 1032.5,-2566 1463.5,-2566 1463.5,-2602"/>
<text text-anchor="middle" x="1248" y="-2580.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1463.57,-2587.78C1514.95,-2584.03 1560.15,-2575.22 1578,-2557 1614.15,-2520.1 1583.35,-2139.17 1606.5,-2093 1618.88,-2068.3 1642.24,-2048.06 1663.05,-2033.76"/>
<polygon fill="blue" stroke="blue" points="1665.06,-2036.62 1671.47,-2028.19 1661.2,-2030.79 1665.06,-2036.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1463.78,-2587.53C1514.98,-2583.76 1560.03,-2574.99 1578,-2557 1633.61,-2501.31 1556.33,-2264.63 1606.5,-2204 1609.64,-2200.21 1613.26,-2196.92 1617.22,-2194.07"/>
<polygon fill="blue" stroke="blue" points="1619.07,-2197.04 1625.77,-2188.83 1615.42,-2191.07 1619.07,-2197.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1322.65,-2602.01C1397.51,-2615.49 1511.63,-2621.92 1578,-2557 1621.61,-2514.35 1572.59,-2334.7 1606.5,-2284 1615.01,-2271.27 1627.63,-2261.35 1641,-2253.71"/>
<polygon fill="blue" stroke="blue" points="1642.67,-2256.79 1649.86,-2249.02 1639.39,-2250.61 1642.67,-2256.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node121"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="1362,-2818 1134,-2818 1134,-2782 1362,-2782 1362,-2818"/>
<text text-anchor="middle" x="1248" y="-2796.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1362.04,-2789.61C1428.08,-2788.22 1511.3,-2794.79 1578,-2827 1627.44,-2850.87 1667.25,-2903.05 1688.25,-2935.09"/>
<polygon fill="blue" stroke="blue" points="1685.33,-2937.02 1693.67,-2943.56 1691.23,-2933.25 1685.33,-2937.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1362.05,-2805.96C1445.27,-2807.64 1548.79,-2803.15 1578,-2773 1622.04,-2727.53 1566.89,-2253.38 1606.5,-2204 1609.58,-2200.16 1613.16,-2196.83 1617.08,-2193.96"/>
<polygon fill="blue" stroke="blue" points="1618.94,-2196.92 1625.57,-2188.67 1615.24,-2190.98 1618.94,-2196.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1362.41,-2805.9C1445.52,-2807.52 1548.72,-2802.98 1578,-2773 1616.03,-2734.06 1577.29,-2329.92 1606.5,-2284 1614.51,-2271.4 1626.6,-2261.58 1639.59,-2254.01"/>
<polygon fill="blue" stroke="blue" points="1641.53,-2256.94 1648.67,-2249.12 1638.21,-2250.78 1641.53,-2256.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node122"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="1394,-2764 1102,-2764 1102,-2728 1394,-2728 1394,-2764"/>
<text text-anchor="middle" x="1248" y="-2742.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.12,-2731.15C1454.64,-2731.49 1523.41,-2740.91 1578,-2773 1640.71,-2809.86 1678.68,-2891.55 1695.03,-2934.46"/>
<polygon fill="blue" stroke="blue" points="1691.8,-2935.82 1698.55,-2943.99 1698.37,-2933.39 1691.8,-2935.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.31,-2752.21C1470.16,-2752.03 1552.41,-2745.28 1578,-2719 1657.96,-2636.88 1534.55,-2293.22 1606.5,-2204 1609.59,-2200.17 1613.17,-2196.85 1617.1,-2193.98"/>
<polygon fill="blue" stroke="blue" points="1618.96,-2196.94 1625.61,-2188.69 1615.27,-2191 1618.96,-2196.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.21,-2752.11C1470.03,-2751.9 1552.28,-2745.15 1578,-2719 1645.93,-2649.94 1554.21,-2365.55 1606.5,-2284 1614.6,-2271.37 1626.8,-2261.52 1639.86,-2253.94"/>
<polygon fill="blue" stroke="blue" points="1641.84,-2256.85 1649,-2249.04 1638.53,-2250.68 1641.84,-2256.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node123"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="1445.5,-2656 1050.5,-2656 1050.5,-2620 1445.5,-2620 1445.5,-2656"/>
<text text-anchor="middle" x="1248" y="-2634.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1445.68,-2642.95C1504.26,-2640.01 1558.16,-2631.38 1578,-2611 1618.21,-2569.7 1580.83,-2144.61 1606.5,-2093 1618.8,-2068.26 1642.16,-2048.02 1662.99,-2033.73"/>
<polygon fill="blue" stroke="blue" points="1665,-2036.59 1671.41,-2028.16 1661.14,-2030.75 1665,-2036.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1445.85,-2642.54C1490.64,-2637.98 1537.06,-2628.59 1578,-2611 1767.2,-2529.73 1929.57,-2329.59 1983.76,-2257.45"/>
<polygon fill="blue" stroke="blue" points="1986.66,-2259.42 1989.83,-2249.31 1981.05,-2255.24 1986.66,-2259.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.68,-2656.01C1404.35,-2667.11 1511.11,-2669.67 1578,-2611 1623.12,-2571.42 1579.2,-2532.45 1606.5,-2479 1666.55,-2361.42 1736.75,-2371.02 1805,-2258 1818.23,-2236.09 1805.15,-2220.16 1825,-2204 1850.15,-2183.52 1884.16,-2175.21 1915.71,-2172.56"/>
<polygon fill="blue" stroke="blue" points="1916.11,-2176.05 1925.86,-2171.9 1915.65,-2169.06 1916.11,-2176.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node124"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="1371.5,-3304 1124.5,-3304 1124.5,-3268 1371.5,-3268 1371.5,-3304"/>
<text text-anchor="middle" x="1248" y="-3282.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1327.66,-3304.04C1401.79,-3316.01 1511.19,-3319.91 1578,-3259 1632.02,-3209.75 1577.96,-3164.31 1606.5,-3097 1624.33,-3054.95 1657.38,-3013.48 1680.13,-2987.83"/>
<polygon fill="blue" stroke="blue" points="1682.74,-2990.17 1686.83,-2980.4 1677.54,-2985.48 1682.74,-2990.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node125"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="1429,-2548 1067,-2548 1067,-2512 1429,-2512 1429,-2548"/>
<text text-anchor="middle" x="1248" y="-2526.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1429.04,-2535.47C1493.73,-2533.34 1556.15,-2525.12 1578,-2503 1642.18,-2438.02 1565.24,-2174.48 1606.5,-2093 1618.98,-2068.35 1642.34,-2048.12 1663.13,-2033.8"/>
<polygon fill="blue" stroke="blue" points="1665.14,-2036.66 1671.54,-2028.22 1661.27,-2030.83 1665.14,-2036.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1429.21,-2535.17C1493.69,-2532.98 1555.92,-2524.79 1578,-2503 1625.51,-2456.12 1563.58,-2255.11 1606.5,-2204 1609.67,-2200.23 1613.31,-2196.96 1617.28,-2194.13"/>
<polygon fill="blue" stroke="blue" points="1619.14,-2197.09 1625.86,-2188.9 1615.5,-2191.11 1619.14,-2197.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1324.4,-2548.03C1399.01,-2560.97 1511.43,-2566.48 1578,-2503 1649.03,-2435.26 1550.9,-2364.89 1606.5,-2284 1615.22,-2271.32 1627.99,-2261.4 1641.44,-2253.75"/>
<polygon fill="blue" stroke="blue" points="1643.14,-2256.81 1650.35,-2249.05 1639.87,-2250.62 1643.14,-2256.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node126"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="1357,-2710 1139,-2710 1139,-2674 1357,-2674 1357,-2710"/>
<text text-anchor="middle" x="1248" y="-2688.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1357.21,-2675.68C1425.91,-2671.04 1513.67,-2676.27 1578,-2719 1654.17,-2769.6 1687.28,-2881.25 1699.04,-2933.71"/>
<polygon fill="blue" stroke="blue" points="1695.66,-2934.63 1701.18,-2943.68 1702.51,-2933.16 1695.66,-2934.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1357.3,-2697.76C1441.21,-2699.65 1548.06,-2695.54 1578,-2665 1649.84,-2591.7 1541.81,-2283.69 1606.5,-2204 1609.6,-2200.18 1613.2,-2196.87 1617.13,-2194"/>
<polygon fill="blue" stroke="blue" points="1618.99,-2196.97 1625.65,-2188.73 1615.3,-2191.02 1618.99,-2196.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1357.19,-2697.66C1441.04,-2699.49 1547.87,-2695.35 1578,-2665 1637.82,-2604.75 1560.34,-2355.26 1606.5,-2284 1614.66,-2271.4 1626.88,-2261.57 1639.94,-2253.99"/>
<polygon fill="blue" stroke="blue" points="1641.92,-2256.9 1649.08,-2249.09 1638.61,-2250.73 1641.92,-2256.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node127"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="1386.5,-2494 1109.5,-2494 1109.5,-2458 1386.5,-2458 1386.5,-2494"/>
<text text-anchor="middle" x="1248" y="-2472.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1386.54,-2481.98C1464.32,-2482.14 1551.23,-2475.82 1578,-2449 1634.06,-2392.83 1570.28,-2163.61 1606.5,-2093 1619.11,-2068.42 1642.48,-2048.18 1663.23,-2033.85"/>
<polygon fill="blue" stroke="blue" points="1665.24,-2036.72 1671.63,-2028.27 1661.36,-2030.89 1665.24,-2036.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1323.54,-2494.04C1398.28,-2507.26 1511.56,-2513.23 1578,-2449 1656.82,-2372.81 1535.14,-2287.21 1606.5,-2204 1609.71,-2200.26 1613.38,-2197.02 1617.38,-2194.2"/>
<polygon fill="blue" stroke="blue" points="1619.23,-2197.17 1625.99,-2189.01 1615.62,-2191.17 1619.23,-2197.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1327.35,-2494.03C1401.52,-2506.07 1511.18,-2510.11 1578,-2449 1632.92,-2398.77 1563.08,-2344.44 1606.5,-2284 1615.57,-2271.37 1628.61,-2261.45 1642.23,-2253.78"/>
<polygon fill="blue" stroke="blue" points="1644,-2256.8 1651.23,-2249.05 1640.75,-2250.6 1644,-2256.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node128"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="1317.5,-3196 1178.5,-3196 1178.5,-3160 1317.5,-3160 1317.5,-3196"/>
<text text-anchor="middle" x="1248" y="-3174.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1317.5,-3190.36C1388.67,-3199.36 1500.28,-3202.31 1578,-3151 1600.65,-3136.05 1592.16,-3120.04 1606.5,-3097 1630.94,-3057.73 1663.03,-3014.91 1683.71,-2988.26"/>
<polygon fill="blue" stroke="blue" points="1686.61,-2990.24 1690,-2980.2 1681.09,-2985.93 1686.61,-2990.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1317.52,-3194.78C1391.92,-3208.52 1509.3,-3216.39 1578,-3151 1613.07,-3117.62 1591.18,-2980.93 1606.5,-2935 1655.68,-2787.62 1916.64,-2368.16 1986.04,-2257.85"/>
<polygon fill="blue" stroke="blue" points="1989.06,-2259.62 1991.43,-2249.29 1983.14,-2255.89 1989.06,-2259.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1317.61,-3182.48C1403.41,-3186.44 1543.3,-3186.91 1578,-3151 1624.3,-3103.08 1577.21,-2611.85 1606.5,-2552 1657.55,-2447.67 1750.62,-2484.64 1805,-2382 1823.64,-2346.83 1797.4,-2232.68 1825,-2204 1848.17,-2179.91 1883.05,-2171.24 1915.8,-2169.3"/>
<polygon fill="blue" stroke="blue" points="1916.03,-2172.8 1925.88,-2168.91 1915.75,-2165.8 1916.03,-2172.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node129"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="1418.5,-3142 1077.5,-3142 1077.5,-3106 1418.5,-3106 1418.5,-3142"/>
<text text-anchor="middle" x="1248" y="-3120.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1418.8,-3133.42C1471.94,-3130.34 1529.36,-3120.49 1578,-3097 1627.44,-3073.13 1667.25,-3020.95 1688.25,-2988.91"/>
<polygon fill="blue" stroke="blue" points="1691.23,-2990.75 1693.67,-2980.44 1685.33,-2986.98 1691.23,-2990.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1418.7,-3130.16C1487.19,-3128.68 1555.39,-3120.77 1578,-3097 1646.42,-3025.07 1545.09,-2282 1606.5,-2204 1609.61,-2200.05 1613.24,-2196.64 1617.24,-2193.71"/>
<polygon fill="blue" stroke="blue" points="1619.27,-2196.57 1625.92,-2188.33 1615.58,-2190.62 1619.27,-2196.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1418.67,-3130.13C1487.15,-3128.64 1555.35,-3120.74 1578,-3097 1640.4,-3031.61 1558.87,-2360.82 1606.5,-2284 1614.33,-2271.38 1626.27,-2261.56 1639.17,-2254"/>
<polygon fill="blue" stroke="blue" points="1641.07,-2256.95 1648.2,-2249.12 1637.74,-2250.79 1641.07,-2256.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node130"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="1360,-2440 1136,-2440 1136,-2404 1360,-2404 1360,-2440"/>
<text text-anchor="middle" x="1248" y="-2418.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1360.42,-2427.58C1443.65,-2429.13 1547.98,-2424.65 1578,-2395 1625.96,-2347.63 1575.31,-2152.76 1606.5,-2093 1619.38,-2068.33 1642.99,-2047.99 1663.81,-2033.62"/>
<polygon fill="blue" stroke="blue" points="1665.84,-2036.47 1672.22,-2028.02 1661.96,-2030.65 1665.84,-2036.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1325.55,-2440.01C1399.97,-2452.57 1511.26,-2457.46 1578,-2395 1640.67,-2336.35 1549.58,-2268.24 1606.5,-2204 1609.61,-2200.49 1613.14,-2197.41 1616.95,-2194.72"/>
<polygon fill="blue" stroke="blue" points="1618.97,-2197.59 1625.72,-2189.43 1615.35,-2191.6 1618.97,-2197.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1334.45,-2440.01C1407.57,-2450.15 1511.3,-2451.26 1578,-2395 1616.93,-2362.16 1575.14,-2324.14 1606.5,-2284 1616.27,-2271.5 1629.84,-2261.56 1643.77,-2253.84"/>
<polygon fill="blue" stroke="blue" points="1645.68,-2256.79 1652.94,-2249.08 1642.46,-2250.58 1645.68,-2256.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node131"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1578,-2386 918,-2386 918,-2350 1578,-2350 1578,-2386"/>
<text text-anchor="middle" x="1248" y="-2364.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1323.56,-2386.06C1398.32,-2399.29 1511.6,-2405.27 1578,-2341 1617.86,-2302.42 1580.33,-2141.91 1606.5,-2093 1619.63,-2068.46 1643.25,-2048.12 1664.01,-2033.72"/>
<polygon fill="blue" stroke="blue" points="1666.03,-2036.58 1672.39,-2028.11 1662.13,-2030.76 1666.03,-2036.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.07,-2386.02C1403.84,-2397.29 1511.12,-2400.11 1578,-2341 1624.6,-2299.81 1563.95,-2249.36 1606.5,-2204 1609.64,-2200.65 1613.16,-2197.71 1616.94,-2195.11"/>
<polygon fill="blue" stroke="blue" points="1618.77,-2198.09 1625.59,-2189.99 1615.21,-2192.07 1618.77,-2198.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1563.76,-2349.8C1568.62,-2347.06 1573.37,-2344.13 1578,-2341 1601.46,-2325.14 1586.8,-2304.35 1606.5,-2284 1618.31,-2271.8 1633.55,-2261.74 1648.47,-2253.78"/>
<polygon fill="blue" stroke="blue" points="1650.35,-2256.75 1657.68,-2249.09 1647.18,-2250.51 1650.35,-2256.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node132"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="1469,-3574 1027,-3574 1027,-3538 1469,-3538 1469,-3574"/>
<text text-anchor="middle" x="1248" y="-3552.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1331.3,-3574.01C1404.88,-3584.94 1511.13,-3587.25 1578,-3529 1661.09,-3456.62 1694.5,-3094.69 1702.5,-2990.25"/>
<polygon fill="blue" stroke="blue" points="1706,-2990.39 1703.26,-2980.16 1699.02,-2989.87 1706,-2990.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1469.13,-3573.64C1602.56,-3579.23 1756.18,-3574.89 1805,-3531 1808.1,-3528.22 1970.22,-2449.28 1998.74,-2259.38"/>
<polygon fill="blue" stroke="blue" points="2002.22,-2259.74 2000.25,-2249.34 1995.3,-2258.7 2002.22,-2259.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1469.29,-3556.92C1594.81,-3543.94 1739.73,-3502.5 1805,-3387 1837.34,-3329.77 1781.73,-2253.48 1825,-2204 1847.19,-2178.63 1882.27,-2169.84 1915.45,-2168.17"/>
<polygon fill="blue" stroke="blue" points="1915.77,-2171.66 1925.67,-2167.87 1915.57,-2164.66 1915.77,-2171.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node133"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="1367.5,-3088 1128.5,-3088 1128.5,-3052 1367.5,-3052 1367.5,-3088"/>
<text text-anchor="middle" x="1248" y="-3066.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1367.51,-3074C1431.38,-3072.78 1510.67,-3065.74 1578,-3043 1614.47,-3030.68 1650.93,-3005.64 1675.28,-2986.65"/>
<polygon fill="blue" stroke="blue" points="1677.72,-2989.18 1683.36,-2980.21 1673.36,-2983.7 1677.72,-2989.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1367.76,-3076.19C1450.04,-3077.63 1549.68,-3072.71 1578,-3043 1642.36,-2975.48 1548.73,-2277.23 1606.5,-2204 1609.62,-2200.05 1613.25,-2196.65 1617.25,-2193.72"/>
<polygon fill="blue" stroke="blue" points="1619.28,-2196.58 1625.93,-2188.34 1615.59,-2190.63 1619.28,-2196.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1367.73,-3076.16C1449.99,-3077.58 1549.63,-3072.66 1578,-3043 1636.34,-2982.02 1561.94,-2355.67 1606.5,-2284 1614.38,-2271.32 1626.42,-2261.47 1639.39,-2253.89"/>
<polygon fill="blue" stroke="blue" points="1641.33,-2256.82 1648.48,-2249 1638.02,-2250.66 1641.33,-2256.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node134"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="1358,-3520 1138,-3520 1138,-3484 1358,-3484 1358,-3520"/>
<text text-anchor="middle" x="1248" y="-3498.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1333.5,-3520.01C1406.77,-3530.39 1511.24,-3531.85 1578,-3475 1616.11,-3442.54 1681.2,-3092.49 1699.55,-2990.02"/>
<polygon fill="blue" stroke="blue" points="1703.01,-2990.56 1701.32,-2980.1 1696.12,-2989.33 1703.01,-2990.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1358.17,-3507.86C1501.56,-3513.07 1742.47,-3512.4 1805,-3454 1850.68,-3411.33 1976.7,-2437.39 1999.46,-2258.95"/>
<polygon fill="blue" stroke="blue" points="2002.93,-2259.38 2000.72,-2249.02 1995.98,-2258.5 2002.93,-2259.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1358.18,-3508.77C1424.02,-3509.07 1508.34,-3502.62 1578,-3475 1585.5,-3472.03 1801.43,-3301.23 1805,-3294 1831.78,-3239.68 1785.1,-2249.56 1825,-2204 1847.21,-2178.64 1882.29,-2169.86 1915.47,-2168.18"/>
<polygon fill="blue" stroke="blue" points="1915.79,-2171.68 1925.68,-2167.88 1915.58,-2164.68 1915.79,-2171.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node135"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1348,-3034 1148,-3034 1148,-2998 1348,-2998 1348,-3034"/>
<text text-anchor="middle" x="1248" y="-3012.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1348.35,-3011.18C1413.83,-3007.18 1501.31,-3000.28 1578,-2989 1608.66,-2984.49 1643.02,-2977 1668.18,-2971.05"/>
<polygon fill="blue" stroke="blue" points="1669.12,-2974.42 1678.03,-2968.69 1667.49,-2967.62 1669.12,-2974.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1348.31,-3021.72C1433.55,-3024.23 1547.37,-3021.06 1578,-2989 1638.29,-2925.89 1552.36,-2272.46 1606.5,-2204 1609.62,-2200.05 1613.26,-2196.65 1617.27,-2193.72"/>
<polygon fill="blue" stroke="blue" points="1619.29,-2196.59 1625.95,-2188.35 1615.61,-2190.64 1619.29,-2196.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1348.28,-3021.69C1433.5,-3024.18 1547.3,-3021 1578,-2989 1632.27,-2932.43 1565.01,-2350.52 1606.5,-2284 1614.4,-2271.33 1626.45,-2261.49 1639.42,-2253.91"/>
<polygon fill="blue" stroke="blue" points="1641.36,-2256.84 1648.51,-2249.02 1638.05,-2250.68 1641.36,-2256.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node136"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="1396.5,-2980 1099.5,-2980 1099.5,-2944 1396.5,-2944 1396.5,-2980"/>
<text text-anchor="middle" x="1248" y="-2958.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1396.57,-2962C1492.47,-2962 1610.09,-2962 1668.31,-2962"/>
<polygon fill="blue" stroke="blue" points="1668.47,-2965.5 1678.47,-2962 1668.47,-2958.5 1668.47,-2965.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1396.7,-2968.36C1471.98,-2968.1 1552.87,-2961.23 1578,-2935 1634.23,-2876.3 1555.99,-2267.69 1606.5,-2204 1609.63,-2200.06 1613.27,-2196.66 1617.28,-2193.73"/>
<polygon fill="blue" stroke="blue" points="1619.3,-2196.6 1625.97,-2188.36 1615.62,-2190.64 1619.3,-2196.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1396.65,-2968.31C1471.91,-2968.04 1552.81,-2961.17 1578,-2935 1628.21,-2882.84 1568.08,-2345.37 1606.5,-2284 1614.42,-2271.35 1626.48,-2261.5 1639.45,-2253.93"/>
<polygon fill="blue" stroke="blue" points="1641.39,-2256.86 1648.54,-2249.04 1638.08,-2250.69 1641.39,-2256.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node137"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="1349.5,-2926 1146.5,-2926 1146.5,-2890 1349.5,-2890 1349.5,-2926"/>
<text text-anchor="middle" x="1248" y="-2904.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1349.81,-2912.91C1415.12,-2916.92 1501.88,-2923.8 1578,-2935 1608.66,-2939.51 1643.02,-2947 1668.18,-2952.95"/>
<polygon fill="blue" stroke="blue" points="1667.49,-2956.38 1678.03,-2955.31 1669.12,-2949.58 1667.49,-2956.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1349.51,-2913.71C1434.58,-2916.13 1547.42,-2912.82 1578,-2881 1630.17,-2826.71 1559.63,-2262.92 1606.5,-2204 1609.63,-2200.06 1613.28,-2196.67 1617.29,-2193.75"/>
<polygon fill="blue" stroke="blue" points="1619.32,-2196.61 1625.99,-2188.38 1615.64,-2190.65 1619.32,-2196.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1349.88,-2913.68C1434.87,-2916.05 1547.38,-2912.68 1578,-2881 1624.15,-2833.25 1571.15,-2340.22 1606.5,-2284 1614.45,-2271.36 1626.51,-2261.53 1639.49,-2253.95"/>
<polygon fill="blue" stroke="blue" points="1641.43,-2256.88 1648.58,-2249.06 1638.11,-2250.72 1641.43,-2256.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node138"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="1392,-3466 1104,-3466 1104,-3430 1392,-3430 1392,-3466"/>
<text text-anchor="middle" x="1248" y="-3444.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1392.42,-3454.53C1469,-3454.59 1552.61,-3447.97 1578,-3421 1628.58,-3367.27 1574.75,-2159.62 1606.5,-2093 1618.39,-2068.06 1641.73,-2047.81 1662.65,-2033.56"/>
<polygon fill="blue" stroke="blue" points="1664.68,-2036.42 1671.13,-2028.02 1660.84,-2030.57 1664.68,-2036.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1392,-3448.17C1537.62,-3445.07 1749.65,-3430.42 1805,-3373 1965.4,-3206.6 1997.37,-2419.26 2002.24,-2259.37"/>
<polygon fill="blue" stroke="blue" points="2005.74,-2259.46 2002.53,-2249.36 1998.74,-2259.25 2005.74,-2259.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1392.1,-3464.26C1453.47,-3464.47 1523.44,-3455.09 1578,-3421 1599.04,-3407.85 1590.93,-3392.32 1606.5,-3373 1682.16,-3279.09 1755.78,-3298.09 1805,-3188 1827.32,-3138.08 1788.93,-2245.1 1825,-2204 1847.23,-2178.66 1882.32,-2169.88 1915.49,-2168.21"/>
<polygon fill="blue" stroke="blue" points="1915.82,-2171.7 1925.71,-2167.9 1915.61,-2164.7 1915.82,-2171.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node139"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="1341.5,-3250 1154.5,-3250 1154.5,-3214 1341.5,-3214 1341.5,-3250"/>
<text text-anchor="middle" x="1248" y="-3228.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1335.44,-3250.05C1408.44,-3259.98 1511.44,-3260.76 1578,-3205 1616.05,-3173.12 1585.22,-3141.85 1606.5,-3097 1626.1,-3055.68 1658.81,-3013.97 1681,-2988.07"/>
<polygon fill="blue" stroke="blue" points="1683.88,-2990.08 1687.8,-2980.24 1678.6,-2985.49 1683.88,-2990.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node140"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="1378.5,-2332 1117.5,-2332 1117.5,-2296 1378.5,-2296 1378.5,-2332"/>
<text text-anchor="middle" x="1248" y="-2310.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1330.96,-2332.02C1405.35,-2343.14 1513.05,-2345.33 1578,-2284 1640.4,-2225.07 1564.74,-2167.99 1606.5,-2093 1620.04,-2068.69 1643.67,-2048.36 1664.33,-2033.9"/>
<polygon fill="blue" stroke="blue" points="1666.35,-2036.76 1672.67,-2028.26 1662.43,-2030.96 1666.35,-2036.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1358.63,-2332.01C1428.35,-2337.23 1516.71,-2331.55 1578,-2284 1607.82,-2260.87 1578.85,-2229.69 1606.5,-2204 1609.7,-2201.03 1613.2,-2198.38 1616.9,-2196.01"/>
<polygon fill="blue" stroke="blue" points="1618.86,-2198.93 1625.89,-2191.01 1615.45,-2192.81 1618.86,-2198.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1378.64,-2311.31C1439.83,-2307.73 1513.44,-2300.06 1578,-2284 1606.35,-2276.95 1636.59,-2264.48 1660.39,-2253.4"/>
<polygon fill="blue" stroke="blue" points="1661.97,-2256.53 1669.51,-2249.08 1658.97,-2250.2 1661.97,-2256.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node141"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="1328,-3412 1168,-3412 1168,-3376 1328,-3376 1328,-3412"/>
<text text-anchor="middle" x="1248" y="-3390.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.21,-3411.28C1401.69,-3422.36 1509.69,-3425.34 1578,-3367 1618.7,-3332.24 1591.53,-3301.38 1606.5,-3250 1634.69,-3153.22 1675.32,-3040.68 1694.17,-2989.66"/>
<polygon fill="blue" stroke="blue" points="1697.55,-2990.61 1697.74,-2980.02 1690.98,-2988.18 1697.55,-2990.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.1,-3393.94C1395.37,-3392.36 1494.12,-3386.44 1578,-3367 1683.57,-3342.53 1735.85,-3361.44 1805,-3278 1939.74,-3115.42 1991.62,-2410.21 2001.28,-2259.44"/>
<polygon fill="blue" stroke="blue" points="2004.79,-2259.38 2001.92,-2249.18 1997.8,-2258.94 2004.79,-2259.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.34,-3410.32C1401.14,-3420.48 1508,-3422.62 1578,-3367 1610.52,-3341.16 1585.25,-3313.68 1606.5,-3278 1671.72,-3168.49 1756.1,-3188.71 1805,-3071 1823.48,-3026.51 1793.17,-2240.17 1825,-2204 1847.27,-2178.7 1882.36,-2169.92 1915.53,-2168.24"/>
<polygon fill="blue" stroke="blue" points="1915.85,-2171.73 1925.74,-2167.93 1915.64,-2164.73 1915.85,-2171.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node142"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1467.5,-3358 1028.5,-3358 1028.5,-3322 1467.5,-3322 1467.5,-3358"/>
<text text-anchor="middle" x="1248" y="-3336.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1467.9,-3343.91C1517.67,-3340.01 1560.94,-3331.08 1578,-3313 1624.52,-3263.68 1577.27,-2154.17 1606.5,-2093 1618.41,-2068.07 1641.76,-2047.83 1662.67,-2033.57"/>
<polygon fill="blue" stroke="blue" points="1664.69,-2036.43 1671.14,-2028.03 1660.86,-2030.58 1664.69,-2036.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1467.53,-3340.8C1505.31,-3335.71 1543.5,-3327.05 1578,-3313 1638.66,-3288.29 1770.85,-3180.89 1805,-3125 1988.49,-2824.73 2002.7,-2375.31 2003.18,-2259.18"/>
<polygon fill="blue" stroke="blue" points="2006.68,-2259.01 2003.19,-2249 1999.68,-2259 2006.68,-2259.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1325.87,-3358.03C1400.26,-3370.53 1511.29,-3375.29 1578,-3313 1639.77,-3255.33 1561.59,-3196.59 1606.5,-3125 1663.33,-3034.41 1753.94,-3082.96 1805,-2989 1825.83,-2950.67 1796.14,-2236.72 1825,-2204 1847.3,-2178.72 1882.4,-2169.95 1915.56,-2168.26"/>
<polygon fill="blue" stroke="blue" points="1915.88,-2171.75 1925.77,-2167.96 1915.67,-2164.76 1915.88,-2171.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1785.18,-2177C1825.36,-2177 1874.35,-2177 1915.69,-2177"/>
<polygon fill="blue" stroke="blue" points="1915.75,-2180.5 1925.75,-2177 1915.75,-2173.5 1915.75,-2180.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="2321.5,-2195 2267.5,-2195 2267.5,-2159 2321.5,-2159 2321.5,-2195"/>
<text text-anchor="middle" x="2294.5" y="-2173.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2078.82,-2220.37C2108.75,-2215.77 2143.6,-2210.06 2175,-2204 2202.79,-2198.63 2234,-2191.48 2257.41,-2185.88"/>
<polygon fill="blue" stroke="blue" points="2258.35,-2189.25 2267.25,-2183.51 2256.71,-2182.45 2258.35,-2189.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1781.7,-2231C1823.63,-2231 1875.96,-2231 1919.2,-2231"/>
<polygon fill="blue" stroke="blue" points="1919.42,-2234.5 1929.42,-2231 1919.42,-2227.5 1919.42,-2234.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1792.56,-2127.24C1949.98,-2133.65 2277.39,-2140.31 2378,-2091 2424.77,-2068.08 2459.96,-2016.41 2478.3,-1984.34"/>
<polygon fill="blue" stroke="blue" points="2481.43,-1985.91 2483.23,-1975.47 2475.31,-1982.51 2481.43,-1985.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2082.31,-2177C2139.06,-2177 2213.56,-2177 2257.21,-2177"/>
<polygon fill="blue" stroke="blue" points="2257.36,-2180.5 2267.36,-2177 2257.36,-2173.5 2257.36,-2180.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2321.78,-2167.06C2339.13,-2159.57 2361.61,-2148.03 2378,-2133 2425.61,-2089.36 2462.16,-2021.83 2480.16,-1984.37"/>
<polygon fill="blue" stroke="blue" points="2483.43,-1985.63 2484.53,-1975.09 2477.1,-1982.65 2483.43,-1985.63"/>
</g>
</g>
</svg>
