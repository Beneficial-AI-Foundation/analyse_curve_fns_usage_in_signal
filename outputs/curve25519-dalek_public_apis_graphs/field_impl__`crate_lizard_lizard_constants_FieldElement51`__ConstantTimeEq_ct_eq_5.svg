<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="2963pt" height="4950pt"
 viewBox="0.00 0.00 2963.00 4950.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 4946)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-4946 2959,-4946 2959,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2463.5,-4668 2463.5,-4743 2726.5,-4743 2726.5,-4668 2463.5,-4668"/>
<text text-anchor="middle" x="2595" y="-4727.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2647,-2727 2647,-2802 2947,-2802 2947,-2727 2647,-2727"/>
<text text-anchor="middle" x="2797" y="-2786.8" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2456.5,-977 2456.5,-1052 2587.5,-1052 2587.5,-977 2456.5,-977"/>
<text text-anchor="middle" x="2522" y="-1036.8" font-family="Helvetica,sans-Serif" font-size="14.00">jacobi_quartic.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1792,-1060 1792,-1297 2627,-1297 2627,-1060 1792,-1060"/>
<text text-anchor="middle" x="2209.5" y="-1281.8" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_ristretto.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2194,-4859 2194,-4934 2316,-4934 2316,-4859 2194,-4859"/>
<text text-anchor="middle" x="2255" y="-4918.8" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1847.5,-2773 1847.5,-2956 2353,-2956 2353,-2773 1847.5,-2773"/>
<text text-anchor="middle" x="2100.25" y="-2940.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1878,-4435 1878,-4510 1988,-4510 1988,-4435 1878,-4435"/>
<text text-anchor="middle" x="1933" y="-4494.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="739.5,-3279 739.5,-3462 952.5,-3462 952.5,-3279 739.5,-3279"/>
<text text-anchor="middle" x="846" y="-3446.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="2202.5,-4531 2202.5,-4606 2306.5,-4606 2306.5,-4531 2202.5,-4531"/>
<text text-anchor="middle" x="2254.5" y="-4590.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="1861,-4859 1861,-4934 2005,-4934 2005,-4859 1861,-4859"/>
<text text-anchor="middle" x="1933" y="-4918.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="1554.5,-4311 1554.5,-4386 1728.5,-4386 1728.5,-4311 1554.5,-4311"/>
<text text-anchor="middle" x="1641.5" y="-4370.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="1529,-4477 1529,-4606 1754,-4606 1754,-4477 1529,-4477"/>
<text text-anchor="middle" x="1641.5" y="-4590.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="1542.5,-4614 1542.5,-4851 2397,-4851 2397,-4614 1542.5,-4614"/>
<text text-anchor="middle" x="1969.75" y="-4835.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="0,-3194 0,-3269 226,-3269 226,-3194 0,-3194"/>
<text text-anchor="middle" x="113" y="-3253.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1606.5,-4394 1606.5,-4469 1676.5,-4469 1676.5,-4394 1606.5,-4394"/>
<text text-anchor="middle" x="1641.5" y="-4453.8" font-family="Helvetica,sans-Serif" font-size="14.00">env.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="791,-3746 791,-3875 901,-3875 901,-3746 791,-3746"/>
<text text-anchor="middle" x="846" y="-3859.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="1132,-3151 1132,-3280 1276,-3280 1276,-3151 1132,-3151"/>
<text text-anchor="middle" x="1204" y="-3264.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="1103.5,-2907 1103.5,-3002 1698.5,-3002 1698.5,-2907 1103.5,-2907"/>
<text text-anchor="middle" x="1401" y="-2986.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="766.5,-3883 766.5,-4180 1706.5,-4180 1706.5,-3883 766.5,-3883"/>
<text text-anchor="middle" x="1236.5" y="-4164.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="341,-3133 341,-3262 918,-3262 918,-3133 341,-3133"/>
<text text-anchor="middle" x="629.5" y="-3246.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="1352,-452 1352,-527 1496,-527 1496,-452 1352,-452"/>
<text text-anchor="middle" x="1424" y="-511.8" font-family="Helvetica,sans-Serif" font-size="14.00">constants.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="692.5,-3470 692.5,-3653 1261,-3653 1261,-3470 692.5,-3470"/>
<text text-anchor="middle" x="976.75" y="-3637.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1124,-2172 1124,-2247 1284,-2247 1284,-2172 1124,-2172"/>
<text text-anchor="middle" x="1204" y="-2231.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1367.5,-2241 1367.5,-2316 1480.5,-2316 1480.5,-2241 1367.5,-2241"/>
<text text-anchor="middle" x="1424" y="-2300.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1355.5,-2626 1355.5,-2755 1492.5,-2755 1492.5,-2626 1355.5,-2626"/>
<text text-anchor="middle" x="1424" y="-2739.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="1098,-1819 1098,-2164 1754,-2164 1754,-1819 1098,-1819"/>
<text text-anchor="middle" x="1426" y="-2148.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1168,-2489 1168,-2618 1509,-2618 1509,-2489 1168,-2489"/>
<text text-anchor="middle" x="1338.5" y="-2602.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="1168,-2626 1168,-2755 1240,-2755 1240,-2626 1168,-2626"/>
<text text-anchor="middle" x="1204" y="-2739.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="1161.5,-2352 1161.5,-2481 1509,-2481 1509,-2352 1161.5,-2352"/>
<text text-anchor="middle" x="1335.25" y="-2465.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="1593,-2342 1593,-2417 1690,-2417 1690,-2342 1593,-2342"/>
<text text-anchor="middle" x="1641.5" y="-2401.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="745.5,-1354 745.5,-1483 946.5,-1483 946.5,-1354 745.5,-1354"/>
<text text-anchor="middle" x="846" y="-1467.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="1354,-369 1354,-444 1495,-444 1495,-369 1354,-369"/>
<text text-anchor="middle" x="1424.5" y="-428.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="774,-1133 774,-1316 918,-1316 918,-1133 774,-1133"/>
<text text-anchor="middle" x="846" y="-1300.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="803.5,-1491 803.5,-1674 1239,-1674 1239,-1491 803.5,-1491"/>
<text text-anchor="middle" x="1021.25" y="-1658.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="789,-928 789,-1057 903,-1057 903,-928 789,-928"/>
<text text-anchor="middle" x="846" y="-1041.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="740,-546 740,-783 952,-783 952,-546 740,-546"/>
<text text-anchor="middle" x="846" y="-767.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="1096.5,-1682 1096.5,-1811 1311.5,-1811 1311.5,-1682 1096.5,-1682"/>
<text text-anchor="middle" x="1204" y="-1795.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="771,-175 771,-250 921,-250 921,-175 771,-175"/>
<text text-anchor="middle" x="846" y="-234.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="246,-2726 246,-2855 595,-2855 595,-2726 246,-2726"/>
<text text-anchor="middle" x="420.5" y="-2839.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="1537.5,-658 1537.5,-787 1745.5,-787 1745.5,-658 1537.5,-658"/>
<text text-anchor="middle" x="1641.5" y="-771.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="352,-1097 352,-1280 489,-1280 489,-1097 352,-1097"/>
<text text-anchor="middle" x="420.5" y="-1264.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="744.5,-409 744.5,-538 947.5,-538 947.5,-409 744.5,-409"/>
<text text-anchor="middle" x="846" y="-522.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="725,-258 725,-333 968,-333 968,-258 725,-258"/>
<text text-anchor="middle" x="846.5" y="-317.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="735.5,-8 735.5,-137 1251.5,-137 1251.5,-8 735.5,-8"/>
<text text-anchor="middle" x="993.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="1169,-535 1169,-610 1467.5,-610 1467.5,-535 1169,-535"/>
<text text-anchor="middle" x="1318.25" y="-594.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_struct.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="807,-2564 807,-3125 885,-3125 885,-2564 807,-2564"/>
<text text-anchor="middle" x="846" y="-3109.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="762,-791 762,-920 1251.5,-920 1251.5,-791 762,-791"/>
<text text-anchor="middle" x="1006.75" y="-904.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="1133.5,-1224 1133.5,-1299 1467.5,-1299 1467.5,-1224 1133.5,-1224"/>
<text text-anchor="middle" x="1300.5" y="-1283.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_struct.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="615,-2211 615,-2556 1077,-2556 1077,-2211 615,-2211"/>
<text text-anchor="middle" x="846" y="-2540.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="1566,-218 1566,-293 1717,-293 1717,-218 1566,-218"/>
<text text-anchor="middle" x="1641.5" y="-277.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_1( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;repr: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;) &#45;&gt; (Choice, FieldElement, FieldElement, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = FieldElement::from_bytes(repr.as_bytes()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = Fi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2718.5,-4712 2656.5,-4712 2656.5,-4676 2718.5,-4676 2718.5,-4712"/>
<text text-anchor="middle" x="2687.5" y="-4690.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn sqrt_ratio_i(u: &amp;FieldElement, v: &amp;FieldElement) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Using the same trick as in ed25519 decoding, we merge the &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// inversion, the square roo...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2849,-2771 2756,-2771 2756,-2735 2849,-2735 2849,-2771"/>
<text text-anchor="middle" x="2802.5" y="-2749.3" font-family="Helvetica,sans-Serif" font-size="14.00">sqrt_ratio_i</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2689.56,-4675.72C2700.17,-4493.48 2786.8,-3005.44 2799.86,-2781.24"/>
<polygon fill="gray" stroke="gray" points="2803.35,-2781.44 2800.44,-2771.26 2796.36,-2781.03 2803.35,-2781.44"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (is_valid_y_coord, X, Y, Z) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_valid_y_coord.into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(decompress::step_2(sel...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2572.5,-4712 2471.5,-4712 2471.5,-4676 2572.5,-4676 2572.5,-4712"/>
<text text-anchor="middle" x="2522" y="-4690.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2572.94,-4694C2596.45,-4694 2624.12,-4694 2646.26,-4694"/>
<polygon fill="gray" stroke="gray" points="2646.33,-4697.5 2656.33,-4694 2646.33,-4690.5 2646.33,-4697.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;fn ct_eq(&amp;self, other: &amp;FieldElement) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_bytes().ct_eq(&amp;other.as_bytes()) &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="2939,-2771 2885,-2771 2885,-2735 2939,-2735 2939,-2771"/>
<text text-anchor="middle" x="2912" y="-2749.3" font-family="Helvetica,sans-Serif" font-size="14.00">ct_eq</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2849.09,-2753C2857.7,-2753 2866.6,-2753 2874.87,-2753"/>
<polygon fill="gray" stroke="gray" points="2874.94,-2756.5 2884.94,-2753 2874.94,-2749.5 2874.94,-2756.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn invsqrt(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FieldElement::sqrt_ratio_i(&amp;FieldElement::ONE, self) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2720,-2771 2655,-2771 2655,-2735 2720,-2735 2720,-2771"/>
<text text-anchor="middle" x="2687.5" y="-2749.3" font-family="Helvetica,sans-Serif" font-size="14.00">invsqrt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2720.28,-2753C2728.16,-2753 2736.84,-2753 2745.51,-2753"/>
<polygon fill="gray" stroke="gray" points="2745.63,-2756.5 2755.63,-2753 2745.63,-2749.5 2745.63,-2756.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_inv(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut out = FieldElement::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Special case: s = 0. &#160;If s is zero, either t = 1 or t = &#45;1. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// If t=1, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2572.5,-1021 2471.5,-1021 2471.5,-985 2572.5,-985 2572.5,-1021"/>
<text text-anchor="middle" x="2522" y="-999.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_inv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`][ConstantTimeEq]ct_eq().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2572.77,-1017.4C2592.57,-1025.6 2613.76,-1037.94 2627,-1056 2833.94,-1338.24 2899.98,-2525.55 2909.69,-2724.62"/>
<polygon fill="gray" stroke="gray" points="2906.2,-2725.02 2910.18,-2734.84 2913.19,-2724.68 2906.2,-2725.02"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2572.68,-1015.99C2593.11,-1024.02 2614.81,-1036.62 2627,-1056 2652.01,-1095.75 2645.36,-1854.07 2647,-1901 2658.33,-2224.7 2679.14,-2617.26 2684.95,-2724.68"/>
<polygon fill="gray" stroke="gray" points="2681.46,-2724.93 2685.5,-2734.72 2688.45,-2724.55 2681.46,-2724.93"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn elligator_ristretto_flavor_inverse(&amp;self) &#45;&gt; (u8, [FieldElement; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Elligator2 computes a Point from a FieldElement in two steps: first &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// it computes a (s,t) on the J...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2374,-1131 2135,-1131 2135,-1095 2374,-1095 2374,-1131"/>
<text text-anchor="middle" x="2254.5" y="-1109.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor_inverse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2299.04,-1094.96C2345.34,-1075.78 2418.59,-1045.43 2468.16,-1024.89"/>
<polygon fill="gray" stroke="gray" points="2469.53,-1028.11 2477.43,-1021.05 2466.85,-1021.65 2469.53,-1028.11"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn to_jacobi_quartic_ristretto(self) &#45;&gt; [JacobiPoint; 4] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x2 = self.0.X.square(); // X^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y2 = self.0.Y.square(); // Y^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y4 = y2.square(); // Y^4 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let z2...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2619,-1199 2425,-1199 2425,-1163 2619,-1163 2619,-1199"/>
<text text-anchor="middle" x="2522" y="-1177.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_jacobi_quartic_ristretto</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2325.95,-1131.04C2361.2,-1140.07 2404.02,-1151.04 2440.55,-1160.4"/>
<polygon fill="gray" stroke="gray" points="2440.12,-1163.9 2450.68,-1162.99 2441.86,-1157.12 2440.12,-1163.9"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_decode&lt;D: Digest&gt;(&amp;self) &#45;&gt; Option&lt;[u8; 16]&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut result: [u8; 16] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1988.5,-1158 1877.5,-1158 1877.5,-1122 1988.5,-1122 1988.5,-1158"/>
<text text-anchor="middle" x="1933" y="-1136.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_decode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1988.56,-1135.39C2026,-1132.23 2077.31,-1127.89 2124.82,-1123.87"/>
<polygon fill="gray" stroke="gray" points="2125.22,-1127.35 2134.89,-1123.02 2124.63,-1120.38 2125.22,-1127.35"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2524.89,-1199.2C2541.55,-1359.33 2662.98,-2526.88 2683.55,-2724.59"/>
<polygon fill="gray" stroke="gray" points="2680.09,-2725.17 2684.6,-2734.75 2687.05,-2724.45 2680.09,-2725.17"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_encode&lt;D: Digest&gt;(data: &amp;[u8; 16]) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut fe_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let digest...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1988.5,-1212 1877.5,-1212 1877.5,-1176 1988.5,-1176 1988.5,-1212"/>
<text text-anchor="middle" x="1933" y="-1190.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_encode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_ristretto_flavor(r_0: &amp;FieldElement) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i = &amp;constants::SQRT_M1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let d = &amp;constants::EDWARDS_D; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one_minus_d_sq = &amp;constants...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2345,-2817 2164,-2817 2164,-2781 2345,-2781 2345,-2817"/>
<text text-anchor="middle" x="2254.5" y="-2795.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1988.73,-1188.88C2021.06,-1189.06 2060.2,-1195.44 2084,-1221 2194.23,-1339.36 2244.85,-2568.12 2252.47,-2770.77"/>
<polygon fill="gray" stroke="gray" points="2248.98,-2771.04 2252.85,-2780.91 2255.98,-2770.78 2248.98,-2771.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes_single_elligator(bytes: &amp;[u8; 32]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::elligator_ristretto_flavor(&amp;FieldElement::from_bytes(bytes)) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2066,-1266 1800,-1266 1800,-1230 2066,-1230 2066,-1266"/>
<text text-anchor="middle" x="1933" y="-1244.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1937.75,-1266.23C1970.5,-1425.18 2207.34,-2574.92 2247.67,-2770.69"/>
<polygon fill="gray" stroke="gray" points="2244.3,-2771.67 2249.74,-2780.76 2251.15,-2770.26 2244.3,-2771.67"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn decode_253_bits(&amp;self) &#45;&gt; (u8, [[u8; 32]; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut ret = [[0u8; 32]; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (mask, fes) = self.elligator_ristretto_flavor_inverse(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1999.5,-1104 1866.5,-1104 1866.5,-1068 1999.5,-1068 1999.5,-1104"/>
<text text-anchor="middle" x="1933" y="-1082.3" font-family="Helvetica,sans-Serif" font-size="14.00">decode_253_bits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1999.81,-1091.56C2035.84,-1094.61 2081.74,-1098.49 2124.57,-1102.1"/>
<polygon fill="gray" stroke="gray" points="2124.55,-1105.62 2134.81,-1102.97 2125.14,-1098.64 2124.55,-1105.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub fn to_edwards(&amp;self, sign: u8) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// To decompress the Montgomery u coordinate to an &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// `EdwardsPoint`, we apply the birational map to obtain the &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2302,-4903 2207,-4903 2207,-4867 2302,-4867 2302,-4903"/>
<text text-anchor="middle" x="2254.5" y="-4881.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_edwards</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2302.2,-4883.23C2331.37,-4880.25 2368.63,-4872.86 2397,-4855 2449.76,-4821.79 2488.77,-4757.72 2507.87,-4721.21"/>
<polygon fill="gray" stroke="gray" points="2511.08,-4722.62 2512.51,-4712.13 2504.84,-4719.44 2511.08,-4722.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2345.42,-2803.44C2440.91,-2806.28 2595.78,-2805.54 2726.5,-2780 2733.78,-2778.58 2741.31,-2776.57 2748.65,-2774.27"/>
<polygon fill="gray" stroke="gray" points="2750.12,-2777.47 2758.51,-2771.01 2747.92,-2770.83 2750.12,-2777.47"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_2(s: FieldElement) &#45;&gt; (Choice, Choice, Choice, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Step 2. &#160;Compute (X:Y:Z:T). &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ss = s.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2285.5,-2871 2223.5,-2871 2223.5,-2835 2285.5,-2835 2285.5,-2871"/>
<text text-anchor="middle" x="2254.5" y="-2849.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2285.69,-2847.77C2314.41,-2842.66 2358.79,-2834.46 2397,-2826 2485.86,-2806.34 2589,-2779.31 2645.04,-2764.27"/>
<polygon fill="gray" stroke="gray" points="2646.2,-2767.58 2654.94,-2761.6 2644.38,-2760.82 2646.2,-2767.58"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes(bytes: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This follows the one&#45;way map construction from the Ristretto RFC: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://datatracker.ietf.org/doc/html/draft&#45;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2010.5,-2871 1855.5,-2871 1855.5,-2835 2010.5,-2835 2010.5,-2871"/>
<text text-anchor="middle" x="1933" y="-2849.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2010.53,-2840.07C2053.44,-2832.81 2107.47,-2823.68 2153.67,-2815.87"/>
<polygon fill="gray" stroke="gray" points="2154.43,-2819.29 2163.71,-2814.18 2153.27,-2812.39 2154.43,-2819.29"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!s_encoding_is_canonical | s_is_negative).into...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1983.5,-2817 1882.5,-2817 1882.5,-2781 1983.5,-2781 1983.5,-2817"/>
<text text-anchor="middle" x="1933" y="-2795.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1983.57,-2807.38C2046.73,-2818.05 2154.7,-2836.3 2213.12,-2846.17"/>
<polygon fill="gray" stroke="gray" points="2212.64,-2849.64 2223.08,-2847.86 2213.8,-2842.74 2212.64,-2849.64"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn compress(&amp;self) &#45;&gt; CompressedRistretto { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut X = self.0.X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut Y = self.0.Y; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = &amp;self.0.Z; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let T = &amp;self.0.T; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let u1 = &amp;(Z + &amp;Y) * &amp;(Z ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1974.5,-2925 1891.5,-2925 1891.5,-2889 1974.5,-2889 1974.5,-2925"/>
<text text-anchor="middle" x="1933" y="-2903.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1974.65,-2907.95C2055.72,-2909.12 2242.94,-2908.16 2397,-2880 2502.37,-2860.74 2534.3,-2861.66 2627,-2808 2640.52,-2800.17 2653.51,-2788.79 2663.88,-2778.4"/>
<polygon fill="gray" stroke="gray" points="2666.51,-2780.71 2670.94,-2771.08 2661.48,-2775.85 2666.51,-2780.71"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; PUBLIC_KEY_LENGTH]) &#45;&gt; Result&lt;VerifyingKey, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed = CompressedEdwardsY(*bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let point = compressed &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decomp...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1980,-4479 1886,-4479 1886,-4443 1980,-4443 1980,-4479"/>
<text text-anchor="middle" x="1933" y="-4457.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1980.2,-4456.44C2068.07,-4450.03 2262.51,-4446.96 2397,-4527 2452.41,-4559.97 2490.84,-4628.19 2509.03,-4666.44"/>
<polygon fill="gray" stroke="gray" points="2506.05,-4668.33 2513.42,-4675.94 2512.4,-4665.39 2506.05,-4668.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node20"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="910.5,-3431 781.5,-3431 781.5,-3395 910.5,-3395 910.5,-3431"/>
<text text-anchor="middle" x="846" y="-3409.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="1231,-3568 1177,-3568 1177,-3532 1231,-3532 1231,-3568"/>
<text text-anchor="middle" x="1204" y="-3546.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.7,-3411.63C961.66,-3413.94 1031.81,-3425.25 1077,-3466 1096.88,-3483.93 1076.81,-3504.85 1096.5,-3523 1115.47,-3540.49 1144.13,-3547.03 1166.95,-3549.32"/>
<polygon fill="blue" stroke="blue" points="1166.72,-3552.81 1176.96,-3550.09 1167.26,-3545.83 1166.72,-3552.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node21"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="910.5,-3377 781.5,-3377 781.5,-3341 910.5,-3341 910.5,-3377"/>
<text text-anchor="middle" x="846" y="-3355.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;pub fn hash(&amp;self) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*Self::hash_from_scalars(&amp;self.scalars).compress().as_bytes() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1231,-3514 1177,-3514 1177,-3478 1231,-3478 1231,-3514"/>
<text text-anchor="middle" x="1204" y="-3492.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.63,-3348.45C961.72,-3343.79 1032.09,-3346.51 1077,-3386 1103.83,-3409.6 1071.83,-3438.15 1096.5,-3464 1114.65,-3483.02 1143.61,-3490.86 1166.76,-3494.03"/>
<polygon fill="blue" stroke="blue" points="1166.59,-3497.53 1176.92,-3495.18 1167.38,-3490.58 1166.59,-3497.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node22"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="944.5,-3323 747.5,-3323 747.5,-3287 944.5,-3287 944.5,-3323"/>
<text text-anchor="middle" x="846" y="-3301.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M944.61,-3291.29C990.56,-3290.5 1042.67,-3298.68 1077,-3332 1119.55,-3373.3 1057.72,-3419.13 1096.5,-3464 1113.88,-3484.1 1143.35,-3491.84 1166.89,-3494.7"/>
<polygon fill="blue" stroke="blue" points="1166.61,-3498.18 1176.9,-3495.67 1167.28,-3491.22 1166.61,-3498.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node23"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2281.5,-4575 2227.5,-4575 2227.5,-4539 2281.5,-4539 2281.5,-4575"/>
<text text-anchor="middle" x="2254.5" y="-4553.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M2281.59,-4564.72C2310.59,-4573.76 2358.43,-4590.07 2397,-4610 2430.27,-4627.19 2465.35,-4651.62 2489.68,-4669.71"/>
<polygon fill="blue" stroke="blue" points="2487.71,-4672.61 2497.81,-4675.82 2491.92,-4667.02 2487.71,-4672.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="1997,-4903 1869,-4903 1869,-4867 1997,-4867 1997,-4903"/>
<text text-anchor="middle" x="1933" y="-4881.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="blue" d="M1997.12,-4885C2055.16,-4885 2140.45,-4885 2196.48,-4885"/>
<polygon fill="blue" stroke="blue" points="2196.58,-4888.5 2206.58,-4885 2196.58,-4881.5 2196.58,-4888.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node25"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1720.5,-4355 1562.5,-4355 1562.5,-4319 1720.5,-4319 1720.5,-4355"/>
<text text-anchor="middle" x="1641.5" y="-4333.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1684.6,-4355.03C1736.48,-4377.25 1824.62,-4415.01 1880.49,-4438.94"/>
<polygon fill="blue" stroke="blue" points="1879.28,-4442.23 1889.85,-4442.95 1882.04,-4435.79 1879.28,-4442.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn try_from(public_key: [u8; 32]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match CompressedEdwardsY(public_key).decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Error::InvalidCurvePoint), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(pt) if pt.is_sma...">
<polygon fill="white" stroke="black" points="1970.5,-4766 1895.5,-4766 1895.5,-4730 1970.5,-4730 1970.5,-4766"/>
<text text-anchor="middle" x="1933" y="-4744.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1708.78,-4355.08C1726.16,-4363.01 1743.08,-4374.23 1754,-4390 1796.03,-4450.68 1732.3,-4666.42 1782,-4721 1807.51,-4749.02 1851.41,-4754.14 1885.15,-4753.21"/>
<polygon fill="blue" stroke="blue" points="1885.43,-4756.7 1895.26,-4752.75 1885.11,-4749.71 1885.43,-4756.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="1746,-4521 1537,-4521 1537,-4485 1746,-4485 1746,-4521"/>
<text text-anchor="middle" x="1641.5" y="-4499.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1746.2,-4487.96C1789.95,-4481.61 1839.15,-4474.47 1875.93,-4469.13"/>
<polygon fill="blue" stroke="blue" points="1876.56,-4472.58 1885.96,-4467.68 1875.56,-4465.65 1876.56,-4472.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1744.27,-4521.32C1747.78,-4523.88 1751.05,-4526.76 1754,-4530 1811.81,-4593.39 1722.33,-4659.35 1782,-4721 1808.27,-4748.14 1851.87,-4753.41 1885.32,-4752.76"/>
<polygon fill="blue" stroke="blue" points="1885.48,-4756.25 1895.34,-4752.38 1885.22,-4749.26 1885.48,-4756.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node27"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="1714,-4575 1569,-4575 1569,-4539 1714,-4539 1714,-4575"/>
<text text-anchor="middle" x="1641.5" y="-4553.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="1989.5,-4820 1876.5,-4820 1876.5,-4784 1989.5,-4784 1989.5,-4820"/>
<text text-anchor="middle" x="1933" y="-4798.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1706.5,-4575.02C1724.36,-4583.01 1742.1,-4594.27 1754,-4610 1798.87,-4669.32 1729.67,-4722.14 1782,-4775 1803.65,-4796.87 1836.58,-4804.44 1866.08,-4806.19"/>
<polygon fill="blue" stroke="blue" points="1866.22,-4809.7 1876.35,-4806.58 1866.49,-4802.7 1866.22,-4809.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1732.5,-4820 1550.5,-4820 1550.5,-4784 1732.5,-4784 1732.5,-4820"/>
<text text-anchor="middle" x="1641.5" y="-4798.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1732.52,-4784.4C1748.97,-4781.23 1766,-4777.99 1782,-4775 1816.55,-4768.55 1855.63,-4761.52 1885.24,-4756.25"/>
<polygon fill="blue" stroke="blue" points="1886.06,-4759.66 1895.3,-4754.47 1884.84,-4752.77 1886.06,-4759.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1732.51,-4802C1775.72,-4802 1826.57,-4802 1866.11,-4802"/>
<polygon fill="blue" stroke="blue" points="1866.17,-4805.5 1876.17,-4802 1866.17,-4798.5 1866.17,-4805.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<g id="a_node29"><a xlink:title="fn encode_to_curve_try_and_increment(salt: &amp;[u8], data: &amp;[u8]) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;&#160;for i in 0u8..=u8::MAX { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...">
<polygon fill="white" stroke="black" points="2389,-4712 2120,-4712 2120,-4676 2389,-4676 2389,-4712"/>
<text text-anchor="middle" x="2254.5" y="-4690.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M2389.03,-4694C2414.33,-4694 2439.59,-4694 2461.14,-4694"/>
<polygon fill="blue" stroke="blue" points="2461.41,-4697.5 2471.41,-4694 2461.41,-4690.5 2461.41,-4697.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn test_encode_to_curve_try_and_increment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let got = encode_to_curve_try_and_increment(&amp;v.pk, v.alpha) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.compress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.0...">
<polygon fill="white" stroke="black" points="2084,-4658 1782,-4658 1782,-4622 2084,-4622 2084,-4658"/>
<text text-anchor="middle" x="1933" y="-4636.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2040.83,-4658.06C2071.61,-4663.26 2105.34,-4668.96 2136.68,-4674.26"/>
<polygon fill="blue" stroke="blue" points="2136.32,-4677.75 2146.77,-4675.96 2137.49,-4670.84 2136.32,-4677.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;fn try_and_increment_terminates() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(data: [u8; 34])| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _ = encode_to_curve_try_and_increment(&amp;data[..32], &amp;data[32..]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2046.5,-4712 1819.5,-4712 1819.5,-4676 2046.5,-4676 2046.5,-4712"/>
<text text-anchor="middle" x="1933" y="-4690.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_and_increment_terminates</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2046.64,-4694C2067.12,-4694 2088.72,-4694 2109.94,-4694"/>
<polygon fill="blue" stroke="blue" points="2109.99,-4697.5 2119.99,-4694 2109.99,-4690.5 2109.99,-4697.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M1970.5,-4747.8C2048.94,-4746.96 2239.25,-4742.64 2397,-4721 2418.2,-4718.09 2441.16,-4713.51 2461.49,-4708.93"/>
<polygon fill="blue" stroke="blue" points="2462.28,-4712.34 2471.24,-4706.7 2460.71,-4705.52 2462.28,-4712.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="1714.5,-4766 1568.5,-4766 1568.5,-4730 1714.5,-4730 1714.5,-4766"/>
<text text-anchor="middle" x="1641.5" y="-4744.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1714.81,-4748C1768.21,-4748 1839.34,-4748 1885.4,-4748"/>
<polygon fill="blue" stroke="blue" points="1885.41,-4751.5 1895.41,-4748 1885.41,-4744.5 1885.41,-4751.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1714.51,-4762.12C1736.19,-4766.33 1760.05,-4770.9 1782,-4775 1809.68,-4780.17 1840.26,-4785.71 1866.55,-4790.41"/>
<polygon fill="blue" stroke="blue" points="1865.95,-4793.86 1876.4,-4792.17 1867.18,-4786.97 1865.95,-4793.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M1989.81,-4800.22C2077.76,-4796.3 2253.37,-4784.01 2397,-4746 2424.07,-4738.83 2453.01,-4726.97 2476.11,-4716.37"/>
<polygon fill="blue" stroke="blue" points="2477.72,-4719.48 2485.3,-4712.08 2474.76,-4713.14 2477.72,-4719.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1989.72,-4795.59C2018.35,-4791.4 2053.53,-4784.83 2084,-4775 2130.11,-4760.13 2179.77,-4735.25 2213.34,-4716.98"/>
<polygon fill="blue" stroke="blue" points="2215.29,-4719.9 2222.37,-4712.01 2211.92,-4713.77 2215.29,-4719.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node35"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="140,-3238 86,-3238 86,-3202 140,-3202 140,-3238"/>
<text text-anchor="middle" x="113" y="-3216.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M127.83,-3238.07C181.3,-3306.23 383.01,-3548.02 615,-3631 808.34,-3700.16 919.44,-3762.66 1077,-3631 1114.43,-3599.72 1063.23,-3558.67 1096.5,-3523 1114.21,-3504.01 1143.21,-3497.58 1166.47,-3495.72"/>
<polygon fill="blue" stroke="blue" points="1166.91,-3499.21 1176.7,-3495.16 1166.52,-3492.22 1166.91,-3499.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="587,-2770 254,-2770 254,-2734 587,-2734 587,-2770"/>
<text text-anchor="middle" x="420.5" y="-2748.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M116.83,-3201.82C128.98,-3126.13 179.14,-2837.31 246,-2779 247.15,-2778 248.32,-2777.03 249.51,-2776.08"/>
<polygon fill="blue" stroke="blue" points="251.56,-2778.92 257.64,-2770.24 247.48,-2773.23 251.56,-2778.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;fn from(src: KeyTransConfig) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let KeyTransConfig { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;vrf_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auditor_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = src; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s...">
<polygon fill="white" stroke="black" points="1668.5,-4438 1614.5,-4438 1614.5,-4402 1668.5,-4402 1668.5,-4438"/>
<text text-anchor="middle" x="1641.5" y="-4416.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1668.7,-4423.71C1715.24,-4430.3 1813.3,-4444.19 1875.73,-4453.03"/>
<polygon fill="blue" stroke="blue" points="1875.42,-4456.52 1885.81,-4454.46 1876.4,-4449.59 1875.42,-4456.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1668.89,-4424.87C1695.02,-4431.19 1733.96,-4444.91 1754,-4473 1818.43,-4563.29 1706.18,-4640.03 1782,-4721 1807.9,-4748.66 1851.75,-4753.82 1885.37,-4753"/>
<polygon fill="blue" stroke="blue" points="1885.6,-4756.5 1895.45,-4752.58 1885.31,-4749.5 1885.6,-4756.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node37"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="893,-3844 799,-3844 799,-3808 893,-3808 893,-3844"/>
<text text-anchor="middle" x="846" y="-3822.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="1231,-3993 1177,-3993 1177,-3957 1231,-3957 1231,-3993"/>
<text text-anchor="middle" x="1204" y="-3971.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M893.1,-3824.15C944.28,-3824.63 1026.33,-3833.31 1077,-3879 1096.88,-3896.93 1077.77,-3916.87 1096.5,-3936 1115.13,-3955.04 1143.81,-3964.84 1166.72,-3969.86"/>
<polygon fill="blue" stroke="blue" points="1166.29,-3973.34 1176.78,-3971.84 1167.65,-3966.48 1166.29,-3973.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node38"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="890.5,-3790 801.5,-3790 801.5,-3754 890.5,-3754 890.5,-3790"/>
<text text-anchor="middle" x="846" y="-3768.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="1241,-4058 1167,-4058 1167,-4022 1241,-4022 1241,-4058"/>
<text text-anchor="middle" x="1204" y="-4036.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M890.78,-3762.63C942.94,-3754.31 1029.04,-3750.02 1077,-3799 1108.71,-3831.38 1068.65,-3966.25 1096.5,-4002 1110.93,-4020.52 1135.11,-4030.02 1156.79,-4034.9"/>
<polygon fill="blue" stroke="blue" points="1156.36,-4038.38 1166.85,-4036.89 1157.72,-4031.52 1156.36,-4038.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1451,-4095 1397,-4095 1397,-4059 1451,-4059 1451,-4095"/>
<text text-anchor="middle" x="1424" y="-4073.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M890.82,-3767.6C983.88,-3760.94 1201.71,-3760.06 1311.5,-3882 1356.76,-3932.27 1307.36,-3975.19 1347,-4030 1357.14,-4044.02 1372.88,-4054.75 1387.41,-4062.39"/>
<polygon fill="blue" stroke="blue" points="1386.19,-4065.69 1396.71,-4066.97 1389.28,-4059.41 1386.19,-4065.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;pub fn restore(self, responses2_bytes: &amp;[Vec&lt;u8&gt;]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if responses2_bytes.len() != self.server_ids.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(Error::NumServers { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1236.5,-3927 1171.5,-3927 1171.5,-3891 1236.5,-3891 1236.5,-3927"/>
<text text-anchor="middle" x="1204" y="-3905.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M890.57,-3766.38C939.82,-3762.31 1020.48,-3762.76 1077,-3799 1091.02,-3807.99 1085.23,-3818.73 1096.5,-3831 1115.99,-3852.21 1142.01,-3871.4 1163.45,-3885.43"/>
<polygon fill="blue" stroke="blue" points="1161.72,-3888.48 1172.03,-3890.93 1165.5,-3882.59 1161.72,-3888.48"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node39"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="1268,-3249 1140,-3249 1140,-3213 1268,-3213 1268,-3249"/>
<text text-anchor="middle" x="1204" y="-3227.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="1690.5,-2971 1592.5,-2971 1592.5,-2935 1690.5,-2935 1690.5,-2971"/>
<text text-anchor="middle" x="1641.5" y="-2949.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1268.15,-3219.45C1282.79,-3215.57 1298.02,-3210.51 1311.5,-3204 1437.9,-3142.94 1563.01,-3028.87 1615.16,-2978.28"/>
<polygon fill="blue" stroke="blue" points="1617.61,-2980.78 1622.32,-2971.29 1612.72,-2975.77 1617.61,-2980.78"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node40"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="1231,-3195 1177,-3195 1177,-3159 1231,-3159 1231,-3195"/>
<text text-anchor="middle" x="1204" y="-3173.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="1452,-2971 1396,-2971 1396,-2935 1452,-2935 1452,-2971"/>
<text text-anchor="middle" x="1424" y="-2949.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.13,-3174.58C1254.36,-3171.26 1288.16,-3163.42 1311.5,-3145 1340.23,-3122.32 1387.7,-3027.62 1410.29,-2980.24"/>
<polygon fill="blue" stroke="blue" points="1413.47,-2981.7 1414.59,-2971.16 1407.15,-2978.7 1413.47,-2981.7"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="1296.5,-2951 1111.5,-2951 1111.5,-2915 1296.5,-2915 1296.5,-2951"/>
<text text-anchor="middle" x="1204" y="-2929.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1296.69,-2924.98C1357.14,-2921.15 1437.96,-2918.78 1509,-2926 1533.34,-2928.47 1559.83,-2933.46 1582.61,-2938.48"/>
<polygon fill="blue" stroke="blue" points="1581.94,-2941.91 1592.46,-2940.7 1583.48,-2935.09 1581.94,-2941.91"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1296.5,-2941.39C1327.91,-2944.28 1361.3,-2947.34 1385.88,-2949.59"/>
<polygon fill="blue" stroke="blue" points="1385.57,-2953.08 1395.85,-2950.51 1386.21,-2946.11 1385.57,-2953.08"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1690.63,-2945.35C1743.35,-2936.98 1827.53,-2923.6 1881.26,-2915.06"/>
<polygon fill="blue" stroke="blue" points="1881.92,-2918.5 1891.25,-2913.48 1880.82,-2911.59 1881.92,-2918.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1452.05,-2944.33C1472.86,-2938.07 1502.44,-2930.03 1529,-2926 1654.5,-2906.96 1804.27,-2905.36 1881.06,-2906.04"/>
<polygon fill="blue" stroke="blue" points="1881.36,-2909.55 1891.4,-2906.15 1881.44,-2902.55 1881.36,-2909.55"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1452.29,-2953C1484.73,-2953 1539.76,-2953 1581.97,-2953"/>
<polygon fill="blue" stroke="blue" points="1582.13,-2956.5 1592.13,-2953 1582.12,-2949.5 1582.13,-2956.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="917.5,-4058 774.5,-4058 774.5,-4022 917.5,-4022 917.5,-4058"/>
<text text-anchor="middle" x="846" y="-4036.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.76,-4040C988.68,-4040 1095.82,-4040 1156.6,-4040"/>
<polygon fill="blue" stroke="blue" points="1156.66,-4043.5 1166.66,-4040 1156.66,-4036.5 1156.66,-4043.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore1(&amp;mut self, req_bytes: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.inner &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1241,-4149 1167,-4149 1167,-4113 1241,-4113 1241,-4149"/>
<text text-anchor="middle" x="1204" y="-4127.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.76,-4058.09C988.83,-4076.25 1096.26,-4103.72 1156.97,-4119.23"/>
<polygon fill="blue" stroke="blue" points="1156.11,-4122.63 1166.66,-4121.71 1157.84,-4115.84 1156.11,-4122.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.58,-4049.11C967.47,-4055.18 1035.98,-4062.8 1096.5,-4067 1201.64,-4074.29 1326.19,-4076.26 1386.56,-4076.8"/>
<polygon fill="blue" stroke="blue" points="1386.7,-4080.3 1396.73,-4076.88 1386.75,-4073.3 1386.7,-4080.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M895.75,-4021.99C946.04,-4003.42 1026.73,-3973.64 1096.5,-3948 1118,-3940.1 1141.96,-3931.32 1161.69,-3924.1"/>
<polygon fill="blue" stroke="blue" points="1163.12,-3927.31 1171.3,-3920.59 1160.71,-3920.73 1163.12,-3927.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.76,-4027.08C992.94,-4013.35 1108.8,-3992.2 1167.01,-3981.57"/>
<polygon fill="blue" stroke="blue" points="1167.64,-3985.01 1176.85,-3979.77 1166.39,-3978.13 1167.64,-3985.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1241.11,-4054.97C1263.72,-4065.83 1292.13,-4082.4 1311.5,-4104 1336.65,-4132.06 1315.26,-4160.68 1347,-4181 1500.89,-4279.51 1630.55,-4257.7 1754,-4123 1920.11,-3941.75 1931.4,-3101.4 1932,-2935.49"/>
<polygon fill="blue" stroke="blue" points="1935.5,-2935.15 1932.02,-2925.14 1928.5,-2935.13 1935.5,-2935.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<g id="a_node47"><a xlink:title="fn input_hash_pt(input: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(input) }">
<polygon fill="white" stroke="black" points="1698.5,-3995 1584.5,-3995 1584.5,-3959 1698.5,-3959 1698.5,-3995"/>
<text text-anchor="middle" x="1641.5" y="-3973.3" font-family="Helvetica,sans-Serif" font-size="14.00">input_hash_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.05,-4042.83C1298.48,-4046.45 1413.93,-4050.07 1509,-4030 1539.22,-4023.62 1571.4,-4010.76 1596.37,-3999.31"/>
<polygon fill="blue" stroke="blue" points="1597.99,-4002.42 1605.57,-3995.01 1595.02,-3996.08 1597.99,-4002.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<g id="a_node53"><a xlink:title="fn to_ristretto_pt(b: &amp;[u8]) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;CompressedRistretto::from_slice(b).ok()?.decompress() }">
<polygon fill="white" stroke="black" points="1480.5,-4149 1367.5,-4149 1367.5,-4113 1480.5,-4113 1480.5,-4149"/>
<text text-anchor="middle" x="1424" y="-4127.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.13,-4057.27C1269.62,-4070.65 1310.5,-4089.32 1347,-4104 1351.47,-4105.8 1356.12,-4107.6 1360.81,-4109.38"/>
<polygon fill="blue" stroke="blue" points="1359.86,-4112.76 1370.46,-4112.97 1362.31,-4106.2 1359.86,-4112.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node54"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1499,-4021 1349,-4021 1349,-3985 1499,-3985 1499,-4021"/>
<text text-anchor="middle" x="1424" y="-3999.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.49,-4033.81C1268.08,-4029.29 1305.2,-4022.99 1338.95,-4017.27"/>
<polygon fill="blue" stroke="blue" points="1339.55,-4020.71 1348.83,-4015.59 1338.38,-4013.81 1339.55,-4020.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<g id="a_node46"><a xlink:title="fn auth_secret(input: &amp;[u8; 64], auth_pt: &amp;RistrettoPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;Kdf::make( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_SVR_MasterAuthorizationKey_20240823&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;auth_pt.compress().to_bytes(), ...">
<polygon fill="white" stroke="black" points="1690,-3928 1593,-3928 1593,-3892 1690,-3892 1690,-3928"/>
<text text-anchor="middle" x="1641.5" y="-3906.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_secret</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1650.31,-3891.75C1669.67,-3846.09 1720.7,-3722.92 1754,-3617 1836.2,-3355.55 1906.23,-3030.72 1926.26,-2934.85"/>
<polygon fill="blue" stroke="blue" points="1929.69,-2935.55 1928.3,-2925.05 1922.83,-2934.13 1929.69,-2935.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1698.74,-3970.24C1719.5,-3964.74 1741.1,-3954.83 1754,-3937 1822.88,-3841.82 1705.46,-2969.13 1782,-2880 1797.69,-2861.73 1821.18,-2853.04 1844.94,-2849.43"/>
<polygon fill="blue" stroke="blue" points="1845.62,-2852.87 1855.12,-2848.17 1844.76,-2845.92 1845.62,-2852.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1241.05,-4141.03C1344,-4167.25 1639.28,-4224.81 1754,-4059 1791.28,-4005.12 1739.38,-2929.76 1782,-2880 1797.74,-2861.62 1821.37,-2852.93 1845.25,-2849.35"/>
<polygon fill="blue" stroke="blue" points="1845.97,-2852.79 1855.48,-2848.11 1845.13,-2845.84 1845.97,-2852.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1216.79,-4149.13C1238.26,-4180.29 1287.13,-4242.96 1347,-4267 1432.2,-4301.22 1693.95,-4265.45 1754,-4196 1924.8,-3998.48 1932.28,-3106.57 1932.12,-2935.44"/>
<polygon fill="blue" stroke="blue" points="1935.62,-2935.22 1932.1,-2925.23 1928.62,-2935.23 1935.62,-2935.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.49,-4131C1272.84,-4131 1318.85,-4131 1356.7,-4131"/>
<polygon fill="blue" stroke="blue" points="1357.13,-4134.5 1367.13,-4131 1357.13,-4127.5 1357.13,-4134.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1451.44,-4080.06C1514.15,-4085.68 1672.67,-4090.15 1754,-4004 1905.82,-3843.19 1928.47,-3090.68 1931.55,-2935.17"/>
<polygon fill="blue" stroke="blue" points="1935.05,-2935.08 1931.74,-2925.02 1928.05,-2934.95 1935.05,-2935.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.04,-4067.94C1467.79,-4061.91 1489.91,-4053.54 1509,-4045 1539.72,-4031.26 1573.41,-4013.79 1599,-4000"/>
<polygon fill="blue" stroke="blue" points="1600.92,-4002.94 1608.04,-3995.1 1597.58,-3996.78 1600.92,-4002.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<g id="a_node50"><a xlink:title="fn auth_pt(input: &amp;[u8; 64], k_oprf: &amp;Scalar) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;input_hash_pt(input) * k_oprf }">
<polygon fill="white" stroke="black" points="1458.5,-3967 1389.5,-3967 1389.5,-3931 1458.5,-3931 1458.5,-3967"/>
<text text-anchor="middle" x="1424" y="-3945.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1458.67,-3953.38C1489.53,-3957.38 1536.11,-3963.44 1574.39,-3968.41"/>
<polygon fill="blue" stroke="blue" points="1574.07,-3971.9 1584.44,-3969.72 1574.98,-3964.96 1574.07,-3971.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1236.58,-3908.43C1265.36,-3907.94 1309.03,-3907.27 1347,-3907 1419,-3906.49 1437,-3906.18 1509,-3907 1533.06,-3907.27 1559.59,-3907.83 1582.48,-3908.39"/>
<polygon fill="blue" stroke="blue" points="1582.64,-3911.9 1592.72,-3908.65 1582.81,-3904.9 1582.64,-3911.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1231.2,-3977.39C1255.47,-3981.01 1290.85,-3990.12 1311.5,-4013 1355.95,-4062.26 1294.8,-4117.04 1347,-4158 1420.31,-4215.53 1696.38,-4130.23 1754,-4057 1897.35,-3874.81 1926.73,-3095.1 1931.28,-2935.58"/>
<polygon fill="blue" stroke="blue" points="1934.79,-2935.27 1931.57,-2925.18 1927.79,-2935.08 1934.79,-2935.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.33,-3965.56C1252.92,-3957.77 1284.26,-3946.36 1311.5,-3936 1327.35,-3929.97 1330.41,-3925.51 1347,-3922 1390.34,-3912.84 1509.99,-3910.59 1582.45,-3910.08"/>
<polygon fill="blue" stroke="blue" points="1582.8,-3913.58 1592.78,-3910.02 1582.76,-3906.58 1582.8,-3913.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-3971.86C1267.99,-3967.49 1335.02,-3959.49 1379.29,-3954.21"/>
<polygon fill="blue" stroke="blue" points="1379.96,-3957.66 1389.47,-3953 1379.13,-3950.71 1379.96,-3957.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-3978.38C1257.91,-3981.8 1300.48,-3987.26 1338.75,-3992.18"/>
<polygon fill="blue" stroke="blue" points="1338.53,-3995.68 1348.89,-3993.48 1339.42,-3988.74 1338.53,-3995.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1480.53,-4116.58C1490.3,-4113.09 1500.17,-4108.92 1509,-4104 1519.19,-4098.33 1518.93,-4092.89 1529,-4087 1621.02,-4033.21 1692.02,-4090.71 1754,-4004 1792.07,-3950.74 1739.42,-2875.72 1782,-2826 1803.74,-2800.61 1840.55,-2793.71 1872.27,-2793.22"/>
<polygon fill="blue" stroke="blue" points="1872.34,-2796.72 1882.36,-2793.28 1872.38,-2789.72 1872.34,-2796.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1493.64,-3984.89C1499.04,-3982.3 1504.24,-3979.35 1509,-3976 1520.92,-3967.61 1517.22,-3958.59 1529,-3950 1544.99,-3938.35 1564.71,-3929.8 1583.1,-3923.68"/>
<polygon fill="blue" stroke="blue" points="1584.37,-3926.95 1592.85,-3920.6 1582.26,-3920.27 1584.37,-3926.95"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node55"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="492,-3231 349,-3231 349,-3195 492,-3195 492,-3231"/>
<text text-anchor="middle" x="420.5" y="-3209.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node56"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="910,-3231 782,-3231 782,-3195 910,-3195 910,-3231"/>
<text text-anchor="middle" x="846" y="-3209.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M492.38,-3213C569.79,-3213 693.17,-3213 771.57,-3213"/>
<polygon fill="blue" stroke="blue" points="771.85,-3216.5 781.85,-3213 771.85,-3209.5 771.85,-3216.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node57"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="909,-3177 783,-3177 783,-3141 909,-3141 909,-3177"/>
<text text-anchor="middle" x="846" y="-3155.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M492.22,-3202.76C528.84,-3197.55 574.29,-3191.23 615,-3186 667.83,-3179.21 727.58,-3172.22 772.93,-3167.05"/>
<polygon fill="blue" stroke="blue" points="773.43,-3170.52 782.97,-3165.91 772.64,-3163.56 773.43,-3170.52"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M492.13,-3223.95C528.73,-3229.34 574.19,-3235.61 615,-3240 666.19,-3245.5 1040.11,-3239.1 1077,-3275 1107.26,-3304.45 1069.6,-3431.46 1096.5,-3464 1113.43,-3484.48 1142.94,-3492.19 1166.61,-3494.94"/>
<polygon fill="blue" stroke="blue" points="1166.4,-3498.43 1176.67,-3495.86 1167.03,-3491.46 1166.4,-3498.43"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="1253,-3622 1155,-3622 1155,-3586 1253,-3586 1253,-3622"/>
<text text-anchor="middle" x="1204" y="-3600.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M422.59,-3231.21C427.94,-3302.29 457.99,-3562.33 615,-3666 786.35,-3779.14 877.01,-3712.54 1077,-3666 1109,-3658.55 1142.23,-3641.76 1166.53,-3627.53"/>
<polygon fill="blue" stroke="blue" points="1168.6,-3630.37 1175.38,-3622.22 1165,-3624.36 1168.6,-3630.37"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M423.26,-3231.22C430.9,-3298.93 467.77,-3536.91 615,-3631 701.51,-3686.28 992.97,-3689.99 1077,-3631 1097.88,-3616.34 1077.59,-3594.14 1096.5,-3577 1115.5,-3559.78 1143.91,-3553.2 1166.61,-3550.83"/>
<polygon fill="blue" stroke="blue" points="1166.9,-3554.32 1176.58,-3550.02 1166.33,-3547.35 1166.9,-3554.32"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.15,-3211.44C963.29,-3213.85 1036.84,-3226.64 1077,-3275 1112.32,-3317.53 1060.87,-3480.74 1096.5,-3523 1113.42,-3543.07 1142.93,-3549.36 1166.6,-3550.89"/>
<polygon fill="blue" stroke="blue" points="1166.54,-3554.39 1176.67,-3551.29 1166.81,-3547.4 1166.54,-3554.39"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M909.15,-3146.86C961.64,-3140.56 1034.81,-3141.79 1077,-3186 1119.75,-3230.8 1057.83,-3415.63 1096.5,-3464 1113.2,-3484.88 1143,-3492.54 1166.84,-3495.16"/>
<polygon fill="blue" stroke="blue" points="1166.71,-3498.66 1176.97,-3496.03 1167.31,-3491.69 1166.71,-3498.66"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;fn generate_points() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Signal_Username_20230130_Constant_Points_Generate&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for p in BASE_POINTS.iter() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(&amp;sho.get_point(),...">
<polygon fill="white" stroke="black" points="1488,-496 1360,-496 1360,-460 1488,-460 1488,-496"/>
<text text-anchor="middle" x="1424" y="-474.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;pub fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1682,-756 1601,-756 1601,-720 1682,-720 1682,-756"/>
<text text-anchor="middle" x="1641.5" y="-734.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1469.05,-496.03C1484.14,-504.43 1499.58,-515.95 1509,-531 1551.71,-599.23 1475.81,-650.59 1529,-711 1544.35,-728.44 1568.86,-735.59 1590.99,-738.21"/>
<polygon fill="blue" stroke="blue" points="1590.68,-741.69 1600.96,-739.11 1591.31,-734.72 1590.68,-741.69"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="973,-3622 719,-3622 719,-3586 973,-3586 973,-3622"/>
<text text-anchor="middle" x="846" y="-3600.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M973.26,-3613.28C1009.96,-3609.99 1047.94,-3600.05 1077,-3577 1096.99,-3561.14 1077.59,-3540.14 1096.5,-3523 1115.5,-3505.78 1143.91,-3499.2 1166.61,-3496.83"/>
<polygon fill="blue" stroke="blue" points="1166.9,-3500.32 1176.58,-3496.02 1166.33,-3493.35 1166.9,-3500.32"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M973.01,-3604C1031.4,-3604 1097.97,-3604 1144.42,-3604"/>
<polygon fill="blue" stroke="blue" points="1144.6,-3607.5 1154.6,-3604 1144.6,-3600.5 1144.6,-3607.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M973.24,-3591.35C1007.03,-3587.37 1043.48,-3582.55 1077,-3577 1107.46,-3571.96 1141.69,-3564.51 1166.78,-3558.71"/>
<polygon fill="blue" stroke="blue" points="1167.65,-3562.1 1176.59,-3556.42 1166.06,-3555.28 1167.65,-3562.1"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="991.5,-3568 700.5,-3568 700.5,-3532 991.5,-3532 991.5,-3568"/>
<text text-anchor="middle" x="846" y="-3546.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M991.76,-3535.11C1020.09,-3531.61 1049.53,-3527.54 1077,-3523 1107.46,-3517.96 1141.69,-3510.51 1166.78,-3504.71"/>
<polygon fill="blue" stroke="blue" points="1167.65,-3508.1 1176.59,-3502.42 1166.06,-3501.28 1167.65,-3508.1"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M991.76,-3564.89C1020.09,-3568.39 1049.53,-3572.46 1077,-3577 1099.29,-3580.69 1123.61,-3585.67 1144.88,-3590.35"/>
<polygon fill="blue" stroke="blue" points="1144.22,-3593.79 1154.74,-3592.54 1145.74,-3586.95 1144.22,-3593.79"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M991.54,-3550C1055.51,-3550 1125.46,-3550 1166.72,-3550"/>
<polygon fill="blue" stroke="blue" points="1166.82,-3553.5 1176.82,-3550 1166.82,-3546.5 1166.82,-3553.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1231.1,-3498.68C1286.45,-3503.1 1417.94,-3506.73 1509,-3454 1732.52,-3324.56 1879.12,-3026.31 1920.2,-2934.44"/>
<polygon fill="blue" stroke="blue" points="1923.43,-2935.8 1924.27,-2925.24 1917.03,-2932.97 1923.43,-2935.8"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="912.5,-3514 779.5,-3514 779.5,-3478 912.5,-3478 912.5,-3514"/>
<text text-anchor="middle" x="846" y="-3492.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.71,-3496C987.57,-3496 1107.23,-3496 1166.82,-3496"/>
<polygon fill="blue" stroke="blue" points="1166.88,-3499.5 1176.88,-3496 1166.88,-3492.5 1166.88,-3499.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1253.01,-3604.41C1318.1,-3602.49 1434.73,-3589.96 1509,-3529 1707.41,-3366.15 1679.08,-3251.51 1754,-3006 1777.63,-2928.56 1725.44,-2883.93 1782,-2826 1805,-2802.44 1841.08,-2795.41 1872.09,-2794.4"/>
<polygon fill="blue" stroke="blue" points="1872.43,-2797.89 1882.39,-2794.27 1872.35,-2790.89 1872.43,-2797.89"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1253.27,-3596.18C1321.74,-3582.4 1445.76,-3546.94 1509,-3464 1625.69,-3310.98 1639.42,-3065.01 1640.59,-2981.67"/>
<polygon fill="blue" stroke="blue" points="1644.09,-2981.48 1640.68,-2971.45 1637.09,-2981.42 1644.09,-2981.48"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1231.11,-3548.8C1319.62,-3543.24 1610.68,-3512.58 1754,-3347 1865.54,-3218.13 1913.04,-3010.29 1927.17,-2935.2"/>
<polygon fill="blue" stroke="blue" points="1930.66,-2935.58 1929.01,-2925.11 1923.77,-2934.32 1930.66,-2935.58"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.23,-3550.77C1255.52,-3549.98 1290.92,-3544.75 1311.5,-3523 1387.14,-3443.07 1414.85,-3085.06 1421.38,-2981.28"/>
<polygon fill="blue" stroke="blue" points="1424.87,-2981.43 1421.99,-2971.24 1417.89,-2981.01 1424.87,-2981.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node65"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1276,-2216 1132,-2216 1132,-2180 1276,-2180 1276,-2216"/>
<text text-anchor="middle" x="1204" y="-2194.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;pub fn to_token(&amp;self, client_key: &amp;ClientDecryptionKey) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.R * client_key.a_inv; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::to_token_raw(P) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1461.5,-1971 1386.5,-1971 1386.5,-1935 1461.5,-1935 1461.5,-1971"/>
<text text-anchor="middle" x="1424" y="-1949.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.22,-2189.69C1289.48,-2185.13 1302.09,-2178.27 1311.5,-2168 1368.93,-2105.29 1291.7,-2044.59 1347,-1980 1354.68,-1971.03 1365.54,-1965.04 1376.66,-1961.04"/>
<polygon fill="blue" stroke="blue" points="1377.91,-1964.32 1386.42,-1958.02 1375.83,-1957.64 1377.91,-1964.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;pub fn verify(&amp;self, point: &amp;RistrettoPoint, token: &amp;[u8]) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.sk_prime * point; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected = Endorsement::to_token_raw(P); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1452,-2025 1396,-2025 1396,-1989 1452,-1989 1452,-2025"/>
<text text-anchor="middle" x="1424" y="-2003.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.2,-2188.96C1289.3,-2184.45 1301.86,-2177.79 1311.5,-2168 1354.72,-2124.1 1305.27,-2079.32 1347,-2034 1357.15,-2022.98 1372.1,-2016.45 1386.06,-2012.59"/>
<polygon fill="blue" stroke="blue" points="1387.05,-2015.95 1395.96,-2010.22 1385.42,-2009.14 1387.05,-2015.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="1451,-1917 1397,-1917 1397,-1881 1451,-1881 1451,-1917"/>
<text text-anchor="middle" x="1424" y="-1895.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.27,-2190.08C1289.61,-2185.5 1302.24,-2178.53 1311.5,-2168 1383.26,-2086.34 1278.01,-2010.01 1347,-1926 1356.89,-1913.95 1372.55,-1907.28 1387.09,-1903.58"/>
<polygon fill="blue" stroke="blue" points="1387.86,-1907 1396.89,-1901.47 1386.38,-1900.15 1387.86,-1907"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="1457,-2079 1391,-2079 1391,-2043 1457,-2043 1457,-2079"/>
<text text-anchor="middle" x="1424" y="-2057.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.01,-2183.27C1288.27,-2179.26 1300.58,-2174.25 1311.5,-2168 1348.11,-2147.05 1381.81,-2111.47 1402.36,-2087.14"/>
<polygon fill="blue" stroke="blue" points="1405.13,-2089.29 1408.82,-2079.35 1399.74,-2084.82 1405.13,-2089.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut point_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut point_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;point_byte...">
<polygon fill="white" stroke="black" points="1682,-2386 1601,-2386 1601,-2350 1682,-2350 1682,-2386"/>
<text text-anchor="middle" x="1641.5" y="-2364.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1220.29,-2216.43C1244.23,-2243.9 1293.38,-2295.02 1347,-2320 1352.51,-2322.57 1508.86,-2347.35 1591.05,-2360.26"/>
<polygon fill="blue" stroke="blue" points="1590.51,-2363.72 1600.94,-2361.81 1591.6,-2356.8 1590.51,-2363.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;fn derive_impl&lt;D: Domain&gt;() &#45;&gt; [RistrettoPoint; 2] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new(b&#39; Signal_ZKCredential_Domain_20231011&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_and_ratchet(D::ID.as_bytes()); &#160;...">
<polygon fill="white" stroke="black" points="1472.5,-2285 1375.5,-2285 1375.5,-2249 1472.5,-2249 1472.5,-2285"/>
<text text-anchor="middle" x="1424" y="-2263.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1463.53,-2285.06C1499.58,-2301.95 1553.55,-2327.25 1592.41,-2345.46"/>
<polygon fill="blue" stroke="blue" points="1591.4,-2348.85 1601.94,-2349.93 1594.37,-2342.52 1591.4,-2348.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="1484.5,-2724 1363.5,-2724 1363.5,-2688 1484.5,-2688 1484.5,-2724"/>
<text text-anchor="middle" x="1424" y="-2702.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1484.53,-2694.03C1493.45,-2690.3 1501.99,-2685.41 1509,-2679 1594.89,-2600.43 1626.66,-2456.62 1636.58,-2396.06"/>
<polygon fill="blue" stroke="blue" points="1640.06,-2396.51 1638.14,-2386.09 1633.14,-2395.43 1640.06,-2396.51"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Signal_ZKCredential_ConstantSystemParams_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get_point(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_wprime = sho.get_poi...">
<polygon fill="white" stroke="black" points="1463.5,-2670 1384.5,-2670 1384.5,-2634 1463.5,-2634 1463.5,-2670"/>
<text text-anchor="middle" x="1424" y="-2648.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1463.71,-2644.67C1479.17,-2640.19 1496.29,-2633.11 1509,-2622 1580.72,-2559.34 1618.78,-2448.01 1633.37,-2396.1"/>
<polygon fill="blue" stroke="blue" points="1636.8,-2396.82 1636.05,-2386.25 1630.04,-2394.98 1636.8,-2396.82"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;fn to_token_raw(unblinded_endorsement: RistrettoPoint) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Skip the Sho for this, we&#39;re hashing a single point into a single bitstring. We don&#39;t &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// need domain separa...">
<polygon fill="white" stroke="black" points="1695,-2025 1588,-2025 1588,-1989 1695,-1989 1695,-2025"/>
<text text-anchor="middle" x="1641.5" y="-2003.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token_raw</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1461.56,-1962.16C1493.41,-1970.14 1540.3,-1981.89 1578.09,-1991.36"/>
<polygon fill="blue" stroke="blue" points="1577.43,-1994.8 1587.98,-1993.84 1579.13,-1988.01 1577.43,-1994.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="1248,-2079 1160,-2079 1160,-2043 1248,-2043 1248,-2079"/>
<text text-anchor="middle" x="1204" y="-2057.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1248.01,-2059.6C1269.5,-2056.75 1294.48,-2049.88 1311.5,-2034 1348.44,-1999.53 1311.7,-1962.15 1347,-1926 1357.63,-1915.12 1372.92,-1908.61 1387.01,-1904.72"/>
<polygon fill="blue" stroke="blue" points="1388.06,-1908.07 1396.97,-1902.33 1386.42,-1901.26 1388.06,-1908.07"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1248.07,-2061C1286.52,-2061 1342.5,-2061 1380.71,-2061"/>
<polygon fill="blue" stroke="blue" points="1380.99,-2064.5 1390.99,-2061 1380.99,-2057.5 1380.99,-2064.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1248.14,-2063.61C1269.15,-2066.82 1293.67,-2073.65 1311.5,-2088 1338.98,-2110.12 1319.32,-2137.13 1347,-2159 1405.02,-2204.85 1450.98,-2151.15 1509,-2197 1524.59,-2209.32 1518.03,-2220.42 1529,-2237 1554.98,-2276.28 1591.26,-2316.87 1615.29,-2342.26"/>
<polygon fill="blue" stroke="blue" points="1612.9,-2344.81 1622.33,-2349.63 1617.96,-2339.98 1612.9,-2344.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1452.29,-2007C1483.68,-2007 1536.24,-2007 1577.84,-2007"/>
<polygon fill="blue" stroke="blue" points="1577.89,-2010.5 1587.89,-2007 1577.89,-2003.5 1577.89,-2010.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter&lt;&#39;_&gt;) &#45;&gt; std::fmt::Result { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.compress().fmt(f) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1231,-1917 1177,-1917 1177,-1881 1231,-1881 1231,-1917"/>
<text text-anchor="middle" x="1204" y="-1895.3" font-family="Helvetica,sans-Serif" font-size="14.00">fmt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;pub fn compress(self) &#45;&gt; Endorsement&lt;CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Endorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: self.R.compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1465.5,-1863 1382.5,-1863 1382.5,-1827 1465.5,-1827 1465.5,-1863"/>
<text text-anchor="middle" x="1424" y="-1841.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-1892.49C1266.07,-1883.87 1328.09,-1868.51 1372.17,-1857.59"/>
<polygon fill="blue" stroke="blue" points="1373.25,-1860.93 1382.12,-1855.13 1371.57,-1854.13 1373.25,-1860.93"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1275.5,-2133 1132.5,-2133 1132.5,-2097 1275.5,-2097 1275.5,-2133"/>
<text text-anchor="middle" x="1204" y="-2111.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.61,-2108.67C1288.99,-2104.5 1301.82,-2098.01 1311.5,-2088 1362.76,-2035.04 1298.25,-1981.29 1347,-1926 1357.13,-1914.51 1372.49,-1907.9 1386.76,-1904.11"/>
<polygon fill="blue" stroke="blue" points="1387.88,-1907.45 1396.86,-1901.82 1386.33,-1900.62 1387.88,-1907.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.78,-2097.47C1310.48,-2088.87 1351.09,-2078.81 1380.86,-2071.44"/>
<polygon fill="blue" stroke="blue" points="1382.05,-2074.75 1390.91,-2068.95 1380.37,-2067.96 1382.05,-2074.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1246.63,-2133.07C1266.8,-2142.49 1291.03,-2154.78 1311.5,-2168 1328.62,-2179.05 1328.78,-2187.89 1347,-2197 1413.34,-2230.16 1444.38,-2200.62 1509,-2237 1556.03,-2263.48 1597.8,-2311.37 1621.07,-2341.33"/>
<polygon fill="blue" stroke="blue" points="1618.56,-2343.82 1627.41,-2349.65 1624.13,-2339.57 1618.56,-2343.82"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1451.34,-1896.08C1515.22,-1890.65 1678.71,-1886.94 1754,-1980 1816.93,-2057.78 1716.64,-2804.25 1782,-2880 1805.89,-2907.69 1847.7,-2913.35 1881.12,-2912.7"/>
<polygon fill="blue" stroke="blue" points="1881.34,-2916.19 1891.2,-2912.31 1881.07,-2909.2 1881.34,-2916.19"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1396.72,-1900.71C1374.03,-1903.79 1343.25,-1912.21 1329.25,-1935 1315.05,-1958.13 1315.05,-2888.87 1329.25,-2912 1341.34,-2931.69 1365.28,-2941.94 1386.07,-2947.28"/>
<polygon fill="blue" stroke="blue" points="1385.43,-2950.72 1395.96,-2949.52 1386.98,-2943.89 1385.43,-2950.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="1746,-2079 1537,-2079 1537,-2043 1746,-2043 1746,-2079"/>
<text text-anchor="middle" x="1641.5" y="-2057.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.19,-1900.52C1470.02,-1903.06 1494.53,-1909.55 1509,-1926 1541.24,-1962.65 1495.43,-1998.55 1529,-2034 1529.79,-2034.83 1530.6,-2035.64 1531.42,-2036.42"/>
<polygon fill="blue" stroke="blue" points="1529.4,-2039.29 1539.37,-2042.88 1533.81,-2033.86 1529.4,-2039.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1465.57,-1836.02C1536.19,-1823.07 1681.12,-1808.81 1754,-1890 1827.51,-1971.89 1710.23,-2796.58 1782,-2880 1805.85,-2907.72 1847.67,-2913.38 1881.1,-2912.72"/>
<polygon fill="blue" stroke="blue" points="1881.32,-2916.21 1891.18,-2912.33 1881.05,-2909.22 1881.32,-2916.21"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="1254.5,-1971 1153.5,-1971 1153.5,-1935 1254.5,-1935 1254.5,-1971"/>
<text text-anchor="middle" x="1204" y="-1949.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.74,-1953C1291.23,-1953 1340.44,-1953 1376.21,-1953"/>
<polygon fill="blue" stroke="blue" points="1376.39,-1956.5 1386.39,-1953 1376.39,-1949.5 1376.39,-1956.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.74,-1965.32C1294.54,-1975.18 1349.49,-1988.79 1385.62,-1997.74"/>
<polygon fill="blue" stroke="blue" points="1385.18,-2001.24 1395.73,-2000.24 1386.86,-1994.44 1385.18,-2001.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.74,-1940.68C1295,-1930.71 1350.76,-1916.9 1386.85,-1907.95"/>
<polygon fill="blue" stroke="blue" points="1388.07,-1911.26 1396.93,-1905.46 1386.39,-1904.46 1388.07,-1911.26"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.61,-1948.19C1273.74,-1944.43 1294.95,-1937.78 1311.5,-1926 1334.9,-1909.34 1324.4,-1889.73 1347,-1872 1354.6,-1866.03 1363.63,-1861.32 1372.76,-1857.62"/>
<polygon fill="blue" stroke="blue" points="1374.09,-1860.86 1382.26,-1854.12 1371.67,-1854.3 1374.09,-1860.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.61,-1957.81C1273.74,-1961.57 1294.95,-1968.22 1311.5,-1980 1334.9,-1996.66 1324.4,-2016.27 1347,-2034 1356.9,-2041.77 1369.21,-2047.41 1381.02,-2051.46"/>
<polygon fill="blue" stroke="blue" points="1380.17,-2054.86 1390.76,-2054.5 1382.26,-2048.18 1380.17,-2054.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.71,-1955.41C1274.54,-1958.75 1296.23,-1965.75 1311.5,-1980 1348.44,-2014.47 1309.25,-2054.42 1347,-2088 1401.9,-2136.84 1457.83,-2068.26 1509,-2121 1545.43,-2158.55 1506.81,-2189.62 1529,-2237 1548.74,-2279.16 1585.78,-2318.55 1611.73,-2342.91"/>
<polygon fill="blue" stroke="blue" points="1609.67,-2345.77 1619.4,-2349.97 1614.42,-2340.62 1609.67,-2345.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1652.28,-2079.13C1675.06,-2122.39 1731.44,-2235.74 1754,-2338 1766.99,-2396.89 1742.14,-2834.75 1782,-2880 1806.17,-2907.44 1847.96,-2913.12 1881.3,-2912.54"/>
<polygon fill="blue" stroke="blue" points="1881.48,-2916.04 1891.35,-2912.18 1881.23,-2909.04 1881.48,-2916.04"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(self) &#45;&gt; Result&lt;Endorsement&lt;RistrettoPoint&gt;, VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.R.decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(R) =&gt; Ok(Endorsement { R }), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Veri...">
<polygon fill="white" stroke="black" points="1254.5,-1863 1153.5,-1863 1153.5,-1827 1254.5,-1827 1254.5,-1863"/>
<text text-anchor="middle" x="1204" y="-1841.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1254.62,-1833.2C1281.74,-1827.35 1316.02,-1820.92 1347,-1818 1406.77,-1812.37 1751.63,-1819.99 1754,-1822 1903.76,-1949.03 1927.94,-2623.59 1931.45,-2770.67"/>
<polygon fill="blue" stroke="blue" points="1927.95,-2770.78 1931.67,-2780.7 1934.95,-2770.63 1927.95,-2770.78"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1302,-2025 1106,-2025 1106,-1989 1302,-1989 1302,-2025"/>
<text text-anchor="middle" x="1204" y="-2003.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1277.89,-1988.94C1310.45,-1980.88 1347.84,-1971.62 1376.52,-1964.51"/>
<polygon fill="blue" stroke="blue" points="1377.41,-1967.9 1386.27,-1962.1 1375.73,-1961.1 1377.41,-1967.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1302.21,-2007C1331.74,-2007 1362.45,-2007 1385.51,-2007"/>
<polygon fill="blue" stroke="blue" points="1385.54,-2010.5 1395.54,-2007 1385.54,-2003.5 1385.54,-2010.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1296.29,-1988.91C1301.64,-1986.33 1306.76,-1983.37 1311.5,-1980 1334.9,-1963.34 1324.4,-1943.73 1347,-1926 1358.5,-1916.98 1373.26,-1910.82 1386.71,-1906.7"/>
<polygon fill="blue" stroke="blue" points="1387.96,-1909.98 1396.66,-1903.93 1386.09,-1903.24 1387.96,-1909.98"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1277.89,-2025.06C1312.22,-2033.56 1351.93,-2043.39 1381.12,-2050.63"/>
<polygon fill="blue" stroke="blue" points="1380.43,-2054.06 1390.98,-2053.07 1382.12,-2047.27 1380.43,-2054.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1298.87,-2025.05C1303.36,-2027.65 1307.61,-2030.62 1311.5,-2034 1343.01,-2061.41 1315.24,-2093.88 1347,-2121 1403.23,-2169.03 1456.17,-2107.25 1509,-2159 1534.57,-2184.04 1512.53,-2205.22 1529,-2237 1550.42,-2278.33 1587.09,-2317.9 1612.5,-2342.53"/>
<polygon fill="blue" stroke="blue" points="1610.35,-2345.31 1620,-2349.67 1615.18,-2340.24 1610.35,-2345.31"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1457.31,-2065.66C1473.64,-2069.02 1493.26,-2074.67 1509,-2084 1643.9,-2164.01 1669.64,-2205.78 1754,-2338 1849.22,-2487.25 1906.59,-2695.42 1925.26,-2770.55"/>
<polygon fill="blue" stroke="blue" points="1921.95,-2771.76 1927.73,-2780.64 1928.75,-2770.1 1921.95,-2771.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1436.25,-2079.19C1454.85,-2110.26 1491.7,-2176.1 1509,-2237 1531.48,-2316.13 1516.1,-2339.76 1529,-2421 1559.8,-2615.05 1614.26,-2845.36 1633.51,-2924.59"/>
<polygon fill="blue" stroke="blue" points="1630.22,-2925.86 1635.99,-2934.74 1637.02,-2924.2 1630.22,-2925.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.26,-2061C1476.13,-2061 1501.2,-2061 1526.72,-2061"/>
<polygon fill="blue" stroke="blue" points="1526.89,-2064.5 1536.89,-2061 1526.89,-2057.5 1526.89,-2064.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1695.28,-2006.6C1716.82,-2009.37 1739.92,-2016.7 1754,-2034 1813.37,-2106.95 1720.49,-2808.85 1782,-2880 1805.92,-2907.66 1847.73,-2913.33 1881.14,-2912.68"/>
<polygon fill="blue" stroke="blue" points="1881.35,-2916.18 1891.21,-2912.3 1881.09,-2909.18 1881.35,-2916.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1501,-2533 1347,-2533 1347,-2497 1501,-2497 1501,-2533"/>
<text text-anchor="middle" x="1424" y="-2511.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1484.6,-2496.96C1493.03,-2493.48 1501.41,-2489.5 1509,-2485 1551.4,-2459.86 1592.58,-2419.95 1617.24,-2393.86"/>
<polygon fill="blue" stroke="blue" points="1620.09,-2395.94 1624.35,-2386.24 1614.97,-2391.17 1620.09,-2395.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="1231,-2533 1177,-2533 1177,-2497 1231,-2497 1231,-2533"/>
<text text-anchor="middle" x="1204" y="-2511.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.38,-2514.09C1255.79,-2514.78 1291.26,-2519.93 1311.5,-2542 1377.56,-2614.01 1321.14,-2664.76 1347,-2759 1363.82,-2820.32 1393.38,-2888.9 1410.25,-2925.86"/>
<polygon fill="blue" stroke="blue" points="1407.09,-2927.36 1414.45,-2934.98 1413.44,-2924.43 1407.09,-2927.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.4,-2514.53C1255.47,-2515.58 1290.4,-2521.01 1311.5,-2542 1356.09,-2586.36 1304.52,-2632.61 1347,-2679 1349.39,-2681.61 1352.05,-2683.97 1354.9,-2686.1"/>
<polygon fill="blue" stroke="blue" points="1353.07,-2689.08 1363.38,-2691.51 1356.83,-2683.18 1353.07,-2689.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-2515C1257.49,-2515 1299.15,-2515 1336.95,-2515"/>
<polygon fill="blue" stroke="blue" points="1336.98,-2518.5 1346.98,-2515 1336.98,-2511.5 1336.98,-2518.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="1232,-2587 1176,-2587 1176,-2551 1232,-2551 1232,-2587"/>
<text text-anchor="middle" x="1204" y="-2565.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.24,-2575.63C1256.55,-2582.95 1291.34,-2597.13 1311.5,-2622 1351.11,-2670.86 1300.73,-2716.39 1347,-2759 1400.75,-2808.49 1446.18,-2749.68 1509,-2787 1565.53,-2820.58 1607.26,-2888.26 1627.27,-2926"/>
<polygon fill="blue" stroke="blue" points="1624.18,-2927.65 1631.89,-2934.92 1630.4,-2924.43 1624.18,-2927.65"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.17,-2562.27C1259.1,-2555.6 1301.73,-2545.04 1339.87,-2535.59"/>
<polygon fill="blue" stroke="blue" points="1341.11,-2538.89 1349.97,-2533.09 1339.42,-2532.1 1341.11,-2538.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1231,-2670 1177,-2670 1177,-2634 1231,-2634 1231,-2670"/>
<text text-anchor="middle" x="1204" y="-2648.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.1,-2651.85C1254.95,-2653.11 1289.74,-2658.7 1311.5,-2679 1348.44,-2713.47 1328.57,-2739.96 1347,-2787 1366.49,-2836.75 1393.27,-2892.95 1409.28,-2925.54"/>
<polygon fill="blue" stroke="blue" points="1406.32,-2927.45 1413.89,-2934.87 1412.59,-2924.35 1406.32,-2927.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-2658.51C1261.38,-2665.97 1311.87,-2678.47 1353.48,-2688.78"/>
<polygon fill="blue" stroke="blue" points="1352.76,-2692.21 1363.3,-2691.21 1354.44,-2685.41 1352.76,-2692.21"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="1232,-2724 1176,-2724 1176,-2688 1232,-2688 1232,-2724"/>
<text text-anchor="middle" x="1204" y="-2702.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.08,-2721.77C1260.56,-2738.28 1306.72,-2764.83 1347,-2787 1418.41,-2826.31 1438.15,-2832.69 1509,-2873 1541.1,-2891.26 1576.87,-2913.12 1602.99,-2929.37"/>
<polygon fill="blue" stroke="blue" points="1601.46,-2932.55 1611.8,-2934.87 1605.17,-2926.61 1601.46,-2932.55"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="1238.5,-2396 1169.5,-2396 1169.5,-2360 1238.5,-2360 1238.5,-2396"/>
<text text-anchor="middle" x="1204" y="-2374.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1238.53,-2377.06C1262.55,-2378.33 1293.69,-2384.34 1311.5,-2405 1363.11,-2464.89 1328.46,-2682.14 1347,-2759 1361.87,-2820.65 1392.02,-2888.86 1409.55,-2925.72"/>
<polygon fill="blue" stroke="blue" points="1406.44,-2927.32 1413.92,-2934.82 1412.74,-2924.29 1406.44,-2927.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1232,-2450 1176,-2450 1176,-2414 1232,-2414 1232,-2450"/>
<text text-anchor="middle" x="1204" y="-2428.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.02,-2433.11C1298.66,-2436.4 1468.35,-2448.28 1509,-2485 1576.16,-2545.68 1623.1,-2833.26 1636.55,-2924.88"/>
<polygon fill="blue" stroke="blue" points="1633.09,-2925.42 1637.99,-2934.82 1640.02,-2924.42 1633.09,-2925.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.core.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.core.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1501,-2419 1347,-2419 1347,-2383 1501,-2383 1501,-2419"/>
<text text-anchor="middle" x="1424" y="-2397.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.17,-2428.14C1258.36,-2424.41 1299.41,-2418.57 1336.74,-2413.27"/>
<polygon fill="blue" stroke="blue" points="1337.24,-2416.73 1346.65,-2411.86 1336.25,-2409.8 1337.24,-2416.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1501.28,-2389.32C1531,-2384.77 1564.21,-2379.68 1590.74,-2375.62"/>
<polygon fill="blue" stroke="blue" points="1591.58,-2379.03 1600.93,-2374.06 1590.52,-2372.11 1591.58,-2379.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1641.87,-2386.36C1640.58,-2455.87 1645.94,-2705.07 1782,-2826 1799.31,-2841.39 1822.33,-2849.41 1845.12,-2853.3"/>
<polygon fill="blue" stroke="blue" points="1844.8,-2856.79 1855.2,-2854.77 1845.81,-2849.87 1844.8,-2856.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="938.5,-1398 753.5,-1398 753.5,-1362 938.5,-1362 938.5,-1398"/>
<text text-anchor="middle" x="846" y="-1376.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M938.67,-1364.76C986.97,-1362.36 1043.06,-1369.53 1077,-1407 1117.21,-1451.39 1059.91,-2437.58 1096.5,-2485 1112.75,-2506.06 1142.59,-2513.12 1166.56,-2515.15"/>
<polygon fill="blue" stroke="blue" points="1166.56,-2518.66 1176.75,-2515.76 1166.98,-2511.67 1166.56,-2518.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;pub fn from_service_id(service_id: ServiceId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M1 = Self::calc_M1(service_id); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let raw_uuid_bytes = service_id.raw_uuid().into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = RistrettoPoint...">
<polygon fill="white" stroke="black" points="1266.5,-1268 1141.5,-1268 1141.5,-1232 1266.5,-1232 1266.5,-1268"/>
<text text-anchor="middle" x="1204" y="-1246.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M937.43,-1361.96C980.51,-1351.98 1032.28,-1337.92 1077,-1320 1108.45,-1307.4 1141.87,-1288.55 1166.38,-1273.59"/>
<polygon fill="blue" stroke="blue" points="1168.32,-1276.5 1174.99,-1268.27 1164.65,-1270.54 1168.32,-1276.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="907.5,-1452 784.5,-1452 784.5,-1416 907.5,-1416 907.5,-1452"/>
<text text-anchor="middle" x="846" y="-1430.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M907.73,-1429.2C961.36,-1428.67 1037.06,-1437.75 1077,-1487 1113.92,-1532.53 1060.07,-2496.07 1096.5,-2542 1112.71,-2562.44 1141.99,-2568.75 1165.76,-2570.19"/>
<polygon fill="blue" stroke="blue" points="1165.77,-2573.69 1175.89,-2570.54 1166.01,-2566.69 1165.77,-2573.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M907.97,-1439.04C956.67,-1440.31 1025.12,-1435.73 1077,-1407 1131.03,-1377.08 1170.5,-1313.66 1189.77,-1277.24"/>
<polygon fill="blue" stroke="blue" points="1192.98,-1278.66 1194.45,-1268.17 1186.76,-1275.46 1192.98,-1278.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn new(backup_id: &amp;libsignal_account_keys::BackupId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20231003_Signal_BackupId&#39; , &amp;backup_id.0).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1451,-413 1397,-413 1397,-377 1451,-377 1451,-413"/>
<text text-anchor="middle" x="1424" y="-391.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.01,-404C1470.52,-412.23 1496.02,-426.43 1509,-448 1539.23,-498.22 1491.04,-666.34 1529,-711 1544.1,-728.77 1568.71,-735.93 1590.97,-738.47"/>
<polygon fill="blue" stroke="blue" points="1590.73,-741.96 1600.99,-739.34 1591.33,-734.99 1590.73,-741.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="879,-1285 813,-1285 813,-1249 879,-1249 879,-1285"/>
<text text-anchor="middle" x="846" y="-1263.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M879.31,-1267.84C931.02,-1271.13 1031.22,-1285.93 1077,-1350 1115.5,-1403.89 1055.4,-2490.06 1096.5,-2542 1112.69,-2562.46 1141.97,-2568.76 1165.74,-2570.2"/>
<polygon fill="blue" stroke="blue" points="1165.76,-2573.7 1175.87,-2570.55 1166,-2566.7 1165.76,-2573.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M879.22,-1265.46C935.81,-1262.76 1054.35,-1257.1 1131.22,-1253.43"/>
<polygon fill="blue" stroke="blue" points="1131.49,-1256.92 1141.31,-1252.95 1131.15,-1249.93 1131.49,-1256.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="880.5,-1177 811.5,-1177 811.5,-1141 880.5,-1141 880.5,-1177"/>
<text text-anchor="middle" x="846" y="-1155.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.81,-1150.95C931.82,-1141.05 1027.74,-1131.62 1077,-1186 1116.73,-1229.85 1075.76,-2195.58 1096.5,-2251 1111.95,-2292.28 1147.03,-2329.62 1172.72,-2352.96"/>
<polygon fill="blue" stroke="blue" points="1170.56,-2355.73 1180.37,-2359.75 1175.21,-2350.49 1170.56,-2355.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.5,-1159.27C925.95,-1160.45 1009.26,-1165.53 1077,-1186 1108.45,-1195.5 1141.47,-1212.57 1165.81,-1226.69"/>
<polygon fill="blue" stroke="blue" points="1164.31,-1229.87 1174.7,-1231.94 1167.87,-1223.84 1164.31,-1229.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="910,-1231 782,-1231 782,-1195 910,-1195 910,-1231"/>
<text text-anchor="middle" x="846" y="-1209.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.01,-1200.27C962.87,-1193.64 1036.1,-1194.73 1077,-1240 1123.38,-1291.33 1054.31,-2430.18 1096.5,-2485 1112.73,-2506.08 1142.57,-2513.14 1166.54,-2515.17"/>
<polygon fill="blue" stroke="blue" points="1166.55,-2518.67 1176.74,-2515.77 1166.96,-2511.69 1166.55,-2518.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.24,-1219.57C972.16,-1226.01 1066.39,-1235.8 1131.12,-1242.53"/>
<polygon fill="blue" stroke="blue" points="1130.94,-1246.03 1141.25,-1243.58 1131.66,-1239.07 1130.94,-1246.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="880.5,-1535 811.5,-1535 811.5,-1499 880.5,-1499 880.5,-1535"/>
<text text-anchor="middle" x="846" y="-1513.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.75,-1509.01C931.68,-1499.19 1027.48,-1489.85 1077,-1544 1103.52,-1573 1082.56,-2214.26 1096.5,-2251 1112.14,-2292.2 1147.18,-2329.56 1172.82,-2352.93"/>
<polygon fill="blue" stroke="blue" points="1170.64,-2355.68 1180.44,-2359.72 1175.3,-2350.45 1170.64,-2355.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;fn new(room_id: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20230413_Signal_CallLinkRoomId&#39; , room_id).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1231,-1535 1177,-1535 1177,-1499 1231,-1499 1231,-1535"/>
<text text-anchor="middle" x="1204" y="-1513.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.81,-1517C947.87,-1517 1097.17,-1517 1166.42,-1517"/>
<polygon fill="blue" stroke="blue" points="1166.82,-1520.5 1176.82,-1517 1166.82,-1513.5 1166.82,-1520.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.83,-1521.63C928.91,-1526.36 1017.75,-1528.05 1077,-1487 1150.13,-1436.33 1184.26,-1329.42 1196.89,-1278.34"/>
<polygon fill="blue" stroke="blue" points="1200.36,-1278.86 1199.26,-1268.33 1193.55,-1277.25 1200.36,-1278.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.06,-1510.45C1290.54,-1494.08 1436.72,-1445.51 1509,-1348 1579.71,-1252.6 1625.75,-873.27 1637.52,-766.25"/>
<polygon fill="blue" stroke="blue" points="1641.01,-766.53 1638.61,-756.21 1634.05,-765.77 1641.01,-766.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="879,-1643 813,-1643 813,-1607 879,-1607 879,-1643"/>
<text text-anchor="middle" x="846" y="-1621.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M856.93,-1643.37C894.42,-1713.79 1027.67,-1974.24 1077,-2207 1087.88,-2258.35 1063.42,-2638.25 1096.5,-2679 1112.84,-2699.12 1141.84,-2705.49 1165.46,-2707.04"/>
<polygon fill="blue" stroke="blue" points="1165.4,-2710.54 1175.53,-2707.43 1165.68,-2703.54 1165.4,-2710.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M879.39,-1631.99C928.96,-1640.61 1023.51,-1648.52 1077,-1598 1113.41,-1563.61 1081.79,-1534.88 1096.5,-1487 1120.83,-1407.83 1165.04,-1320.31 1188.11,-1277.14"/>
<polygon fill="blue" stroke="blue" points="1191.3,-1278.59 1192.96,-1268.13 1185.13,-1275.28 1191.3,-1278.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="873,-1589 819,-1589 819,-1553 873,-1553 873,-1589"/>
<text text-anchor="middle" x="846" y="-1567.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.22,-1564.5C921.7,-1554.22 1025.15,-1540.81 1077,-1598 1115.22,-1640.15 1061.72,-2576.97 1096.5,-2622 1112.76,-2643.06 1142.6,-2650.11 1166.57,-2652.15"/>
<polygon fill="blue" stroke="blue" points="1166.57,-2655.66 1176.76,-2652.75 1166.98,-2648.67 1166.57,-2655.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.13,-1576.11C919.65,-1583.61 1017.55,-1591.97 1077,-1544 1097.84,-1527.18 1086.67,-1511.9 1096.5,-1487 1126.99,-1409.76 1168.7,-1321.06 1189.72,-1277.32"/>
<polygon fill="blue" stroke="blue" points="1192.94,-1278.72 1194.13,-1268.19 1186.63,-1275.68 1192.94,-1278.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_uid(&amp;self, user_id: libsignal_core::Aci) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(user_id.into()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.encrypt_uid_...">
<polygon fill="white" stroke="black" points="895,-1026 797,-1026 797,-990 895,-990 895,-1026"/>
<text text-anchor="middle" x="846" y="-1004.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M895.17,-1008.93C944.79,-1012.06 1022.39,-1023.26 1077,-1061 1136.32,-1101.99 1175.18,-1180.84 1192.54,-1222.56"/>
<polygon fill="blue" stroke="blue" points="1189.31,-1223.89 1196.31,-1231.84 1195.79,-1221.26 1189.31,-1223.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="895,-972 797,-972 797,-936 895,-936 895,-972"/>
<text text-anchor="middle" x="846" y="-950.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="1239,-889 1169,-889 1169,-853 1239,-853 1239,-889"/>
<text text-anchor="middle" x="1204" y="-867.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M895.31,-951.47C942.36,-948.14 1015.58,-940.6 1077,-924 1105.42,-916.32 1135.87,-903.64 1159.73,-892.61"/>
<polygon fill="blue" stroke="blue" points="1161.29,-895.74 1168.86,-888.32 1158.32,-889.4 1161.29,-895.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;service_id: libsignal_core::ServiceId, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(ser...">
<polygon fill="white" stroke="black" points="919,-752 773,-752 773,-716 919,-716 919,-752"/>
<text text-anchor="middle" x="846" y="-730.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M919.25,-730.65C970.71,-732.44 1037.5,-743.99 1077,-787 1097.8,-809.65 1089.53,-894.05 1096.5,-924 1122.79,-1037.01 1170.77,-1166.87 1192.18,-1222.44"/>
<polygon fill="blue" stroke="blue" points="1188.98,-1223.88 1195.86,-1231.94 1195.51,-1221.35 1188.98,-1223.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="919,-698 773,-698 773,-662 919,-662 919,-698"/>
<text text-anchor="middle" x="846" y="-676.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M919.17,-667.55C970.08,-663.2 1036.21,-667.2 1077,-707 1121.02,-749.95 1055.4,-798.25 1096.5,-844 1112.07,-861.33 1137.03,-868.27 1158.87,-870.79"/>
<polygon fill="blue" stroke="blue" points="1158.7,-874.29 1168.97,-871.68 1159.31,-867.31 1158.7,-874.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="921.5,-590 770.5,-590 770.5,-554 921.5,-554 921.5,-590"/>
<text text-anchor="middle" x="846" y="-568.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="1239,-106 1169,-106 1169,-70 1239,-70 1239,-106"/>
<text text-anchor="middle" x="1204" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M921.53,-581.96C971.25,-584.32 1034.96,-578.49 1077,-542 1143.04,-484.68 1186.66,-206.42 1199.24,-116.26"/>
<polygon fill="blue" stroke="blue" points="1202.73,-116.61 1200.62,-106.22 1195.79,-115.65 1202.73,-116.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_profile_key_bytes( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_bytes: ProfileKeyBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::ProfileKeyCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_...">
<polygon fill="white" stroke="black" points="944,-644 748,-644 748,-608 944,-608 944,-644"/>
<text text-anchor="middle" x="846" y="-622.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_profile_key_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;pub fn new(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut encoded_profile_key = profile_key_bytes; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profile_key[0] &amp;= 254; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profil...">
<polygon fill="white" stroke="black" points="1231,-579 1177,-579 1177,-543 1231,-543 1231,-579"/>
<text text-anchor="middle" x="1204" y="-557.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M944.13,-618.42C985.37,-614.22 1033.8,-607.98 1077,-599 1107.87,-592.59 1142.07,-582.05 1167.04,-573.69"/>
<polygon fill="blue" stroke="blue" points="1168.46,-576.91 1176.8,-570.38 1166.21,-570.28 1168.46,-576.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;pub fn compress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: self.reserved, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1245.5,-1726 1162.5,-1726 1162.5,-1690 1245.5,-1690 1245.5,-1726"/>
<text text-anchor="middle" x="1204" y="-1704.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1245.59,-1713.1C1266.3,-1716.96 1291.31,-1723.62 1311.5,-1735 1349.17,-1756.24 1383.06,-1793.54 1403.34,-1818.75"/>
<polygon fill="blue" stroke="blue" points="1400.74,-1821.11 1409.68,-1826.79 1406.24,-1816.77 1400.74,-1821.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="1231,-1780 1177,-1780 1177,-1744 1231,-1744 1231,-1780"/>
<text text-anchor="middle" x="1204" y="-1758.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.04,-1770.35C1254.21,-1778.77 1287.97,-1793.61 1311.5,-1815 1333.58,-1835.07 1323.75,-1853.29 1347,-1872 1358.48,-1881.23 1373.35,-1887.44 1386.9,-1891.54"/>
<polygon fill="blue" stroke="blue" points="1386.35,-1895.02 1396.92,-1894.29 1388.2,-1888.27 1386.35,-1895.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="913,-219 779,-219 779,-183 913,-183 913,-219"/>
<text text-anchor="middle" x="846" y="-197.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M913.16,-200.53C963.47,-203.57 1031.55,-215.41 1077,-254 1079.86,-256.43 1161.75,-458.8 1191.95,-533.61"/>
<polygon fill="blue" stroke="blue" points="1188.7,-534.92 1195.69,-542.88 1195.2,-532.3 1188.7,-534.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="556.5,-2824 284.5,-2824 284.5,-2788 556.5,-2788 556.5,-2824"/>
<text text-anchor="middle" x="420.5" y="-2802.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="873,-2824 819,-2824 819,-2788 873,-2788 873,-2824"/>
<text text-anchor="middle" x="846" y="-2802.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M556.66,-2806C644.9,-2806 753.64,-2806 808.97,-2806"/>
<polygon fill="blue" stroke="blue" points="808.98,-2809.5 818.98,-2806 808.98,-2802.5 808.98,-2809.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="874,-3094 818,-3094 818,-3058 874,-3058 874,-3094"/>
<text text-anchor="middle" x="846" y="-3072.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M429.65,-2824.01C451.78,-2870.56 517.91,-2995 615,-3049 675.92,-3082.88 759.83,-3083.25 807.64,-3079.97"/>
<polygon fill="blue" stroke="blue" points="808.14,-3083.44 817.84,-3079.17 807.6,-3076.46 808.14,-3083.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M556.65,-2804.71C571.29,-2799.2 584.62,-2790.98 595,-2779 625.03,-2744.37 582.39,-1161.21 615,-1129 651.52,-1092.92 1029.38,-1109.84 1077,-1129 1124.12,-1147.96 1163.51,-1193.9 1185.12,-1223.4"/>
<polygon fill="blue" stroke="blue" points="1182.33,-1225.51 1190.99,-1231.61 1188.02,-1221.44 1182.33,-1225.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M424.31,-2733.83C443.27,-2610.37 552.97,-1881.77 595,-1284 596.71,-1259.64 597.54,-422.07 615,-405 651.71,-369.12 1030.68,-382.87 1077,-405 1132.8,-431.66 1171.83,-496.43 1190.49,-533.58"/>
<polygon fill="blue" stroke="blue" points="1187.48,-535.38 1195.01,-542.84 1193.77,-532.32 1187.48,-535.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="873,-2770 819,-2770 819,-2734 873,-2734 873,-2770"/>
<text text-anchor="middle" x="846" y="-2748.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M587.06,-2752C668.54,-2752 759.61,-2752 808.77,-2752"/>
<polygon fill="blue" stroke="blue" points="808.9,-2755.5 818.9,-2752 808.9,-2748.5 808.9,-2755.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1644.89,-756.06C1658.4,-859.17 1725.76,-1384.04 1754,-1815 1757.67,-1871.07 1745.37,-2783.4 1782,-2826 1797.7,-2844.26 1821.19,-2852.95 1844.95,-2856.56"/>
<polygon fill="blue" stroke="blue" points="1844.78,-2860.07 1855.13,-2857.82 1845.63,-2853.12 1844.78,-2860.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;pub fn get_point_single_elligator(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes_single_elligator( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.internal_sho.squeeze_and_ratchet_as_array(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1737.5,-702 1545.5,-702 1545.5,-666 1737.5,-666 1737.5,-702"/>
<text text-anchor="middle" x="1641.5" y="-680.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M1737.59,-697.19C1743.76,-700.87 1749.35,-705.41 1754,-711 1826.6,-798.25 1706.84,-1135.95 1782,-1221 1784.96,-1224.35 1788.18,-1227.37 1791.61,-1230.09"/>
<polygon fill="blue" stroke="blue" points="1789.78,-1233.09 1799.99,-1235.93 1793.78,-1227.34 1789.78,-1233.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="481,-1249 360,-1249 360,-1213 481,-1213 481,-1249"/>
<text text-anchor="middle" x="420.5" y="-1227.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M450.26,-1249.06C486.88,-1270.9 552.87,-1306.4 615,-1320 712.05,-1341.25 1432.42,-1366.3 1509,-1303 1593.81,-1232.9 1629.65,-870.81 1638.32,-766.28"/>
<polygon fill="blue" stroke="blue" points="1641.82,-766.43 1639.14,-756.18 1634.85,-765.86 1641.82,-766.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="460,-1195 381,-1195 381,-1159 460,-1159 460,-1195"/>
<text text-anchor="middle" x="420.5" y="-1173.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M460.2,-1183.63C500.45,-1188.07 562.09,-1187.43 595,-1150 623.44,-1117.65 584.15,-405.06 615,-375 651.76,-339.17 1031.65,-350.95 1077,-375 1140.48,-408.67 1177.85,-490.21 1193.81,-533.28"/>
<polygon fill="blue" stroke="blue" points="1190.57,-534.62 1197.24,-542.85 1197.16,-532.26 1190.57,-534.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="874,-2716 818,-2716 818,-2680 874,-2680 874,-2716"/>
<text text-anchor="middle" x="846" y="-2694.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M460.29,-1170.29C500.61,-1165.79 562.32,-1166.37 595,-1204 648.44,-1265.54 560.42,-2610.47 615,-2671 663.11,-2724.35 756.12,-2716.38 807.9,-2706.7"/>
<polygon fill="blue" stroke="blue" points="808.87,-2710.07 817.99,-2704.69 807.5,-2703.21 808.87,-2710.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M460.29,-1170.28C500.63,-1165.78 562.34,-1166.35 595,-1204 652.34,-1270.1 556.43,-2713.99 615,-2779 663.34,-2832.65 757.08,-2824.31 808.71,-2814.55"/>
<polygon fill="blue" stroke="blue" points="809.64,-2817.93 818.75,-2812.53 808.26,-2811.07 809.64,-2817.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M460.34,-1181.33C498.68,-1183.43 556.94,-1180.51 595,-1150 614,-1134.77 594.89,-1112.72 615,-1099 657.41,-1070.08 1030.51,-1077.24 1077,-1099 1131.65,-1124.57 1170.89,-1186.79 1189.95,-1222.88"/>
<polygon fill="blue" stroke="blue" points="1186.89,-1224.58 1194.58,-1231.88 1193.12,-1221.38 1186.89,-1224.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_Credentials_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get...">
<polygon fill="white" stroke="black" points="460,-1141 381,-1141 381,-1105 460,-1105 460,-1141"/>
<text text-anchor="middle" x="420.5" y="-1119.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M422.2,-1104.73C427.29,-983.44 462.69,-295.47 615,-171 654.75,-138.52 1026.81,-160.25 1077,-171 1282.8,-215.09 1389.6,-191.67 1509,-365 1552.69,-428.42 1479.65,-651.87 1529,-711 1543.94,-728.9 1568.53,-736.08 1590.83,-738.59"/>
<polygon fill="blue" stroke="blue" points="1590.61,-742.09 1600.87,-739.44 1591.2,-735.11 1590.61,-742.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="914.5,-453 777.5,-453 777.5,-417 914.5,-417 914.5,-453"/>
<text text-anchor="middle" x="846" y="-431.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.59,-433.4C961.75,-434.53 1025.25,-440.64 1077,-462 1117.38,-478.66 1155.62,-512.13 1179.16,-535.51"/>
<polygon fill="blue" stroke="blue" points="1176.76,-538.06 1186.27,-542.72 1181.74,-533.14 1176.76,-538.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyCommitment_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="885.5,-507 806.5,-507 806.5,-471 885.5,-471 885.5,-507"/>
<text text-anchor="middle" x="846" y="-485.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M885.56,-486.63C936.32,-485.72 1025.19,-492.12 1077,-542 1100.88,-564.99 1072.59,-591.04 1096.5,-614 1234.77,-746.79 1484.38,-748.38 1590.54,-742.26"/>
<polygon fill="blue" stroke="blue" points="1590.89,-745.74 1600.66,-741.62 1590.46,-738.75 1590.89,-745.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="932,-302 760,-302 760,-266 932,-266 932,-302"/>
<text text-anchor="middle" x="846" y="-280.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M932.16,-287.12C978.85,-292.64 1035.5,-305.94 1077,-337 1144.4,-387.44 1180.89,-485.19 1195.42,-533.12"/>
<polygon fill="blue" stroke="blue" points="1192.1,-534.22 1198.27,-542.83 1198.81,-532.25 1192.1,-534.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<path fill="none" stroke="blue" d="M1239.28,-84.39C1335.66,-76.31 1611.24,-67.74 1754,-214 1875.89,-338.88 1921.26,-922.28 1930.25,-1057.82"/>
<polygon fill="blue" stroke="blue" points="1926.76,-1058.08 1930.9,-1067.83 1933.74,-1057.62 1926.76,-1058.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY...">
<polygon fill="white" stroke="black" points="1459.5,-579 1388.5,-579 1388.5,-543 1459.5,-543 1459.5,-579"/>
<text text-anchor="middle" x="1424" y="-557.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1205.52,-106.34C1208.39,-172.66 1226.94,-402.77 1347,-531 1355.48,-540.06 1367.05,-546.43 1378.59,-550.89"/>
<polygon fill="blue" stroke="blue" points="1377.62,-554.26 1388.22,-554.21 1379.9,-547.64 1377.62,-554.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1243.5,-52 1164.5,-52 1164.5,-16 1243.5,-16 1243.5,-52"/>
<text text-anchor="middle" x="1204" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1243.62,-37.28C1265.1,-40.63 1291.47,-47.38 1311.5,-61 1435.63,-145.42 1459.1,-193.42 1509,-335 1522.91,-374.46 1502.27,-678.82 1529,-711 1543.9,-728.94 1568.49,-736.11 1590.79,-738.62"/>
<polygon fill="blue" stroke="blue" points="1590.58,-742.12 1600.83,-739.47 1591.16,-735.14 1590.58,-742.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="948.5,-106 743.5,-106 743.5,-70 948.5,-70 948.5,-106"/>
<text text-anchor="middle" x="846" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M948.54,-88C1017.76,-88 1106.02,-88 1158.32,-88"/>
<polygon fill="blue" stroke="blue" points="1158.6,-91.5 1168.6,-88 1158.6,-84.5 1158.6,-91.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M948.54,-72.6C1015.97,-62.37 1101.49,-49.4 1154.21,-41.4"/>
<polygon fill="blue" stroke="blue" points="1154.94,-44.83 1164.3,-39.87 1153.89,-37.91 1154.94,-44.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M948.58,-103.86C993.21,-115.59 1043.07,-135.9 1077,-171 1177.93,-275.4 1198.01,-461.2 1202.01,-532.27"/>
<polygon fill="blue" stroke="blue" points="1198.53,-532.84 1202.52,-542.66 1205.52,-532.5 1198.53,-532.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1456.8,-579.15C1494.87,-600.88 1558.67,-637.29 1600.17,-660.98"/>
<polygon fill="blue" stroke="blue" points="1598.5,-664.06 1608.92,-665.98 1601.97,-657.98 1598.5,-664.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M1211.55,-542.76C1227.36,-501.83 1271.96,-403.3 1347,-365 1411.13,-332.27 1443.67,-334.74 1509,-365 1661.79,-435.78 1692.13,-497.39 1754,-654 1777.18,-712.66 1740.36,-1173.62 1782,-1221 1784.95,-1224.35 1788.16,-1227.38 1791.59,-1230.12"/>
<polygon fill="blue" stroke="blue" points="1789.75,-1233.1 1799.95,-1235.97 1793.76,-1227.37 1789.75,-1233.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-561C1267.68,-561 1333.87,-561 1378.15,-561"/>
<polygon fill="blue" stroke="blue" points="1378.35,-564.5 1388.35,-561 1378.35,-557.5 1378.35,-564.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="874,-3040 818,-3040 818,-3004 874,-3004 874,-3040"/>
<text text-anchor="middle" x="846" y="-3018.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.15,-3015.45C922.75,-3005.53 1024.46,-2993.27 1077,-3049 1128.31,-3103.42 1042.1,-3333.67 1096.5,-3385 1163.17,-3447.91 1435.47,-3438.73 1509,-3384 1575.87,-3334.23 1622.54,-3068.64 1636.29,-2981.05"/>
<polygon fill="blue" stroke="blue" points="1639.77,-2981.46 1637.84,-2971.04 1632.85,-2980.39 1639.77,-2981.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.28,-2745.71C921.41,-2735.92 1023.65,-2723.49 1077,-2779 1115.92,-2819.5 1055.28,-2992.85 1096.5,-3031 1166.63,-3095.91 1220.36,-3059.71 1311.5,-3031 1344.47,-3020.61 1376.17,-2996.62 1397.29,-2977.97"/>
<polygon fill="blue" stroke="blue" points="1399.78,-2980.43 1404.84,-2971.12 1395.08,-2975.24 1399.78,-2980.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.27,-2691.34C923.08,-2681.22 1025.11,-2668.67 1077,-2725 1119.11,-2770.71 1051.79,-3240.83 1096.5,-3284 1130.87,-3317.19 1266.02,-3298.65 1311.5,-3284 1414.4,-3250.85 1433.15,-3219.04 1509,-3142 1559.16,-3091.06 1603.41,-3019.05 1625.53,-2980.27"/>
<polygon fill="blue" stroke="blue" points="1628.81,-2981.59 1630.67,-2971.16 1622.71,-2978.16 1628.81,-2981.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.38,-2704.76C923.35,-2715.02 1025.63,-2727.81 1077,-2671 1099.06,-2646.6 1089.34,-1519.1 1096.5,-1487 1114.52,-1406.19 1161.44,-1319.44 1186.56,-1276.8"/>
<polygon fill="blue" stroke="blue" points="1189.61,-1278.52 1191.72,-1268.14 1183.59,-1274.94 1189.61,-1278.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="873,-2662 819,-2662 819,-2626 873,-2626 873,-2662"/>
<text text-anchor="middle" x="846" y="-2640.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.37,-2637.62C921.65,-2627.7 1024.11,-2615.05 1077,-2671 1126.24,-2723.1 1044.3,-2943.87 1096.5,-2993 1176.33,-3068.14 1320.03,-3008.09 1386.92,-2973.36"/>
<polygon fill="blue" stroke="blue" points="1388.64,-2976.41 1395.84,-2968.64 1385.36,-2970.22 1388.64,-2976.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="873,-2878 819,-2878 819,-2842 873,-2842 873,-2878"/>
<text text-anchor="middle" x="846" y="-2856.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.22,-2853.76C921.26,-2844.07 1023.34,-2831.79 1077,-2887 1111.21,-2922.2 1060.3,-3073.86 1096.5,-3107 1131.74,-3139.26 1268.95,-3128.73 1311.5,-3107 1363.36,-3080.52 1396.7,-3017.4 1412.41,-2980.72"/>
<polygon fill="blue" stroke="blue" points="1415.79,-2981.7 1416.37,-2971.13 1409.32,-2979.03 1415.79,-2981.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="874,-2986 818,-2986 818,-2950 874,-2950 874,-2986"/>
<text text-anchor="middle" x="846" y="-2964.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.16,-2961.44C922.8,-2951.49 1024.55,-2939.19 1077,-2995 1104.05,-3023.79 1067.81,-3322.84 1096.5,-3350 1163.07,-3413.02 1434.69,-3403.67 1509,-3350 1630.74,-3262.08 1641.6,-3057.09 1641.28,-2981.58"/>
<polygon fill="blue" stroke="blue" points="1644.78,-2981.37 1641.17,-2971.41 1637.78,-2981.45 1644.78,-2981.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="873,-2608 819,-2608 819,-2572 873,-2572 873,-2608"/>
<text text-anchor="middle" x="846" y="-2586.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.01,-2583.68C921.16,-2573.71 1024.08,-2560.8 1077,-2617 1129.34,-2672.58 1041,-2907.57 1096.5,-2960 1137.14,-2998.4 1308.95,-2973.48 1385.7,-2960.01"/>
<polygon fill="blue" stroke="blue" points="1386.64,-2963.4 1395.87,-2958.19 1385.41,-2956.51 1386.64,-2963.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.31,-2596.15C921.96,-2605.78 1025.67,-2617.82 1077,-2560 1109.7,-2523.17 1085.48,-835 1096.5,-787 1114.14,-710.16 1160.42,-628.51 1185.77,-587.61"/>
<polygon fill="blue" stroke="blue" points="1188.79,-589.38 1191.15,-579.05 1182.87,-585.66 1188.79,-589.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.27,-2596.12C921.86,-2605.69 1025.46,-2617.63 1077,-2560 1096.87,-2537.78 1089.99,-1516.09 1096.5,-1487 1114.59,-1406.21 1161.48,-1319.45 1186.58,-1276.8"/>
<polygon fill="blue" stroke="blue" points="1189.62,-1278.53 1191.73,-1268.14 1183.61,-1274.95 1189.62,-1278.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="874,-2932 818,-2932 818,-2896 874,-2896 874,-2932"/>
<text text-anchor="middle" x="846" y="-2910.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.18,-2907.43C922.83,-2897.46 1024.61,-2885.13 1077,-2941 1105.23,-2971.11 1066.56,-3283.59 1096.5,-3312 1129.75,-3343.55 1471.43,-3338.25 1509,-3312 1620.04,-3234.42 1637.61,-3052.38 1640.17,-2981.73"/>
<polygon fill="blue" stroke="blue" points="1643.68,-2981.48 1640.46,-2971.39 1636.68,-2981.28 1643.68,-2981.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.26,-2799.73C921.34,-2789.99 1023.5,-2777.63 1077,-2833 1113.56,-2870.84 1057.79,-3033.35 1096.5,-3069 1131.65,-3101.36 1267.54,-3087.72 1311.5,-3069 1353.94,-3050.93 1388.02,-3007.91 1406.87,-2979.64"/>
<polygon fill="blue" stroke="blue" points="1409.95,-2981.33 1412.44,-2971.03 1404.07,-2977.52 1409.95,-2981.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.14,-3072.99C923.19,-3069.24 1026.24,-3069.42 1077,-3129 1119.03,-3178.34 1049.16,-3375.73 1096.5,-3420 1163.45,-3482.61 1436.05,-3474.51 1509,-3419 1580.83,-3364.35 1624.68,-3073.47 1636.95,-2981.14"/>
<polygon fill="blue" stroke="blue" points="1640.43,-2981.51 1638.26,-2971.14 1633.49,-2980.6 1640.43,-2981.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M1239.15,-888.47C1326.92,-932.65 1568.46,-1049.83 1782,-1113 1809.45,-1121.12 1840.48,-1127.2 1867.17,-1131.51"/>
<polygon fill="blue" stroke="blue" points="1866.75,-1134.99 1877.17,-1133.08 1867.84,-1128.07 1866.75,-1134.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M1(service_id: ServiceId) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_UID_CalcM1&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;service_id.service_id_binary(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1459.5,-1268 1388.5,-1268 1388.5,-1232 1459.5,-1232 1459.5,-1268"/>
<text text-anchor="middle" x="1424" y="-1246.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1215.37,-889.02C1250.51,-950.13 1365.28,-1149.65 1407.35,-1222.8"/>
<polygon fill="blue" stroke="blue" points="1404.55,-1224.94 1412.57,-1231.86 1410.62,-1221.45 1404.55,-1224.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="922,-835 770,-835 770,-799 922,-799 922,-835"/>
<text text-anchor="middle" x="846" y="-813.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.09,-824.01C967.15,-828.67 1025.53,-835.48 1077,-844 1104.42,-848.54 1134.91,-855.03 1159.02,-860.51"/>
<polygon fill="blue" stroke="blue" points="1158.41,-863.96 1168.94,-862.79 1159.98,-857.14 1158.41,-863.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_UidEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_a1 = ...">
<polygon fill="white" stroke="black" points="1243.5,-835 1164.5,-835 1164.5,-799 1243.5,-799 1243.5,-835"/>
<text text-anchor="middle" x="1204" y="-813.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.06,-817C991.92,-817 1094,-817 1153.96,-817"/>
<polygon fill="blue" stroke="blue" points="1154.28,-820.5 1164.28,-817 1154.28,-813.5 1154.28,-820.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.06,-805.49C971.86,-802.26 1035.44,-807.24 1077,-844 1104.41,-868.25 1086.48,-888.8 1096.5,-924 1128.28,-1035.59 1173.39,-1166.19 1193.12,-1222.2"/>
<polygon fill="blue" stroke="blue" points="1189.87,-1223.51 1196.5,-1231.77 1196.47,-1221.18 1189.87,-1223.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="922,-889 770,-889 770,-853 922,-853 922,-889"/>
<text text-anchor="middle" x="846" y="-867.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.06,-871C993.84,-871 1099.65,-871 1158.81,-871"/>
<polygon fill="blue" stroke="blue" points="1158.95,-874.5 1168.95,-871 1158.95,-867.5 1158.95,-874.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.12,-870.85C971.46,-874.59 1034.5,-887.16 1077,-924 1168.88,-1003.65 1194.12,-1158.38 1200.75,-1221.82"/>
<polygon fill="blue" stroke="blue" points="1197.28,-1222.27 1201.73,-1231.89 1204.25,-1221.6 1197.28,-1222.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1243.65,-809.99C1322.84,-795.62 1503.45,-762.86 1591.04,-746.97"/>
<polygon fill="blue" stroke="blue" points="1591.78,-750.39 1601,-745.17 1590.53,-743.51 1591.78,-750.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M1266.85,-1264.38C1291.62,-1269.45 1320.52,-1274.5 1347,-1277 1541.07,-1295.29 1590.59,-1257.85 1782,-1221 1809.99,-1215.61 1840.99,-1209.98 1867.51,-1205.26"/>
<polygon fill="blue" stroke="blue" points="1868.2,-1208.69 1877.43,-1203.49 1866.98,-1201.8 1868.2,-1208.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1266.6,-1250C1302.16,-1250 1346.08,-1250 1378.31,-1250"/>
<polygon fill="blue" stroke="blue" points="1378.34,-1253.5 1388.34,-1250 1378.34,-1246.5 1378.34,-1253.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1432.67,-1231.78C1464.97,-1155.03 1590.08,-857.79 1628.93,-765.5"/>
<polygon fill="blue" stroke="blue" points="1632.27,-766.58 1632.92,-756 1625.82,-763.86 1632.27,-766.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node141"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1033.5,-2471 658.5,-2471 658.5,-2435 1033.5,-2435 1033.5,-2471"/>
<text text-anchor="middle" x="846" y="-2449.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1024.17,-2471.01C1042.08,-2473.66 1059.94,-2476.65 1077,-2480 1081.52,-2480.89 1131.05,-2494.75 1166.64,-2504.75"/>
<polygon fill="blue" stroke="blue" points="1166.14,-2508.25 1176.72,-2507.59 1168.04,-2501.51 1166.14,-2508.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1033.76,-2455.69C1049.42,-2461.46 1064.15,-2469.36 1077,-2480 1099.25,-2498.42 1075.51,-2522.16 1096.5,-2542 1115.01,-2559.5 1143.19,-2566.09 1165.92,-2568.39"/>
<polygon fill="blue" stroke="blue" points="1165.68,-2571.88 1175.92,-2569.17 1166.22,-2564.9 1165.68,-2571.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1033.66,-2442.65C1048.73,-2438.37 1063.38,-2432.91 1077,-2426 1088.36,-2420.24 1085.55,-2411.5 1096.5,-2405 1115.59,-2393.68 1139.32,-2387.07 1159.54,-2383.23"/>
<polygon fill="blue" stroke="blue" points="1160.19,-2386.67 1169.44,-2381.51 1158.99,-2379.77 1160.19,-2386.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1033.6,-2441.99C1083.88,-2439.03 1133.24,-2436.12 1165.59,-2434.21"/>
<polygon fill="blue" stroke="blue" points="1166.11,-2437.68 1175.88,-2433.6 1165.69,-2430.69 1166.11,-2437.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1033.66,-2455.39C1050.01,-2448.81 1064.9,-2439.32 1077,-2426 1112.08,-2387.38 1085.03,-1537.9 1096.5,-1487 1114.69,-1406.23 1161.54,-1319.46 1186.6,-1276.81"/>
<polygon fill="blue" stroke="blue" points="1189.65,-1278.53 1191.75,-1268.15 1183.63,-1274.96 1189.65,-1278.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node142"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="1069,-2309 623,-2309 623,-2273 1069,-2273 1069,-2309"/>
<text text-anchor="middle" x="846" y="-2287.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1067.4,-2309.04C1070.75,-2311.81 1073.96,-2314.79 1077,-2318 1123.59,-2367.11 1053.93,-2569.37 1096.5,-2622 1113.23,-2642.69 1143.03,-2649.77 1166.86,-2651.91"/>
<polygon fill="blue" stroke="blue" points="1166.78,-2655.42 1176.99,-2652.57 1167.24,-2648.43 1166.78,-2655.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1067.9,-2309.38C1071.07,-2312.05 1074.11,-2314.92 1077,-2318 1131.99,-2376.57 1045.47,-2616.95 1096.5,-2679 1112.96,-2699.02 1141.96,-2705.39 1165.54,-2706.97"/>
<polygon fill="blue" stroke="blue" points="1165.46,-2710.47 1175.6,-2707.38 1165.75,-2703.47 1165.46,-2710.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1040.56,-2309.04C1052.98,-2311.63 1065.22,-2314.6 1077,-2318 1107.35,-2326.75 1139.46,-2342.14 1163.67,-2355.15"/>
<polygon fill="blue" stroke="blue" points="1162.08,-2358.27 1172.54,-2360 1165.44,-2352.13 1162.08,-2358.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1065.76,-2309.02C1069.66,-2311.78 1073.42,-2314.77 1077,-2318 1106.43,-2344.53 1068.87,-2376.59 1096.5,-2405 1114.38,-2423.38 1142.84,-2429.9 1165.85,-2431.95"/>
<polygon fill="blue" stroke="blue" points="1165.77,-2435.45 1175.97,-2432.61 1166.22,-2428.47 1165.77,-2435.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.07,-2272.78C1071.19,-2270.06 1074.17,-2267.14 1077,-2264 1104.47,-2233.52 1087.27,-826.98 1096.5,-787 1114.23,-710.18 1160.46,-628.52 1185.79,-587.62"/>
<polygon fill="blue" stroke="blue" points="1188.82,-589.39 1191.16,-579.06 1182.88,-585.67 1188.82,-589.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.02,-2272.74C1071.16,-2270.03 1074.16,-2267.12 1077,-2264 1106.1,-2232.1 1086.92,-1529.1 1096.5,-1487 1114.87,-1406.27 1161.64,-1319.48 1186.64,-1276.81"/>
<polygon fill="blue" stroke="blue" points="1189.69,-1278.54 1191.78,-1268.16 1183.67,-1274.97 1189.69,-1278.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node143"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="914.5,-2417 777.5,-2417 777.5,-2381 914.5,-2381 914.5,-2417"/>
<text text-anchor="middle" x="846" y="-2395.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.53,-2388.99C964.74,-2385.42 1032.06,-2389.34 1077,-2426 1098.4,-2443.46 1076.54,-2465.91 1096.5,-2485 1115.28,-2502.96 1143.95,-2510.32 1166.82,-2513.26"/>
<polygon fill="blue" stroke="blue" points="1166.54,-2516.75 1176.86,-2514.32 1167.28,-2509.79 1166.54,-2516.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.61,-2387.23C965.88,-2382.46 1034.55,-2385.61 1077,-2426 1114.87,-2462.04 1061.07,-2503.55 1096.5,-2542 1113.87,-2560.86 1142.36,-2567.35 1165.51,-2569.27"/>
<polygon fill="blue" stroke="blue" points="1165.52,-2572.78 1175.7,-2569.86 1165.92,-2565.79 1165.52,-2572.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.8,-2395C986.69,-2390.76 1098.14,-2384.19 1159.24,-2380.58"/>
<polygon fill="blue" stroke="blue" points="1159.54,-2384.07 1169.32,-2379.99 1159.13,-2377.08 1159.54,-2384.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.8,-2405.28C989.4,-2412.2 1106.58,-2423.06 1165.92,-2428.56"/>
<polygon fill="blue" stroke="blue" points="1165.68,-2432.06 1175.96,-2429.49 1166.32,-2425.09 1165.68,-2432.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.69,-2412.23C967.06,-2418.14 1037.17,-2415.8 1077,-2372 1110.09,-2335.62 1085.66,-1534.97 1096.5,-1487 1114.74,-1406.24 1161.57,-1319.47 1186.62,-1276.81"/>
<polygon fill="blue" stroke="blue" points="1189.66,-1278.54 1191.76,-1268.15 1183.64,-1274.96 1189.66,-1278.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node144"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="945.5,-2363 746.5,-2363 746.5,-2327 945.5,-2327 945.5,-2363"/>
<text text-anchor="middle" x="846" y="-2341.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.61,-2330.29C991.81,-2329.26 1043.84,-2337.52 1077,-2372 1115.63,-2412.16 1061.16,-2578.92 1096.5,-2622 1113.27,-2642.44 1142.79,-2649.57 1166.5,-2651.8"/>
<polygon fill="blue" stroke="blue" points="1166.37,-2655.3 1176.59,-2652.49 1166.85,-2648.32 1166.37,-2655.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.54,-2330.1C991.85,-2328.97 1044.02,-2337.2 1077,-2372 1124.03,-2421.61 1052.83,-2626.41 1096.5,-2679 1113.06,-2698.94 1142.05,-2705.32 1165.6,-2706.92"/>
<polygon fill="blue" stroke="blue" points="1165.51,-2710.42 1175.65,-2707.34 1165.8,-2703.42 1165.51,-2710.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.69,-2354.15C1015.72,-2360.64 1106.33,-2369.04 1159.23,-2373.94"/>
<polygon fill="blue" stroke="blue" points="1159.01,-2377.44 1169.29,-2374.87 1159.65,-2370.47 1159.01,-2377.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.62,-2337.64C988.99,-2338.95 1038.67,-2347.05 1077,-2372 1091.28,-2381.29 1082.86,-2394.79 1096.5,-2405 1116.4,-2419.9 1143.65,-2426.63 1165.6,-2429.64"/>
<polygon fill="blue" stroke="blue" points="1165.24,-2433.12 1175.58,-2430.81 1166.06,-2426.17 1165.24,-2433.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.72,-2360.59C992.37,-2361.98 1044.77,-2353.77 1077,-2318 1105.47,-2286.4 1086.95,-828.44 1096.5,-787 1114.21,-710.18 1160.45,-628.52 1185.79,-587.62"/>
<polygon fill="blue" stroke="blue" points="1188.81,-589.39 1191.16,-579.06 1182.88,-585.67 1188.81,-589.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.55,-2360.45C992.17,-2361.8 1044.58,-2353.6 1077,-2318 1108.09,-2283.86 1086.29,-1532.04 1096.5,-1487 1114.8,-1406.26 1161.6,-1319.47 1186.63,-1276.81"/>
<polygon fill="blue" stroke="blue" points="1189.67,-1278.54 1191.77,-1268.15 1183.65,-1274.97 1189.67,-1278.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="883,-2525 809,-2525 809,-2489 883,-2489 883,-2525"/>
<text text-anchor="middle" x="846" y="-2503.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.01,-2503.5C934.62,-2500.69 1028.71,-2504.24 1077,-2560 1111.16,-2599.44 1063.5,-2753.58 1096.5,-2794 1104.41,-2803.69 1443.2,-2898.36 1582.06,-2936.85"/>
<polygon fill="blue" stroke="blue" points="1581.53,-2940.34 1592.1,-2939.64 1583.4,-2933.59 1581.53,-2940.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.15,-2503.38C934.94,-2500.42 1029.24,-2503.79 1077,-2560 1120.69,-2611.42 1052.07,-2812.22 1096.5,-2863 1160.67,-2936.34 1218.35,-2877.37 1311.5,-2906 1337.1,-2913.87 1364.85,-2925.55 1386.26,-2935.3"/>
<polygon fill="blue" stroke="blue" points="1385.08,-2938.61 1395.63,-2939.63 1388.01,-2932.26 1385.08,-2938.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.13,-2504.97C933.17,-2504.2 1023.45,-2510.48 1077,-2560 1098.21,-2579.61 1075.77,-2601.88 1096.5,-2622 1115.15,-2640.1 1143.83,-2647.44 1166.73,-2650.35"/>
<polygon fill="blue" stroke="blue" points="1166.48,-2653.84 1176.79,-2651.4 1167.2,-2646.88 1166.48,-2653.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.29,-2503.98C934.37,-2501.9 1026.82,-2506.5 1077,-2560 1113.66,-2599.09 1060.26,-2639.51 1096.5,-2679 1113.83,-2697.89 1142.33,-2704.39 1165.48,-2706.3"/>
<polygon fill="blue" stroke="blue" points="1165.5,-2709.8 1175.68,-2706.88 1165.9,-2702.82 1165.5,-2709.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.02,-2514.1C932.92,-2521.7 1023.04,-2527.01 1077,-2480 1102.97,-2457.38 1072.07,-2429.28 1096.5,-2405 1112.97,-2388.63 1137.85,-2381.73 1159.43,-2378.98"/>
<polygon fill="blue" stroke="blue" points="1159.79,-2382.46 1169.38,-2377.97 1159.08,-2375.5 1159.79,-2382.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.35,-2505.51C929.1,-2502.99 1009.84,-2496.47 1077,-2480 1107.91,-2472.42 1141.52,-2459.36 1166.25,-2448.77"/>
<polygon fill="blue" stroke="blue" points="1167.83,-2451.9 1175.61,-2444.7 1165.04,-2445.48 1167.83,-2451.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.33,-2503.57C934.9,-2500.92 1028.44,-2504.75 1077,-2560 1106.33,-2593.38 1063.58,-2729.15 1096.5,-2759 1164.41,-2820.58 1434.56,-2812.5 1509,-2759 1629.28,-2672.55 1641.04,-2470.57 1641.12,-2396.17"/>
<polygon fill="blue" stroke="blue" points="1644.62,-2396.12 1641.06,-2386.14 1637.62,-2396.16 1644.62,-2396.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node146"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="911.5,-2255 780.5,-2255 780.5,-2219 911.5,-2219 911.5,-2255"/>
<text text-anchor="middle" x="846" y="-2233.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M856.76,-2218.85C893.09,-2150.38 1021.15,-1900.39 1077,-1678 1097.78,-1595.24 1074.4,-1569.42 1096.5,-1487 1117.95,-1407.04 1163.38,-1319.91 1187.39,-1277"/>
<polygon fill="blue" stroke="blue" points="1190.44,-1278.71 1192.31,-1268.29 1184.34,-1275.27 1190.44,-1278.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().</title>
<g id="a_node147"><a xlink:title="fn test_lizard() { &#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(&amp;zkgroup::common::constants::TEST_ARRAY_16); &#160;&#160;&#160;&#160;let data_out = p.lizard_decode::&lt;Sha256&gt;(); &#160;&#160;&#160;&#160;assert_hex_eq!(data_out.unwrap()...">
<polygon fill="white" stroke="black" points="1685,-262 1598,-262 1598,-226 1685,-226 1685,-262"/>
<text text-anchor="middle" x="1641.5" y="-240.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M1685.27,-252.78C1709.76,-260.2 1738.6,-273.52 1754,-297 1803.77,-372.85 1722.63,-1044.41 1782,-1113 1802.69,-1136.91 1836.75,-1144.38 1867.19,-1145.55"/>
<polygon fill="blue" stroke="blue" points="1867.29,-1149.05 1877.34,-1145.72 1867.4,-1142.05 1867.29,-1149.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M1685.01,-252.68C1709.56,-260.08 1738.56,-273.42 1754,-297 1806.97,-377.92 1718.78,-1093.81 1782,-1167 1802.67,-1190.93 1836.72,-1198.4 1867.16,-1199.57"/>
<polygon fill="blue" stroke="blue" points="1867.27,-1203.07 1877.32,-1199.73 1867.38,-1196.07 1867.27,-1203.07"/>
</g>
</g>
</svg>
