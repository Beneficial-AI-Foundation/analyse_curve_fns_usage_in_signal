<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="5555pt" height="11902pt"
 viewBox="0.00 0.00 5555.00 11901.64" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 11897.64)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-11897.64 5551,-11897.64 5551,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5215,-7591.64 5215,-7720.64 5539,-7720.64 5539,-7591.64 5215,-7591.64"/>
<text text-anchor="middle" x="5377" y="-7705.44" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4570.5,-7637.64 4570.5,-7766.64 5195,-7766.64 5195,-7637.64 4570.5,-7637.64"/>
<text text-anchor="middle" x="4882.75" y="-7751.44" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3464,-4004.64 3464,-4079.64 4729,-4079.64 4729,-4004.64 3464,-4004.64"/>
<text text-anchor="middle" x="4096.5" y="-4064.44" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="672.5,-5210.64 672.5,-5285.64 938.5,-5285.64 938.5,-5210.64 672.5,-5210.64"/>
<text text-anchor="middle" x="805.5" y="-5270.44" font-family="Helvetica,sans-Serif" font-size="14.00">message_backup.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="32.5,-4238.64 32.5,-4313.64 284.5,-4313.64 284.5,-4238.64 32.5,-4238.64"/>
<text text-anchor="middle" x="158.5" y="-4298.44" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="1961,-351.64 1961,-1074.64 2251,-1074.64 2251,-351.64 1961,-351.64"/>
<text text-anchor="middle" x="2106" y="-1059.44" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="2874.5,-4743.64 2874.5,-4980.64 3087.5,-4980.64 3087.5,-4743.64 2874.5,-4743.64"/>
<text text-anchor="middle" x="2981" y="-4965.44" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="2683,-6190.64 2683,-8641.64 3279,-8641.64 3279,-6190.64 2683,-6190.64"/>
<text text-anchor="middle" x="2981" y="-8626.44" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="2518,-291.64 2518,-366.64 3033.5,-366.64 3033.5,-291.64 2518,-291.64"/>
<text text-anchor="middle" x="2775.75" y="-351.44" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="3448,-834.64 3448,-909.64 3552,-909.64 3552,-834.64 3448,-834.64"/>
<text text-anchor="middle" x="3500" y="-894.44" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="3410,-917.64 3410,-1086.64 4535,-1086.64 4535,-917.64 3410,-917.64"/>
<text text-anchor="middle" x="3972.5" y="-1071.44" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="4269.5,-3662.64 4269.5,-3791.64 4728.5,-3791.64 4728.5,-3662.64 4269.5,-3662.64"/>
<text text-anchor="middle" x="4499" y="-3776.44" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="760,-3964.64 760,-4039.64 1180,-4039.64 1180,-3964.64 760,-3964.64"/>
<text text-anchor="middle" x="970" y="-4024.44" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="1288,-3895.64 1288,-4024.64 1420,-4024.64 1420,-3895.64 1288,-3895.64"/>
<text text-anchor="middle" x="1354" y="-4009.44" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1508.5,-3910.64 1508.5,-4039.64 3090.5,-4039.64 3090.5,-3910.64 1508.5,-3910.64"/>
<text text-anchor="middle" x="2299.5" y="-4024.44" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="434,-5376.64 434,-5505.64 888.5,-5505.64 888.5,-5376.64 434,-5376.64"/>
<text text-anchor="middle" x="661.25" y="-5490.44" font-family="Helvetica,sans-Serif" font-size="14.00">validation.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="980.5,-4508.64 980.5,-4981.64 2169,-4981.64 2169,-4508.64 980.5,-4508.64"/>
<text text-anchor="middle" x="1574.75" y="-4966.44" font-family="Helvetica,sans-Serif" font-size="14.00">backup.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="2481,-4538.64 2481,-4667.64 3070,-4667.64 3070,-4538.64 2481,-4538.64"/>
<text text-anchor="middle" x="2775.5" y="-4652.44" font-family="Helvetica,sans-Serif" font-size="14.00">account_data.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="2033.5,-10015.64 2033.5,-10144.64 3076,-10144.64 3076,-10015.64 2033.5,-10015.64"/>
<text text-anchor="middle" x="2554.75" y="-10129.44" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="1994.5,-4047.64 1994.5,-4500.64 3041.5,-4500.64 3041.5,-4047.64 1994.5,-4047.64"/>
<text text-anchor="middle" x="2518" y="-4485.44" font-family="Helvetica,sans-Serif" font-size="14.00">recipient.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="659,-4989.64 659,-5172.64 1181.5,-5172.64 1181.5,-4989.64 659,-4989.64"/>
<text text-anchor="middle" x="920.25" y="-5157.44" font-family="Helvetica,sans-Serif" font-size="14.00">serialize.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="770.5,-4793.64 770.5,-4868.64 840.5,-4868.64 840.5,-4793.64 770.5,-4793.64"/>
<text text-anchor="middle" x="805.5" y="-4853.44" font-family="Helvetica,sans-Serif" font-size="14.00">main.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="434.5,-5293.64 434.5,-5368.64 1186,-5368.64 1186,-5293.64 434.5,-5293.64"/>
<text text-anchor="middle" x="810.25" y="-5353.44" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="2067,-9932.64 2067,-10007.64 3020,-10007.64 3020,-9932.64 2067,-9932.64"/>
<text text-anchor="middle" x="2543.5" y="-9992.44" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="2868,-9467.64 2868,-9542.64 3094,-9542.64 3094,-9467.64 2868,-9467.64"/>
<text text-anchor="middle" x="2981" y="-9527.44" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="329,-4047.64 329,-4338.64 1214,-4338.64 1214,-4047.64 329,-4047.64"/>
<text text-anchor="middle" x="771.5" y="-4323.44" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-4047.64 8,-4230.64 309,-4230.64 309,-4047.64 8,-4047.64"/>
<text text-anchor="middle" x="158.5" y="-4215.44" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="2869.5,-10152.64 2869.5,-10281.64 3092.5,-10281.64 3092.5,-10152.64 2869.5,-10152.64"/>
<text text-anchor="middle" x="2981" y="-10266.44" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="2840,-9330.64 2840,-9459.64 3555,-9459.64 3555,-9330.64 2840,-9330.64"/>
<text text-anchor="middle" x="3197.5" y="-9444.44" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="2938,-9193.64 2938,-9322.64 3024,-9322.64 3024,-9193.64 2938,-9193.64"/>
<text text-anchor="middle" x="2981" y="-9307.44" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="4756,-8705.64 4756,-8780.64 4945,-8780.64 4945,-8705.64 4756,-8705.64"/>
<text text-anchor="middle" x="4850.5" y="-8765.44" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="3886.5,-10851.64 3886.5,-10980.64 4441,-10980.64 4441,-10851.64 3886.5,-10851.64"/>
<text text-anchor="middle" x="4163.75" y="-10965.44" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="4268.5,-8602.64 4268.5,-8697.64 4907.5,-8697.64 4907.5,-8602.64 4268.5,-8602.64"/>
<text text-anchor="middle" x="4588" y="-8682.44" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="1308.5,-1651.64 1308.5,-1726.64 1399.5,-1726.64 1399.5,-1651.64 1308.5,-1651.64"/>
<text text-anchor="middle" x="1354" y="-1711.44" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="1313,-3797.64 1313,-3872.64 2200,-3872.64 2200,-3797.64 1313,-3797.64"/>
<text text-anchor="middle" x="1756.5" y="-3857.44" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="2040,-1651.64 2040,-1780.64 2173,-1780.64 2173,-1651.64 2040,-1651.64"/>
<text text-anchor="middle" x="2106.5" y="-1765.44" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="1549,-268.64 1549,-343.64 2201,-343.64 2201,-268.64 1549,-268.64"/>
<text text-anchor="middle" x="1875" y="-328.44" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="2497,-3336.64 2497,-3465.64 2630,-3465.64 2630,-3336.64 2497,-3336.64"/>
<text text-anchor="middle" x="2563.5" y="-3450.44" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="1984,-124.64 1984,-253.64 2663,-253.64 2663,-124.64 1984,-124.64"/>
<text text-anchor="middle" x="2323.5" y="-238.44" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="2802,-1795.64 2802,-1978.64 3535,-1978.64 3535,-1795.64 2802,-1795.64"/>
<text text-anchor="middle" x="3168.5" y="-1963.44" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="2464.5,-1094.64 2464.5,-1331.64 3543.5,-1331.64 3543.5,-1094.64 2464.5,-1094.64"/>
<text text-anchor="middle" x="3004" y="-1316.44" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="2466.5,-1521.64 2466.5,-1596.64 2660.5,-1596.64 2660.5,-1521.64 2466.5,-1521.64"/>
<text text-anchor="middle" x="2563.5" y="-1581.44" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="3437.5,-751.64 3437.5,-826.64 3562.5,-826.64 3562.5,-751.64 3437.5,-751.64"/>
<text text-anchor="middle" x="3500" y="-811.44" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="1866.5,-3120.64 1866.5,-3789.64 2345.5,-3789.64 2345.5,-3120.64 1866.5,-3120.64"/>
<text text-anchor="middle" x="2106" y="-3774.44" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="1851.5,-1082.64 1851.5,-1643.64 2360.5,-1643.64 2360.5,-1082.64 1851.5,-1082.64"/>
<text text-anchor="middle" x="2106" y="-1628.44" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="1768,-1795.64 1768,-3112.64 2598.5,-3112.64 2598.5,-1795.64 1768,-1795.64"/>
<text text-anchor="middle" x="2183.25" y="-3097.44" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="2468.5,-1604.64 2468.5,-1787.64 3535,-1787.64 3535,-1604.64 2468.5,-1604.64"/>
<text text-anchor="middle" x="3001.75" y="-1772.44" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="3420.5,-8712.64 3420.5,-8969.64 4713,-8969.64 4713,-8712.64 3420.5,-8712.64"/>
<text text-anchor="middle" x="4066.75" y="-8954.44" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="2060.5,-5395.64 2060.5,-5524.64 3053,-5524.64 3053,-5395.64 2060.5,-5395.64"/>
<text text-anchor="middle" x="2556.75" y="-5509.44" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="2827.5,-4988.64 2827.5,-5387.64 4736,-5387.64 4736,-4988.64 2827.5,-4988.64"/>
<text text-anchor="middle" x="3781.75" y="-5372.44" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="3454.5,-6373.64 3454.5,-6502.64 4032,-6502.64 4032,-6373.64 3454.5,-6373.64"/>
<text text-anchor="middle" x="3743.25" y="-6487.44" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightblue" stroke="lightblue" points="3846,-2999.64 3846,-3074.64 4058,-3074.64 4058,-2999.64 3846,-2999.64"/>
<text text-anchor="middle" x="3952" y="-3059.44" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightblue" stroke="lightblue" points="4311.5,-2999.64 4311.5,-3128.64 4426.5,-3128.64 4426.5,-2999.64 4311.5,-2999.64"/>
<text text-anchor="middle" x="4369" y="-3113.44" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightblue" stroke="lightblue" points="4561.5,-3381.64 4561.5,-3510.64 5127.5,-3510.64 5127.5,-3381.64 4561.5,-3381.64"/>
<text text-anchor="middle" x="4844.5" y="-3495.44" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightblue" stroke="lightblue" points="3844,-7973.64 3844,-8318.64 4457,-8318.64 4457,-7973.64 3844,-7973.64"/>
<text text-anchor="middle" x="4150.5" y="-8303.44" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightblue" stroke="lightblue" points="4322,-4087.64 4322,-4216.64 4417,-4216.64 4417,-4087.64 4322,-4087.64"/>
<text text-anchor="middle" x="4369.5" y="-4201.44" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightblue" stroke="lightblue" points="4285,-3136.64 4285,-3373.64 4898,-3373.64 4898,-3136.64 4285,-3136.64"/>
<text text-anchor="middle" x="4591.5" y="-3358.44" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightblue" stroke="lightblue" points="4308.5,-3799.64 4308.5,-3928.64 4430.5,-3928.64 4430.5,-3799.64 4308.5,-3799.64"/>
<text text-anchor="middle" x="4369.5" y="-3913.44" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightblue" stroke="lightblue" points="4799,-7813.64 4799,-7888.64 4902,-7888.64 4902,-7813.64 4799,-7813.64"/>
<text text-anchor="middle" x="4850.5" y="-7873.44" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightblue" stroke="lightblue" points="2518,-9849.64 2518,-9924.64 3115,-9924.64 3115,-9849.64 2518,-9849.64"/>
<text text-anchor="middle" x="2816.5" y="-9909.44" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightblue" stroke="lightblue" points="2828,-8811.64 2828,-8994.64 3134,-8994.64 3134,-8811.64 2828,-8811.64"/>
<text text-anchor="middle" x="2981" y="-8979.44" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightblue" stroke="lightblue" points="3397.5,-6540.64 3397.5,-6669.64 3603.5,-6669.64 3603.5,-6540.64 3397.5,-6540.64"/>
<text text-anchor="middle" x="3500.5" y="-6654.44" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightblue" stroke="lightblue" points="3408,-6745.64 3408,-7036.64 4052.5,-7036.64 4052.5,-6745.64 3408,-6745.64"/>
<text text-anchor="middle" x="3730.25" y="-7021.44" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightblue" stroke="lightblue" points="2832,-5624.64 2832,-5995.64 4044.5,-5995.64 4044.5,-5624.64 2832,-5624.64"/>
<text text-anchor="middle" x="3438.25" y="-5980.44" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightblue" stroke="lightblue" points="3880,-4743.64 3880,-4980.64 4024,-4980.64 4024,-4743.64 3880,-4743.64"/>
<text text-anchor="middle" x="3952" y="-4965.44" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightblue" stroke="lightblue" points="3876.5,-4444.64 3876.5,-4735.64 4028.5,-4735.64 4028.5,-4444.64 3876.5,-4444.64"/>
<text text-anchor="middle" x="3952.5" y="-4720.44" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightblue" stroke="lightblue" points="3862,-4307.64 3862,-4436.64 4042,-4436.64 4042,-4307.64 3862,-4307.64"/>
<text text-anchor="middle" x="3952" y="-4421.44" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust68" class="cluster">
<title>cluster_67</title>
<polygon fill="lightblue" stroke="lightblue" points="4270.5,-795.64 4270.5,-870.64 4467.5,-870.64 4467.5,-795.64 4270.5,-795.64"/>
<text text-anchor="middle" x="4369" y="-855.44" font-family="Helvetica,sans-Serif" font-size="14.00">generic_server_params.rs</text>
</g>
<g id="clust69" class="cluster">
<title>cluster_68</title>
<polygon fill="lightblue" stroke="lightblue" points="3390.5,-7378.64 3390.5,-7669.64 4469.5,-7669.64 4469.5,-7378.64 3390.5,-7378.64"/>
<text text-anchor="middle" x="3930" y="-7654.44" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust70" class="cluster">
<title>cluster_69</title>
<polygon fill="lightblue" stroke="lightblue" points="3341,-8977.64 3341,-9322.64 4116.5,-9322.64 4116.5,-8977.64 3341,-8977.64"/>
<text text-anchor="middle" x="3728.75" y="-9307.44" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust71" class="cluster">
<title>cluster_70</title>
<polygon fill="lightblue" stroke="lightblue" points="3425,-11262.64 3425,-11337.64 3575,-11337.64 3575,-11262.64 3425,-11262.64"/>
<text text-anchor="middle" x="3500" y="-11322.44" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust72" class="cluster">
<title>cluster_71</title>
<polygon fill="lightblue" stroke="lightblue" points="3305.5,-9467.64 3305.5,-10244.64 4144.5,-10244.64 4144.5,-9467.64 3305.5,-9467.64"/>
<text text-anchor="middle" x="3725" y="-10229.44" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust73" class="cluster">
<title>cluster_72</title>
<polygon fill="lightblue" stroke="lightblue" points="2848,-5541.64 2848,-5616.64 3114,-5616.64 3114,-5541.64 2848,-5541.64"/>
<text text-anchor="middle" x="2981" y="-5601.44" font-family="Helvetica,sans-Serif" font-size="14.00">generate_generic_server_params.rs</text>
</g>
<g id="clust74" class="cluster">
<title>cluster_73</title>
<polygon fill="lightblue" stroke="lightblue" points="4594,-11399.64 4594,-11474.64 4697,-11474.64 4697,-11399.64 4594,-11399.64"/>
<text text-anchor="middle" x="4645.5" y="-11459.44" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust75" class="cluster">
<title>cluster_74</title>
<polygon fill="lightblue" stroke="lightblue" points="3372,-11565.64 3372,-11748.64 4437.5,-11748.64 4437.5,-11565.64 3372,-11565.64"/>
<text text-anchor="middle" x="3904.75" y="-11733.44" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust76" class="cluster">
<title>cluster_75</title>
<polygon fill="lightblue" stroke="lightblue" points="3423.5,-11179.64 3423.5,-11254.64 4408.5,-11254.64 4408.5,-11179.64 3423.5,-11179.64"/>
<text text-anchor="middle" x="3916" y="-11239.44" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust77" class="cluster">
<title>cluster_76</title>
<polygon fill="lightblue" stroke="lightblue" points="3406,-11756.64 3406,-11885.64 3999.5,-11885.64 3999.5,-11756.64 3406,-11756.64"/>
<text text-anchor="middle" x="3702.75" y="-11870.44" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust78" class="cluster">
<title>cluster_77</title>
<polygon fill="lightblue" stroke="lightblue" points="3841.5,-4224.64 3841.5,-4299.64 4412,-4299.64 4412,-4224.64 3841.5,-4224.64"/>
<text text-anchor="middle" x="4126.75" y="-4284.44" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust79" class="cluster">
<title>cluster_78</title>
<polygon fill="lightblue" stroke="lightblue" points="3913,-10282.64 3913,-10843.64 3991,-10843.64 3991,-10282.64 3913,-10282.64"/>
<text text-anchor="middle" x="3952" y="-10828.44" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust80" class="cluster">
<title>cluster_79</title>
<polygon fill="lightblue" stroke="lightblue" points="3844.5,-11345.64 3844.5,-11474.64 4060.5,-11474.64 4060.5,-11345.64 3844.5,-11345.64"/>
<text text-anchor="middle" x="3952.5" y="-11459.44" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust81" class="cluster">
<title>cluster_80</title>
<polygon fill="lightblue" stroke="lightblue" points="3907.5,-11482.64 3907.5,-11557.64 4433,-11557.64 4433,-11482.64 3907.5,-11482.64"/>
<text text-anchor="middle" x="4170.25" y="-11542.44" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_struct.rs</text>
</g>
<g id="clust82" class="cluster">
<title>cluster_81</title>
<polygon fill="lightblue" stroke="lightblue" points="3434.5,-10988.64 3434.5,-11171.64 3999.5,-11171.64 3999.5,-10988.64 3434.5,-10988.64"/>
<text text-anchor="middle" x="3717" y="-11156.44" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust83" class="cluster">
<title>cluster_82</title>
<polygon fill="lightblue" stroke="lightblue" points="3912,-11262.64 3912,-11337.64 4428.5,-11337.64 4428.5,-11262.64 3912,-11262.64"/>
<text text-anchor="middle" x="4170.25" y="-11322.44" font-family="Helvetica,sans-Serif" font-size="14.00">timestamp_struct.rs</text>
</g>
<g id="clust84" class="cluster">
<title>cluster_83</title>
<polygon fill="lightblue" stroke="lightblue" points="3868,-6003.64 3868,-6132.64 4412,-6132.64 4412,-6003.64 3868,-6003.64"/>
<text text-anchor="middle" x="4140" y="-6117.44" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust85" class="cluster">
<title>cluster_84</title>
<polygon fill="lightblue" stroke="lightblue" points="3721,-3082.64 3721,-3481.64 4183,-3481.64 4183,-3082.64 3721,-3082.64"/>
<text text-anchor="middle" x="3952" y="-3466.44" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust86" class="cluster">
<title>cluster_85</title>
<polygon fill="lightblue" stroke="lightblue" points="2839.5,-98.64 2839.5,-173.64 3122.5,-173.64 3122.5,-98.64 2839.5,-98.64"/>
<text text-anchor="middle" x="2981" y="-158.44" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust87" class="cluster">
<title>cluster_86</title>
<polygon fill="lightblue" stroke="lightblue" points="3299,-4491.64 3299,-4728.64 3701,-4728.64 3701,-4491.64 3299,-4491.64"/>
<text text-anchor="middle" x="3500" y="-4713.44" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust88" class="cluster">
<title>cluster_87</title>
<polygon fill="lightblue" stroke="lightblue" points="2844.5,-9002.64 2844.5,-9185.64 3117.5,-9185.64 3117.5,-9002.64 2844.5,-9002.64"/>
<text text-anchor="middle" x="2981" y="-9170.44" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust89" class="cluster">
<title>cluster_88</title>
<polygon fill="lightblue" stroke="lightblue" points="2757.5,-9550.64 2757.5,-9841.64 3204.5,-9841.64 3204.5,-9550.64 2757.5,-9550.64"/>
<text text-anchor="middle" x="2981" y="-9826.44" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust90" class="cluster">
<title>cluster_89</title>
<polygon fill="lightblue" stroke="lightblue" points="2887,-11294.64 2887,-11423.64 3075,-11423.64 3075,-11294.64 2887,-11294.64"/>
<text text-anchor="middle" x="2981" y="-11408.44" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn as_montgomery(&amp;self) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_mul(self, &amp;constants::RR) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5353.5,-7635.64 5225.5,-7635.64 5225.5,-7599.64 5353.5,-7599.64 5353.5,-7635.64"/>
<text text-anchor="middle" x="5289.5" y="-7613.94" font-family="Helvetica,sans-Serif" font-size="14.00">as_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_mul(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(a, b)) &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="5531,-7689.64 5392,-7689.64 5392,-7653.64 5531,-7653.64 5531,-7689.64"/>
<text text-anchor="middle" x="5461.5" y="-7667.94" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5347.58,-7635.77C5362.38,-7640.47 5378.44,-7645.57 5393.69,-7650.41"/>
<polygon fill="gray" stroke="gray" points="5392.98,-7653.86 5403.57,-7653.55 5395.1,-7647.19 5392.98,-7653.86"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_wide(bytes: &amp;[u8; 64]) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut words = [0u64; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;words[i] |= (bytes[(i * 8) + j] as u64...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5356,-7689.64 5223,-7689.64 5223,-7653.64 5356,-7653.64 5356,-7689.64"/>
<text text-anchor="middle" x="5289.5" y="-7667.94" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5356.23,-7671.64C5364.62,-7671.64 5373.28,-7671.64 5381.85,-7671.64"/>
<polygon fill="gray" stroke="gray" points="5381.86,-7675.14 5391.86,-7671.64 5381.85,-7668.14 5381.86,-7675.14"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4895,-7681.64 4806,-7681.64 4806,-7645.64 4895,-7645.64 4895,-7681.64"/>
<text text-anchor="middle" x="4850.5" y="-7659.94" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5187,-7735.64 4973,-7735.64 4973,-7699.64 5187,-7699.64 5187,-7735.64"/>
<text text-anchor="middle" x="5080" y="-7713.94" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4895.1,-7673.98C4922.81,-7680.56 4959.64,-7689.3 4993.05,-7697.23"/>
<polygon fill="gray" stroke="gray" points="4992.3,-7700.65 5002.84,-7699.56 4993.92,-7693.84 4992.3,-7700.65"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5162.41,-7699.59C5178.96,-7695.92 5196.31,-7692.07 5212.65,-7688.45"/>
<polygon fill="gray" stroke="gray" points="5213.68,-7691.81 5222.69,-7686.23 5212.16,-7684.97 5213.68,-7691.81"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4712.5,-7735.64 4578.5,-7735.64 4578.5,-7699.64 4712.5,-7699.64 4712.5,-7735.64"/>
<text text-anchor="middle" x="4645.5" y="-7713.94" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4712.69,-7700.03C4739.65,-7692.86 4770.42,-7684.67 4795.94,-7677.88"/>
<polygon fill="gray" stroke="gray" points="4797.04,-7681.21 4805.8,-7675.26 4795.24,-7674.45 4797.04,-7681.21"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4674,-7681.64 4617,-7681.64 4617,-7645.64 4674,-7645.64 4674,-7681.64"/>
<text text-anchor="middle" x="4645.5" y="-7659.94" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4879,-7735.64 4822,-7735.64 4822,-7699.64 4879,-7699.64 4879,-7735.64"/>
<text text-anchor="middle" x="4850.5" y="-7713.94" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4674.3,-7671.03C4709.96,-7680.52 4771.96,-7697.01 4811.83,-7707.62"/>
<polygon fill="gray" stroke="gray" points="4811.15,-7711.05 4821.71,-7710.24 4812.95,-7704.29 4811.15,-7711.05"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5156.5,-7681.64 5003.5,-7681.64 5003.5,-7645.64 5156.5,-7645.64 5156.5,-7681.64"/>
<text text-anchor="middle" x="5080" y="-7659.94" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5156.55,-7679.86C5169.47,-7683.11 5182.69,-7686.74 5195,-7690.64 5204.13,-7693.52 5205.6,-7696.82 5215,-7698.64 5276.54,-7710.49 5293.83,-7706.54 5356,-7698.64 5367.62,-7697.16 5379.79,-7694.79 5391.56,-7692.06"/>
<polygon fill="gray" stroke="gray" points="5392.43,-7695.45 5401.32,-7689.69 5390.78,-7688.65 5392.43,-7695.45"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge829" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4879.15,-7715.45C4899.33,-7712.58 4926.32,-7705.95 4945,-7690.64 4965.91,-7673.49 4950.33,-7651.37 4973,-7636.64 5044.99,-7589.85 5146.84,-7593.16 5215.16,-7602.8"/>
<polygon fill="gray" stroke="gray" points="5215,-7606.32 5225.4,-7604.33 5216.03,-7599.39 5215,-7606.32"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge830" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4879.4,-7711.01C4907.79,-7704.28 4953.23,-7693.49 4993.6,-7683.91"/>
<polygon fill="gray" stroke="gray" points="4994.54,-7687.28 5003.46,-7681.56 4992.93,-7680.47 4994.54,-7687.28"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4422.5,-4048.64 4315.5,-4048.64 4315.5,-4012.64 4422.5,-4012.64 4422.5,-4048.64"/>
<text text-anchor="middle" x="4369" y="-4026.94" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4721,-4048.64 4570,-4048.64 4570,-4012.64 4721,-4012.64 4721,-4048.64"/>
<text text-anchor="middle" x="4645.5" y="-4026.94" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4422.6,-4030.64C4461.39,-4030.64 4514.97,-4030.64 4559.77,-4030.64"/>
<polygon fill="gray" stroke="gray" points="4559.77,-4034.14 4569.77,-4030.64 4559.77,-4027.14 4559.77,-4034.14"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3528,-4048.64 3472,-4048.64 3472,-4012.64 3528,-4012.64 3528,-4048.64"/>
<text text-anchor="middle" x="3500" y="-4026.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3996,-4048.64 3908,-4048.64 3908,-4012.64 3996,-4012.64 3996,-4048.64"/>
<text text-anchor="middle" x="3952" y="-4026.94" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3528.14,-4030.64C3600.83,-4030.64 3800.97,-4030.64 3897.52,-4030.64"/>
<polygon fill="gray" stroke="gray" points="3897.65,-4034.14 3907.65,-4030.64 3897.65,-4027.14 3897.65,-4034.14"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3996.24,-4030.64C4069.95,-4030.64 4220.22,-4030.64 4305.41,-4030.64"/>
<polygon fill="gray" stroke="gray" points="4305.46,-4034.14 4315.46,-4030.64 4305.46,-4027.14 4305.46,-4034.14"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge534" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4650.57,-4049.08C4665.2,-4116.34 4715.4,-4354.97 4736,-4554.64 4802.44,-5198.49 4843.96,-7361.92 4848.98,-7635.18"/>
<polygon fill="gray" stroke="gray" points="4845.49,-7635.51 4849.17,-7645.45 4852.49,-7635.39 4845.49,-7635.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().</title>
<g id="a_node14"><a xlink:title="fn OnlineBackupValidator_AddFrame( &#160;&#160;&#160;&#160;backup: &amp;mut OnlineBackupValidator, &#160;&#160;&#160;&#160;frame: &amp;[u8], ) &#45;&gt; Result&lt;(), ReadError&gt; { &#160;&#160;&#160;&#160;let unknown_fields = backup &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_mut() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_and_add_fram...">
<polygon fill="white" stroke="black" points="930.5,-5254.64 680.5,-5254.64 680.5,-5218.64 930.5,-5218.64 930.5,-5254.64"/>
<text text-anchor="middle" x="805.5" y="-5232.94" font-family="Helvetica,sans-Serif" font-size="14.00">OnlineBackupValidator_AddFrame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;pub fn parse_and_add_frame( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;raw_frame: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut visitor: impl FnMut(&amp;proto::backup::Frame) + Send, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;(Vec&lt;PathPart&gt;, UnknownValue)&gt;, crate::E...">
<polygon fill="white" stroke="black" points="1178,-5337.64 1008,-5337.64 1008,-5301.64 1178,-5301.64 1178,-5337.64"/>
<text text-anchor="middle" x="1093" y="-5315.94" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M868.45,-5254.64C913,-5267.6 973.22,-5285.1 1019.93,-5298.68"/>
<polygon fill="blue" stroke="blue" points="1019.1,-5302.09 1029.68,-5301.52 1021.05,-5295.36 1019.1,-5302.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().</title>
<g id="a_node15"><a xlink:title="async fn KeyTransparency_Distinguished( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedCha...">
<polygon fill="white" stroke="black" points="276.5,-4282.64 40.5,-4282.64 40.5,-4246.64 276.5,-4246.64 276.5,-4282.64"/>
<text text-anchor="middle" x="158.5" y="-4260.94" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;async fn distinguished( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished: Option&lt;LastTreeHead&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;SearchStateUpdate, RequestError&lt;Error&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ChatDistinguishedResponse { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="539,-4145.64 429,-4145.64 429,-4109.64 539,-4109.64 539,-4145.64"/>
<text text-anchor="middle" x="484" y="-4123.94" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M276.63,-4254.93C288.58,-4250.08 299.71,-4243.5 309,-4234.64 335.52,-4209.34 302.18,-4179.61 329,-4154.64 352.74,-4132.53 387.87,-4125.18 418.58,-4123.63"/>
<polygon fill="blue" stroke="blue" points="418.92,-4127.12 428.81,-4123.31 418.7,-4120.12 418.92,-4127.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node16"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="2243,-395.64 1969,-395.64 1969,-359.64 2243,-359.64 2243,-395.64"/>
<text text-anchor="middle" x="2106" y="-373.94" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="2650,-168.64 2477,-168.64 2477,-132.64 2650,-132.64 2650,-168.64"/>
<text text-anchor="middle" x="2563.5" y="-146.94" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2190.51,-395.65C2264.65,-406.35 2371.03,-407.9 2436,-347.64 2492.17,-295.54 2413.18,-234.52 2464.5,-177.64 2465.87,-176.11 2467.33,-174.67 2468.84,-173.31"/>
<polygon fill="blue" stroke="blue" points="2471.12,-175.97 2476.96,-167.13 2466.88,-170.41 2471.12,-175.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node17"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="2205.5,-611.64 2006.5,-611.64 2006.5,-575.64 2205.5,-575.64 2205.5,-611.64"/>
<text text-anchor="middle" x="2106" y="-589.94" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="3016.5,-1138.64 2945.5,-1138.64 2945.5,-1102.64 3016.5,-1102.64 3016.5,-1138.64"/>
<text text-anchor="middle" x="2981" y="-1116.94" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2205.72,-585.35C2273.28,-583.54 2363.42,-588.87 2436,-620.64 2688.22,-731.03 2899.9,-1007.77 2961.73,-1094.33"/>
<polygon fill="blue" stroke="blue" points="2958.93,-1096.43 2967.57,-1102.56 2964.64,-1092.38 2958.93,-1096.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node18"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2200,-827.64 2012,-827.64 2012,-791.64 2200,-791.64 2200,-827.64"/>
<text text-anchor="middle" x="2106" y="-805.94" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3527,-1893.64 3473,-1893.64 3473,-1857.64 3527,-1857.64 3527,-1893.64"/>
<text text-anchor="middle" x="3500" y="-1871.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.02,-804.25C2285.73,-801.52 2404.29,-804.12 2436,-836.64 2513.56,-916.14 2389.29,-1253.9 2464.5,-1335.64 2494.66,-1368.42 2619.88,-1352.45 2663,-1363.64 2946.95,-1437.26 3100.56,-1367.81 3279,-1600.64 3330.92,-1668.38 3248.11,-1723.11 3299,-1791.64 3338.06,-1844.23 3416.38,-1864.13 3462.57,-1871.49"/>
<polygon fill="blue" stroke="blue" points="3462.34,-1874.99 3472.75,-1872.99 3463.36,-1868.07 3462.34,-1874.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node19"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="2179,-557.64 2033,-557.64 2033,-521.64 2179,-521.64 2179,-557.64"/>
<text text-anchor="middle" x="2106" y="-535.94" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="4027,-1015.64 3877,-1015.64 3877,-979.64 4027,-979.64 4027,-1015.64"/>
<text text-anchor="middle" x="3952" y="-993.94" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2179.04,-537.51C2246.02,-534.65 2348.36,-527.98 2436,-512.64 2548.04,-493.01 2570.31,-461.11 2683,-445.64 2954.24,-408.38 3025.22,-441.75 3299,-440.64 3477.67,-439.91 3572.3,-316.7 3701,-440.64 3743.45,-481.51 3681.01,-927.35 3721,-970.64 3756.99,-1009.59 3816.96,-1015.57 3866.64,-1012.21"/>
<polygon fill="blue" stroke="blue" points="3867.06,-1015.69 3876.75,-1011.39 3866.5,-1008.71 3867.06,-1015.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node20"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="2193,-773.64 2019,-773.64 2019,-737.64 2193,-737.64 2193,-773.64"/>
<text text-anchor="middle" x="2106" y="-751.94" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node195"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2590.5,-1246.64 2536.5,-1246.64 2536.5,-1210.64 2590.5,-1210.64 2590.5,-1246.64"/>
<text text-anchor="middle" x="2563.5" y="-1224.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2193.12,-750.55C2279.17,-747.53 2403.25,-749.43 2436,-782.64 2501.53,-849.09 2405.46,-1129.36 2464.5,-1201.64 2479.28,-1219.72 2504.97,-1226.33 2526.34,-1228.48"/>
<polygon fill="blue" stroke="blue" points="2526.19,-1231.98 2536.41,-1229.22 2526.69,-1225 2526.19,-1231.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node21"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="2219,-1043.64 1993,-1043.64 1993,-1007.64 2219,-1007.64 2219,-1043.64"/>
<text text-anchor="middle" x="2106" y="-1021.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node183"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="2622,-3434.64 2505,-3434.64 2505,-3398.64 2622,-3398.64 2622,-3434.64"/>
<text text-anchor="middle" x="2563.5" y="-3412.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2219.03,-1010.5C2292.33,-1007.5 2383.86,-1018.18 2436,-1078.64 2477.93,-1127.25 2425.28,-3338.81 2464.5,-3389.64 2472.2,-3399.61 2483.23,-3406.13 2495.13,-3410.33"/>
<polygon fill="blue" stroke="blue" points="2494.23,-3413.71 2504.82,-3413.23 2496.24,-3407.01 2494.23,-3413.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node22"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="2191,-719.64 2021,-719.64 2021,-683.64 2191,-683.64 2191,-719.64"/>
<text text-anchor="middle" x="2106" y="-697.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node194"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="2590.5,-1192.64 2536.5,-1192.64 2536.5,-1156.64 2590.5,-1156.64 2590.5,-1192.64"/>
<text text-anchor="middle" x="2563.5" y="-1170.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2191.15,-696.63C2277.26,-693.5 2403,-695.17 2436,-728.64 2501.53,-795.09 2405.46,-1075.36 2464.5,-1147.64 2479.28,-1165.72 2504.97,-1172.33 2526.34,-1174.48"/>
<polygon fill="blue" stroke="blue" points="2526.19,-1177.98 2536.41,-1175.22 2526.69,-1171 2526.19,-1177.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node23"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2234.5,-449.64 1977.5,-449.64 1977.5,-413.64 2234.5,-413.64 2234.5,-449.64"/>
<text text-anchor="middle" x="2106" y="-427.94" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="2655,-222.64 2472,-222.64 2472,-186.64 2655,-186.64 2655,-222.64"/>
<text text-anchor="middle" x="2563.5" y="-200.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2191.18,-449.64C2264.49,-460.1 2369.22,-461.68 2436,-404.64 2476.7,-369.88 2436.37,-333.16 2464.5,-287.64 2479.33,-263.63 2503.45,-243.07 2524.05,-228.42"/>
<polygon fill="blue" stroke="blue" points="2526.09,-231.27 2532.33,-222.71 2522.11,-225.51 2526.09,-231.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node24"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="2219.5,-989.64 1992.5,-989.64 1992.5,-953.64 2219.5,-953.64 2219.5,-989.64"/>
<text text-anchor="middle" x="2106" y="-967.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node184"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="2622,-3380.64 2505,-3380.64 2505,-3344.64 2622,-3344.64 2622,-3380.64"/>
<text text-anchor="middle" x="2563.5" y="-3358.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2219.51,-965.41C2303.04,-963.52 2407.25,-967.85 2436,-998.64 2476.16,-1041.64 2453.03,-3058.93 2464.5,-3116.64 2481.08,-3200.02 2524.85,-3291.31 2547.87,-3335.56"/>
<polygon fill="blue" stroke="blue" points="2544.83,-3337.3 2552.58,-3344.52 2551.02,-3334.05 2544.83,-3337.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node25"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="2238,-881.64 1974,-881.64 1974,-845.64 2238,-845.64 2238,-881.64"/>
<text text-anchor="middle" x="2106" y="-859.94" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="3045,-1839.64 2917,-1839.64 2917,-1803.64 3045,-1803.64 3045,-1839.64"/>
<text text-anchor="middle" x="2981" y="-1817.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge511" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2238.13,-857.51C2317.6,-856.9 2408.74,-862.78 2436,-890.64 2472.82,-928.27 2439.93,-1317.07 2464.5,-1363.64 2516.61,-1462.39 2610.26,-1419.22 2663,-1517.64 2691.84,-1571.45 2640.43,-1747.87 2683,-1791.64 2739.71,-1849.94 2838.51,-1848.03 2906.48,-1837.83"/>
<polygon fill="blue" stroke="blue" points="2907.37,-1841.23 2916.7,-1836.2 2906.27,-1834.32 2907.37,-1841.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node26"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="2223.5,-665.64 1988.5,-665.64 1988.5,-629.64 2223.5,-629.64 2223.5,-665.64"/>
<text text-anchor="middle" x="2106" y="-643.94" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node197"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="2651.5,-1138.64 2475.5,-1138.64 2475.5,-1102.64 2651.5,-1102.64 2651.5,-1138.64"/>
<text text-anchor="middle" x="2563.5" y="-1116.94" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge524" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2184.75,-629.61C2259.01,-617.39 2369.21,-613.07 2436,-674.64 2464.65,-701.04 2454.71,-809.92 2464.5,-847.64 2488.41,-939.75 2530.42,-1044.63 2550.78,-1093.24"/>
<polygon fill="blue" stroke="blue" points="2547.56,-1094.61 2554.67,-1102.46 2554.01,-1091.89 2547.56,-1094.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node27"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="2243,-935.64 1969,-935.64 1969,-899.64 2243,-899.64 2243,-935.64"/>
<text text-anchor="middle" x="2106" y="-913.94" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node198"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="2652.5,-1565.64 2474.5,-1565.64 2474.5,-1529.64 2652.5,-1529.64 2652.5,-1565.64"/>
<text text-anchor="middle" x="2563.5" y="-1543.94" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge572" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2243.39,-911.5C2321.56,-911.2 2409.32,-917.42 2436,-944.64 2471.62,-980.96 2448.17,-1353.45 2464.5,-1401.64 2480.37,-1448.48 2515.4,-1494.5 2538.99,-1521.99"/>
<polygon fill="blue" stroke="blue" points="2536.39,-1524.34 2545.61,-1529.57 2541.67,-1519.73 2536.39,-1524.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node28"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="2179.5,-503.64 2032.5,-503.64 2032.5,-467.64 2179.5,-467.64 2179.5,-503.64"/>
<text text-anchor="middle" x="2106" y="-481.94" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4016,-961.64 3888,-961.64 3888,-925.64 4016,-925.64 4016,-961.64"/>
<text text-anchor="middle" x="3952" y="-939.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge817" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2179.58,-487.38C2247.16,-487.21 2350.09,-482.34 2436,-458.64 2449.6,-454.88 2450.92,-448.48 2464.5,-444.64 2558.36,-418.03 2585.78,-431.7 2683,-423.64 2956.5,-400.95 3024.72,-390.2 3299,-380.64 3477.56,-374.41 3551.21,-283.25 3701,-380.64 3894.39,-506.36 3939.37,-819.88 3948.74,-915.5"/>
<polygon fill="blue" stroke="blue" points="3945.27,-915.93 3949.67,-925.56 3952.24,-915.28 3945.27,-915.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node29"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="3047.5,-4787.64 2914.5,-4787.64 2914.5,-4751.64 3047.5,-4751.64 3047.5,-4787.64"/>
<text text-anchor="middle" x="2981" y="-4765.94" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="3549,-5032.64 3451,-5032.64 3451,-4996.64 3549,-4996.64 3549,-5032.64"/>
<text text-anchor="middle" x="3500" y="-5010.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3047.54,-4763.25C3110,-4759.94 3205.19,-4762.27 3279,-4796.64 3372.16,-4840.01 3448.83,-4940.11 3481.71,-4988.07"/>
<polygon fill="blue" stroke="blue" points="3478.84,-4990.07 3487.34,-4996.4 3484.64,-4986.15 3478.84,-4990.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node30"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3045.5,-4949.64 2916.5,-4949.64 2916.5,-4913.64 3045.5,-4913.64 3045.5,-4949.64"/>
<text text-anchor="middle" x="2981" y="-4927.94" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<g id="a_node275"><a xlink:title=" &#160;&#160;&#160;pub fn new(s: &amp;str) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (nickname, discriminator) = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s.rsplit_once(&#39;.&#39;).ok_or(UsernameError::MissingSeparator)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_parts_withou...">
<polygon fill="white" stroke="black" points="3527,-5221.64 3473,-5221.64 3473,-5185.64 3527,-5185.64 3527,-5221.64"/>
<text text-anchor="middle" x="3500" y="-5199.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.6,-4922.97C3113.78,-4917.62 3220.15,-4921.34 3279,-4984.64 3308.21,-5016.05 3269.13,-5145.84 3299,-5176.64 3341.21,-5220.15 3417.72,-5217.18 3462.89,-5210.68"/>
<polygon fill="blue" stroke="blue" points="3463.51,-5214.12 3472.84,-5209.12 3462.42,-5207.21 3463.51,-5214.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node31"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="3079.5,-4895.64 2882.5,-4895.64 2882.5,-4859.64 3079.5,-4859.64 3079.5,-4895.64"/>
<text text-anchor="middle" x="2981" y="-4873.94" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;pub fn from_parts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limits: NicknameLimits, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should perform the same set of checks...">
<polygon fill="white" stroke="black" points="3546,-5167.64 3454,-5167.64 3454,-5131.64 3546,-5131.64 3546,-5167.64"/>
<text text-anchor="middle" x="3500" y="-5145.94" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3064.49,-4859.59C3131.55,-4850.2 3223.8,-4850.19 3279,-4904.64 3309.38,-4934.61 3271.32,-5063.15 3299,-5095.64 3334.24,-5136.99 3397.54,-5148.34 3443.51,-5150.7"/>
<polygon fill="blue" stroke="blue" points="3443.49,-5154.2 3453.62,-5151.09 3443.76,-5147.21 3443.49,-5154.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node32"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3045.5,-4841.64 2916.5,-4841.64 2916.5,-4805.64 3045.5,-4805.64 3045.5,-4841.64"/>
<text text-anchor="middle" x="2981" y="-4819.94" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node268"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="3527,-5086.64 3473,-5086.64 3473,-5050.64 3527,-5050.64 3527,-5086.64"/>
<text text-anchor="middle" x="3500" y="-5064.94" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.77,-4808.54C3113.34,-4796.71 3218.46,-4790.91 3279,-4850.64 3309.38,-4880.61 3269.28,-5011.01 3299,-5041.64 3341.22,-5085.14 3417.73,-5082.17 3462.89,-5075.68"/>
<polygon fill="blue" stroke="blue" points="3463.51,-5079.12 3472.84,-5074.11 3462.42,-5072.21 3463.51,-5079.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.65,-4808.16C3113.63,-4795.83 3219.58,-4789.44 3279,-4850.64 3329.56,-4902.71 3249.58,-5123.48 3299,-5176.64 3340.39,-5221.15 3417.53,-5217.73 3462.96,-5210.9"/>
<polygon fill="blue" stroke="blue" points="3463.66,-5214.34 3472.97,-5209.27 3462.53,-5207.43 3463.66,-5214.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node33"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="3104.5,-7530.64 2857.5,-7530.64 2857.5,-7494.64 3104.5,-7494.64 3104.5,-7530.64"/>
<text text-anchor="middle" x="2981" y="-7508.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node362" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node362"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="3537.5,-9021.64 3462.5,-9021.64 3462.5,-8985.64 3537.5,-8985.64 3537.5,-9021.64"/>
<text text-anchor="middle" x="3500" y="-8999.94" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.76,-7494.59C3126.15,-7483.3 3224.21,-7480.47 3279,-7539.64 3333.14,-7598.09 3246.59,-8913.63 3299,-8973.64 3336.15,-9016.17 3405.56,-9017.1 3452.04,-9011.91"/>
<polygon fill="blue" stroke="blue" points="3452.67,-9015.36 3462.16,-9010.65 3451.81,-9008.41 3452.67,-9015.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().</title>
<g id="a_node34"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_serial: &amp;[u8; RECEIPT_SERIAL...">
<polygon fill="white" stroke="black" points="3246,-8502.64 2716,-8502.64 2716,-8466.64 3246,-8466.64 3246,-8502.64"/>
<text text-anchor="middle" x="2981" y="-8480.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node380" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node380"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="3653,-10159.64 3347,-10159.64 3347,-10123.64 3653,-10123.64 3653,-10159.64"/>
<text text-anchor="middle" x="3500" y="-10137.94" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8466.63C3125.87,-8455.28 3224.16,-8452.33 3279,-8511.64 3309.23,-8544.33 3269.49,-10081.29 3299,-10114.64 3309.57,-10126.58 3322.71,-10135.13 3337.17,-10141.11"/>
<polygon fill="blue" stroke="blue" points="3336.25,-10144.51 3346.84,-10144.69 3338.67,-10137.94 3336.25,-10144.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node35"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="3162,-7260.64 2800,-7260.64 2800,-7224.64 3162,-7224.64 3162,-7260.64"/>
<text text-anchor="middle" x="2981" y="-7238.94" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node339" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node339"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3979,-5799.64 3925,-5799.64 3925,-5763.64 3979,-5763.64 3979,-5799.64"/>
<text text-anchor="middle" x="3952" y="-5777.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.4,-7260.68C3127.46,-7271.48 3224.01,-7273.55 3279,-7215.64 3318.35,-7174.19 3259.21,-6742.66 3299,-6701.64 3361.34,-6637.35 3639.17,-6738.41 3701,-6673.64 3734.19,-6638.87 3688.64,-5844.18 3721,-5808.64 3769.62,-5755.23 3863.24,-5763.48 3914.78,-5773.15"/>
<polygon fill="blue" stroke="blue" points="3914.31,-5776.63 3924.81,-5775.15 3915.68,-5769.76 3914.31,-5776.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().</title>
<g id="a_node36"><a xlink:title="fn ServerSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; ServerSecretParams { &#160;&#160;&#160;&#160;ServerSecretParams::generate(*randomness) }">
<polygon fill="white" stroke="black" points="3140.5,-8286.64 2821.5,-8286.64 2821.5,-8250.64 3140.5,-8250.64 3140.5,-8286.64"/>
<text text-anchor="middle" x="2981" y="-8264.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node382" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node382"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3539.5,-9943.64 3460.5,-9943.64 3460.5,-9907.64 3539.5,-9907.64 3539.5,-9943.64"/>
<text text-anchor="middle" x="3500" y="-9921.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8250.63C3125.87,-8239.28 3224.16,-8236.33 3279,-8295.64 3309.23,-8328.33 3269.49,-9865.29 3299,-9898.64 3335.81,-9940.22 3403.71,-9940.66 3450.09,-9934.96"/>
<polygon fill="blue" stroke="blue" points="3450.79,-9938.4 3460.22,-9933.58 3449.84,-9931.47 3450.79,-9938.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node37"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3160.5,-7584.64 2801.5,-7584.64 2801.5,-7548.64 3160.5,-7548.64 3160.5,-7584.64"/>
<text text-anchor="middle" x="2981" y="-7562.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.75,-7548.6C3126.14,-7537.31 3224.19,-7534.48 3279,-7593.64 3331.11,-7649.88 3248.55,-8915.9 3299,-8973.64 3336.16,-9016.16 3405.57,-9017.09 3452.04,-9011.91"/>
<polygon fill="blue" stroke="blue" points="3452.68,-9015.36 3462.17,-9010.64 3451.81,-9008.41 3452.68,-9015.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node38"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="3140,-6612.64 2822,-6612.64 2822,-6576.64 3140,-6576.64 3140,-6612.64"/>
<text text-anchor="middle" x="2981" y="-6590.94" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node349" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node349"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="3980,-4650.64 3924,-4650.64 3924,-4614.64 3980,-4614.64 3980,-4650.64"/>
<text text-anchor="middle" x="3952" y="-4628.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.66,-6612.66C3127.65,-6623.37 3223.95,-6625.31 3279,-6567.64 3313.86,-6531.11 3266.39,-6152.19 3299,-6113.64 3416.99,-5974.13 3585.08,-6168.86 3701,-6027.64 3749.23,-5968.89 3670.07,-4716.06 3721,-4659.64 3769.14,-4606.31 3862.13,-4614.27 3913.91,-4623.94"/>
<polygon fill="blue" stroke="blue" points="3913.51,-4627.43 3924,-4625.95 3914.87,-4620.57 3913.51,-4627.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().</title>
<g id="a_node39"><a xlink:title="fn GenericServerSecretParams_GenerateDeterministic(randomness: &amp;[u8; RANDOMNESS_LEN]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = GenericServerSecretParams::generate(*randomness); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3167,-6288.64 2795,-6288.64 2795,-6252.64 3167,-6252.64 3167,-6288.64"/>
<text text-anchor="middle" x="2981" y="-6266.94" font-family="Helvetica,sans-Serif" font-size="14.00">GenericServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="node354" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<g id="a_node354"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: Default::default(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: zkcredential::credentials::CredentialKeyPair::generate(ra...">
<polygon fill="white" stroke="black" points="4408.5,-839.64 4329.5,-839.64 4329.5,-803.64 4408.5,-803.64 4408.5,-839.64"/>
<text text-anchor="middle" x="4369" y="-817.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3056.91,-6288.64C3125.45,-6300.16 3224.25,-6303.37 3279,-6243.64 3330.58,-6187.36 3244.93,-801.51 3299,-747.64 3325.72,-721.01 4136.3,-753.55 4183,-761.64 4230.8,-769.91 4283.21,-787.79 4320,-801.89"/>
<polygon fill="blue" stroke="blue" points="4318.89,-805.21 4329.48,-805.57 4321.43,-798.69 4318.89,-805.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node40"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="3129.5,-7800.64 2832.5,-7800.64 2832.5,-7764.64 3129.5,-7764.64 3129.5,-7800.64"/>
<text text-anchor="middle" x="2981" y="-7778.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node365" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node365"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="3556.5,-9291.64 3443.5,-9291.64 3443.5,-9255.64 3556.5,-9255.64 3556.5,-9291.64"/>
<text text-anchor="middle" x="3500" y="-9269.94" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.76,-7764.59C3126.15,-7753.3 3224.21,-7750.47 3279,-7809.64 3333.25,-7868.22 3246.04,-9186.89 3299,-9246.64 3331.56,-9283.37 3388.37,-9287.98 3433.15,-9284.63"/>
<polygon fill="blue" stroke="blue" points="3433.73,-9288.09 3443.37,-9283.72 3433.1,-9281.12 3433.73,-9288.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node41"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="3217.5,-7368.64 2744.5,-7368.64 2744.5,-7332.64 3217.5,-7332.64 3217.5,-7368.64"/>
<text text-anchor="middle" x="2981" y="-7346.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node329" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node329"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="3564,-6789.64 3436,-6789.64 3436,-6753.64 3564,-6753.64 3564,-6789.64"/>
<text text-anchor="middle" x="3500" y="-6767.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.41,-7368.69C3127.48,-7379.49 3224.03,-7381.57 3279,-7323.64 3319.18,-7281.29 3259.75,-6841.85 3299,-6798.64 3330.08,-6764.42 3382.24,-6758.3 3425.5,-6760.4"/>
<polygon fill="blue" stroke="blue" points="3425.51,-6763.91 3435.71,-6761.06 3425.96,-6756.92 3425.51,-6763.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node42"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="3122,-7476.64 2840,-7476.64 2840,-7440.64 3122,-7440.64 3122,-7476.64"/>
<text text-anchor="middle" x="2981" y="-7454.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node359" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node359"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3575.5,-7476.64 3424.5,-7476.64 3424.5,-7440.64 3575.5,-7440.64 3575.5,-7476.64"/>
<text text-anchor="middle" x="3500" y="-7454.94" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3122.25,-7458.64C3215.4,-7458.64 3334.67,-7458.64 3413.79,-7458.64"/>
<polygon fill="blue" stroke="blue" points="3414.2,-7462.14 3424.2,-7458.64 3414.2,-7455.14 3414.2,-7462.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node43"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="3238,-7746.64 2724,-7746.64 2724,-7710.64 3238,-7710.64 3238,-7746.64"/>
<text text-anchor="middle" x="2981" y="-7724.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node368" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node368"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="3592.5,-9237.64 3407.5,-9237.64 3407.5,-9201.64 3592.5,-9201.64 3592.5,-9237.64"/>
<text text-anchor="middle" x="3500" y="-9215.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.76,-7710.59C3126.15,-7699.3 3224.21,-7696.47 3279,-7755.64 3333.25,-7814.22 3246.04,-9132.89 3299,-9192.64 3323.27,-9220.02 3361.02,-9229.55 3397.22,-9231.24"/>
<polygon fill="blue" stroke="blue" points="3397.28,-9234.75 3407.37,-9231.52 3397.47,-9227.75 3397.28,-9234.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node44"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3242,-7638.64 2720,-7638.64 2720,-7602.64 3242,-7602.64 3242,-7638.64"/>
<text text-anchor="middle" x="2981" y="-7616.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node367" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node367"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="3593.5,-9129.64 3406.5,-9129.64 3406.5,-9093.64 3593.5,-9093.64 3593.5,-9129.64"/>
<text text-anchor="middle" x="3500" y="-9107.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.76,-7602.59C3126.15,-7591.3 3224.21,-7588.47 3279,-7647.64 3333.25,-7706.22 3246.04,-9024.89 3299,-9084.64 3323.06,-9111.78 3360.36,-9121.38 3396.27,-9123.2"/>
<polygon fill="blue" stroke="blue" points="3396.24,-9126.7 3406.34,-9123.51 3396.46,-9119.7 3396.24,-9126.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().</title>
<g id="a_node45"><a xlink:title="fn GroupSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::generate(*randomness).into() }">
<polygon fill="white" stroke="black" points="3138.5,-7098.64 2823.5,-7098.64 2823.5,-7062.64 3138.5,-7062.64 3138.5,-7098.64"/>
<text text-anchor="middle" x="2981" y="-7076.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="node360" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<g id="a_node360"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_GroupSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3991.5,-7498.64 3912.5,-7498.64 3912.5,-7462.64 3991.5,-7462.64 3991.5,-7498.64"/>
<text text-anchor="middle" x="3952" y="-7476.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.4,-7098.68C3127.46,-7109.48 3224.02,-7111.56 3279,-7053.64 3318.58,-7011.94 3257.57,-6576.49 3299,-6536.64 3331.19,-6505.67 3668.8,-6505.68 3701,-6536.64 3721.2,-6556.05 3713.78,-7013.56 3721,-7040.64 3766.28,-7210.41 3885.28,-7388.79 3931.89,-7454.43"/>
<polygon fill="blue" stroke="blue" points="3929.05,-7456.48 3937.72,-7462.58 3934.75,-7452.41 3929.05,-7456.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node46"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="3193.5,-6558.64 2768.5,-6558.64 2768.5,-6522.64 3193.5,-6522.64 3193.5,-6558.64"/>
<text text-anchor="middle" x="2981" y="-6536.94" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node350" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node350"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="3979,-4596.64 3925,-4596.64 3925,-4560.64 3979,-4560.64 3979,-4596.64"/>
<text text-anchor="middle" x="3952" y="-4574.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.37,-6558.65C3127.41,-6569.43 3223.94,-6571.49 3279,-6513.64 3316.26,-6474.48 3261.33,-6066.39 3299,-6027.64 3361.42,-5963.42 3639.45,-6064.68 3701,-5999.64 3754.24,-5943.38 3669.11,-4663.14 3721,-4605.64 3769.38,-4552.02 3863.1,-4560.35 3914.72,-4570.09"/>
<polygon fill="blue" stroke="blue" points="3914.27,-4573.57 3924.76,-4572.11 3915.64,-4566.71 3914.27,-4573.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().</title>
<g id="a_node47"><a xlink:title="fn ServerPublicParams_VerifySignature( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;notary_signature: &amp;[u8; SIGNATURE_LEN], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3114.5,-7962.64 2847.5,-7962.64 2847.5,-7926.64 3114.5,-7926.64 3114.5,-7962.64"/>
<text text-anchor="middle" x="2981" y="-7940.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node381" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node381"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="3564,-9619.64 3436,-9619.64 3436,-9583.64 3564,-9583.64 3564,-9619.64"/>
<text text-anchor="middle" x="3500" y="-9597.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-7926.63C3125.87,-7915.28 3224.16,-7912.33 3279,-7971.64 3309.23,-8004.33 3269.49,-9541.29 3299,-9574.64 3329.81,-9609.44 3382.4,-9615.42 3425.92,-9613.11"/>
<polygon fill="blue" stroke="blue" points="3426.17,-9616.6 3435.91,-9612.43 3425.69,-9609.62 3426.17,-9616.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node48"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="3179,-7692.64 2783,-7692.64 2783,-7656.64 3179,-7656.64 3179,-7692.64"/>
<text text-anchor="middle" x="2981" y="-7670.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node364" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node364"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="3527,-9183.64 3473,-9183.64 3473,-9147.64 3527,-9147.64 3527,-9183.64"/>
<text text-anchor="middle" x="3500" y="-9161.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.76,-7656.59C3126.15,-7645.3 3224.21,-7642.47 3279,-7701.64 3333.25,-7760.22 3246.04,-9078.89 3299,-9138.64 3339.32,-9184.12 3416.84,-9180.36 3462.63,-9173.21"/>
<polygon fill="blue" stroke="blue" points="3463.44,-9176.62 3472.72,-9171.49 3462.27,-9169.72 3463.44,-9176.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node49"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="3149,-8448.64 2813,-8448.64 2813,-8412.64 3149,-8412.64 3149,-8448.64"/>
<text text-anchor="middle" x="2981" y="-8426.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node376" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node376"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="3597.5,-10105.64 3402.5,-10105.64 3402.5,-10069.64 3597.5,-10069.64 3597.5,-10105.64"/>
<text text-anchor="middle" x="3500" y="-10083.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8412.63C3125.87,-8401.28 3224.16,-8398.33 3279,-8457.64 3309.23,-8490.33 3269.49,-10027.29 3299,-10060.64 3322.14,-10086.78 3357.58,-10096.66 3392.23,-10098.98"/>
<polygon fill="blue" stroke="blue" points="3392.3,-10102.49 3402.45,-10099.45 3392.63,-10095.49 3392.3,-10102.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().</title>
<g id="a_node50"><a xlink:title="fn ProfileKey_GetCommitment( &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCommitment&gt; { &#160;&#160;&#160;&#160;profile_key.get_commitment(user_id).into() }">
<polygon fill="white" stroke="black" points="3083.5,-8610.64 2878.5,-8610.64 2878.5,-8574.64 3083.5,-8574.64 3083.5,-8610.64"/>
<text text-anchor="middle" x="2981" y="-8588.94" font-family="Helvetica,sans-Serif" font-size="14.00">ProfileKey_GetCommitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node369" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node369"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="3567,-11306.64 3433,-11306.64 3433,-11270.64 3567,-11270.64 3567,-11306.64"/>
<text text-anchor="middle" x="3500" y="-11284.94" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3029.65,-8610.7C3099.24,-8639.98 3226.11,-8705.1 3279,-8807.64 3310.21,-8868.15 3254.36,-11207.23 3299,-11258.64 3328.84,-11293 3379.73,-11300.25 3422.7,-11299.04"/>
<polygon fill="blue" stroke="blue" points="3423.04,-11302.53 3432.87,-11298.6 3422.73,-11295.54 3423.04,-11302.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node51"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="3186,-8232.64 2776,-8232.64 2776,-8196.64 3186,-8196.64 3186,-8232.64"/>
<text text-anchor="middle" x="2981" y="-8210.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node374" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node374"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="3643,-9889.64 3357,-9889.64 3357,-9853.64 3643,-9853.64 3643,-9889.64"/>
<text text-anchor="middle" x="3500" y="-9867.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8196.63C3125.87,-8185.28 3224.16,-8182.33 3279,-8241.64 3309.23,-8274.33 3269.49,-9811.29 3299,-9844.64 3311.95,-9859.27 3328.76,-9868.81 3347.12,-9874.78"/>
<polygon fill="blue" stroke="blue" points="3346.27,-9878.17 3356.85,-9877.58 3348.21,-9871.45 3346.27,-9878.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node52"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="3143,-6882.64 2819,-6882.64 2819,-6846.64 3143,-6846.64 3143,-6882.64"/>
<text text-anchor="middle" x="2981" y="-6860.94" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node345" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node345"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="3986.5,-4895.64 3917.5,-4895.64 3917.5,-4859.64 3986.5,-4859.64 3986.5,-4895.64"/>
<text text-anchor="middle" x="3952" y="-4873.94" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.09,-6882.64C3127.18,-6893.5 3223.96,-6895.68 3279,-6837.64 3319.85,-6794.55 3260.81,-6349.1 3299,-6303.64 3416.53,-6163.74 3585.03,-6358.82 3701,-6217.64 3747.3,-6161.26 3672.1,-4958.77 3721,-4904.64 3767.11,-4853.59 3854.32,-4858.71 3907.1,-4867.73"/>
<polygon fill="blue" stroke="blue" points="3906.7,-4871.22 3917.17,-4869.57 3907.96,-4864.33 3906.7,-4871.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node53"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="3169,-6828.64 2793,-6828.64 2793,-6792.64 3169,-6792.64 3169,-6828.64"/>
<text text-anchor="middle" x="2981" y="-6806.94" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node344" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node344"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="4016,-4787.64 3888,-4787.64 3888,-4751.64 4016,-4751.64 4016,-4787.64"/>
<text text-anchor="middle" x="3952" y="-4765.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.12,-6828.67C3127.23,-6839.55 3224.02,-6841.74 3279,-6783.64 3322.25,-6737.92 3255.83,-6263.42 3299,-6217.64 3360.55,-6152.34 3640.13,-6245.57 3701,-6179.64 3753.12,-6123.18 3669.52,-4853.68 3721,-4796.64 3759.32,-4754.17 3826.08,-4750.57 3877.84,-4755.74"/>
<polygon fill="blue" stroke="blue" points="3877.65,-4759.24 3887.98,-4756.89 3878.43,-4752.29 3877.65,-4759.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node54"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="3234,-8394.64 2728,-8394.64 2728,-8358.64 3234,-8358.64 3234,-8394.64"/>
<text text-anchor="middle" x="2981" y="-8372.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node383" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node383"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="3641,-10051.64 3359,-10051.64 3359,-10015.64 3641,-10015.64 3641,-10051.64"/>
<text text-anchor="middle" x="3500" y="-10029.94" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8358.63C3125.87,-8347.28 3224.16,-8344.33 3279,-8403.64 3309.23,-8436.33 3269.49,-9973.29 3299,-10006.64 3312.41,-10021.78 3329.95,-10031.47 3349.06,-10037.39"/>
<polygon fill="blue" stroke="blue" points="3348.31,-10040.82 3358.88,-10040.08 3350.16,-10034.07 3348.31,-10040.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node55"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="3120.5,-7422.64 2841.5,-7422.64 2841.5,-7386.64 3120.5,-7386.64 3120.5,-7422.64"/>
<text text-anchor="middle" x="2981" y="-7400.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node357" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node357"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="3573,-7422.64 3427,-7422.64 3427,-7386.64 3573,-7386.64 3573,-7422.64"/>
<text text-anchor="middle" x="3500" y="-7400.94" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3120.55,-7404.64C3215.01,-7404.64 3336.93,-7404.64 3416.5,-7404.64"/>
<polygon fill="blue" stroke="blue" points="3416.95,-7408.14 3426.95,-7404.64 3416.95,-7401.14 3416.95,-7408.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node56"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3186,-7854.64 2776,-7854.64 2776,-7818.64 3186,-7818.64 3186,-7854.64"/>
<text text-anchor="middle" x="2981" y="-7832.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node371" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node371"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="3639,-9511.64 3361,-9511.64 3361,-9475.64 3639,-9475.64 3639,-9511.64"/>
<text text-anchor="middle" x="3500" y="-9489.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-7818.63C3125.87,-7807.28 3224.16,-7804.33 3279,-7863.64 3309.18,-7896.27 3269.79,-9430.14 3299,-9463.64 3312.78,-9479.44 3331.02,-9489.5 3350.89,-9495.64"/>
<polygon fill="blue" stroke="blue" points="3350.19,-9499.08 3360.76,-9498.35 3352.04,-9492.33 3350.19,-9499.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node57"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="3225,-8178.64 2737,-8178.64 2737,-8142.64 3225,-8142.64 3225,-8178.64"/>
<text text-anchor="middle" x="2981" y="-8156.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node370" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node370"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3636,-9835.64 3364,-9835.64 3364,-9799.64 3636,-9799.64 3636,-9835.64"/>
<text text-anchor="middle" x="3500" y="-9813.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8142.63C3125.87,-8131.28 3224.16,-8128.33 3279,-8187.64 3309.23,-8220.33 3269.49,-9757.29 3299,-9790.64 3313.6,-9807.13 3333.09,-9817.15 3354.19,-9822.88"/>
<polygon fill="blue" stroke="blue" points="3353.45,-9826.3 3363.99,-9825.22 3355.07,-9819.5 3353.45,-9826.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node58"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="3254,-8340.64 2708,-8340.64 2708,-8304.64 3254,-8304.64 3254,-8340.64"/>
<text text-anchor="middle" x="2981" y="-8318.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node372" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node372"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="3666.5,-9997.64 3333.5,-9997.64 3333.5,-9961.64 3666.5,-9961.64 3666.5,-9997.64"/>
<text text-anchor="middle" x="3500" y="-9975.94" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8304.63C3125.87,-8293.28 3224.16,-8290.33 3279,-8349.64 3309.23,-8382.33 3269.49,-9919.29 3299,-9952.64 3306.3,-9960.89 3314.83,-9967.52 3324.17,-9972.8"/>
<polygon fill="blue" stroke="blue" points="3322.86,-9976.06 3333.36,-9977.47 3326.03,-9969.82 3322.86,-9976.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node59"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="3207,-7206.64 2755,-7206.64 2755,-7170.64 3207,-7170.64 3207,-7206.64"/>
<text text-anchor="middle" x="2981" y="-7184.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node320" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node320"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="3533,-6638.64 3467,-6638.64 3467,-6602.64 3533,-6602.64 3533,-6638.64"/>
<text text-anchor="middle" x="3500" y="-6616.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.37,-7206.65C3127.41,-7217.43 3223.95,-7219.49 3279,-7161.64 3316.41,-7122.32 3265.03,-6715.96 3299,-6673.64 3336.52,-6626.89 3410.11,-6618.56 3456.8,-6618.44"/>
<polygon fill="blue" stroke="blue" points="3456.87,-6621.94 3466.91,-6618.53 3456.94,-6614.94 3456.87,-6621.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node60"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="3185,-7314.64 2777,-7314.64 2777,-7278.64 3185,-7278.64 3185,-7314.64"/>
<text text-anchor="middle" x="2981" y="-7292.94" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node335" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node335"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="3985,-5907.64 3919,-5907.64 3919,-5871.64 3985,-5871.64 3985,-5907.64"/>
<text text-anchor="middle" x="3952" y="-5885.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.08,-7314.64C3127.17,-7325.49 3223.95,-7327.67 3279,-7269.64 3319.4,-7227.04 3258.78,-6784.4 3299,-6741.64 3360.5,-6676.24 3639.8,-6767.32 3701,-6701.64 3754.19,-6644.54 3678.46,-6065.05 3721,-5999.64 3763.16,-5934.8 3854.93,-5907.22 3908.93,-5896.25"/>
<polygon fill="blue" stroke="blue" points="3909.73,-5899.66 3918.88,-5894.33 3908.4,-5892.79 3909.73,-5899.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node61"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="3169.5,-6774.64 2792.5,-6774.64 2792.5,-6738.64 3169.5,-6738.64 3169.5,-6774.64"/>
<text text-anchor="middle" x="2981" y="-6752.94" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node348" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node348"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="3979,-4488.64 3925,-4488.64 3925,-4452.64 3979,-4452.64 3979,-4488.64"/>
<text text-anchor="middle" x="3952" y="-4466.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.1,-6774.66C3127.2,-6785.52 3223.99,-6787.71 3279,-6729.64 3321.05,-6685.24 3264.82,-6230.34 3299,-6179.64 3408.41,-6017.31 3593.46,-6163.21 3701,-5999.64 3723.92,-5964.77 3693.06,-4528.63 3721,-4497.64 3769.35,-4444 3863.09,-4452.34 3914.71,-4462.09"/>
<polygon fill="blue" stroke="blue" points="3914.26,-4465.57 3924.75,-4464.1 3915.64,-4458.7 3914.26,-4465.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().</title>
<g id="a_node62"><a xlink:title="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serialized&lt;Gr...">
<polygon fill="white" stroke="black" points="3251,-7152.64 2711,-7152.64 2711,-7116.64 3251,-7116.64 3251,-7152.64"/>
<text text-anchor="middle" x="2981" y="-7130.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="node319" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<g id="a_node319"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AnyAuthCredentialPresentat...">
<polygon fill="white" stroke="black" points="3534.5,-6584.64 3465.5,-6584.64 3465.5,-6548.64 3534.5,-6548.64 3534.5,-6584.64"/>
<text text-anchor="middle" x="3500" y="-6562.94" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.4,-7152.68C3127.46,-7163.48 3224.01,-7165.55 3279,-7107.64 3318.35,-7066.19 3260.56,-6635.93 3299,-6593.64 3337.67,-6551.09 3408.94,-6551.99 3455.13,-6558.13"/>
<polygon fill="blue" stroke="blue" points="3454.75,-6561.61 3465.15,-6559.59 3455.76,-6554.68 3454.75,-6561.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node63"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="3132.5,-6504.64 2829.5,-6504.64 2829.5,-6468.64 3132.5,-6468.64 3132.5,-6504.64"/>
<text text-anchor="middle" x="2981" y="-6482.94" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node336" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node336"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="3528,-5964.64 3472,-5964.64 3472,-5928.64 3528,-5928.64 3528,-5964.64"/>
<text text-anchor="middle" x="3500" y="-5942.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge501" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.67,-6504.67C3127.67,-6515.38 3223.97,-6517.33 3279,-6459.64 3314.31,-6422.62 3266.93,-6039.49 3299,-5999.64 3337.86,-5951.34 3415.2,-5944.07 3461.49,-5944.47"/>
<polygon fill="blue" stroke="blue" points="3461.64,-5947.97 3471.71,-5944.68 3461.79,-5940.97 3461.64,-5947.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node64"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3187.5,-8556.64 2774.5,-8556.64 2774.5,-8520.64 3187.5,-8520.64 3187.5,-8556.64"/>
<text text-anchor="middle" x="2981" y="-8534.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node377" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node377"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3591,-10213.64 3409,-10213.64 3409,-10177.64 3591,-10177.64 3591,-10213.64"/>
<text text-anchor="middle" x="3500" y="-10191.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge525" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8520.63C3125.87,-8509.28 3224.16,-8506.33 3279,-8565.64 3309.23,-8598.33 3269.49,-10135.29 3299,-10168.64 3323.57,-10196.39 3361.99,-10205.82 3398.62,-10207.32"/>
<polygon fill="blue" stroke="blue" points="3398.82,-10210.83 3408.89,-10207.55 3398.97,-10203.83 3398.82,-10210.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node65"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3192.5,-6666.64 2769.5,-6666.64 2769.5,-6630.64 3192.5,-6630.64 3192.5,-6666.64"/>
<text text-anchor="middle" x="2981" y="-6644.94" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node347" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node347"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="3985,-4542.64 3919,-4542.64 3919,-4506.64 3985,-4506.64 3985,-4542.64"/>
<text text-anchor="middle" x="3952" y="-4520.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge527" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.4,-6666.68C3127.47,-6677.48 3224.02,-6679.56 3279,-6621.64 3318.65,-6579.86 3262.87,-6148.49 3299,-6103.64 3414.77,-5959.92 3587.02,-6144.78 3701,-5999.64 3750.69,-5936.36 3667.12,-4611.38 3721,-4551.64 3767.58,-4499.99 3856.21,-4505.81 3908.81,-4515.02"/>
<polygon fill="blue" stroke="blue" points="3908.35,-4518.49 3918.82,-4516.89 3909.64,-4511.61 3908.35,-4518.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node66"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="3271,-8124.64 2691,-8124.64 2691,-8088.64 3271,-8088.64 3271,-8124.64"/>
<text text-anchor="middle" x="2981" y="-8102.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node373" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node373"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="3686.5,-9781.64 3313.5,-9781.64 3313.5,-9745.64 3686.5,-9745.64 3686.5,-9781.64"/>
<text text-anchor="middle" x="3500" y="-9759.94" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge539" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8088.63C3125.87,-8077.28 3224.16,-8074.33 3279,-8133.64 3309.23,-8166.33 3269.49,-9703.29 3299,-9736.64 3301.07,-9738.97 3303.23,-9741.18 3305.49,-9743.26"/>
<polygon fill="blue" stroke="blue" points="3303.55,-9746.2 3313.49,-9749.88 3308.01,-9740.81 3303.55,-9746.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node67"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="3134,-6990.64 2828,-6990.64 2828,-6954.64 3134,-6954.64 3134,-6990.64"/>
<text text-anchor="middle" x="2981" y="-6968.94" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node343" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node343"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="3980,-4949.64 3924,-4949.64 3924,-4913.64 3980,-4913.64 3980,-4949.64"/>
<text text-anchor="middle" x="3952" y="-4927.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge591" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.82,-6990.65C3126.98,-7001.6 3224.01,-7003.91 3279,-6945.64 3325.84,-6895.99 3252.25,-6381.37 3299,-6331.64 3360.46,-6266.26 3640.1,-6359.54 3701,-6293.64 3750.36,-6240.22 3675.28,-5041.2 3721,-4984.64 3767.15,-4927.54 3861.35,-4924.4 3913.75,-4927.66"/>
<polygon fill="blue" stroke="blue" points="3913.72,-4931.17 3923.95,-4928.41 3914.23,-4924.19 3913.72,-4931.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node68"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="3140,-7044.64 2822,-7044.64 2822,-7008.64 3140,-7008.64 3140,-7044.64"/>
<text text-anchor="middle" x="2981" y="-7022.94" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node332" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node332"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="3979,-5853.64 3925,-5853.64 3925,-5817.64 3979,-5817.64 3979,-5853.64"/>
<text text-anchor="middle" x="3952" y="-5831.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge627" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.83,-7044.66C3127,-7055.62 3224.04,-7057.93 3279,-6999.64 3327.04,-6948.68 3251.05,-6420.68 3299,-6369.64 3360.44,-6304.23 3639.21,-6396.7 3701,-6331.64 3736.92,-6293.81 3685.51,-5900.86 3721,-5862.64 3770.14,-5809.71 3863.55,-5817.76 3914.92,-5827.28"/>
<polygon fill="blue" stroke="blue" points="3914.42,-5830.75 3924.91,-5829.25 3915.78,-5823.88 3914.42,-5830.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().</title>
<g id="a_node69"><a xlink:title="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3194.5,-8070.64 2767.5,-8070.64 2767.5,-8034.64 3194.5,-8034.64 3194.5,-8070.64"/>
<text text-anchor="middle" x="2981" y="-8048.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyProfileKeyCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node384" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node384"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="3652.5,-9727.64 3347.5,-9727.64 3347.5,-9691.64 3652.5,-9691.64 3652.5,-9727.64"/>
<text text-anchor="middle" x="3500" y="-9705.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge640" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8034.63C3125.87,-8023.28 3224.16,-8020.33 3279,-8079.64 3309.23,-8112.33 3269.49,-9649.29 3299,-9682.64 3309.67,-9694.69 3322.95,-9703.28 3337.56,-9709.28"/>
<polygon fill="blue" stroke="blue" points="3336.74,-9712.7 3347.34,-9712.85 3339.14,-9706.13 3336.74,-9712.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().</title>
<g id="a_node70"><a xlink:title="fn GroupSecretParams_DeriveFromMasterKey( &#160;&#160;&#160;&#160;master_key: Serialized&lt;GroupMasterKey&gt;, ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::derive_from_master_key(master_key.into_inner()).into()...">
<polygon fill="white" stroke="black" points="3136.5,-6234.64 2825.5,-6234.64 2825.5,-6198.64 3136.5,-6198.64 3136.5,-6234.64"/>
<text text-anchor="middle" x="2981" y="-6212.94" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DeriveFromMasterKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="node361" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<g id="a_node361"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_master_key(master_key: GroupMasterKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey&#39; , &#160;...">
<polygon fill="white" stroke="black" points="4461.5,-7422.64 4276.5,-7422.64 4276.5,-7386.64 4461.5,-7386.64 4461.5,-7422.64"/>
<text text-anchor="middle" x="4369" y="-7400.94" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_master_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge689" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3029.15,-6198.55C3098.7,-6168.98 3226.25,-6103.02 3279,-5999.64 3295.58,-5967.15 3273.16,-773.38 3299,-747.64 3425.58,-621.54 3524.78,-718.14 3701,-747.64 3924.46,-785.04 4050.94,-729.53 4183,-913.64 4204.14,-943.11 4208.67,-6100.44 4211,-6136.64 4243.15,-6636.11 4340.59,-7240.18 4363.26,-7376.44"/>
<polygon fill="blue" stroke="blue" points="4359.83,-7377.18 4364.93,-7386.47 4366.74,-7376.03 4359.83,-7377.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node71"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="3149,-6720.64 2813,-6720.64 2813,-6684.64 3149,-6684.64 3149,-6720.64"/>
<text text-anchor="middle" x="2981" y="-6698.94" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node351" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node351"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3986.5,-4704.64 3917.5,-4704.64 3917.5,-4668.64 3986.5,-4668.64 3986.5,-4704.64"/>
<text text-anchor="middle" x="3952" y="-4682.94" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge690" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.37,-6720.65C3127.41,-6731.43 3223.94,-6733.49 3279,-6675.64 3316.26,-6636.48 3264.16,-6230.95 3299,-6189.64 3416.79,-6049.96 3585.07,-6244.86 3701,-6103.64 3749.09,-6045.06 3673.38,-4798.59 3721,-4739.64 3765.3,-4684.8 3853.92,-4679.73 3907.3,-4682.3"/>
<polygon fill="blue" stroke="blue" points="3907.29,-4685.81 3917.48,-4682.91 3907.7,-4678.82 3907.29,-4685.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node72"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3117,-6342.64 2845,-6342.64 2845,-6306.64 3117,-6306.64 3117,-6342.64"/>
<text text-anchor="middle" x="2981" y="-6320.94" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node353" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node353"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="4001,-4405.64 3903,-4405.64 3903,-4369.64 4001,-4369.64 4001,-4405.64"/>
<text text-anchor="middle" x="3952" y="-4383.94" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge702" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.47,-6342.66C3125.9,-6354.02 3224.21,-6356.98 3279,-6297.64 3313.11,-6260.69 3266.04,-4525.61 3299,-4487.64 3375.88,-4399.06 3747.15,-4388.21 3892.49,-4387.41"/>
<polygon fill="blue" stroke="blue" points="3892.57,-4390.91 3902.56,-4387.37 3892.54,-4383.91 3892.57,-4390.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node73"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3131.5,-6936.64 2830.5,-6936.64 2830.5,-6900.64 3131.5,-6900.64 3131.5,-6936.64"/>
<text text-anchor="middle" x="2981" y="-6914.94" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node346" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node346"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="3985,-4841.64 3919,-4841.64 3919,-4805.64 3985,-4805.64 3985,-4841.64"/>
<text text-anchor="middle" x="3952" y="-4819.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge712" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.81,-6936.64C3126.96,-6947.58 3223.99,-6949.89 3279,-6891.64 3324.65,-6843.3 3256.03,-6344.37 3299,-6293.64 3416.79,-6154.55 3584.52,-6352.81 3701,-6212.64 3749.36,-6154.43 3670.29,-4906.81 3721,-4850.64 3767.6,-4799.01 3856.23,-4804.82 3908.82,-4814.02"/>
<polygon fill="blue" stroke="blue" points="3908.36,-4817.5 3918.83,-4815.89 3909.64,-4810.62 3908.36,-4817.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node74"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="3177,-8016.64 2785,-8016.64 2785,-7980.64 3177,-7980.64 3177,-8016.64"/>
<text text-anchor="middle" x="2981" y="-7994.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node378" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node378"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="3631.5,-9673.64 3368.5,-9673.64 3368.5,-9637.64 3631.5,-9637.64 3631.5,-9673.64"/>
<text text-anchor="middle" x="3500" y="-9651.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge734" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-7980.63C3125.87,-7969.28 3224.16,-7966.33 3279,-8025.64 3309.23,-8058.33 3269.49,-9595.29 3299,-9628.64 3314.6,-9646.25 3335.77,-9656.49 3358.53,-9662"/>
<polygon fill="blue" stroke="blue" points="3357.86,-9665.43 3368.37,-9664.08 3359.31,-9658.58 3357.86,-9665.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().</title>
<g id="a_node75"><a xlink:title="fn CallLinkSecretParams_DeriveFromRootKey(root_key: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = CallLinkSecretParams::derive_from_root_key(root_key); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3134,-6396.64 2828,-6396.64 2828,-6360.64 3134,-6360.64 3134,-6396.64"/>
<text text-anchor="middle" x="2981" y="-6374.94" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DeriveFromRootKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="node352" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<g id="a_node352"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_root_key(root_key: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4034,-4351.64 3870,-4351.64 3870,-4315.64 4034,-4315.64 4034,-4351.64"/>
<text text-anchor="middle" x="3952" y="-4329.94" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_root_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge735" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.47,-6396.66C3125.91,-6408.03 3224.22,-6410.98 3279,-6351.64 3314.12,-6313.59 3267.89,-4529.03 3299,-4487.64 3428.67,-4315.13 3712.89,-4311.79 3859.5,-4323.01"/>
<polygon fill="blue" stroke="blue" points="3859.56,-4326.53 3869.81,-4323.84 3860.13,-4319.55 3859.56,-4326.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().</title>
<g id="a_node76"><a xlink:title="fn ServerSecretParams_SignDeterministic( &#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; [u8; SIGNATURE_LEN] { &#160;&#160;&#160;&#160;params.sign(*randomness, message) }">
<polygon fill="white" stroke="black" points="3124,-7908.64 2838,-7908.64 2838,-7872.64 3124,-7872.64 3124,-7908.64"/>
<text text-anchor="middle" x="2981" y="-7886.94" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_SignDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node375" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node375"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="3527,-9565.64 3473,-9565.64 3473,-9529.64 3527,-9529.64 3527,-9565.64"/>
<text text-anchor="middle" x="3500" y="-9543.94" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge750" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-7872.63C3125.87,-7861.28 3224.16,-7858.33 3279,-7917.64 3309.23,-7950.33 3269.49,-9487.29 3299,-9520.64 3339.29,-9566.15 3416.82,-9562.38 3462.62,-9555.21"/>
<polygon fill="blue" stroke="blue" points="3463.44,-9558.63 3472.71,-9553.5 3462.26,-9551.72 3463.44,-9558.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node77"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3141.5,-6450.64 2820.5,-6450.64 2820.5,-6414.64 3141.5,-6414.64 3141.5,-6450.64"/>
<text text-anchor="middle" x="2981" y="-6428.94" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node340" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node340"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="3534.5,-5688.64 3465.5,-5688.64 3465.5,-5652.64 3534.5,-5652.64 3534.5,-5688.64"/>
<text text-anchor="middle" x="3500" y="-5666.94" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge836" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.85,-6450.68C3127.02,-6461.64 3224.06,-6463.96 3279,-6405.64 3328.39,-6353.2 3258.58,-5817.26 3299,-5757.64 3334.23,-5705.66 3407.74,-5684.51 3455.16,-5676.07"/>
<polygon fill="blue" stroke="blue" points="3455.85,-5679.5 3465.15,-5674.41 3454.71,-5672.59 3455.85,-5679.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node78"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2601,-335.64 2526,-335.64 2526,-299.64 2601,-299.64 2601,-335.64"/>
<text text-anchor="middle" x="2563.5" y="-313.94" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node79"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="3025.5,-335.64 2936.5,-335.64 2936.5,-299.64 3025.5,-299.64 3025.5,-335.64"/>
<text text-anchor="middle" x="2981" y="-313.94" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2601.01,-317.64C2674.46,-317.64 2840.4,-317.64 2926.26,-317.64"/>
<polygon fill="blue" stroke="blue" points="2926.33,-321.14 2936.33,-317.64 2926.33,-314.14 2926.33,-321.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="3575,-961.64 3425,-961.64 3425,-925.64 3575,-925.64 3575,-961.64"/>
<text text-anchor="middle" x="3500" y="-939.94" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2985.52,-335.86C3002.53,-418.67 3084.4,-761.91 3299,-913.64 3332.16,-937.08 3376.18,-945.46 3414.48,-947.61"/>
<polygon fill="blue" stroke="blue" points="3414.46,-951.11 3424.6,-948.04 3414.76,-944.12 3414.46,-951.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3025.8,-303.93C3146.16,-269.14 3487.17,-190.19 3701,-337.64 3904.2,-477.75 3942.53,-815.37 3949.51,-915.31"/>
<polygon fill="blue" stroke="blue" points="3946.03,-915.77 3950.16,-925.52 3953.01,-915.32 3946.03,-915.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node80"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="3527,-878.64 3473,-878.64 3473,-842.64 3527,-842.64 3527,-878.64"/>
<text text-anchor="middle" x="3500" y="-856.94" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.02,-860.19C3569.04,-860.89 3652.07,-868.4 3701,-913.64 3720.71,-931.86 3700.04,-953.86 3721,-970.64 3761.28,-1002.88 3818.97,-1009.58 3866.5,-1008.25"/>
<polygon fill="blue" stroke="blue" points="3866.94,-1011.73 3876.79,-1007.83 3866.65,-1004.74 3866.94,-1011.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.14,-865.46C3594.4,-877.86 3775.33,-911.23 3877.73,-930.12"/>
<polygon fill="blue" stroke="blue" points="3877.23,-933.59 3887.7,-931.96 3878.5,-926.7 3877.23,-933.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="3582,-1033.64 3418,-1033.64 3418,-997.64 3582,-997.64 3582,-1033.64"/>
<text text-anchor="middle" x="3500" y="-1011.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="4515.5,-981.64 4222.5,-981.64 4222.5,-945.64 4515.5,-945.64 4515.5,-981.64"/>
<text text-anchor="middle" x="4369" y="-959.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3582.01,-1019.96C3750.59,-1028.49 4128.06,-1044.96 4183,-1024.64 4198.37,-1018.95 4196.39,-1008.06 4211,-1000.64 4223.36,-994.36 4236.8,-989.13 4250.45,-984.77"/>
<polygon fill="blue" stroke="blue" points="4251.86,-988 4260.42,-981.75 4249.83,-981.3 4251.86,-988"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="4527,-1045.64 4211,-1045.64 4211,-1009.64 4527,-1009.64 4527,-1045.64"/>
<text text-anchor="middle" x="4369" y="-1023.94" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3582.06,-1026.61C3623.53,-1031.68 3674.87,-1037.13 3721,-1039.64 3926.03,-1050.79 3977.77,-1046.28 4183,-1039.64 4188.82,-1039.45 4194.74,-1039.22 4200.73,-1038.98"/>
<polygon fill="blue" stroke="blue" points="4201,-1042.47 4210.84,-1038.53 4200.69,-1035.47 4201,-1042.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3582.23,-1012.39C3662.59,-1009.17 3785.05,-1004.27 3866.52,-1001.01"/>
<polygon fill="blue" stroke="blue" points="3866.89,-1004.5 3876.74,-1000.61 3866.61,-997.51 3866.89,-1004.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3580.9,-997.59C3622.52,-988.62 3674.33,-978.13 3721,-970.64 3773.22,-962.24 3832.51,-955.35 3877.81,-950.63"/>
<polygon fill="blue" stroke="blue" points="3878.25,-954.1 3887.84,-949.59 3877.53,-947.14 3878.25,-954.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3575.07,-952.82C3617.74,-958.09 3672.38,-964.8 3721,-970.64 3769.33,-976.44 3823.39,-982.79 3866.95,-987.88"/>
<polygon fill="blue" stroke="blue" points="3866.59,-991.36 3876.93,-989.04 3867.4,-984.4 3866.59,-991.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="4709.5,-3760.64 4581.5,-3760.64 4581.5,-3724.64 4709.5,-3724.64 4709.5,-3760.64"/>
<text text-anchor="middle" x="4645.5" y="-3738.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4513.61,-981.8C4521.65,-986.9 4528.91,-993.1 4535,-1000.64 4582.42,-1059.28 4516.88,-3654.83 4561.5,-3715.64 4564.61,-3719.88 4568.41,-3723.47 4572.65,-3726.5"/>
<polygon fill="blue" stroke="blue" points="4570.9,-3729.53 4581.27,-3731.68 4574.5,-3723.53 4570.9,-3729.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="4720.5,-3706.64 4570.5,-3706.64 4570.5,-3670.64 4720.5,-3670.64 4720.5,-3706.64"/>
<text text-anchor="middle" x="4645.5" y="-3684.94" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4372.51,-1045.65C4389.91,-1171.15 4492.94,-1927.93 4535,-2547.64 4542.28,-2654.87 4536.34,-3410.14 4561.5,-3514.64 4574.82,-3569.96 4607.05,-3628.54 4627.21,-3661.66"/>
<polygon fill="blue" stroke="blue" points="4624.31,-3663.63 4632.54,-3670.3 4630.27,-3659.95 4624.31,-3663.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge632" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4027.19,-1003C4075.45,-1006.49 4140.38,-1011.18 4200.63,-1015.54"/>
<polygon fill="blue" stroke="blue" points="4200.42,-1019.03 4210.64,-1016.26 4200.92,-1012.05 4200.42,-1019.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge771" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4016.03,-946.67C4068.11,-949.18 4144.31,-952.85 4212.49,-956.14"/>
<polygon fill="blue" stroke="blue" points="4212.34,-959.64 4222.49,-956.62 4212.67,-952.65 4212.34,-959.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M4720.88,-3702.35C4726.66,-3705.86 4731.86,-3710.22 4736,-3715.64 4799.34,-3798.39 4844.76,-7286.12 4849.15,-7635.5"/>
<polygon fill="blue" stroke="blue" points="4845.65,-7635.6 4849.28,-7645.56 4852.65,-7635.51 4845.65,-7635.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M4667.81,-3760.75C4689.54,-3780.71 4722,-3815.03 4736,-3852.64 4806.06,-4040.81 4845.29,-7296.93 4849.18,-7635.28"/>
<polygon fill="blue" stroke="blue" points="4845.68,-7635.51 4849.3,-7645.47 4852.68,-7635.43 4845.68,-7635.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="4426.5,-3760.64 4311.5,-3760.64 4311.5,-3724.64 4426.5,-3724.64 4426.5,-3760.64"/>
<text text-anchor="middle" x="4369" y="-3738.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge538" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4426.54,-3742.64C4468.42,-3742.64 4525.84,-3742.64 4571.24,-3742.64"/>
<polygon fill="blue" stroke="blue" points="4571.32,-3746.14 4581.32,-3742.64 4571.32,-3739.14 4571.32,-3746.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4460.5,-3706.64 4277.5,-3706.64 4277.5,-3670.64 4460.5,-3670.64 4460.5,-3706.64"/>
<text text-anchor="middle" x="4369" y="-3684.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge736" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4460.64,-3688.64C4492.77,-3688.64 4528.77,-3688.64 4560.33,-3688.64"/>
<polygon fill="blue" stroke="blue" points="4560.41,-3692.14 4570.41,-3688.64 4560.41,-3685.14 4560.41,-3692.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge737" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4460.58,-3702.13C4484.83,-3706.1 4510.97,-3710.71 4535,-3715.64 4546.76,-3718.04 4559.18,-3720.85 4571.25,-3723.72"/>
<polygon fill="blue" stroke="blue" points="4570.75,-3727.2 4581.29,-3726.14 4572.39,-3720.39 4570.75,-3727.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node91"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1172,-4008.64 1014,-4008.64 1014,-3972.64 1172,-3972.64 1172,-4008.64"/>
<text text-anchor="middle" x="1093" y="-3986.94" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;pub fn verify_search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: SlimSearchRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: FullSearchResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime,...">
<polygon fill="white" stroke="black" points="1408,-3993.64 1300,-3993.64 1300,-3957.64 1408,-3957.64 1408,-3993.64"/>
<text text-anchor="middle" x="1354" y="-3971.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1172.06,-3986.11C1209.61,-3983.94 1254.05,-3981.37 1289.49,-3979.31"/>
<polygon fill="blue" stroke="blue" points="1289.93,-3982.79 1299.71,-3978.72 1289.53,-3975.81 1289.93,-3982.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node92"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="843,-4008.64 768,-4008.64 768,-3972.64 843,-3972.64 843,-4008.64"/>
<text text-anchor="middle" x="805.5" y="-3986.94" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge720" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M843.24,-3990.64C883.56,-3990.64 949.74,-3990.64 1003.7,-3990.64"/>
<polygon fill="blue" stroke="blue" points="1003.98,-3994.14 1013.98,-3990.64 1003.98,-3987.14 1003.98,-3994.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node98"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="1675,-4008.64 1567,-4008.64 1567,-3972.64 1675,-3972.64 1675,-4008.64"/>
<text text-anchor="middle" x="1621" y="-3986.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1408.31,-3978.65C1451.16,-3981.08 1511.48,-3984.49 1556.77,-3987.06"/>
<polygon fill="blue" stroke="blue" points="1556.6,-3990.55 1566.78,-3987.62 1556.99,-3983.56 1556.6,-3990.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;a self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;M...">
<polygon fill="white" stroke="black" points="1412,-3939.64 1296,-3939.64 1296,-3903.64 1412,-3903.64 1412,-3939.64"/>
<text text-anchor="middle" x="1354" y="-3917.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<g id="a_node96"><a xlink:title="pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;config: &amp;&#39;a PublicConfig, &#160;&#160;&#160;&#160;req: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;res: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;MonitorStateUpdate&gt; { ...">
<polygon fill="white" stroke="black" points="2164,-3954.64 2048,-3954.64 2048,-3918.64 2164,-3918.64 2164,-3954.64"/>
<text text-anchor="middle" x="2106" y="-3932.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1412.18,-3915.88C1439.36,-3913.42 1472.32,-3910.84 1502,-3909.64 1607.69,-3905.33 1634.29,-3905.73 1740,-3909.64 1844.16,-3913.48 1964.7,-3923.48 2037.86,-3930.17"/>
<polygon fill="blue" stroke="blue" points="2037.58,-3933.66 2047.86,-3931.1 2038.22,-3926.69 2037.58,-3933.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node95"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="2189.5,-4008.64 2022.5,-4008.64 2022.5,-3972.64 2189.5,-3972.64 2189.5,-4008.64"/>
<text text-anchor="middle" x="2106" y="-3986.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node100"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2643,-4008.64 2484,-4008.64 2484,-3972.64 2643,-3972.64 2643,-4008.64"/>
<text text-anchor="middle" x="2563.5" y="-3986.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2189.75,-3990.64C2270.02,-3990.64 2391.42,-3990.64 2473.68,-3990.64"/>
<polygon fill="blue" stroke="blue" points="2473.77,-3994.14 2483.77,-3990.64 2473.77,-3987.14 2473.77,-3994.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2164.02,-3939.09C2229.82,-3942.44 2341.17,-3949.68 2436,-3963.64 2448.92,-3965.54 2462.51,-3967.97 2475.78,-3970.59"/>
<polygon fill="blue" stroke="blue" points="2475.36,-3974.08 2485.86,-3972.63 2476.75,-3967.22 2475.36,-3974.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node97"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="3082.5,-4008.64 2879.5,-4008.64 2879.5,-3972.64 3082.5,-3972.64 3082.5,-4008.64"/>
<text text-anchor="middle" x="2981" y="-3986.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M3082.6,-3998.42C3198.47,-4007.38 3382.95,-4021.66 3461.55,-4027.74"/>
<polygon fill="blue" stroke="blue" points="3461.68,-4031.26 3471.92,-4028.54 3462.22,-4024.28 3461.68,-4031.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1675.07,-3990.64C1756.22,-3990.64 1912.23,-3990.64 2012.33,-3990.64"/>
<polygon fill="blue" stroke="blue" points="2012.44,-3994.14 2022.44,-3990.64 2012.44,-3987.14 2012.44,-3994.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="1725.5,-3954.64 1516.5,-3954.64 1516.5,-3918.64 1725.5,-3918.64 1725.5,-3954.64"/>
<text text-anchor="middle" x="1621" y="-3932.94" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge579" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1711.33,-3954.66C1730,-3958 1749.6,-3961.2 1768,-3963.64 1850.19,-3974.5 1944.28,-3981.59 2012.11,-3985.77"/>
<polygon fill="blue" stroke="blue" points="2012.15,-3989.28 2022.34,-3986.39 2012.57,-3982.29 2012.15,-3989.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge777" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2643.14,-3990.64C2706.94,-3990.64 2797.65,-3990.64 2868.87,-3990.64"/>
<polygon fill="blue" stroke="blue" points="2869.23,-3994.14 2879.23,-3990.64 2869.23,-3987.14 2869.23,-3994.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;validation, &#160;&#160;&#160;&#160;hmac_only, &#160;&#160;&#160;&#160;decrypt_only, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment_and_parse, &#160;&#160;&#160;&#160;de...">
<polygon fill="white" stroke="black" points="526,-5474.64 442,-5474.64 442,-5438.64 526,-5438.64 526,-5474.64"/>
<text text-anchor="middle" x="484" y="-5452.94" font-family="Helvetica,sans-Serif" font-size="14.00">validation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<g id="a_node103"><a xlink:title="fn parse_and_validate(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; PartialBackup&#39; ); &#160;&#160;&#160;&#160;benchmark_multiple_backup_sizes(|size, _backup, _key| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if size == 0 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;retu...">
<polygon fill="white" stroke="black" points="880.5,-5447.64 730.5,-5447.64 730.5,-5411.64 880.5,-5411.64 880.5,-5447.64"/>
<text text-anchor="middle" x="805.5" y="-5425.94" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M526.11,-5453.16C574.89,-5449.04 657.46,-5442.06 720.05,-5436.77"/>
<polygon fill="blue" stroke="blue" points="720.63,-5440.24 730.3,-5435.91 720.04,-5433.26 720.63,-5440.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;fn process&lt;R: ReaderFactory&lt;Reader: Unpin&gt;&gt;(input: R, key: &amp;MessageBackupKey) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;futures::executor::block_on(async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupReader::new_encrypted_compressed( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key,...">
<polygon fill="white" stroke="black" points="519,-5420.64 449,-5420.64 449,-5384.64 519,-5384.64 519,-5420.64"/>
<text text-anchor="middle" x="484" y="-5398.94" font-family="Helvetica,sans-Serif" font-size="14.00">process</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.07,-5405.71C552.41,-5406.7 602.25,-5402.43 631,-5372.64 682.96,-5318.8 601.86,-5254.94 659,-5206.64 707.36,-5165.75 884,-5186.35 944,-5206.64 994.95,-5223.86 1042.18,-5266.42 1069.01,-5294.11"/>
<polygon fill="blue" stroke="blue" points="1066.6,-5296.65 1076.02,-5301.49 1071.67,-5291.83 1066.6,-5296.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M853.32,-5411.59C903.21,-5392.37 982.2,-5361.94 1035.51,-5341.4"/>
<polygon fill="blue" stroke="blue" points="1037.08,-5344.55 1045.15,-5337.69 1034.56,-5338.02 1037.08,-5344.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expec...">
<polygon fill="white" stroke="black" points="1455.5,-4906.64 1252.5,-4906.64 1252.5,-4870.64 1455.5,-4870.64 1455.5,-4906.64"/>
<text text-anchor="middle" x="1354" y="-4884.94" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;fn add_frame_item(&amp;mut self, item: FrameItem) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FrameItem::Account(account_data) =&gt; self.add_account_data(account_data), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1685,-4734.64 1557,-4734.64 1557,-4698.64 1685,-4698.64 1685,-4734.64"/>
<text text-anchor="middle" x="1621" y="-4712.94" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame_item</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1454.48,-4870.51C1458.59,-4867.92 1462.47,-4864.97 1466,-4861.64 1505.87,-4823.99 1461.87,-4781 1502,-4743.64 1514.29,-4732.19 1530.41,-4725.26 1546.76,-4721.14"/>
<polygon fill="blue" stroke="blue" points="1547.92,-4724.47 1556.94,-4718.92 1546.43,-4717.63 1547.92,-4724.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn add_recipient(&amp;mut self, recipient: proto::Recipient) &#45;&gt; Result&lt;(), RecipientFrameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = recipient.id(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err_with_id = |e| RecipientFrameError(id, e); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2161,-4734.64 2051,-4734.64 2051,-4698.64 2161,-4698.64 2161,-4734.64"/>
<text text-anchor="middle" x="2106" y="-4712.94" font-family="Helvetica,sans-Serif" font-size="14.00">add_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1685.14,-4716.64C1777.32,-4716.64 1947.83,-4716.64 2040.68,-4716.64"/>
<polygon fill="blue" stroke="blue" points="2040.78,-4720.14 2050.78,-4716.64 2040.78,-4713.14 2040.78,-4720.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake() &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::fake_with([ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Recipient::test_data_contact().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Chat::test_data().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1648,-4606.64 1594,-4606.64 1594,-4570.64 1648,-4570.64 1648,-4606.64"/>
<text text-anchor="middle" x="1621" y="-4584.94" font-family="Helvetica,sans-Serif" font-size="14.00">fake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake_with(frames: impl IntoIterator&lt;Item = proto::frame::Item&gt;) &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut backup = Self::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for frame in frames { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backu...">
<polygon fill="white" stroke="black" points="1395,-4616.64 1313,-4616.64 1313,-4580.64 1395,-4580.64 1395,-4616.64"/>
<text text-anchor="middle" x="1354" y="-4594.94" font-family="Helvetica,sans-Serif" font-size="14.00">fake_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1593.86,-4593.85C1550.14,-4598.4 1461.48,-4602.14 1405.33,-4602.17"/>
<polygon fill="blue" stroke="blue" points="1405.26,-4598.67 1395.25,-4602.13 1405.23,-4605.67 1405.26,-4598.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1395.06,-4600.6C1417.8,-4603.5 1445.69,-4610.24 1466,-4625.64 1492.01,-4645.35 1475.86,-4670.1 1502,-4689.64 1515.04,-4699.37 1530.98,-4705.69 1546.88,-4709.77"/>
<polygon fill="blue" stroke="blue" points="1546.22,-4713.21 1556.75,-4712.03 1547.78,-4706.38 1546.22,-4713.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1395.25,-4592.11C1446.51,-4587.79 1534.34,-4584.54 1583.65,-4585.19"/>
<polygon fill="blue" stroke="blue" points="1583.79,-4588.69 1593.86,-4585.39 1583.93,-4581.69 1583.79,-4588.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;fn duplicate_contact_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, fill_in_field): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; CompletionE...">
<polygon fill="white" stroke="black" points="1700,-4950.64 1542,-4950.64 1542,-4914.64 1700,-4914.64 1700,-4950.64"/>
<text text-anchor="middle" x="1621" y="-4928.94" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_contact_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1700.25,-4917.67C1713.68,-4914.27 1727.37,-4910.26 1740,-4905.64 1865.74,-4859.54 2003.28,-4779.46 2067.75,-4739.99"/>
<polygon fill="blue" stroke="blue" points="2069.67,-4742.92 2076.35,-4734.7 2066,-4736.96 2069.67,-4742.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn chat_item_order() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut partial = Store::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account data&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1685,-4896.64 1557,-4896.64 1557,-4860.64 1685,-4860.64 1685,-4896.64"/>
<text text-anchor="middle" x="1621" y="-4874.94" font-family="Helvetica,sans-Serif" font-size="14.00">chat_item_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1685.16,-4865.77C1703.02,-4861.7 1722.38,-4856.89 1740,-4851.64 1853.17,-4817.91 1981.95,-4767.31 2052.27,-4738.6"/>
<polygon fill="blue" stroke="blue" points="2053.87,-4741.72 2061.79,-4734.69 2051.21,-4735.25 2053.87,-4741.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(...">
<polygon fill="white" stroke="black" points="1450.5,-4852.64 1257.5,-4852.64 1257.5,-4816.64 1450.5,-4816.64 1450.5,-4852.64"/>
<text text-anchor="middle" x="1354" y="-4830.94" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1450.7,-4817.06C1456.1,-4814.35 1461.26,-4811.23 1466,-4807.64 1492.01,-4787.92 1475.86,-4763.17 1502,-4743.64 1515.04,-4733.9 1530.98,-4727.58 1546.88,-4723.5"/>
<polygon fill="blue" stroke="blue" points="1547.78,-4726.89 1556.75,-4721.24 1546.22,-4720.06 1547.78,-4726.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;fn zero_recipient_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid accoun...">
<polygon fill="white" stroke="black" points="1687,-4842.64 1555,-4842.64 1555,-4806.64 1687,-4806.64 1687,-4842.64"/>
<text text-anchor="middle" x="1621" y="-4820.94" font-family="Helvetica,sans-Serif" font-size="14.00">zero_recipient_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1687.14,-4810.07C1779.84,-4789.34 1948.77,-4751.57 2040.9,-4730.97"/>
<polygon fill="blue" stroke="blue" points="2041.93,-4734.32 2050.92,-4728.73 2040.4,-4727.49 2041.93,-4734.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;pub fn add_frame(&amp;mut self, frame: proto::Frame) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_frame_item(frame.item.ok_or(ValidationError::EmptyFrame)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1399.5,-4798.64 1308.5,-4798.64 1308.5,-4762.64 1399.5,-4762.64 1399.5,-4798.64"/>
<text text-anchor="middle" x="1354" y="-4776.94" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1399.65,-4769.13C1428.75,-4761.7 1467.58,-4751.9 1502,-4743.64 1516.44,-4740.17 1531.91,-4736.55 1546.73,-4733.14"/>
<polygon fill="blue" stroke="blue" points="1547.9,-4736.46 1556.86,-4730.82 1546.34,-4729.64 1547.9,-4736.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_foreign_key&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let frame = proto::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item:...">
<polygon fill="white" stroke="black" points="1197.5,-4806.64 988.5,-4806.64 988.5,-4770.64 1197.5,-4770.64 1197.5,-4806.64"/>
<text text-anchor="middle" x="1093" y="-4784.94" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_foreign_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1197.85,-4785.43C1232.07,-4784.37 1268.78,-4783.24 1297.89,-4782.34"/>
<polygon fill="blue" stroke="blue" points="1298.37,-4785.82 1308.26,-4782.02 1298.15,-4778.83 1298.37,-4785.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn pni_matching_aci_is_okay&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid...">
<polygon fill="white" stroke="black" points="1718,-4788.64 1524,-4788.64 1524,-4752.64 1718,-4752.64 1718,-4788.64"/>
<text text-anchor="middle" x="1621" y="-4766.94" font-family="Helvetica,sans-Serif" font-size="14.00">pni_matching_aci_is_okay</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge566" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1718,-4759.9C1813.74,-4749.2 1958.11,-4733.06 2040.78,-4723.82"/>
<polygon fill="blue" stroke="blue" points="2041.24,-4727.29 2050.79,-4722.7 2040.46,-4720.33 2041.24,-4727.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn allows_lone_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; ac...">
<polygon fill="white" stroke="black" points="1436.5,-4670.64 1271.5,-4670.64 1271.5,-4634.64 1436.5,-4634.64 1436.5,-4670.64"/>
<text text-anchor="middle" x="1354" y="-4648.94" font-family="Helvetica,sans-Serif" font-size="14.00">allows_lone_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge568" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1430.61,-4670.68C1442.47,-4673.61 1454.58,-4676.66 1466,-4679.64 1482.07,-4683.82 1485.9,-4685.56 1502,-4689.64 1516.4,-4693.28 1531.85,-4696.97 1546.66,-4700.41"/>
<polygon fill="blue" stroke="blue" points="1546.26,-4703.91 1556.8,-4702.74 1547.83,-4697.08 1546.26,-4703.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge567" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1436.88,-4641.47C1458.05,-4639.05 1480.84,-4636.85 1502,-4635.64 1607.6,-4629.55 1634.85,-4624.11 1740,-4635.64 1847.07,-4647.37 1968.7,-4677.93 2041.02,-4697.97"/>
<polygon fill="blue" stroke="blue" points="2040.32,-4701.41 2050.9,-4700.73 2042.2,-4694.67 2040.32,-4701.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn zero_chat_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account dat...">
<polygon fill="white" stroke="black" points="1672,-4680.64 1570,-4680.64 1570,-4644.64 1672,-4644.64 1672,-4680.64"/>
<text text-anchor="middle" x="1621" y="-4658.94" font-family="Helvetica,sans-Serif" font-size="14.00">zero_chat_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge626" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1672.32,-4668.26C1760.65,-4678.14 1943.42,-4698.57 2040.74,-4709.45"/>
<polygon fill="blue" stroke="blue" points="2040.42,-4712.94 2050.74,-4710.57 2041.19,-4705.98 2040.42,-4712.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err = partial.add_frame_item(item.into()).unwra...">
<polygon fill="white" stroke="black" points="1169,-4752.64 1017,-4752.64 1017,-4716.64 1169,-4716.64 1169,-4752.64"/>
<text text-anchor="middle" x="1093" y="-4730.94" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge630" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1169.24,-4736.8C1244.43,-4738.4 1363.31,-4739.42 1466,-4733.64 1492.44,-4732.14 1521.31,-4729.29 1546.84,-4726.33"/>
<polygon fill="blue" stroke="blue" points="1547.29,-4729.8 1556.82,-4725.16 1546.47,-4722.85 1547.29,-4729.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge631" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1103.6,-4716.42C1123.65,-4680.59 1173.85,-4601.81 1242,-4571.64 1302.48,-4544.86 1501.73,-4570.73 1583.99,-4582.99"/>
<polygon fill="blue" stroke="blue" points="1583.47,-4586.45 1593.88,-4584.48 1584.52,-4579.53 1583.47,-4586.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge629" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1113.42,-4716.31C1140.24,-4692 1191.11,-4649.39 1242,-4625.64 1261.05,-4616.74 1283.36,-4610.58 1302.96,-4606.42"/>
<polygon fill="blue" stroke="blue" points="1303.82,-4609.82 1312.94,-4604.42 1302.44,-4602.96 1303.82,-4609.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;fn rejects_multiple_account_data&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expe...">
<polygon fill="white" stroke="black" points="1466,-4724.64 1242,-4724.64 1242,-4688.64 1466,-4688.64 1466,-4724.64"/>
<text text-anchor="middle" x="1354" y="-4702.94" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_multiple_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge633" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1466.23,-4710.83C1493.37,-4711.86 1521.73,-4712.93 1546.6,-4713.87"/>
<polygon fill="blue" stroke="blue" points="1546.54,-4717.37 1556.67,-4714.25 1546.81,-4710.37 1546.54,-4717.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;Destination&lt;R&gt;, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2616,-4334.64 2511,-4334.64 2511,-4298.64 2616,-4298.64 2616,-4334.64"/>
<text text-anchor="middle" x="2563.5" y="-4312.94" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge665" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2145.26,-4698.51C2210.46,-4666.28 2344.9,-4593.94 2436,-4504.64 2486.37,-4455.26 2528.24,-4382.82 2548.8,-4343.85"/>
<polygon fill="blue" stroke="blue" points="2552.06,-4345.18 2553.57,-4334.7 2545.85,-4341.95 2552.06,-4345.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;fn duplicate_non_contact_recipient&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, destination): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; Co...">
<polygon fill="white" stroke="black" points="1740,-4552.64 1502,-4552.64 1502,-4516.64 1740,-4516.64 1740,-4552.64"/>
<text text-anchor="middle" x="1621" y="-4530.94" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_non_contact_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge688" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1708.84,-4552.66C1719.41,-4555.39 1730,-4558.4 1740,-4561.64 1858.22,-4599.93 1991.2,-4661.29 2059.34,-4694.14"/>
<polygon fill="blue" stroke="blue" points="2057.99,-4697.38 2068.52,-4698.58 2061.04,-4691.07 2057.99,-4697.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;fn valid_account_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::AccountData::test_data().try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(AccountData::from_proto_test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2638,-4582.64 2489,-4582.64 2489,-4546.64 2638,-4546.64 2638,-4582.64"/>
<text text-anchor="middle" x="2563.5" y="-4560.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(crate) fn from_proto_test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: FAKE_PROFILE_KEY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Some(UsernameData { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Use...">
<polygon fill="white" stroke="black" points="3062,-4582.64 2900,-4582.64 2900,-4546.64 3062,-4546.64 3062,-4582.64"/>
<text text-anchor="middle" x="2981" y="-4560.94" font-family="Helvetica,sans-Serif" font-size="14.00">from_proto_test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.3,-4564.64C2708.46,-4564.64 2814.15,-4564.64 2889.39,-4564.64"/>
<polygon fill="blue" stroke="blue" points="2889.79,-4568.14 2899.79,-4564.64 2889.79,-4561.14 2889.79,-4568.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3062.06,-4554.38C3130.69,-4550.56 3226.53,-4558 3279,-4618.64 3319.6,-4665.55 3257.34,-5130.66 3299,-5176.64 3339.82,-5221.68 3417.16,-5218.07 3462.78,-5211.07"/>
<polygon fill="blue" stroke="blue" points="3463.55,-5214.49 3472.83,-5209.39 3462.39,-5207.58 3463.55,-5214.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;fn try_from( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(username, username_link): (String, Option&lt;proto::account_data::UsernameLink&gt;), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;username)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2601,-4636.64 2526,-4636.64 2526,-4600.64 2601,-4600.64 2601,-4636.64"/>
<text text-anchor="middle" x="2563.5" y="-4614.94" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2601.05,-4619.05C2733.9,-4621.4 3188.12,-4636.93 3279,-4739.64 3311.21,-4776.04 3266.18,-5140.78 3299,-5176.64 3340.04,-5221.47 3417.31,-5217.94 3462.85,-5211"/>
<polygon fill="blue" stroke="blue" points="3463.59,-5214.43 3472.88,-5209.34 3462.45,-5207.52 3463.59,-5214.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="2150.5,-10113.64 2061.5,-10113.64 2061.5,-10077.64 2150.5,-10077.64 2150.5,-10113.64"/>
<text text-anchor="middle" x="2106" y="-10091.94" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="2603.5,-10102.64 2523.5,-10102.64 2523.5,-10066.64 2603.5,-10066.64 2603.5,-10102.64"/>
<text text-anchor="middle" x="2563.5" y="-10080.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2150.68,-10094.58C2235.82,-10092.52 2423.47,-10087.99 2513.04,-10085.83"/>
<polygon fill="blue" stroke="blue" points="2513.29,-10089.32 2523.2,-10085.58 2513.12,-10082.33 2513.29,-10089.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="3068,-10102.64 2894,-10102.64 2894,-10066.64 3068,-10066.64 3068,-10102.64"/>
<text text-anchor="middle" x="2981" y="-10080.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge732" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.24,-10085.14C3157.31,-10085.65 3296.46,-10086.46 3392.37,-10087.02"/>
<polygon fill="blue" stroke="blue" points="3392.37,-10090.52 3402.39,-10087.07 3392.41,-10083.52 3392.37,-10090.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge731" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.09,-10090.2C3129.93,-10097.2 3213.57,-10112.99 3279,-10148.64 3290.04,-10154.65 3287.73,-10163.06 3299,-10168.64 3329.45,-10183.71 3365.52,-10191.24 3398.6,-10194.78"/>
<polygon fill="blue" stroke="blue" points="3398.47,-10198.28 3408.75,-10195.75 3399.13,-10191.31 3398.47,-10198.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge729" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.24,-10094.14C3141.2,-10102.19 3247.77,-10113.94 3336.65,-10123.74"/>
<polygon fill="blue" stroke="blue" points="3336.52,-10127.24 3346.84,-10124.86 3337.28,-10120.28 3336.52,-10127.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge728" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.08,-10084.79C3133.62,-10080.37 3221.98,-10063.96 3279,-10011.64 3299.4,-9992.91 3277.63,-9970.24 3299,-9952.64 3341.15,-9917.91 3406.11,-9915.46 3450.48,-9918.86"/>
<polygon fill="blue" stroke="blue" points="3450.18,-9922.35 3460.45,-9919.75 3450.8,-9915.37 3450.18,-9922.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge730" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.24,-10076.13C3144.53,-10068.6 3257.56,-10057.45 3348.69,-10048.46"/>
<polygon fill="blue" stroke="blue" points="3349.24,-10051.93 3358.85,-10047.46 3348.55,-10044.96 3349.24,-10051.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="2170.5,-10059.64 2041.5,-10059.64 2041.5,-10023.64 2170.5,-10023.64 2170.5,-10059.64"/>
<text text-anchor="middle" x="2106" y="-10037.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge747" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2170.84,-10042.31C2274.27,-10043.66 2484.88,-10047.49 2663,-10057.64 2737.18,-10061.86 2820.92,-10069.1 2883.7,-10075.02"/>
<polygon fill="blue" stroke="blue" points="2883.7,-10078.53 2893.98,-10075.99 2884.36,-10071.56 2883.7,-10078.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge746" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2170.76,-10046.03C2237.1,-10050.81 2343.94,-10059.04 2436,-10068.64 2461.51,-10071.29 2489.84,-10074.82 2513.21,-10077.89"/>
<polygon fill="blue" stroke="blue" points="2512.86,-10081.37 2523.23,-10079.22 2513.78,-10074.44 2512.86,-10081.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge824" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2603.59,-10084.64C2667.2,-10084.64 2794.93,-10084.64 2883.85,-10084.64"/>
<polygon fill="blue" stroke="blue" points="2883.96,-10088.14 2893.96,-10084.64 2883.96,-10081.14 2883.96,-10088.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn valid_distribution_list() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::DistributionListItem::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data(...">
<polygon fill="white" stroke="black" points="2187.5,-4469.64 2024.5,-4469.64 2024.5,-4433.64 2187.5,-4433.64 2187.5,-4469.64"/>
<text text-anchor="middle" x="2106" y="-4447.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2187.66,-4458.53C2256.33,-4461.29 2356.23,-4457.82 2436,-4424.64 2479.25,-4406.64 2518.48,-4368.09 2541.42,-4342.25"/>
<polygon fill="blue" stroke="blue" points="2544.08,-4344.52 2548,-4334.68 2538.8,-4339.93 2544.08,-4344.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;ContactData, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3033.5,-4415.64 2928.5,-4415.64 2928.5,-4379.64 3033.5,-4379.64 3033.5,-4415.64"/>
<text text-anchor="middle" x="2981" y="-4393.94" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3033.54,-4404.78C3102.77,-4417.42 3223.51,-4450.83 3279,-4534.64 3318.4,-4594.14 3251.2,-5123.64 3299,-5176.64 3339.71,-5221.77 3417.09,-5218.13 3462.75,-5211.1"/>
<polygon fill="blue" stroke="blue" points="3463.52,-5214.52 3472.81,-5209.41 3462.37,-5207.61 3463.52,-5214.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;fn destination_group(modifier: fn(&amp;mut proto::Group)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut group = proto::Group::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut group); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = prot...">
<polygon fill="white" stroke="black" points="2176.5,-4415.64 2035.5,-4415.64 2035.5,-4379.64 2176.5,-4379.64 2176.5,-4415.64"/>
<text text-anchor="middle" x="2106" y="-4393.94" font-family="Helvetica,sans-Serif" font-size="14.00">destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2176.72,-4398.35C2244.04,-4397.55 2348.38,-4392.33 2436,-4370.64 2464.85,-4363.49 2495.56,-4350.53 2519.49,-4339.09"/>
<polygon fill="blue" stroke="blue" points="2521.18,-4342.16 2528.64,-4334.64 2518.12,-4335.87 2521.18,-4342.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;fn destination_distribution_list( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier: fn(&amp;mut proto::DistributionListItem), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut distribution_list = proto::DistributionListItem::tes...">
<polygon fill="white" stroke="black" points="2209.5,-4361.64 2002.5,-4361.64 2002.5,-4325.64 2209.5,-4325.64 2209.5,-4361.64"/>
<text text-anchor="middle" x="2106" y="-4339.94" font-family="Helvetica,sans-Serif" font-size="14.00">destination_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2209.51,-4337.56C2298.96,-4332.26 2425.82,-4324.74 2500.59,-4320.3"/>
<polygon fill="blue" stroke="blue" points="2501.01,-4323.79 2510.78,-4319.7 2500.6,-4316.8 2501.01,-4323.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn destination_contact(modifier: fn(&amp;mut proto::Contact)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut contact = proto::Contact::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut contact); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipi...">
<polygon fill="white" stroke="black" points="2182,-4307.64 2030,-4307.64 2030,-4271.64 2182,-4271.64 2182,-4307.64"/>
<text text-anchor="middle" x="2106" y="-4285.94" font-family="Helvetica,sans-Serif" font-size="14.00">destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.22,-4294.09C2271.36,-4299.38 2418.2,-4308.08 2500.91,-4312.98"/>
<polygon fill="blue" stroke="blue" points="2500.73,-4316.48 2510.92,-4313.58 2501.14,-4309.49 2500.73,-4316.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_self() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;recipient.try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Destination::...">
<polygon fill="white" stroke="black" points="2188.5,-4253.64 2023.5,-4253.64 2023.5,-4217.64 2188.5,-4217.64 2188.5,-4253.64"/>
<text text-anchor="middle" x="2106" y="-4231.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.62,-4235.1C2255.91,-4236.37 2353.39,-4242.18 2436,-4262.64 2464.85,-4269.78 2495.56,-4282.74 2519.49,-4294.18"/>
<polygon fill="blue" stroke="blue" points="2518.12,-4297.4 2528.64,-4298.63 2521.18,-4291.11 2518.12,-4297.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2616.28,-4326.73C2692.92,-4341.67 2836.3,-4369.62 2918.29,-4385.6"/>
<polygon fill="blue" stroke="blue" points="2917.73,-4389.06 2928.22,-4387.54 2919.07,-4382.19 2917.73,-4389.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_group() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Group::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2196.5,-4199.64 2015.5,-4199.64 2015.5,-4163.64 2196.5,-4163.64 2196.5,-4199.64"/>
<text text-anchor="middle" x="2106" y="-4177.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge560" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.71,-4174.42C2264.9,-4172.34 2359.67,-4176.88 2436,-4208.64 2479.25,-4226.63 2518.48,-4265.18 2541.42,-4291.02"/>
<polygon fill="blue" stroke="blue" points="2538.8,-4293.34 2548,-4298.59 2544.08,-4288.75 2538.8,-4293.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_contact() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Contact::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}...">
<polygon fill="white" stroke="black" points="2201.5,-4145.64 2010.5,-4145.64 2010.5,-4109.64 2201.5,-4109.64 2201.5,-4145.64"/>
<text text-anchor="middle" x="2106" y="-4123.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge569" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2201.65,-4115.96C2270.66,-4111.89 2364.26,-4115.92 2436,-4154.64 2491.92,-4184.81 2531.26,-4251.4 2550.02,-4289.14"/>
<polygon fill="blue" stroke="blue" points="2547.05,-4291.04 2554.55,-4298.52 2553.35,-4287.99 2547.05,-4291.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;fn requires_destination() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: None, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r...">
<polygon fill="white" stroke="black" points="2184.5,-4091.64 2027.5,-4091.64 2027.5,-4055.64 2184.5,-4055.64 2184.5,-4091.64"/>
<text text-anchor="middle" x="2106" y="-4069.94" font-family="Helvetica,sans-Serif" font-size="14.00">requires_destination</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge669" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2184.77,-4060.88C2255.72,-4053.42 2360.68,-4053.26 2436,-4100.64 2505.4,-4144.29 2541.21,-4240.91 2555.25,-4288.72"/>
<polygon fill="blue" stroke="blue" points="2551.9,-4289.75 2558,-4298.42 2558.64,-4287.84 2551.9,-4289.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chats_and_recipient_ids() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base = vec![crate::proto::backup::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: Some(proto::AccountData::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: Default::d...">
<polygon fill="white" stroke="black" points="927.5,-5087.64 683.5,-5087.64 683.5,-5051.64 927.5,-5051.64 927.5,-5087.64"/>
<text text-anchor="middle" x="805.5" y="-5065.94" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chats_and_recipient_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;fn backup_from_frames( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;frames: impl IntoIterator&lt;Item = proto::Frame&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; crate::CompletedBackup&lt;Store&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut reader = crate::backup::PartialBackup::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prot...">
<polygon fill="white" stroke="black" points="1173.5,-5033.64 1012.5,-5033.64 1012.5,-4997.64 1173.5,-4997.64 1173.5,-5033.64"/>
<text text-anchor="middle" x="1093" y="-5011.94" font-family="Helvetica,sans-Serif" font-size="14.00">backup_from_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M901.96,-5051.58C934.29,-5045.46 970.26,-5038.66 1002.14,-5032.63"/>
<polygon fill="blue" stroke="blue" points="1003.16,-5036 1012.34,-5030.7 1001.86,-5029.12 1003.16,-5036"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1173.76,-5009.39C1188.92,-5004.71 1203.35,-4997.28 1214,-4985.64 1268.05,-4926.55 1187.76,-4866.55 1242,-4807.64 1256.31,-4792.1 1277.92,-4784.81 1298.29,-4781.61"/>
<polygon fill="blue" stroke="blue" points="1298.99,-4785.05 1308.46,-4780.31 1298.1,-4778.1 1298.99,-4785.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chat_item_frames_not_equal() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let first_contact = make_contact(&#39; first&#39; , 1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let second_contact = make_contact(&#39; second&#39; , 2); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let constant_frames = vec![ &#160;&#160;...">
<polygon fill="white" stroke="black" points="944,-5033.64 667,-5033.64 667,-4997.64 944,-4997.64 944,-5033.64"/>
<text text-anchor="middle" x="805.5" y="-5011.94" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chat_item_frames_not_equal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M944.23,-5015.64C963.96,-5015.64 983.82,-5015.64 1002.3,-5015.64"/>
<polygon fill="blue" stroke="blue" points="1002.41,-5019.14 1012.41,-5015.64 1002.41,-5012.14 1002.41,-5019.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn can_serialize() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = Backup { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;meta: BackupMeta { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_time: Timestamp::test_value(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;purpose: crate::...">
<polygon fill="white" stroke="black" points="858,-5141.64 753,-5141.64 753,-5105.64 858,-5105.64 858,-5141.64"/>
<text text-anchor="middle" x="805.5" y="-5119.94" font-family="Helvetica,sans-Serif" font-size="14.00">can_serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M858.29,-5139.78C1084.31,-5206.71 1992.78,-5438.24 2436,-4985.64 2505.8,-4914.36 2391.76,-4605.9 2464.5,-4537.64 2523.85,-4481.94 2758.51,-4518.87 2889.81,-4545.03"/>
<polygon fill="blue" stroke="blue" points="2889.37,-4548.51 2899.86,-4547.05 2890.75,-4541.65 2889.37,-4548.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().</title>
<g id="a_node142"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;futures::executor::block_on(async_main()) }">
<polygon fill="white" stroke="black" points="832.5,-4837.64 778.5,-4837.64 778.5,-4801.64 832.5,-4801.64 832.5,-4837.64"/>
<text text-anchor="middle" x="805.5" y="-4815.94" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.92,-4801.59C856.12,-4774.91 917.41,-4726.08 980,-4707.64 1079.76,-4678.23 1117.2,-4669.62 1214,-4707.64 1229.81,-4713.84 1227.74,-4724.41 1242,-4733.64 1259.43,-4744.92 1280.02,-4754.51 1298.7,-4762.04"/>
<polygon fill="blue" stroke="blue" points="1297.68,-4765.4 1308.27,-4765.78 1300.23,-4758.88 1297.68,-4765.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.07,-4837.77C857.77,-4866.09 915.05,-4923.99 944,-4985.64 980.72,-5063.83 944.35,-5097.95 980,-5176.64 1000.84,-5222.65 1039.46,-5267.07 1065.44,-5293.87"/>
<polygon fill="blue" stroke="blue" points="1063.22,-5296.61 1072.73,-5301.28 1068.21,-5291.7 1063.22,-5296.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1116.01,-5301.52C1144.38,-5276.7 1192.6,-5229.16 1214,-5176.64 1245.03,-5100.48 1188.77,-4870.32 1242,-4807.64 1255.84,-4791.33 1277.73,-4783.97 1298.41,-4780.91"/>
<polygon fill="blue" stroke="blue" points="1298.91,-4784.38 1308.43,-4779.74 1298.09,-4777.43 1298.91,-4784.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;pub async fn collect_all&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; ReadResult&lt;backup::PartialBackup&lt;M&gt;&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup::PartialBackup&lt;M&gt;: Send, &#160;&#160;&#160;&#160;{ &#160;...">
<polygon fill="white" stroke="black" points="525.5,-5337.64 442.5,-5337.64 442.5,-5301.64 525.5,-5301.64 525.5,-5337.64"/>
<text text-anchor="middle" x="484" y="-5315.94" font-family="Helvetica,sans-Serif" font-size="14.00">collect_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<g id="a_node145"><a xlink:title="async fn read_all_frames&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;purpose: Purpose, &#160;&#160;&#160;&#160;mut reader: VarintDelimitedReader&lt;impl AsyncRead + Unpin + VerifyHmac&gt;, &#160;&#160;&#160;&#160;mut visitor: impl F...">
<polygon fill="white" stroke="black" points="868,-5337.64 743,-5337.64 743,-5301.64 868,-5301.64 868,-5337.64"/>
<text text-anchor="middle" x="805.5" y="-5315.94" font-family="Helvetica,sans-Serif" font-size="14.00">read_all_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="edge535" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M525.79,-5319.64C577.82,-5319.64 668.69,-5319.64 732.49,-5319.64"/>
<polygon fill="blue" stroke="blue" points="732.89,-5323.14 742.88,-5319.64 732.88,-5316.14 732.89,-5323.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge801" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M868.1,-5319.64C905.89,-5319.64 955.03,-5319.64 997.65,-5319.64"/>
<polygon fill="blue" stroke="blue" points="997.77,-5323.14 1007.77,-5319.64 997.77,-5316.14 997.77,-5323.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="3012,-9976.64 2950,-9976.64 2950,-9940.64 3012,-9940.64 3012,-9976.64"/>
<text text-anchor="middle" x="2981" y="-9954.94" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3012.37,-9955.18C3070.84,-9950.24 3200.19,-9947.91 3279,-10011.64 3297.29,-10026.42 3280.4,-10046.24 3299,-10060.64 3325.3,-10080.99 3359.6,-10089.97 3392.34,-10093.2"/>
<polygon fill="blue" stroke="blue" points="3392.19,-10096.7 3402.45,-10094.02 3392.76,-10089.72 3392.19,-10096.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3012.1,-9953.69C3072.43,-9945.66 3208.42,-9937.45 3279,-10011.64 3327.48,-10062.6 3249.45,-10118.71 3299,-10168.64 3324.78,-10194.6 3362.8,-10203.88 3398.8,-10205.76"/>
<polygon fill="blue" stroke="blue" points="3398.77,-10209.26 3408.89,-10206.1 3399.01,-10202.26 3398.77,-10209.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3012.16,-9954.02C3072,-9946.73 3206.23,-9939.97 3279,-10011.64 3312.22,-10044.36 3265.09,-10082.62 3299,-10114.64 3309.97,-10124.99 3322.91,-10132.63 3336.85,-10138.17"/>
<polygon fill="blue" stroke="blue" points="3336.05,-10141.6 3346.64,-10141.67 3338.41,-10135.01 3336.05,-10141.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3012.03,-9956.72C3097.85,-9951.24 3344.78,-9935.48 3450.27,-9928.75"/>
<polygon fill="blue" stroke="blue" points="3450.57,-9932.23 3460.33,-9928.1 3450.13,-9925.25 3450.57,-9932.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3012.13,-9963.36C3068.44,-9972.16 3193.48,-9991.53 3299,-10006.64 3316.56,-10009.15 3334.99,-10011.73 3353.27,-10014.24"/>
<polygon fill="blue" stroke="blue" points="3353.02,-10017.74 3363.4,-10015.63 3353.97,-10010.8 3353.02,-10017.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="2137,-9976.64 2075,-9976.64 2075,-9940.64 2137,-9940.64 2137,-9976.64"/>
<text text-anchor="middle" x="2106" y="-9954.94" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="2594.5,-9976.64 2532.5,-9976.64 2532.5,-9940.64 2594.5,-9940.64 2594.5,-9976.64"/>
<text text-anchor="middle" x="2563.5" y="-9954.94" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2137.24,-9958.64C2216.85,-9958.64 2432.26,-9958.64 2522.19,-9958.64"/>
<polygon fill="blue" stroke="blue" points="2522.27,-9962.14 2532.27,-9958.64 2522.27,-9955.14 2522.27,-9962.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge502" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2594.72,-9958.64C2668.32,-9958.64 2856.92,-9958.64 2939.85,-9958.64"/>
<polygon fill="blue" stroke="blue" points="2939.9,-9962.14 2949.9,-9958.64 2939.9,-9955.14 2939.9,-9962.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node149"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3008,-9511.64 2954,-9511.64 2954,-9475.64 3008,-9475.64 3008,-9511.64"/>
<text text-anchor="middle" x="2981" y="-9489.94" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3008.41,-9500.97C3067.23,-9515.5 3209.29,-9540.34 3279,-9463.64 3314.9,-9424.13 3287.03,-5672.65 3299,-5620.64 3335.39,-5462.53 3438.93,-5294.22 3480.95,-5230.31"/>
<polygon fill="blue" stroke="blue" points="3484.08,-5231.92 3486.69,-5221.66 3478.25,-5228.06 3484.08,-5231.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3008.04,-9488.91C3066.73,-9479.94 3209.62,-9467.8 3279,-9546.64 3308.84,-9580.54 3268.45,-9919.37 3299,-9952.64 3306.36,-9960.65 3314.89,-9967.12 3324.18,-9972.3"/>
<polygon fill="blue" stroke="blue" points="3322.8,-9975.53 3333.31,-9976.88 3325.94,-9969.27 3322.8,-9975.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3008.38,-9488.93C3067.14,-9480.15 3209.1,-9468.62 3279,-9546.64 3323.29,-9596.07 3253.67,-9796.15 3299,-9844.64 3312.19,-9858.75 3328.98,-9868.03 3347.21,-9873.92"/>
<polygon fill="blue" stroke="blue" points="3346.28,-9877.29 3356.85,-9876.69 3348.21,-9870.56 3346.28,-9877.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;fn search_does_not_return_requested_data(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="631,-4307.64 337,-4307.64 337,-4271.64 631,-4271.64 631,-4307.64"/>
<text text-anchor="middle" x="484" y="-4285.94" font-family="Helvetica,sans-Serif" font-size="14.00">search_does_not_return_requested_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<g id="a_node151"><a xlink:title="fn verify_chat_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&gt;, &#160;&#160;&#160;&#160;stored_account_data: Option&lt;AccountData&gt;, &#160;&#160;&#160;&#160;chat_search_...">
<polygon fill="white" stroke="black" points="913,-4226.64 698,-4226.64 698,-4190.64 913,-4190.64 913,-4226.64"/>
<text text-anchor="middle" x="805.5" y="-4204.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_chat_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M590.98,-4271.57C604.5,-4268.82 618.11,-4265.82 631,-4262.64 668.33,-4253.41 709.44,-4240.73 742.28,-4229.97"/>
<polygon fill="blue" stroke="blue" points="743.79,-4233.16 752.19,-4226.7 741.59,-4226.51 743.79,-4233.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<g id="a_node156"><a xlink:title="fn verify_single_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;search_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;response: CondensedTreeSearchResponse, &#160;&#160;&#160;&#160;monitoring_data: Option&lt;MonitoringData&gt;, &#160;&#160;&#160;&#160;full_tree_head: &amp;FullTr...">
<polygon fill="white" stroke="black" points="1206,-4172.64 980,-4172.64 980,-4136.64 1206,-4136.64 1206,-4172.64"/>
<text text-anchor="middle" x="1093" y="-4150.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_single_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M901.96,-4190.58C929.11,-4185.45 958.82,-4179.83 986.52,-4174.59"/>
<polygon fill="blue" stroke="blue" points="987.45,-4177.97 996.63,-4172.67 986.15,-4171.09 987.45,-4177.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;async fn search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_identity_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;(E164, Vec&lt;u8&gt;)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored_acco...">
<polygon fill="white" stroke="black" points="515,-4199.64 453,-4199.64 453,-4163.64 515,-4163.64 515,-4199.64"/>
<text text-anchor="middle" x="484" y="-4177.94" font-family="Helvetica,sans-Serif" font-size="14.00">search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M515.06,-4184.18C554.42,-4187.5 625.72,-4193.53 687.69,-4198.76"/>
<polygon fill="blue" stroke="blue" points="687.69,-4202.28 697.95,-4199.63 688.28,-4195.3 687.69,-4202.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;fn search_returns_data_not_requested(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="615,-4253.64 353,-4253.64 353,-4217.64 615,-4217.64 615,-4253.64"/>
<text text-anchor="middle" x="484" y="-4231.94" font-family="Helvetica,sans-Serif" font-size="14.00">search_returns_data_not_requested</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M615.41,-4224.61C639.42,-4222.59 664.34,-4220.48 687.91,-4218.49"/>
<polygon fill="blue" stroke="blue" points="688.25,-4221.97 697.92,-4217.64 687.66,-4215 688.25,-4221.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;async fn monitor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;account_data: AccountData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished_tree_...">
<polygon fill="white" stroke="black" points="519.5,-4091.64 448.5,-4091.64 448.5,-4055.64 519.5,-4055.64 519.5,-4091.64"/>
<text text-anchor="middle" x="484" y="-4069.94" font-family="Helvetica,sans-Serif" font-size="14.00">monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M499.39,-4055.62C526.52,-4023.26 588.86,-3956.27 659,-3930.64 876.62,-3851.09 1158.88,-3885.97 1285.89,-3908.25"/>
<polygon fill="blue" stroke="blue" points="1285.4,-3911.72 1295.86,-3910.03 1286.63,-3904.83 1285.4,-3911.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M539.3,-4131.54C570.14,-4130.7 607.23,-4124.07 631,-4100.64 676.19,-4056.09 609.93,-4000.86 659,-3960.64 753.92,-3882.82 1137.17,-3938.33 1289.81,-3964.27"/>
<polygon fill="blue" stroke="blue" points="1289.51,-3967.77 1299.96,-3966.01 1290.7,-3960.87 1289.51,-3967.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge838" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1120.26,-4136.49C1167.28,-4103.99 1265.84,-4035.87 1318.35,-3999.58"/>
<polygon fill="blue" stroke="blue" points="1320.43,-4002.4 1326.67,-3993.83 1316.45,-3996.64 1320.43,-4002.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SK...">
<polygon fill="white" stroke="black" points="301,-4091.64 16,-4091.64 16,-4055.64 301,-4055.64 301,-4091.64"/>
<text text-anchor="middle" x="158.5" y="-4069.94" font-family="Helvetica,sans-Serif" font-size="14.00">monitor_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M301.39,-4073.64C350.84,-4073.64 402.79,-4073.64 438.41,-4073.64"/>
<polygon fill="blue" stroke="blue" points="438.46,-4077.14 448.46,-4073.64 438.46,-4070.14 438.46,-4077.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn prompt(text: &amp;str) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; {} &gt;&#39; , text); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_line(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="192,-4199.64 125,-4199.64 125,-4163.64 192,-4163.64 192,-4199.64"/>
<text text-anchor="middle" x="158.5" y="-4177.94" font-family="Helvetica,sans-Serif" font-size="14.00">prompt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-4181.64C251.95,-4181.64 377.98,-4181.64 442.73,-4181.64"/>
<polygon fill="blue" stroke="blue" points="442.96,-4185.14 452.96,-4181.64 442.96,-4178.14 442.96,-4185.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-4176.16C245.24,-4167.32 350.48,-4149.76 418.75,-4138.36"/>
<polygon fill="blue" stroke="blue" points="419.67,-4141.75 428.96,-4136.66 418.52,-4134.85 419.67,-4141.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;async fn distinguished_integration_test(have_last_distinguished: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running in...">
<polygon fill="white" stroke="black" points="271.5,-4145.64 45.5,-4145.64 45.5,-4109.64 271.5,-4109.64 271.5,-4145.64"/>
<text text-anchor="middle" x="158.5" y="-4123.94" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge687" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M271.74,-4127.64C320.8,-4127.64 376.58,-4127.64 418.5,-4127.64"/>
<polygon fill="blue" stroke="blue" points="418.58,-4131.14 428.58,-4127.64 418.58,-4124.14 418.58,-4131.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="3084.5,-10250.64 2877.5,-10250.64 2877.5,-10214.64 3084.5,-10214.64 3084.5,-10250.64"/>
<text text-anchor="middle" x="2981" y="-10228.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3063.88,-10250.64C3131.03,-10260.16 3223.73,-10260.38 3279,-10205.64 3310.58,-10174.36 3268.11,-10038.59 3299,-10006.64 3306.47,-9998.9 3315.03,-9992.64 3324.3,-9987.6"/>
<polygon fill="blue" stroke="blue" points="3325.96,-9990.68 3333.4,-9983.13 3322.88,-9984.4 3325.96,-9990.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3062.17,-10250.65C3129.66,-10260.64 3223.77,-10261.52 3279,-10205.64 3318.64,-10165.52 3260.24,-9993.6 3299,-9952.64 3337.06,-9912.41 3404.35,-9911.56 3450.28,-9916.8"/>
<polygon fill="blue" stroke="blue" points="3449.95,-9920.29 3460.31,-9918.08 3450.83,-9913.34 3449.95,-9920.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="3072,-10196.64 2890,-10196.64 2890,-10160.64 3072,-10160.64 3072,-10196.64"/>
<text text-anchor="middle" x="2981" y="-10174.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.02,-10160.6C3126.35,-10149.4 3224.15,-10146.7 3279,-10205.64 3318.86,-10248.46 3260.4,-11214.66 3299,-11258.64 3329.02,-11292.83 3379.91,-11300.09 3422.84,-11298.93"/>
<polygon fill="blue" stroke="blue" points="3423.15,-11302.42 3433,-11298.49 3422.86,-11295.42 3423.15,-11302.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.21,-10196.67C3135.39,-10205.21 3225.9,-10203.62 3279,-10148.64 3326.03,-10099.93 3252.79,-9894.12 3299,-9844.64 3313.81,-9828.77 3333.16,-9819.01 3353.99,-9813.31"/>
<polygon fill="blue" stroke="blue" points="3355.08,-9816.65 3363.99,-9810.91 3353.45,-9809.84 3355.08,-9816.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3072.26,-10196.17C3138.26,-10203.38 3225.3,-10200.27 3279,-10148.64 3324.94,-10104.46 3253.8,-10051.57 3299,-10006.64 3306.53,-9999.15 3315.08,-9993.05 3324.31,-9988.13"/>
<polygon fill="blue" stroke="blue" points="3325.87,-9991.26 3333.35,-9983.76 3322.82,-9984.96 3325.87,-9991.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3069.37,-10196.64C3136.29,-10204.86 3225.88,-10202.88 3279,-10148.64 3318,-10108.82 3260.68,-9939.1 3299,-9898.64 3312.23,-9884.66 3328.99,-9875.44 3347.16,-9869.58"/>
<polygon fill="blue" stroke="blue" points="3348.14,-9872.94 3356.78,-9866.81 3346.2,-9866.21 3348.14,-9872.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3071.79,-10196.64C3138.22,-10204.3 3226.02,-10201.56 3279,-10148.64 3309.97,-10117.69 3268.55,-9984.09 3299,-9952.64 3337.51,-9912.85 3404.7,-9911.9 3450.48,-9916.99"/>
<polygon fill="blue" stroke="blue" points="3450.12,-9920.48 3460.48,-9918.24 3450.99,-9913.53 3450.12,-9920.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node162"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="3547,-9374.64 3453,-9374.64 3453,-9338.64 3547,-9338.64 3547,-9374.64"/>
<text text-anchor="middle" x="3500" y="-9352.94" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node258"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="3979,-8918.64 3925,-8918.64 3925,-8882.64 3979,-8882.64 3979,-8918.64"/>
<text text-anchor="middle" x="3952" y="-8896.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3547.02,-9364.52C3593.2,-9369.51 3662.8,-9368.54 3701,-9326.64 3753.94,-9268.57 3672.83,-9035.7 3721,-8973.64 3767.26,-8914.03 3862.26,-8902.16 3914.53,-8900.36"/>
<polygon fill="blue" stroke="blue" points="3914.78,-8903.86 3924.69,-8900.12 3914.61,-8896.86 3914.78,-8903.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="3114,-9374.64 2848,-9374.64 2848,-9338.64 3114,-9338.64 3114,-9374.64"/>
<text text-anchor="middle" x="2981" y="-9352.94" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3114.13,-9356.64C3220.36,-9356.64 3364.34,-9356.64 3442.63,-9356.64"/>
<polygon fill="blue" stroke="blue" points="3442.76,-9360.14 3452.76,-9356.64 3442.76,-9353.14 3442.76,-9360.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node164"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="3544.5,-9428.64 3455.5,-9428.64 3455.5,-9392.64 3544.5,-9392.64 3544.5,-9428.64"/>
<text text-anchor="middle" x="3500" y="-9406.94" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node257"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="3989,-8810.64 3915,-8810.64 3915,-8774.64 3989,-8774.64 3989,-8810.64"/>
<text text-anchor="middle" x="3952" y="-8788.94" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3544.56,-9419.12C3590.76,-9425.32 3662.31,-9426.35 3701,-9383.64 3743.1,-9337.16 3678.5,-8865.74 3721,-8819.64 3766.85,-8769.89 3851.81,-8773.88 3904.64,-8782.45"/>
<polygon fill="blue" stroke="blue" points="3904.31,-8785.94 3914.76,-8784.21 3905.51,-8779.05 3904.31,-8785.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node259"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4396,-8938.64 4342,-8938.64 4342,-8902.64 4396,-8902.64 4396,-8938.64"/>
<text text-anchor="middle" x="4369" y="-8916.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3544.51,-9418.63C3660.87,-9437.47 3983.88,-9472.7 4183,-9326.64 4191.39,-9320.48 4316.11,-9038.45 4355.9,-8948.14"/>
<polygon fill="blue" stroke="blue" points="4359.18,-8949.38 4360,-8938.82 4352.77,-8946.56 4359.18,-8949.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="3112.5,-9428.64 2849.5,-9428.64 2849.5,-9392.64 3112.5,-9392.64 3112.5,-9428.64"/>
<text text-anchor="middle" x="2981" y="-9406.94" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge628" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3112.79,-9410.64C3220.3,-9410.64 3367.15,-9410.64 3445.16,-9410.64"/>
<polygon fill="blue" stroke="blue" points="3445.24,-9414.14 3455.24,-9410.64 3445.24,-9407.14 3445.24,-9414.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3013.5,-9291.64 2948.5,-9291.64 2948.5,-9255.64 3013.5,-9255.64 3013.5,-9291.64"/>
<text text-anchor="middle" x="2981" y="-9269.94" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3013.58,-9269.74C3072.97,-9264.25 3202.21,-9261.3 3279,-9326.64 3299.45,-9344.03 3278.19,-9366.68 3299,-9383.64 3339.61,-9416.73 3401,-9420.38 3445.05,-9417.68"/>
<polygon fill="blue" stroke="blue" points="3445.58,-9421.15 3455.29,-9416.93 3445.06,-9414.17 3445.58,-9421.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3016,-9237.64 2946,-9237.64 2946,-9201.64 3016,-9201.64 3016,-9237.64"/>
<text text-anchor="middle" x="2981" y="-9215.94" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge664" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3016.15,-9211.33C3076.87,-9198.77 3204.29,-9182.64 3279,-9246.64 3306.84,-9270.48 3271.87,-9301.99 3299,-9326.64 3337.46,-9361.57 3398.28,-9366.14 3442.76,-9363.78"/>
<polygon fill="blue" stroke="blue" points="3443.09,-9367.26 3452.84,-9363.11 3442.63,-9360.28 3443.09,-9367.26"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node168"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="4937,-8749.64 4764,-8749.64 4764,-8713.64 4937,-8713.64 4937,-8749.64"/>
<text text-anchor="middle" x="4850.5" y="-8727.94" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4931.66,-8713.39C4936.63,-8710.09 4941.17,-8706.21 4945,-8701.64 5070.92,-8551.48 5078.87,-7892.07 5079.07,-7746.25"/>
<polygon fill="blue" stroke="blue" points="5082.57,-7745.92 5079.07,-7735.92 5075.57,-7745.92 5082.57,-7745.92"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node169"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="4433,-10949.64 4305,-10949.64 4305,-10913.64 4433,-10913.64 4433,-10949.64"/>
<text text-anchor="middle" x="4369" y="-10927.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node174"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="4899.5,-8646.64 4801.5,-8646.64 4801.5,-8610.64 4899.5,-8610.64 4899.5,-8646.64"/>
<text text-anchor="middle" x="4850.5" y="-8624.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4433.38,-10938.41C4468.26,-10938.41 4509.51,-10931.66 4535,-10904.64 4831.02,-10590.78 4697.84,-9403.37 4736,-8973.64 4741.36,-8913.27 4727.44,-8755.09 4756,-8701.64 4766.92,-8681.19 4786.32,-8664.6 4804.63,-8652.44"/>
<polygon fill="blue" stroke="blue" points="4806.91,-8655.14 4813.49,-8646.83 4803.17,-8649.23 4806.91,-8655.14"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="4009.5,-10895.64 3894.5,-10895.64 3894.5,-10859.64 4009.5,-10859.64 4009.5,-10895.64"/>
<text text-anchor="middle" x="3952" y="-10873.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4009.73,-10882.66C4059.08,-10884.29 4130.69,-10879.81 4183,-10847.64 4419.79,-10702.01 4418.06,-10582.82 4535,-10330.64 4994.35,-9340 5068.98,-7959.02 5077.94,-7745.76"/>
<polygon fill="blue" stroke="blue" points="5081.44,-7745.84 5078.35,-7735.7 5074.45,-7745.55 5081.44,-7745.84"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4009.83,-10885.03C4083.81,-10894.66 4213.22,-10911.5 4294.56,-10922.08"/>
<polygon fill="blue" stroke="blue" points="4294.36,-10925.58 4304.73,-10923.4 4295.26,-10918.64 4294.36,-10925.58"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node171"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="4396,-10895.64 4342,-10895.64 4342,-10859.64 4396,-10859.64 4396,-10895.64"/>
<text text-anchor="middle" x="4369" y="-10873.94" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4009.83,-10877.64C4096.4,-10877.64 4258.89,-10877.64 4331.42,-10877.64"/>
<polygon fill="blue" stroke="blue" points="4331.86,-10881.14 4341.86,-10877.64 4331.86,-10874.14 4331.86,-10881.14"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="4673.5,-8646.64 4617.5,-8646.64 4617.5,-8610.64 4673.5,-8610.64 4673.5,-8646.64"/>
<text text-anchor="middle" x="4645.5" y="-8624.94" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge704" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4377.43,-10859.41C4405.01,-10790.71 4501.59,-10540.35 4535,-10323.64 4548.67,-10234.95 4525.72,-8790.93 4561.5,-8708.64 4571.46,-8685.72 4591.46,-8666.12 4609.32,-8652.06"/>
<polygon fill="blue" stroke="blue" points="4611.47,-8654.82 4617.34,-8646 4607.25,-8649.24 4611.47,-8654.82"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4673.54,-8642.56C4731.17,-8670.07 4867.17,-8723.14 4945,-8655.64 5015.92,-8594.12 5066.91,-7896.41 5077.12,-7746.07"/>
<polygon fill="blue" stroke="blue" points="5080.63,-7746.04 5077.81,-7735.83 5073.65,-7745.57 5080.63,-7746.04"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4673.88,-8628.64C4703.78,-8628.64 4752.56,-8628.64 4791.13,-8628.64"/>
<polygon fill="blue" stroke="blue" points="4791.2,-8632.14 4801.2,-8628.64 4791.2,-8625.14 4791.2,-8632.14"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="4461.5,-8666.64 4276.5,-8666.64 4276.5,-8630.64 4461.5,-8630.64 4461.5,-8666.64"/>
<text text-anchor="middle" x="4369" y="-8644.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4461.56,-8658.42C4563.27,-8670.11 4715.9,-8690.36 4736,-8708.64 4761.84,-8732.13 4728.34,-8763.31 4756,-8784.64 4789.26,-8810.28 4913.51,-8812.42 4945,-8784.64 5025.57,-8713.55 5069.6,-7907.46 5077.65,-7745.77"/>
<polygon fill="blue" stroke="blue" points="5081.15,-7745.83 5078.15,-7735.67 5074.16,-7745.48 5081.15,-7745.83"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4461.79,-8641.95C4511.29,-8638.34 4569.7,-8634.09 4606.9,-8631.37"/>
<polygon fill="blue" stroke="blue" points="4607.56,-8634.84 4617.27,-8630.62 4607.05,-8627.85 4607.56,-8634.84"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4461.71,-8657.25C4535.94,-8662.58 4643.06,-8666.54 4736,-8655.64 4754.16,-8653.5 4773.63,-8649.52 4791.22,-8645.25"/>
<polygon fill="blue" stroke="blue" points="4792.49,-8648.54 4801.34,-8642.72 4790.79,-8641.75 4792.49,-8648.54"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4856.04,-8610.44C4884.43,-8496.79 5037.24,-7884.84 5071.98,-7745.77"/>
<polygon fill="blue" stroke="blue" points="5075.42,-7746.43 5074.44,-7735.88 5068.63,-7744.73 5075.42,-7746.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node175"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1391.5,-1695.64 1316.5,-1695.64 1316.5,-1659.64 1391.5,-1659.64 1391.5,-1695.64"/>
<text text-anchor="middle" x="1354" y="-1673.94" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node179"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2133,-1695.64 2079,-1695.64 2079,-1659.64 2133,-1659.64 2133,-1695.64"/>
<text text-anchor="middle" x="2106" y="-1673.94" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.68,-1677.64C1518.99,-1677.64 1940.93,-1677.64 2068.29,-1677.64"/>
<polygon fill="blue" stroke="blue" points="2068.66,-1681.14 2078.66,-1677.64 2068.66,-1674.14 2068.66,-1681.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node180"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2133,-1749.64 2079,-1749.64 2079,-1713.64 2133,-1713.64 2133,-1749.64"/>
<text text-anchor="middle" x="2106" y="-1727.94" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.52,-1681.41C1421.25,-1684.41 1464.31,-1688.59 1502,-1691.64 1716.73,-1708.98 1974.94,-1724.23 2068.73,-1729.59"/>
<polygon fill="blue" stroke="blue" points="2068.64,-1733.09 2078.83,-1730.17 2069.04,-1726.11 2068.64,-1733.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node181"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="1685,-312.64 1557,-312.64 1557,-276.64 1685,-276.64 1685,-312.64"/>
<text text-anchor="middle" x="1621" y="-290.94" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1358.5,-1659.39C1386.9,-1511.17 1579.6,-505.49 1614.56,-323.01"/>
<polygon fill="blue" stroke="blue" points="1618.02,-323.57 1616.46,-313.09 1611.14,-322.26 1618.02,-323.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node176"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="2192,-3841.64 2020,-3841.64 2020,-3805.64 2192,-3805.64 2192,-3841.64"/>
<text text-anchor="middle" x="2106" y="-3819.94" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2192.27,-3839.62C2264.79,-3848.14 2367.72,-3847.61 2436,-3793.64 2547.01,-3705.87 2561.35,-3516.95 2562.66,-3445.13"/>
<polygon fill="blue" stroke="blue" points="2566.16,-3445.07 2562.77,-3435.03 2559.16,-3444.99 2566.16,-3445.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.3,-3841.68C2258.62,-3854.49 2371.58,-3859.39 2436,-3793.64 2498.98,-3729.35 2407.48,-3459.27 2464.5,-3389.64 2472.4,-3379.99 2483.39,-3373.62 2495.18,-3369.44"/>
<polygon fill="blue" stroke="blue" points="2496.2,-3372.78 2504.76,-3366.53 2494.17,-3366.08 2496.2,-3372.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node177"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="1684,-3841.64 1558,-3841.64 1558,-3805.64 1684,-3805.64 1684,-3841.64"/>
<text text-anchor="middle" x="1621" y="-3819.94" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1684.16,-3823.64C1766.71,-3823.64 1913.34,-3823.64 2009.87,-3823.64"/>
<polygon fill="blue" stroke="blue" points="2009.92,-3827.14 2019.92,-3823.64 2009.92,-3820.14 2009.92,-3827.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node178"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="1387,-3841.64 1321,-3841.64 1321,-3805.64 1387,-3805.64 1387,-3841.64"/>
<text text-anchor="middle" x="1354" y="-3819.94" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge523" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1387.23,-3823.64C1426.8,-3823.64 1495.1,-3823.64 1547.52,-3823.64"/>
<polygon fill="blue" stroke="blue" points="1547.78,-3827.14 1557.78,-3823.64 1547.78,-3820.14 1547.78,-3827.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.02,-1685.04C2195.5,-1701.05 2354.79,-1731.07 2436,-1647.64 2505.27,-1576.46 2401.83,-1278.68 2464.5,-1201.64 2479.24,-1183.52 2504.93,-1176.92 2526.31,-1174.77"/>
<polygon fill="blue" stroke="blue" points="2526.67,-1178.25 2536.39,-1174.04 2526.17,-1171.27 2526.67,-1178.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.44,-1685.11C2196.13,-1701.05 2354.63,-1730.51 2436,-1647.64 2497.19,-1585.31 2409.09,-1323.15 2464.5,-1255.64 2479.32,-1237.58 2505.01,-1230.98 2526.36,-1228.81"/>
<polygon fill="blue" stroke="blue" points="2526.72,-1232.29 2536.44,-1228.07 2526.21,-1225.31 2526.72,-1232.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.38,-1682.68C2192.63,-1692.53 2338.71,-1708.4 2436,-1647.64 2456.72,-1634.69 2446.81,-1617.48 2464.5,-1600.64 2477.03,-1588.71 2492.77,-1578.65 2507.94,-1570.6"/>
<polygon fill="blue" stroke="blue" points="2509.95,-1573.5 2517.28,-1565.85 2506.78,-1567.26 2509.95,-1573.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node249"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="2650.5,-1648.64 2476.5,-1648.64 2476.5,-1612.64 2650.5,-1612.64 2650.5,-1648.64"/>
<text text-anchor="middle" x="2563.5" y="-1626.94" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.05,-1675.64C2188.74,-1671.29 2323.44,-1660.32 2436,-1647.64 2445.83,-1646.53 2456.07,-1645.29 2466.29,-1644"/>
<polygon fill="blue" stroke="blue" points="2467.01,-1647.44 2476.48,-1642.7 2466.12,-1640.49 2467.01,-1647.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge512" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.02,-1739.35C2195.5,-1756.1 2354.78,-1787.93 2436,-1704.64 2514.16,-1624.48 2394.17,-1288.74 2464.5,-1201.64 2479.17,-1183.46 2504.87,-1176.86 2526.26,-1174.73"/>
<polygon fill="blue" stroke="blue" points="2526.63,-1178.21 2536.36,-1174.01 2526.13,-1171.23 2526.63,-1178.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge514" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.45,-1739.44C2196.16,-1756.14 2354.7,-1787.45 2436,-1704.64 2506.04,-1633.29 2401.43,-1333.21 2464.5,-1255.64 2479.23,-1237.51 2504.93,-1230.91 2526.31,-1228.76"/>
<polygon fill="blue" stroke="blue" points="2526.67,-1232.25 2536.39,-1228.04 2526.16,-1225.27 2526.67,-1232.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge515" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.3,-1738.51C2194.33,-1752.76 2347.13,-1778.37 2436,-1704.64 2472.88,-1674.03 2434.69,-1638.16 2464.5,-1600.64 2474.42,-1588.15 2488.11,-1578.21 2502.12,-1570.47"/>
<polygon fill="blue" stroke="blue" points="2504.07,-1573.4 2511.33,-1565.69 2500.85,-1567.19 2504.07,-1573.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge513" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2133.35,-1736.98C2192.54,-1747.49 2338.51,-1764.92 2436,-1704.64 2456.78,-1691.79 2445.01,-1672.37 2464.5,-1657.64 2466.33,-1656.25 2468.23,-1654.94 2470.18,-1653.69"/>
<polygon fill="blue" stroke="blue" points="2472.09,-1656.63 2479.06,-1648.65 2468.63,-1650.55 2472.09,-1656.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node182"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="2193,-312.64 2019,-312.64 2019,-276.64 2193,-276.64 2193,-312.64"/>
<text text-anchor="middle" x="2106" y="-290.94" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1685.14,-294.64C1767.51,-294.64 1912.41,-294.64 2008.56,-294.64"/>
<polygon fill="blue" stroke="blue" points="2008.58,-298.14 2018.58,-294.64 2008.58,-291.14 2008.58,-298.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2193.32,-292.47C2265.72,-290.77 2371.85,-288.54 2464.5,-287.64 2740.04,-284.94 3524.78,-168.8 3701,-380.64 3742.95,-431.06 3676.58,-922.37 3721,-970.64 3756.98,-1009.73 3817.1,-1015.66 3866.85,-1012.24"/>
<polygon fill="blue" stroke="blue" points="3867.29,-1015.72 3876.97,-1011.41 3866.72,-1008.74 3867.29,-1015.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2193.35,-281.33C2269.43,-275.04 2377.06,-280.43 2436,-347.64 2472.21,-388.92 2451.93,-1282.18 2464.5,-1335.64 2481.12,-1406.34 2522.47,-1481.9 2545.8,-1520.9"/>
<polygon fill="blue" stroke="blue" points="2542.86,-1522.81 2551.04,-1529.55 2548.85,-1519.19 2542.86,-1522.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2622.04,-3409C2636.49,-3404.99 2651.23,-3398.9 2663,-3389.64 3208.09,-2960.52 3450.23,-2072.76 3492.26,-1903.76"/>
<polygon fill="blue" stroke="blue" points="3495.69,-1904.43 3494.68,-1893.89 3488.9,-1902.76 3495.69,-1904.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge559" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2574.45,-3344.53C2595.7,-3304.76 2645.01,-3206.16 2663,-3116.64 2669.94,-3082.1 2659.04,-1874.46 2683,-1848.64 2738.55,-1788.76 2838.41,-1792.42 2906.88,-1804.05"/>
<polygon fill="blue" stroke="blue" points="2906.28,-1807.5 2916.74,-1805.82 2907.52,-1800.61 2906.28,-1807.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2634.63,-168.69C2650.44,-172.18 2667.22,-175.43 2683,-177.64 2907.65,-209.03 3496.76,-153.94 3701,-252.64 3977.48,-386.23 4051.26,-470.26 4183,-747.64 4206.32,-796.74 4174.87,-950.02 4211,-990.64 4215.46,-995.65 4220.46,-1000.04 4225.86,-1003.9"/>
<polygon fill="blue" stroke="blue" points="4224.34,-1007.08 4234.65,-1009.52 4228.11,-1001.19 4224.34,-1007.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="2220,-195.64 1992,-195.64 1992,-159.64 2220,-159.64 2220,-195.64"/>
<text text-anchor="middle" x="2106" y="-173.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.18,-170.93C2295.9,-166.44 2394.46,-160.6 2466.36,-156.33"/>
<polygon fill="blue" stroke="blue" points="2467,-159.8 2476.77,-155.72 2466.58,-152.81 2467,-159.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.18,-184.34C2294.14,-188.73 2389.89,-194.4 2461.31,-198.64"/>
<polygon fill="blue" stroke="blue" points="2461.48,-202.15 2471.67,-199.25 2461.89,-195.17 2461.48,-202.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2655.11,-208.46C2924.35,-219.83 3701,-252.64 3701,-252.64 3981.32,-377.97 4037.26,-477.36 4183,-747.64 4210.43,-798.51 4176.67,-828.14 4211,-874.64 4233.87,-905.6 4270.95,-927.35 4303.34,-941.59"/>
<polygon fill="blue" stroke="blue" points="4302.2,-944.91 4312.77,-945.59 4304.93,-938.46 4302.2,-944.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.1,-1871.84C3569.62,-1864.29 3653.81,-1843.41 3701,-1791.64 3915.34,-1556.47 3945.91,-1138.52 3950.28,-1026.12"/>
<polygon fill="blue" stroke="blue" points="3953.78,-1026.05 3950.63,-1015.93 3946.78,-1025.8 3953.78,-1026.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.01,-1836.63C3113.45,-1848.75 3220.79,-1854.8 3279,-1791.64 3318.31,-1748.98 3257.59,-788.26 3299,-747.64 3426.54,-622.51 3532.12,-689.32 3701,-747.64 3799.85,-781.76 3889.42,-872.86 3929.23,-917.82"/>
<polygon fill="blue" stroke="blue" points="3926.63,-920.17 3935.85,-925.39 3931.9,-915.56 3926.63,-920.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node190"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="3097.5,-1947.64 2864.5,-1947.64 2864.5,-1911.64 3097.5,-1911.64 3097.5,-1947.64"/>
<text text-anchor="middle" x="2981" y="-1925.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3097.74,-1919.96C3152.7,-1915.15 3219.28,-1909.01 3279,-1902.64 3343.87,-1895.71 3419.29,-1886.12 3462.85,-1880.43"/>
<polygon fill="blue" stroke="blue" points="3463.49,-1883.87 3472.95,-1879.1 3462.58,-1876.93 3463.49,-1883.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node191"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="3152,-1893.64 2810,-1893.64 2810,-1857.64 3152,-1857.64 3152,-1893.64"/>
<text text-anchor="middle" x="2981" y="-1871.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge668" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3152,-1875.64C3263.01,-1875.64 3398.78,-1875.64 3462.58,-1875.64"/>
<polygon fill="blue" stroke="blue" points="3462.91,-1879.14 3472.91,-1875.64 3462.91,-1872.14 3462.91,-1879.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2984.91,-1102.59C2999.56,-1018.42 3073.71,-662.66 3299,-527.64 3452.25,-435.79 3545.49,-439.66 3701,-527.64 3854.05,-614.22 3923.7,-836.08 3944.22,-915.13"/>
<polygon fill="blue" stroke="blue" points="3940.95,-916.47 3946.79,-925.31 3947.74,-914.75 3940.95,-916.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node193"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="3535.5,-1219.64 3464.5,-1219.64 3464.5,-1183.64 3535.5,-1183.64 3535.5,-1219.64"/>
<text text-anchor="middle" x="3500" y="-1197.94" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3016.72,-1126.08C3107.78,-1140.34 3353.37,-1178.82 3454.53,-1194.67"/>
<polygon fill="blue" stroke="blue" points="3454.01,-1198.13 3464.43,-1196.22 3455.09,-1191.21 3454.01,-1198.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3535.58,-1192.62C3581.28,-1178.79 3660.7,-1147.74 3701,-1090.64 3732.18,-1046.46 3681.86,-1007.93 3721,-970.64 3761.85,-931.71 3827.02,-927.35 3877.58,-931.35"/>
<polygon fill="blue" stroke="blue" points="3877.54,-934.86 3887.81,-932.29 3878.17,-927.89 3877.54,-934.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2590.91,-1175.41C2613.9,-1174.51 2646.11,-1169.09 2663,-1147.64 2708.58,-1089.72 2631.5,-537.35 2683,-484.64 2702.77,-464.4 3680.61,-432.02 3701,-451.64 3742.59,-491.65 3681.82,-928.26 3721,-970.64 3757,-1009.58 3816.97,-1015.56 3866.65,-1012.2"/>
<polygon fill="blue" stroke="blue" points="3867.07,-1015.68 3876.76,-1011.38 3866.51,-1008.7 3867.07,-1015.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2590.59,-1228.74C2613.05,-1227.35 2644.64,-1221.61 2663,-1201.64 2696.03,-1165.69 2658.63,-1135.93 2683,-1093.64 2862.99,-781.19 2960.81,-690.74 3299,-565.64 3466.57,-503.65 3571.59,-442.45 3701,-565.64 3733.63,-596.7 3690.23,-937.72 3721,-970.64 3757.21,-1009.38 3817.18,-1015.37 3866.8,-1012.06"/>
<polygon fill="blue" stroke="blue" points="3867.2,-1015.54 3876.89,-1011.26 3866.65,-1008.56 3867.2,-1015.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node196"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="2654.5,-1300.64 2472.5,-1300.64 2472.5,-1264.64 2654.5,-1264.64 2654.5,-1300.64"/>
<text text-anchor="middle" x="2563.5" y="-1278.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2634.81,-1264.61C2644.35,-1261.81 2653.96,-1258.78 2663,-1255.64 2762.74,-1220.91 2875.68,-1169.87 2936.18,-1141.54"/>
<polygon fill="blue" stroke="blue" points="2937.86,-1144.61 2945.43,-1137.19 2934.89,-1138.28 2937.86,-1144.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge738" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2651.6,-1120.64C2738.11,-1120.64 2867.34,-1120.64 2935.01,-1120.64"/>
<polygon fill="blue" stroke="blue" points="2935.32,-1124.14 2945.32,-1120.64 2935.32,-1117.14 2935.32,-1124.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2643.79,-1529.63C2821.53,-1488.5 3239.44,-1387.23 3279,-1335.64 3305.04,-1301.68 3268.35,-595.5 3299,-565.64 3362.98,-503.29 3622.31,-523.34 3701,-565.64 3844.33,-642.68 3919.25,-841.97 3942.74,-915.68"/>
<polygon fill="blue" stroke="blue" points="3939.52,-917.11 3945.83,-925.62 3946.2,-915.03 3939.52,-917.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node199"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="3539.5,-795.64 3460.5,-795.64 3460.5,-759.64 3539.5,-759.64 3539.5,-795.64"/>
<text text-anchor="middle" x="3500" y="-773.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.81,-776.11C3585.54,-776.6 3660.42,-785 3701,-830.64 3742.77,-877.61 3676,-926.75 3721,-970.64 3758.62,-1007.32 3817.78,-1013.59 3866.68,-1010.93"/>
<polygon fill="blue" stroke="blue" points="3867.2,-1014.4 3876.95,-1010.24 3866.73,-1007.42 3867.2,-1014.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node200"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="2166.5,-3326.64 2045.5,-3326.64 2045.5,-3290.64 2166.5,-3290.64 2166.5,-3326.64"/>
<text text-anchor="middle" x="2106" y="-3304.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2166.54,-3297.47C2236.99,-3287.63 2354.93,-3282.11 2436,-3335.64 2458.65,-3350.59 2443.35,-3372.63 2464.5,-3389.64 2473.44,-3396.82 2484.15,-3402.09 2495.16,-3405.97"/>
<polygon fill="blue" stroke="blue" points="2494.29,-3409.36 2504.88,-3409.03 2496.39,-3402.69 2494.29,-3409.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2166.7,-3311.23C2232.82,-3314.63 2342.45,-3321.87 2436,-3335.64 2455.21,-3338.46 2475.87,-3342.46 2494.82,-3346.51"/>
<polygon fill="blue" stroke="blue" points="2494.33,-3349.99 2504.85,-3348.7 2495.82,-3343.15 2494.33,-3349.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node201"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="2196,-3758.64 2016,-3758.64 2016,-3722.64 2196,-3722.64 2196,-3758.64"/>
<text text-anchor="middle" x="2106" y="-3736.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.17,-3756.73C2267.67,-3764.54 2367.1,-3763.35 2436,-3713.64 2526.25,-3648.52 2552.6,-3505.72 2559.88,-3444.93"/>
<polygon fill="blue" stroke="blue" points="2563.37,-3445.23 2561,-3434.9 2556.42,-3444.46 2563.37,-3445.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node202"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="2193.5,-3650.64 2018.5,-3650.64 2018.5,-3614.64 2193.5,-3614.64 2193.5,-3650.64"/>
<text text-anchor="middle" x="2106" y="-3628.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2193.51,-3645.17C2263.68,-3650.94 2362.63,-3648.76 2436,-3605.64 2498.71,-3568.77 2536.68,-3487.08 2553.03,-3444.18"/>
<polygon fill="blue" stroke="blue" points="2556.37,-3445.24 2556.55,-3434.65 2549.8,-3442.82 2556.37,-3445.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.38,-3650.64C2256.97,-3663.56 2369.37,-3669.05 2436,-3605.64 2506.14,-3538.87 2400.9,-3462.65 2464.5,-3389.64 2472.56,-3380.38 2483.47,-3374.16 2495.09,-3370.01"/>
<polygon fill="blue" stroke="blue" points="2496.43,-3373.26 2504.97,-3366.99 2494.38,-3366.57 2496.43,-3373.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node203"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="2184,-3596.64 2028,-3596.64 2028,-3560.64 2184,-3560.64 2184,-3596.64"/>
<text text-anchor="middle" x="2106" y="-3574.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2184.22,-3587.47C2253.61,-3591.99 2356.52,-3590.02 2436,-3551.64 2485.44,-3527.76 2525.25,-3475.58 2546.25,-3443.54"/>
<polygon fill="blue" stroke="blue" points="2549.23,-3445.39 2551.67,-3435.08 2543.33,-3441.61 2549.23,-3445.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2184.26,-3596.44C2258.41,-3608.59 2368.77,-3612.93 2436,-3551.64 2490.02,-3502.38 2415.31,-3443.72 2464.5,-3389.64 2472.66,-3380.66 2483.51,-3374.56 2495.01,-3370.43"/>
<polygon fill="blue" stroke="blue" points="2496.26,-3373.71 2504.78,-3367.41 2494.19,-3367.02 2496.26,-3373.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node204"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="2181,-3542.64 2031,-3542.64 2031,-3506.64 2181,-3506.64 2181,-3542.64"/>
<text text-anchor="middle" x="2106" y="-3520.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge531" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.25,-3528.62C2249.32,-3529.95 2351.98,-3526.01 2436,-3497.64 2472.47,-3485.32 2508.93,-3460.28 2533.28,-3441.28"/>
<polygon fill="blue" stroke="blue" points="2535.72,-3443.81 2541.36,-3434.84 2531.36,-3438.33 2535.72,-3443.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge532" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.1,-3540.88C2254.42,-3552.33 2365.6,-3556.61 2436,-3497.64 2474.05,-3465.76 2429.59,-3424.93 2464.5,-3389.64 2472.94,-3381.11 2483.8,-3375.2 2495.21,-3371.13"/>
<polygon fill="blue" stroke="blue" points="2496.37,-3374.44 2504.88,-3368.13 2494.29,-3367.75 2496.37,-3374.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node205"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2210.5,-3488.64 2001.5,-3488.64 2001.5,-3452.64 2210.5,-3452.64 2210.5,-3488.64"/>
<text text-anchor="middle" x="2106" y="-3466.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge562" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.74,-3465.54C2275.7,-3461.51 2361.01,-3454.67 2436,-3443.64 2455.21,-3440.81 2475.87,-3436.81 2494.82,-3432.76"/>
<polygon fill="blue" stroke="blue" points="2495.82,-3436.12 2504.85,-3430.57 2494.33,-3429.28 2495.82,-3436.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge563" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.57,-3486.52C2279.88,-3491.64 2370.12,-3487.13 2436,-3443.64 2458.65,-3428.68 2443.35,-3406.64 2464.5,-3389.64 2473.44,-3382.45 2484.15,-3377.18 2495.16,-3373.3"/>
<polygon fill="blue" stroke="blue" points="2496.39,-3376.58 2504.88,-3370.25 2494.29,-3369.91 2496.39,-3376.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node206"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="2203,-3434.64 2009,-3434.64 2009,-3398.64 2203,-3398.64 2203,-3434.64"/>
<text text-anchor="middle" x="2106" y="-3412.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge570" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2203.04,-3416.64C2290.47,-3416.64 2417.35,-3416.64 2494.65,-3416.64"/>
<polygon fill="blue" stroke="blue" points="2494.75,-3420.14 2504.75,-3416.64 2494.75,-3413.14 2494.75,-3420.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge571" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2203.11,-3412.01C2268.91,-3408.04 2358.04,-3401.11 2436,-3389.64 2455.21,-3386.81 2475.87,-3382.81 2494.82,-3378.76"/>
<polygon fill="blue" stroke="blue" points="2495.82,-3382.12 2504.85,-3376.57 2494.33,-3375.28 2495.82,-3382.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node207"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="2188,-3218.64 2024,-3218.64 2024,-3182.64 2188,-3182.64 2188,-3218.64"/>
<text text-anchor="middle" x="2106" y="-3196.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge635" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2185.66,-3182.6C2259.79,-3170.63 2369.19,-3166.72 2436,-3227.64 2490.02,-3276.89 2415.31,-3335.55 2464.5,-3389.64 2472.66,-3398.61 2483.51,-3404.71 2495.01,-3408.84"/>
<polygon fill="blue" stroke="blue" points="2494.19,-3412.25 2504.78,-3411.86 2496.26,-3405.56 2494.19,-3412.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge636" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.31,-3191.54C2257.61,-3187.37 2358.07,-3190 2436,-3227.64 2485.44,-3251.51 2525.25,-3303.69 2546.25,-3335.73"/>
<polygon fill="blue" stroke="blue" points="2543.33,-3337.66 2551.67,-3344.19 2549.23,-3333.88 2543.33,-3337.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge638" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.35,-3205.86C2274.83,-3209.42 2403.52,-3208.39 2436,-3173.64 2510.82,-3093.59 2397.48,-1288.31 2464.5,-1201.64 2478.79,-1183.16 2504.49,-1176.57 2525.99,-1174.52"/>
<polygon fill="blue" stroke="blue" points="2526.4,-1178 2536.14,-1173.84 2525.93,-1171.01 2526.4,-1178"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge639" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.35,-3205.85C2274.82,-3209.42 2403.51,-3208.38 2436,-3173.64 2508.79,-3095.8 2399.3,-1339.93 2464.5,-1255.64 2478.79,-1237.16 2504.5,-1230.57 2526,-1228.52"/>
<polygon fill="blue" stroke="blue" points="2526.4,-1232 2536.14,-1227.84 2525.93,-1225.01 2526.4,-1232"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge634" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.33,-3205.83C2274.78,-3209.38 2403.45,-3208.33 2436,-3173.64 2495.8,-3109.89 2419.07,-1675.3 2464.5,-1600.64 2472.22,-1587.95 2484.12,-1578.1 2497.01,-1570.54"/>
<polygon fill="blue" stroke="blue" points="2498.91,-1573.49 2506.05,-1565.66 2495.58,-1567.33 2498.91,-1573.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge637" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.33,-3205.83C2274.77,-3209.37 2403.44,-3208.31 2436,-3173.64 2493.66,-3112.22 2412.83,-1724.16 2464.5,-1657.64 2465.76,-1656.01 2467.1,-1654.49 2468.53,-1653.04"/>
<polygon fill="blue" stroke="blue" points="2470.86,-1655.66 2476.24,-1646.53 2466.34,-1650.31 2470.86,-1655.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node208"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2216,-3380.64 1996,-3380.64 1996,-3344.64 2216,-3344.64 2216,-3380.64"/>
<text text-anchor="middle" x="2106" y="-3358.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge663" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2216.32,-3368.08C2280.53,-3372.15 2363.14,-3378.92 2436,-3389.64 2455.21,-3392.46 2475.87,-3396.46 2494.82,-3400.51"/>
<polygon fill="blue" stroke="blue" points="2494.33,-3403.99 2504.85,-3402.7 2495.82,-3397.15 2494.33,-3403.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge662" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2216.1,-3362.64C2302.83,-3362.64 2421.39,-3362.64 2494.9,-3362.64"/>
<polygon fill="blue" stroke="blue" points="2494.96,-3366.14 2504.96,-3362.64 2494.96,-3359.14 2494.96,-3366.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node209"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="2337.5,-3272.64 1874.5,-3272.64 1874.5,-3236.64 2337.5,-3236.64 2337.5,-3272.64"/>
<text text-anchor="middle" x="2106" y="-3250.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge696" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2193.44,-3236.59C2266.44,-3226.66 2369.44,-3225.88 2436,-3281.64 2474.05,-3313.51 2429.59,-3354.34 2464.5,-3389.64 2472.94,-3398.16 2483.8,-3404.07 2495.21,-3408.14"/>
<polygon fill="blue" stroke="blue" points="2494.29,-3411.52 2504.88,-3411.14 2496.37,-3404.83 2494.29,-3411.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge695" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2337.79,-3259.2C2371.28,-3263.98 2404.92,-3271.14 2436,-3281.64 2472.47,-3293.95 2508.93,-3318.99 2533.28,-3337.99"/>
<polygon fill="blue" stroke="blue" points="2531.36,-3340.94 2541.36,-3344.43 2535.72,-3335.46 2531.36,-3340.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge694" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2337.5,-3257.65C2382.35,-3253.3 2420.35,-3244.39 2436,-3227.64 2512.85,-3145.39 2395.66,-1290.7 2464.5,-1201.64 2478.78,-1183.16 2504.49,-1176.57 2525.99,-1174.51"/>
<polygon fill="blue" stroke="blue" points="2526.39,-1177.99 2536.14,-1173.84 2525.93,-1171.01 2526.39,-1177.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge693" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2337.92,-3257.6C2382.58,-3253.24 2420.39,-3244.33 2436,-3227.64 2510.82,-3147.59 2397.48,-1342.31 2464.5,-1255.64 2478.79,-1237.16 2504.49,-1230.57 2525.99,-1228.52"/>
<polygon fill="blue" stroke="blue" points="2526.4,-1232 2536.14,-1227.84 2525.93,-1225.01 2526.4,-1232"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge698" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2337.88,-3257.57C2382.55,-3253.21 2420.37,-3244.31 2436,-3227.64 2497.83,-3161.69 2417.54,-1677.88 2464.5,-1600.64 2472.22,-1587.95 2484.12,-1578.1 2497,-1570.53"/>
<polygon fill="blue" stroke="blue" points="2498.9,-1573.48 2506.04,-1565.65 2495.58,-1567.33 2498.9,-1573.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge697" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2337.87,-3257.56C2382.54,-3253.2 2420.36,-3244.3 2436,-3227.64 2495.69,-3164.02 2411.01,-1726.55 2464.5,-1657.64 2465.76,-1656.01 2467.1,-1654.49 2468.53,-1653.04"/>
<polygon fill="blue" stroke="blue" points="2470.86,-1655.66 2476.24,-1646.53 2466.34,-1650.31 2470.86,-1655.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node210"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="2194,-3704.64 2018,-3704.64 2018,-3668.64 2194,-3668.64 2194,-3704.64"/>
<text text-anchor="middle" x="2106" y="-3682.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge815" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2194.1,-3701.19C2265.09,-3708.28 2364.87,-3706.88 2436,-3659.64 2512.17,-3609.04 2545.28,-3497.39 2557.04,-3444.92"/>
<polygon fill="blue" stroke="blue" points="2560.51,-3445.47 2559.18,-3434.96 2553.66,-3444 2560.51,-3445.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge816" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.98,-3704.69C2255.83,-3718.11 2369.69,-3724.42 2436,-3659.64 2479.16,-3617.47 2425.47,-3435.64 2464.5,-3389.64 2472.44,-3380.28 2483.29,-3374.01 2494.9,-3369.85"/>
<polygon fill="blue" stroke="blue" points="2496.23,-3373.1 2504.77,-3366.82 2494.18,-3366.41 2496.23,-3373.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node211"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2249,-3164.64 1963,-3164.64 1963,-3128.64 2249,-3128.64 2249,-3164.64"/>
<text text-anchor="middle" x="2106" y="-3142.94" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge823" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.38,-3128.63C2256.97,-3115.71 2369.37,-3110.22 2436,-3173.64 2506.14,-3240.4 2400.9,-3316.62 2464.5,-3389.64 2472.56,-3398.89 2483.47,-3405.11 2495.09,-3409.26"/>
<polygon fill="blue" stroke="blue" points="2494.38,-3412.7 2504.97,-3412.28 2496.43,-3406.01 2494.38,-3412.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge820" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2249.25,-3131.78C2310.46,-3131.83 2380.54,-3141.03 2436,-3173.64 2498.71,-3210.5 2536.68,-3292.19 2553.03,-3335.09"/>
<polygon fill="blue" stroke="blue" points="2549.8,-3336.45 2556.55,-3344.62 2556.37,-3334.03 2549.8,-3336.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge819" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2249.23,-3151.86C2326.22,-3151.29 2410.66,-3143.98 2436,-3116.64 2508.32,-3038.59 2399.4,-1285.79 2464.5,-1201.64 2478.79,-1183.16 2504.5,-1176.57 2526,-1174.52"/>
<polygon fill="blue" stroke="blue" points="2526.4,-1178 2536.14,-1173.84 2525.93,-1171.01 2526.4,-1178"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge818" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2249.22,-3151.86C2326.21,-3151.28 2410.65,-3143.97 2436,-3116.64 2506.3,-3040.81 2401.21,-1337.41 2464.5,-1255.64 2478.79,-1237.16 2504.5,-1230.58 2526,-1228.52"/>
<polygon fill="blue" stroke="blue" points="2526.4,-1232 2536.15,-1227.84 2525.94,-1225.02 2526.4,-1232"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge821" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2249.19,-3151.82C2326.16,-3151.24 2410.61,-3143.93 2436,-3116.64 2493.38,-3054.96 2420.69,-1672.58 2464.5,-1600.64 2472.22,-1587.95 2484.13,-1578.11 2497.02,-1570.54"/>
<polygon fill="blue" stroke="blue" points="2498.92,-1573.49 2506.05,-1565.66 2495.59,-1567.33 2498.92,-1573.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge822" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2249.18,-3151.82C2326.15,-3151.23 2410.6,-3143.92 2436,-3116.64 2491.24,-3057.3 2414.75,-1721.64 2464.5,-1657.64 2465.76,-1656.02 2467.11,-1654.49 2468.53,-1653.05"/>
<polygon fill="blue" stroke="blue" points="2470.86,-1655.66 2476.24,-1646.53 2466.34,-1650.31 2470.86,-1655.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node212"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2251,-1396.64 1961,-1396.64 1961,-1360.64 2251,-1360.64 2251,-1396.64"/>
<text text-anchor="middle" x="2106" y="-1374.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.54,-1396.64C2260.52,-1408.33 2369.1,-1411.8 2436,-1351.64 2486.46,-1306.26 2418.5,-1251.52 2464.5,-1201.64 2480.06,-1184.76 2505.09,-1178.07 2525.97,-1175.56"/>
<polygon fill="blue" stroke="blue" points="2526.49,-1179.03 2536.12,-1174.62 2525.84,-1172.06 2526.49,-1179.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.64,-1396.64C2269.13,-1405.78 2369.71,-1405.46 2436,-1351.64 2470.55,-1323.58 2432.72,-1286.79 2464.5,-1255.64 2480.78,-1239.68 2505.58,-1232.95 2526.16,-1230.2"/>
<polygon fill="blue" stroke="blue" points="2526.6,-1233.67 2536.17,-1229.12 2525.85,-1226.71 2526.6,-1233.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2192.78,-1360.61C2265.86,-1350.54 2369.35,-1349.54 2436,-1405.64 2474.64,-1438.15 2429.91,-1478.83 2464.5,-1515.64 2467.32,-1518.63 2470.41,-1521.35 2473.72,-1523.81"/>
<polygon fill="blue" stroke="blue" points="2472.05,-1526.9 2482.34,-1529.42 2475.87,-1521.03 2472.05,-1526.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.59,-1360.58C2258.04,-1347.99 2369.35,-1343.07 2436,-1405.64 2499.86,-1465.58 2407.45,-1534.18 2464.5,-1600.64 2466.22,-1602.64 2468.08,-1604.52 2470.04,-1606.27"/>
<polygon fill="blue" stroke="blue" points="2468.05,-1609.15 2478.12,-1612.44 2472.29,-1603.59 2468.05,-1609.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node213"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2171.5,-1126.64 2040.5,-1126.64 2040.5,-1090.64 2171.5,-1090.64 2171.5,-1126.64"/>
<text text-anchor="middle" x="2106" y="-1104.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.82,-1092.87C2245.66,-1079.12 2365.24,-1070.35 2436,-1135.64 2493.6,-1188.77 2404.78,-1258.9 2464.5,-1309.64 2531.74,-1366.75 2577.95,-1333.07 2663,-1309.64 2780.27,-1277.33 2897.94,-1189 2950.93,-1145.5"/>
<polygon fill="blue" stroke="blue" points="2953.4,-1148 2958.87,-1138.92 2948.93,-1142.61 2953.4,-1148"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.65,-1107.96C2238.69,-1108.63 2346.1,-1113.62 2436,-1135.64 2449.35,-1138.9 2451.51,-1143.13 2464.5,-1147.64 2484.76,-1154.66 2507.86,-1161.1 2526.55,-1165.92"/>
<polygon fill="blue" stroke="blue" points="2525.87,-1169.36 2536.43,-1168.43 2527.6,-1162.58 2525.87,-1169.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2171.74,-1095.73C2243.32,-1085.28 2358.71,-1080.16 2436,-1135.64 2461.96,-1154.27 2440.39,-1180.66 2464.5,-1201.64 2481.51,-1216.43 2505.94,-1223.18 2526.16,-1226.24"/>
<polygon fill="blue" stroke="blue" points="2525.92,-1229.73 2536.28,-1227.52 2526.8,-1222.79 2525.92,-1229.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node214"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2180.5,-1342.64 2031.5,-1342.64 2031.5,-1306.64 2180.5,-1306.64 2180.5,-1342.64"/>
<text text-anchor="middle" x="2106" y="-1320.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.73,-1340.43C2253.75,-1351.52 2364.71,-1355.53 2436,-1297.64 2470.55,-1269.58 2432.72,-1232.79 2464.5,-1201.64 2480.78,-1185.68 2505.58,-1178.95 2526.16,-1176.2"/>
<polygon fill="blue" stroke="blue" points="2526.6,-1179.67 2536.17,-1175.12 2525.85,-1172.71 2526.6,-1179.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.68,-1335.89C2251.14,-1342.86 2357.92,-1343.2 2436,-1297.64 2455.48,-1286.27 2446.16,-1268.77 2464.5,-1255.64 2482.5,-1242.74 2506.39,-1236 2526.08,-1232.48"/>
<polygon fill="blue" stroke="blue" points="2526.9,-1235.89 2536.23,-1230.87 2525.8,-1228.98 2526.9,-1235.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.61,-1341.67C2254.61,-1354.09 2367.29,-1359.43 2436,-1297.64 2486.46,-1252.26 2418.5,-1197.52 2464.5,-1147.64 2465.41,-1146.65 2466.35,-1145.7 2467.32,-1144.78"/>
<polygon fill="blue" stroke="blue" points="2469.68,-1147.37 2475.29,-1138.39 2465.3,-1141.91 2469.68,-1147.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.81,-1307.38C2254.97,-1294.78 2367.78,-1289.3 2436,-1351.64 2490.62,-1401.54 2416.07,-1459.71 2464.5,-1515.64 2467.05,-1518.58 2469.88,-1521.26 2472.92,-1523.69"/>
<polygon fill="blue" stroke="blue" points="2471.19,-1526.75 2481.4,-1529.57 2475.18,-1521 2471.19,-1526.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.52,-1306.76C2255.27,-1293.39 2369.31,-1287.05 2436,-1351.64 2516.02,-1429.13 2393.27,-1515 2464.5,-1600.64 2466.19,-1602.67 2468.02,-1604.57 2469.96,-1606.34"/>
<polygon fill="blue" stroke="blue" points="2467.92,-1609.19 2477.95,-1612.57 2472.22,-1603.67 2467.92,-1609.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node215"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2170,-1234.64 2042,-1234.64 2042,-1198.64 2170,-1198.64 2170,-1234.64"/>
<text text-anchor="middle" x="2106" y="-1212.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2170.32,-1200.74C2244.45,-1186.3 2365.97,-1176.31 2436,-1243.64 2511.52,-1316.25 2386.07,-1408.18 2464.5,-1477.64 2530.55,-1536.13 2574.82,-1480.35 2663,-1477.64 2937.17,-1469.19 3031.2,-1557.25 3279,-1439.64 3377.58,-1392.85 3453.05,-1280.37 3483.86,-1228.57"/>
<polygon fill="blue" stroke="blue" points="3487.06,-1230.04 3489.09,-1219.64 3481.01,-1226.5 3487.06,-1230.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2170.13,-1212.13C2236.41,-1207.25 2343.62,-1198.9 2436,-1189.64 2466.42,-1186.58 2500.88,-1182.45 2526.14,-1179.3"/>
<polygon fill="blue" stroke="blue" points="2526.88,-1182.73 2536.36,-1178.01 2526.01,-1175.79 2526.88,-1182.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node216"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="2352.5,-1558.64 1859.5,-1558.64 1859.5,-1522.64 2352.5,-1522.64 2352.5,-1558.64"/>
<text text-anchor="middle" x="2106" y="-1536.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2352.69,-1541C2390.47,-1536.23 2421.7,-1527.8 2436,-1513.64 2485.46,-1464.63 2419.83,-1255.04 2464.5,-1201.64 2479.39,-1183.84 2504.83,-1177.2 2526.07,-1174.95"/>
<polygon fill="blue" stroke="blue" points="2526.39,-1178.44 2536.09,-1174.17 2525.84,-1171.46 2526.39,-1178.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.27,-1558.69C2256.07,-1572.01 2369.64,-1578.15 2436,-1513.64 2477.36,-1473.43 2427.08,-1299.53 2464.5,-1255.64 2479.55,-1237.98 2505,-1231.34 2526.18,-1229.05"/>
<polygon fill="blue" stroke="blue" points="2526.49,-1232.54 2536.18,-1228.25 2525.93,-1225.56 2526.49,-1232.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2352.75,-1544.41C2392.26,-1545.02 2431.04,-1545.61 2464.3,-1546.13"/>
<polygon fill="blue" stroke="blue" points="2464.38,-1549.63 2474.44,-1546.28 2464.49,-1542.63 2464.38,-1549.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2352.77,-1539.55C2381.77,-1545.53 2410.2,-1554.52 2436,-1567.64 2453.28,-1576.41 2448.27,-1590.05 2464.5,-1600.64 2468.81,-1603.45 2473.41,-1606.01 2478.16,-1608.34"/>
<polygon fill="blue" stroke="blue" points="2476.9,-1611.61 2487.46,-1612.54 2479.78,-1605.23 2476.9,-1611.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node217"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="2329.5,-1504.64 1882.5,-1504.64 1882.5,-1468.64 2329.5,-1468.64 2329.5,-1504.64"/>
<text text-anchor="middle" x="2106" y="-1482.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.27,-1504.69C2256.07,-1518.01 2369.64,-1524.15 2436,-1459.64 2477.36,-1419.43 2427.08,-1245.53 2464.5,-1201.64 2479.55,-1183.98 2505,-1177.34 2526.18,-1175.05"/>
<polygon fill="blue" stroke="blue" points="2526.49,-1178.54 2536.18,-1174.25 2525.93,-1171.56 2526.49,-1178.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.98,-1504.66C2257.49,-1517.41 2369.34,-1522.6 2436,-1459.64 2502.55,-1396.77 2404.11,-1324.44 2464.5,-1255.64 2479.74,-1238.28 2505.01,-1231.61 2526.08,-1229.24"/>
<polygon fill="blue" stroke="blue" points="2526.65,-1232.7 2536.32,-1228.38 2526.06,-1225.73 2526.65,-1232.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2329.79,-1499.43C2365.45,-1503.05 2401.84,-1507.69 2436,-1513.64 2455.17,-1516.97 2475.67,-1521.88 2494.45,-1526.93"/>
<polygon fill="blue" stroke="blue" points="2493.53,-1530.31 2504.1,-1529.58 2495.39,-1523.56 2493.53,-1530.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.65,-1468.6C2272.54,-1460.31 2370.31,-1461.8 2436,-1513.64 2467.94,-1538.84 2435.45,-1572.15 2464.5,-1600.64 2466.7,-1602.8 2469.06,-1604.8 2471.53,-1606.66"/>
<polygon fill="blue" stroke="blue" points="2470.09,-1609.9 2480.37,-1612.45 2473.92,-1604.05 2470.09,-1609.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node218"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="2200.5,-1180.64 2011.5,-1180.64 2011.5,-1144.64 2200.5,-1144.64 2200.5,-1180.64"/>
<text text-anchor="middle" x="2106" y="-1158.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.87,-1144.59C2260.83,-1132.97 2369.17,-1129.6 2436,-1189.64 2486.16,-1234.69 2412.54,-1295.67 2464.5,-1338.64 2618.75,-1466.17 3277.34,-1271.51 3454.8,-1215.81"/>
<polygon fill="blue" stroke="blue" points="3455.86,-1219.15 3464.35,-1212.8 3453.76,-1212.47 3455.86,-1219.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.55,-1165.1C2301.34,-1167.76 2456.64,-1171.85 2526.4,-1173.68"/>
<polygon fill="blue" stroke="blue" points="2526.36,-1177.18 2536.45,-1173.95 2526.54,-1170.19 2526.36,-1177.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node219"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="2235,-1288.64 1977,-1288.64 1977,-1252.64 2235,-1252.64 2235,-1288.64"/>
<text text-anchor="middle" x="2106" y="-1266.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2235.01,-1285.19C2299.33,-1286.53 2376.11,-1278.59 2436,-1243.64 2455.48,-1232.27 2446.16,-1214.77 2464.5,-1201.64 2482.5,-1188.74 2506.39,-1182 2526.08,-1178.48"/>
<polygon fill="blue" stroke="blue" points="2526.9,-1181.89 2536.23,-1176.87 2525.8,-1174.98 2526.9,-1181.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2235.22,-1261.19C2296.1,-1256.43 2369.85,-1250.27 2436,-1243.64 2466.42,-1240.58 2500.88,-1236.45 2526.14,-1233.3"/>
<polygon fill="blue" stroke="blue" points="2526.88,-1236.73 2536.36,-1232.01 2526.01,-1229.79 2526.88,-1236.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.64,-1288.64C2269.13,-1297.78 2369.71,-1297.46 2436,-1243.64 2470.55,-1215.58 2432.72,-1178.79 2464.5,-1147.64 2465.46,-1146.7 2466.44,-1145.79 2467.46,-1144.92"/>
<polygon fill="blue" stroke="blue" points="2469.76,-1147.56 2475.71,-1138.79 2465.59,-1141.94 2469.76,-1147.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.4,-1252.61C2257,-1239.68 2369.41,-1234.18 2436,-1297.64 2506.74,-1365.05 2402.11,-1440.44 2464.5,-1515.64 2466.93,-1518.56 2469.63,-1521.22 2472.54,-1523.64"/>
<polygon fill="blue" stroke="blue" points="2470.53,-1526.51 2480.69,-1529.5 2474.61,-1520.82 2470.53,-1526.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2235.21,-1264.83C2315.14,-1264.21 2407.97,-1269.94 2436,-1297.64 2484.11,-1345.17 2421.78,-1548.21 2464.5,-1600.64 2466.01,-1602.48 2467.62,-1604.22 2469.34,-1605.86"/>
<polygon fill="blue" stroke="blue" points="2467.43,-1608.81 2477.41,-1612.36 2471.82,-1603.36 2467.43,-1608.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node220"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="2345.5,-1450.64 1866.5,-1450.64 1866.5,-1414.64 2345.5,-1414.64 2345.5,-1450.64"/>
<text text-anchor="middle" x="2106" y="-1428.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge581" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.98,-1450.66C2257.49,-1463.41 2369.34,-1468.6 2436,-1405.64 2502.55,-1342.77 2404.11,-1270.44 2464.5,-1201.64 2479.74,-1184.28 2505.01,-1177.61 2526.08,-1175.24"/>
<polygon fill="blue" stroke="blue" points="2526.65,-1178.7 2536.32,-1174.38 2526.06,-1171.73 2526.65,-1178.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge584" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.54,-1450.64C2260.52,-1462.33 2369.1,-1465.8 2436,-1405.64 2486.46,-1360.26 2418.5,-1305.52 2464.5,-1255.64 2480.06,-1238.76 2505.09,-1232.07 2525.97,-1229.56"/>
<polygon fill="blue" stroke="blue" points="2526.49,-1233.03 2536.12,-1228.62 2525.84,-1226.06 2526.49,-1233.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge582" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2345.58,-1423.31C2377.79,-1430.1 2408.99,-1441.51 2436,-1459.64 2459.19,-1475.19 2443.28,-1497.48 2464.5,-1515.64 2468.39,-1518.97 2472.64,-1521.96 2477.12,-1524.63"/>
<polygon fill="blue" stroke="blue" points="2475.51,-1527.74 2485.98,-1529.41 2478.84,-1521.58 2475.51,-1527.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge583" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2187.8,-1414.59C2261.62,-1403.21 2369.18,-1400.24 2436,-1459.64 2483.79,-1502.11 2421.55,-1553.28 2464.5,-1600.64 2466.33,-1602.65 2468.29,-1604.54 2470.36,-1606.3"/>
<polygon fill="blue" stroke="blue" points="2468.7,-1609.42 2478.85,-1612.48 2472.83,-1603.76 2468.7,-1609.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node221"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2233,-1612.64 1979,-1612.64 1979,-1576.64 2233,-1576.64 2233,-1612.64"/>
<text text-anchor="middle" x="2106" y="-1590.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge799" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2233.09,-1579.18C2303.66,-1578.15 2387.05,-1591.11 2436,-1647.64 2499.36,-1720.8 2405.22,-3313.12 2464.5,-3389.64 2472.22,-3399.6 2483.26,-3406.1 2495.16,-3410.3"/>
<polygon fill="blue" stroke="blue" points="2494.26,-3413.69 2504.85,-3413.2 2496.27,-3406.98 2494.26,-3413.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge800" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2233.03,-1579.23C2303.58,-1578.22 2386.96,-1591.18 2436,-1647.64 2462.77,-1678.45 2456.42,-3076.63 2464.5,-3116.64 2481.33,-3199.97 2524.98,-3291.28 2547.93,-3335.55"/>
<polygon fill="blue" stroke="blue" points="2544.88,-3337.28 2552.62,-3344.52 2551.08,-3334.03 2544.88,-3337.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge798" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2179.27,-1612.68C2254.37,-1626.65 2369.98,-1633.93 2436,-1567.64 2493.57,-1509.83 2412.58,-1264.56 2464.5,-1201.64 2479.36,-1183.62 2505.05,-1177.02 2526.4,-1174.84"/>
<polygon fill="blue" stroke="blue" points="2526.75,-1178.32 2536.46,-1174.09 2526.23,-1171.34 2526.75,-1178.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge796" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.13,-1612.69C2255.11,-1626.4 2369.85,-1633.18 2436,-1567.64 2485.46,-1518.63 2419.83,-1309.04 2464.5,-1255.64 2479.39,-1237.84 2504.83,-1231.2 2526.07,-1228.95"/>
<polygon fill="blue" stroke="blue" points="2526.39,-1232.44 2536.09,-1228.17 2525.84,-1225.46 2526.39,-1232.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge797" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2233.38,-1586.49C2294.66,-1581.97 2369.28,-1575.64 2436,-1567.64 2445.26,-1566.53 2454.88,-1565.24 2464.49,-1563.87"/>
<polygon fill="blue" stroke="blue" points="2465.1,-1567.32 2474.49,-1562.42 2464.09,-1560.39 2465.1,-1567.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge795" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2233.28,-1604.62C2306.9,-1610.43 2398.32,-1617.66 2466.12,-1623.02"/>
<polygon fill="blue" stroke="blue" points="2466.13,-1626.53 2476.37,-1623.83 2466.68,-1619.55 2466.13,-1626.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node222"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="2287,-1839.64 1925,-1839.64 1925,-1803.64 2287,-1803.64 2287,-1839.64"/>
<text text-anchor="middle" x="2106" y="-1817.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2208.43,-1839.66C2281.31,-1846.39 2376.79,-1841.43 2436,-1784.64 2495.72,-1727.35 2416.8,-1668.26 2464.5,-1600.64 2473.42,-1587.99 2486.33,-1578.08 2499.87,-1570.42"/>
<polygon fill="blue" stroke="blue" points="2501.6,-1573.46 2508.82,-1565.71 2498.34,-1567.27 2501.6,-1573.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node247"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2643,-1702.64 2484,-1702.64 2484,-1666.64 2643,-1666.64 2643,-1702.64"/>
<text text-anchor="middle" x="2563.5" y="-1680.94" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2287.02,-1835.25C2339.5,-1830.78 2393.96,-1816.95 2436,-1784.64 2463.62,-1763.41 2438.63,-1734.96 2464.5,-1711.64 2467.67,-1708.78 2471.12,-1706.22 2474.76,-1703.93"/>
<polygon fill="blue" stroke="blue" points="2476.51,-1706.95 2483.57,-1699.05 2473.13,-1700.83 2476.51,-1706.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node250"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2639.5,-1756.64 2487.5,-1756.64 2487.5,-1720.64 2639.5,-1720.64 2639.5,-1756.64"/>
<text text-anchor="middle" x="2563.5" y="-1734.94" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2287.18,-1809.15C2335.88,-1803.66 2388.29,-1795.82 2436,-1784.64 2461.28,-1778.71 2488.45,-1769.26 2511.11,-1760.46"/>
<polygon fill="blue" stroke="blue" points="2512.5,-1763.67 2520.52,-1756.74 2509.93,-1757.16 2512.5,-1763.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node223"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="2244.5,-2109.64 1967.5,-2109.64 1967.5,-2073.64 2244.5,-2073.64 2244.5,-2109.64"/>
<text text-anchor="middle" x="2106" y="-2087.94" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2244.72,-2097.78C2322.56,-2098.01 2409.48,-2091.71 2436,-2064.64 2508.29,-1990.84 2408.91,-1687.71 2464.5,-1600.64 2472.58,-1587.98 2484.76,-1578.13 2497.82,-1570.55"/>
<polygon fill="blue" stroke="blue" points="2499.8,-1573.46 2506.96,-1565.65 2496.49,-1567.29 2499.8,-1573.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2244.54,-2097.6C2322.31,-2097.76 2409.22,-2091.45 2436,-2064.64 2491.61,-2008.95 2414.33,-1772.27 2464.5,-1711.64 2467.64,-1707.84 2471.26,-1704.55 2475.22,-1701.71"/>
<polygon fill="blue" stroke="blue" points="2477.07,-1704.67 2483.77,-1696.46 2473.42,-1698.71 2477.07,-1704.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.65,-2109.65C2255.51,-2123.12 2369.63,-2129.55 2436,-2064.64 2479.61,-2021.98 2430.59,-1842.34 2464.5,-1791.64 2473.01,-1778.91 2485.63,-1768.98 2499,-1761.35"/>
<polygon fill="blue" stroke="blue" points="2500.67,-1764.43 2507.86,-1756.65 2497.39,-1758.24 2500.67,-1764.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node224"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="2321.5,-2055.64 1890.5,-2055.64 1890.5,-2019.64 2321.5,-2019.64 2321.5,-2055.64"/>
<text text-anchor="middle" x="2106" y="-2033.94" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2321.91,-2041.29C2373.11,-2037.52 2418.13,-2028.73 2436,-2010.64 2500.18,-1945.65 2415.04,-1677.42 2464.5,-1600.64 2472.63,-1588.02 2484.83,-1578.18 2497.89,-1570.6"/>
<polygon fill="blue" stroke="blue" points="2499.87,-1573.51 2507.03,-1565.7 2496.57,-1567.34 2499.87,-1573.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2321.61,-2040.99C2372.81,-2037.22 2417.9,-2028.5 2436,-2010.64 2483.51,-1963.75 2421.58,-1762.75 2464.5,-1711.64 2467.67,-1707.86 2471.31,-1704.59 2475.28,-1701.76"/>
<polygon fill="blue" stroke="blue" points="2477.14,-1704.73 2483.86,-1696.54 2473.5,-1698.75 2477.14,-1704.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.4,-2055.67C2257.01,-2068.61 2369.43,-2074.11 2436,-2010.64 2507.03,-1942.9 2408.9,-1872.52 2464.5,-1791.64 2473.22,-1778.95 2485.99,-1769.03 2499.44,-1761.38"/>
<polygon fill="blue" stroke="blue" points="2501.14,-1764.45 2508.35,-1756.68 2497.87,-1758.26 2501.14,-1764.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node225"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="2199.5,-2811.64 2012.5,-2811.64 2012.5,-2775.64 2199.5,-2775.64 2199.5,-2811.64"/>
<text text-anchor="middle" x="2106" y="-2789.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node246"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="2590.5,-2487.64 2536.5,-2487.64 2536.5,-2451.64 2590.5,-2451.64 2590.5,-2487.64"/>
<text text-anchor="middle" x="2563.5" y="-2465.94" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.99,-2811.67C2257.51,-2824.42 2369.36,-2829.62 2436,-2766.64 2502.85,-2703.45 2422.22,-2643.33 2464.5,-2561.64 2479.15,-2533.33 2506.05,-2509.05 2527.97,-2492.55"/>
<polygon fill="blue" stroke="blue" points="2530.08,-2495.34 2536.09,-2486.61 2525.95,-2489.69 2530.08,-2495.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node226"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2206,-2217.64 2006,-2217.64 2006,-2181.64 2206,-2181.64 2206,-2217.64"/>
<text text-anchor="middle" x="2106" y="-2195.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2206.15,-2183.99C2276.05,-2178.29 2368.81,-2182 2436,-2226.64 2512.17,-2277.23 2545.28,-2388.88 2557.04,-2441.35"/>
<polygon fill="blue" stroke="blue" points="2553.66,-2442.27 2559.18,-2451.31 2560.51,-2440.8 2553.66,-2442.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2206.12,-2205.17C2291.23,-2207.55 2404.96,-2204.31 2436,-2172.64 2507.84,-2099.33 2399.81,-1791.33 2464.5,-1711.64 2467.6,-1707.81 2471.2,-1704.5 2475.13,-1701.64"/>
<polygon fill="blue" stroke="blue" points="2476.99,-1704.6 2483.65,-1696.36 2473.3,-1698.65 2476.99,-1704.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2206.02,-2205.07C2291.07,-2207.39 2404.76,-2204.1 2436,-2172.64 2495.82,-2112.38 2418.34,-1862.89 2464.5,-1791.64 2472.66,-1779.04 2484.88,-1769.21 2497.94,-1761.63"/>
<polygon fill="blue" stroke="blue" points="2499.92,-1764.54 2507.08,-1756.73 2496.61,-1758.37 2499.92,-1764.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node227"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="2186,-2703.64 2026,-2703.64 2026,-2667.64 2186,-2667.64 2186,-2703.64"/>
<text text-anchor="middle" x="2106" y="-2681.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.3,-2702.29C2259.33,-2712.76 2366.57,-2715.18 2436,-2658.64 2470.84,-2630.26 2440.96,-2599.91 2464.5,-2561.64 2480.9,-2534.96 2507.04,-2510.97 2528.19,-2494.18"/>
<polygon fill="blue" stroke="blue" points="2530.56,-2496.78 2536.32,-2487.89 2526.27,-2491.25 2530.56,-2496.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node248"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="3059,-1702.64 2903,-1702.64 2903,-1666.64 3059,-1666.64 3059,-1702.64"/>
<text text-anchor="middle" x="2981" y="-1680.94" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.07,-2690.44C2272.22,-2693.8 2402.32,-2692.73 2436,-2658.64 2468.09,-2626.14 2451.56,-2292.43 2464.5,-2248.64 2516.15,-2073.78 2607.64,-2063.35 2663,-1889.64 2675.09,-1851.71 2654.56,-1739.48 2683,-1711.64 2737.11,-1658.67 2826.32,-1657.4 2892.87,-1666.06"/>
<polygon fill="blue" stroke="blue" points="2892.54,-1669.55 2902.93,-1667.46 2893.51,-1662.61 2892.54,-1669.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node252"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="3055.5,-1756.64 2906.5,-1756.64 2906.5,-1720.64 3055.5,-1720.64 3055.5,-1756.64"/>
<text text-anchor="middle" x="2981" y="-1734.94" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.38,-2703.64C2256.97,-2716.56 2369.37,-2722.05 2436,-2658.64 2471.07,-2625.25 2442.83,-2485.93 2464.5,-2442.64 2519.71,-2332.32 2612.67,-2361.26 2663,-2248.64 2683.74,-2202.23 2649.53,-1829.88 2683,-1791.64 2734.76,-1732.5 2827.88,-1724.48 2896.09,-1727.97"/>
<polygon fill="blue" stroke="blue" points="2896.19,-1731.48 2906.39,-1728.59 2896.62,-1724.49 2896.19,-1731.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node228"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="2236.5,-2001.64 1975.5,-2001.64 1975.5,-1965.64 2236.5,-1965.64 2236.5,-2001.64"/>
<text text-anchor="middle" x="2106" y="-1979.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2236.64,-1989.57C2316.33,-1990.18 2408.32,-1984.37 2436,-1956.64 2492.06,-1900.46 2421.18,-1667.13 2464.5,-1600.64 2472.69,-1588.06 2484.92,-1578.24 2497.99,-1570.66"/>
<polygon fill="blue" stroke="blue" points="2499.97,-1573.57 2507.13,-1565.76 2496.66,-1567.4 2499.97,-1573.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.54,-2001.67C2256.28,-2014.89 2369.56,-2020.86 2436,-1956.64 2514.82,-1880.45 2393.14,-1794.85 2464.5,-1711.64 2467.71,-1707.9 2471.38,-1704.65 2475.38,-1701.84"/>
<polygon fill="blue" stroke="blue" points="2477.23,-1704.81 2483.99,-1696.65 2473.62,-1698.81 2477.23,-1704.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2185.35,-2001.66C2259.52,-2013.71 2369.18,-2017.75 2436,-1956.64 2490.92,-1906.41 2421.08,-1852.07 2464.5,-1791.64 2473.57,-1779.01 2486.61,-1769.08 2500.23,-1761.41"/>
<polygon fill="blue" stroke="blue" points="2502,-1764.44 2509.23,-1756.69 2498.75,-1758.24 2502,-1764.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node229"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="2276.5,-2649.64 1935.5,-2649.64 1935.5,-2613.64 2276.5,-2613.64 2276.5,-2649.64"/>
<text text-anchor="middle" x="2106" y="-2627.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2276.82,-2645.96C2330.83,-2643.36 2388.76,-2632.55 2436,-2604.64 2455.74,-2592.97 2449.71,-2579.15 2464.5,-2561.64 2485.37,-2536.92 2512.36,-2512 2532.74,-2494.34"/>
<polygon fill="blue" stroke="blue" points="2535.16,-2496.88 2540.47,-2487.71 2530.6,-2491.56 2535.16,-2496.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2276.7,-2637.8C2345.19,-2636.32 2413.39,-2628.41 2436,-2604.64 2504.42,-2532.71 2403.09,-1789.64 2464.5,-1711.64 2467.61,-1707.68 2471.24,-1704.28 2475.24,-1701.34"/>
<polygon fill="blue" stroke="blue" points="2477.27,-1704.21 2483.92,-1695.96 2473.58,-1698.26 2477.27,-1704.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2276.67,-2637.76C2345.15,-2636.28 2413.35,-2628.37 2436,-2604.64 2498.4,-2539.24 2416.87,-1868.45 2464.5,-1791.64 2472.33,-1779.01 2484.27,-1769.19 2497.17,-1761.63"/>
<polygon fill="blue" stroke="blue" points="2499.07,-1764.58 2506.2,-1756.75 2495.74,-1758.43 2499.07,-1764.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node230"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="2215,-2595.64 1997,-2595.64 1997,-2559.64 2215,-2559.64 2215,-2595.64"/>
<text text-anchor="middle" x="2106" y="-2573.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2215.22,-2581.79C2280.71,-2581.14 2365.01,-2574.61 2436,-2550.64 2472.47,-2538.32 2508.93,-2513.28 2533.28,-2494.28"/>
<polygon fill="blue" stroke="blue" points="2535.72,-2496.81 2541.36,-2487.84 2531.36,-2491.33 2535.72,-2496.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2215.1,-2583.6C2299.21,-2585.64 2406.44,-2581.64 2436,-2550.64 2500.36,-2483.12 2406.73,-1784.87 2464.5,-1711.64 2467.62,-1707.69 2471.25,-1704.28 2475.25,-1701.35"/>
<polygon fill="blue" stroke="blue" points="2477.28,-1704.21 2483.93,-1695.97 2473.59,-1698.26 2477.28,-1704.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2215.07,-2583.58C2299.16,-2585.6 2406.39,-2581.59 2436,-2550.64 2494.34,-2489.65 2419.94,-1863.3 2464.5,-1791.64 2472.38,-1778.96 2484.42,-1769.1 2497.39,-1761.53"/>
<polygon fill="blue" stroke="blue" points="2499.33,-1764.46 2506.48,-1756.64 2496.02,-1758.29 2499.33,-1764.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node231"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2325.5,-2163.64 1886.5,-2163.64 1886.5,-2127.64 2325.5,-2127.64 2325.5,-2163.64"/>
<text text-anchor="middle" x="2106" y="-2141.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2325.53,-2149.19C2375.29,-2145.29 2418.66,-2136.45 2436,-2118.64 2476.21,-2077.33 2433.64,-1649.32 2464.5,-1600.64 2472.49,-1588.03 2484.58,-1578.2 2497.56,-1570.63"/>
<polygon fill="blue" stroke="blue" points="2499.5,-1573.56 2506.64,-1565.74 2496.18,-1567.4 2499.5,-1573.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.68,-2163.64C2262.35,-2174.74 2369.11,-2177.3 2436,-2118.64 2481.12,-2079.06 2437.2,-2040.09 2464.5,-1986.64 2524.55,-1869.06 2594.75,-1878.65 2663,-1765.64 2676.23,-1743.73 2662.68,-1727.19 2683,-1711.64 2742.02,-1666.45 2828.26,-1663.45 2892.61,-1669.54"/>
<polygon fill="blue" stroke="blue" points="2892.44,-1673.04 2902.75,-1670.59 2893.16,-1666.08 2892.44,-1673.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2325.63,-2152.59C2363.99,-2146.97 2402.36,-2136.54 2436,-2118.64 2578.64,-2042.7 2577.88,-1971.98 2663,-1834.64 2674.1,-1816.72 2666.3,-1804.49 2683,-1791.64 2743.57,-1745.01 2831.61,-1734.32 2896.11,-1733.75"/>
<polygon fill="blue" stroke="blue" points="2896.25,-1737.25 2906.25,-1733.74 2896.24,-1730.25 2896.25,-1737.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node232"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="2229.5,-2757.64 1982.5,-2757.64 1982.5,-2721.64 2229.5,-2721.64 2229.5,-2757.64"/>
<text text-anchor="middle" x="2106" y="-2735.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.55,-2757.66C2260.54,-2769.36 2369.14,-2772.84 2436,-2712.64 2486.75,-2666.93 2431.65,-2621.51 2464.5,-2561.64 2479.83,-2533.7 2506.69,-2509.39 2528.41,-2492.78"/>
<polygon fill="blue" stroke="blue" points="2530.52,-2495.58 2536.46,-2486.81 2526.34,-2489.96 2530.52,-2495.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node233"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="2216,-2919.64 1996,-2919.64 1996,-2883.64 2216,-2883.64 2216,-2919.64"/>
<text text-anchor="middle" x="2106" y="-2897.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.56,-2919.65C2257.99,-2932.22 2369.28,-2937.12 2436,-2874.64 2467.48,-2845.15 2452.2,-2723.98 2464.5,-2682.64 2485.36,-2612.57 2525.18,-2535.97 2547.1,-2496.5"/>
<polygon fill="blue" stroke="blue" points="2550.17,-2498.18 2552,-2487.75 2544.06,-2494.76 2550.17,-2498.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2216.11,-2907.39C2299.87,-2909.21 2406.1,-2905.02 2436,-2874.64 2469.74,-2840.35 2454.7,-2489.73 2464.5,-2442.64 2517.72,-2186.98 2603.91,-2143.99 2663,-1889.64 2672.01,-1850.86 2654.56,-1739.48 2683,-1711.64 2737.11,-1658.67 2826.32,-1657.4 2892.87,-1666.06"/>
<polygon fill="blue" stroke="blue" points="2892.54,-1669.55 2902.93,-1667.46 2893.51,-1662.61 2892.54,-1669.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2216.35,-2909.75C2282.45,-2910.56 2366.98,-2904.18 2436,-2874.64 2560.15,-2821.48 2606.31,-2795.21 2663,-2672.64 2683.55,-2628.2 2651.15,-1828.81 2683,-1791.64 2734.22,-1731.86 2827.65,-1724 2896.09,-1727.71"/>
<polygon fill="blue" stroke="blue" points="2896.22,-1731.22 2906.42,-1728.36 2896.67,-1724.23 2896.22,-1731.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node234"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="2220,-2541.64 1992,-2541.64 1992,-2505.64 2220,-2505.64 2220,-2541.64"/>
<text text-anchor="middle" x="2106" y="-2519.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.09,-2517.95C2283.74,-2513.85 2364.56,-2507.15 2436,-2496.64 2466.66,-2492.12 2501.02,-2484.63 2526.18,-2478.68"/>
<polygon fill="blue" stroke="blue" points="2527.12,-2482.06 2536.03,-2476.32 2525.49,-2475.25 2527.12,-2482.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.17,-2529.7C2303.45,-2531.44 2407,-2526.99 2436,-2496.64 2496.29,-2433.53 2410.36,-1780.09 2464.5,-1711.64 2467.62,-1707.69 2471.26,-1704.29 2475.27,-1701.36"/>
<polygon fill="blue" stroke="blue" points="2477.29,-1704.22 2483.95,-1695.98 2473.61,-1698.27 2477.29,-1704.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.13,-2529.67C2303.39,-2531.39 2406.94,-2526.93 2436,-2496.64 2490.27,-2440.06 2423.01,-1858.15 2464.5,-1791.64 2472.4,-1778.97 2484.45,-1769.12 2497.42,-1761.54"/>
<polygon fill="blue" stroke="blue" points="2499.36,-1764.48 2506.51,-1756.66 2496.05,-1758.31 2499.36,-1764.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node235"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2250,-3081.64 1962,-3081.64 1962,-3045.64 2250,-3045.64 2250,-3081.64"/>
<text text-anchor="middle" x="2106" y="-3059.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2176.24,-3081.67C2251.86,-3096.73 2370.85,-3105.96 2436,-3036.64 2490.65,-2978.49 2422.97,-1668.77 2464.5,-1600.64 2472.23,-1587.95 2484.14,-1578.11 2497.02,-1570.55"/>
<polygon fill="blue" stroke="blue" points="2498.93,-1573.5 2506.06,-1565.67 2495.6,-1567.34 2498.93,-1573.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2185.63,-3081.64C2259.74,-3093.59 2369.13,-3097.48 2436,-3036.64 2489.43,-2988.03 2425.74,-2937.59 2464.5,-2876.64 2522.43,-2785.54 2612.38,-2831.99 2663,-2736.64 2689.71,-2686.33 2644.18,-1753.32 2683,-1711.64 2735.19,-1655.59 2826.21,-1655.3 2893.78,-1665.04"/>
<polygon fill="blue" stroke="blue" points="2893.57,-1668.55 2903.99,-1666.61 2894.64,-1661.63 2893.57,-1668.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2250.16,-3074.88C2310.35,-3073.92 2379.38,-3065.01 2436,-3036.64 2572.24,-2968.35 2607.63,-2921.62 2663,-2779.64 2682.95,-2728.49 2647.33,-1833.37 2683,-1791.64 2734.14,-1731.8 2827.59,-1723.95 2896.05,-1727.67"/>
<polygon fill="blue" stroke="blue" points="2896.19,-1731.19 2906.39,-1728.33 2896.63,-1724.2 2896.19,-1731.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node236"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="2327,-3027.64 1885,-3027.64 1885,-2991.64 2327,-2991.64 2327,-3027.64"/>
<text text-anchor="middle" x="2106" y="-3005.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge586" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2182.7,-3027.68C2257.28,-3040.54 2369.42,-3045.89 2436,-2982.64 2470.62,-2949.74 2453.87,-2816.19 2464.5,-2769.64 2487.87,-2667.22 2531.2,-2549.95 2551.49,-2497.51"/>
<polygon fill="blue" stroke="blue" points="2554.86,-2498.5 2555.22,-2487.91 2548.33,-2495.96 2554.86,-2498.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge587" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2184.19,-3027.69C2258.56,-3040.12 2369.32,-3044.74 2436,-2982.64 2496.88,-2925.93 2421.85,-2869.06 2464.5,-2797.64 2521.19,-2702.69 2612.67,-2746.1 2663,-2647.64 2686.67,-2601.32 2647.52,-1749.67 2683,-1711.64 2735.24,-1655.64 2826.26,-1655.34 2893.81,-1665.06"/>
<polygon fill="blue" stroke="blue" points="2893.6,-1668.57 2904.01,-1666.63 2894.66,-1661.65 2893.6,-1668.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge585" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2327.18,-3009.98C2364.4,-3004.88 2401.98,-2996.34 2436,-2982.64 2556.73,-2934.02 2605.99,-2914.63 2663,-2797.64 2687.49,-2747.38 2646.69,-1834.14 2683,-1791.64 2734.13,-1731.79 2827.58,-1723.94 2896.05,-1727.67"/>
<polygon fill="blue" stroke="blue" points="2896.18,-1731.18 2906.38,-1728.33 2896.63,-1724.2 2896.18,-1731.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node237"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2436,-1947.64 1776,-1947.64 1776,-1911.64 2436,-1911.64 2436,-1947.64"/>
<text text-anchor="middle" x="2106" y="-1925.94" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge616" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2423.71,-1911.43C2428.6,-1908.78 2432.74,-1905.86 2436,-1902.64 2483.96,-1855.26 2427.3,-1656.85 2464.5,-1600.64 2472.83,-1588.05 2485.18,-1578.22 2498.32,-1570.62"/>
<polygon fill="blue" stroke="blue" points="2500.34,-1573.51 2507.52,-1565.72 2497.05,-1567.34 2500.34,-1573.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge617" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.55,-1947.64C2257.97,-1960.21 2369.26,-1965.1 2436,-1902.64 2498.67,-1843.99 2407.58,-1775.88 2464.5,-1711.64 2467.61,-1708.12 2471.14,-1705.05 2474.95,-1702.36"/>
<polygon fill="blue" stroke="blue" points="2476.97,-1705.23 2483.72,-1697.07 2473.35,-1699.24 2476.97,-1705.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge615" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2192.45,-1947.65C2265.57,-1957.78 2369.3,-1958.89 2436,-1902.64 2474.93,-1869.8 2433.14,-1831.77 2464.5,-1791.64 2474.27,-1779.13 2487.84,-1769.2 2501.77,-1761.47"/>
<polygon fill="blue" stroke="blue" points="2503.68,-1764.43 2510.94,-1756.71 2500.46,-1758.21 2503.68,-1764.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node238"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2252,-2487.64 1960,-2487.64 1960,-2451.64 2252,-2451.64 2252,-2487.64"/>
<text text-anchor="middle" x="2106" y="-2465.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge682" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2252.06,-2469.64C2348.17,-2469.64 2467.01,-2469.64 2525.88,-2469.64"/>
<polygon fill="blue" stroke="blue" points="2526.16,-2473.14 2536.16,-2469.64 2526.16,-2466.14 2526.16,-2473.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge683" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2252.03,-2476C2328.06,-2475.9 2410.58,-2469.17 2436,-2442.64 2492.23,-2383.94 2413.99,-1775.32 2464.5,-1711.64 2467.63,-1707.69 2471.27,-1704.3 2475.28,-1701.37"/>
<polygon fill="blue" stroke="blue" points="2477.3,-1704.23 2483.97,-1696 2473.62,-1698.28 2477.3,-1704.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge681" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2252.42,-2475.95C2328.31,-2475.81 2410.56,-2469.06 2436,-2442.64 2486.21,-2390.47 2426.08,-1853 2464.5,-1791.64 2472.42,-1778.98 2484.48,-1769.14 2497.45,-1761.56"/>
<polygon fill="blue" stroke="blue" points="2499.39,-1764.49 2506.54,-1756.68 2496.08,-1758.33 2499.39,-1764.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node239"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="2241.5,-2433.64 1970.5,-2433.64 1970.5,-2397.64 2241.5,-2397.64 2241.5,-2433.64"/>
<text text-anchor="middle" x="2106" y="-2411.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge685" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2241.5,-2422.76C2301.27,-2426.93 2372.35,-2433.27 2436,-2442.64 2466.66,-2447.15 2501.02,-2454.64 2526.18,-2460.59"/>
<polygon fill="blue" stroke="blue" points="2525.49,-2464.02 2536.03,-2462.95 2527.12,-2457.21 2525.49,-2464.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge684" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2241.81,-2421.95C2320.5,-2422.42 2409.39,-2416.32 2436,-2388.64 2488.17,-2334.35 2417.63,-1770.55 2464.5,-1711.64 2467.63,-1707.7 2471.28,-1704.3 2475.29,-1701.38"/>
<polygon fill="blue" stroke="blue" points="2477.32,-1704.24 2483.99,-1696.01 2473.64,-1698.29 2477.32,-1704.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge686" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2241.76,-2421.9C2320.43,-2422.35 2409.32,-2416.25 2436,-2388.64 2482.15,-2340.88 2429.15,-1847.85 2464.5,-1791.64 2472.45,-1779 2484.51,-1769.16 2497.49,-1761.59"/>
<polygon fill="blue" stroke="blue" points="2499.43,-1764.52 2506.58,-1756.7 2496.11,-1758.35 2499.43,-1764.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node240"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="2225.5,-2379.64 1986.5,-2379.64 1986.5,-2343.64 2225.5,-2343.64 2225.5,-2379.64"/>
<text text-anchor="middle" x="2106" y="-2357.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge699" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2225.51,-2357.63C2289.38,-2358.85 2368.67,-2365.9 2436,-2388.64 2472.47,-2400.95 2508.93,-2425.99 2533.28,-2444.99"/>
<polygon fill="blue" stroke="blue" points="2531.36,-2447.94 2541.36,-2451.43 2535.72,-2442.46 2531.36,-2447.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge700" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2225.66,-2367.73C2307.88,-2369.11 2407.5,-2364.18 2436,-2334.64 2484.1,-2284.76 2421.26,-1765.78 2464.5,-1711.64 2467.57,-1707.79 2471.14,-1704.46 2475.06,-1701.58"/>
<polygon fill="blue" stroke="blue" points="2476.92,-1704.54 2483.55,-1696.28 2473.21,-1698.61 2476.92,-1704.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge701" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2225.6,-2367.67C2307.8,-2369.03 2407.4,-2364.08 2436,-2334.64 2478.09,-2291.29 2432.22,-1842.7 2464.5,-1791.64 2472.48,-1779.02 2484.55,-1769.19 2497.53,-1761.61"/>
<polygon fill="blue" stroke="blue" points="2499.47,-1764.55 2506.62,-1756.73 2496.16,-1758.38 2499.47,-1764.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node241"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="2175.5,-2973.64 2036.5,-2973.64 2036.5,-2937.64 2175.5,-2937.64 2175.5,-2973.64"/>
<text text-anchor="middle" x="2106" y="-2951.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge753" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2175.72,-2972.62C2250.29,-2986.54 2367.82,-2994.57 2436,-2928.64 2475.56,-2890.38 2449.65,-2735.63 2464.5,-2682.64 2484.23,-2612.24 2524.51,-2535.78 2546.8,-2496.41"/>
<polygon fill="blue" stroke="blue" points="2549.86,-2498.1 2551.79,-2487.68 2543.79,-2494.63 2549.86,-2498.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge752" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2175.54,-2972.43C2249.95,-2986.18 2367.34,-2994.07 2436,-2928.64 2506.74,-2861.22 2415.91,-2795.41 2464.5,-2710.64 2520.03,-2613.76 2612.7,-2656.32 2663,-2556.64 2684.15,-2514.71 2650.93,-1745.93 2683,-1711.64 2735.22,-1655.79 2826.02,-1655.39 2893.51,-1665.05"/>
<polygon fill="blue" stroke="blue" points="2893.3,-1668.56 2903.72,-1666.61 2894.36,-1661.64 2893.3,-1668.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge751" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2175.62,-2971.27C2248.99,-2983.65 2364.43,-2990 2436,-2928.64 2477.29,-2893.23 2430.66,-2852.21 2464.5,-2809.64 2525.84,-2732.46 2610.22,-2793.9 2663,-2710.64 2690.34,-2667.5 2649.79,-1830.43 2683,-1791.64 2734.19,-1731.84 2827.63,-1723.98 2896.08,-1727.69"/>
<polygon fill="blue" stroke="blue" points="2896.21,-1731.21 2906.41,-1728.35 2896.65,-1724.22 2896.21,-1731.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node242"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="2207.5,-2325.64 2004.5,-2325.64 2004.5,-2289.64 2207.5,-2289.64 2207.5,-2325.64"/>
<text text-anchor="middle" x="2106" y="-2303.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge760" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2207.61,-2297.61C2275.39,-2295.12 2365.04,-2300.37 2436,-2334.64 2485.44,-2358.51 2525.25,-2410.69 2546.25,-2442.73"/>
<polygon fill="blue" stroke="blue" points="2543.33,-2444.66 2551.67,-2451.19 2549.23,-2440.88 2543.33,-2444.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge758" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2207.86,-2313.3C2292.84,-2315.65 2405.35,-2312.28 2436,-2280.64 2480.04,-2235.17 2424.89,-1761.02 2464.5,-1711.64 2467.58,-1707.79 2471.16,-1704.47 2475.08,-1701.59"/>
<polygon fill="blue" stroke="blue" points="2476.94,-1704.56 2483.57,-1696.3 2473.24,-1698.62 2476.94,-1704.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge759" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2207.8,-2313.24C2292.74,-2315.55 2405.22,-2312.15 2436,-2280.64 2474.03,-2241.7 2435.29,-1837.55 2464.5,-1791.64 2472.51,-1779.04 2484.6,-1769.22 2497.59,-1761.65"/>
<polygon fill="blue" stroke="blue" points="2499.53,-1764.58 2506.67,-1756.76 2496.21,-1758.41 2499.53,-1764.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node243"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="2303.5,-2865.64 1908.5,-2865.64 1908.5,-2829.64 2303.5,-2829.64 2303.5,-2865.64"/>
<text text-anchor="middle" x="2106" y="-2843.94" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge775" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2303.6,-2852.96C2362.38,-2850.07 2416.44,-2841.38 2436,-2820.64 2482.52,-2771.31 2429.11,-1658.46 2464.5,-1600.64 2472.25,-1587.97 2484.17,-1578.13 2497.06,-1570.57"/>
<polygon fill="blue" stroke="blue" points="2498.96,-1573.52 2506.09,-1565.69 2495.63,-1567.36 2498.96,-1573.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge774" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.79,-2865.64C2256.47,-2878.74 2369.44,-2884.53 2436,-2820.64 2510.63,-2749 2403.75,-2673.36 2464.5,-2589.64 2521.72,-2510.78 2609.69,-2578.18 2663,-2496.64 2686.87,-2460.12 2653.17,-1743.47 2683,-1711.64 2735.27,-1655.84 2826.06,-1655.43 2893.54,-1665.07"/>
<polygon fill="blue" stroke="blue" points="2893.33,-1668.58 2903.74,-1666.63 2894.38,-1661.66 2893.33,-1668.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge776" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2197.98,-2865.67C2270.29,-2874.53 2369.92,-2873.81 2436,-2820.64 2469.68,-2793.53 2439.02,-2762.56 2464.5,-2727.64 2527.83,-2640.84 2612.04,-2684.23 2663,-2589.64 2684.03,-2550.59 2654.11,-1825.28 2683,-1791.64 2734.29,-1731.92 2827.71,-1724.05 2896.13,-1727.74"/>
<polygon fill="blue" stroke="blue" points="2896.26,-1731.25 2906.46,-1728.39 2896.7,-1724.27 2896.26,-1731.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node244"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="2218,-1893.64 1994,-1893.64 1994,-1857.64 2218,-1857.64 2218,-1893.64"/>
<text text-anchor="middle" x="2106" y="-1871.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge814" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.56,-1893.69C2256.32,-1906.93 2369.6,-1912.91 2436,-1848.64 2475.86,-1810.05 2433.42,-1646.58 2464.5,-1600.64 2473.08,-1587.95 2485.72,-1578.05 2499.1,-1570.41"/>
<polygon fill="blue" stroke="blue" points="2500.76,-1573.49 2507.96,-1565.71 2497.48,-1567.31 2500.76,-1573.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge813" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.07,-1893.65C2261.84,-1904.92 2369.12,-1907.75 2436,-1848.64 2482.6,-1807.45 2421.95,-1756.99 2464.5,-1711.64 2467.64,-1708.29 2471.16,-1705.34 2474.94,-1702.75"/>
<polygon fill="blue" stroke="blue" points="2476.77,-1705.73 2483.59,-1697.62 2473.21,-1699.71 2476.77,-1705.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge812" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2218.14,-1892.49C2286.52,-1896.95 2372.86,-1891.33 2436,-1848.64 2459.46,-1832.77 2444.8,-1811.98 2464.5,-1791.64 2476.31,-1779.44 2491.55,-1769.37 2506.47,-1761.41"/>
<polygon fill="blue" stroke="blue" points="2508.35,-1764.38 2515.68,-1756.73 2505.18,-1758.14 2508.35,-1764.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node245"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2254.5,-2271.64 1957.5,-2271.64 1957.5,-2235.64 2254.5,-2235.64 2254.5,-2271.64"/>
<text text-anchor="middle" x="2106" y="-2249.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge827" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2254.59,-2238.81C2314.51,-2239.38 2382.15,-2248.98 2436,-2280.64 2498.71,-2317.5 2536.68,-2399.19 2553.03,-2442.09"/>
<polygon fill="blue" stroke="blue" points="2549.8,-2443.45 2556.55,-2451.62 2556.37,-2441.03 2549.8,-2443.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge826" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2254.53,-2259.84C2329.76,-2259.53 2410.66,-2252.66 2436,-2226.64 2515.96,-2144.52 2392.55,-1800.86 2464.5,-1711.64 2467.59,-1707.8 2471.17,-1704.48 2475.1,-1701.61"/>
<polygon fill="blue" stroke="blue" points="2476.96,-1704.58 2483.61,-1696.33 2473.27,-1698.63 2476.96,-1704.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge828" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2254.88,-2259.74C2329.95,-2259.37 2410.58,-2252.48 2436,-2226.64 2503.93,-2157.57 2412.21,-1873.18 2464.5,-1791.64 2472.6,-1779 2484.8,-1769.16 2497.86,-1761.57"/>
<polygon fill="blue" stroke="blue" points="2499.84,-1764.48 2507,-1756.67 2496.53,-1758.31 2499.84,-1764.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge834" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2536.3,-2456.88C2508.82,-2442.3 2467.97,-2415.6 2450.25,-2378.64 2441.02,-2359.37 2439.94,-1628.34 2450.25,-1609.64 2459.83,-1592.25 2476.34,-1579.47 2493.83,-1570.2"/>
<polygon fill="blue" stroke="blue" points="2495.61,-1573.22 2503.04,-1565.66 2492.52,-1566.94 2495.61,-1573.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge833" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2575.46,-2451.56C2597.02,-2414.89 2644.47,-2328.42 2663,-2248.64 2669.76,-2219.56 2662.46,-1733.3 2683,-1711.64 2735.34,-1656.42 2825.46,-1655.7 2892.74,-1665.1"/>
<polygon fill="blue" stroke="blue" points="2892.5,-1668.61 2902.91,-1666.62 2893.54,-1661.68 2892.5,-1668.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge835" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2590.86,-2456.15C2614.5,-2442.44 2647.74,-2418.81 2663,-2387.64 2692.12,-2328.12 2639.62,-1841.72 2683,-1791.64 2734.46,-1732.23 2827.63,-1724.26 2895.93,-1727.83"/>
<polygon fill="blue" stroke="blue" points="2896.05,-1731.34 2906.25,-1728.47 2896.48,-1724.36 2896.05,-1731.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2643.14,-1684.64C2714.26,-1684.64 2818.82,-1684.64 2892.54,-1684.64"/>
<polygon fill="blue" stroke="blue" points="2892.74,-1688.14 2902.74,-1684.64 2892.74,-1681.14 2892.74,-1688.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node251"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="3527,-1702.64 3473,-1702.64 3473,-1666.64 3527,-1666.64 3527,-1702.64"/>
<text text-anchor="middle" x="3500" y="-1680.94" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.12,-1684.64C3172.38,-1684.64 3379.29,-1684.64 3462.71,-1684.64"/>
<polygon fill="blue" stroke="blue" points="3462.95,-1688.14 3472.95,-1684.64 3462.95,-1681.14 3462.95,-1688.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2650.75,-1637.45C2805.2,-1644.31 3127.01,-1633.28 3279,-1441.64 3326.94,-1381.19 3243.67,-801.39 3299,-747.64 3427.14,-623.13 3569.14,-627.07 3701,-747.64 3737.72,-781.21 3686.3,-934.97 3721,-970.64 3757.85,-1008.51 3817.5,-1014.61 3866.81,-1011.58"/>
<polygon fill="blue" stroke="blue" points="3867.14,-1015.07 3876.85,-1010.83 3866.61,-1008.08 3867.14,-1015.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.74,-1738.64C2712,-1738.64 2820.95,-1738.64 2896.01,-1738.64"/>
<polygon fill="blue" stroke="blue" points="2896.36,-1742.14 2906.36,-1738.64 2896.36,-1735.14 2896.36,-1742.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3512.81,-1666.61C3574.51,-1572.41 3859.91,-1136.7 3933.6,-1024.2"/>
<polygon fill="blue" stroke="blue" points="3936.56,-1026.07 3939.11,-1015.79 3930.7,-1022.23 3936.56,-1026.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3055.6,-1732.59C3115.74,-1727.5 3202.93,-1719.76 3279,-1711.64 3343.87,-1704.71 3419.29,-1695.12 3462.85,-1689.43"/>
<polygon fill="blue" stroke="blue" points="3463.49,-1692.87 3472.95,-1688.1 3462.58,-1685.93 3463.49,-1692.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node253"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="4055,-8864.64 3849,-8864.64 3849,-8828.64 4055,-8828.64 4055,-8864.64"/>
<text text-anchor="middle" x="3952" y="-8842.94" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4055.22,-8862.04C4100.82,-8862.8 4151.3,-8854.12 4183,-8819.64 4246.96,-8750.07 4153.13,-8044.34 4211,-7969.64 4259.63,-7906.86 4774,-7785.81 4987.21,-7737.89"/>
<polygon fill="blue" stroke="blue" points="4988.14,-7741.27 4997.14,-7735.66 4986.61,-7734.43 4988.14,-7741.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<g id="a_node260"><a xlink:title="fn scalars_summing_to&lt;R: Rng + CryptoRng&gt;(n: NonZeroUsize, s: &amp;Scalar, rng: &amp;mut R) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut v: Vec&lt;Scalar&gt; = repeat_with(|| random_scalar(rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.take(n.get() &#45; 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4448,-8864.64 4290,-8864.64 4290,-8828.64 4448,-8828.64 4448,-8864.64"/>
<text text-anchor="middle" x="4369" y="-8842.94" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4055.05,-8846.64C4123.85,-8846.64 4213.71,-8846.64 4279.48,-8846.64"/>
<polygon fill="blue" stroke="blue" points="4279.83,-8850.14 4289.83,-8846.64 4279.83,-8843.14 4279.83,-8850.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node254"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3989,-8756.64 3915,-8756.64 3915,-8720.64 3989,-8720.64 3989,-8756.64"/>
<text text-anchor="middle" x="3952" y="-8734.94" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M3967.11,-8720.51C4009.42,-8664.95 4135.28,-8490.53 4183,-8322.64 4200.43,-8261.32 4166.49,-7795.26 4211,-7749.64 4303.85,-7654.45 4474.24,-7675.13 4571.46,-7697.28"/>
<polygon fill="blue" stroke="blue" points="4570.67,-7700.69 4581.21,-7699.56 4572.27,-7693.87 4570.67,-7700.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node255"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4444,-8810.64 4294,-8810.64 4294,-8774.64 4444,-8774.64 4444,-8810.64"/>
<text text-anchor="middle" x="4369" y="-8788.94" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M4431.75,-8774.54C4467.9,-8760.62 4511.02,-8737.55 4535,-8701.64 4562.36,-8660.67 4628.53,-7903.98 4642.06,-7746.28"/>
<polygon fill="blue" stroke="blue" points="4645.57,-7746.24 4642.94,-7735.98 4638.6,-7745.65 4645.57,-7746.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node256"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="3571.5,-8864.64 3428.5,-8864.64 3428.5,-8828.64 3571.5,-8828.64 3571.5,-8864.64"/>
<text text-anchor="middle" x="3500" y="-8842.94" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3541.06,-8828.62C3584.49,-8809.86 3656.28,-8781.12 3721,-8765.64 3783.53,-8750.68 3857.68,-8743.87 3904.54,-8740.87"/>
<polygon fill="blue" stroke="blue" points="3904.92,-8744.35 3914.68,-8740.25 3904.49,-8737.37 3904.92,-8744.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3571.83,-8837.85C3614.94,-8832.52 3671.14,-8825.62 3721,-8819.64 3784.65,-8811.99 3858.23,-8803.4 3904.68,-8798"/>
<polygon fill="blue" stroke="blue" points="3905.21,-8801.46 3914.74,-8796.83 3904.41,-8794.51 3905.21,-8801.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3571.83,-8855.42C3614.94,-8860.75 3671.14,-8867.65 3721,-8873.64 3789.51,-8881.86 3869.54,-8891.19 3914.85,-8896.45"/>
<polygon fill="blue" stroke="blue" points="3914.44,-8899.93 3924.78,-8897.6 3915.25,-8892.97 3914.44,-8899.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3537.63,-8864.69C3580.41,-8884.69 3653.88,-8915.67 3721,-8927.64 3950.41,-8968.53 4232.86,-8938.55 4331.76,-8925.71"/>
<polygon fill="blue" stroke="blue" points="4332.37,-8929.16 4341.83,-8924.38 4331.45,-8922.22 4332.37,-8929.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M3989.29,-8801.1C4040.8,-8810.72 4134.27,-8818.87 4183,-8765.64 4256.41,-8685.45 4136.2,-7866.52 4211,-7787.64 4372.09,-7617.75 4549.47,-7886.11 4736,-7744.64 4756.39,-7729.17 4737.25,-7708.05 4756,-7690.64 4766.96,-7680.45 4781.53,-7674.08 4795.9,-7670.11"/>
<polygon fill="blue" stroke="blue" points="4796.87,-7673.47 4805.76,-7667.72 4795.22,-7666.67 4796.87,-7673.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M3989.29,-8801.11C4040.82,-8810.74 4134.3,-8818.89 4183,-8765.64 4259.21,-8682.3 4138.14,-7835.92 4211,-7749.64 4236.7,-7719.2 4505.93,-7681.56 4606.7,-7668.42"/>
<polygon fill="blue" stroke="blue" points="4607.28,-7671.88 4616.75,-7667.12 4606.38,-7664.93 4607.28,-7671.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.1,-8792.64C4054.33,-8792.64 4193.4,-8792.64 4283.69,-8792.64"/>
<polygon fill="blue" stroke="blue" points="4283.91,-8796.14 4293.91,-8792.64 4283.91,-8789.14 4283.91,-8796.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node261"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="4705,-8864.64 4586,-8864.64 4586,-8828.64 4705,-8828.64 4705,-8864.64"/>
<text text-anchor="middle" x="4645.5" y="-8842.94" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.22,-8787.64C4039.06,-8781.04 4131.62,-8769.78 4211,-8765.64 4354.8,-8758.13 4398.24,-8720.55 4535,-8765.64 4568.26,-8776.6 4599.68,-8801.98 4620.26,-8821.43"/>
<polygon fill="blue" stroke="blue" points="4617.98,-8824.1 4627.6,-8828.56 4622.86,-8819.08 4617.98,-8824.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge643" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.17,-8904.93C4024.91,-8910.96 4120.49,-8916.83 4183,-8873.64 4205.24,-8858.27 4189.18,-8835.59 4211,-8819.64 4231.89,-8804.36 4258.49,-8796.64 4283.83,-8793"/>
<polygon fill="blue" stroke="blue" points="4284.34,-8796.46 4293.83,-8791.76 4283.48,-8789.52 4284.34,-8796.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge641" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.24,-8897.8C4021.98,-8893.12 4109.26,-8883.34 4183,-8873.64 4214.51,-8869.49 4248.99,-8864.56 4279.55,-8860.06"/>
<polygon fill="blue" stroke="blue" points="4280.37,-8863.48 4289.75,-8858.55 4279.35,-8856.55 4280.37,-8863.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge642" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.09,-8900.1C4077.39,-8897.99 4425.39,-8889.54 4535,-8873.64 4548.28,-8871.71 4562.3,-8868.88 4575.7,-8865.77"/>
<polygon fill="blue" stroke="blue" points="4576.91,-8869.08 4585.82,-8863.34 4575.28,-8862.27 4576.91,-8869.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge691" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4396.05,-8917.02C4428.85,-8912.15 4486.75,-8902.45 4535,-8888.64 4554.33,-8883.1 4575.04,-8875.59 4593.19,-8868.44"/>
<polygon fill="blue" stroke="blue" points="4594.72,-8871.6 4602.71,-8864.64 4592.12,-8865.1 4594.72,-8871.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge793" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4448.29,-8846.64C4488.44,-8846.64 4536.9,-8846.64 4575.61,-8846.64"/>
<polygon fill="blue" stroke="blue" points="4575.75,-8850.14 4585.75,-8846.64 4575.75,-8843.14 4575.75,-8850.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge837" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4705.11,-8859.08C4772.7,-8869.65 4882.5,-8874.61 4945,-8812.64 5023.27,-8735.02 5069.13,-7911.51 5077.58,-7746.37"/>
<polygon fill="blue" stroke="blue" points="5081.09,-7746.21 5078.1,-7736.05 5074.1,-7745.86 5081.09,-7746.21"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node262"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2143.5,-5439.64 2068.5,-5439.64 2068.5,-5403.64 2143.5,-5403.64 2143.5,-5439.64"/>
<text text-anchor="middle" x="2106" y="-5417.94" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node265"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2635,-5439.64 2492,-5439.64 2492,-5403.64 2635,-5403.64 2635,-5439.64"/>
<text text-anchor="middle" x="2563.5" y="-5417.94" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2143.51,-5421.64C2216.47,-5421.64 2381.86,-5421.64 2481.64,-5421.64"/>
<polygon fill="blue" stroke="blue" points="2481.68,-5425.14 2491.68,-5421.64 2481.68,-5418.14 2481.68,-5425.14"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node263"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3044,-5493.64 2918,-5493.64 2918,-5457.64 3044,-5457.64 3044,-5493.64"/>
<text text-anchor="middle" x="2981" y="-5471.94" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3044.15,-5482.72C3106.84,-5487.04 3204.72,-5485.89 3279,-5448.64 3378.54,-5398.71 3453.98,-5282.9 3484.36,-5230.38"/>
<polygon fill="blue" stroke="blue" points="3487.43,-5232.06 3489.34,-5221.64 3481.35,-5228.6 3487.43,-5232.06"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node264"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3045,-5439.64 2917,-5439.64 2917,-5403.64 3045,-5403.64 3045,-5439.64"/>
<text text-anchor="middle" x="2981" y="-5417.94" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge537" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.29,-5436.18C3113.21,-5447.65 3219.34,-5452.9 3279,-5391.64 3320.82,-5348.69 3260.81,-5168.84 3299,-5122.64 3338.85,-5074.41 3416.89,-5066.79 3462.82,-5066.86"/>
<polygon fill="blue" stroke="blue" points="3462.88,-5070.36 3472.93,-5067 3462.98,-5063.36 3462.88,-5070.36"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge536" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.26,-5425.93C3107.31,-5427.74 3203.35,-5423.97 3279,-5391.64 3364.97,-5354.89 3442.21,-5272.22 3477.98,-5229.82"/>
<polygon fill="blue" stroke="blue" points="3480.86,-5231.82 3484.57,-5221.9 3475.48,-5227.34 3480.86,-5231.82"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge544" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2635.01,-5439.32C2650.73,-5442.81 2667.37,-5446.16 2683,-5448.64 2759.25,-5460.73 2847.45,-5467.9 2907.8,-5471.77"/>
<polygon fill="blue" stroke="blue" points="2907.79,-5475.28 2917.98,-5472.41 2908.22,-5468.29 2907.79,-5475.28"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge540" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2635.45,-5421.64C2711.1,-5421.64 2830.29,-5421.64 2906.79,-5421.64"/>
<polygon fill="blue" stroke="blue" points="2906.82,-5425.14 2916.82,-5421.64 2906.82,-5418.14 2906.82,-5425.14"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge541" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2564.66,-5403.43C2565.97,-5304.05 2577.7,-4828.22 2683,-4739.64 2733.68,-4697.01 3230.65,-4694.38 3279,-4739.64 3328.1,-4785.6 3253.09,-4992.49 3299,-5041.64 3340.49,-5086.05 3417.6,-5082.67 3462.99,-5075.87"/>
<polygon fill="blue" stroke="blue" points="3463.68,-5079.31 3472.99,-5074.24 3462.56,-5072.4 3463.68,-5079.31"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge542" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2564.49,-5403.47C2564.83,-5301.03 2572.2,-4796.67 2683,-4702.64 2733.49,-4659.79 3220.61,-4671.39 3279,-4702.64 3293.13,-4710.2 3289.92,-4719.43 3299,-4732.64 3364.29,-4827.58 3444.13,-4938.71 3479.98,-4988.36"/>
<polygon fill="blue" stroke="blue" points="3477.25,-4990.56 3485.95,-4996.62 3482.93,-4986.46 3477.25,-4990.56"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge543" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2583.09,-5439.74C2604.93,-5459.62 2643.24,-5490.34 2683,-5502.64 2746.27,-5522.19 3219.91,-5532.52 3279,-5502.64 3394.22,-5444.36 3463.84,-5294.17 3488.66,-5231.62"/>
<polygon fill="blue" stroke="blue" points="3492.04,-5232.61 3492.39,-5222.02 3485.51,-5230.08 3492.04,-5232.61"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;fn from_parts_without_soft_limit( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;validate_prefix(nickname)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let discriminator = valida...">
<polygon fill="white" stroke="black" points="4061.5,-5221.64 3842.5,-5221.64 3842.5,-5185.64 4061.5,-5185.64 4061.5,-5221.64"/>
<text text-anchor="middle" x="3952" y="-5199.94" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts_without_soft_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node274"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4424,-5261.64 4314,-5261.64 4314,-5225.64 4424,-5225.64 4424,-5261.64"/>
<text text-anchor="middle" x="4369" y="-5239.94" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4061.77,-5214.12C4138.7,-5221.53 4239.25,-5231.23 4303.74,-5237.44"/>
<polygon fill="blue" stroke="blue" points="4303.49,-5240.93 4313.78,-5238.41 4304.16,-5233.97 4303.49,-5240.93"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="3047.5,-5356.64 2914.5,-5356.64 2914.5,-5320.64 3047.5,-5320.64 3047.5,-5356.64"/>
<text text-anchor="middle" x="2981" y="-5334.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3047.54,-5339.47C3108.55,-5338.67 3201.48,-5333.38 3279,-5311.64 3348.27,-5292.2 3422.02,-5251.32 3464.1,-5225.81"/>
<polygon fill="blue" stroke="blue" points="3466.14,-5228.66 3472.84,-5220.45 3462.48,-5222.69 3466.14,-5228.66"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.31,-5074.51C3570.91,-5082.52 3657.64,-5090.76 3701,-5041.64 3738.61,-4999.03 3683.94,-3038.72 3721,-2995.64 3958.03,-2720.07 4277.28,-2660.32 4535,-2916.64 4558.9,-2940.41 4559.78,-7736.97 4561.5,-7770.64 4578.19,-8097.92 4627.06,-8493.08 4640.84,-8600.53"/>
<polygon fill="blue" stroke="blue" points="4637.39,-8601.1 4642.14,-8610.57 4644.33,-8600.2 4637.39,-8601.1"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3546.21,-5155.06C3612.44,-5163.01 3738.16,-5178.09 3831.99,-5189.35"/>
<polygon fill="blue" stroke="blue" points="3831.77,-5192.85 3842.12,-5190.57 3832.61,-5185.9 3831.77,-5192.85"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().</title>
<g id="a_node270"><a xlink:title=" &#160;&#160;&#160;fn nicknames_exceeding_soft_limits() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39; 42&#39; , NicknameLimits::default()).expect(&#39; valid&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39;...">
<polygon fill="white" stroke="black" points="3104,-5140.64 2858,-5140.64 2858,-5104.64 3104,-5104.64 3104,-5140.64"/>
<text text-anchor="middle" x="2981" y="-5118.94" font-family="Helvetica,sans-Serif" font-size="14.00">nicknames_exceeding_soft_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3104.19,-5129.02C3211.63,-5134.63 3363.07,-5142.54 3443.59,-5146.74"/>
<polygon fill="blue" stroke="blue" points="3443.82,-5150.26 3453.99,-5147.28 3444.19,-5143.27 3443.82,-5150.26"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<g id="a_node271"><a xlink:title="fn username_sha_scalar(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;let mut hash = Sha512::new(); &#160;&#160;&#160;&#160;hash.update(nickname.as_bytes()); &#160;&#160;&#160;&#160;hash.update([0x00]); &#160;&#160;&#160;&#160;hash....">
<polygon fill="white" stroke="black" points="4728,-5335.64 4563,-5335.64 4563,-5299.64 4728,-5299.64 4728,-5335.64"/>
<text text-anchor="middle" x="4645.5" y="-5313.94" font-family="Helvetica,sans-Serif" font-size="14.00">username_sha_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M4648.08,-5335.84C4665.67,-5539.23 4825.25,-7383.38 4847.04,-7635.2"/>
<polygon fill="blue" stroke="blue" points="4843.57,-7635.7 4847.92,-7645.36 4850.54,-7635.1 4843.57,-7635.7"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(&amp;nickname, discriminator).u...">
<polygon fill="white" stroke="black" points="4517.5,-5335.64 4220.5,-5335.64 4220.5,-5299.64 4517.5,-5299.64 4517.5,-5335.64"/>
<text text-anchor="middle" x="4369" y="-5313.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4517.7,-5317.64C4529.55,-5317.64 4541.3,-5317.64 4552.59,-5317.64"/>
<polygon fill="blue" stroke="blue" points="4552.81,-5321.14 4562.81,-5317.64 4552.81,-5314.14 4552.81,-5321.14"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3520.03,-4996.39C3562.18,-4954.53 3662.72,-4846.41 3701,-4732.64 3712.01,-4699.92 3696.94,-4136.39 3721,-4111.64 3792.69,-4037.88 4110.08,-4156.17 4183,-4083.64 4250.1,-4016.88 4141.91,-3723.32 4211,-3658.64 4296.16,-3578.9 4653.31,-3576.33 4736,-3658.64 4756.84,-3679.38 4754.07,-7863.3 4756,-7892.64 4774.21,-8170.14 4828.21,-8503.07 4844.68,-8600.55"/>
<polygon fill="blue" stroke="blue" points="4841.24,-8601.23 4846.37,-8610.51 4848.15,-8600.06 4841.24,-8601.23"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge526" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4424.23,-5258.26C4465.21,-5269.3 4522,-5284.61 4567.65,-5296.92"/>
<polygon fill="blue" stroke="blue" points="4566.94,-5300.35 4577.51,-5299.58 4568.77,-5293.59 4566.94,-5300.35"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge533" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.14,-5203.64C3585.23,-5203.64 3728.12,-5203.64 3831.97,-5203.64"/>
<polygon fill="blue" stroke="blue" points="3832.21,-5207.14 3842.21,-5203.64 3832.21,-5200.14 3832.21,-5207.14"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node276"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3126.5,-5032.64 2835.5,-5032.64 2835.5,-4996.64 3126.5,-4996.64 3126.5,-5032.64"/>
<text text-anchor="middle" x="2981" y="-5010.94" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge578" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3126.73,-5026.87C3175.17,-5031.21 3229.45,-5036.34 3279,-5041.64 3343.87,-5048.56 3419.29,-5058.15 3462.85,-5063.85"/>
<polygon fill="blue" stroke="blue" points="3462.58,-5067.34 3472.95,-5065.17 3463.49,-5060.4 3462.58,-5067.34"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge577" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3126.7,-5014.64C3230.55,-5014.64 3365.02,-5014.64 3440.65,-5014.64"/>
<polygon fill="blue" stroke="blue" points="3440.92,-5018.14 3450.92,-5014.64 3440.92,-5011.14 3440.92,-5018.14"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge576" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.27,-4996.63C3134.58,-4988.22 3223.87,-4989.53 3279,-5041.64 3323.08,-5083.3 3255.84,-5134.02 3299,-5176.64 3342.03,-5219.11 3417.92,-5216.59 3462.82,-5210.44"/>
<polygon fill="blue" stroke="blue" points="3463.35,-5213.9 3472.72,-5208.95 3462.31,-5206.97 3463.35,-5213.9"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node277"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="3108,-5086.64 2854,-5086.64 2854,-5050.64 3108,-5050.64 3108,-5086.64"/>
<text text-anchor="middle" x="2981" y="-5064.94" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge589" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3108.14,-5068.64C3224.43,-5068.64 3389.66,-5068.64 3462.31,-5068.64"/>
<polygon fill="blue" stroke="blue" points="3462.75,-5072.14 3472.75,-5068.64 3462.75,-5065.14 3462.75,-5072.14"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge588" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3108.18,-5058.05C3161,-5053.39 3223.01,-5047.61 3279,-5041.64 3334.02,-5035.76 3396.65,-5027.97 3440.97,-5022.26"/>
<polygon fill="blue" stroke="blue" points="3441.51,-5025.72 3450.98,-5020.97 3440.62,-5018.78 3441.51,-5025.72"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge590" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3081.39,-5050.63C3145.1,-5045 3225.59,-5049.75 3279,-5095.64 3307.13,-5119.8 3271.4,-5151.87 3299,-5176.64 3343.78,-5216.83 3418.48,-5215.24 3462.81,-5209.85"/>
<polygon fill="blue" stroke="blue" points="3463.41,-5213.3 3472.86,-5208.5 3462.48,-5206.36 3463.41,-5213.3"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;fn no_discriminator() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::new(&#39; no_discriminator&#39; ).expect_err(&#39; not a valid username&#39; ), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UsernameError::MissingSeparator &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3047,-5302.64 2915,-5302.64 2915,-5266.64 3047,-5266.64 3047,-5302.64"/>
<text text-anchor="middle" x="2981" y="-5280.94" font-family="Helvetica,sans-Serif" font-size="14.00">no_discriminator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge745" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3047.25,-5281.52C3107.67,-5277.98 3199.85,-5270.87 3279,-5257.64 3344.72,-5246.65 3419.8,-5226.55 3463.08,-5214.22"/>
<polygon fill="blue" stroke="blue" points="3464.21,-5217.53 3472.85,-5211.41 3462.27,-5210.81 3464.21,-5217.53"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;fn invalid_nicknames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (nickname, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::NicknameCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; ab🦀d&#39; , UsernameError::BadNicknameCharacter), &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3053,-5248.64 2909,-5248.64 2909,-5212.64 3053,-5212.64 3053,-5248.64"/>
<text text-anchor="middle" x="2981" y="-5226.94" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_nicknames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge749" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3053.08,-5239.82C3116.43,-5244.53 3209.6,-5242.63 3279,-5203.64 3292.02,-5196.32 3286.14,-5184.23 3299,-5176.64 3342.75,-5150.78 3401.13,-5145.56 3443.51,-5145.88"/>
<polygon fill="blue" stroke="blue" points="3443.59,-5149.39 3453.65,-5146.07 3443.72,-5142.39 3443.59,-5149.39"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge748" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3053.07,-5226.92C3164.82,-5221.09 3377.61,-5209.97 3462.6,-5205.54"/>
<polygon fill="blue" stroke="blue" points="3462.99,-5209.02 3472.79,-5205 3462.62,-5202.03 3462.99,-5209.02"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().</title>
<g id="a_node280"><a xlink:title=" &#160;&#160;&#160;fn invalid_discriminators() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (discriminator, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::DiscriminatorCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; 0&#39; , UsernameError::DiscriminatorCannot...">
<polygon fill="white" stroke="black" points="3065,-5194.64 2897,-5194.64 2897,-5158.64 3065,-5158.64 3065,-5194.64"/>
<text text-anchor="middle" x="2981" y="-5172.94" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_discriminators</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge772" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3065.06,-5172.3C3171.43,-5166.74 3352.83,-5157.27 3443.69,-5152.52"/>
<polygon fill="blue" stroke="blue" points="3443.98,-5156.01 3453.79,-5152 3443.62,-5149.02 3443.98,-5156.01"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge773" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3065.06,-5180.97C3179.5,-5186.95 3380.8,-5197.46 3462.75,-5201.74"/>
<polygon fill="blue" stroke="blue" points="3462.65,-5205.24 3472.82,-5202.27 3463.02,-5198.25 3462.65,-5205.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node281"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="4010.5,-6471.64 3893.5,-6471.64 3893.5,-6435.64 4010.5,-6435.64 4010.5,-6471.64"/>
<text text-anchor="middle" x="3952" y="-6449.94" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node291"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="4408.5,-8179.64 4329.5,-8179.64 4329.5,-8143.64 4408.5,-8143.64 4408.5,-8179.64"/>
<text text-anchor="middle" x="4369" y="-8157.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3974.95,-6471.67C4023.58,-6513.2 4139.48,-6621.29 4183,-6741.64 4209.32,-6814.43 4160.53,-8075.95 4211,-8134.64 4237.02,-8164.88 4283.57,-8169.62 4319.25,-8167.98"/>
<polygon fill="blue" stroke="blue" points="4319.71,-8171.46 4329.47,-8167.33 4319.26,-8164.48 4319.71,-8171.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node294"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="4414.5,-8125.64 4323.5,-8125.64 4323.5,-8089.64 4414.5,-8089.64 4414.5,-8125.64"/>
<text text-anchor="middle" x="4369" y="-8103.94" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3974.95,-6471.68C4023.56,-6513.21 4139.43,-6621.3 4183,-6741.64 4208.33,-6811.6 4162.46,-8024.24 4211,-8080.64 4235.63,-8109.25 4278.64,-8115.03 4313.42,-8114.18"/>
<polygon fill="blue" stroke="blue" points="4313.62,-8117.68 4323.46,-8113.75 4313.32,-8110.68 4313.62,-8117.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node297"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4414.5,-8071.64 4323.5,-8071.64 4323.5,-8035.64 4414.5,-8035.64 4414.5,-8071.64"/>
<text text-anchor="middle" x="4369" y="-8049.94" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3974.94,-6471.68C4023.53,-6513.22 4139.38,-6621.32 4183,-6741.64 4207.34,-6808.76 4164.39,-7972.54 4211,-8026.64 4235.64,-8055.24 4278.65,-8061.02 4313.43,-8060.17"/>
<polygon fill="blue" stroke="blue" points="4313.62,-8063.67 4323.47,-8059.75 4313.33,-8056.68 4313.62,-8063.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node282"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3537.5,-6419.64 3462.5,-6419.64 3462.5,-6383.64 3537.5,-6383.64 3537.5,-6419.64"/>
<text text-anchor="middle" x="3500" y="-6397.94" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3537.83,-6405.89C3613.37,-6414.62 3786.85,-6434.67 3883.27,-6445.81"/>
<polygon fill="blue" stroke="blue" points="3883.15,-6449.32 3893.49,-6446.99 3883.96,-6442.36 3883.15,-6449.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node283"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="4024,-6417.64 3880,-6417.64 3880,-6381.64 4024,-6381.64 4024,-6417.64"/>
<text text-anchor="middle" x="3952" y="-6395.94" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3537.83,-6401.47C3609.9,-6401.15 3771.11,-6400.43 3869.5,-6400"/>
<polygon fill="blue" stroke="blue" points="3869.72,-6403.5 3879.71,-6399.95 3869.69,-6396.5 3869.72,-6403.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node284"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="4041,-3043.64 3863,-3043.64 3863,-3007.64 4041,-3007.64 4041,-3043.64"/>
<text text-anchor="middle" x="3952" y="-3021.94" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3513.83,-6383.57C3551.71,-6328.97 3662.82,-6159.62 3701,-5999.64 3710.42,-5960.17 3695.63,-3110.29 3721,-3078.64 3752.1,-3039.83 3805.41,-3025.9 3852.87,-3021.99"/>
<polygon fill="blue" stroke="blue" points="3853.17,-3025.48 3862.9,-3021.3 3852.69,-3018.5 3853.17,-3025.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge787" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M3977.97,-6381.36C4028.24,-6342.84 4140.47,-6247.66 4183,-6136.64 4204.23,-6081.22 4168.77,-4042.32 4211,-4000.64 4262.24,-3950.06 4483.61,-3950.21 4535,-4000.64 4562.59,-4027.7 4560.43,-5353 4561.5,-5391.64 4587.1,-6312.79 4635.04,-7443.44 4643.28,-7635.34"/>
<polygon fill="blue" stroke="blue" points="4639.79,-7635.6 4643.71,-7645.44 4646.78,-7635.3 4639.79,-7635.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge790" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4024.25,-6385.96C4076.25,-6380.52 4144.17,-6383.69 4183,-6426.64 4246.65,-6497.03 4149.25,-8062.57 4211,-8134.64 4236.96,-8164.93 4283.52,-8169.66 4319.21,-8168.01"/>
<polygon fill="blue" stroke="blue" points="4319.68,-8171.49 4329.44,-8167.35 4319.23,-8164.5 4319.68,-8171.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node292"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="4396,-8233.64 4342,-8233.64 4342,-8197.64 4396,-8197.64 4396,-8233.64"/>
<text text-anchor="middle" x="4369" y="-8211.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge788" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4024.26,-6385.95C4076.26,-6380.51 4144.18,-6383.68 4183,-6426.64 4248.65,-6499.27 4147.32,-8114.28 4211,-8188.64 4240.06,-8222.57 4294.97,-8224.43 4331.53,-8221.18"/>
<polygon fill="blue" stroke="blue" points="4332.2,-8224.63 4341.77,-8220.09 4331.46,-8217.67 4332.2,-8224.63"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge792" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4024.25,-6385.97C4076.24,-6380.53 4144.16,-6383.7 4183,-6426.64 4244.66,-6494.78 4151.19,-8010.86 4211,-8080.64 4235.58,-8109.3 4278.59,-8115.07 4313.39,-8114.21"/>
<polygon fill="blue" stroke="blue" points="4313.59,-8117.71 4323.43,-8113.78 4313.29,-8110.71 4313.59,-8117.71"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node296"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="4402,-8287.64 4336,-8287.64 4336,-8251.64 4402,-8251.64 4402,-8287.64"/>
<text text-anchor="middle" x="4369" y="-8265.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge785" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4024.26,-6385.95C4076.27,-6380.5 4144.19,-6383.67 4183,-6426.64 4250.64,-6501.51 4145.39,-8165.98 4211,-8242.64 4238.5,-8274.76 4289.16,-8278.14 4325.5,-8275.66"/>
<polygon fill="blue" stroke="blue" points="4326.15,-8279.11 4335.81,-8274.77 4325.55,-8272.14 4326.15,-8279.11"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge791" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4024.24,-6385.97C4076.23,-6380.54 4144.15,-6383.71 4183,-6426.64 4242.66,-6492.54 4153.12,-7959.16 4211,-8026.64 4235.58,-8055.29 4278.6,-8061.06 4313.39,-8060.21"/>
<polygon fill="blue" stroke="blue" points="4313.59,-8063.7 4323.43,-8059.78 4313.29,-8056.71 4313.59,-8063.7"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node298"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4449,-8017.64 4289,-8017.64 4289,-7981.64 4449,-7981.64 4449,-8017.64"/>
<text text-anchor="middle" x="4369" y="-7995.94" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge789" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4024.18,-6386.03C4076.14,-6380.62 4144.04,-6383.81 4183,-6426.64 4229.63,-6477.89 4194.82,-7606.25 4211,-7673.64 4239.56,-7792.58 4315.52,-7919.2 4350.24,-7973"/>
<polygon fill="blue" stroke="blue" points="4347.44,-7975.12 4355.83,-7981.59 4353.3,-7971.3 4347.44,-7975.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node313" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node313"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="4894,-7857.64 4807,-7857.64 4807,-7821.64 4894,-7821.64 4894,-7857.64"/>
<text text-anchor="middle" x="4850.5" y="-7835.94" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge786" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3977.99,-6381.37C4028.29,-6342.86 4140.57,-6247.69 4183,-6136.64 4207.57,-6072.33 4162.05,-3707.04 4211,-3658.64 4252.48,-3617.62 4694.65,-3617.49 4736,-3658.64 4776.48,-3698.92 4730.14,-7719.71 4756,-7770.64 4765.81,-7789.96 4783.85,-7805.21 4801.49,-7816.41"/>
<polygon fill="blue" stroke="blue" points="4799.71,-7819.42 4810.08,-7821.59 4803.32,-7813.43 4799.71,-7819.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a1 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a2 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_scalars(a1, a2) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4418.5,-3097.64 4319.5,-3097.64 4319.5,-3061.64 4418.5,-3061.64 4418.5,-3097.64"/>
<text text-anchor="middle" x="4369" y="-3075.94" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge646" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4041.01,-3037.09C4121.86,-3047.61 4239.41,-3062.9 4309.35,-3072"/>
<polygon fill="blue" stroke="blue" points="4308.94,-3075.48 4319.31,-3073.3 4309.84,-3068.54 4308.94,-3075.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="4413,-3043.64 4325,-3043.64 4325,-3007.64 4413,-3007.64 4413,-3043.64"/>
<text text-anchor="middle" x="4369" y="-3021.94" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge647" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4041.01,-3025.64C4123.95,-3025.64 4245.54,-3025.64 4314.69,-3025.64"/>
<polygon fill="blue" stroke="blue" points="4314.91,-3029.14 4324.91,-3025.64 4314.91,-3022.14 4314.91,-3029.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4418.59,-3069.31C4498.67,-3055.48 4657.33,-3042.15 4736,-3132.64 4778.26,-3181.25 4726.84,-7713.19 4756,-7770.64 4765.81,-7789.96 4783.85,-7805.22 4801.49,-7816.42"/>
<polygon fill="blue" stroke="blue" points="4799.7,-7819.43 4810.07,-7821.59 4803.31,-7813.43 4799.7,-7819.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4413.09,-3018.99C4451.37,-3015.81 4505.67,-3018.51 4535,-3052.64 4556.18,-3077.27 4560.72,-5359.16 4561.5,-5391.64 4583.54,-6312.89 4634.41,-7443.46 4643.2,-7635.34"/>
<polygon fill="blue" stroke="blue" points="4639.71,-7635.62 4643.66,-7645.45 4646.7,-7635.3 4639.71,-7635.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().</title>
<g id="a_node287"><a xlink:title=" &#160;&#160;&#160;fn round_trip_key_pair() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = CredentialKeyPair::generate([0x42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deserialized: Cr...">
<polygon fill="white" stroke="black" points="4721.5,-3425.64 4569.5,-3425.64 4569.5,-3389.64 4721.5,-3389.64 4721.5,-3425.64"/>
<text text-anchor="middle" x="4645.5" y="-3403.94" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<g id="a_node289"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CredentialPrivateKey::generate(randomness).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4890,-3425.64 4811,-3425.64 4811,-3389.64 4890,-3389.64 4890,-3425.64"/>
<text text-anchor="middle" x="4850.5" y="-3403.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4721.51,-3407.64C4747.98,-3407.64 4777.03,-3407.64 4800.75,-3407.64"/>
<polygon fill="blue" stroke="blue" points="4800.91,-3411.14 4810.91,-3407.64 4800.91,-3404.14 4800.91,-3411.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node288"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="4706,-3479.64 4585,-3479.64 4585,-3443.64 4706,-3443.64 4706,-3479.64"/>
<text text-anchor="middle" x="4645.5" y="-3457.94" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.64,-3479.73C4712.02,-3487.92 4727.2,-3499.28 4736,-3514.64 4765.39,-3565.92 4729.24,-7717.93 4756,-7770.64 4765.81,-7789.96 4783.85,-7805.21 4801.49,-7816.41"/>
<polygon fill="blue" stroke="blue" points="4799.7,-7819.42 4810.08,-7821.59 4803.32,-7813.43 4799.7,-7819.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<g id="a_node290"><a xlink:title=" &#160;&#160;&#160;fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ShoHmacSha256::new(b&#39; Signal_ZKCredential_CredentialPrivateKey_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_an...">
<polygon fill="white" stroke="black" points="5119.5,-3452.64 5040.5,-3452.64 5040.5,-3416.64 5119.5,-3416.64 5119.5,-3452.64"/>
<text text-anchor="middle" x="5080" y="-3430.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4890.09,-3412.22C4928.74,-3416.8 4988.34,-3423.88 5030.24,-3428.85"/>
<polygon fill="blue" stroke="blue" points="5029.88,-3432.33 5040.22,-3430.03 5030.7,-3425.38 5029.88,-3432.33"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge839" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5078.89,-3453.03C5077.14,-3750.75 5052.55,-7565.53 4945,-7770.64 4934.94,-7789.83 4916.85,-7805.06 4899.26,-7816.28"/>
<polygon fill="blue" stroke="blue" points="4897.43,-7813.29 4890.69,-7821.47 4901.06,-7819.28 4897.43,-7813.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4408.54,-8161.97C4481.44,-8160.54 4640.73,-8147.3 4736,-8063.64 4797.36,-8009.74 4829.7,-7914.78 4842.63,-7867.71"/>
<polygon fill="blue" stroke="blue" points="4846.05,-7868.45 4845.23,-7857.89 4839.28,-7866.66 4846.05,-7868.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4396.18,-8212.02C4432.09,-8208.62 4496.55,-8208.34 4535,-8242.64 4589.6,-8291.33 4628.33,-8520.02 4640.46,-8600.52"/>
<polygon fill="blue" stroke="blue" points="4637,-8601.06 4641.94,-8610.44 4643.93,-8600.03 4637,-8601.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node293"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="4002.5,-8179.64 3901.5,-8179.64 3901.5,-8143.64 4002.5,-8143.64 4002.5,-8179.64"/>
<text text-anchor="middle" x="3952" y="-8157.94" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4002.65,-8161.64C4082.74,-8161.64 4239.52,-8161.64 4319.12,-8161.64"/>
<polygon fill="blue" stroke="blue" points="4319.36,-8165.14 4329.36,-8161.64 4319.36,-8158.14 4319.36,-8165.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4002.85,-8167.08C4049.47,-8172.27 4121.02,-8180.48 4183,-8188.64 4234.7,-8195.44 4294.36,-8204.34 4331.64,-8210.02"/>
<polygon fill="blue" stroke="blue" points="4331.58,-8213.55 4341.99,-8211.6 4332.63,-8206.63 4331.58,-8213.55"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4002.85,-8156.19C4049.47,-8151 4121.02,-8142.79 4183,-8134.64 4226.83,-8128.87 4276.38,-8121.59 4313.17,-8116.05"/>
<polygon fill="blue" stroke="blue" points="4313.82,-8119.49 4323.19,-8114.53 4312.78,-8112.57 4313.82,-8119.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4002.51,-8154.83C4052.51,-8150.65 4129.75,-8151.84 4183,-8188.64 4205.24,-8204 4189.18,-8226.68 4211,-8242.64 4244.18,-8266.9 4291.75,-8272.09 4325.82,-8272.18"/>
<polygon fill="blue" stroke="blue" points="4325.97,-8275.67 4335.93,-8272.05 4325.89,-8268.67 4325.97,-8275.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4002.51,-8168.44C4052.51,-8172.62 4129.75,-8171.43 4183,-8134.64 4205.24,-8119.27 4189.18,-8096.59 4211,-8080.64 4240.21,-8059.28 4280.57,-8052.7 4313.06,-8051.37"/>
<polygon fill="blue" stroke="blue" points="4313.4,-8054.86 4323.3,-8051.11 4313.22,-8047.86 4313.4,-8054.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4002.92,-8170.64C4054.35,-8176.87 4133.75,-8177.57 4183,-8134.64 4220.38,-8102.05 4174.51,-8060.21 4211,-8026.64 4229.34,-8009.77 4254.21,-8001.43 4278.75,-7997.7"/>
<polygon fill="blue" stroke="blue" points="4279.38,-8001.15 4288.86,-7996.41 4278.49,-7994.21 4279.38,-8001.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4002.95,-8171.58C4055.16,-8178.8 4135.92,-8180.51 4183,-8134.64 4245.7,-8073.53 4149.48,-8001.94 4211,-7939.64 4221.37,-7929.14 4646.05,-7868.34 4796.96,-7847.02"/>
<polygon fill="blue" stroke="blue" points="4797.51,-7850.48 4806.92,-7845.61 4796.53,-7843.55 4797.51,-7850.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4414.87,-8114.05C4452.71,-8116.67 4505.31,-8113.27 4535,-8080.64 4593.46,-8016.38 4508.1,-7759.15 4561.5,-7690.64 4572.3,-7676.78 4590.34,-7669.94 4606.85,-7666.59"/>
<polygon fill="blue" stroke="blue" points="4607.56,-7670.02 4616.85,-7664.94 4606.41,-7663.12 4607.56,-7670.02"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4414.56,-8107.15C4488.76,-8104.15 4639.01,-8088.49 4736,-8013.64 4786.85,-7974.39 4821.88,-7905.54 4838.49,-7867.27"/>
<polygon fill="blue" stroke="blue" points="4841.83,-7868.36 4842.5,-7857.79 4835.38,-7865.63 4841.83,-7868.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node295"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="4050,-8125.64 3854,-8125.64 3854,-8089.64 4050,-8089.64 4050,-8125.64"/>
<text text-anchor="middle" x="3952" y="-8103.94" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge521" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4050.16,-8118.43C4091.18,-8123.15 4139.45,-8128.9 4183,-8134.64 4229.33,-8140.73 4282.06,-8148.51 4319.34,-8154.15"/>
<polygon fill="blue" stroke="blue" points="4319.01,-8157.64 4329.42,-8155.68 4320.06,-8150.72 4319.01,-8157.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge522" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4050.27,-8099.25C4094.25,-8100.16 4144.8,-8108.24 4183,-8134.64 4205.24,-8150 4189.18,-8172.68 4211,-8188.64 4246.2,-8214.38 4297.61,-8218.65 4331.9,-8218.14"/>
<polygon fill="blue" stroke="blue" points="4332.06,-8221.63 4341.95,-8217.84 4331.85,-8214.64 4332.06,-8221.63"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge518" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4050.04,-8107.64C4131.89,-8107.64 4246.12,-8107.64 4313.05,-8107.64"/>
<polygon fill="blue" stroke="blue" points="4313.37,-8111.14 4323.37,-8107.64 4313.37,-8104.14 4313.37,-8111.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge520" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4050.27,-8095.54C4095.58,-8095.29 4147.24,-8103.46 4183,-8134.64 4220.38,-8167.22 4174.51,-8209.06 4211,-8242.64 4241.62,-8270.8 4290.47,-8275.19 4325.55,-8274.02"/>
<polygon fill="blue" stroke="blue" points="4326.15,-8277.49 4335.96,-8273.5 4325.8,-8270.5 4326.15,-8277.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge517" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4050.16,-8096.84C4091.18,-8092.12 4139.45,-8086.37 4183,-8080.64 4226.83,-8074.87 4276.38,-8067.59 4313.17,-8062.05"/>
<polygon fill="blue" stroke="blue" points="4313.82,-8065.49 4323.19,-8060.53 4312.78,-8058.57 4313.82,-8065.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge519" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4050.27,-8116.02C4094.25,-8115.11 4144.8,-8107.03 4183,-8080.64 4205.24,-8065.27 4189.18,-8042.59 4211,-8026.64 4230.44,-8012.42 4254.81,-8004.75 4278.52,-8000.82"/>
<polygon fill="blue" stroke="blue" points="4279.23,-8004.26 4288.62,-7999.36 4278.22,-7997.33 4279.23,-8004.26"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge516" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4050.2,-8121.21C4096.19,-8122.01 4148.46,-8113.88 4183,-8080.64 4241.02,-8024.8 4152.42,-7956.89 4211,-7901.64 4294.6,-7822.78 4658.36,-7830.77 4796.24,-7836.83"/>
<polygon fill="blue" stroke="blue" points="4796.4,-7840.34 4806.55,-7837.3 4796.72,-7833.35 4796.4,-7840.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge545" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4402.14,-8268.57C4471.56,-8268 4637.18,-8276.22 4736,-8360.64 4810.56,-8424.32 4837.3,-8545.46 4845.88,-8600.35"/>
<polygon fill="blue" stroke="blue" points="4842.44,-8601.02 4847.36,-8610.4 4849.36,-8600 4842.44,-8601.02"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge575" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4414.72,-8052.42C4487.52,-8048.52 4633.77,-8032.51 4736,-7967.64 4777.59,-7941.24 4812.93,-7895.33 4832.66,-7866.26"/>
<polygon fill="blue" stroke="blue" points="4835.65,-7868.09 4838.27,-7857.82 4829.82,-7864.21 4835.65,-7868.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge580" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4382.05,-7981.62C4409.92,-7939.74 4480.62,-7832.32 4535,-7739.64 4547.53,-7718.28 4542.48,-7706.49 4561.5,-7690.64 4574.39,-7679.89 4591.66,-7673.39 4607.11,-7669.47"/>
<polygon fill="blue" stroke="blue" points="4607.95,-7672.87 4616.93,-7667.25 4606.41,-7666.04 4607.95,-7672.87"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node299"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="3996,-8071.64 3908,-8071.64 3908,-8035.64 3996,-8035.64 3996,-8071.64"/>
<text text-anchor="middle" x="3952" y="-8049.94" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge605" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3996.15,-8047.4C4045.74,-8042.61 4127.43,-8042.24 4183,-8080.64 4205.24,-8096 4189.18,-8118.68 4211,-8134.64 4242.16,-8157.42 4286,-8163.38 4319.44,-8164.1"/>
<polygon fill="blue" stroke="blue" points="4319.44,-8167.6 4329.46,-8164.17 4319.49,-8160.6 4319.44,-8167.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge609" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3996.44,-8045.46C4047.46,-8038.54 4131.63,-8035.85 4183,-8080.64 4220.38,-8113.22 4174.51,-8155.06 4211,-8188.64 4243.37,-8218.42 4296.12,-8221.61 4331.43,-8219.77"/>
<polygon fill="blue" stroke="blue" points="4332.05,-8223.23 4341.79,-8219.05 4331.57,-8216.25 4332.05,-8223.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge610" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3996.28,-8058.35C4042.55,-8063.47 4118.03,-8072.08 4183,-8080.64 4226.83,-8086.4 4276.38,-8093.68 4313.17,-8099.22"/>
<polygon fill="blue" stroke="blue" points="4312.78,-8102.7 4323.19,-8100.74 4313.82,-8095.78 4312.78,-8102.7"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge607" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3996.17,-8044.88C4047.73,-8037.17 4133.23,-8033.5 4183,-8080.64 4236.05,-8130.88 4159.31,-8190.99 4211,-8242.64 4240.65,-8272.26 4290.21,-8276.27 4325.72,-8274.61"/>
<polygon fill="blue" stroke="blue" points="4326.03,-8278.1 4335.79,-8273.98 4325.59,-8271.12 4326.03,-8278.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge608" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3996.24,-8053.64C4072.27,-8053.64 4229.74,-8053.64 4313.24,-8053.64"/>
<polygon fill="blue" stroke="blue" points="4313.29,-8057.14 4323.29,-8053.64 4313.29,-8050.14 4313.29,-8057.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge606" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3996.28,-8048.92C4042.55,-8043.8 4118.03,-8035.19 4183,-8026.64 4214.23,-8022.52 4248.36,-8017.65 4278.71,-8013.18"/>
<polygon fill="blue" stroke="blue" points="4279.46,-8016.61 4288.85,-8011.69 4278.44,-8009.69 4279.46,-8016.61"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge611" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3996.18,-8062.39C4047.75,-8070.12 4133.25,-8073.8 4183,-8026.64 4236.34,-7976.06 4155.7,-7912.06 4211,-7863.64 4378.84,-7716.69 4676.99,-7785.8 4797.15,-7822.2"/>
<polygon fill="blue" stroke="blue" points="4796.27,-7825.59 4806.86,-7825.18 4798.33,-7818.9 4796.27,-7825.59"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node300"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4052,-8017.64 3852,-8017.64 3852,-7981.64 4052,-7981.64 4052,-8017.64"/>
<text text-anchor="middle" x="3952" y="-7995.94" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge733" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4052.14,-7999.64C4121.01,-7999.64 4212.03,-7999.64 4278.66,-7999.64"/>
<polygon fill="blue" stroke="blue" points="4278.72,-8003.14 4288.72,-7999.64 4278.72,-7996.14 4278.72,-8003.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node301"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="4023.5,-8233.64 3880.5,-8233.64 3880.5,-8197.64 4023.5,-8197.64 4023.5,-8233.64"/>
<text text-anchor="middle" x="3952" y="-8211.94" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge807" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4023.53,-8207.87C4069.07,-8202.73 4129.59,-8195.67 4183,-8188.64 4229.33,-8182.54 4282.06,-8174.76 4319.34,-8169.12"/>
<polygon fill="blue" stroke="blue" points="4320.06,-8172.55 4329.42,-8167.59 4319.01,-8165.63 4320.06,-8172.55"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge810" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4023.87,-8215.64C4113.09,-8215.64 4262.97,-8215.64 4331.64,-8215.64"/>
<polygon fill="blue" stroke="blue" points="4331.94,-8219.14 4341.94,-8215.64 4331.94,-8212.14 4331.94,-8219.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge808" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4023.61,-8223.75C4072.48,-8225.69 4136.78,-8220.58 4183,-8188.64 4205.24,-8173.27 4189.18,-8150.59 4211,-8134.64 4240.21,-8113.28 4280.57,-8106.7 4313.06,-8105.37"/>
<polygon fill="blue" stroke="blue" points="4313.4,-8108.86 4323.3,-8105.11 4313.22,-8101.86 4313.4,-8108.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge811" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4023.87,-8224.86C4110.7,-8236.15 4254.98,-8254.93 4325.95,-8264.16"/>
<polygon fill="blue" stroke="blue" points="4325.5,-8267.63 4335.87,-8265.45 4326.41,-8260.69 4325.5,-8267.63"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge806" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4023.61,-8226.66C4073.91,-8230.35 4139.97,-8226.15 4183,-8188.64 4220.38,-8156.05 4174.51,-8114.21 4211,-8080.64 4238.21,-8055.61 4279.81,-8049.35 4313.35,-8049.09"/>
<polygon fill="blue" stroke="blue" points="4313.45,-8052.59 4323.48,-8049.19 4313.51,-8045.59 4313.45,-8052.59"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge809" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4023.7,-8228.09C4074.89,-8232.75 4142.03,-8229.11 4183,-8188.64 4251.86,-8120.6 4143.07,-8041.6 4211,-7972.64 4262.05,-7920.8 4463.42,-7938.64 4535,-7925.64 4624.97,-7909.28 4648.24,-7907.34 4736,-7881.64 4756.35,-7875.67 4778.3,-7867.88 4797.43,-7860.63"/>
<polygon fill="blue" stroke="blue" points="4798.77,-7863.86 4806.85,-7857.02 4796.26,-7857.33 4798.77,-7863.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node302"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="4397,-4185.64 4341,-4185.64 4341,-4149.64 4397,-4149.64 4397,-4185.64"/>
<text text-anchor="middle" x="4369" y="-4163.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge612" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4397.29,-4168.64C4433.88,-4171.5 4498.47,-4182.09 4535,-4220.64 4776.54,-4475.46 4689.76,-4636.58 4736,-4984.64 4778.55,-5304.94 4734.49,-7570.23 4756,-7892.64 4774.51,-8170.12 4828.31,-8503.07 4844.7,-8600.55"/>
<polygon fill="blue" stroke="blue" points="4841.27,-8601.23 4846.38,-8610.5 4848.17,-8600.06 4841.27,-8601.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node303" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node303"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="4396,-4131.64 4342,-4131.64 4342,-4095.64 4396,-4095.64 4396,-4131.64"/>
<text text-anchor="middle" x="4369" y="-4109.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge724" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4396.01,-4108.87C4433.25,-4103.72 4501.02,-4100.94 4535,-4140.64 4567.79,-4178.94 4558.89,-7720.28 4561.5,-7770.64 4578.49,-8097.91 4627.14,-8493.08 4640.86,-8600.53"/>
<polygon fill="blue" stroke="blue" points="4637.4,-8601.09 4642.15,-8610.57 4644.35,-8600.2 4637.4,-8601.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge723" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4396.1,-4117.66C4433.13,-4121.73 4500.28,-4122.7 4535,-4083.64 4566.43,-4048.27 4550.69,-3704.7 4561.5,-3658.64 4576.41,-3595.12 4609.98,-3525.94 4629.55,-3488.83"/>
<polygon fill="blue" stroke="blue" points="4632.82,-3490.14 4634.44,-3479.67 4626.64,-3486.85 4632.82,-3490.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node304" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node304"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="4397,-3342.64 4341,-3342.64 4341,-3306.64 4397,-3306.64 4397,-3342.64"/>
<text text-anchor="middle" x="4369" y="-3320.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4397.15,-3335.85C4434.2,-3352.6 4499.98,-3387.71 4535,-3438.64 4563.25,-3479.72 4526.3,-3512.33 4561.5,-3547.64 4617.89,-3604.2 4686.59,-3527.87 4736,-3590.64 4754.48,-3614.11 4754.04,-7862.82 4756,-7892.64 4774.2,-8170.14 4828.21,-8503.07 4844.68,-8600.55"/>
<polygon fill="blue" stroke="blue" points="4841.24,-8601.23 4846.37,-8610.51 4848.14,-8600.06 4841.24,-8601.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="node305" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<g id="a_node305"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn Attribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedAttribute&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The points in a regular verifiably encrypted attribute ...">
<polygon fill="white" stroke="black" points="4404,-3234.64 4334,-3234.64 4334,-3198.64 4404,-3198.64 4404,-3234.64"/>
<text text-anchor="middle" x="4369" y="-3212.94" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="node308" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<g id="a_node308"><a xlink:title=" &#160;&#160;&#160;pub fn blind( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn RevealedAttribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedPoint&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is technically something you can do with just th...">
<polygon fill="white" stroke="black" points="4672.5,-3342.64 4618.5,-3342.64 4618.5,-3306.64 4672.5,-3306.64 4672.5,-3342.64"/>
<text text-anchor="middle" x="4645.5" y="-3320.94" font-family="Helvetica,sans-Serif" font-size="14.00">blind</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4404.16,-3217.56C4438.46,-3219.54 4492.22,-3225.57 4535,-3243.64 4566.68,-3257.01 4597.7,-3281.33 4618.59,-3299.84"/>
<polygon fill="blue" stroke="blue" points="4616.32,-3302.5 4626.08,-3306.62 4621.01,-3297.31 4616.32,-3302.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="node306" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<g id="a_node306"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BlindingPrivateKey::generate(sho).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4685,-3180.64 4606,-3180.64 4606,-3144.64 4685,-3144.64 4685,-3180.64"/>
<text text-anchor="middle" x="4645.5" y="-3158.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="node310" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<g id="a_node310"><a xlink:title=" &#160;&#160;&#160;fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y: sho.get_scalar(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4890,-3261.64 4811,-3261.64 4811,-3225.64 4890,-3225.64 4890,-3261.64"/>
<text text-anchor="middle" x="4850.5" y="-3239.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.16,-3178.06C4718.18,-3191.24 4765.82,-3210.25 4801.32,-3224.41"/>
<polygon fill="blue" stroke="blue" points="4800.4,-3227.81 4810.98,-3228.27 4802.99,-3221.31 4800.4,-3227.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node307" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node307"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="4396,-3288.64 4342,-3288.64 4342,-3252.64 4396,-3252.64 4396,-3288.64"/>
<text text-anchor="middle" x="4369" y="-3266.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4396.02,-3265.86C4433.27,-3260.71 4501.05,-3257.92 4535,-3297.64 4555.18,-3321.25 4559.91,-7739.61 4561.5,-7770.64 4578.27,-8097.92 4627.08,-8493.08 4640.85,-8600.53"/>
<polygon fill="blue" stroke="blue" points="4637.39,-8601.1 4642.14,-8610.57 4644.33,-8600.2 4637.39,-8601.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4396.3,-3266.6C4432.65,-3262.64 4497.94,-3261.63 4535,-3297.64 4579.48,-3340.85 4520.44,-3388.16 4561.5,-3434.64 4565.55,-3439.22 4570.39,-3443.03 4575.66,-3446.19"/>
<polygon fill="blue" stroke="blue" points="4574.39,-3449.48 4584.88,-3450.93 4577.59,-3443.25 4574.39,-3449.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4396.04,-3266.32C4432.68,-3261.89 4499.01,-3260.16 4535,-3297.64 4602.29,-3367.72 4496.06,-3442.82 4561.5,-3514.64 4614.96,-3573.31 4686.06,-3490.94 4736,-3552.64 4772.86,-3598.17 4729.47,-7718.4 4756,-7770.64 4765.81,-7789.96 4783.85,-7805.21 4801.49,-7816.41"/>
<polygon fill="blue" stroke="blue" points="4799.7,-7819.42 4810.08,-7821.59 4803.32,-7813.43 4799.7,-7819.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4672.9,-3332.28C4694.12,-3339.98 4722.53,-3354.13 4736,-3377.64 4766.34,-3430.57 4728.38,-7716.23 4756,-7770.64 4765.81,-7789.96 4783.85,-7805.21 4801.49,-7816.41"/>
<polygon fill="blue" stroke="blue" points="4799.7,-7819.43 4810.07,-7821.59 4803.31,-7813.43 4799.7,-7819.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair(). -->
<g id="node309" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().</title>
<g id="a_node309"><a xlink:title="fn round_trip_key_pair() { &#160;&#160;&#160;&#160;let key_pair = BlindingKeyPair::generate(&amp;mut poksho::ShoSha256::new(b&#39; test&#39; )); &#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;let deserialized: Blin...">
<polygon fill="white" stroke="black" points="4445,-3180.64 4293,-3180.64 4293,-3144.64 4445,-3144.64 4445,-3180.64"/>
<text text-anchor="middle" x="4369" y="-3158.94" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4445.01,-3162.64C4493.01,-3162.64 4553.89,-3162.64 4595.7,-3162.64"/>
<polygon fill="blue" stroke="blue" points="4595.9,-3166.14 4605.9,-3162.64 4595.9,-3159.14 4595.9,-3166.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge825" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4831.18,-3261.73C4805.89,-3286.89 4762.79,-3335.19 4746,-3386.64 4736.49,-3415.76 4733.53,-7770.65 4746,-7798.64 4754.9,-7818.61 4776.08,-7828.96 4797.06,-7834.27"/>
<polygon fill="blue" stroke="blue" points="4796.45,-7837.72 4806.97,-7836.44 4797.94,-7830.88 4796.45,-7837.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node311" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node311"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="4403.5,-3843.64 4334.5,-3843.64 4334.5,-3807.64 4403.5,-3807.64 4403.5,-3843.64"/>
<text text-anchor="middle" x="4369" y="-3821.94" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4403.51,-3819.92C4441.78,-3815.53 4503.2,-3815.47 4535,-3852.64 4570.38,-3893.99 4558.69,-7716.29 4561.5,-7770.64 4578.4,-8097.91 4627.12,-8493.08 4640.86,-8600.53"/>
<polygon fill="blue" stroke="blue" points="4637.4,-8601.09 4642.14,-8610.57 4644.34,-8600.2 4637.4,-8601.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4403.52,-3820.03C4477.61,-3809.8 4655.07,-3797.63 4736,-3898.64 4769.63,-3940.6 4731.64,-7722.69 4756,-7770.64 4765.82,-7789.96 4783.86,-7805.21 4801.49,-7816.41"/>
<polygon fill="blue" stroke="blue" points="4799.71,-7819.42 4810.08,-7821.58 4803.32,-7813.43 4799.71,-7819.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node312" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node312"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4397,-3897.64 4341,-3897.64 4341,-3861.64 4397,-3861.64 4397,-3897.64"/>
<text text-anchor="middle" x="4369" y="-3875.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge546" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4397.16,-3878.92C4467.35,-3878.72 4654.97,-3889.1 4736,-4000.64 4751.89,-4022.5 4754.22,-7865.67 4756,-7892.64 4774.27,-8170.13 4828.23,-8503.07 4844.68,-8600.55"/>
<polygon fill="blue" stroke="blue" points="4841.25,-8601.23 4846.37,-8610.51 4848.15,-8600.06 4841.25,-8601.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge706" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4894.34,-7827.58C4910.59,-7822.33 4929.02,-7815.57 4945,-7807.64 4982.38,-7789.09 5021.6,-7761.67 5047.88,-7741.98"/>
<polygon fill="blue" stroke="blue" points="5050.08,-7744.7 5055.94,-7735.88 5045.86,-7739.12 5050.08,-7744.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="node314" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<g id="a_node314"><a xlink:title="fn bench_server_param_serialization(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;&#160;let serialized_secret_params = zkgroup::seri...">
<polygon fill="white" stroke="black" points="3107,-9893.64 2855,-9893.64 2855,-9857.64 3107,-9857.64 3107,-9893.64"/>
<text text-anchor="middle" x="2981" y="-9871.94" font-family="Helvetica,sans-Serif" font-size="14.00">bench_server_param_serialization</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3107.15,-9887.74C3217.55,-9898.42 3372.63,-9913.41 3450.44,-9920.94"/>
<polygon fill="blue" stroke="blue" points="3450.15,-9924.43 3460.44,-9921.91 3450.83,-9917.46 3450.15,-9924.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node315" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node315"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2601,-9893.64 2526,-9893.64 2526,-9857.64 2601,-9857.64 2601,-9893.64"/>
<text text-anchor="middle" x="2563.5" y="-9871.94" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2601.01,-9875.64C2655.11,-9875.64 2759.37,-9875.64 2844.86,-9875.64"/>
<polygon fill="blue" stroke="blue" points="2844.93,-9879.14 2854.93,-9875.64 2844.93,-9872.14 2844.93,-9879.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node316" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node316"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="3095,-8963.64 2867,-8963.64 2867,-8927.64 3095,-8927.64 3095,-8963.64"/>
<text text-anchor="middle" x="2981" y="-8941.94" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2564.18,-9857.35C2562.55,-9743.03 2559.67,-9127.29 2683,-8998.64 2727.03,-8952.7 2796.16,-8938.43 2856.65,-8936.11"/>
<polygon fill="blue" stroke="blue" points="2856.76,-8939.61 2866.66,-8935.83 2856.57,-8932.61 2856.76,-8939.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node317" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node317"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="3126,-8909.64 2836,-8909.64 2836,-8873.64 3126,-8873.64 3126,-8909.64"/>
<text text-anchor="middle" x="2981" y="-8887.94" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2565.4,-9857.56C2571.81,-9731.51 2612.56,-8986.82 2683,-8918.64 2735.55,-8867.77 2820.52,-8864.82 2886.15,-8872.39"/>
<polygon fill="blue" stroke="blue" points="2885.74,-8875.86 2896.09,-8873.63 2886.61,-8868.92 2885.74,-8875.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node318" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node318"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="3089,-8855.64 2873,-8855.64 2873,-8819.64 3089,-8819.64 3089,-8855.64"/>
<text text-anchor="middle" x="2981" y="-8833.94" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2565.28,-9857.39C2571.02,-9726.78 2608.72,-8937.01 2683,-8864.64 2735.56,-8813.43 2820.95,-8810.64 2886.71,-8818.36"/>
<polygon fill="blue" stroke="blue" points="2886.31,-8821.84 2896.68,-8819.63 2887.2,-8814.9 2886.31,-8821.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.76,-8963.68C3126.16,-8974.98 3224.22,-8977.81 3279,-8918.64 3335.12,-8858 3244.21,-7493.47 3299,-7431.64 3327.66,-7399.29 3375.12,-7391.85 3416.62,-7392.81"/>
<polygon fill="blue" stroke="blue" points="3416.62,-7396.32 3426.75,-7393.22 3416.9,-7389.32 3416.62,-7396.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.76,-8963.68C3126.15,-8974.97 3224.21,-8977.8 3279,-8918.64 3333.1,-8860.22 3246.19,-7545.21 3299,-7485.64 3327.13,-7453.9 3373.36,-7446.14 3414.29,-7446.77"/>
<polygon fill="blue" stroke="blue" points="3414.19,-7450.27 3424.29,-7447.09 3414.41,-7443.28 3414.19,-7450.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8963.64C3125.88,-8975 3224.17,-8977.94 3279,-8918.64 3309.98,-8885.12 3266.53,-7307.71 3299,-7275.64 3592.37,-6985.81 4173.96,-7291.29 4329.17,-7381.3"/>
<polygon fill="blue" stroke="blue" points="4327.53,-7384.39 4337.93,-7386.41 4331.06,-7378.35 4327.53,-7384.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3095.08,-8933.72C3159.15,-8933.77 3235.06,-8946.62 3279,-8998.64 3319.52,-9046.59 3257.82,-11211.25 3299,-11258.64 3328.85,-11292.99 3379.74,-11300.24 3422.71,-11299.04"/>
<polygon fill="blue" stroke="blue" points="3423.04,-11302.53 3432.88,-11298.59 3422.74,-11295.53 3423.04,-11302.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3095.14,-8933.98C3159.03,-8934.18 3234.72,-8947.09 3279,-8998.64 3336.36,-9065.41 3240.24,-9725.09 3299,-9790.64 3313.65,-9806.98 3333.12,-9816.94 3354.15,-9822.67"/>
<polygon fill="blue" stroke="blue" points="3353.38,-9826.08 3363.92,-9825 3355.01,-9819.27 3353.38,-9826.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3095.22,-8933.91C3159.14,-8934.08 3234.83,-8946.99 3279,-8998.64 3313.46,-9038.92 3263.7,-9913.09 3299,-9952.64 3306.34,-9960.86 3314.89,-9967.46 3324.25,-9972.73"/>
<polygon fill="blue" stroke="blue" points="3322.95,-9976 3333.46,-9977.38 3326.11,-9969.75 3322.95,-9976"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3095.11,-8934.01C3158.98,-8934.22 3234.67,-8947.13 3279,-8998.64 3332.51,-9060.81 3244.18,-9675.61 3299,-9736.64 3301.03,-9738.9 3303.15,-9741.03 3305.36,-9743.06"/>
<polygon fill="blue" stroke="blue" points="3303.22,-9745.83 3313.17,-9749.49 3307.67,-9740.43 3303.22,-9745.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3095.17,-8933.95C3159.07,-8934.14 3234.76,-8947.05 3279,-8998.64 3309.61,-9034.32 3267.64,-9809.61 3299,-9844.64 3311.98,-9859.14 3328.75,-9868.62 3347.06,-9874.58"/>
<polygon fill="blue" stroke="blue" points="3346.17,-9877.96 3356.75,-9877.38 3348.12,-9871.24 3346.17,-9877.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node379" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node379"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="4136.5,-9511.64 3767.5,-9511.64 3767.5,-9475.64 4136.5,-9475.64 4136.5,-9511.64"/>
<text text-anchor="middle" x="3952" y="-9489.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.77,-8963.69C3126.18,-8974.99 3224.24,-8977.83 3279,-8918.64 3308.13,-8887.15 3268.47,-7404.77 3299,-7374.64 3426.15,-7249.12 3574.02,-7248.95 3701,-7374.64 3739.54,-7412.78 3696.13,-9278.45 3721,-9326.64 3757.59,-9397.52 3839.67,-9445.47 3895.21,-9471.19"/>
<polygon fill="blue" stroke="blue" points="3894.02,-9474.49 3904.57,-9475.43 3896.91,-9468.11 3894.02,-9474.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3095.2,-8933.93C3159.1,-8934.11 3234.79,-8947.02 3279,-8998.64 3311.53,-9036.62 3265.67,-9861.35 3299,-9898.64 3336.01,-9940.04 3403.87,-9940.52 3450.18,-9934.89"/>
<polygon fill="blue" stroke="blue" points="3450.86,-9938.33 3460.3,-9933.52 3449.92,-9931.39 3450.86,-9938.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.45,-8909.64C3125.87,-8920.99 3224.16,-8923.93 3279,-8864.64 3308.97,-8832.23 3267.59,-7306.65 3299,-7275.64 3592.43,-6985.87 4173.98,-7291.3 4329.17,-7381.3"/>
<polygon fill="blue" stroke="blue" points="4327.54,-7384.4 4337.94,-7386.42 4331.06,-7378.35 4327.54,-7384.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node363" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node363"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="3651,-9075.64 3349,-9075.64 3349,-9039.64 3651,-9039.64 3651,-9075.64"/>
<text text-anchor="middle" x="3500" y="-9053.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3071.6,-8873.63C3137.26,-8866 3224.16,-8868.32 3279,-8918.64 3316.26,-8952.82 3262.49,-8995.65 3299,-9030.64 3310.52,-9041.67 3324.26,-9049.64 3339.08,-9055.27"/>
<polygon fill="blue" stroke="blue" points="3338.37,-9058.73 3348.96,-9058.65 3340.63,-9052.11 3338.37,-9058.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3063.34,-8873.59C3130.63,-8863.89 3223.81,-8863.44 3279,-8918.64 3313.71,-8953.35 3265.05,-9103.18 3299,-9138.64 3340.92,-9182.42 3417.54,-9179.36 3462.8,-9172.77"/>
<polygon fill="blue" stroke="blue" points="3463.45,-9176.21 3472.77,-9171.18 3462.35,-9169.29 3463.45,-9176.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3060.75,-8873.63C3128.52,-8863.25 3223.83,-8861.79 3279,-8918.64 3329.86,-8971.03 3249.29,-9193.14 3299,-9246.64 3332.3,-9282.47 3388.77,-9287.25 3433.23,-9284.19"/>
<polygon fill="blue" stroke="blue" points="3433.71,-9287.66 3443.38,-9283.34 3433.13,-9280.68 3433.71,-9287.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3065.62,-8873.63C3132.43,-8864.56 3223.75,-8864.98 3279,-8918.64 3332.31,-8970.41 3246.83,-9031.72 3299,-9084.64 3324.07,-9110.07 3360.89,-9119.53 3396.12,-9121.7"/>
<polygon fill="blue" stroke="blue" points="3396.36,-9125.22 3406.5,-9122.14 3396.65,-9118.22 3396.36,-9125.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3061.92,-8873.59C3129.49,-8863.5 3223.85,-8862.49 3279,-8918.64 3321.78,-8962.19 3257.17,-9148.16 3299,-9192.64 3323.9,-9219.11 3361.47,-9228.57 3397.34,-9230.44"/>
<polygon fill="blue" stroke="blue" points="3397.29,-9233.94 3407.41,-9230.78 3397.53,-9226.95 3397.29,-9233.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058,-8873.62C3126.32,-8862.43 3224.11,-8859.74 3279,-8918.64 3316.13,-8958.47 3262.75,-9858 3299,-9898.64 3335.97,-9940.08 3403.84,-9940.55 3450.16,-9934.9"/>
<polygon fill="blue" stroke="blue" points="3450.84,-9938.34 3460.28,-9933.53 3449.9,-9931.4 3450.84,-9938.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node323" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node323"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="3533,-7005.64 3467,-7005.64 3467,-6969.64 3533,-6969.64 3533,-7005.64"/>
<text text-anchor="middle" x="3500" y="-6983.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3038.91,-8819.61C3109.72,-8793.77 3227.57,-8738.75 3279,-8645.64 3300.56,-8606.61 3271.59,-7075.8 3299,-7040.64 3335.85,-6993.36 3409.65,-6985.2 3456.56,-6985.24"/>
<polygon fill="blue" stroke="blue" points="3456.67,-6988.75 3466.71,-6985.38 3456.76,-6981.75 3456.67,-6988.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node324" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node324"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="3534.5,-6843.64 3465.5,-6843.64 3465.5,-6807.64 3534.5,-6807.64 3534.5,-6843.64"/>
<text text-anchor="middle" x="3500" y="-6821.94" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3038.93,-8819.62C3109.76,-8793.79 3227.63,-8738.78 3279,-8645.64 3303.06,-8602.02 3266.01,-6889.95 3299,-6852.64 3337.18,-6809.44 3408.92,-6810.62 3455.29,-6816.97"/>
<polygon fill="blue" stroke="blue" points="3454.94,-6820.46 3465.35,-6818.49 3455.98,-6813.54 3454.94,-6820.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node326" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node326"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3528,-6951.64 3472,-6951.64 3472,-6915.64 3528,-6915.64 3528,-6951.64"/>
<text text-anchor="middle" x="3500" y="-6929.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3038.92,-8819.61C3109.74,-8793.78 3227.59,-8738.76 3279,-8645.64 3301.62,-8604.66 3267.99,-6995.7 3299,-6960.64 3338.95,-6915.47 3415.57,-6918.83 3461.5,-6925.88"/>
<polygon fill="blue" stroke="blue" points="3461.21,-6929.38 3471.65,-6927.57 3462.36,-6922.48 3461.21,-6929.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3038.94,-8819.62C3109.77,-8793.79 3227.64,-8738.79 3279,-8645.64 3303.77,-8600.7 3265.02,-6837.08 3299,-6798.64 3329.78,-6763.8 3382.37,-6757.82 3425.9,-6760.14"/>
<polygon fill="blue" stroke="blue" points="3425.67,-6763.64 3435.89,-6760.83 3426.15,-6756.65 3425.67,-6763.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3038.85,-8819.57C3109.6,-8793.7 3227.38,-8738.64 3279,-8645.64 3311.73,-8586.66 3254.19,-7482.06 3299,-7431.64 3327.71,-7399.34 3375.17,-7391.89 3416.66,-7392.85"/>
<polygon fill="blue" stroke="blue" points="3416.66,-7396.35 3426.79,-7393.25 3416.93,-7389.36 3416.66,-7396.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3038.88,-8819.59C3109.66,-8793.73 3227.47,-8738.69 3279,-8645.64 3297.44,-8612.34 3271.89,-7302.35 3299,-7275.64 3592.73,-6986.17 4174.06,-7291.39 4329.19,-7381.32"/>
<polygon fill="blue" stroke="blue" points="4327.55,-7384.41 4337.95,-7386.43 4331.08,-7378.37 4327.55,-7384.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.01,-8819.61C3126.34,-8808.41 3224.14,-8805.71 3279,-8864.64 3318.15,-8906.68 3260.77,-9855.74 3299,-9898.64 3335.95,-9940.1 3403.82,-9940.56 3450.16,-9934.91"/>
<polygon fill="blue" stroke="blue" points="3450.84,-9938.35 3460.28,-9933.54 3449.9,-9931.41 3450.84,-9938.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3465.49,-6558.67C3413.12,-6548.86 3316.74,-6540.34 3289,-6602.64 3280.55,-6621.62 3280.55,-6770.65 3289,-6789.64 3315.06,-6848.16 3401.71,-6844.19 3455.52,-6835.35"/>
<polygon fill="blue" stroke="blue" points="3456.25,-6838.78 3465.49,-6833.6 3455.04,-6831.88 3456.25,-6838.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3466.96,-6628.54C3416.12,-6642.8 3321.21,-6678.31 3289,-6750.64 3279.91,-6771.04 3279.91,-6931.23 3289,-6951.64 3315.28,-7010.63 3403.13,-7006.12 3456.83,-6997.13"/>
<polygon fill="blue" stroke="blue" points="3457.54,-7000.56 3466.77,-6995.36 3456.31,-6993.67 3457.54,-7000.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node321" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node321"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="4008.5,-6897.64 3895.5,-6897.64 3895.5,-6861.64 4008.5,-6861.64 4008.5,-6897.64"/>
<text text-anchor="middle" x="3952" y="-6875.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4008.64,-6891.43C4061.9,-6899.09 4140.28,-6900.19 4183,-6852.64 4235.94,-6793.7 4175.69,-4071.56 4211,-4000.64 4236.17,-3950.09 4293.58,-3914.62 4331.56,-3895.68"/>
<polygon fill="blue" stroke="blue" points="4333.29,-3898.73 4340.76,-3891.22 4330.24,-3892.43 4333.29,-3898.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node322" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node322"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="3584,-6897.64 3416,-6897.64 3416,-6861.64 3584,-6861.64 3584,-6897.64"/>
<text text-anchor="middle" x="3500" y="-6875.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3584.08,-6889.42C3624.32,-6889.44 3670.42,-6881.75 3701,-6852.64 3736.35,-6818.97 3691.88,-6783.82 3721,-6744.64 3858.77,-6559.25 4061.65,-6703.17 4183,-6506.64 4219.57,-6447.4 4166.82,-4054.43 4211,-4000.64 4304.38,-3886.93 4399.63,-3990.28 4535,-3932.64 4634.47,-3890.28 4672.43,-3883.08 4736,-3795.64 4819.65,-3680.55 4841.99,-3504.44 4847.67,-3436.11"/>
<polygon fill="blue" stroke="blue" points="4851.19,-3435.97 4848.47,-3425.73 4844.21,-3435.43 4851.19,-3435.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3584.06,-6879.64C3670.83,-6879.64 3805.19,-6879.64 3884.99,-6879.64"/>
<polygon fill="blue" stroke="blue" points="3885.4,-6883.14 3895.4,-6879.64 3885.4,-6876.14 3885.4,-6883.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node325" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node325"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="4013.5,-6951.64 3890.5,-6951.64 3890.5,-6915.64 4013.5,-6915.64 4013.5,-6951.64"/>
<text text-anchor="middle" x="3952" y="-6929.94" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3584.04,-6889.93C3625.23,-6895.01 3675.73,-6901.2 3721,-6906.64 3774.44,-6913.05 3834.89,-6920.14 3880.4,-6925.44"/>
<polygon fill="blue" stroke="blue" points="3880.12,-6928.94 3890.46,-6926.62 3880.93,-6921.98 3880.12,-6928.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node327" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node327"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4044.5,-6789.64 3859.5,-6789.64 3859.5,-6753.64 4044.5,-6753.64 4044.5,-6789.64"/>
<text text-anchor="middle" x="3952" y="-6767.94" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3584.06,-6887.09C3623.33,-6886.3 3668.59,-6878.58 3701,-6852.64 3720.98,-6836.64 3700.88,-6814.46 3721,-6798.64 3756.69,-6770.56 3805.67,-6762 3849.25,-6761.21"/>
<polygon fill="blue" stroke="blue" points="3849.34,-6764.71 3859.33,-6761.16 3849.31,-6757.71 3849.34,-6764.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node328" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node328"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="4015,-6843.64 3889,-6843.64 3889,-6807.64 4015,-6807.64 4015,-6843.64"/>
<text text-anchor="middle" x="3952" y="-6821.94" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3584.04,-6869.34C3625.23,-6864.26 3675.73,-6858.07 3721,-6852.64 3773.7,-6846.31 3833.21,-6839.33 3878.49,-6834.05"/>
<polygon fill="blue" stroke="blue" points="3878.99,-6837.51 3888.51,-6832.88 3878.18,-6830.56 3878.99,-6837.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3584.01,-6869.41C3624.48,-6869.21 3670.81,-6876.87 3701,-6906.64 3722.44,-6927.78 3711.67,-7012.01 3721,-7040.64 3775.31,-7207.36 3888.54,-7386.96 3932.76,-7453.69"/>
<polygon fill="blue" stroke="blue" points="3930.07,-7455.96 3938.53,-7462.34 3935.89,-7452.08 3930.07,-7455.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3533,-6983.79C3605.02,-6975.15 3781.28,-6954 3880.38,-6942.11"/>
<polygon fill="blue" stroke="blue" points="3880.79,-6945.58 3890.31,-6940.92 3879.96,-6938.63 3880.79,-6945.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3534.82,-6825.64C3607.57,-6825.64 3780.28,-6825.64 3878.82,-6825.64"/>
<polygon fill="blue" stroke="blue" points="3879,-6829.14 3889,-6825.64 3879,-6822.14 3879,-6829.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge530" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4013.73,-6946.12C4066.79,-6953.1 4141.61,-6952.68 4183,-6906.64 4232.88,-6851.14 4167.17,-4281.02 4211,-4220.64 4238.22,-4183.13 4293.36,-4171.84 4330.49,-4168.62"/>
<polygon fill="blue" stroke="blue" points="4331.19,-4172.08 4340.92,-4167.89 4330.7,-4165.1 4331.19,-4172.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge666" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3528.09,-6930.26C3569.6,-6925.11 3651.46,-6914.98 3721,-6906.64 3776.3,-6900 3839.09,-6892.64 3885.08,-6887.28"/>
<polygon fill="blue" stroke="blue" points="3885.69,-6890.73 3895.22,-6886.1 3884.88,-6883.78 3885.69,-6890.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge705" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3981.47,-6753.41C4033.21,-6718.41 4141.15,-6636.14 4183,-6534.64 4208.35,-6473.15 4167.85,-4191.24 4211,-4140.64 4239.99,-4106.64 4294.92,-4104.8 4331.5,-4108.07"/>
<polygon fill="blue" stroke="blue" points="4331.44,-4111.58 4341.75,-4109.16 4332.18,-4104.62 4331.44,-4111.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge784" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4015.04,-6838.3C4068.01,-6845.11 4141.97,-6844.33 4183,-6798.64 4237.68,-6737.75 4157.97,-3914.96 4211,-3852.64 4238.08,-3820.81 4287.88,-3817.15 4324.15,-3819.49"/>
<polygon fill="blue" stroke="blue" points="4324.21,-3823 4334.46,-3820.33 4324.78,-3816.03 4324.21,-3823"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge840" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3564.04,-6771.64C3637.92,-6771.64 3761.34,-6771.64 3848.92,-6771.64"/>
<polygon fill="blue" stroke="blue" points="3849.15,-6775.14 3859.15,-6771.64 3849.15,-6768.14 3849.15,-6775.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node330" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node330"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3617,-5910.64 3383,-5910.64 3383,-5874.64 3617,-5874.64 3617,-5910.64"/>
<text text-anchor="middle" x="3500" y="-5888.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3617.11,-5877.25C3644.62,-5873.53 3673.86,-5869.5 3701,-5865.64 3709.9,-5864.37 3712.09,-5863.83 3721,-5862.64 3789.4,-5853.49 3869.46,-5844.47 3914.81,-5839.52"/>
<polygon fill="blue" stroke="blue" points="3915.19,-5843 3924.75,-5838.44 3914.43,-5836.04 3915.19,-5843"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3617.18,-5891.86C3712.59,-5891.22 3842.4,-5890.36 3908.51,-5889.92"/>
<polygon fill="blue" stroke="blue" points="3908.59,-5893.42 3918.56,-5889.85 3908.54,-5886.42 3908.59,-5893.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="node338" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<g id="a_node338"><a xlink:title=" &#160;&#160;&#160;fn server_secret_params() &#45;&gt; GenericServerSecretParams { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GenericServerSecretParams::generate(SERVER_SECRET_RAND) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4036.5,-5745.64 3867.5,-5745.64 3867.5,-5709.64 4036.5,-5709.64 4036.5,-5745.64"/>
<text text-anchor="middle" x="3952" y="-5723.94" font-family="Helvetica,sans-Serif" font-size="14.00">server_secret_params</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3617.05,-5900.62C3647.78,-5896.91 3678.6,-5887.07 3701,-5865.64 3737.22,-5830.98 3684.48,-5788.98 3721,-5754.64 3756.75,-5721.02 3810.68,-5713.32 3857.34,-5714.47"/>
<polygon fill="blue" stroke="blue" points="3857.36,-5717.97 3867.49,-5714.85 3857.63,-5710.97 3857.36,-5717.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3617.03,-5897.98C3647.05,-5894.07 3677.51,-5884.78 3701,-5865.64 3721.81,-5848.68 3700.04,-5825.41 3721,-5808.64 3776.67,-5764.06 3865.62,-5768.3 3915,-5775.1"/>
<polygon fill="blue" stroke="blue" points="3914.5,-5778.56 3924.91,-5776.57 3915.53,-5771.64 3914.5,-5778.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node331" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node331"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="3658.5,-5856.64 3341.5,-5856.64 3341.5,-5820.64 3658.5,-5820.64 3658.5,-5856.64"/>
<text text-anchor="middle" x="3500" y="-5834.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3658.7,-5837.58C3750.81,-5836.97 3859.5,-5836.25 3914.77,-5835.88"/>
<polygon fill="blue" stroke="blue" points="3914.8,-5839.38 3924.77,-5835.81 3914.75,-5832.38 3914.8,-5839.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3658.7,-5856.51C3747.67,-5866.59 3852.09,-5878.43 3908.92,-5884.87"/>
<polygon fill="blue" stroke="blue" points="3908.63,-5888.36 3918.96,-5886 3909.42,-5881.4 3908.63,-5888.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3658.73,-5834.49C3674.04,-5829.21 3688.51,-5821.82 3701,-5811.64 3721.81,-5794.68 3700.04,-5771.41 3721,-5754.64 3758.64,-5724.5 3811.49,-5716.67 3857.04,-5716.87"/>
<polygon fill="blue" stroke="blue" points="3857.18,-5720.37 3867.24,-5717.05 3857.3,-5713.37 3857.18,-5720.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3636.59,-5820.6C3658.15,-5817.66 3680.19,-5814.6 3701,-5811.64 3709.9,-5810.37 3712.09,-5809.83 3721,-5808.64 3789.4,-5799.49 3869.46,-5790.47 3914.81,-5785.52"/>
<polygon fill="blue" stroke="blue" points="3915.19,-5789 3924.75,-5784.44 3914.43,-5782.04 3915.19,-5789"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.25,-5842.17C4027.79,-5852.5 4131.34,-5865.99 4183,-5808.64 4224.42,-5762.65 4176.61,-3632.1 4211,-3580.64 4298.05,-3450.35 4437.23,-3564.09 4535,-3441.64 4575.6,-3390.78 4538.17,-3358.39 4561.5,-3297.64 4577.09,-3257.02 4605.09,-3215.07 4624.22,-3188.94"/>
<polygon fill="blue" stroke="blue" points="4627.18,-3190.82 4630.33,-3180.7 4621.56,-3186.64 4627.18,-3190.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.25,-5842.17C4027.79,-5852.5 4131.33,-5865.98 4183,-5808.64 4264.08,-5718.65 4131.29,-3719.83 4211,-3628.64 4306.8,-3519.03 4432.96,-3684.45 4535,-3580.64 4598.78,-3515.74 4512.69,-3454.43 4561.5,-3377.64 4572.64,-3360.1 4591.9,-3347.27 4609.07,-3338.63"/>
<polygon fill="blue" stroke="blue" points="4610.78,-3341.7 4618.32,-3334.26 4607.79,-3335.37 4610.78,-3341.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node333" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node333"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="3089,-5841.64 2873,-5841.64 2873,-5805.64 3089,-5805.64 3089,-5841.64"/>
<text text-anchor="middle" x="2981" y="-5819.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node334" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node334"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="3577,-5802.64 3423,-5802.64 3423,-5766.64 3577,-5766.64 3577,-5802.64"/>
<text text-anchor="middle" x="3500" y="-5780.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3089.12,-5815.55C3184.95,-5808.33 3323.64,-5797.86 3412.57,-5791.16"/>
<polygon fill="blue" stroke="blue" points="3412.91,-5794.64 3422.62,-5790.4 3412.39,-5787.66 3412.91,-5794.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3032.4,-5841.64C3094.39,-5863.14 3203.2,-5898.8 3299,-5919.64 3355.1,-5931.83 3421.32,-5939.48 3461.72,-5943.4"/>
<polygon fill="blue" stroke="blue" points="3461.63,-5946.91 3471.91,-5944.36 3462.29,-5939.94 3461.63,-5946.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3089.3,-5837.95C3149.82,-5840.47 3224.07,-5833.72 3279,-5796.64 3295.15,-5785.74 3282.6,-5768.14 3299,-5757.64 3317.82,-5745.58 3678.67,-5741.69 3701,-5740.64 3752.67,-5738.2 3810.33,-5735.22 3857.24,-5732.73"/>
<polygon fill="blue" stroke="blue" points="3857.59,-5736.21 3867.39,-5732.19 3857.22,-5729.22 3857.59,-5736.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3089.25,-5840.25C3150.68,-5843.8 3225.86,-5837.31 3279,-5796.64 3299.32,-5781.08 3280.82,-5760.65 3299,-5742.64 3341.56,-5700.46 3410.58,-5682.82 3455.38,-5675.56"/>
<polygon fill="blue" stroke="blue" points="3456.02,-5679 3465.38,-5674.05 3454.97,-5672.08 3456.02,-5679"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3577.08,-5793.26C3675.02,-5804.36 3841.28,-5823.2 3914.52,-5831.5"/>
<polygon fill="blue" stroke="blue" points="3914.3,-5835 3924.63,-5832.65 3915.08,-5828.04 3914.3,-5835"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3577.45,-5777.36C3618.06,-5777.52 3666.55,-5784.59 3701,-5811.64 3720.15,-5826.67 3701.72,-5847.77 3721,-5862.64 3775.09,-5904.36 3858.7,-5902.59 3908.82,-5896.68"/>
<polygon fill="blue" stroke="blue" points="3909.51,-5900.12 3918.98,-5895.37 3908.62,-5893.18 3909.51,-5900.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3577.06,-5773.91C3619.41,-5768.02 3673.1,-5760.71 3721,-5754.64 3765.77,-5748.96 3815.5,-5743.07 3857.23,-5738.24"/>
<polygon fill="blue" stroke="blue" points="3857.84,-5741.69 3867.38,-5737.07 3857.04,-5734.74 3857.84,-5741.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3577.08,-5784.13C3675.02,-5783.48 3841.28,-5782.37 3914.52,-5781.88"/>
<polygon fill="blue" stroke="blue" points="3914.65,-5785.38 3924.63,-5781.81 3914.6,-5778.38 3914.65,-5785.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3985.18,-5897.39C4035.8,-5907.45 4133.35,-5917.75 4183,-5862.64 4224.54,-5816.52 4195.97,-3688.85 4211,-3628.64 4238.62,-3518 4313.1,-3402.34 4348.63,-3351.41"/>
<polygon fill="blue" stroke="blue" points="4351.69,-3353.14 4354.59,-3342.95 4345.97,-3349.11 4351.69,-3353.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3528.26,-5950.09C3643.78,-5964.06 4091.16,-6011.24 4183,-5916.64 4220.89,-5877.61 4182.13,-4004.74 4211,-3958.64 4237.27,-3916.68 4293.31,-3896.17 4330.82,-3886.78"/>
<polygon fill="blue" stroke="blue" points="4331.94,-3890.11 4340.87,-3884.42 4330.34,-3883.3 4331.94,-3890.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node337" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node337"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="3118.5,-5787.64 2843.5,-5787.64 2843.5,-5751.64 3118.5,-5751.64 3118.5,-5787.64"/>
<text text-anchor="middle" x="2981" y="-5765.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3118.51,-5773.6C3211.75,-5776.3 3332.47,-5779.8 3412.66,-5782.13"/>
<polygon fill="blue" stroke="blue" points="3412.62,-5785.63 3422.72,-5782.42 3412.82,-5778.63 3412.62,-5785.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3070.11,-5751.6C3136.09,-5743.59 3224.08,-5745.45 3279,-5796.64 3319.52,-5834.39 3259.31,-5881 3299,-5919.64 3341.98,-5961.47 3416.89,-5959.43 3461.83,-5953.49"/>
<polygon fill="blue" stroke="blue" points="3462.36,-5956.95 3471.75,-5952.04 3461.35,-5950.02 3462.36,-5956.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3118.79,-5756.12C3174.62,-5751.09 3239.85,-5745.83 3299,-5742.64 3497.55,-5731.91 3730.53,-5728.84 3857.25,-5727.97"/>
<polygon fill="blue" stroke="blue" points="3857.33,-5731.47 3867.31,-5727.9 3857.29,-5724.47 3857.33,-5731.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3118.71,-5776.6C3170.96,-5774.38 3229.77,-5765.69 3279,-5742.64 3290.38,-5737.3 3288.09,-5728.88 3299,-5722.64 3348.33,-5694.4 3413.21,-5681.19 3455.49,-5675.23"/>
<polygon fill="blue" stroke="blue" points="3456.02,-5678.69 3465.47,-5673.9 3455.09,-5671.75 3456.02,-5678.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3971.6,-5709.41C4018.27,-5662.2 4139.72,-5529.94 4183,-5391.64 4220.15,-5272.92 4148.82,-1021.37 4211,-913.64 4234.27,-873.32 4282.76,-848.94 4319.73,-835.5"/>
<polygon fill="blue" stroke="blue" points="4321.04,-838.75 4329.34,-832.16 4318.74,-832.14 4321.04,-838.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge565" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.26,-5788.18C4027.81,-5798.52 4131.37,-5812.02 4183,-5754.64 4228.65,-5703.9 4166.72,-3349.58 4211,-3297.64 4239.99,-3263.63 4294.91,-3261.79 4331.5,-3265.06"/>
<polygon fill="blue" stroke="blue" points="4331.44,-3268.58 4341.75,-3266.16 4332.18,-3261.62 4331.44,-3268.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge727" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3520.47,-5652.36C3563.05,-5610.9 3663.65,-5504.51 3701,-5391.64 3721.44,-5329.86 3680.18,-4271.31 3721,-4220.64 3853.34,-4056.34 4043.35,-4269.77 4183,-4111.64 4259.64,-4024.85 4131.73,-3937.03 4211,-3852.64 4239.44,-3822.36 4288.54,-3818.31 4324.27,-3820.14"/>
<polygon fill="blue" stroke="blue" points="4324.22,-3823.65 4334.43,-3820.84 4324.69,-3816.66 4324.22,-3823.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node341" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node341"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="3122,-5733.64 2840,-5733.64 2840,-5697.64 3122,-5697.64 3122,-5733.64"/>
<text text-anchor="middle" x="2981" y="-5711.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge757" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3122.08,-5725.53C3171.76,-5729.79 3227.99,-5735.46 3279,-5742.64 3323.47,-5748.89 3372.58,-5758.04 3413.1,-5766.21"/>
<polygon fill="blue" stroke="blue" points="3412.45,-5769.65 3422.94,-5768.21 3413.84,-5762.79 3412.45,-5769.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge755" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3065.05,-5697.61C3131.99,-5688.39 3223.76,-5688.59 3279,-5742.64 3335.59,-5798 3243.63,-5863.05 3299,-5919.64 3341.06,-5962.62 3416.62,-5960.1 3461.85,-5953.78"/>
<polygon fill="blue" stroke="blue" points="3462.49,-5957.22 3471.84,-5952.25 3461.43,-5950.3 3462.49,-5957.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge756" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3122.2,-5716.57C3267.11,-5717.65 3499.89,-5719.65 3701,-5722.64 3752.66,-5723.4 3810.32,-5724.54 3857.24,-5725.53"/>
<polygon fill="blue" stroke="blue" points="3857.31,-5729.03 3867.39,-5725.75 3857.46,-5722.04 3857.31,-5729.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge754" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3122.25,-5703.43C3233.69,-5693.73 3382.5,-5680.78 3455.24,-5674.44"/>
<polygon fill="blue" stroke="blue" points="3455.75,-5677.91 3465.41,-5673.56 3455.14,-5670.94 3455.75,-5677.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node342" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node342"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="3114,-5679.64 2848,-5679.64 2848,-5643.64 3114,-5643.64 3114,-5679.64"/>
<text text-anchor="middle" x="2981" y="-5657.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge803" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3114.1,-5664.25C3166.16,-5667.71 3226.04,-5674.73 3279,-5688.64 3288.43,-5691.11 3290.09,-5693.69 3299,-5697.64 3349.49,-5719.98 3407.35,-5745.09 3447.8,-5762.57"/>
<polygon fill="blue" stroke="blue" points="3446.61,-5765.87 3457.18,-5766.62 3449.39,-5759.45 3446.61,-5765.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge805" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3062.73,-5643.62C3130.11,-5633.8 3223.75,-5633.14 3279,-5688.64 3315.36,-5725.15 3263.45,-5882.34 3299,-5919.64 3340.49,-5963.16 3416.25,-5960.46 3461.67,-5953.95"/>
<polygon fill="blue" stroke="blue" points="3462.36,-5957.39 3471.7,-5952.38 3461.28,-5950.47 3462.36,-5957.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge804" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3114.21,-5643.68C3259.21,-5627.37 3498.29,-5610.49 3701,-5643.64 3772.81,-5655.38 3851.79,-5684.91 3901.38,-5705.62"/>
<polygon fill="blue" stroke="blue" points="3900.32,-5708.97 3910.89,-5709.63 3903.04,-5702.52 3900.32,-5708.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge802" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3114.13,-5663.94C3226.2,-5665.89 3380.28,-5668.57 3454.93,-5669.87"/>
<polygon fill="blue" stroke="blue" points="3455.29,-5673.37 3465.35,-5670.05 3455.41,-5666.38 3455.29,-5673.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge667" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.31,-4938.33C4029.17,-4948.49 4131.28,-4961.12 4183,-4904.64 4255.96,-4824.95 4146.74,-4019.49 4211,-3932.64 4238.49,-3895.48 4293.3,-3884.09 4330.32,-3880.75"/>
<polygon fill="blue" stroke="blue" points="4331,-3884.21 4340.72,-3879.99 4330.49,-3877.23 4331,-3884.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge692" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4016.03,-4781.16C4068.72,-4786.79 4141.69,-4784.53 4183,-4739.64 4228.12,-4690.61 4166.89,-4190.57 4211,-4140.64 4240.58,-4107.15 4295.35,-4105.18 4331.74,-4108.28"/>
<polygon fill="blue" stroke="blue" points="4331.63,-4111.78 4341.93,-4109.32 4332.34,-4104.82 4331.63,-4111.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge721" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3986.74,-4885.62C4037.67,-4895.44 4133.47,-4904.77 4183,-4850.64 4257.88,-4768.79 4138.33,-3936.45 4211,-3852.64 4238.29,-3821.16 4287.82,-3817.38 4323.97,-3819.59"/>
<polygon fill="blue" stroke="blue" points="4324.01,-3823.11 4334.25,-3820.41 4324.56,-3816.13 4324.01,-3823.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge781" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3985.36,-4831.26C4035.78,-4840.99 4132.51,-4850.7 4183,-4796.64 4226.74,-4749.81 4172.38,-4271.76 4211,-4220.64 4238.85,-4183.76 4293.57,-4172.29 4330.47,-4168.87"/>
<polygon fill="blue" stroke="blue" points="4331.13,-4172.33 4340.84,-4168.07 4330.6,-4165.35 4331.13,-4172.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3985.09,-4532.3C4035.57,-4542.24 4132.95,-4552.38 4183,-4497.64 4221.29,-4455.76 4188.15,-3528.57 4211,-3476.64 4236.18,-3419.41 4294,-3372.88 4332,-3346.98"/>
<polygon fill="blue" stroke="blue" points="4334.35,-3349.62 4340.73,-3341.15 4330.47,-3343.79 4334.35,-3349.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.24,-4476.72C4027.76,-4486.25 4131.28,-4498.1 4183,-4440.64 4225.49,-4393.42 4169.48,-3345.7 4211,-3297.64 4240.21,-3263.82 4295.08,-3261.93 4331.59,-3265.14"/>
<polygon fill="blue" stroke="blue" points="4331.51,-3268.65 4341.82,-3266.22 4332.24,-3261.69 4331.51,-3268.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.24,-4639.27C4028.99,-4649.32 4130.92,-4661.79 4183,-4605.64 4233.89,-4550.76 4166.1,-3992.51 4211,-3932.64 4238.72,-3895.66 4293.48,-3884.22 4330.42,-3880.83"/>
<polygon fill="blue" stroke="blue" points="4331.09,-3884.29 4340.79,-3880.04 4330.56,-3877.31 4331.09,-3884.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.17,-4585.1C4027.59,-4595.32 4130.93,-4608.62 4183,-4551.64 4222.25,-4508.68 4179.2,-3553.36 4211,-3504.64 4298.03,-3371.27 4421.55,-3463.39 4535,-3351.64 4554.05,-3332.87 4548.6,-3321.05 4561.5,-3297.64 4582.74,-3259.1 4609.83,-3216.03 4627.18,-3189.12"/>
<polygon fill="blue" stroke="blue" points="4630.17,-3190.95 4632.66,-3180.65 4624.29,-3187.14 4630.17,-3190.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.16,-4585.09C4027.56,-4595.29 4130.86,-4608.56 4183,-4551.64 4255.15,-4472.86 4144.64,-3674.35 4211,-3590.64 4303.55,-3473.88 4432.52,-3612.78 4535,-3504.64 4574.66,-3462.78 4528.75,-3425.09 4561.5,-3377.64 4573.22,-3360.66 4592.33,-3347.91 4609.26,-3339.18"/>
<polygon fill="blue" stroke="blue" points="4610.92,-3342.26 4618.38,-3334.74 4607.86,-3335.97 4610.92,-3342.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3986.7,-4694.58C4037.57,-4704.35 4133.29,-4713.61 4183,-4659.64 4243.78,-4593.64 4152,-3920.23 4211,-3852.64 4238.39,-3821.25 4287.91,-3817.45 4324.02,-3819.64"/>
<polygon fill="blue" stroke="blue" points="4324.05,-3823.15 4334.29,-3820.44 4324.6,-3816.17 4324.05,-3823.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4034.21,-4346.95C4084.67,-4350.19 4146.65,-4344.05 4183,-4303.64 4226.52,-4255.25 4172.42,-3185.04 4211,-3132.64 4233.59,-3101.95 4274.82,-3088.83 4309.36,-3083.31"/>
<polygon fill="blue" stroke="blue" points="4309.96,-3086.76 4319.37,-3081.89 4308.98,-3079.83 4309.96,-3086.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node423" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node423"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="4404,-6101.64 4334,-6101.64 4334,-6065.64 4404,-6065.64 4404,-6101.64"/>
<text text-anchor="middle" x="4369" y="-6079.94" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge703" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4001.33,-4383.21C4054.95,-4381.29 4139.61,-4387.72 4183,-4440.64 4216.52,-4481.51 4204.34,-5339.2 4211,-5391.64 4244.27,-5653.76 4332,-5962.41 4359.58,-6055.62"/>
<polygon fill="blue" stroke="blue" points="4356.29,-6056.84 4362.49,-6065.42 4363,-6054.84 4356.29,-6056.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4408.79,-832.01C4447.55,-844.55 4505.49,-869.65 4535,-913.64 4743.49,-1224.41 4708.91,-2212.39 4736,-2585.64 4739.19,-2629.53 4729.62,-3342.4 4756,-3377.64 4766.59,-3391.78 4783.94,-3399.39 4800.83,-3403.43"/>
<polygon fill="blue" stroke="blue" points="4800.17,-3406.87 4810.67,-3405.43 4801.56,-3400.01 4800.17,-3406.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1(). -->
<g id="node355" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().</title>
<g id="a_node355"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec1() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3581.5,-7584.64 3418.5,-7584.64 3418.5,-7548.64 3581.5,-7548.64 3581.5,-7584.64"/>
<text text-anchor="middle" x="3500" y="-7562.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3581.57,-7557.58C3618.15,-7553 3661.9,-7546.87 3701,-7539.64 3771.56,-7526.58 3852.19,-7506.62 3902.36,-7493.6"/>
<polygon fill="blue" stroke="blue" points="3903.48,-7496.93 3912.28,-7491.02 3901.72,-7490.15 3903.48,-7496.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding(). -->
<g id="node356" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().</title>
<g id="a_node356"><a xlink:title=" &#160;&#160;&#160;fn test_encrypt_with_padding() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext = b&#39; secret team&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected...">
<polygon fill="white" stroke="black" points="3601.5,-7530.64 3398.5,-7530.64 3398.5,-7494.64 3601.5,-7494.64 3601.5,-7530.64"/>
<text text-anchor="middle" x="3500" y="-7508.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_encrypt_with_padding</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3601.71,-7505.47C3695.3,-7498.82 3830.7,-7489.19 3902.32,-7484.1"/>
<polygon fill="blue" stroke="blue" points="3902.69,-7487.58 3912.41,-7483.38 3902.19,-7480.6 3902.69,-7487.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3573.06,-7388.14C3714.44,-7351.8 4027.9,-7250.81 4183,-7040.64 4296.96,-6886.2 4354.22,-6254.05 4365.78,-6112.04"/>
<polygon fill="blue" stroke="blue" points="4369.28,-6112.21 4366.59,-6101.96 4362.3,-6111.65 4369.28,-6112.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2(). -->
<g id="node358" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().</title>
<g id="a_node358"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3581.5,-7638.64 3418.5,-7638.64 3418.5,-7602.64 3581.5,-7602.64 3581.5,-7638.64"/>
<text text-anchor="middle" x="3500" y="-7616.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3581.9,-7615.09C3618.75,-7611.21 3662.61,-7604.65 3701,-7593.64 3777.99,-7571.55 3861.71,-7529.72 3910.09,-7503.62"/>
<polygon fill="blue" stroke="blue" points="3911.88,-7506.63 3919,-7498.77 3908.54,-7500.48 3911.88,-7506.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node399" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node399"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="4404,-4268.64 4334,-4268.64 4334,-4232.64 4404,-4232.64 4404,-4268.64"/>
<text text-anchor="middle" x="4369" y="-4246.94" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3575.77,-7458.12C3614.5,-7455.52 3661.76,-7448.59 3701,-7431.64 3954.22,-7322.22 4062.66,-7288.85 4183,-7040.64 4232.84,-6937.85 4198.21,-5098.15 4211,-4984.64 4242.46,-4705.36 4332.34,-4375.71 4359.88,-4278.76"/>
<polygon fill="blue" stroke="blue" points="4363.33,-4279.43 4362.71,-4268.85 4356.6,-4277.51 4363.33,-4279.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3991.84,-7476.38C4037.72,-7471.08 4116.24,-7461.19 4183,-7448.64 4217.99,-7442.06 4256.33,-7433.21 4288.99,-7425.18"/>
<polygon fill="blue" stroke="blue" points="4290.07,-7428.52 4298.93,-7422.71 4288.38,-7421.72 4290.07,-7428.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge561" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4365.6,-7386.35C4344.53,-7272.16 4231.68,-6644.91 4197,-6127.64 4194.23,-6086.26 4177.13,-3178.04 4197,-3141.64 4218.45,-3102.34 4268.48,-3087.52 4309.08,-3082.14"/>
<polygon fill="blue" stroke="blue" points="4309.65,-3085.6 4319.18,-3080.97 4308.84,-3078.65 4309.65,-3085.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3537.79,-9010.6C3583.65,-9016.91 3660.88,-9019.24 3701,-8973.64 3735.76,-8934.13 3685.61,-8065.58 3721,-8026.64 3750.91,-7993.71 3797.92,-7984.21 3841.67,-7984.02"/>
<polygon fill="blue" stroke="blue" points="3841.79,-7987.52 3851.83,-7984.14 3841.87,-7980.52 3841.79,-7987.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3651.38,-9074.24C3829.49,-9090.19 4111.15,-9102.49 4183,-9030.64 4238.67,-8974.96 4163.83,-8385.67 4211,-8322.64 4237.43,-8287.31 4288.54,-8275.29 4325.27,-8271.33"/>
<polygon fill="blue" stroke="blue" points="4326.05,-8274.77 4335.69,-8270.38 4325.41,-8267.8 4326.05,-8274.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node366" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node366"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="4108.5,-9021.64 3795.5,-9021.64 3795.5,-8985.64 4108.5,-8985.64 4108.5,-9021.64"/>
<text text-anchor="middle" x="3952" y="-8999.94" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3651.16,-9039.62C3696.04,-9034.23 3745.41,-9028.31 3790.91,-9022.85"/>
<polygon fill="blue" stroke="blue" points="3791.35,-9026.32 3800.86,-9021.65 3790.51,-9019.37 3791.35,-9026.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.02,-9164.68C3641.29,-9159.88 4096.84,-9134.41 4183,-9030.64 4238.97,-8963.23 4153.36,-8308.62 4211,-8242.64 4240.39,-8208.99 4295.21,-8207.05 4331.66,-8210.21"/>
<polygon fill="blue" stroke="blue" points="4331.57,-8213.72 4341.88,-8211.27 4332.29,-8206.75 4331.57,-8213.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3556.57,-9273.99C3692.36,-9271.45 4040.35,-9243.52 4183,-9030.64 4238.45,-8947.89 4145.63,-8209.79 4211,-8134.64 4235.7,-8106.24 4278.49,-8100.4 4313.17,-8101.16"/>
<polygon fill="blue" stroke="blue" points="4313.05,-8104.66 4323.18,-8101.57 4313.33,-8097.67 4313.05,-8104.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge564" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4108.78,-9012.66C4137.01,-9006.81 4163.6,-8995.05 4183,-8973.64 4249.66,-8900.07 4145.85,-8155.53 4211,-8080.64 4235.7,-8052.24 4278.5,-8046.4 4313.17,-8047.17"/>
<polygon fill="blue" stroke="blue" points="4313.05,-8050.66 4323.18,-8047.57 4313.33,-8043.67 4313.05,-8050.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge645" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3593.61,-9120.72C3760.89,-9134.89 4103.5,-9152.84 4183,-9071.64 4241.26,-9012.13 4161.18,-8389.37 4211,-8322.64 4237.39,-8287.28 4288.51,-8275.27 4325.25,-8271.31"/>
<polygon fill="blue" stroke="blue" points="4326.04,-8274.76 4335.68,-8270.36 4325.4,-8267.79 4326.04,-8274.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge644" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3593.74,-9118.25C3630.43,-9116.3 3670.94,-9107.9 3701,-9084.64 3719.6,-9070.24 3702.43,-9050.07 3721,-9035.64 3739.8,-9021.02 3762.17,-9011.45 3785.46,-9005.37"/>
<polygon fill="blue" stroke="blue" points="3786.57,-9008.7 3795.48,-9002.97 3784.95,-9001.89 3786.57,-9008.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge710" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3592.63,-9219.55C3760.4,-9217.25 4106.75,-9201.9 4183,-9115.64 4241.39,-9049.58 4158.33,-8393.34 4211,-8322.64 4237.44,-8287.15 4288.78,-8275.17 4325.56,-8271.27"/>
<polygon fill="blue" stroke="blue" points="4326.34,-8274.71 4335.99,-8270.33 4325.72,-8267.74 4326.34,-8274.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge709" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3592.66,-9217.11C3627.6,-9213.64 3667.15,-9206.58 3701,-9192.64 3701.78,-9192.31 3851.67,-9078.85 3918.96,-9027.9"/>
<polygon fill="blue" stroke="blue" points="3921.26,-9030.55 3927.12,-9021.72 3917.03,-9024.97 3921.26,-9030.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="node395" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<g id="a_node395"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CommitmentWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let commitment_system = SystemParams::get_hardcoded...">
<polygon fill="white" stroke="black" points="3979,-11223.64 3925,-11223.64 3925,-11187.64 3979,-11187.64 3979,-11223.64"/>
<text text-anchor="middle" x="3952" y="-11201.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3567.38,-11279.7C3606.38,-11274.19 3656.6,-11266.66 3701,-11258.64 3777.47,-11244.81 3866.32,-11225.09 3914.82,-11214.02"/>
<polygon fill="blue" stroke="blue" points="3915.86,-11217.37 3924.83,-11211.73 3914.3,-11210.55 3915.86,-11217.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node392" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node392"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="4121,-11609.64 3783,-11609.64 3783,-11573.64 4121,-11573.64 4121,-11609.64"/>
<text text-anchor="middle" x="3952" y="-11587.94" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3636.02,-9810.04C3660.83,-9815.19 3684.17,-9825.61 3701,-9844.64 3732.6,-9880.36 3689.32,-11525.98 3721,-11561.64 3735.2,-11577.62 3753.4,-11588.26 3773.34,-11595.09"/>
<polygon fill="blue" stroke="blue" points="3772.34,-11598.45 3782.93,-11598.06 3774.41,-11591.76 3772.34,-11598.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node402" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node402"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="3980,-10326.64 3924,-10326.64 3924,-10290.64 3980,-10290.64 3980,-10326.64"/>
<text text-anchor="middle" x="3952" y="-10304.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3636.24,-9810.69C3660.81,-9815.87 3683.99,-9826.12 3701,-9844.64 3731.41,-9877.73 3692.65,-10213.76 3721,-10248.64 3767.51,-10305.86 3861.15,-10312.43 3913.47,-10311.18"/>
<polygon fill="blue" stroke="blue" points="3913.79,-10314.67 3923.66,-10310.82 3913.55,-10307.67 3913.79,-10314.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node408" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node408"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="3979,-10812.64 3925,-10812.64 3925,-10776.64 3979,-10776.64 3979,-10812.64"/>
<text text-anchor="middle" x="3952" y="-10790.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3636.13,-9810.22C3660.86,-9815.38 3684.13,-9825.76 3701,-9844.64 3735.17,-9882.88 3686.5,-10729.68 3721,-10767.64 3769.58,-10821.07 3863.22,-10812.81 3914.77,-10803.13"/>
<polygon fill="blue" stroke="blue" points="3915.68,-10806.52 3924.8,-10801.13 3914.31,-10799.65 3915.68,-10806.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node407" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node407"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="3980,-10488.64 3924,-10488.64 3924,-10452.64 3980,-10452.64 3980,-10488.64"/>
<text text-anchor="middle" x="3952" y="-10466.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3639.21,-9486.89C3662.78,-9492.26 3684.84,-9502.54 3701,-9520.64 3735.17,-9558.88 3686.5,-10405.68 3721,-10443.64 3769.2,-10496.66 3861.76,-10488.94 3913.56,-10479.36"/>
<polygon fill="blue" stroke="blue" points="3914.52,-10482.73 3923.65,-10477.37 3913.16,-10475.86 3914.52,-10482.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3666.59,-9981.85C3679.55,-9987.72 3691.34,-9995.77 3701,-10006.64 3744.16,-10055.17 3677.73,-11127.19 3721,-11175.64 3769.19,-11229.58 3862.99,-11222.59 3914.67,-11213.62"/>
<polygon fill="blue" stroke="blue" points="3915.53,-11217.02 3924.72,-11211.76 3914.25,-11210.14 3915.53,-11217.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node396" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node396"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_struct: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r1 = sho.get_scalar(); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3987,-11854.64 3917,-11854.64 3917,-11818.64 3987,-11818.64 3987,-11854.64"/>
<text text-anchor="middle" x="3952" y="-11832.94" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3666.65,-9981.79C3679.61,-9987.67 3691.37,-9995.74 3701,-10006.64 3734.17,-10044.16 3687.51,-11772.4 3721,-11809.64 3766.88,-11860.64 3853.77,-11855.65 3906.63,-11846.65"/>
<polygon fill="blue" stroke="blue" points="3907.51,-11850.04 3916.72,-11844.81 3906.26,-11843.16 3907.51,-11850.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="node398" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node398"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3991.5,-11800.64 3912.5,-11800.64 3912.5,-11764.64 3991.5,-11764.64 3991.5,-11800.64"/>
<text text-anchor="middle" x="3952" y="-11778.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3666.65,-9981.79C3679.6,-9987.67 3691.37,-9995.74 3701,-10006.64 3733.13,-10042.97 3688.79,-11716.37 3721,-11752.64 3765.47,-11802.7 3849.21,-11800.38 3902.44,-11792.61"/>
<polygon fill="blue" stroke="blue" points="3903,-11796.07 3912.33,-11791.05 3901.91,-11789.15 3903,-11796.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node401" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node401"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="3979,-10650.64 3925,-10650.64 3925,-10614.64 3979,-10614.64 3979,-10650.64"/>
<text text-anchor="middle" x="3952" y="-10628.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3666.87,-9982.23C3679.69,-9988.04 3691.37,-9995.98 3701,-10006.64 3745.66,-10056.04 3675.92,-10556.62 3721,-10605.64 3769.89,-10658.79 3863.41,-10650.64 3914.86,-10641.05"/>
<polygon fill="blue" stroke="blue" points="3915.73,-10644.45 3924.86,-10639.07 3914.37,-10637.58 3915.73,-10644.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node405" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node405"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="3979,-10380.64 3925,-10380.64 3925,-10344.64 3979,-10344.64 3979,-10380.64"/>
<text text-anchor="middle" x="3952" y="-10358.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3686.77,-9777.84C3691.88,-9781.59 3696.65,-9785.83 3701,-9790.64 3741.71,-9835.52 3679.9,-10291.1 3721,-10335.64 3769.98,-10388.71 3863.46,-10380.59 3914.88,-10371.03"/>
<polygon fill="blue" stroke="blue" points="3915.75,-10374.43 3924.88,-10369.05 3914.39,-10367.56 3915.75,-10374.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node409" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node409"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="3980,-10542.64 3924,-10542.64 3924,-10506.64 3980,-10506.64 3980,-10542.64"/>
<text text-anchor="middle" x="3952" y="-10520.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3643.11,-9866.02C3665.16,-9871.61 3685.67,-9881.68 3701,-9898.64 3745.66,-9948.04 3675.92,-10448.62 3721,-10497.64 3769.51,-10550.37 3861.95,-10542.77 3913.64,-10533.28"/>
<polygon fill="blue" stroke="blue" points="3914.57,-10536.66 3923.72,-10531.31 3913.23,-10529.79 3914.57,-10536.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node415" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node415"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3979,-11032.64 3925,-11032.64 3925,-10996.64 3979,-10996.64 3979,-11032.64"/>
<text text-anchor="middle" x="3952" y="-11010.94" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.28,-9541.78C3570.85,-9533.8 3657.53,-9525.61 3701,-9574.64 3752.97,-9633.25 3668.89,-10926.13 3721,-10984.64 3769.11,-11038.65 3862.94,-11031.63 3914.65,-11022.64"/>
<polygon fill="blue" stroke="blue" points="3915.51,-11026.04 3924.7,-11020.77 3914.23,-11019.16 3915.51,-11026.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node410" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node410"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="3980,-10434.64 3924,-10434.64 3924,-10398.64 3980,-10398.64 3980,-10434.64"/>
<text text-anchor="middle" x="3952" y="-10412.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3597.74,-10076.61C3635.07,-10077.87 3674.96,-10086.94 3701,-10114.64 3742.97,-10159.27 3678.64,-10345.36 3721,-10389.64 3770.53,-10441.41 3862.57,-10434.18 3913.93,-10425.01"/>
<polygon fill="blue" stroke="blue" points="3914.76,-10428.41 3923.93,-10423.11 3913.45,-10421.54 3914.76,-10428.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node390" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node390"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="4075.5,-11663.64 3828.5,-11663.64 3828.5,-11627.64 4075.5,-11627.64 4075.5,-11663.64"/>
<text text-anchor="middle" x="3952" y="-11641.94" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3507.14,-10213.69C3535.77,-10298.9 3656.66,-10669.79 3701,-10984.64 3705.91,-11019.53 3697.17,-11592.68 3721,-11618.64 3745.67,-11645.5 3781.74,-11656.72 3818.03,-11660"/>
<polygon fill="blue" stroke="blue" points="3818.04,-11663.51 3828.26,-11660.72 3818.53,-11656.53 3818.04,-11663.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node404" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node404"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="3979,-10758.64 3925,-10758.64 3925,-10722.64 3979,-10722.64 3979,-10758.64"/>
<text text-anchor="middle" x="3952" y="-10736.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3502.43,-10213.74C3509.45,-10289.54 3547.41,-10583.58 3721,-10713.64 3777.8,-10756.2 3865.65,-10752.89 3914.7,-10746.75"/>
<polygon fill="blue" stroke="blue" points="3915.41,-10750.18 3924.85,-10745.36 3914.47,-10743.25 3915.41,-10750.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3368.29,-9668.69C3334.07,-9664.3 3302.91,-9650.87 3289,-9619.64 3281.51,-9602.82 3281.51,-6986.45 3289,-6969.64 3316.07,-6908.85 3408.5,-6915.49 3461.62,-6924.96"/>
<polygon fill="blue" stroke="blue" points="3461.21,-6928.45 3471.68,-6926.88 3462.51,-6921.57 3461.21,-6928.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node403" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node403"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="3980,-10596.64 3924,-10596.64 3924,-10560.64 3980,-10560.64 3980,-10596.64"/>
<text text-anchor="middle" x="3952" y="-10574.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3944.35,-9511.64C3908.69,-9596.64 3758.59,-9967.02 3711,-10287.64 3706.84,-10315.66 3699.47,-10516.75 3711,-10542.64 3742.81,-10614.05 3854.29,-10601.12 3913.83,-10588.4"/>
<polygon fill="blue" stroke="blue" points="3914.62,-10591.81 3923.62,-10586.21 3913.1,-10584.98 3914.62,-10591.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node411" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node411"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="3987,-11389.64 3917,-11389.64 3917,-11353.64 3987,-11353.64 3987,-11389.64"/>
<text text-anchor="middle" x="3952" y="-11367.94" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge556" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3653.1,-10138.64C3671.36,-10144.6 3688.08,-10154.1 3701,-10168.64 3744.31,-10217.34 3677.58,-11293.03 3721,-11341.64 3766.77,-11392.88 3853.7,-11389.14 3906.59,-11380.95"/>
<polygon fill="blue" stroke="blue" points="3907.41,-11384.36 3916.69,-11379.27 3906.26,-11377.46 3907.41,-11384.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="node412" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node412"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3991.5,-11443.64 3912.5,-11443.64 3912.5,-11407.64 3991.5,-11407.64 3991.5,-11443.64"/>
<text text-anchor="middle" x="3952" y="-11421.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge555" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3653.11,-10138.63C3671.37,-10144.6 3688.08,-10154.1 3701,-10168.64 3746.39,-10219.72 3675.17,-11347.94 3721,-11398.64 3765.84,-11448.22 3849.46,-11444.78 3902.57,-11436.28"/>
<polygon fill="blue" stroke="blue" points="3903.18,-11439.73 3912.44,-11434.59 3902,-11432.83 3903.18,-11439.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node418" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node418"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="3980,-11086.64 3924,-11086.64 3924,-11050.64 3980,-11050.64 3980,-11086.64"/>
<text text-anchor="middle" x="3952" y="-11064.94" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge654" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3564.07,-9590.86C3609.25,-9587.11 3667.76,-9591.15 3701,-9628.64 3753.08,-9687.38 3668.41,-10983.35 3721,-11041.64 3769.13,-11094.98 3862.13,-11087.01 3913.91,-11077.33"/>
<polygon fill="blue" stroke="blue" points="3914.87,-11080.71 3924,-11075.32 3913.5,-11073.84 3914.87,-11080.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge660" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.6,-9925.85C3580.92,-9924.86 3647.72,-9919.69 3701,-9898.64 3945.53,-9802.01 4059.74,-9787.88 4183,-9555.64 4213.98,-9497.27 4166.95,-8415.89 4211,-8366.64 4307.88,-8258.31 4421.85,-8413.82 4535,-8322.64 4738.3,-8158.81 4687.3,-8027.15 4736,-7770.64 4821.91,-7318.08 4847.02,-3788.63 4849.32,-3436"/>
<polygon fill="blue" stroke="blue" points="4852.82,-3435.88 4849.39,-3425.86 4845.82,-3435.84 4852.82,-3435.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge661" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.83,-9933.32C3585.58,-9939.87 3660.48,-9942.29 3701,-9898.64 3751.73,-9843.97 3669.15,-9617.24 3721,-9563.64 3792.69,-9489.53 4112.75,-9596.11 4183,-9520.64 4233.43,-9466.45 4162.71,-8244.73 4211,-8188.64 4237.03,-8158.4 4283.58,-8153.66 4319.25,-8155.29"/>
<polygon fill="blue" stroke="blue" points="4319.27,-8158.8 4329.47,-8155.94 4319.71,-8151.82 4319.27,-8158.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="node389" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<g id="a_node389"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(S::NUM_ATTRS &gt;= 1, &#39; at least one attribute required&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S::NUM_ATTRS &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; mo...">
<polygon fill="white" stroke="black" points="3991.5,-11717.64 3912.5,-11717.64 3912.5,-11681.64 3991.5,-11681.64 3991.5,-11717.64"/>
<text text-anchor="middle" x="3952" y="-11695.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge659" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.78,-9917.68C3585.85,-9910.77 3661.42,-9907.89 3701,-9952.64 3732.65,-9988.43 3689.04,-11637.12 3721,-11672.64 3765.72,-11722.33 3849.38,-11718.86 3902.53,-11710.32"/>
<polygon fill="blue" stroke="blue" points="3903.15,-11713.77 3912.41,-11708.62 3901.96,-11706.87 3903.15,-11713.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="node416" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<g id="a_node416"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = signing_key * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3991.5,-11140.64 3912.5,-11140.64 3912.5,-11104.64 3991.5,-11104.64 3991.5,-11140.64"/>
<text text-anchor="middle" x="3952" y="-11118.94" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge658" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.74,-9917.72C3585.76,-9910.85 3661.29,-9908 3701,-9952.64 3743.21,-10000.09 3678.38,-11048.55 3721,-11095.64 3765.87,-11145.2 3849.49,-11141.77 3902.59,-11133.27"/>
<polygon fill="blue" stroke="blue" points="3903.19,-11136.72 3912.45,-11131.58 3902.01,-11129.82 3903.19,-11136.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node406" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node406"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="3979,-10704.64 3925,-10704.64 3925,-10668.64 3979,-10668.64 3979,-10704.64"/>
<text text-anchor="middle" x="3952" y="-10682.94" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge711" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.08,-10027.52C3663.9,-10033 3685.2,-10043.16 3701,-10060.64 3745.66,-10110.04 3675.92,-10610.62 3721,-10659.64 3769.89,-10712.79 3863.41,-10704.64 3914.86,-10695.05"/>
<polygon fill="blue" stroke="blue" points="3915.73,-10698.45 3924.86,-10693.07 3914.37,-10691.58 3915.73,-10698.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge794" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3652.66,-9710.97C3670.76,-9705.19 3687.55,-9696.19 3701,-9682.64 3750.55,-9632.71 3671.55,-9575.66 3721,-9525.64 3731.71,-9514.8 3744.27,-9506.47 3757.89,-9500.14"/>
<polygon fill="blue" stroke="blue" points="3759.65,-9503.19 3767.49,-9496.07 3756.91,-9496.75 3759.65,-9503.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main(). -->
<g id="node385" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().</title>
<g id="a_node385"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;let mut randomness = [0u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut randomness); &#160;&#160;&#160;&#160;&#160;let secret_params = GenericServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3008,-5585.64 2954,-5585.64 2954,-5549.64 3008,-5549.64 3008,-5585.64"/>
<text text-anchor="middle" x="2981" y="-5563.94" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge831" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3008.11,-5573.96C3066.93,-5586.48 3210.08,-5606.88 3279,-5528.64 3323.52,-5478.1 3251.28,-727.16 3299,-679.64 3592.3,-387.54 4176.35,-705.9 4330.16,-798.15"/>
<polygon fill="blue" stroke="blue" points="4328.46,-801.21 4338.83,-803.38 4332.08,-795.22 4328.46,-801.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge832" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3008.29,-5562.7C3067.5,-5553.28 3211.39,-5540.28 3279,-5620.64 3317.25,-5666.1 3259.79,-9853.99 3299,-9898.64 3335.65,-9940.37 3403.59,-9940.77 3450.02,-9935.03"/>
<polygon fill="blue" stroke="blue" points="3450.74,-9938.46 3460.17,-9933.63 3449.78,-9931.53 3450.74,-9938.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node386" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node386"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4689,-11443.64 4602,-11443.64 4602,-11407.64 4689,-11407.64 4689,-11443.64"/>
<text text-anchor="middle" x="4645.5" y="-11421.94" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4659.08,-11407.37C4707.36,-11336.1 4881.2,-11068.38 4945,-10818.64 5025.29,-10504.36 5073.09,-8038.05 5078.49,-7745.89"/>
<polygon fill="blue" stroke="blue" points="5081.99,-7745.77 5078.67,-7735.7 5074.99,-7745.64 5081.99,-7745.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="node387" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<g id="a_node387"><a xlink:title="pub(crate) fn convert_to_points_receipt_struct( &#160;&#160;&#160;&#160;receipt: receipt_struct::ReceiptStruct, ) &#45;&gt; Vec&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let m1 = receipt.calc_m1(); &#160;...">
<polygon fill="white" stroke="black" points="3620,-11609.64 3380,-11609.64 3380,-11573.64 3620,-11573.64 3620,-11609.64"/>
<text text-anchor="middle" x="3500" y="-11587.94" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_points_receipt_struct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="node413" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<g id="a_node413"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3988.5,-11526.64 3915.5,-11526.64 3915.5,-11490.64 3988.5,-11490.64 3988.5,-11526.64"/>
<text text-anchor="middle" x="3952" y="-11504.94" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3619.06,-11573.6C3646.03,-11569.24 3674.53,-11564.45 3701,-11559.64 3772.76,-11546.58 3855.63,-11529.22 3905.64,-11518.49"/>
<polygon fill="blue" stroke="blue" points="3906.45,-11521.9 3915.49,-11516.38 3904.98,-11515.06 3906.45,-11521.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node388" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node388"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="4429.5,-11677.64 4308.5,-11677.64 4308.5,-11641.64 4429.5,-11641.64 4429.5,-11677.64"/>
<text text-anchor="middle" x="4369" y="-11655.94" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4429.52,-11660.23C4463.31,-11657.79 4504.76,-11649.81 4535,-11627.64 4594.41,-11584.06 4625.09,-11498.22 4637.57,-11453.78"/>
<polygon fill="blue" stroke="blue" points="4641,-11454.5 4640.23,-11443.93 4634.25,-11452.68 4641,-11454.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3991.6,-11711.86C4091.59,-11740.99 4363.13,-11803.7 4535,-11686.64 4614.2,-11632.69 4636.28,-11509.49 4642.3,-11453.84"/>
<polygon fill="blue" stroke="blue" points="4645.81,-11453.95 4643.3,-11443.65 4638.84,-11453.26 4645.81,-11453.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4075.73,-11637.41C4240.68,-11625.95 4515.61,-11605.29 4535,-11593.64 4588.42,-11561.53 4620.67,-11492.18 4635.24,-11453.37"/>
<polygon fill="blue" stroke="blue" points="4638.61,-11454.34 4638.72,-11443.75 4632.03,-11451.96 4638.61,-11454.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4075.55,-11649.77C4148.09,-11652.22 4237.37,-11655.23 4298.07,-11657.28"/>
<polygon fill="blue" stroke="blue" points="4298.19,-11660.78 4308.31,-11657.62 4298.43,-11653.79 4298.19,-11660.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="node414" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<g id="a_node414"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[0u8; std::mem::size_of::&lt;Timestamp&gt;() + std::mem::size_of::&lt;Re...">
<polygon fill="white" stroke="black" points="4425,-11526.64 4313,-11526.64 4313,-11490.64 4425,-11490.64 4425,-11526.64"/>
<text text-anchor="middle" x="4369" y="-11504.94" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4075.67,-11653.1C4112.94,-11649.89 4152.14,-11640.46 4183,-11618.64 4206.04,-11602.34 4189.78,-11580.24 4211,-11561.64 4236.67,-11539.13 4272.27,-11526.1 4303.08,-11518.6"/>
<polygon fill="blue" stroke="blue" points="4303.93,-11521.99 4312.9,-11516.35 4302.37,-11515.17 4303.93,-11521.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node391" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node391"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="3539.5,-11663.64 3460.5,-11663.64 3460.5,-11627.64 3539.5,-11627.64 3539.5,-11663.64"/>
<text text-anchor="middle" x="3500" y="-11641.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge604" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.54,-11650.43C3583.46,-11655.87 3657.39,-11665 3721,-11672.64 3783.53,-11680.14 3855.66,-11688.57 3902.22,-11693.98"/>
<polygon fill="blue" stroke="blue" points="3902,-11697.48 3912.33,-11695.16 3902.8,-11690.53 3902,-11697.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge603" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.54,-11640.84C3583.46,-11635.4 3657.39,-11626.27 3721,-11618.64 3742.2,-11616.09 3764.51,-11613.44 3786.55,-11610.83"/>
<polygon fill="blue" stroke="blue" points="3787.13,-11614.29 3796.65,-11609.64 3786.31,-11607.34 3787.13,-11614.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge602" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.59,-11656.8C3584.41,-11671.66 3657.7,-11702.1 3701,-11752.64 3718.47,-11773.02 3700.04,-11792.86 3721,-11809.64 3773.71,-11851.83 3856.24,-11850.29 3906.78,-11844.23"/>
<polygon fill="blue" stroke="blue" points="3907.29,-11847.69 3916.75,-11842.93 3906.38,-11840.75 3907.29,-11847.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge599" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3530.35,-11663.75C3571.39,-11688.16 3648.99,-11731.05 3721,-11752.64 3781.79,-11770.85 3854.89,-11778.01 3902.11,-11780.82"/>
<polygon fill="blue" stroke="blue" points="3902.18,-11784.33 3912.36,-11781.39 3902.57,-11777.34 3902.18,-11784.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge601" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.68,-11653.49C3585.64,-11660.31 3661.11,-11663.1 3701,-11618.64 3758.23,-11554.85 3666.77,-10913.99 3721,-10847.64 3767.7,-10790.49 3862.52,-10787.52 3914.64,-10790.78"/>
<polygon fill="blue" stroke="blue" points="3914.55,-10794.28 3924.78,-10791.53 3915.06,-10787.3 3914.55,-10794.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge600" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3539.73,-11653.54C3585.74,-11660.41 3661.27,-11663.24 3701,-11618.64 3740.43,-11574.36 3681.18,-10595.56 3721,-10551.64 3769.12,-10498.54 3861.71,-10506.29 3913.53,-10515.9"/>
<polygon fill="blue" stroke="blue" points="3913.15,-10519.39 3923.64,-10517.89 3914.5,-10512.52 3913.15,-10519.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge768" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4121.04,-11597.97C4266.86,-11600.77 4465.23,-11597.27 4535,-11561.64 4581.19,-11538.04 4614.55,-11485.23 4631.6,-11452.8"/>
<polygon fill="blue" stroke="blue" points="4634.75,-11454.34 4636.17,-11443.84 4628.51,-11451.16 4634.75,-11454.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge770" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4121.29,-11609.4C4142.12,-11612.18 4163.08,-11615.27 4183,-11618.64 4221.38,-11625.12 4263.8,-11634.37 4298.33,-11642.44"/>
<polygon fill="blue" stroke="blue" points="4297.78,-11645.91 4308.31,-11644.8 4299.38,-11639.1 4297.78,-11645.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="node420" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<g id="a_node420"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m_from(timestamp: Timestamp) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20220524_Timestamp_Calc_m&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;timestamp.to_be_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4420.5,-11306.64 4317.5,-11306.64 4317.5,-11270.64 4420.5,-11270.64 4420.5,-11306.64"/>
<text text-anchor="middle" x="4369" y="-11284.94" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge769" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4121.13,-11592C4143.65,-11585.94 4165.11,-11576.33 4183,-11561.64 4213.09,-11536.93 4192.06,-11512.65 4211,-11478.64 4247.38,-11413.29 4307.27,-11348.61 4341.6,-11314.14"/>
<polygon fill="blue" stroke="blue" points="4344.31,-11316.39 4348.94,-11306.85 4339.38,-11311.42 4344.31,-11316.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node393" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node393"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="3568.5,-11223.64 3431.5,-11223.64 3431.5,-11187.64 3568.5,-11187.64 3568.5,-11223.64"/>
<text text-anchor="middle" x="3500" y="-11201.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3568.86,-11205.64C3665.27,-11205.64 3838.58,-11205.64 3914.12,-11205.64"/>
<polygon fill="blue" stroke="blue" points="3914.54,-11209.14 3924.54,-11205.64 3914.54,-11202.14 3914.54,-11209.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="node394" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<g id="a_node394"><a xlink:title=" &#160;&#160;&#160;pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY_LEN].co...">
<polygon fill="white" stroke="black" points="4400.5,-11223.64 4337.5,-11223.64 4337.5,-11187.64 4400.5,-11187.64 4400.5,-11223.64"/>
<text text-anchor="middle" x="4369" y="-11201.94" font-family="Helvetica,sans-Serif" font-size="14.00">calc_j3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4400.51,-11209.22C4435.94,-11214.68 4494.66,-11227.93 4535,-11258.64 4583.67,-11295.68 4617.26,-11360.97 4633.44,-11397.99"/>
<polygon fill="blue" stroke="blue" points="4630.41,-11399.8 4637.54,-11407.63 4636.85,-11397.06 4630.41,-11399.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="edge722" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.27,-11205.64C4049.66,-11205.64 4242.83,-11205.64 4327.42,-11205.64"/>
<polygon fill="blue" stroke="blue" points="4327.42,-11209.14 4337.42,-11205.64 4327.42,-11202.14 4327.42,-11209.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3987.28,-11845.68C4085.23,-11869.3 4369.85,-11922.2 4535,-11788.64 4588.4,-11745.44 4627.5,-11531.45 4640.13,-11453.83"/>
<polygon fill="blue" stroke="blue" points="4643.61,-11454.24 4641.74,-11443.81 4636.7,-11453.13 4643.61,-11454.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node397" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node397"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3586,-11800.64 3414,-11800.64 3414,-11764.64 3586,-11764.64 3586,-11800.64"/>
<text text-anchor="middle" x="3500" y="-11778.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3586.03,-11792.79C3626.78,-11792.62 3672.75,-11784.13 3701,-11752.64 3737.68,-11711.74 3685.93,-11300.92 3721,-11258.64 3768.11,-11201.83 3862.76,-11198.72 3914.75,-11201.87"/>
<polygon fill="blue" stroke="blue" points="3914.64,-11205.37 3924.86,-11202.59 3915.14,-11198.39 3914.64,-11205.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3586.13,-11793.19C3626.93,-11798.22 3676.49,-11804.29 3721,-11809.64 3785.57,-11817.39 3860.38,-11826.12 3906.7,-11831.5"/>
<polygon fill="blue" stroke="blue" points="3906.37,-11834.99 3916.7,-11832.67 3907.17,-11828.04 3906.37,-11834.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3586.17,-11782.64C3679.62,-11782.64 3826.39,-11782.64 3902.14,-11782.64"/>
<polygon fill="blue" stroke="blue" points="3902.34,-11786.14 3912.34,-11782.64 3902.34,-11779.14 3902.34,-11786.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge778" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3991.51,-11786.06C4107.32,-11795.56 4449.7,-11817.43 4535,-11752.64 4631,-11679.72 4643.72,-11519.21 4644.78,-11454.01"/>
<polygon fill="blue" stroke="blue" points="4648.29,-11453.71 4644.86,-11443.68 4641.29,-11453.66 4648.29,-11453.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4375.38,-4268.85C4399.34,-4350.92 4496.83,-4694.9 4535,-4984.64 4553.24,-5123.11 4633.55,-7357.33 4643.49,-7635.32"/>
<polygon fill="blue" stroke="blue" points="4639.99,-7635.54 4643.85,-7645.41 4646.99,-7635.29 4639.99,-7635.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node400" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node400"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="4054.5,-4268.64 3849.5,-4268.64 3849.5,-4232.64 4054.5,-4232.64 4054.5,-4268.64"/>
<text text-anchor="middle" x="3952" y="-4246.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge780" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3998.71,-4232.52C4053.68,-4207.98 4143.46,-4158.46 4183,-4083.64 4232.39,-3990.17 4148.1,-3217.59 4211,-3132.64 4233.67,-3102.02 4274.9,-3088.89 4309.42,-3083.36"/>
<polygon fill="blue" stroke="blue" points="4310.01,-3086.81 4319.42,-3081.93 4309.03,-3079.88 4310.01,-3086.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge779" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4054.52,-4250.64C4140.67,-4250.64 4260.13,-4250.64 4323.84,-4250.64"/>
<polygon fill="blue" stroke="blue" points="4323.94,-4254.14 4333.94,-4250.64 4323.94,-4247.14 4323.94,-4254.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.09,-10639.03C4027.37,-10649.11 4130.49,-10662.22 4183,-10605.64 4233.15,-10551.59 4197.62,-10015.14 4211,-9942.64 4293.39,-9496.07 4439.82,-9417.65 4535,-8973.64 4559.81,-8857.9 4509.83,-8815.13 4561.5,-8708.64 4572.16,-8686.66 4591.52,-8667.46 4608.86,-8653.38"/>
<polygon fill="blue" stroke="blue" points="4611.44,-8655.8 4617.16,-8646.89 4607.13,-8650.29 4611.44,-8655.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.08,-10314.65C4029.06,-10323.73 4131.97,-10334.3 4183,-10276.64 4246.26,-10205.15 4142.95,-8625.58 4211,-8558.64 4376.85,-8395.47 4696.46,-8544.75 4809.05,-8605.58"/>
<polygon fill="blue" stroke="blue" points="4807.59,-8608.77 4818.04,-8610.49 4810.94,-8602.62 4807.59,-8608.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980,-10585.32C4028.85,-10595.62 4131.56,-10608.65 4183,-10551.64 4256.07,-10470.66 4133.33,-8665.2 4211,-8588.64 4373.71,-8428.23 4687.23,-8551.45 4804.11,-8606.05"/>
<polygon fill="blue" stroke="blue" points="4802.96,-8609.37 4813.49,-8610.48 4805.95,-8603.04 4802.96,-8609.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.23,-10572.01C4028.97,-10561.96 4130.88,-10549.51 4183,-10605.64 4232.42,-10658.85 4163.53,-11203.68 4211,-11258.64 4234.26,-11285.57 4273.61,-11293.04 4307.1,-11293.8"/>
<polygon fill="blue" stroke="blue" points="4307.27,-11297.3 4317.28,-11293.83 4307.29,-11290.3 4307.27,-11297.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.25,-10747.17C4027.78,-10757.49 4131.31,-10770.97 4183,-10713.64 4221.91,-10670.47 4169.63,-8662.45 4211,-8621.64 4266.13,-8567.24 4512.74,-8604.82 4607.37,-8621.65"/>
<polygon fill="blue" stroke="blue" points="4606.89,-8625.12 4617.35,-8623.45 4608.13,-8618.24 4606.89,-8625.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.06,-10734.28C4027.28,-10724.24 4130.31,-10711.22 4183,-10767.64 4226.59,-10814.3 4186.04,-11282.86 4211,-11341.64 4236.96,-11402.76 4295.79,-11455.16 4333.6,-11484.23"/>
<polygon fill="blue" stroke="blue" points="4331.71,-11487.19 4341.8,-11490.42 4335.93,-11481.6 4331.71,-11487.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.23,-10369.15C4027.74,-10379.46 4131.24,-10392.9 4183,-10335.64 4248.09,-10263.63 4141.81,-8656.72 4211,-8588.64 4262.32,-8538.13 4464.1,-8576.09 4535,-8588.64 4560.12,-8593.08 4587.05,-8602.84 4607.91,-8611.61"/>
<polygon fill="blue" stroke="blue" points="4606.77,-8614.93 4617.34,-8615.68 4609.54,-8608.5 4606.77,-8614.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.11,-10360.89C4023.15,-10358.96 4114.14,-10359.46 4183,-10389.64 4371.8,-10472.36 4435.29,-10511.22 4535,-10691.64 4604.27,-10816.98 4635.81,-11278.15 4642.91,-11397.36"/>
<polygon fill="blue" stroke="blue" points="4639.42,-11397.72 4643.5,-11407.5 4646.41,-11397.31 4639.42,-11397.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge528" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.29,-10692.93C4027.42,-10702.72 4129.66,-10715.16 4183,-10659.64 4211.1,-10630.38 4201.92,-10335.17 4211,-10295.64 4299.07,-9912.1 4455.02,-9856.94 4535,-9471.64 4552.24,-9388.58 4526.97,-8786.12 4561.5,-8708.64 4571.67,-8685.81 4591.67,-8666.22 4609.49,-8652.13"/>
<polygon fill="blue" stroke="blue" points="4611.64,-8654.9 4617.48,-8646.06 4607.4,-8649.32 4611.64,-8654.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge529" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.24,-10684.56C4072.32,-10678.81 4388.94,-10673.22 4535,-10847.64 4606.64,-10933.19 4635.76,-11293.82 4642.75,-11397.59"/>
<polygon fill="blue" stroke="blue" points="4639.26,-11397.87 4643.41,-11407.62 4646.25,-11397.41 4639.26,-11397.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge574" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980,-10477.32C4028.85,-10487.62 4131.56,-10500.65 4183,-10443.64 4256.29,-10362.41 4133.09,-8551.44 4211,-8474.64 4294.08,-8392.73 4631.87,-8422.02 4736,-8474.64 4788.3,-8501.06 4822.42,-8564.2 4838.57,-8600.9"/>
<polygon fill="blue" stroke="blue" points="4835.52,-8602.66 4842.66,-8610.5 4841.96,-8599.93 4835.52,-8602.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge573" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3923.65,-10463.9C3874.73,-10453.69 3772.53,-10440.97 3721,-10497.64 3686.98,-10535.05 3721.83,-11361.56 3701,-11407.64 3667.89,-11480.89 3590.25,-11538.15 3542.03,-11568.25"/>
<polygon fill="blue" stroke="blue" points="3540.08,-11565.34 3533.38,-11573.55 3543.74,-11571.3 3540.08,-11565.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge613" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.23,-10799.47C4025.5,-10806.43 4122.42,-10813.84 4183,-10767.64 4514.66,-10514.67 4450.75,-10306.15 4535,-9897.64 4561.69,-9768.21 4508.46,-8829.67 4561.5,-8708.64 4571.53,-8685.74 4591.53,-8666.15 4609.38,-8652.08"/>
<polygon fill="blue" stroke="blue" points="4611.53,-8654.85 4617.38,-8646.02 4607.3,-8649.27 4611.53,-8654.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge614" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.36,-10791.69C4028.1,-10787.89 4131.95,-10787.77 4183,-10847.64 4242.41,-10917.29 4150.29,-11190.11 4211,-11258.64 4234.6,-11285.27 4273.95,-11292.75 4307.35,-11293.58"/>
<polygon fill="blue" stroke="blue" points="4307.48,-11297.08 4317.5,-11293.64 4307.52,-11290.08 4307.48,-11297.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge708" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.01,-10531.33C4028.85,-10541.62 4131.57,-10554.66 4183,-10497.64 4258.28,-10414.17 4130.97,-8553.56 4211,-8474.64 4294.06,-8392.71 4631.87,-8422.02 4736,-8474.64 4788.3,-8501.06 4822.42,-8564.2 4838.57,-8600.9"/>
<polygon fill="blue" stroke="blue" points="4835.52,-8602.66 4842.66,-8610.5 4841.96,-8599.93 4835.52,-8602.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge707" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.25,-10517.99C4029.02,-10507.92 4130.98,-10495.43 4183,-10551.64 4236.4,-10609.33 4159.71,-11199.06 4211,-11258.64 4234.22,-11285.6 4273.57,-11293.08 4307.06,-11293.83"/>
<polygon fill="blue" stroke="blue" points="4307.24,-11297.33 4317.25,-11293.86 4307.26,-11290.33 4307.24,-11297.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge783" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.01,-10423.32C4028.85,-10433.62 4131.56,-10446.65 4183,-10389.64 4257.1,-10307.5 4132.23,-8476.3 4211,-8398.64 4252.54,-8357.68 4686.46,-8367.84 4736,-8398.64 4808.38,-8443.63 4835.97,-8549.9 4845.29,-8600.67"/>
<polygon fill="blue" stroke="blue" points="4841.86,-8601.37 4847.01,-8610.63 4848.76,-8600.18 4841.86,-8601.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge782" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3923.65,-10409.9C3874.72,-10399.68 3772.52,-10386.96 3721,-10443.64 3686.39,-10481.71 3719.96,-11321.8 3701,-11369.64 3666.64,-11456.3 3581.96,-11530.69 3534.54,-11567.33"/>
<polygon fill="blue" stroke="blue" points="3532.26,-11564.67 3526.43,-11573.51 3536.5,-11570.24 3532.26,-11564.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3987.29,-11374.31C4099.51,-11383.08 4456.31,-11410.94 4591.71,-11421.51"/>
<polygon fill="blue" stroke="blue" points="4591.59,-11425.01 4601.83,-11422.3 4592.13,-11418.03 4591.59,-11425.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3991.66,-11425.64C4108.38,-11425.64 4457.41,-11425.64 4591.36,-11425.64"/>
<polygon fill="blue" stroke="blue" points="4591.76,-11429.14 4601.76,-11425.64 4591.76,-11422.14 4591.76,-11429.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3988.74,-11508.64C4058.53,-11508.64 4213.83,-11508.64 4302.54,-11508.64"/>
<polygon fill="blue" stroke="blue" points="4302.75,-11512.14 4312.75,-11508.64 4302.75,-11505.14 4302.75,-11512.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge743" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4425.22,-11491.94C4473.89,-11477.22 4544.3,-11455.93 4592.11,-11441.48"/>
<polygon fill="blue" stroke="blue" points="4593.39,-11444.75 4601.95,-11438.5 4591.37,-11438.04 4593.39,-11444.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3979.14,-11019.3C4025.68,-11026.03 4123.6,-11032.86 4183,-10984.64 4212.25,-10960.89 4182.24,-10928.97 4211,-10904.64 4244.49,-10876.3 4296.74,-10872.71 4331.65,-10874.08"/>
<polygon fill="blue" stroke="blue" points="4331.71,-10877.59 4341.89,-10874.64 4332.1,-10870.6 4331.71,-10877.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3991.75,-11121.2C4107.49,-11117.65 4447.95,-11112.91 4535,-11175.64 4609.27,-11229.15 4633.8,-11344.27 4641.37,-11397.54"/>
<polygon fill="blue" stroke="blue" points="4637.93,-11398.17 4642.71,-11407.62 4644.86,-11397.25 4637.93,-11398.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node417" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node417"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="3557.5,-11086.64 3442.5,-11086.64 3442.5,-11050.64 3557.5,-11050.64 3557.5,-11086.64"/>
<text text-anchor="middle" x="3500" y="-11064.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3557.51,-11061.62C3601.94,-11056.12 3665.41,-11048.31 3721,-11041.64 3789.51,-11033.41 3869.54,-11024.08 3914.85,-11018.82"/>
<polygon fill="blue" stroke="blue" points="3915.25,-11022.3 3924.78,-11017.67 3914.44,-11015.34 3915.25,-11022.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3557.51,-11075.65C3601.94,-11081.15 3665.41,-11088.96 3721,-11095.64 3783.53,-11103.14 3855.66,-11111.57 3902.22,-11116.98"/>
<polygon fill="blue" stroke="blue" points="3902,-11120.48 3912.33,-11118.16 3902.8,-11113.53 3902,-11120.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3557.54,-11068.64C3650.76,-11068.64 3834.27,-11068.64 3913.31,-11068.64"/>
<polygon fill="blue" stroke="blue" points="3913.75,-11072.14 3923.75,-11068.64 3913.75,-11065.14 3913.75,-11072.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3980.01,-11069.06C4023.81,-11068.97 4112.55,-11065.5 4183,-11041.64 4241.4,-11021.85 4301.38,-10981.87 4336.64,-10955.95"/>
<polygon fill="blue" stroke="blue" points="4339.12,-10958.46 4345.05,-10949.68 4334.94,-10952.84 4339.12,-10958.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m(). -->
<g id="node419" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().</title>
<g id="a_node419"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m_from(self.timestamp) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3984,-11306.64 3920,-11306.64 3920,-11270.64 3984,-11270.64 3984,-11306.64"/>
<text text-anchor="middle" x="3952" y="-11284.94" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3984.19,-11288.64C4052.71,-11288.64 4217.39,-11288.64 4307.15,-11288.64"/>
<polygon fill="blue" stroke="blue" points="4307.19,-11292.14 4317.19,-11288.64 4307.19,-11285.14 4307.19,-11292.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4410.7,-11306.74C4444.31,-11321.91 4493.12,-11344.42 4535,-11365.64 4558.08,-11377.33 4583.43,-11391.16 4603.93,-11402.59"/>
<polygon fill="blue" stroke="blue" points="4602.25,-11405.66 4612.69,-11407.49 4605.67,-11399.55 4602.25,-11405.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node421" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node421"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="4028,-6101.64 3876,-6101.64 3876,-6065.64 4028,-6065.64 4028,-6101.64"/>
<text text-anchor="middle" x="3952" y="-6079.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4028.16,-6097.77C4079.66,-6102.69 4145.26,-6098.66 4183,-6056.64 4237.27,-5996.2 4163.32,-3198.39 4211,-3132.64 4233.36,-3101.79 4274.6,-3088.68 4309.2,-3083.2"/>
<polygon fill="blue" stroke="blue" points="4309.82,-3086.65 4319.23,-3081.79 4308.84,-3079.72 4309.82,-3086.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4028.15,-6083.64C4114.36,-6083.64 4252.86,-6083.64 4323.48,-6083.64"/>
<polygon fill="blue" stroke="blue" points="4323.8,-6087.14 4333.8,-6083.64 4323.8,-6080.14 4323.8,-6087.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node422" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node422"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4028,-6047.64 3876,-6047.64 3876,-6011.64 4028,-6011.64 4028,-6047.64"/>
<text text-anchor="middle" x="3952" y="-6025.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4028.01,-6042.65C4079.62,-6046.89 4145.4,-6042.04 4183,-5999.64 4235.84,-5940.05 4164.24,-3197.11 4211,-3132.64 4233.37,-3101.8 4274.61,-3088.68 4309.21,-3083.2"/>
<polygon fill="blue" stroke="blue" points="4309.82,-3086.65 4319.23,-3081.8 4308.85,-3079.72 4309.82,-3086.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4028.17,-6037.92C4073.13,-6043.01 4131.38,-6049.84 4183,-6056.64 4231.24,-6062.99 4286.42,-6071.16 4323.87,-6076.84"/>
<polygon fill="blue" stroke="blue" points="4323.53,-6080.33 4333.94,-6078.37 4324.58,-6073.41 4323.53,-6080.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4373.13,-6101.65C4400.93,-6261.69 4605.39,-7438.54 4639.64,-7635.66"/>
<polygon fill="blue" stroke="blue" points="4636.2,-7636.28 4641.36,-7645.53 4643.09,-7635.08 4636.2,-7636.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node424" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node424"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="4051.5,-3234.64 3852.5,-3234.64 3852.5,-3198.64 4051.5,-3198.64 4051.5,-3234.64"/>
<text text-anchor="middle" x="3952" y="-3212.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.68,-3225.37C4095.44,-3224.42 4145.41,-3216.21 4183,-3189.64 4206.04,-3173.34 4189.78,-3151.24 4211,-3132.64 4238.33,-3108.67 4276.91,-3095.46 4308.99,-3088.21"/>
<polygon fill="blue" stroke="blue" points="4310.1,-3091.56 4319.16,-3086.06 4308.65,-3084.71 4310.1,-3091.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.63,-3231.63C4097.97,-3232.78 4150.12,-3224.53 4183,-3189.64 4257.49,-3110.57 4132.02,-2776.21 4211,-2701.64 4315.7,-2602.77 4392.81,-2678.89 4535,-2701.64 4627.85,-2716.49 4679.61,-2692.39 4736,-2767.64 4776.67,-2821.9 4715.15,-3323.51 4756,-3377.64 4766.65,-3391.74 4784,-3399.34 4800.88,-3403.39"/>
<polygon fill="blue" stroke="blue" points="4800.22,-3406.83 4810.72,-3405.39 4801.61,-3399.97 4800.22,-3406.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.7,-3208.28C4095.34,-3209.34 4145.21,-3217.52 4183,-3243.64 4205.24,-3259 4189.18,-3281.68 4211,-3297.64 4245.8,-3323.08 4296.43,-3327.55 4330.71,-3327.15"/>
<polygon fill="blue" stroke="blue" points="4330.88,-3330.65 4340.79,-3326.89 4330.7,-3323.65 4330.88,-3330.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.61,-3216.64C4137.9,-3216.64 4259.24,-3216.64 4323.7,-3216.64"/>
<polygon fill="blue" stroke="blue" points="4323.92,-3220.14 4333.92,-3216.64 4323.92,-3213.14 4323.92,-3220.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.77,-3231.49C4098,-3232.56 4150.01,-3224.29 4183,-3189.64 4246.57,-3122.84 4143.63,-2838.6 4211,-2775.64 4316.2,-2677.31 4420.15,-2688.77 4535,-2775.64 4593.63,-2819.98 4629.89,-3053.16 4640.91,-3134.56"/>
<polygon fill="blue" stroke="blue" points="4637.46,-3135.13 4642.25,-3144.58 4644.4,-3134.2 4637.46,-3135.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.57,-3227.59C4092.29,-3232.28 4139.95,-3237.97 4183,-3243.64 4234.7,-3250.44 4294.36,-3259.34 4331.64,-3265.02"/>
<polygon fill="blue" stroke="blue" points="4331.58,-3268.55 4341.99,-3266.6 4332.63,-3261.63 4331.58,-3268.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.73,-3201.55C4098.09,-3200.38 4150.24,-3208.63 4183,-3243.64 4224.96,-3288.47 4170.68,-3749.32 4211,-3795.64 4238.45,-3827.16 4287.95,-3831.97 4324.05,-3830.59"/>
<polygon fill="blue" stroke="blue" points="4324.53,-3834.07 4334.32,-3830.03 4324.14,-3827.08 4324.53,-3834.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4051.51,-3201.49C4097.96,-3200.26 4150.25,-3208.48 4183,-3243.64 4229.17,-3293.2 4166.17,-3801.85 4211,-3852.64 4240.24,-3885.75 4294.11,-3888.06 4330.5,-3885.1"/>
<polygon fill="blue" stroke="blue" points="4331.11,-3888.56 4340.72,-3884.1 4330.43,-3881.59 4331.11,-3888.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node425" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node425"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="4020.5,-3450.64 3883.5,-3450.64 3883.5,-3414.64 4020.5,-3414.64 4020.5,-3450.64"/>
<text text-anchor="middle" x="3952" y="-3428.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4020.55,-3445.07C4072.31,-3450.37 4141.66,-3447.59 4183,-3405.64 4225.81,-3362.2 4172.95,-3180.3 4211,-3132.64 4234.5,-3103.19 4275.04,-3090 4309.04,-3084.14"/>
<polygon fill="blue" stroke="blue" points="4310.01,-3087.54 4319.35,-3082.55 4308.94,-3080.62 4310.01,-3087.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4020.68,-3445.42C4072.69,-3450.97 4142.31,-3448.36 4183,-3405.64 4245.98,-3339.51 4144.26,-3057.97 4211,-2995.64 4263.62,-2946.49 4463.78,-2985.07 4535,-2995.64 4627.35,-3009.34 4678.09,-2983.41 4736,-3056.64 4780.34,-3112.69 4712.11,-3321.23 4756,-3377.64 4766.85,-3391.58 4784.25,-3399.15 4801.1,-3403.22"/>
<polygon fill="blue" stroke="blue" points="4800.41,-3406.66 4810.91,-3405.24 4801.82,-3399.8 4800.41,-3406.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3961.83,-3450.81C3995.35,-3520.44 4116.14,-3777.44 4183,-4000.64 4201.21,-4061.42 4165.53,-4096.38 4211,-4140.64 4242.48,-4171.27 4295.33,-4174.29 4330.91,-4172.16"/>
<polygon fill="blue" stroke="blue" points="4331.2,-4175.65 4340.91,-4171.4 4330.67,-4168.67 4331.2,-4175.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3960.95,-3451.11C3991.27,-3521.81 4102,-3782.18 4183,-4000.64 4196.53,-4037.14 4181.66,-4058.05 4211,-4083.64 4244.17,-4112.56 4296.5,-4117.16 4331.51,-4116.47"/>
<polygon fill="blue" stroke="blue" points="4331.92,-4119.96 4341.79,-4116.11 4331.67,-4112.97 4331.92,-4119.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3959.97,-3450.67C3984.22,-3510.83 4071.13,-3705.81 4211,-3795.64 4244.82,-3817.35 4290.62,-3824.1 4324.02,-3825.86"/>
<polygon fill="blue" stroke="blue" points="4324.27,-3829.37 4334.4,-3826.27 4324.55,-3822.38 4324.27,-3829.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3958.16,-3450.74C3978.05,-3517.02 4056.52,-3748.05 4211,-3852.64 4246.44,-3876.63 4296.41,-3881.48 4330.38,-3881.57"/>
<polygon fill="blue" stroke="blue" points="4330.86,-3885.06 4340.81,-3881.44 4330.77,-3878.06 4330.86,-3885.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential(). -->
<g id="node426" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().</title>
<g id="a_node426"><a xlink:title="fn test_room_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; RoomCredential&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair = Blindin...">
<polygon fill="white" stroke="black" points="4032,-3126.64 3872,-3126.64 3872,-3090.64 4032,-3090.64 4032,-3126.64"/>
<text text-anchor="middle" x="3952" y="-3104.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_room_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge558" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4032.03,-3121.38C4082.57,-3124.66 4145.47,-3118.8 4183,-3078.64 4251.71,-3005.1 4137.67,-2695.56 4211,-2626.64 4315.92,-2528.01 4393.23,-2601.37 4535,-2626.64 4628.72,-2643.34 4680.4,-2623.37 4736,-2700.64 4779.96,-2761.72 4710.76,-3317.5 4756,-3377.64 4766.62,-3391.76 4783.97,-3399.36 4800.86,-3403.41"/>
<polygon fill="blue" stroke="blue" points="4800.2,-3406.85 4810.69,-3405.41 4801.59,-3399.99 4800.2,-3406.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge557" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4032.15,-3121.25C4082.58,-3124.42 4145.3,-3118.49 4183,-3078.64 4240.73,-3017.6 4149.44,-2758.8 4211,-2701.64 4316.53,-2603.66 4422.02,-2612.35 4535,-2701.64 4604.15,-2756.28 4634.26,-3042.46 4642.23,-3134.26"/>
<polygon fill="blue" stroke="blue" points="4638.77,-3134.8 4643.1,-3144.46 4645.74,-3134.2 4638.77,-3134.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node427" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node427"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="4175,-3288.64 3729,-3288.64 3729,-3252.64 4175,-3252.64 4175,-3288.64"/>
<text text-anchor="middle" x="3952" y="-3266.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge621" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4171.65,-3252.48C4175.58,-3249.76 4179.37,-3246.82 4183,-3243.64 4221.24,-3210.08 4176.46,-3170 4211,-3132.64 4236.22,-3105.35 4275.95,-3092.11 4309.13,-3085.68"/>
<polygon fill="blue" stroke="blue" points="4309.96,-3089.09 4319.19,-3083.9 4308.73,-3082.2 4309.96,-3089.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge619" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4173.42,-3252.61C4176.76,-3249.84 4179.96,-3246.85 4183,-3243.64 4254.54,-3167.89 4135.16,-2847.07 4211,-2775.64 4315.82,-2676.9 4391.63,-2762.2 4535,-2775.64 4625.52,-2784.12 4676.76,-2744.67 4736,-2813.64 4776.86,-2861.2 4718.16,-3327.64 4756,-3377.64 4766.66,-3391.73 4784.02,-3399.32 4800.9,-3403.38"/>
<polygon fill="blue" stroke="blue" points="4800.24,-3406.81 4810.73,-3405.38 4801.63,-3399.95 4800.24,-3406.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge620" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4111.44,-3288.64C4135.43,-3291.54 4159.88,-3294.59 4183,-3297.64 4234.33,-3304.39 4293.51,-3313.21 4330.84,-3318.9"/>
<polygon fill="blue" stroke="blue" points="4330.35,-3322.36 4340.76,-3320.42 4331.41,-3315.44 4330.35,-3322.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge623" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4111.44,-3252.63C4135.43,-3249.73 4159.88,-3246.68 4183,-3243.64 4231.24,-3237.28 4286.42,-3229.11 4323.87,-3223.43"/>
<polygon fill="blue" stroke="blue" points="4324.58,-3226.86 4333.94,-3221.9 4323.53,-3219.94 4324.58,-3226.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge625" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4173.37,-3252.57C4176.73,-3249.81 4179.95,-3246.83 4183,-3243.64 4243.77,-3179.99 4146.61,-2908.62 4211,-2848.64 4316.36,-2750.48 4417.6,-2765.24 4535,-2848.64 4629.33,-2915.64 4643.07,-3070.17 4644.6,-3134.12"/>
<polygon fill="blue" stroke="blue" points="4641.1,-3134.33 4644.75,-3144.28 4648.1,-3134.23 4641.1,-3134.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge622" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4175.08,-3270.64C4236.12,-3270.64 4295.47,-3270.64 4331.86,-3270.64"/>
<polygon fill="blue" stroke="blue" points="4331.94,-3274.14 4341.94,-3270.64 4331.94,-3267.14 4331.94,-3274.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge618" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4173.43,-3288.64C4176.77,-3291.42 4179.97,-3294.41 4183,-3297.64 4258.96,-3378.35 4137.99,-3712.24 4211,-3795.64 4238.53,-3827.09 4288.02,-3831.91 4324.1,-3830.56"/>
<polygon fill="blue" stroke="blue" points="4324.56,-3834.04 4334.35,-3829.99 4324.18,-3827.05 4324.56,-3834.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge624" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4173.91,-3289C4177.08,-3291.68 4180.12,-3294.55 4183,-3297.64 4225.19,-3342.72 4170.03,-3806.44 4211,-3852.64 4240.31,-3885.69 4294.17,-3888.01 4330.53,-3885.07"/>
<polygon fill="blue" stroke="blue" points="4331.13,-3888.53 4340.74,-3884.08 4330.45,-3881.57 4331.13,-3888.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node428" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node428"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4139.5,-3396.64 3764.5,-3396.64 3764.5,-3360.64 4139.5,-3360.64 4139.5,-3396.64"/>
<text text-anchor="middle" x="3952" y="-3374.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge650" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4139.64,-3379.14C4155.72,-3372.84 4170.57,-3363.94 4183,-3351.64 4252.74,-3282.61 4148.83,-3208.55 4211,-3132.64 4234.79,-3103.59 4275.12,-3090.38 4308.95,-3084.42"/>
<polygon fill="blue" stroke="blue" points="4309.89,-3087.81 4319.21,-3082.79 4308.79,-3080.9 4309.89,-3087.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge652" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4139.52,-3380.16C4155.78,-3373.71 4170.7,-3364.49 4183,-3351.64 4242.3,-3289.65 4148.18,-3025.05 4211,-2966.64 4316.45,-2868.57 4391.34,-2956.68 4535,-2966.64 4624.98,-2972.87 4675.03,-2928.17 4736,-2994.64 4764.81,-3026.04 4730,-3343.87 4756,-3377.64 4766.78,-3391.64 4784.16,-3399.22 4801.03,-3403.28"/>
<polygon fill="blue" stroke="blue" points="4800.35,-3406.72 4810.85,-3405.29 4801.75,-3399.86 4800.35,-3406.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge649" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4139.7,-3376.57C4155.99,-3383.11 4170.86,-3392.5 4183,-3405.64 4238.47,-3465.65 4157.16,-4079.15 4211,-4140.64 4240.19,-4173.96 4294.32,-4176.15 4330.75,-4173.13"/>
<polygon fill="blue" stroke="blue" points="4331.38,-4176.58 4340.98,-4172.1 4330.68,-4169.61 4331.38,-4176.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge648" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4139.66,-3376.61C4155.95,-3383.14 4170.84,-3392.52 4183,-3405.64 4234.26,-3460.93 4161.76,-4026.54 4211,-4083.64 4240.28,-4117.59 4295.13,-4120.63 4331.61,-4118.26"/>
<polygon fill="blue" stroke="blue" points="4332.16,-4121.73 4341.84,-4117.42 4331.59,-4114.75 4332.16,-4121.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge653" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4139.53,-3377.1C4155.79,-3383.55 4170.71,-3392.77 4183,-3405.64 4243.04,-3468.45 4153.26,-3730.7 4211,-3795.64 4238.78,-3826.87 4288.22,-3831.74 4324.22,-3830.45"/>
<polygon fill="blue" stroke="blue" points="4324.65,-3833.93 4334.45,-3829.91 4324.28,-3826.94 4324.65,-3833.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge651" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4139.65,-3376.98C4155.89,-3383.46 4170.77,-3392.72 4183,-3405.64 4251.44,-3477.9 4144.51,-3778.57 4211,-3852.64 4240.51,-3885.51 4294.32,-3887.87 4330.61,-3885"/>
<polygon fill="blue" stroke="blue" points="4331.19,-3888.46 4340.81,-3884.02 4330.52,-3881.49 4331.19,-3888.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node429" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node429"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="4017.5,-3180.64 3886.5,-3180.64 3886.5,-3144.64 4017.5,-3144.64 4017.5,-3180.64"/>
<text text-anchor="middle" x="3952" y="-3158.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge725" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4017.93,-3158.1C4064.28,-3154.11 4127.9,-3147.12 4183,-3135.64 4225.94,-3126.69 4273.26,-3112.28 4309.29,-3100.32"/>
<polygon fill="blue" stroke="blue" points="4310.78,-3103.51 4319.14,-3097.02 4308.55,-3096.88 4310.78,-3103.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge726" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4017.61,-3172.36C4068.07,-3176.23 4137.09,-3172.85 4183,-3135.64 4213.24,-3111.12 4181.42,-3077.95 4211,-3052.64 4239.28,-3028.43 4281.21,-3022.22 4314.63,-3021.76"/>
<polygon fill="blue" stroke="blue" points="4314.69,-3025.26 4324.7,-3021.79 4314.71,-3018.26 4314.69,-3025.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node430" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node430"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3989,-3342.64 3915,-3342.64 3915,-3306.64 3989,-3306.64 3989,-3342.64"/>
<text text-anchor="middle" x="3952" y="-3320.94" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge764" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.26,-3332.76C4040.31,-3341.82 4132.74,-3349.14 4183,-3297.64 4230.07,-3249.4 4161.19,-3041.04 4211,-2995.64 4317.42,-2898.63 4432.89,-2894.09 4535,-2995.64 4558.51,-3019.02 4559.81,-7737.52 4561.5,-7770.64 4578.2,-8097.92 4627.06,-8493.08 4640.84,-8600.53"/>
<polygon fill="blue" stroke="blue" points="4637.39,-8601.1 4642.14,-8610.57 4644.33,-8600.2 4637.39,-8601.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge765" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.05,-3332.88C4040.27,-3342.23 4133.38,-3350.04 4183,-3297.64 4251.74,-3225.04 4138.14,-2917.09 4211,-2848.64 4404.33,-2666.98 4655.06,-2880 4736,-3132.64 4756.17,-3195.59 4751.69,-7826.66 4756,-7892.64 4774.14,-8170.14 4828.19,-8503.07 4844.67,-8600.55"/>
<polygon fill="blue" stroke="blue" points="4841.24,-8601.23 4846.36,-8610.51 4848.14,-8600.06 4841.24,-8601.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge762" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.1,-3324.64C4067.33,-3324.64 4251.79,-3324.64 4330.9,-3324.64"/>
<polygon fill="blue" stroke="blue" points="4330.91,-3328.14 4340.91,-3324.64 4330.91,-3321.14 4330.91,-3328.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge767" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.29,-3320.69C4034.65,-3315.69 4114.64,-3306.63 4183,-3297.64 4234.7,-3290.83 4294.36,-3281.93 4331.64,-3276.25"/>
<polygon fill="blue" stroke="blue" points="4332.63,-3279.64 4341.99,-3274.67 4331.58,-3272.72 4332.63,-3279.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge763" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989,-3332.84C4040.17,-3342.14 4133.22,-3349.88 4183,-3297.64 4245.69,-3231.84 4144.57,-2951.66 4211,-2889.64 4263.63,-2840.5 4481.9,-2841.01 4535,-2889.64 4584.36,-2934.83 4540.47,-3126.1 4561.5,-3189.64 4575.09,-3230.7 4603.3,-3272.25 4623.04,-3298.19"/>
<polygon fill="blue" stroke="blue" points="4620.48,-3300.61 4629.37,-3306.37 4626.02,-3296.32 4620.48,-3300.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge766" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.04,-3316.39C4040.26,-3307.05 4133.36,-3299.25 4183,-3351.64 4251,-3423.4 4145.63,-3721.47 4211,-3795.64 4238.64,-3826.99 4288.11,-3831.83 4324.15,-3830.51"/>
<polygon fill="blue" stroke="blue" points="4324.6,-3833.99 4334.4,-3829.96 4324.22,-3827 4324.6,-3833.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge761" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3989.09,-3316.35C4040.37,-3306.95 4133.55,-3299.07 4183,-3351.64 4259.41,-3432.85 4136.79,-3769.41 4211,-3852.64 4240.4,-3885.61 4294.23,-3887.95 4330.57,-3885.04"/>
<polygon fill="blue" stroke="blue" points="4331.16,-3888.5 4340.77,-3884.05 4330.48,-3881.53 4331.16,-3888.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node431" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node431"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="3114.5,-142.64 2847.5,-142.64 2847.5,-106.64 3114.5,-106.64 3114.5,-142.64"/>
<text text-anchor="middle" x="2981" y="-120.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge671" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3114.71,-118.41C3311.3,-110.62 3661.1,-102.81 3701,-143.64 3756,-199.9 3668.6,-5749.94 3721,-5808.64 3769.09,-5862.51 3862.93,-5854.07 3914.64,-5844.25"/>
<polygon fill="blue" stroke="blue" points="3915.59,-5847.62 3924.7,-5842.21 3914.21,-5840.76 3915.59,-5847.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge670" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3022.84,-142.65C3155.32,-203.79 3572,-418.11 3701,-747.64 3713.95,-780.71 3697.34,-5836.14 3721,-5862.64 3767.32,-5914.51 3856.05,-5908.61 3908.73,-5899.33"/>
<polygon fill="blue" stroke="blue" points="3909.58,-5902.73 3918.76,-5897.44 3908.29,-5895.85 3909.58,-5902.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge674" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.7,-142.68C3128.87,-164.11 3231.37,-207.49 3279,-287.64 3318.96,-354.88 3247.42,-5860.83 3299,-5919.64 3338.87,-5965.09 3415.86,-5961.53 3461.81,-5954.39"/>
<polygon fill="blue" stroke="blue" points="3462.68,-5957.79 3471.96,-5952.67 3461.51,-5950.89 3462.68,-5957.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge675" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3074,-106.6C3247.96,-74.92 3615.37,-20.3 3701,-105.64 3756.58,-161.02 3668.75,-5696.1 3721,-5754.64 3769.09,-5808.51 3862.93,-5800.07 3914.64,-5790.25"/>
<polygon fill="blue" stroke="blue" points="3915.59,-5793.62 3924.7,-5788.21 3914.21,-5786.76 3915.59,-5793.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge673" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.7,-142.69C3128.86,-164.11 3231.36,-207.5 3279,-287.64 3315.23,-348.57 3277.18,-5324.19 3299,-5391.64 3333.67,-5498.79 3426.14,-5599.78 3472.18,-5645.31"/>
<polygon fill="blue" stroke="blue" points="3469.83,-5647.9 3479.42,-5652.39 3474.72,-5642.9 3469.83,-5647.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge672" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3033.54,-106.55C3218.83,-45.16 3857.44,134.43 4183,-181.64 4274.45,-270.42 4345.57,-680.74 4363.57,-793.11"/>
<polygon fill="blue" stroke="blue" points="4360.17,-794 4365.19,-803.33 4367.08,-792.9 4360.17,-794"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node432" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node432"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="3693,-4643.64 3307,-4643.64 3307,-4607.64 3693,-4607.64 3693,-4643.64"/>
<text text-anchor="middle" x="3500" y="-4621.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3689.98,-4643.84C3693.82,-4646.52 3697.51,-4649.45 3701,-4652.64 3730.31,-4679.37 3691.63,-4712.96 3721,-4739.64 3762.7,-4777.5 3827.48,-4782.94 3877.69,-4780.09"/>
<polygon fill="blue" stroke="blue" points="3878.11,-4783.57 3887.84,-4779.39 3877.63,-4776.59 3878.11,-4783.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3690.78,-4643.74C3694.36,-4646.46 3697.77,-4649.42 3701,-4652.64 3746.78,-4698.24 3674.83,-4751.43 3721,-4796.64 3770.32,-4844.92 3856.92,-4840.59 3908.63,-4832.49"/>
<polygon fill="blue" stroke="blue" points="3909.51,-4835.89 3918.79,-4830.78 3908.35,-4828.99 3909.51,-4835.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3692.16,-4607.41C3695.27,-4604.71 3698.22,-4601.79 3701,-4598.64 3735.06,-4559.88 3686.02,-921.57 3721,-883.64 3755.93,-845.76 4131.74,-848.9 4183,-843.64 4229.32,-838.88 4282.05,-832.51 4319.33,-827.85"/>
<polygon fill="blue" stroke="blue" points="4319.93,-831.31 4329.42,-826.59 4319.06,-824.36 4319.93,-831.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node433" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node433"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="3641.5,-4589.64 3358.5,-4589.64 3358.5,-4553.64 3641.5,-4553.64 3641.5,-4589.64"/>
<text text-anchor="middle" x="3500" y="-4567.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge508" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.53,-4556.96C3733.73,-4547.33 3848.07,-4535.39 3908.67,-4529.06"/>
<polygon fill="blue" stroke="blue" points="3909.41,-4532.5 3918.99,-4527.98 3908.68,-4525.54 3909.41,-4532.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge507" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.73,-4571.31C3663.09,-4566.18 3683.72,-4557.8 3701,-4544.64 3719.05,-4530.87 3702.83,-4511.24 3721,-4497.64 3777.82,-4455.09 3865.66,-4458.39 3914.71,-4464.53"/>
<polygon fill="blue" stroke="blue" points="3914.47,-4468.03 3924.85,-4465.91 3915.41,-4461.09 3914.47,-4468.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge504" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.54,-4586.94C3661.62,-4590.19 3681.92,-4594.06 3701,-4598.64 3710.16,-4600.83 3711.82,-4603.52 3721,-4605.64 3787.87,-4621.07 3867.83,-4627.92 3913.69,-4630.78"/>
<polygon fill="blue" stroke="blue" points="3913.57,-4634.28 3923.76,-4631.38 3913.98,-4627.29 3913.57,-4634.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge503" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.53,-4573.82C3736.7,-4575.3 3855.45,-4577.15 3914.35,-4578.06"/>
<polygon fill="blue" stroke="blue" points="3914.58,-4581.57 3924.63,-4578.22 3914.68,-4574.57 3914.58,-4581.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge506" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.69,-4570.46C3663.31,-4575.71 3684.03,-4584.52 3701,-4598.64 3722.93,-4616.89 3698.91,-4641.58 3721,-4659.64 3773.56,-4702.61 3856.86,-4700.64 3907.47,-4694.32"/>
<polygon fill="blue" stroke="blue" points="3908.01,-4697.78 3917.44,-4692.96 3907.06,-4690.84 3908.01,-4697.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge510" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.56,-4576.4C3663.91,-4570.94 3684.92,-4561.13 3701,-4544.64 3758.41,-4485.72 3663.08,-4419.05 3721,-4360.64 3756.41,-4324.92 3812.14,-4317.66 3859.87,-4319.58"/>
<polygon fill="blue" stroke="blue" points="3859.75,-4323.08 3869.92,-4320.12 3860.13,-4316.09 3859.75,-4323.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge505" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.75,-4574.98C3663.74,-4569.58 3684.58,-4560.16 3701,-4544.64 3735.2,-4512.29 3688.33,-4474.52 3721,-4440.64 3765.13,-4394.87 3840.25,-4385.11 3892.59,-4384.52"/>
<polygon fill="blue" stroke="blue" points="3892.74,-4388.02 3902.74,-4384.52 3892.74,-4381.02 3892.74,-4388.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge509" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3641.73,-4578.05C3664.42,-4572.52 3685.5,-4562.27 3701,-4544.64 3734.92,-4506.04 3685.25,-882.53 3721,-845.64 3762.25,-803.06 4174.92,-814.36 4318.82,-819.65"/>
<polygon fill="blue" stroke="blue" points="4318.98,-823.16 4329.11,-820.03 4319.24,-816.16 4318.98,-823.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node434" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node434"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="3578,-4697.64 3422,-4697.64 3422,-4661.64 3578,-4661.64 3578,-4697.64"/>
<text text-anchor="middle" x="3500" y="-4675.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge719" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3512.37,-4697.96C3541.06,-4742.35 3621.22,-4855.6 3721,-4904.64 3783.4,-4935.3 3866.44,-4936.86 3913.77,-4934.64"/>
<polygon fill="blue" stroke="blue" points="3914.08,-4938.13 3923.87,-4934.08 3913.69,-4931.14 3914.08,-4938.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge713" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3558.85,-4697.74C3602.92,-4710.96 3665.3,-4728.46 3721,-4739.64 3772.94,-4750.05 3832.23,-4757.69 3877.61,-4762.65"/>
<polygon fill="blue" stroke="blue" points="3877.34,-4766.14 3887.65,-4763.73 3878.09,-4759.18 3877.34,-4766.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge716" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3517.39,-4697.77C3551.33,-4733.96 3633.48,-4814.79 3721,-4850.64 3782.05,-4875.64 3859.33,-4879.69 3906.95,-4879.36"/>
<polygon fill="blue" stroke="blue" points="3907.28,-4882.86 3917.23,-4879.22 3907.18,-4875.86 3907.28,-4882.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge717" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3527.01,-4697.65C3566.8,-4724.2 3646.06,-4773.22 3721,-4796.64 3784.51,-4816.48 3862.02,-4821.95 3908.89,-4823.34"/>
<polygon fill="blue" stroke="blue" points="3908.9,-4826.84 3918.98,-4823.59 3909.07,-4819.84 3908.9,-4826.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge714" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3578.01,-4690.69C3620.35,-4692.12 3670.35,-4685.37 3701,-4652.64 3745.45,-4605.16 3676.14,-4407.73 3721,-4360.64 3755.82,-4324.08 3811.82,-4316.89 3859.84,-4319.05"/>
<polygon fill="blue" stroke="blue" points="3859.77,-4322.56 3869.96,-4319.65 3860.18,-4315.57 3859.77,-4322.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge715" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3578.19,-4690.41C3620.32,-4691.67 3670.05,-4684.85 3701,-4652.64 3733.78,-4618.51 3689.83,-4476.24 3721,-4440.64 3763.14,-4392.51 3839.4,-4383.37 3892.51,-4383.56"/>
<polygon fill="blue" stroke="blue" points="3892.75,-4387.07 3902.8,-4383.72 3892.85,-4380.07 3892.75,-4387.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge718" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3578.3,-4691.38C3621,-4693.13 3671.28,-4686.45 3701,-4652.64 3735.28,-4613.63 3685.63,-951.66 3721,-913.64 3756.07,-875.93 4132.4,-887.15 4183,-877.64 4230.38,-868.73 4282.84,-852.18 4319.76,-839.38"/>
<polygon fill="blue" stroke="blue" points="4321,-842.65 4329.27,-836.04 4318.68,-836.05 4321,-842.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node435" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node435"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="3692,-4535.64 3308,-4535.64 3308,-4499.64 3692,-4499.64 3692,-4535.64"/>
<text text-anchor="middle" x="3500" y="-4513.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge739" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3692.17,-4520.61C3772.62,-4521.86 3858.98,-4523.2 3908.83,-4523.98"/>
<polygon fill="blue" stroke="blue" points="3908.84,-4527.48 3918.89,-4524.14 3908.95,-4520.48 3908.84,-4527.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge742" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3673.37,-4499.63C3762,-4490.38 3862.17,-4479.91 3914.58,-4474.44"/>
<polygon fill="blue" stroke="blue" points="3915.13,-4477.9 3924.72,-4473.38 3914.41,-4470.94 3915.13,-4477.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge740" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3657.43,-4535.64C3672.23,-4538.28 3686.95,-4541.26 3701,-4544.64 3710.16,-4546.83 3711.82,-4549.52 3721,-4551.64 3788.42,-4567.19 3869.13,-4574.03 3914.8,-4576.85"/>
<polygon fill="blue" stroke="blue" points="3914.62,-4580.34 3924.81,-4577.43 3915.03,-4573.36 3914.62,-4580.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge741" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3512.78,-4499.61C3549.65,-4442.03 3662.62,-4256.13 3701,-4083.64 3710.88,-4039.22 3688.73,-839.71 3721,-807.64 3804.29,-724.85 4183.01,-786.61 4319.11,-812.04"/>
<polygon fill="blue" stroke="blue" points="4318.77,-815.54 4329.24,-813.95 4320.06,-808.66 4318.77,-815.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node436" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node436"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="3052,-9046.64 2910,-9046.64 2910,-9010.64 3052,-9010.64 3052,-9046.64"/>
<text text-anchor="middle" x="2981" y="-9024.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.04,-9044.91C3120.7,-9056.24 3222.96,-9059.92 3279,-8998.64 3312.14,-8962.39 3264.08,-7265.17 3299,-7230.64 3426.05,-7105.02 3535.93,-7162.26 3701,-7230.64 3812.23,-7276.71 3899.78,-7398.95 3934.64,-7453.59"/>
<polygon fill="blue" stroke="blue" points="3931.87,-7455.76 3940.15,-7462.36 3937.79,-7452.03 3931.87,-7455.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.26,-9025.24C3159.53,-9020.05 3361.25,-9010.3 3452.3,-9005.89"/>
<polygon fill="blue" stroke="blue" points="3452.51,-9009.39 3462.33,-9005.41 3452.17,-9002.4 3452.51,-9009.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.03,-9013.97C3118.47,-9004.41 3217.1,-9002.16 3279,-9055.64 3307.71,-9080.44 3270.83,-9113.21 3299,-9138.64 3343.67,-9178.95 3418.41,-9177.33 3462.77,-9171.89"/>
<polygon fill="blue" stroke="blue" points="3463.39,-9175.34 3472.83,-9170.53 3462.45,-9168.4 3463.39,-9175.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.05,-9012.48C3119.7,-9001.42 3220.3,-8997.73 3279,-9055.64 3309.38,-9085.61 3269.28,-9216.01 3299,-9246.64 3332.96,-9281.62 3389.1,-9286.55 3433.27,-9283.76"/>
<polygon fill="blue" stroke="blue" points="3433.65,-9287.24 3443.35,-9282.98 3433.11,-9280.26 3433.65,-9287.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.16,-9018.99C3115.75,-9013.79 3209.82,-9015.21 3279,-9055.64 3292.52,-9063.53 3285.66,-9076.44 3299,-9084.64 3327.75,-9102.29 3363.17,-9110.48 3396.17,-9113.83"/>
<polygon fill="blue" stroke="blue" points="3396.06,-9117.34 3406.32,-9114.72 3396.67,-9110.36 3396.06,-9117.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.18,-9012.89C3119.45,-9002.31 3219.32,-8999.12 3279,-9055.64 3323.68,-9097.95 3255.25,-9149.36 3299,-9192.64 3324.5,-9217.87 3361.6,-9227.23 3396.94,-9229.39"/>
<polygon fill="blue" stroke="blue" points="3397.2,-9232.9 3407.34,-9229.83 3397.49,-9225.91 3397.2,-9232.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.1,-9011.65C3120.55,-8999.71 3222.42,-8995.13 3279,-9055.64 3311,-9089.85 3267.75,-9863.73 3299,-9898.64 3336.04,-9940.01 3403.89,-9940.5 3450.19,-9934.87"/>
<polygon fill="blue" stroke="blue" points="3450.87,-9938.31 3460.31,-9933.51 3449.93,-9931.38 3450.87,-9938.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node437" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node437"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="3082.5,-9154.64 2879.5,-9154.64 2879.5,-9118.64 3082.5,-9118.64 3082.5,-9154.64"/>
<text text-anchor="middle" x="2981" y="-9132.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.46,-9154.65C3125.89,-9166.01 3224.19,-9168.96 3279,-9109.64 3311.65,-9074.29 3264.78,-7411.46 3299,-7377.64 3471.41,-7207.2 3804.12,-7388.79 3914.45,-7456.99"/>
<polygon fill="blue" stroke="blue" points="3912.89,-7460.13 3923.22,-7462.46 3916.59,-7454.19 3912.89,-7460.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3082.6,-9142.28C3199.03,-9148.81 3384.74,-9159.23 3462.69,-9163.6"/>
<polygon fill="blue" stroke="blue" points="3462.77,-9167.11 3472.95,-9164.17 3463.16,-9160.12 3462.77,-9167.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3082.59,-9130.26C3145.79,-9131.63 3225.25,-9143.9 3279,-9189.64 3299.45,-9207.03 3278.19,-9229.68 3299,-9246.64 3336.09,-9276.86 3390.52,-9282.52 3433.23,-9281.23"/>
<polygon fill="blue" stroke="blue" points="3433.43,-9284.72 3443.26,-9280.79 3433.12,-9277.73 3433.43,-9284.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3078.25,-9154.69C3141,-9166.2 3224.73,-9181.07 3299,-9192.64 3330.86,-9197.6 3365.67,-9202.48 3397.18,-9206.7"/>
<polygon fill="blue" stroke="blue" points="3396.91,-9210.2 3407.29,-9208.05 3397.84,-9203.26 3396.91,-9210.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3082.7,-9125.14C3148.9,-9123.71 3231.73,-9134.78 3279,-9189.64 3330.44,-9249.34 3246.3,-9840.04 3299,-9898.64 3336.14,-9939.93 3403.96,-9940.44 3450.23,-9934.84"/>
<polygon fill="blue" stroke="blue" points="3450.9,-9938.28 3460.34,-9933.48 3449.96,-9931.34 3450.9,-9938.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node438" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node438"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="3109.5,-9100.64 2852.5,-9100.64 2852.5,-9064.64 3109.5,-9064.64 3109.5,-9100.64"/>
<text text-anchor="middle" x="2981" y="-9078.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge678" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.47,-9100.66C3125.9,-9112.02 3224.2,-9114.97 3279,-9055.64 3312.68,-9019.17 3263.7,-7303.54 3299,-7268.64 3362.52,-7205.82 3617.13,-7237.86 3701,-7268.64 3803.56,-7306.27 3892.89,-7406.68 3931.15,-7454.55"/>
<polygon fill="blue" stroke="blue" points="3928.55,-7456.89 3937.49,-7462.58 3934.04,-7452.56 3928.55,-7456.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge679" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3109.57,-9070.87C3164.98,-9071.44 3228.6,-9080.18 3279,-9109.64 3292.52,-9117.53 3285.66,-9130.44 3299,-9138.64 3349.37,-9169.56 3420.21,-9171.45 3462.66,-9169.15"/>
<polygon fill="blue" stroke="blue" points="3463.06,-9172.63 3472.82,-9168.48 3462.61,-9165.64 3463.06,-9172.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge677" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.3,-9064.6C3134.62,-9056.17 3223.93,-9057.48 3279,-9109.64 3323.68,-9151.95 3255.25,-9203.36 3299,-9246.64 3333.55,-9280.81 3389.37,-9285.88 3433.27,-9283.35"/>
<polygon fill="blue" stroke="blue" points="3433.57,-9286.84 3443.29,-9282.63 3433.07,-9279.86 3433.57,-9286.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge680" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3080.42,-9064.62C3144.34,-9058.81 3225.42,-9063.35 3279,-9109.64 3307.71,-9134.44 3270.83,-9167.21 3299,-9192.64 3325.39,-9216.46 3362.29,-9225.64 3397.22,-9228.04"/>
<polygon fill="blue" stroke="blue" points="3397.33,-9231.55 3407.49,-9228.56 3397.68,-9224.56 3397.33,-9231.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge676" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.26,-9064.63C3126.52,-9053.53 3224.05,-9050.97 3279,-9109.64 3308.98,-9141.64 3269.73,-9865.99 3299,-9898.64 3336.08,-9939.98 3403.92,-9940.48 3450.21,-9934.86"/>
<polygon fill="blue" stroke="blue" points="3450.88,-9938.3 3460.32,-9933.5 3449.94,-9931.36 3450.88,-9938.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node439" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node439"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="3100.5,-9756.64 2861.5,-9756.64 2861.5,-9720.64 3100.5,-9720.64 3100.5,-9756.64"/>
<text text-anchor="middle" x="2981" y="-9734.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.5,-9756.69C3125.96,-9768.07 3224.27,-9771.04 3279,-9711.64 3321.91,-9665.05 3257.11,-7479.14 3299,-7431.64 3327.58,-7399.23 3375.04,-7391.78 3416.56,-7392.76"/>
<polygon fill="blue" stroke="blue" points="3416.56,-7396.26 3426.69,-7393.17 3416.84,-7389.27 3416.56,-7396.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.5,-9756.68C3125.95,-9768.06 3224.27,-9771.03 3279,-9711.64 3320.9,-9666.16 3258.1,-7532.01 3299,-7485.64 3327.05,-7453.83 3373.27,-7446.07 3414.22,-7446.72"/>
<polygon fill="blue" stroke="blue" points="3414.12,-7450.21 3424.23,-7447.04 3414.35,-7443.22 3414.12,-7450.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3058.01,-9756.65C3126.33,-9767.85 3224.12,-9770.54 3279,-9711.64 3316.99,-9670.86 3284.17,-8762.36 3299,-8708.64 3399.66,-8344.05 3481.44,-8262.32 3721,-7969.64 3919.93,-7726.59 4229.45,-7501.04 4332.96,-7428.7"/>
<polygon fill="blue" stroke="blue" points="4335.27,-7431.35 4341.47,-7422.77 4331.27,-7425.61 4335.27,-7431.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.77,-9720.59C3126.17,-9709.29 3224.22,-9706.45 3279,-9765.64 3335.35,-9826.51 3244.45,-11196.14 3299,-11258.64 3328.93,-11292.92 3379.81,-11300.18 3422.77,-11298.99"/>
<polygon fill="blue" stroke="blue" points="3423.09,-11302.48 3432.93,-11298.55 3422.79,-11295.48 3423.09,-11302.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3100.6,-9728.49C3157.6,-9728.67 3225.08,-9736.64 3279,-9765.64 3291.53,-9772.37 3286.62,-9783.63 3299,-9790.64 3315.89,-9800.2 3334.83,-9806.88 3354.15,-9811.49"/>
<polygon fill="blue" stroke="blue" points="3353.45,-9814.92 3363.97,-9813.66 3354.95,-9808.09 3353.45,-9814.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3064.46,-9720.62C3131.5,-9711.25 3223.74,-9711.25 3279,-9765.64 3308.79,-9794.95 3269.86,-9922.68 3299,-9952.64 3306.5,-9960.34 3315.07,-9966.59 3324.36,-9971.62"/>
<polygon fill="blue" stroke="blue" points="3322.95,-9974.82 3333.47,-9976.07 3326.02,-9968.54 3322.95,-9974.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3100.61,-9744.37C3160.64,-9747.27 3235.06,-9750.87 3303.28,-9754.17"/>
<polygon fill="blue" stroke="blue" points="3303.14,-9757.67 3313.3,-9754.66 3303.48,-9750.68 3303.14,-9757.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3082.71,-9720.61C3146.16,-9715.22 3225.85,-9720.25 3279,-9765.64 3306.54,-9789.15 3271.97,-9820.52 3299,-9844.64 3312.79,-9856.94 3329.38,-9865.32 3347.04,-9870.87"/>
<polygon fill="blue" stroke="blue" points="3346.37,-9874.31 3356.95,-9873.67 3348.28,-9867.58 3346.37,-9874.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3068.58,-9720.62C3134.83,-9712.28 3223.91,-9713.68 3279,-9765.64 3322.49,-9806.65 3256.41,-9856.69 3299,-9898.64 3338.25,-9937.3 3404.75,-9938.65 3450.2,-9933.94"/>
<polygon fill="blue" stroke="blue" points="3450.89,-9937.38 3460.42,-9932.75 3450.08,-9930.43 3450.89,-9937.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3100.61,-9731.98C3170.65,-9728.05 3260.3,-9723.02 3336.82,-9718.73"/>
<polygon fill="blue" stroke="blue" points="3337.25,-9722.21 3347.04,-9718.16 3336.86,-9715.22 3337.25,-9722.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node440" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node440"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="3045,-9648.64 2917,-9648.64 2917,-9612.64 3045,-9612.64 3045,-9648.64"/>
<text text-anchor="middle" x="2981" y="-9626.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.2,-9639.67C3108.73,-9645.53 3207.25,-9645.56 3279,-9603.64 3292.52,-9595.74 3285.66,-9582.83 3299,-9574.64 3349.37,-9543.71 3420.21,-9541.82 3462.66,-9544.12"/>
<polygon fill="blue" stroke="blue" points="3462.61,-9547.63 3472.82,-9544.79 3463.06,-9540.64 3462.61,-9547.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.14,-9627.09C3141.23,-9621.7 3323.76,-9611.46 3425.62,-9605.75"/>
<polygon fill="blue" stroke="blue" points="3426.04,-9609.23 3435.82,-9605.18 3425.64,-9602.24 3426.04,-9609.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.1,-9615.46C3112.84,-9603.3 3218.83,-9596.99 3279,-9657.64 3316.85,-9695.78 3261.99,-9859.67 3299,-9898.64 3337.14,-9938.78 3404.41,-9939.65 3450.31,-9934.44"/>
<polygon fill="blue" stroke="blue" points="3450.86,-9937.89 3460.34,-9933.16 3449.98,-9930.95 3450.86,-9937.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node441" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node441"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="3078,-9594.64 2884,-9594.64 2884,-9558.64 3078,-9558.64 3078,-9594.64"/>
<text text-anchor="middle" x="2981" y="-9572.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge596" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3063.28,-9594.67C3131.47,-9604.5 3226,-9604.74 3279,-9546.64 3299.97,-9523.65 3290.27,-7336.5 3299,-7306.64 3334.52,-7185.15 3430.74,-7064.93 3475.5,-7013.57"/>
<polygon fill="blue" stroke="blue" points="3478.25,-7015.75 3482.23,-7005.93 3472.99,-7011.13 3478.25,-7015.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge595" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3062.96,-9594.64C3131.2,-9604.53 3225.96,-9604.87 3279,-9546.64 3329.39,-9491.31 3249.54,-6908.8 3299,-6852.64 3337.1,-6809.37 3408.86,-6810.57 3455.26,-6816.95"/>
<polygon fill="blue" stroke="blue" points="3454.92,-6820.43 3465.33,-6818.47 3455.96,-6813.51 3454.92,-6820.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge597" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3063.29,-9594.68C3131.5,-9604.52 3226.03,-9604.77 3279,-9546.64 3327.38,-9493.54 3251.52,-7014.54 3299,-6960.64 3338.96,-6915.27 3415.92,-6918.79 3461.85,-6925.91"/>
<polygon fill="blue" stroke="blue" points="3461.54,-6929.41 3471.98,-6927.62 3462.7,-6922.51 3461.54,-6929.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge593" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3062.96,-9594.64C3131.2,-9604.53 3225.96,-9604.88 3279,-9546.64 3330.4,-9490.2 3248.55,-6855.93 3299,-6798.64 3329.72,-6763.75 3382.31,-6757.77 3425.85,-6760.11"/>
<polygon fill="blue" stroke="blue" points="3425.63,-6763.6 3435.85,-6760.79 3426.12,-6756.62 3425.63,-6763.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge598" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3063.27,-9594.66C3131.47,-9604.49 3225.99,-9604.73 3279,-9546.64 3319.61,-9502.13 3256.2,-7420.04 3299,-7377.64 3432.99,-7244.87 4027.82,-7339.89 4267.46,-7384.73"/>
<polygon fill="blue" stroke="blue" points="4267.09,-7388.22 4277.56,-7386.63 4268.38,-7381.34 4267.09,-7388.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge592" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3078.09,-9566.81C3139.09,-9564.9 3217.78,-9570.72 3279,-9603.64 3291.53,-9610.37 3286.62,-9621.63 3299,-9628.64 3317.16,-9638.92 3337.7,-9645.88 3358.53,-9650.5"/>
<polygon fill="blue" stroke="blue" points="3357.93,-9653.95 3368.43,-9652.53 3359.34,-9647.09 3357.93,-9653.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge594" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3061.32,-9558.62C3128.98,-9548.39 3223.81,-9547.17 3279,-9603.64 3324.92,-9650.63 3254.11,-9850.66 3299,-9898.64 3336.83,-9939.07 3404.18,-9939.87 3450.18,-9934.56"/>
<polygon fill="blue" stroke="blue" points="3450.76,-9938.02 3460.23,-9933.27 3449.86,-9931.07 3450.76,-9938.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node442" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node442"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="3196.5,-9702.64 2765.5,-9702.64 2765.5,-9666.64 3196.5,-9666.64 3196.5,-9702.64"/>
<text text-anchor="middle" x="2981" y="-9680.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge655" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.5,-9702.69C3125.96,-9714.07 3224.27,-9717.04 3279,-9657.64 3321.91,-9611.05 3254.02,-7422.22 3299,-7377.64 3432.96,-7244.84 4027.81,-7339.88 4267.45,-7384.72"/>
<polygon fill="blue" stroke="blue" points="4267.08,-7388.21 4277.56,-7386.62 4268.38,-7381.33 4267.08,-7388.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge657" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3064.46,-9666.62C3131.5,-9657.25 3223.74,-9657.25 3279,-9711.64 3308.79,-9740.95 3269.86,-9868.68 3299,-9898.64 3337.5,-9938.21 3404.38,-9939.3 3450.12,-9934.28"/>
<polygon fill="blue" stroke="blue" points="3450.61,-9937.75 3460.11,-9933.05 3449.76,-9930.8 3450.61,-9937.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge656" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3196.76,-9695.02C3243.83,-9697.3 3292.9,-9699.67 3337.47,-9701.82"/>
<polygon fill="blue" stroke="blue" points="3337.34,-9705.32 3347.5,-9702.31 3337.68,-9698.33 3337.34,-9705.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption(). -->
<g id="node443" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().</title>
<g id="a_node443"><a xlink:title="fn test_blob_encryption() { &#160;&#160;&#160;&#160;let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1); &#160;&#160;&#160;&#160;let group_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::groups::GroupSecretParams::derive_from_m...">
<polygon fill="white" stroke="black" points="3061.5,-9810.64 2900.5,-9810.64 2900.5,-9774.64 3061.5,-9774.64 3061.5,-9810.64"/>
<text text-anchor="middle" x="2981" y="-9788.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_blob_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge744" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3061.83,-9782.26C3130.3,-9778.3 3226.04,-9785.49 3279,-9845.64 3308.63,-9879.28 3266.52,-10217.73 3299,-10248.64 3334.58,-10282.49 4148.06,-10283.15 4183,-10248.64 4228.04,-10204.14 4202.06,-8032.31 4211,-7969.64 4241.19,-7757.96 4327.51,-7513.34 4357.55,-7432.29"/>
<polygon fill="blue" stroke="blue" points="4360.87,-7433.39 4361.08,-7422.8 4354.31,-7430.95 4360.87,-7433.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node444" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node444"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="3016.5,-11338.64 2945.5,-11338.64 2945.5,-11302.64 3016.5,-11302.64 3016.5,-11338.64"/>
<text text-anchor="middle" x="2981" y="-11316.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2989.17,-11302.32C3028.01,-11202 3213.92,-10708.28 3279,-10285.64 3285.47,-10243.62 3270.6,-9552.28 3299,-9520.64 3312.93,-9505.12 3331.19,-9495.35 3351.01,-9489.51"/>
<polygon fill="blue" stroke="blue" points="3352.06,-9492.85 3360.86,-9486.95 3350.3,-9486.08 3352.06,-9492.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2988.41,-11302.53C3023.59,-11202.37 3194.82,-10705.37 3279,-10285.64 3286.52,-10248.12 3272.19,-10141.93 3299,-10114.64 3323.14,-10090.07 3358.22,-10080.38 3392.29,-10077.78"/>
<polygon fill="blue" stroke="blue" points="3392.56,-10081.27 3402.34,-10077.21 3392.16,-10074.28 3392.56,-10081.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2990.33,-11302.51C3050.13,-11172.39 3413.68,-10381.3 3486.36,-10223.14"/>
<polygon fill="blue" stroke="blue" points="3489.72,-10224.2 3490.72,-10213.65 3483.36,-10221.28 3489.72,-10224.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2988.04,-11302.45C3021.25,-11201.86 3183.75,-10703 3279,-10285.64 3284.87,-10259.92 3280.02,-10186.96 3299,-10168.64 3310.06,-10157.95 3323.21,-10150.14 3337.4,-10144.53"/>
<polygon fill="blue" stroke="blue" points="3338.63,-10147.81 3346.87,-10141.15 3336.27,-10141.22 3338.63,-10147.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2988.8,-11302.61C3026.09,-11202.83 3206.69,-10707.58 3279,-10285.64 3285.26,-10249.1 3273.78,-9979.8 3299,-9952.64 3336.68,-9912.05 3404.06,-9911.29 3450.11,-9916.64"/>
<polygon fill="blue" stroke="blue" points="3449.81,-9920.13 3460.17,-9917.95 3450.71,-9913.19 3449.81,-9920.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2988.6,-11302.57C3024.82,-11202.6 3200.65,-10706.5 3279,-10285.64 3288.19,-10236.29 3264.32,-10096.93 3299,-10060.64 3312.77,-10046.22 3330.3,-10036.88 3349.23,-10031.07"/>
<polygon fill="blue" stroke="blue" points="3350.21,-10034.43 3358.93,-10028.42 3348.37,-10027.68 3350.21,-10034.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node445" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node445"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="3067,-11392.64 2895,-11392.64 2895,-11356.64 3067,-11356.64 3067,-11392.64"/>
<text text-anchor="middle" x="2981" y="-11370.94" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge553" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2992.22,-11392.83C3026.36,-11451.49 3143.18,-11635.67 3299,-11701.64 3508.24,-11790.22 3790.22,-11738.65 3902.21,-11712.26"/>
<polygon fill="blue" stroke="blue" points="3903.29,-11715.6 3912.2,-11709.87 3901.66,-11708.79 3903.29,-11715.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge552" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2993.68,-11392.79C3030.43,-11447.99 3150.13,-11613.65 3299,-11672.64 3465.1,-11738.45 3522.59,-11682.24 3701,-11672.64 3739.12,-11670.58 3780.36,-11666.78 3818.15,-11662.67"/>
<polygon fill="blue" stroke="blue" points="3818.63,-11666.14 3828.19,-11661.56 3817.86,-11659.18 3818.63,-11666.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge547" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3045.54,-11392.71C3203.68,-11435.91 3608.81,-11535.14 3701,-11445.64 3755.07,-11393.13 3670.09,-10823.2 3721,-10767.64 3769.79,-10714.39 3863.35,-10722.57 3914.83,-10732.19"/>
<polygon fill="blue" stroke="blue" points="3914.35,-10735.67 3924.84,-10734.18 3915.71,-10728.8 3914.35,-10735.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge549" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3067.11,-11385.34C3247.71,-11407.1 3656.47,-11450.9 3701,-11407.64 3756.33,-11353.88 3668.91,-10770.53 3721,-10713.64 3769.77,-10660.37 3863.33,-10668.56 3914.82,-10678.19"/>
<polygon fill="blue" stroke="blue" points="3914.35,-10681.66 3924.84,-10680.18 3915.71,-10674.8 3914.35,-10681.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge554" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3067.16,-11380.52C3247.85,-11392.11 3656.79,-11413.14 3701,-11369.64 3735.54,-11335.65 3688.38,-10533.47 3721,-10497.64 3769.23,-10444.65 3861.78,-10452.35 3913.57,-10461.92"/>
<polygon fill="blue" stroke="blue" points="3913.17,-10465.41 3923.66,-10463.91 3914.52,-10458.55 3913.17,-10465.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge550" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3067.19,-11372.23C3255.22,-11366.73 3690.06,-11352.84 3701,-11341.64 3735.87,-11305.94 3687.42,-10480.55 3721,-10443.64 3769.21,-10390.63 3861.77,-10398.34 3913.56,-10407.92"/>
<polygon fill="blue" stroke="blue" points="3913.17,-10411.41 3923.66,-10409.91 3914.52,-10404.54 3913.17,-10411.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge551" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3020.93,-11392.75C3079.66,-11418.97 3195.1,-11466.27 3299,-11483.64 3387.11,-11498.36 3630.97,-11539.1 3701,-11483.64 3731.42,-11459.54 3692.04,-11424.47 3721,-11398.64 3771.67,-11353.45 3855.57,-11356.13 3906.81,-11363.18"/>
<polygon fill="blue" stroke="blue" points="3906.51,-11366.68 3916.92,-11364.69 3907.54,-11359.75 3906.51,-11366.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge548" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3012.1,-11392.66C3066.86,-11424.27 3187.45,-11488.56 3299,-11511.64 3473.96,-11547.83 3545.33,-11599.32 3701,-11511.64 3715.94,-11503.22 3707.1,-11488.69 3721,-11478.64 3774.62,-11439.85 3852.13,-11428.91 3902.05,-11426.11"/>
<polygon fill="blue" stroke="blue" points="3902.43,-11429.6 3912.26,-11425.63 3902.11,-11422.61 3902.43,-11429.6"/>
</g>
</g>
</svg>
