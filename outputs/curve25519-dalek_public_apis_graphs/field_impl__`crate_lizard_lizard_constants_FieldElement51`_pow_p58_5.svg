<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="2988pt" height="4232pt"
 viewBox="0.00 0.00 2988.00 4232.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 4228)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-4228 2984,-4228 2984,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2463.5,-253 2463.5,-328 2726.5,-328 2726.5,-253 2463.5,-253"/>
<text text-anchor="middle" x="2595" y="-312.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2647,-1109 2647,-1184 2972,-1184 2972,-1109 2647,-1109"/>
<text text-anchor="middle" x="2809.5" y="-1168.8" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2456.5,-3019 2456.5,-3094 2587.5,-3094 2587.5,-3019 2456.5,-3019"/>
<text text-anchor="middle" x="2522" y="-3078.8" font-family="Helvetica,sans-Serif" font-size="14.00">jacobi_quartic.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1792,-2828 1792,-3011 2627,-3011 2627,-2828 1792,-2828"/>
<text text-anchor="middle" x="2209.5" y="-2995.8" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_ristretto.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2194,-336 2194,-411 2316,-411 2316,-336 2194,-336"/>
<text text-anchor="middle" x="2255" y="-395.8" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1847.5,-1076 1847.5,-1259 2353,-1259 2353,-1076 1847.5,-1076"/>
<text text-anchor="middle" x="2100.25" y="-1243.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1878,-403 1878,-478 1988,-478 1988,-403 1878,-403"/>
<text text-anchor="middle" x="1933" y="-462.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="739.5,-1141 739.5,-1324 952.5,-1324 952.5,-1141 739.5,-1141"/>
<text text-anchor="middle" x="846" y="-1308.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="2202.5,-253 2202.5,-328 2306.5,-328 2306.5,-253 2202.5,-253"/>
<text text-anchor="middle" x="2254.5" y="-312.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="1861,-320 1861,-395 2005,-395 2005,-320 1861,-320"/>
<text text-anchor="middle" x="1933" y="-379.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="1554.5,-390 1554.5,-465 1728.5,-465 1728.5,-390 1554.5,-390"/>
<text text-anchor="middle" x="1641.5" y="-449.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="1529,-253 1529,-382 1754,-382 1754,-253 1529,-253"/>
<text text-anchor="middle" x="1641.5" y="-366.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="1542.5,-8 1542.5,-245 2397,-245 2397,-8 1542.5,-8"/>
<text text-anchor="middle" x="1969.75" y="-229.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="0,-2123 0,-2198 226,-2198 226,-2123 0,-2123"/>
<text text-anchor="middle" x="113" y="-2182.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1606.5,-473 1606.5,-548 1676.5,-548 1676.5,-473 1606.5,-473"/>
<text text-anchor="middle" x="1641.5" y="-532.8" font-family="Helvetica,sans-Serif" font-size="14.00">env.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="791,-419 791,-548 901,-548 901,-419 791,-419"/>
<text text-anchor="middle" x="846" y="-532.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="1132,-2760 1132,-2889 1276,-2889 1276,-2760 1132,-2760"/>
<text text-anchor="middle" x="1204" y="-2873.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="1103.5,-2648 1103.5,-2743 1698.5,-2743 1698.5,-2648 1103.5,-2648"/>
<text text-anchor="middle" x="1401" y="-2727.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="766.5,-556 766.5,-853 1706.5,-853 1706.5,-556 766.5,-556"/>
<text text-anchor="middle" x="1236.5" y="-837.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="341,-1332 341,-1461 918,-1461 918,-1332 341,-1332"/>
<text text-anchor="middle" x="629.5" y="-1445.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="1352,-3033 1352,-3108 1496,-3108 1496,-3033 1352,-3033"/>
<text text-anchor="middle" x="1424" y="-3092.8" font-family="Helvetica,sans-Serif" font-size="14.00">constants.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="692.5,-865 692.5,-1048 1261,-1048 1261,-865 692.5,-865"/>
<text text-anchor="middle" x="976.75" y="-1032.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1124,-1546 1124,-1621 1284,-1621 1284,-1546 1124,-1546"/>
<text text-anchor="middle" x="1204" y="-1605.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1367.5,-1579 1367.5,-1654 1480.5,-1654 1480.5,-1579 1367.5,-1579"/>
<text text-anchor="middle" x="1424" y="-1638.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1355.5,-1865 1355.5,-1994 1492.5,-1994 1492.5,-1865 1355.5,-1865"/>
<text text-anchor="middle" x="1424" y="-1978.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="1098,-1193 1098,-1538 1754,-1538 1754,-1193 1098,-1193"/>
<text text-anchor="middle" x="1426" y="-1522.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1168,-1728 1168,-1857 1509,-1857 1509,-1728 1168,-1728"/>
<text text-anchor="middle" x="1338.5" y="-1841.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="1168,-2273 1168,-2402 1240,-2402 1240,-2273 1168,-2273"/>
<text text-anchor="middle" x="1204" y="-2386.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="1161.5,-2106 1161.5,-2235 1509,-2235 1509,-2106 1161.5,-2106"/>
<text text-anchor="middle" x="1335.25" y="-2219.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="1593,-1665 1593,-1740 1690,-1740 1690,-1665 1593,-1665"/>
<text text-anchor="middle" x="1641.5" y="-1724.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="745.5,-1782 745.5,-1911 946.5,-1911 946.5,-1782 745.5,-1782"/>
<text text-anchor="middle" x="846" y="-1895.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="1354,-2950 1354,-3025 1495,-3025 1495,-2950 1354,-2950"/>
<text text-anchor="middle" x="1424.5" y="-3009.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="774,-2326 774,-2509 918,-2509 918,-2326 774,-2326"/>
<text text-anchor="middle" x="846" y="-2493.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="803.5,-3199 803.5,-3382 1239,-3382 1239,-3199 803.5,-3199"/>
<text text-anchor="middle" x="1021.25" y="-3366.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="789,-3116 789,-3191 903,-3191 903,-3116 789,-3116"/>
<text text-anchor="middle" x="846" y="-3175.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="740,-3390 740,-3519 952,-3519 952,-3390 740,-3390"/>
<text text-anchor="middle" x="846" y="-3503.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="1096.5,-1056 1096.5,-1185 1311.5,-1185 1311.5,-1056 1096.5,-1056"/>
<text text-anchor="middle" x="1204" y="-1169.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="771,-3610 771,-3685 921,-3685 921,-3610 771,-3610"/>
<text text-anchor="middle" x="846" y="-3669.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="246,-2625 246,-2754 595,-2754 595,-2625 246,-2625"/>
<text text-anchor="middle" x="420.5" y="-2738.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="1537.5,-2991 1537.5,-3120 1745.5,-3120 1745.5,-2991 1537.5,-2991"/>
<text text-anchor="middle" x="1641.5" y="-3104.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="352,-3809 352,-3992 489,-3992 489,-3809 352,-3809"/>
<text text-anchor="middle" x="420.5" y="-3976.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="744.5,-3920 744.5,-4049 947.5,-4049 947.5,-3920 744.5,-3920"/>
<text text-anchor="middle" x="846" y="-4033.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="725,-3693 725,-3768 968,-3768 968,-3693 725,-3693"/>
<text text-anchor="middle" x="846.5" y="-3752.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="735.5,-3527 735.5,-3602 1251.5,-3602 1251.5,-3527 735.5,-3527"/>
<text text-anchor="middle" x="993.5" y="-3586.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="1169,-3610 1169,-3685 1467.5,-3685 1467.5,-3610 1169,-3610"/>
<text text-anchor="middle" x="1318.25" y="-3669.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_struct.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="807,-2517 807,-3078 885,-3078 885,-2517 807,-2517"/>
<text text-anchor="middle" x="846" y="-3062.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="762,-4087 762,-4216 1251.5,-4216 1251.5,-4087 762,-4087"/>
<text text-anchor="middle" x="1006.75" y="-4200.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="1133.5,-3116 1133.5,-3191 1467.5,-3191 1467.5,-3116 1133.5,-3116"/>
<text text-anchor="middle" x="1300.5" y="-3175.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_struct.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="615,-1973 615,-2318 1077,-2318 1077,-1973 615,-1973"/>
<text text-anchor="middle" x="846" y="-2302.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="1566,-3128 1566,-3203 1717,-3203 1717,-3128 1566,-3128"/>
<text text-anchor="middle" x="1641.5" y="-3187.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_1( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;repr: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;) &#45;&gt; (Choice, FieldElement, FieldElement, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = FieldElement::from_bytes(repr.as_bytes()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = Fi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2718.5,-297 2656.5,-297 2656.5,-261 2718.5,-261 2718.5,-297"/>
<text text-anchor="middle" x="2687.5" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn sqrt_ratio_i(u: &amp;FieldElement, v: &amp;FieldElement) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Using the same trick as in ed25519 decoding, we merge the &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// inversion, the square roo...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2849,-1153 2756,-1153 2756,-1117 2849,-1117 2849,-1153"/>
<text text-anchor="middle" x="2802.5" y="-1131.3" font-family="Helvetica,sans-Serif" font-size="14.00">sqrt_ratio_i</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2690.91,-297.27C2705.33,-406.51 2780.1,-972.88 2797.76,-1106.66"/>
<polygon fill="gray" stroke="gray" points="2794.33,-1107.44 2799.11,-1116.9 2801.27,-1106.52 2794.33,-1107.44"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (is_valid_y_coord, X, Y, Z) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_valid_y_coord.into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(decompress::step_2(sel...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2572.5,-297 2471.5,-297 2471.5,-261 2572.5,-261 2572.5,-297"/>
<text text-anchor="middle" x="2522" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/decompress/step_1().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2572.94,-279C2596.45,-279 2624.12,-279 2646.26,-279"/>
<polygon fill="gray" stroke="gray" points="2646.33,-282.5 2656.33,-279 2646.33,-275.5 2646.33,-282.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn invsqrt(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FieldElement::sqrt_ratio_i(&amp;FieldElement::ONE, self) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2720,-1153 2655,-1153 2655,-1117 2720,-1117 2720,-1153"/>
<text text-anchor="middle" x="2687.5" y="-1131.3" font-family="Helvetica,sans-Serif" font-size="14.00">invsqrt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2720.28,-1135C2728.16,-1135 2736.84,-1135 2745.51,-1135"/>
<polygon fill="gray" stroke="gray" points="2745.63,-1138.5 2755.63,-1135 2745.63,-1131.5 2745.63,-1138.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;fn pow_p58(&amp;self) &#45;&gt; FieldElement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The bits of (p&#45;5)/8 are 101111.....11. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nonzero bits of exponent &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (t19, _) = self.pow...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="2964,-1153 2885,-1153 2885,-1117 2964,-1117 2964,-1153"/>
<text text-anchor="middle" x="2924.5" y="-1131.3" font-family="Helvetica,sans-Serif" font-size="14.00">pow_p58</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]pow_p58().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2849.21,-1135C2857.59,-1135 2866.37,-1135 2874.83,-1135"/>
<polygon fill="gray" stroke="gray" points="2874.95,-1138.5 2884.95,-1135 2874.95,-1131.5 2874.95,-1138.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_inv(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut out = FieldElement::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Special case: s = 0. &#160;If s is zero, either t = 1 or t = &#45;1. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// If t=1, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2572.5,-3063 2471.5,-3063 2471.5,-3027 2572.5,-3027 2572.5,-3063"/>
<text text-anchor="middle" x="2522" y="-3041.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_inv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2572.71,-3042.93C2592.75,-3039.37 2614.14,-3031.54 2627,-3015 2686.37,-2938.62 2686.81,-1392.45 2686.55,-1163.29"/>
<polygon fill="gray" stroke="gray" points="2690.05,-1163.09 2686.53,-1153.1 2683.05,-1163.1 2690.05,-1163.09"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes_single_elligator(bytes: &amp;[u8; 32]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::elligator_ristretto_flavor(&amp;FieldElement::from_bytes(bytes)) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2066,-2926 1800,-2926 1800,-2890 2066,-2890 2066,-2926"/>
<text text-anchor="middle" x="1933" y="-2904.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_ristretto_flavor(r_0: &amp;FieldElement) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i = &amp;constants::SQRT_M1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let d = &amp;constants::EDWARDS_D; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one_minus_d_sq = &amp;constants...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2345,-1228 2164,-1228 2164,-1192 2345,-1192 2345,-1228"/>
<text text-anchor="middle" x="2254.5" y="-1206.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2066.03,-2895.44C2072.62,-2891.49 2078.7,-2886.73 2084,-2881 2200.59,-2755.07 2246.09,-1447.7 2252.65,-1238.24"/>
<polygon fill="gray" stroke="gray" points="2256.15,-1238.17 2252.96,-1228.06 2249.16,-1237.95 2256.15,-1238.17"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn to_jacobi_quartic_ristretto(self) &#45;&gt; [JacobiPoint; 4] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x2 = self.0.X.square(); // X^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y2 = self.0.Y.square(); // Y^2 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y4 = y2.square(); // Y^4 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let z2...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2619,-2926 2425,-2926 2425,-2890 2619,-2890 2619,-2926"/>
<text text-anchor="middle" x="2522" y="-2904.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_jacobi_quartic_ristretto</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2524.67,-2889.87C2540.53,-2717.9 2664.32,-1375.54 2683.9,-1163.24"/>
<polygon fill="gray" stroke="gray" points="2687.39,-1163.48 2684.82,-1153.2 2680.42,-1162.84 2687.39,-1163.48"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_encode&lt;D: Digest&gt;(data: &amp;[u8; 16]) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut fe_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let digest...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1988.5,-2872 1877.5,-2872 1877.5,-2836 1988.5,-2836 1988.5,-2872"/>
<text text-anchor="middle" x="1933" y="-2850.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_encode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1937.53,-2835.82C1969.53,-2671.2 2208.88,-1439.6 2248.08,-1237.9"/>
<polygon fill="gray" stroke="gray" points="2251.51,-1238.56 2249.99,-1228.08 2244.64,-1237.23 2251.51,-1238.56"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_decode&lt;D: Digest&gt;(&amp;self) &#45;&gt; Option&lt;[u8; 16]&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut result: [u8; 16] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1988.5,-2980 1877.5,-2980 1877.5,-2944 1988.5,-2944 1988.5,-2980"/>
<text text-anchor="middle" x="1933" y="-2958.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_decode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub fn elligator_ristretto_flavor_inverse(&amp;self) &#45;&gt; (u8, [FieldElement; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Elligator2 computes a Point from a FieldElement in two steps: first &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// it computes a (s,t) on the J...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2374,-2980 2135,-2980 2135,-2944 2374,-2944 2374,-2980"/>
<text text-anchor="middle" x="2254.5" y="-2958.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor_inverse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1988.56,-2962C2026,-2962 2077.31,-2962 2124.82,-2962"/>
<polygon fill="gray" stroke="gray" points="2124.89,-2965.5 2134.89,-2962 2124.89,-2958.5 2124.89,-2965.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2313.16,-2980.03C2345.95,-2990.29 2387.77,-3003.36 2425,-3015 2436.84,-3018.7 2449.49,-3022.66 2461.6,-3026.44"/>
<polygon fill="gray" stroke="gray" points="2460.58,-3029.79 2471.17,-3029.43 2462.67,-3023.11 2460.58,-3029.79"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]to_jacobi_quartic_ristretto().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2344.28,-2943.94C2369.3,-2938.86 2396.66,-2933.29 2422.23,-2928.09"/>
<polygon fill="gray" stroke="gray" points="2423.21,-2931.46 2432.31,-2926.04 2421.81,-2924.6 2423.21,-2931.46"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn to_edwards(&amp;self, sign: u8) &#45;&gt; Option&lt;EdwardsPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// To decompress the Montgomery u coordinate to an &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// `EdwardsPoint`, we apply the birational map to obtain the &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2302,-380 2207,-380 2207,-344 2302,-344 2302,-380"/>
<text text-anchor="middle" x="2254.5" y="-358.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_edwards</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2302.29,-354.45C2330.15,-349.37 2365.99,-341.81 2397,-332 2423.39,-323.65 2451.84,-311.71 2474.83,-301.28"/>
<polygon fill="gray" stroke="gray" points="2476.38,-304.42 2484.01,-297.06 2473.46,-298.06 2476.38,-304.42"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!s_encoding_is_canonical | s_is_negative).into...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1983.5,-1120 1882.5,-1120 1882.5,-1084 1983.5,-1084 1983.5,-1120"/>
<text text-anchor="middle" x="1933" y="-1098.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_2(s: FieldElement) &#45;&gt; (Choice, Choice, Choice, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Step 2. &#160;Compute (X:Y:Z:T). &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one = FieldElement::ONE; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ss = s.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2285.5,-1174 2223.5,-1174 2223.5,-1138 2285.5,-1138 2285.5,-1174"/>
<text text-anchor="middle" x="2254.5" y="-1152.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1983.57,-1110.38C2046.73,-1121.05 2154.7,-1139.3 2213.12,-1149.17"/>
<polygon fill="gray" stroke="gray" points="2212.64,-1152.64 2223.08,-1150.86 2213.8,-1145.74 2212.64,-1152.64"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2285.81,-1154.52C2361.31,-1150.84 2557.95,-1141.26 2644.53,-1137.04"/>
<polygon fill="gray" stroke="gray" points="2644.96,-1140.53 2654.78,-1136.55 2644.62,-1133.54 2644.96,-1140.53"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;pub fn compress(&amp;self) &#45;&gt; CompressedRistretto { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut X = self.0.X; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut Y = self.0.Y; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Z = &amp;self.0.Z; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let T = &amp;self.0.T; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let u1 = &amp;(Z + &amp;Y) * &amp;(Z ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1974.5,-1174 1891.5,-1174 1891.5,-1138 1974.5,-1138 1974.5,-1174"/>
<text text-anchor="middle" x="1933" y="-1152.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]invsqrt().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1974.82,-1148.34C2012.38,-1141.71 2069.72,-1132.63 2120,-1129 2315.77,-1114.87 2550.56,-1126.41 2644.58,-1132.19"/>
<polygon fill="gray" stroke="gray" points="2644.61,-1135.7 2654.81,-1132.83 2645.05,-1128.71 2644.61,-1135.7"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 field/impl#[`crate::lizard::lizard_constants::FieldElement51`]sqrt_ratio_i().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2345.25,-1194.32C2362.49,-1190.9 2380.36,-1187.07 2397,-1183 2509.68,-1155.43 2532.23,-1124.85 2647,-1108 2681.96,-1102.87 2691.69,-1101.93 2726.5,-1108 2734.17,-1109.34 2742.09,-1111.39 2749.78,-1113.78"/>
<polygon fill="gray" stroke="gray" points="2748.77,-1117.13 2759.36,-1116.96 2750.97,-1110.49 2748.77,-1117.13"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes(bytes: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This follows the one&#45;way map construction from the Ristretto RFC: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://datatracker.ietf.org/doc/html/draft&#45;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2010.5,-1228 1855.5,-1228 1855.5,-1192 2010.5,-1192 2010.5,-1228"/>
<text text-anchor="middle" x="1933" y="-1206.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2010.53,-1210C2053.44,-1210 2107.47,-1210 2153.67,-1210"/>
<polygon fill="gray" stroke="gray" points="2153.71,-1213.5 2163.71,-1210 2153.71,-1206.5 2153.71,-1213.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; PUBLIC_KEY_LENGTH]) &#45;&gt; Result&lt;VerifyingKey, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let compressed = CompressedEdwardsY(*bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let point = compressed &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decomp...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1980,-447 1886,-447 1886,-411 1980,-411 1980,-447"/>
<text text-anchor="middle" x="1933" y="-425.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1980.04,-438.9C2066.42,-455.12 2256.71,-479.49 2397,-415 2446.89,-392.07 2485.67,-338.64 2505.78,-305.99"/>
<polygon fill="gray" stroke="gray" points="2508.81,-307.75 2510.95,-297.38 2502.81,-304.15 2508.81,-307.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node19"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="910.5,-1239 781.5,-1239 781.5,-1203 910.5,-1203 910.5,-1239"/>
<text text-anchor="middle" x="846" y="-1217.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;pub fn hash(&amp;self) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;*Self::hash_from_scalars(&amp;self.scalars).compress().as_bytes() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1231,-1017 1177,-1017 1177,-981 1231,-981 1231,-1017"/>
<text text-anchor="middle" x="1204" y="-995.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.76,-1232.69C962.62,-1238.23 1034.01,-1236.15 1077,-1194 1122.48,-1149.4 1059.34,-1103.74 1096.5,-1052 1113.26,-1028.66 1143.26,-1015.04 1167.15,-1007.46"/>
<polygon fill="blue" stroke="blue" points="1168.36,-1010.75 1176.97,-1004.57 1166.38,-1004.04 1168.36,-1010.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node20"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="944.5,-1293 747.5,-1293 747.5,-1257 944.5,-1257 944.5,-1293"/>
<text text-anchor="middle" x="846" y="-1271.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M944.72,-1289.39C990.98,-1290.43 1043.33,-1282.27 1077,-1248 1107.68,-1216.78 1071.64,-1088.02 1096.5,-1052 1112.82,-1028.35 1142.86,-1014.75 1166.88,-1007.27"/>
<polygon fill="blue" stroke="blue" points="1168.11,-1010.55 1176.75,-1004.42 1166.17,-1003.83 1168.11,-1010.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node21"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="910.5,-1185 781.5,-1185 781.5,-1149 910.5,-1149 910.5,-1185"/>
<text text-anchor="middle" x="846" y="-1163.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="1231,-963 1177,-963 1177,-927 1231,-927 1231,-963"/>
<text text-anchor="middle" x="1204" y="-941.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.74,-1165.32C963.32,-1160.34 1035.75,-1144.51 1077,-1097 1113.87,-1054.54 1058.64,-1013.57 1096.5,-972 1113.98,-952.8 1142.99,-946.38 1166.33,-944.59"/>
<polygon fill="blue" stroke="blue" points="1166.78,-948.07 1176.58,-944.06 1166.42,-941.08 1166.78,-948.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node22"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2281.5,-297 2227.5,-297 2227.5,-261 2281.5,-261 2281.5,-297"/>
<text text-anchor="middle" x="2254.5" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M2281.93,-279C2323.42,-279 2404.89,-279 2461.11,-279"/>
<polygon fill="blue" stroke="blue" points="2461.3,-282.5 2471.3,-279 2461.3,-275.5 2461.3,-282.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="1997,-364 1869,-364 1869,-328 1997,-328 1997,-364"/>
<text text-anchor="middle" x="1933" y="-342.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 montgomery/impl#[MontgomeryPoint]to_edwards().</title>
<path fill="none" stroke="blue" d="M1997.12,-349.16C2055.16,-352.07 2140.45,-356.34 2196.48,-359.14"/>
<polygon fill="blue" stroke="blue" points="2196.42,-362.65 2206.58,-359.65 2196.77,-355.65 2196.42,-362.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node24"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1720.5,-434 1562.5,-434 1562.5,-398 1720.5,-398 1720.5,-434"/>
<text text-anchor="middle" x="1641.5" y="-412.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1720.84,-419.52C1769.68,-421.71 1831.38,-424.48 1875.46,-426.46"/>
<polygon fill="blue" stroke="blue" points="1875.55,-429.97 1885.7,-426.92 1875.87,-422.98 1875.55,-429.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;fn try_from(public_key: [u8; 32]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match CompressedEdwardsY(public_key).decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Error::InvalidCurvePoint), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(pt) if pt.is_sma...">
<polygon fill="white" stroke="black" points="1970.5,-214 1895.5,-214 1895.5,-178 1970.5,-178 1970.5,-214"/>
<text text-anchor="middle" x="1933" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1720.68,-404.97C1732.83,-400.56 1744.49,-394.46 1754,-386 1779.05,-363.74 1762.04,-342.91 1782,-316 1812.01,-275.55 1858.8,-241.07 1892.14,-219.59"/>
<polygon fill="blue" stroke="blue" points="1894.16,-222.45 1900.74,-214.15 1890.42,-216.54 1894.16,-222.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node25"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="1714,-297 1569,-297 1569,-261 1714,-261 1714,-297"/>
<text text-anchor="middle" x="1641.5" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="1989.5,-160 1876.5,-160 1876.5,-124 1989.5,-124 1989.5,-160"/>
<text text-anchor="middle" x="1933" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1714.09,-270.65C1728.66,-266.13 1742.91,-259.3 1754,-249 1781.6,-223.36 1753.34,-193.44 1782,-169 1805.05,-149.34 1837.49,-141.87 1866.31,-139.61"/>
<polygon fill="blue" stroke="blue" points="1866.55,-143.1 1876.33,-139.02 1866.14,-136.11 1866.55,-143.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="1746,-351 1537,-351 1537,-315 1746,-315 1746,-351"/>
<text text-anchor="middle" x="1641.5" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1680.4,-351.07C1720.79,-370.3 1779.35,-398.12 1782,-399 1812.31,-409.03 1847.24,-416.26 1875.76,-421.1"/>
<polygon fill="blue" stroke="blue" points="1875.52,-424.61 1885.96,-422.78 1876.66,-417.7 1875.52,-424.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1728.91,-314.97C1737.51,-312.32 1746.01,-309.34 1754,-306 1808.54,-283.22 1865.66,-244.96 1900.04,-220.1"/>
<polygon fill="blue" stroke="blue" points="1902.27,-222.81 1908.28,-214.09 1898.14,-217.16 1902.27,-222.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="1714.5,-160 1568.5,-160 1568.5,-124 1714.5,-124 1714.5,-160"/>
<text text-anchor="middle" x="1641.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1714.51,-156.12C1736.19,-160.33 1760.05,-164.9 1782,-169 1816.55,-175.45 1855.63,-182.48 1885.24,-187.75"/>
<polygon fill="blue" stroke="blue" points="1884.84,-191.23 1895.3,-189.53 1886.06,-184.34 1884.84,-191.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1714.81,-142C1761.11,-142 1820.73,-142 1865.79,-142"/>
<polygon fill="blue" stroke="blue" points="1866.04,-145.5 1876.04,-142 1866.04,-138.5 1866.04,-145.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M1970.54,-198.64C2049.04,-204.65 2239.47,-221.04 2397,-249 2418.18,-252.76 2441.13,-257.98 2461.47,-263.02"/>
<polygon fill="blue" stroke="blue" points="2460.67,-266.43 2471.22,-265.47 2462.37,-259.64 2460.67,-266.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn test_encode_to_curve_try_and_increment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let got = encode_to_curve_try_and_increment(&amp;v.pk, v.alpha) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.compress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.0...">
<polygon fill="white" stroke="black" points="2084,-106 1782,-106 1782,-70 2084,-70 2084,-106"/>
<text text-anchor="middle" x="1933" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<g id="a_node30"><a xlink:title="fn encode_to_curve_try_and_increment(salt: &amp;[u8], data: &amp;[u8]) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;&#160;for i in 0u8..=u8::MAX { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...">
<polygon fill="white" stroke="black" points="2389,-123 2120,-123 2120,-87 2389,-87 2389,-123"/>
<text text-anchor="middle" x="2254.5" y="-101.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2084.39,-96C2092.79,-96.45 2101.23,-96.9 2109.6,-97.34"/>
<polygon fill="blue" stroke="blue" points="2109.61,-100.85 2119.79,-97.89 2109.99,-93.86 2109.61,-100.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M2345.03,-123.03C2363.01,-128.79 2381.2,-136.29 2397,-146 2442.04,-173.69 2481.22,-222.07 2502.93,-252.22"/>
<polygon fill="blue" stroke="blue" points="2500.2,-254.43 2508.83,-260.58 2505.92,-250.39 2500.2,-254.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[CompressedEdwardsY]decompress().</title>
<path fill="none" stroke="blue" d="M1989.74,-143.21C2078.33,-146.61 2255.7,-159.47 2397,-208 2429.6,-219.19 2463.34,-239.15 2487.38,-255.06"/>
<polygon fill="blue" stroke="blue" points="2485.52,-258.03 2495.77,-260.72 2489.43,-252.23 2485.52,-258.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1989.65,-135.56C2023,-131.69 2067.08,-126.59 2109.63,-121.66"/>
<polygon fill="blue" stroke="blue" points="2110.3,-125.11 2119.83,-120.48 2109.5,-118.15 2110.3,-125.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn try_and_increment_terminates() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(data: [u8; 34])| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _ = encode_to_curve_try_and_increment(&amp;data[..32], &amp;data[32..]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2046.5,-52 1819.5,-52 1819.5,-16 2046.5,-16 2046.5,-52"/>
<text text-anchor="middle" x="1933" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_and_increment_terminates</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2039.91,-52.03C2054.75,-54.85 2069.79,-57.88 2084,-61 2115.22,-67.85 2149.37,-76.49 2178.8,-84.3"/>
<polygon fill="blue" stroke="blue" points="2178.02,-87.72 2188.58,-86.91 2179.82,-80.95 2178.02,-87.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1732.5,-214 1550.5,-214 1550.5,-178 1732.5,-178 1732.5,-214"/>
<text text-anchor="middle" x="1641.5" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1732.51,-196C1783.16,-196 1844.29,-196 1885.43,-196"/>
<polygon fill="blue" stroke="blue" points="1885.43,-199.5 1895.43,-196 1885.43,-192.5 1885.43,-199.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1732.52,-178.4C1748.97,-175.23 1766,-171.99 1782,-169 1809.68,-163.83 1840.26,-158.29 1866.55,-153.59"/>
<polygon fill="blue" stroke="blue" points="1867.18,-157.03 1876.4,-151.83 1865.95,-150.14 1867.18,-157.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node34"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="140,-2167 86,-2167 86,-2131 140,-2131 140,-2167"/>
<text text-anchor="middle" x="113" y="-2145.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M137.73,-2130.88C209.14,-2076.45 428.66,-1910.03 615,-1778 817.37,-1634.61 955.65,-1681.3 1077,-1465 1121.95,-1384.87 1046.29,-1128.95 1096.5,-1052 1112.37,-1027.68 1142.94,-1014.08 1167.27,-1006.77"/>
<polygon fill="blue" stroke="blue" points="1168.22,-1010.14 1176.92,-1004.09 1166.35,-1003.4 1168.22,-1010.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="587,-2723 254,-2723 254,-2687 587,-2687 587,-2723"/>
<text text-anchor="middle" x="420.5" y="-2701.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M115.88,-2167.23C124.99,-2251.96 167.38,-2606.17 246,-2678 247.01,-2678.93 248.04,-2679.83 249.09,-2680.7"/>
<polygon fill="blue" stroke="blue" points="247.35,-2683.77 257.44,-2686.98 251.55,-2678.17 247.35,-2683.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;fn from(src: KeyTransConfig) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let KeyTransConfig { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;vrf_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auditor_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = src; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s...">
<polygon fill="white" stroke="black" points="1668.5,-517 1614.5,-517 1614.5,-481 1668.5,-481 1668.5,-517"/>
<text text-anchor="middle" x="1641.5" y="-495.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]from_bytes().</title>
<path fill="none" stroke="blue" d="M1668.7,-492.66C1715.24,-481.41 1813.3,-457.7 1875.73,-442.61"/>
<polygon fill="blue" stroke="blue" points="1876.91,-445.92 1885.81,-440.17 1875.27,-439.12 1876.91,-445.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1668.61,-499.46C1694.15,-498.41 1732.27,-492.59 1754,-469 1800.84,-418.16 1746.55,-375.35 1782,-316 1807.36,-273.56 1853.65,-240.03 1888.13,-219.32"/>
<polygon fill="blue" stroke="blue" points="1890.21,-222.16 1897.06,-214.08 1886.67,-216.12 1890.21,-222.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node36"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="890.5,-463 801.5,-463 801.5,-427 890.5,-427 890.5,-463"/>
<text text-anchor="middle" x="846" y="-441.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;pub fn restore(self, responses2_bytes: &amp;[Vec&lt;u8&gt;]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if responses2_bytes.len() != self.server_ids.len() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(Error::NumServers { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1236.5,-637 1171.5,-637 1171.5,-601 1236.5,-601 1236.5,-637"/>
<text text-anchor="middle" x="1204" y="-615.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M890.83,-438.38C940.69,-433.32 1022.26,-432.77 1077,-472 1093.4,-483.75 1084.84,-496.53 1096.5,-513 1118.47,-544.05 1149.96,-574.12 1173,-594.25"/>
<polygon fill="blue" stroke="blue" points="1170.91,-597.06 1180.77,-600.94 1175.48,-591.76 1170.91,-597.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="1241,-694 1167,-694 1167,-658 1241,-658 1241,-694"/>
<text text-anchor="middle" x="1204" y="-672.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M890.65,-435.76C942.69,-427.56 1028.66,-423.4 1077,-472 1131.88,-527.17 1046.14,-586.68 1096.5,-646 1111.31,-663.45 1135.4,-671.15 1156.93,-674.4"/>
<polygon fill="blue" stroke="blue" points="1156.56,-677.88 1166.91,-675.63 1157.42,-670.94 1156.56,-677.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1451,-600 1397,-600 1397,-564 1451,-564 1451,-600"/>
<text text-anchor="middle" x="1424" y="-578.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M890.64,-447.63C937.21,-451.02 1012.94,-458.19 1077,-472 1192.86,-496.98 1325.18,-544.61 1387.28,-568.14"/>
<polygon fill="blue" stroke="blue" points="1386.4,-571.54 1396.99,-571.84 1388.89,-565 1386.4,-571.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node37"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="893,-517 799,-517 799,-481 893,-481 893,-517"/>
<text text-anchor="middle" x="846" y="-495.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="1231,-758 1177,-758 1177,-722 1231,-722 1231,-758"/>
<text text-anchor="middle" x="1204" y="-736.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M893.46,-495.4C946.16,-494.11 1030.77,-500.99 1077,-552 1122.45,-602.14 1053.82,-650.49 1096.5,-703 1113.49,-723.91 1142.99,-733.03 1166.65,-736.99"/>
<polygon fill="blue" stroke="blue" points="1166.31,-740.48 1176.7,-738.44 1167.3,-733.55 1166.31,-740.48"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node38"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="1268,-2858 1140,-2858 1140,-2822 1268,-2822 1268,-2858"/>
<text text-anchor="middle" x="1204" y="-2836.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="1690.5,-2692 1592.5,-2692 1592.5,-2656 1690.5,-2656 1690.5,-2692"/>
<text text-anchor="middle" x="1641.5" y="-2670.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1268.06,-2831.63C1283.17,-2827.63 1298.64,-2821.73 1311.5,-2813 1333.76,-2797.9 1325.12,-2779.64 1347,-2764 1366.44,-2750.1 1502.67,-2711.51 1582.52,-2689.64"/>
<polygon fill="blue" stroke="blue" points="1583.72,-2692.94 1592.45,-2686.93 1581.88,-2686.19 1583.72,-2692.94"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node39"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="1231,-2804 1177,-2804 1177,-2768 1231,-2768 1231,-2804"/>
<text text-anchor="middle" x="1204" y="-2782.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="1452,-2692 1396,-2692 1396,-2656 1452,-2656 1452,-2692"/>
<text text-anchor="middle" x="1424" y="-2670.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.08,-2778.29C1253.08,-2771.37 1285.11,-2760.25 1311.5,-2747 1326.8,-2739.32 1361.67,-2716.12 1388.37,-2697.92"/>
<polygon fill="blue" stroke="blue" points="1390.44,-2700.74 1396.72,-2692.21 1386.49,-2694.97 1390.44,-2700.74"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1452.18,-2688.15C1515.08,-2718.72 1671.59,-2781.9 1754,-2701 1814.19,-2641.91 1727.3,-1247.21 1782,-1183 1805.79,-1155.07 1847.81,-1149.48 1881.34,-1150.21"/>
<polygon fill="blue" stroke="blue" points="1881.31,-1153.72 1891.44,-1150.63 1881.59,-1146.72 1881.31,-1153.72"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1452.29,-2674C1484.73,-2674 1539.76,-2674 1581.97,-2674"/>
<polygon fill="blue" stroke="blue" points="1582.13,-2677.5 1592.13,-2674 1582.12,-2670.5 1582.13,-2677.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1645.18,-2655.69C1658.98,-2560.53 1722.74,-2112.63 1754,-1744 1759.27,-1681.81 1740.79,-1229.87 1782,-1183 1806.15,-1155.54 1847.94,-1149.86 1881.29,-1150.45"/>
<polygon fill="blue" stroke="blue" points="1881.22,-1153.95 1891.34,-1150.81 1881.47,-1146.95 1881.22,-1153.95"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="1296.5,-2712 1111.5,-2712 1111.5,-2676 1296.5,-2676 1296.5,-2712"/>
<text text-anchor="middle" x="1204" y="-2690.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1296.5,-2685.61C1327.91,-2682.72 1361.3,-2679.66 1385.88,-2677.41"/>
<polygon fill="blue" stroke="blue" points="1386.21,-2680.89 1395.85,-2676.49 1385.57,-2673.92 1386.21,-2680.89"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1296.69,-2702.02C1357.14,-2705.85 1437.96,-2708.22 1509,-2701 1533.34,-2698.53 1559.83,-2693.54 1582.61,-2688.52"/>
<polygon fill="blue" stroke="blue" points="1583.48,-2691.91 1592.46,-2686.3 1581.94,-2685.09 1583.48,-2691.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<g id="a_node43"><a xlink:title="fn auth_secret(input: &amp;[u8; 64], auth_pt: &amp;RistrettoPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;Kdf::make( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_SVR_MasterAuthorizationKey_20240823&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;auth_pt.compress().to_bytes(), ...">
<polygon fill="white" stroke="black" points="1690,-804 1593,-804 1593,-768 1690,-768 1690,-804"/>
<text text-anchor="middle" x="1641.5" y="-782.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_secret</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1669.7,-804.1C1696.08,-823.28 1734.85,-856.15 1754,-895 1777.15,-941.98 1746.08,-1090.89 1782,-1129 1806.81,-1155.32 1847.9,-1161.23 1880.8,-1161.02"/>
<polygon fill="blue" stroke="blue" points="1881.26,-1164.51 1891.17,-1160.76 1881.08,-1157.51 1881.26,-1164.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1231.14,-740.75C1255.38,-742.89 1290.73,-749.92 1311.5,-772 1358.74,-822.21 1297.82,-874.69 1347,-923 1380.01,-955.42 1720.96,-978.61 1754,-1011 1792.49,-1048.73 1742.85,-1091.95 1782,-1129 1808.1,-1153.7 1848.72,-1159.79 1881.11,-1160.07"/>
<polygon fill="blue" stroke="blue" points="1881.34,-1163.57 1891.31,-1159.97 1881.27,-1156.57 1881.34,-1163.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.16,-743.81C1253.78,-748.01 1286.67,-756.36 1311.5,-772 1331.33,-784.49 1325.56,-801.52 1347,-811 1423.43,-844.78 1521.87,-825.25 1583.08,-806.71"/>
<polygon fill="blue" stroke="blue" points="1584.44,-809.95 1592.95,-803.63 1582.36,-803.26 1584.44,-809.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node51"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1499,-802 1349,-802 1349,-766 1499,-766 1499,-802"/>
<text text-anchor="middle" x="1424" y="-780.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-745.31C1257.91,-750.68 1300.48,-759.27 1338.75,-767"/>
<polygon fill="blue" stroke="blue" points="1338.4,-770.49 1348.89,-769.04 1339.78,-763.63 1338.4,-770.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<g id="a_node53"><a xlink:title="fn auth_pt(input: &amp;[u8; 64], k_oprf: &amp;Scalar) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;input_hash_pt(input) * k_oprf }">
<polygon fill="white" stroke="black" points="1458.5,-748 1389.5,-748 1389.5,-712 1458.5,-712 1458.5,-748"/>
<text text-anchor="middle" x="1424" y="-726.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-738.79C1267.99,-737.11 1335.02,-734.04 1379.29,-732"/>
<polygon fill="blue" stroke="blue" points="1379.64,-735.49 1389.47,-731.54 1379.32,-728.5 1379.64,-735.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1236.66,-617.54C1306.34,-615.02 1469.88,-613.19 1509,-649 1544.36,-681.37 1496.57,-719.69 1529,-755 1542.84,-770.06 1563.3,-778.05 1582.93,-782.2"/>
<polygon fill="blue" stroke="blue" points="1582.31,-785.65 1592.78,-784 1583.57,-778.76 1582.31,-785.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1241.03,-680.49C1263.89,-685.1 1292.62,-694.37 1311.5,-713 1344.47,-745.54 1314.3,-778.19 1347,-811 1482.98,-947.44 1631.08,-811.68 1754,-960 1802.58,-1018.62 1728.54,-1074.79 1782,-1129 1807.4,-1154.75 1848.45,-1160.7 1881.19,-1160.65"/>
<polygon fill="blue" stroke="blue" points="1881.57,-1164.15 1891.49,-1160.44 1881.42,-1157.15 1881.57,-1164.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<g id="a_node47"><a xlink:title="fn input_hash_pt(input: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(input) }">
<polygon fill="white" stroke="black" points="1698.5,-746 1584.5,-746 1584.5,-710 1698.5,-710 1698.5,-746"/>
<text text-anchor="middle" x="1641.5" y="-724.3" font-family="Helvetica,sans-Serif" font-size="14.00">input_hash_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.32,-664.61C1299.11,-648.29 1415.05,-622.95 1509,-649 1547.28,-659.61 1585.59,-684.67 1610.9,-703.74"/>
<polygon fill="blue" stroke="blue" points="1608.91,-706.63 1618.97,-709.95 1613.18,-701.08 1608.91,-706.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<g id="a_node48"><a xlink:title="fn to_ristretto_pt(b: &amp;[u8]) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;CompressedRistretto::from_slice(b).ok()?.decompress() }">
<polygon fill="white" stroke="black" points="1480.5,-694 1367.5,-694 1367.5,-658 1480.5,-658 1480.5,-694"/>
<text text-anchor="middle" x="1424" y="-672.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.49,-676C1272.84,-676 1318.85,-676 1356.7,-676"/>
<polygon fill="blue" stroke="blue" points="1357.13,-679.5 1367.13,-676 1357.13,-672.5 1357.13,-679.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.38,-683.3C1263.13,-688.9 1290.53,-698.24 1311.5,-713 1332.05,-727.46 1326.5,-742.47 1347,-757 1348.9,-758.35 1350.88,-759.64 1352.91,-760.86"/>
<polygon fill="blue" stroke="blue" points="1351.68,-764.18 1362.13,-765.88 1355.02,-758.03 1351.68,-764.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1698.64,-730.44C1719.14,-734.32 1740.56,-742.48 1754,-759 1813.58,-832.26 1719.08,-1112.59 1782,-1183 1797.97,-1200.87 1821.41,-1209.47 1845.04,-1213.13"/>
<polygon fill="blue" stroke="blue" points="1844.8,-1216.63 1855.16,-1214.41 1845.68,-1209.68 1844.8,-1216.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1480.79,-664.16C1551.25,-652.54 1673.03,-643.87 1754,-701 1883.02,-792.03 1919.81,-998.59 1929.13,-1073.87"/>
<polygon fill="blue" stroke="blue" points="1925.68,-1074.47 1930.32,-1084 1932.63,-1073.66 1925.68,-1074.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1451.46,-582.49C1515.64,-585.28 1679.74,-602.19 1754,-701 1811.27,-777.19 1718.51,-1057.91 1782,-1129 1806.36,-1156.27 1848.13,-1161.97 1881.42,-1161.44"/>
<polygon fill="blue" stroke="blue" points="1881.58,-1164.93 1891.45,-1161.09 1881.34,-1157.94 1881.58,-1164.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.06,-589.32C1468.22,-594.75 1490.79,-603.1 1509,-614 1550.59,-638.88 1591.69,-677.34 1616.58,-702.59"/>
<polygon fill="blue" stroke="blue" points="1614.29,-705.25 1623.77,-709.98 1619.3,-700.37 1614.29,-705.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore1(&amp;mut self, req_bytes: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.inner &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1241,-817 1167,-817 1167,-781 1241,-781 1241,-817"/>
<text text-anchor="middle" x="1204" y="-795.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1241.02,-812.33C1264.03,-822.5 1292.93,-838.6 1311.5,-861 1341.61,-897.3 1312.78,-928.55 1347,-961 1401.49,-1012.67 1437.14,-987.21 1509,-1009 1618.1,-1042.08 1663.41,-1015.78 1754,-1085 1772.42,-1099.07 1762.75,-1116.08 1782,-1129 1811.12,-1148.54 1850.28,-1155.09 1881.29,-1156.85"/>
<polygon fill="blue" stroke="blue" points="1881.33,-1160.36 1891.47,-1157.28 1881.63,-1153.36 1881.33,-1160.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1241.18,-811.58C1264.56,-821.51 1293.82,-837.63 1311.5,-861 1349.71,-911.5 1301.74,-954.7 1347,-999 1399.85,-1050.73 1447.21,-996.36 1509,-1037 1521.48,-1045.21 1517.45,-1054.54 1529,-1064 1625.12,-1142.76 1663.62,-1145.23 1782,-1183 1802.13,-1189.42 1824.3,-1194.47 1845.27,-1198.37"/>
<polygon fill="blue" stroke="blue" points="1844.67,-1201.81 1855.13,-1200.13 1845.91,-1194.92 1844.67,-1201.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.03,-795.14C1263.33,-791.18 1291.43,-783.17 1311.5,-767 1336.83,-746.59 1322.18,-724.03 1347,-703 1350.46,-700.07 1354.26,-697.45 1358.26,-695.11"/>
<polygon fill="blue" stroke="blue" points="1360.02,-698.13 1367.27,-690.41 1356.79,-691.92 1360.02,-698.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_secret().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1499.16,-784.69C1526.45,-784.94 1556.93,-785.22 1582.58,-785.46"/>
<polygon fill="blue" stroke="blue" points="1582.85,-788.97 1592.88,-785.56 1582.92,-781.97 1582.85,-788.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="917.5,-694 774.5,-694 774.5,-658 917.5,-658 917.5,-694"/>
<text text-anchor="middle" x="846" y="-672.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.76,-688.72C992.78,-702.21 1108.32,-722.98 1166.65,-733.46"/>
<polygon fill="blue" stroke="blue" points="1166.39,-736.97 1176.85,-735.3 1167.63,-730.08 1166.39,-736.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore2&lt;&#39;_&gt;`]restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.76,-664.67C990.45,-653.03 1101.18,-635.3 1161.05,-625.72"/>
<polygon fill="blue" stroke="blue" points="1161.94,-629.12 1171.26,-624.08 1160.84,-622.21 1161.94,-629.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M917.76,-676C988.68,-676 1095.82,-676 1156.6,-676"/>
<polygon fill="blue" stroke="blue" points="1156.66,-679.5 1166.66,-676 1156.66,-672.5 1156.66,-679.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M888.39,-657.86C937.09,-637.51 1020.92,-605.57 1096.5,-592 1200.5,-573.32 1326.06,-576.54 1386.71,-579.67"/>
<polygon fill="blue" stroke="blue" points="1386.74,-583.17 1396.91,-580.23 1387.12,-576.19 1386.74,-583.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M894.08,-694.09C944.03,-713.08 1025.4,-743.37 1096.5,-767 1116.22,-773.55 1138.19,-780.25 1157.03,-785.82"/>
<polygon fill="blue" stroke="blue" points="1156.27,-789.24 1166.85,-788.7 1158.24,-782.53 1156.27,-789.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1458.67,-729.69C1489.53,-729.4 1536.11,-728.97 1574.39,-728.61"/>
<polygon fill="blue" stroke="blue" points="1574.48,-732.11 1584.44,-728.52 1574.41,-725.11 1574.48,-732.11"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node54"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="492,-1376 349,-1376 349,-1340 492,-1340 492,-1376"/>
<text text-anchor="middle" x="420.5" y="-1354.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node55"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="909,-1430 783,-1430 783,-1394 909,-1394 909,-1430"/>
<text text-anchor="middle" x="846" y="-1408.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M492.22,-1368.24C528.84,-1373.45 574.29,-1379.77 615,-1385 667.83,-1391.79 727.58,-1398.78 772.93,-1403.95"/>
<polygon fill="blue" stroke="blue" points="772.64,-1407.44 782.97,-1405.09 773.43,-1400.48 772.64,-1407.44"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node56"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="910,-1376 782,-1376 782,-1340 910,-1340 910,-1376"/>
<text text-anchor="middle" x="846" y="-1354.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M492.38,-1358C569.79,-1358 693.17,-1358 771.57,-1358"/>
<polygon fill="blue" stroke="blue" points="771.85,-1361.5 781.85,-1358 771.85,-1354.5 771.85,-1361.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="1253,-909 1155,-909 1155,-873 1253,-873 1253,-909"/>
<text text-anchor="middle" x="1204" y="-887.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M426.92,-1339.69C444.06,-1285.46 502.69,-1125.39 615,-1059 703.61,-1006.62 1000.42,-1094.77 1077,-1026 1113.29,-993.41 1063.23,-953.67 1096.5,-918 1108.9,-904.71 1126.82,-897.57 1144.44,-893.85"/>
<polygon fill="blue" stroke="blue" points="1145.5,-897.21 1154.74,-892.03 1144.28,-890.32 1145.5,-897.21"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M430.9,-1339.85C454.76,-1295.89 522.43,-1183.91 615,-1137 706.92,-1090.42 993.38,-1157.22 1077,-1097 1094.69,-1084.26 1081.5,-1067.81 1096.5,-1052 1115.69,-1031.77 1144.26,-1018.13 1166.98,-1009.77"/>
<polygon fill="blue" stroke="blue" points="1168.35,-1013 1176.64,-1006.39 1166.04,-1006.39 1168.35,-1013"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M428.54,-1339.93C448.81,-1290.68 512.46,-1154.02 615,-1097 705.03,-1046.94 999.3,-1126.63 1077,-1059 1106.89,-1032.99 1068.87,-1000.41 1096.5,-972 1114.61,-953.38 1143.58,-946.93 1166.73,-944.97"/>
<polygon fill="blue" stroke="blue" points="1167.13,-948.45 1176.9,-944.36 1166.71,-941.47 1167.13,-948.45"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M909.01,-1424.23C961.6,-1430.64 1035,-1429.53 1077,-1385 1127.86,-1331.08 1055.64,-1113.85 1096.5,-1052 1112.44,-1027.87 1142.79,-1014.29 1167.03,-1006.92"/>
<polygon fill="blue" stroke="blue" points="1168.3,-1010.2 1176.99,-1004.14 1166.41,-1003.46 1168.3,-1010.2"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.21,-1369.47C962.82,-1375.01 1035.58,-1372.65 1077,-1328 1130.88,-1269.92 1046.15,-1033.18 1096.5,-972 1113.18,-951.73 1142.71,-945.45 1166.45,-943.98"/>
<polygon fill="blue" stroke="blue" points="1166.68,-947.47 1176.55,-943.61 1166.43,-940.48 1166.68,-947.47"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;fn generate_points() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Signal_Username_20230130_Constant_Points_Generate&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for p in BASE_POINTS.iter() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(&amp;sho.get_point(),...">
<polygon fill="white" stroke="black" points="1488,-3077 1360,-3077 1360,-3041 1488,-3041 1488,-3077"/>
<text text-anchor="middle" x="1424" y="-3055.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1682,-3035 1601,-3035 1601,-2999 1682,-2999 1682,-3035"/>
<text text-anchor="middle" x="1641.5" y="-3013.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1488.2,-3046.68C1520.89,-3040.31 1560.23,-3032.64 1590.73,-3026.7"/>
<polygon fill="blue" stroke="blue" points="1591.57,-3030.1 1600.72,-3024.75 1590.23,-3023.23 1591.57,-3030.1"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1253.09,-902.76C1271.41,-907.35 1292.46,-912.77 1311.5,-918 1518.68,-974.96 1762.57,-1049.49 1872.72,-1083.56"/>
<polygon fill="blue" stroke="blue" points="1871.74,-1086.92 1882.33,-1086.53 1873.81,-1080.23 1871.74,-1086.92"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1253.01,-892.9C1273.37,-896.07 1295.94,-903.08 1311.5,-918 1351.33,-956.21 1317.98,-990.05 1347,-1037 1398.91,-1120.99 1468.14,-1099.12 1509,-1189 1534.53,-1245.18 1524.21,-1682.48 1529,-1744 1556.81,-2101.31 1619.37,-2532.67 1636.24,-2645.76"/>
<polygon fill="blue" stroke="blue" points="1632.79,-2646.33 1637.73,-2655.7 1639.71,-2645.29 1632.79,-2646.33"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="912.5,-1017 779.5,-1017 779.5,-981 912.5,-981 912.5,-1017"/>
<text text-anchor="middle" x="846" y="-995.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.71,-999C987.57,-999 1107.23,-999 1166.82,-999"/>
<polygon fill="blue" stroke="blue" points="1166.88,-1002.5 1176.88,-999 1166.88,-995.5 1166.88,-1002.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1231.26,-1005.92C1255.23,-1013.51 1290.09,-1027.92 1311.5,-1052 1342.56,-1086.94 1308.89,-1123.93 1347,-1151 1431.77,-1211.2 1755.14,-1178.31 1881.23,-1162.72"/>
<polygon fill="blue" stroke="blue" points="1881.9,-1166.16 1891.39,-1161.45 1881.03,-1159.22 1881.9,-1166.16"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="973,-963 719,-963 719,-927 973,-927 973,-963"/>
<text text-anchor="middle" x="846" y="-941.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M973.24,-932.35C1007.03,-928.37 1043.48,-923.55 1077,-918 1099.29,-914.31 1123.61,-909.33 1144.88,-904.65"/>
<polygon fill="blue" stroke="blue" points="1145.74,-908.05 1154.74,-902.46 1144.22,-901.21 1145.74,-908.05"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M973.24,-957.65C1007.03,-961.63 1043.48,-966.45 1077,-972 1107.46,-977.04 1141.69,-984.49 1166.78,-990.29"/>
<polygon fill="blue" stroke="blue" points="1166.06,-993.72 1176.59,-992.58 1167.65,-986.9 1166.06,-993.72"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M973.01,-945C1041.53,-945 1121.31,-945 1166.61,-945"/>
<polygon fill="blue" stroke="blue" points="1166.82,-948.5 1176.82,-945 1166.82,-941.5 1166.82,-948.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1231.4,-948.66C1253.59,-952.44 1285.73,-959.57 1311.5,-972 1329.36,-980.61 1329.33,-990.02 1347,-999 1526.87,-1090.44 1585.73,-1082.16 1782,-1129 1814.81,-1136.83 1852.13,-1143.56 1881.34,-1148.34"/>
<polygon fill="blue" stroke="blue" points="1880.89,-1151.81 1891.32,-1149.95 1882,-1144.9 1880.89,-1151.81"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.12,-943.5C1256.05,-943.65 1292.54,-948.33 1311.5,-972 1355.52,-1026.96 1339.94,-2168.94 1347,-2239 1362.62,-2393.95 1401.3,-2576.88 1416.61,-2645.83"/>
<polygon fill="blue" stroke="blue" points="1413.27,-2646.9 1418.86,-2655.9 1420.1,-2645.37 1413.27,-2646.9"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="991.5,-909 700.5,-909 700.5,-873 991.5,-873 991.5,-909"/>
<text text-anchor="middle" x="846" y="-887.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M991.54,-891C1045.17,-891 1103,-891 1144.6,-891"/>
<polygon fill="blue" stroke="blue" points="1144.82,-894.5 1154.82,-891 1144.82,-887.5 1144.82,-894.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M991.52,-883.92C1022.27,-888.65 1052.75,-898.76 1077,-918 1096.99,-933.86 1077.59,-954.86 1096.5,-972 1115.5,-989.22 1143.91,-995.8 1166.61,-998.17"/>
<polygon fill="blue" stroke="blue" points="1166.33,-1001.65 1176.58,-998.98 1166.9,-994.68 1166.33,-1001.65"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M991.76,-905.89C1020.09,-909.39 1049.53,-913.46 1077,-918 1107.46,-923.04 1141.69,-930.49 1166.78,-936.29"/>
<polygon fill="blue" stroke="blue" points="1166.06,-939.72 1176.59,-938.58 1167.65,-932.9 1166.06,-939.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node64"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1276,-1590 1132,-1590 1132,-1554 1276,-1554 1276,-1590"/>
<text text-anchor="middle" x="1204" y="-1568.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;pub fn to_token(&amp;self, client_key: &amp;ClientDecryptionKey) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.R * client_key.a_inv; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::to_token_raw(P) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1461.5,-1455 1386.5,-1455 1386.5,-1419 1461.5,-1419 1461.5,-1455"/>
<text text-anchor="middle" x="1424" y="-1433.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.24,-1557.09C1288.42,-1553.11 1300.63,-1548.15 1311.5,-1542 1347.88,-1521.41 1381.63,-1486.51 1402.26,-1462.64"/>
<polygon fill="blue" stroke="blue" points="1404.94,-1464.89 1408.74,-1455 1399.6,-1460.36 1404.94,-1464.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="1451,-1293 1397,-1293 1397,-1257 1451,-1257 1451,-1293"/>
<text text-anchor="middle" x="1424" y="-1271.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.26,-1564.07C1289.6,-1559.49 1302.24,-1552.53 1311.5,-1542 1382.72,-1461.04 1278.52,-1385.29 1347,-1302 1356.9,-1289.96 1372.56,-1283.29 1387.1,-1279.59"/>
<polygon fill="blue" stroke="blue" points="1387.86,-1283 1396.9,-1277.47 1386.39,-1276.16 1387.86,-1283"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;pub fn verify(&amp;self, point: &amp;RistrettoPoint, token: &amp;[u8]) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let P = self.sk_prime * point; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected = Endorsement::to_token_raw(P); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1452,-1401 1396,-1401 1396,-1365 1452,-1365 1452,-1401"/>
<text text-anchor="middle" x="1424" y="-1379.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.17,-1562.94C1289.28,-1558.42 1301.85,-1551.77 1311.5,-1542 1354.2,-1498.79 1305.76,-1454.61 1347,-1410 1357.17,-1399 1372.12,-1392.47 1386.08,-1388.61"/>
<polygon fill="blue" stroke="blue" points="1387.07,-1391.97 1395.98,-1386.24 1385.44,-1385.16 1387.07,-1391.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="1457,-1347 1391,-1347 1391,-1311 1457,-1311 1457,-1347"/>
<text text-anchor="middle" x="1424" y="-1325.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.2,-1563.67C1289.46,-1559.12 1302.08,-1552.26 1311.5,-1542 1368.4,-1479.99 1292.21,-1419.88 1347,-1356 1355.63,-1345.94 1368.28,-1339.62 1380.78,-1335.66"/>
<polygon fill="blue" stroke="blue" points="1381.97,-1338.97 1390.7,-1332.97 1380.14,-1332.21 1381.97,-1338.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut point_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut point_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;point_byte...">
<polygon fill="white" stroke="black" points="1682,-1709 1601,-1709 1601,-1673 1682,-1673 1682,-1709"/>
<text text-anchor="middle" x="1641.5" y="-1687.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1220.17,-1590.17C1243.94,-1617.08 1292.89,-1666.45 1347,-1686 1428.33,-1715.39 1530.79,-1708.01 1590.64,-1699.7"/>
<polygon fill="blue" stroke="blue" points="1591.19,-1703.16 1600.58,-1698.26 1590.19,-1696.23 1591.19,-1703.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;fn derive_impl&lt;D: Domain&gt;() &#45;&gt; [RistrettoPoint; 2] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new(b&#39; Signal_ZKCredential_Domain_20231011&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_and_ratchet(D::ID.as_bytes()); &#160;...">
<polygon fill="white" stroke="black" points="1472.5,-1623 1375.5,-1623 1375.5,-1587 1472.5,-1587 1472.5,-1623"/>
<text text-anchor="middle" x="1424" y="-1601.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1470.18,-1623.03C1505.64,-1637.18 1554.94,-1656.85 1591.38,-1671.4"/>
<polygon fill="blue" stroke="blue" points="1590.23,-1674.71 1600.82,-1675.16 1592.83,-1668.21 1590.23,-1674.71"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="1484.5,-1963 1363.5,-1963 1363.5,-1927 1484.5,-1927 1484.5,-1963"/>
<text text-anchor="middle" x="1424" y="-1941.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1484.74,-1931.9C1493.43,-1928.31 1501.84,-1923.77 1509,-1918 1575.9,-1864.08 1615.61,-1766.35 1631.88,-1718.67"/>
<polygon fill="blue" stroke="blue" points="1635.25,-1719.61 1635.08,-1709.02 1628.61,-1717.4 1635.25,-1719.61"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Signal_ZKCredential_ConstantSystemParams_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get_point(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_wprime = sho.get_poi...">
<polygon fill="white" stroke="black" points="1463.5,-1909 1384.5,-1909 1384.5,-1873 1463.5,-1873 1463.5,-1909"/>
<text text-anchor="middle" x="1424" y="-1887.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1463.61,-1882.23C1478.71,-1877.57 1495.59,-1870.73 1509,-1861 1562.73,-1822.01 1605.3,-1755.1 1626.26,-1717.91"/>
<polygon fill="blue" stroke="blue" points="1629.34,-1719.58 1631.12,-1709.14 1623.21,-1716.19 1629.34,-1719.58"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(self) &#45;&gt; Result&lt;Endorsement&lt;RistrettoPoint&gt;, VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.R.decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(R) =&gt; Ok(Endorsement { R }), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Veri...">
<polygon fill="white" stroke="black" points="1254.5,-1237 1153.5,-1237 1153.5,-1201 1254.5,-1201 1254.5,-1237"/>
<text text-anchor="middle" x="1204" y="-1215.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1254.67,-1205.38C1331.62,-1184.46 1476.29,-1145.9 1529,-1137 1649.78,-1116.61 1793.05,-1107.76 1872.1,-1104.19"/>
<polygon fill="blue" stroke="blue" points="1872.52,-1107.67 1882.35,-1103.74 1872.21,-1100.68 1872.52,-1107.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="1746,-1315 1537,-1315 1537,-1279 1746,-1279 1746,-1315"/>
<text text-anchor="middle" x="1641.5" y="-1293.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1734.22,-1278.96C1741.43,-1275.15 1748.16,-1270.55 1754,-1265 1781.9,-1238.45 1752.79,-1208.1 1782,-1183 1809.07,-1159.74 1849.26,-1153.49 1881.23,-1152.79"/>
<polygon fill="blue" stroke="blue" points="1881.31,-1156.29 1891.3,-1152.74 1881.28,-1149.29 1881.31,-1156.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;pub fn compress(self) &#45;&gt; Endorsement&lt;CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Endorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: self.R.compress(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1465.5,-1239 1382.5,-1239 1382.5,-1203 1465.5,-1203 1465.5,-1239"/>
<text text-anchor="middle" x="1424" y="-1217.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1465.71,-1218.54C1528.05,-1214.44 1650.79,-1205.02 1754,-1189 1766.58,-1187.05 1769.51,-1185.46 1782,-1183 1814.98,-1176.5 1852.16,-1169.8 1881.25,-1164.71"/>
<polygon fill="blue" stroke="blue" points="1881.94,-1168.14 1891.19,-1162.97 1880.73,-1161.24 1881.94,-1168.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;fn to_token_raw(unblinded_endorsement: RistrettoPoint) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Skip the Sho for this, we&#39;re hashing a single point into a single bitstring. We don&#39;t &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// need domain separa...">
<polygon fill="white" stroke="black" points="1695,-1401 1588,-1401 1588,-1365 1695,-1365 1695,-1401"/>
<text text-anchor="middle" x="1641.5" y="-1379.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token_raw</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1461.56,-1427.84C1493.41,-1419.86 1540.3,-1408.11 1578.09,-1398.64"/>
<polygon fill="blue" stroke="blue" points="1579.13,-1401.99 1587.98,-1396.16 1577.43,-1395.2 1579.13,-1401.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1451.3,-1272.46C1519.77,-1265.48 1701.86,-1244.59 1754,-1215 1770.44,-1205.67 1765.55,-1192.31 1782,-1183 1812.21,-1165.9 1850.84,-1159.24 1881.33,-1156.8"/>
<polygon fill="blue" stroke="blue" points="1881.6,-1160.29 1891.34,-1156.13 1881.13,-1153.31 1881.6,-1160.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1396.72,-1276.71C1374.03,-1279.79 1343.25,-1288.21 1329.25,-1311 1310.85,-1340.97 1315.98,-2544.43 1329.25,-2577 1341.3,-2606.58 1367.19,-2632.05 1388.86,-2649.46"/>
<polygon fill="blue" stroke="blue" points="1386.88,-2652.35 1396.93,-2655.73 1391.18,-2646.83 1386.88,-2652.35"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.42,-1277.7C1470.73,-1279.67 1498.36,-1282.49 1526.55,-1285.37"/>
<polygon fill="blue" stroke="blue" points="1526.23,-1288.85 1536.54,-1286.39 1526.94,-1281.89 1526.23,-1288.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1275.5,-1453 1132.5,-1453 1132.5,-1417 1275.5,-1417 1275.5,-1453"/>
<text text-anchor="middle" x="1204" y="-1431.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.64,-1427.6C1288.78,-1423.48 1301.5,-1417.28 1311.5,-1408 1347.92,-1374.21 1312.19,-1337.45 1347,-1302 1357.66,-1291.15 1372.96,-1284.64 1387.04,-1280.75"/>
<polygon fill="blue" stroke="blue" points="1388.09,-1284.1 1396.99,-1278.35 1386.45,-1277.29 1388.09,-1284.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.75,-1424.73C1288.37,-1420.82 1300.87,-1415.43 1311.5,-1408 1334.44,-1391.97 1324.83,-1373.08 1347,-1356 1356.96,-1348.32 1369.3,-1342.71 1381.11,-1338.65"/>
<polygon fill="blue" stroke="blue" points="1382.34,-1341.93 1390.84,-1335.6 1380.25,-1335.25 1382.34,-1341.93"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.62,-1440.97C1289.08,-1445.16 1301.93,-1451.75 1311.5,-1462 1371.9,-1526.72 1282.33,-1597.54 1347,-1658 1364.43,-1674.3 1511.69,-1684.34 1590.76,-1688.61"/>
<polygon fill="blue" stroke="blue" points="1590.81,-1692.12 1600.98,-1689.15 1591.17,-1685.13 1590.81,-1692.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="1254.5,-1345 1153.5,-1345 1153.5,-1309 1254.5,-1309 1254.5,-1345"/>
<text text-anchor="middle" x="1204" y="-1323.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.51,-1322.04C1273.62,-1318.27 1294.85,-1311.64 1311.5,-1300 1334.44,-1283.97 1324.83,-1265.08 1347,-1248 1354.66,-1242.1 1363.71,-1237.42 1372.85,-1233.73"/>
<polygon fill="blue" stroke="blue" points="1374.17,-1236.97 1382.35,-1230.23 1371.75,-1230.4 1374.17,-1236.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.71,-1331.67C1273.86,-1335.41 1295.05,-1342.08 1311.5,-1354 1335.36,-1371.29 1323.97,-1391.62 1347,-1410 1355.71,-1416.95 1366.36,-1422.2 1376.89,-1426.12"/>
<polygon fill="blue" stroke="blue" points="1375.88,-1429.47 1386.48,-1429.35 1378.12,-1422.84 1375.88,-1429.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.74,-1315.14C1295,-1305.53 1350.76,-1292.23 1386.85,-1283.62"/>
<polygon fill="blue" stroke="blue" points="1388.02,-1286.94 1396.93,-1281.22 1386.39,-1280.13 1388.02,-1286.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.59,-1339.51C1272.53,-1344.05 1292.93,-1349.23 1311.5,-1354 1336.42,-1360.4 1364.45,-1367.69 1386.17,-1373.36"/>
<polygon fill="blue" stroke="blue" points="1385.42,-1376.78 1395.98,-1375.92 1387.18,-1370.01 1385.42,-1376.78"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.74,-1327.46C1292.71,-1327.8 1344.47,-1328.28 1380.52,-1328.61"/>
<polygon fill="blue" stroke="blue" points="1380.67,-1332.11 1390.7,-1328.7 1380.74,-1325.11 1380.67,-1332.11"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1254.75,-1329.37C1274.58,-1332.7 1296.27,-1339.71 1311.5,-1354 1348.97,-1389.15 1308.71,-1429.75 1347,-1464 1401.76,-1512.99 1451.72,-1450.98 1509,-1497 1526.06,-1510.71 1517.93,-1523.12 1529,-1542 1555.77,-1587.66 1593.94,-1635.9 1617.96,-1664.72"/>
<polygon fill="blue" stroke="blue" points="1615.52,-1667.26 1624.63,-1672.67 1620.88,-1662.76 1615.52,-1667.26"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1302,-1507 1106,-1507 1106,-1471 1302,-1471 1302,-1507"/>
<text text-anchor="middle" x="1204" y="-1485.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1280.63,-1470.96C1312.51,-1463.36 1348.59,-1454.75 1376.46,-1448.1"/>
<polygon fill="blue" stroke="blue" points="1377.41,-1451.47 1386.33,-1445.75 1375.79,-1444.66 1377.41,-1451.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1301.01,-1470.76C1304.79,-1468.19 1308.31,-1465.29 1311.5,-1462 1362.23,-1409.73 1298.76,-1356.57 1347,-1302 1357.15,-1290.52 1372.51,-1283.92 1386.77,-1280.13"/>
<polygon fill="blue" stroke="blue" points="1387.9,-1283.46 1396.87,-1277.83 1386.34,-1276.63 1387.9,-1283.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1295.96,-1470.94C1301.42,-1468.35 1306.65,-1465.39 1311.5,-1462 1334.44,-1445.97 1324.83,-1427.08 1347,-1410 1358.31,-1401.28 1372.68,-1395.22 1385.86,-1391.09"/>
<polygon fill="blue" stroke="blue" points="1386.99,-1394.41 1395.65,-1388.29 1385.07,-1387.68 1386.99,-1394.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1299.62,-1470.95C1303.87,-1468.34 1307.86,-1465.37 1311.5,-1462 1347.92,-1428.21 1312.19,-1391.45 1347,-1356 1356.13,-1346.7 1368.68,-1340.59 1380.94,-1336.58"/>
<polygon fill="blue" stroke="blue" points="1382,-1339.92 1390.65,-1333.8 1380.07,-1333.19 1382,-1339.92"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1257.66,-1507.05C1284.3,-1515.92 1317.22,-1526.51 1347,-1535 1418.32,-1555.33 1443.3,-1540.59 1509,-1575 1552.75,-1597.91 1593.85,-1638.37 1618.1,-1664.93"/>
<polygon fill="blue" stroke="blue" points="1615.78,-1667.59 1625.07,-1672.69 1620.99,-1662.91 1615.78,-1667.59"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerDerivedKeyPair]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1452.29,-1383C1483.68,-1383 1536.24,-1383 1577.84,-1383"/>
<polygon fill="blue" stroke="blue" points="1577.89,-1386.5 1587.89,-1383 1577.89,-1379.5 1577.89,-1386.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1457.01,-1324.18C1473.84,-1320.37 1494.01,-1313.67 1509,-1302 1522.23,-1291.7 1516.85,-1281.56 1529,-1270 1622.28,-1181.29 1660.78,-1172.33 1782,-1129 1810.85,-1118.69 1844.28,-1112.18 1872.26,-1108.15"/>
<polygon fill="blue" stroke="blue" points="1872.87,-1111.6 1882.3,-1106.77 1871.92,-1104.66 1872.87,-1111.6"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.19,-1330.71C1475.39,-1333.5 1496.86,-1340.22 1509,-1356 1535.32,-1390.22 1525.32,-1700.99 1529,-1744 1559.57,-2101.08 1620.14,-2532.61 1636.4,-2645.75"/>
<polygon fill="blue" stroke="blue" points="1632.94,-2646.29 1637.84,-2655.69 1639.87,-2645.3 1632.94,-2646.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.26,-1324.21C1476.13,-1321.41 1501.2,-1317.69 1526.72,-1313.9"/>
<polygon fill="blue" stroke="blue" points="1527.52,-1317.32 1536.89,-1312.38 1526.49,-1310.39 1527.52,-1317.32"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]to_token_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]compress().</title>
<path fill="none" stroke="blue" d="M1695.03,-1366.55C1716.38,-1357.3 1739.42,-1343.59 1754,-1324 1792.16,-1272.76 1736.42,-1227.77 1782,-1183 1807.72,-1157.74 1848.55,-1151.72 1881.13,-1151.61"/>
<polygon fill="blue" stroke="blue" points="1881.33,-1155.12 1891.38,-1151.77 1881.44,-1148.12 1881.33,-1155.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter&lt;&#39;_&gt;) &#45;&gt; std::fmt::Result { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.compress().fmt(f) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1231,-1291 1177,-1291 1177,-1255 1231,-1255 1231,-1291"/>
<text text-anchor="middle" x="1204" y="-1269.3" font-family="Helvetica,sans-Serif" font-size="14.00">fmt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement][Debug]fmt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-1266.73C1266.07,-1258.43 1328.09,-1243.64 1372.17,-1233.13"/>
<polygon fill="blue" stroke="blue" points="1373.2,-1236.48 1382.12,-1230.75 1371.58,-1229.67 1373.2,-1236.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="1248,-1399 1160,-1399 1160,-1363 1248,-1363 1248,-1399"/>
<text text-anchor="middle" x="1204" y="-1377.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1248.13,-1377.21C1268.78,-1373.7 1292.97,-1366.95 1311.5,-1354 1334.44,-1337.97 1324.83,-1319.08 1347,-1302 1358.58,-1293.08 1373.35,-1286.94 1386.79,-1282.8"/>
<polygon fill="blue" stroke="blue" points="1388.04,-1286.09 1396.73,-1280.02 1386.15,-1279.35 1388.04,-1286.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1248.07,-1370.73C1286.68,-1361.52 1342.98,-1348.09 1381.2,-1338.97"/>
<polygon fill="blue" stroke="blue" points="1382.07,-1342.36 1390.99,-1336.64 1380.45,-1335.55 1382.07,-1342.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1248.13,-1382.91C1269.4,-1385.92 1294.14,-1392.79 1311.5,-1408 1343.52,-1436.07 1314.73,-1469.21 1347,-1497 1403.04,-1545.25 1445.97,-1496.32 1509,-1535 1561.93,-1567.48 1604.04,-1628.65 1625.33,-1663.97"/>
<polygon fill="blue" stroke="blue" points="1622.43,-1665.95 1630.52,-1672.78 1628.46,-1662.39 1622.43,-1665.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1501,-1774 1347,-1774 1347,-1738 1501,-1738 1501,-1774"/>
<text text-anchor="middle" x="1424" y="-1752.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1484.74,-1737.98C1518.12,-1727.91 1559.23,-1715.51 1590.84,-1705.98"/>
<polygon fill="blue" stroke="blue" points="1592.18,-1709.23 1600.74,-1702.99 1590.16,-1702.53 1592.18,-1709.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="1232,-1772 1176,-1772 1176,-1736 1232,-1736 1232,-1772"/>
<text text-anchor="middle" x="1204" y="-1750.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.32,-1753.12C1256.69,-1753.91 1291.51,-1759.21 1311.5,-1781 1377.56,-1853.01 1288.08,-1920.03 1347,-1998 1394.95,-2061.45 1459.37,-2011.86 1509,-2074 1581.87,-2165.24 1626.3,-2539.47 1637.62,-2645.74"/>
<polygon fill="blue" stroke="blue" points="1634.17,-2646.41 1638.7,-2655.99 1641.13,-2645.68 1634.17,-2646.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.17,-1754.25C1258.25,-1754.49 1299.07,-1754.86 1336.27,-1755.2"/>
<polygon fill="blue" stroke="blue" points="1336.61,-1758.71 1346.65,-1755.3 1336.68,-1751.71 1336.61,-1758.71"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="1231,-1826 1177,-1826 1177,-1790 1231,-1790 1231,-1826"/>
<text text-anchor="middle" x="1204" y="-1804.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1212.74,-1826.25C1231.87,-1871.95 1281.96,-1995.27 1311.5,-2102 1368.38,-2307.51 1407.18,-2562.34 1419.11,-2645.98"/>
<polygon fill="blue" stroke="blue" points="1415.66,-2646.56 1420.53,-2655.97 1422.59,-2645.58 1415.66,-2646.56"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.27,-1826.21C1250.34,-1850.03 1299.11,-1891.83 1347,-1918 1350.04,-1919.66 1353.2,-1921.26 1356.44,-1922.78"/>
<polygon fill="blue" stroke="blue" points="1355.13,-1926.03 1365.69,-1926.88 1357.97,-1919.63 1355.13,-1926.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-1801.73C1257.6,-1795.45 1299.48,-1785.46 1337.4,-1776.42"/>
<polygon fill="blue" stroke="blue" points="1338.54,-1779.74 1347.46,-1774.02 1336.92,-1772.94 1338.54,-1779.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="1232,-2371 1176,-2371 1176,-2335 1232,-2335 1232,-2371"/>
<text text-anchor="middle" x="1204" y="-2349.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.11,-2350.09C1289.38,-2345.44 1424.36,-2342.5 1509,-2406 1589.82,-2466.63 1623.8,-2590.32 1635.42,-2645.88"/>
<polygon fill="blue" stroke="blue" points="1632,-2646.62 1637.39,-2655.74 1638.86,-2645.24 1632,-2646.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1231,-2317 1177,-2317 1177,-2281 1231,-2281 1231,-2317"/>
<text text-anchor="middle" x="1204" y="-2295.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.13,-2298.81C1255.01,-2300.05 1289.82,-2305.62 1311.5,-2326 1404.77,-2413.67 1420.28,-2579.32 1422.67,-2645.57"/>
<polygon fill="blue" stroke="blue" points="1419.17,-2645.78 1422.95,-2655.68 1426.17,-2645.58 1419.17,-2645.78"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.35,-2290.87C1255.73,-2281.99 1291.19,-2265.41 1311.5,-2239 1349.85,-2189.14 1325.3,-2161.04 1347,-2102 1364.32,-2054.86 1391.1,-2002.91 1407.81,-1972.16"/>
<polygon fill="blue" stroke="blue" points="1410.91,-1973.78 1412.65,-1963.33 1404.77,-1970.42 1410.91,-1973.78"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1232,-2150 1176,-2150 1176,-2114 1232,-2114 1232,-2150"/>
<text text-anchor="middle" x="1204" y="-2128.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.22,-2135.01C1254.62,-2138.37 1286.62,-2145.26 1311.5,-2159 1417.59,-2217.58 1440.95,-2246.72 1509,-2347 1576.74,-2446.83 1618.14,-2586.85 1633.59,-2645.94"/>
<polygon fill="blue" stroke="blue" points="1630.21,-2646.87 1636.09,-2655.68 1636.99,-2645.13 1630.21,-2646.87"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.core.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.core.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1501,-2152 1347,-2152 1347,-2116 1501,-2116 1501,-2152"/>
<text text-anchor="middle" x="1424" y="-2130.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1232.17,-2132.25C1258.25,-2132.49 1299.07,-2132.86 1336.27,-2133.2"/>
<polygon fill="blue" stroke="blue" points="1336.61,-2136.71 1346.65,-2133.3 1336.68,-2129.71 1336.61,-2136.71"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1441.95,-2115.67C1460.32,-2095.08 1489.61,-2060.06 1509,-2026 1569.95,-1918.95 1615.02,-1778.08 1632.51,-1718.99"/>
<polygon fill="blue" stroke="blue" points="1635.91,-1719.83 1635.36,-1709.25 1629.19,-1717.87 1635.91,-1719.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="1238.5,-2204 1169.5,-2204 1169.5,-2168 1238.5,-2168 1238.5,-2204"/>
<text text-anchor="middle" x="1204" y="-2182.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1238.58,-2194.6C1262.31,-2202.38 1293.06,-2216.2 1311.5,-2239 1412.89,-2364.38 1423.23,-2571.11 1423.46,-2645.9"/>
<polygon fill="blue" stroke="blue" points="1419.96,-2645.94 1423.43,-2655.95 1426.96,-2645.96 1419.96,-2645.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1657.51,-1672.83C1679.85,-1645.38 1722.58,-1591.32 1754,-1542 1823.27,-1433.29 1891.39,-1295.18 1919.07,-1237.37"/>
<polygon fill="blue" stroke="blue" points="1922.31,-1238.7 1923.46,-1228.17 1915.99,-1235.69 1922.31,-1238.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="938.5,-1880 753.5,-1880 753.5,-1844 938.5,-1844 938.5,-1880"/>
<text text-anchor="middle" x="846" y="-1858.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M938.78,-1853.23C981,-1848.68 1031.68,-1842.5 1077,-1835 1107.46,-1829.96 1141.69,-1822.51 1166.78,-1816.71"/>
<polygon fill="blue" stroke="blue" points="1167.65,-1820.1 1176.59,-1814.42 1166.06,-1813.28 1167.65,-1820.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;pub fn from_service_id(service_id: ServiceId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M1 = Self::calc_M1(service_id); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let raw_uuid_bytes = service_id.raw_uuid().into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = RistrettoPoint...">
<polygon fill="white" stroke="black" points="1266.5,-3160 1141.5,-3160 1141.5,-3124 1266.5,-3124 1266.5,-3160"/>
<text text-anchor="middle" x="1204" y="-3138.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M938.6,-1880.01C988.47,-1894.94 1046.13,-1921.7 1077,-1969 1105.06,-2012 1085.66,-2842.81 1096.5,-2893 1114.89,-2978.17 1162.46,-3070.51 1187.33,-3115.01"/>
<polygon fill="blue" stroke="blue" points="1184.31,-3116.78 1192.28,-3123.76 1190.4,-3113.34 1184.31,-3116.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="907.5,-1826 784.5,-1826 784.5,-1790 907.5,-1790 907.5,-1826"/>
<text text-anchor="middle" x="846" y="-1804.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M907.79,-1798.78C981.76,-1787.56 1104.33,-1768.97 1165.65,-1759.67"/>
<polygon fill="blue" stroke="blue" points="1166.29,-1763.11 1175.66,-1758.15 1165.24,-1756.19 1166.29,-1763.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M907.64,-1795.59C960.64,-1788.67 1035.43,-1789.12 1077,-1835 1096.74,-1856.78 1090.34,-2864.26 1096.5,-2893 1114.77,-2978.19 1162.4,-3070.53 1187.31,-3115.02"/>
<polygon fill="blue" stroke="blue" points="1184.29,-3116.79 1192.26,-3123.77 1190.38,-3113.34 1184.29,-3116.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn new(backup_id: &amp;libsignal_account_keys::BackupId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20231003_Signal_BackupId&#39; , &amp;backup_id.0).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1451,-2994 1397,-2994 1397,-2958 1451,-2958 1451,-2994"/>
<text text-anchor="middle" x="1424" y="-2972.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1451.42,-2981.03C1485.97,-2987.6 1547.18,-2999.24 1590.59,-3007.5"/>
<polygon fill="blue" stroke="blue" points="1590.18,-3010.99 1600.66,-3009.42 1591.49,-3004.11 1590.18,-3010.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="879,-2370 813,-2370 813,-2334 879,-2334 879,-2370"/>
<text text-anchor="middle" x="846" y="-2348.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M879.1,-2359.14C929.6,-2368.27 1026.98,-2376.94 1077,-2322 1117.49,-2277.52 1058.71,-1827.8 1096.5,-1781 1112.89,-1760.7 1142.16,-1754.39 1165.88,-1752.91"/>
<polygon fill="blue" stroke="blue" points="1166.11,-1756.4 1175.98,-1752.54 1165.86,-1749.4 1166.11,-1756.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M879.02,-2344.39C929.41,-2334.54 1026.66,-2324.52 1077,-2379 1096.39,-2399.99 1090.23,-2865.12 1096.5,-2893 1115.6,-2978.01 1162.86,-3070.43 1187.5,-3114.98"/>
<polygon fill="blue" stroke="blue" points="1184.46,-3116.72 1192.39,-3123.74 1190.57,-3113.3 1184.46,-3116.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="880.5,-2478 811.5,-2478 811.5,-2442 880.5,-2442 880.5,-2478"/>
<text text-anchor="middle" x="846" y="-2456.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.56,-2467.5C930.82,-2476.54 1025.22,-2484.7 1077,-2433 1102.97,-2407.07 1078.47,-2300.97 1096.5,-2269 1111.19,-2242.95 1137.69,-2222.26 1160.57,-2208.04"/>
<polygon fill="blue" stroke="blue" points="1162.67,-2210.87 1169.46,-2202.73 1159.08,-2204.86 1162.67,-2210.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.69,-2456.45C931.99,-2453.15 1028.82,-2455.54 1077,-2513 1104.16,-2545.4 1086.96,-2851.81 1096.5,-2893 1116.17,-2977.88 1163.17,-3070.36 1187.63,-3114.95"/>
<polygon fill="blue" stroke="blue" points="1184.58,-3116.67 1192.48,-3123.72 1190.7,-3113.27 1184.58,-3116.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="910,-2424 782,-2424 782,-2388 910,-2388 910,-2424"/>
<text text-anchor="middle" x="846" y="-2402.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.18,-2418.26C962.59,-2424.42 1035.08,-2422.92 1077,-2379 1098.3,-2356.68 1090.1,-2132.18 1096.5,-2102 1118.03,-2000.43 1166.83,-1886.54 1190.14,-1835.42"/>
<polygon fill="blue" stroke="blue" points="1193.45,-1836.6 1194.45,-1826.05 1187.09,-1833.68 1193.45,-1836.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.23,-2393.48C962.86,-2387.1 1035.63,-2388.43 1077,-2433 1111.8,-2470.5 1085.17,-2843.11 1096.5,-2893 1115.79,-2977.97 1162.96,-3070.4 1187.54,-3114.97"/>
<polygon fill="blue" stroke="blue" points="1184.5,-3116.7 1192.42,-3123.73 1190.61,-3113.29 1184.5,-3116.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="880.5,-3351 811.5,-3351 811.5,-3315 880.5,-3315 880.5,-3351"/>
<text text-anchor="middle" x="846" y="-3329.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.8,-3341.04C931.81,-3350.94 1027.72,-3360.36 1077,-3306 1115.7,-3263.31 1070.72,-2320.53 1096.5,-2269 1110.08,-2241.86 1137.16,-2220.94 1160.61,-2206.9"/>
<polygon fill="blue" stroke="blue" points="1162.46,-2209.87 1169.39,-2201.85 1158.97,-2203.8 1162.46,-2209.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;fn new(room_id: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20230413_Signal_CallLinkRoomId&#39; , room_id).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1231,-3297 1177,-3297 1177,-3261 1231,-3261 1231,-3297"/>
<text text-anchor="middle" x="1204" y="-3275.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.66,-3330.05C925.59,-3325.89 1007.59,-3317.49 1077,-3306 1107.46,-3300.96 1141.69,-3293.51 1166.78,-3287.71"/>
<polygon fill="blue" stroke="blue" points="1167.65,-3291.1 1176.59,-3285.42 1166.06,-3284.28 1167.65,-3291.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M880.62,-3340.2C930.51,-3348.74 1023.95,-3356.11 1077,-3306 1113.41,-3271.61 1066.53,-3235.13 1096.5,-3195 1106.03,-3182.24 1119.48,-3172.36 1133.63,-3164.78"/>
<polygon fill="blue" stroke="blue" points="1135.59,-3167.71 1142.99,-3160.12 1132.48,-3161.44 1135.59,-3167.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="879,-3297 813,-3297 813,-3261 879,-3261 879,-3297"/>
<text text-anchor="middle" x="846" y="-3275.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M879.06,-3286.64C929.5,-3296.54 1026.82,-3306.63 1077,-3252 1099.86,-3227.11 1090.07,-2677.18 1096.5,-2644 1116.03,-2543.24 1165.6,-2431.04 1189.59,-2380.42"/>
<polygon fill="blue" stroke="blue" points="1192.87,-2381.67 1194.03,-2371.14 1186.56,-2378.65 1192.87,-2381.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M879.27,-3285.06C927.83,-3292.21 1020.06,-3297.95 1077,-3252 1097.84,-3235.18 1078.86,-3215.14 1096.5,-3195 1107.6,-3182.33 1122.44,-3172.35 1137.51,-3164.64"/>
<polygon fill="blue" stroke="blue" points="1139.39,-3167.61 1146.89,-3160.12 1136.36,-3161.3 1139.39,-3167.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.34,-3266C1256.45,-3252.1 1293.07,-3227.59 1311.5,-3195 1342.27,-3140.6 1300.1,-2957.31 1347,-2916 1401.03,-2868.41 1440.83,-2892.84 1509,-2916 1552.72,-2930.85 1593.28,-2966.75 1617.48,-2991.48"/>
<polygon fill="blue" stroke="blue" points="1615,-2993.96 1624.44,-2998.76 1620.06,-2989.12 1615,-2993.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="873,-3243 819,-3243 819,-3207 873,-3207 873,-3243"/>
<text text-anchor="middle" x="846" y="-3221.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.25,-3231.1C921.79,-3240.64 1025.34,-3252.52 1077,-3195 1109.27,-3159.07 1066.42,-2363.78 1096.5,-2326 1112.96,-2305.33 1142.78,-2299.13 1166.69,-2297.78"/>
<polygon fill="blue" stroke="blue" points="1166.96,-2301.27 1176.85,-2297.47 1166.75,-2294.28 1166.96,-2301.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.32,-3223.86C916.52,-3221.49 1004.89,-3214.49 1077,-3195 1104.81,-3187.48 1134.58,-3175.18 1158.19,-3164.32"/>
<polygon fill="blue" stroke="blue" points="1159.67,-3167.49 1167.25,-3160.08 1156.71,-3161.15 1159.67,-3167.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_uid(&amp;self, user_id: libsignal_core::Aci) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(user_id.into()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.encrypt_uid_...">
<polygon fill="white" stroke="black" points="895,-3160 797,-3160 797,-3124 895,-3124 895,-3160"/>
<text text-anchor="middle" x="846" y="-3138.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M895.01,-3142C955.79,-3142 1061.03,-3142 1131.34,-3142"/>
<polygon fill="blue" stroke="blue" points="1131.45,-3145.5 1141.45,-3142 1131.45,-3138.5 1131.45,-3145.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_profile_key_bytes( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_bytes: ProfileKeyBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::ProfileKeyCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_...">
<polygon fill="white" stroke="black" points="944,-3488 748,-3488 748,-3452 944,-3452 944,-3488"/>
<text text-anchor="middle" x="846" y="-3466.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_profile_key_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;pub fn new(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut encoded_profile_key = profile_key_bytes; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profile_key[0] &amp;= 254; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profil...">
<polygon fill="white" stroke="black" points="1231,-3654 1177,-3654 1177,-3618 1231,-3618 1231,-3654"/>
<text text-anchor="middle" x="1204" y="-3632.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M944.13,-3469.7C990.1,-3474.66 1042.37,-3488.52 1077,-3523 1103.85,-3549.74 1070.3,-3578.62 1096.5,-3606 1114.58,-3624.89 1143.55,-3632.18 1166.72,-3634.85"/>
<polygon fill="blue" stroke="blue" points="1166.62,-3638.36 1176.89,-3635.79 1167.25,-3631.39 1166.62,-3638.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;service_id: libsignal_core::ServiceId, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(ser...">
<polygon fill="white" stroke="black" points="919,-3434 773,-3434 773,-3398 919,-3398 919,-3434"/>
<text text-anchor="middle" x="846" y="-3412.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M919.22,-3427.82C970.5,-3431.76 1037.07,-3427.07 1077,-3386 1106.74,-3355.41 1072.22,-3230.08 1096.5,-3195 1105.42,-3182.11 1118.41,-3172.21 1132.27,-3164.65"/>
<polygon fill="blue" stroke="blue" points="1134.11,-3167.64 1141.47,-3160.02 1130.96,-3161.39 1134.11,-3167.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="1231,-1154 1177,-1154 1177,-1118 1231,-1118 1231,-1154"/>
<text text-anchor="middle" x="1204" y="-1132.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.12,-1144.26C1254.34,-1152.63 1288.13,-1167.43 1311.5,-1189 1333.99,-1209.76 1323.31,-1228.63 1347,-1248 1358.4,-1257.32 1373.27,-1263.54 1386.82,-1267.63"/>
<polygon fill="blue" stroke="blue" points="1386.29,-1271.12 1396.85,-1270.37 1388.12,-1264.36 1386.29,-1271.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;pub fn compress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: self.reserved, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1245.5,-1100 1162.5,-1100 1162.5,-1064 1245.5,-1064 1245.5,-1100"/>
<text text-anchor="middle" x="1204" y="-1078.3" font-family="Helvetica,sans-Serif" font-size="14.00">compress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]compress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[Endorsement]compress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1245.54,-1083.86C1267.25,-1086.77 1293.2,-1093.57 1311.5,-1109 1341.23,-1134.08 1319.23,-1161.76 1347,-1189 1354.28,-1196.14 1363.4,-1201.79 1372.76,-1206.22"/>
<polygon fill="blue" stroke="blue" points="1371.58,-1209.52 1382.15,-1210.25 1374.34,-1203.09 1371.58,-1209.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="913,-3654 779,-3654 779,-3618 913,-3618 913,-3654"/>
<text text-anchor="middle" x="846" y="-3632.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M913.13,-3636C988.05,-3636 1107.46,-3636 1166.91,-3636"/>
<polygon fill="blue" stroke="blue" points="1166.95,-3639.5 1176.95,-3636 1166.95,-3632.5 1166.95,-3639.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M421.78,-2723.32C424.18,-2852.93 445.56,-3630.52 615,-3772 693.81,-3837.8 982.92,-3813.09 1077,-3772 1127.96,-3749.74 1167.52,-3695.59 1187.86,-3662.73"/>
<polygon fill="blue" stroke="blue" points="1190.92,-3664.44 1193.08,-3654.07 1184.92,-3660.82 1190.92,-3664.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="873,-2723 819,-2723 819,-2687 873,-2687 873,-2723"/>
<text text-anchor="middle" x="846" y="-2701.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M587.06,-2705C668.54,-2705 759.61,-2705 808.77,-2705"/>
<polygon fill="blue" stroke="blue" points="808.9,-2708.5 818.9,-2705 808.9,-2701.5 808.9,-2708.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="556.5,-2669 284.5,-2669 284.5,-2633 556.5,-2633 556.5,-2669"/>
<text text-anchor="middle" x="420.5" y="-2647.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="874,-2561 818,-2561 818,-2525 874,-2525 874,-2561"/>
<text text-anchor="middle" x="846" y="-2539.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M456.47,-2632.84C494.45,-2613.96 557.41,-2585.11 615,-2570 681.56,-2552.53 761.94,-2546.35 807.9,-2544.17"/>
<polygon fill="blue" stroke="blue" points="808.15,-2547.67 817.99,-2543.74 807.85,-2540.67 808.15,-2547.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="873,-2669 819,-2669 819,-2633 873,-2633 873,-2669"/>
<text text-anchor="middle" x="846" y="-2647.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M556.66,-2651C644.9,-2651 753.64,-2651 808.97,-2651"/>
<polygon fill="blue" stroke="blue" points="808.98,-2654.5 818.98,-2651 808.98,-2647.5 808.98,-2654.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M556.65,-2652.82C571.2,-2658.27 584.5,-2666.33 595,-2678 625.07,-2711.4 583.47,-3049.98 615,-3082 651.09,-3118.65 1026.13,-3104.35 1077,-3112 1094.66,-3114.66 1113.49,-3118.55 1131.06,-3122.66"/>
<polygon fill="blue" stroke="blue" points="1130.7,-3126.17 1141.24,-3125.1 1132.33,-3119.37 1130.7,-3126.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M1652.02,-2998.95C1674.01,-2956.4 1728.37,-2845.93 1754,-2747 1908.09,-2152.13 1928.93,-1393.1 1931.62,-1238.3"/>
<polygon fill="blue" stroke="blue" points="1935.12,-1238.26 1931.78,-1228.21 1928.12,-1238.15 1935.12,-1238.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;pub fn get_point_single_elligator(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes_single_elligator( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.internal_sho.squeeze_and_ratchet_as_array(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1737.5,-3089 1545.5,-3089 1545.5,-3053 1737.5,-3053 1737.5,-3089"/>
<text text-anchor="middle" x="1641.5" y="-3067.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M1737.74,-3056.03C1743.67,-3052.72 1749.18,-3048.76 1754,-3044 1789.61,-3008.88 1745.36,-2969.05 1782,-2935 1784.97,-2932.24 1788.12,-2929.72 1791.42,-2927.41"/>
<polygon fill="blue" stroke="blue" points="1793.28,-2930.37 1799.91,-2922.1 1789.57,-2924.43 1793.28,-2930.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="460,-3853 381,-3853 381,-3817 460,-3817 460,-3853"/>
<text text-anchor="middle" x="420.5" y="-3831.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M460.04,-3839.99C584,-3855.29 970.52,-3897.08 1077,-3838 1144.71,-3800.43 1180.79,-3709.68 1195.28,-3663.7"/>
<polygon fill="blue" stroke="blue" points="1198.65,-3664.66 1198.2,-3654.07 1191.95,-3662.63 1198.65,-3664.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M424.25,-3816.71C446.22,-3670.67 593.18,-2698.78 615,-2678 666.92,-2628.56 758.1,-2634.89 808.66,-2643.29"/>
<polygon fill="blue" stroke="blue" points="808.34,-2646.79 818.8,-2645.1 809.57,-2639.9 808.34,-2646.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="874,-2777 818,-2777 818,-2741 874,-2741 874,-2777"/>
<text text-anchor="middle" x="846" y="-2755.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M422.02,-3816.78C426.08,-3689.52 456.68,-2934.27 615,-2786 667.03,-2737.28 757.3,-2743.09 807.89,-2751.27"/>
<polygon fill="blue" stroke="blue" points="807.31,-2754.72 817.76,-2752.98 808.5,-2747.82 807.31,-2754.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M460.01,-3834.19C594.08,-3831.01 1034.57,-3817.14 1077,-3772 1120.93,-3725.26 1061.81,-3248.96 1096.5,-3195 1105.07,-3181.68 1118.06,-3171.58 1132.06,-3163.97"/>
<polygon fill="blue" stroke="blue" points="1133.98,-3166.92 1141.37,-3159.32 1130.86,-3160.66 1133.98,-3166.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="481,-3961 360,-3961 360,-3925 481,-3925 481,-3961"/>
<text text-anchor="middle" x="420.5" y="-3939.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M444.18,-3961.19C478.65,-3987.54 547.38,-4035.12 615,-4053 764.64,-4092.56 1159.37,-4075.52 1311.5,-4047 1403.18,-4029.81 1454.53,-4051.72 1509,-3976 1539.24,-3933.96 1496.54,-3084.36 1529,-3044 1543.67,-3025.76 1568.36,-3018.58 1590.79,-3016.14"/>
<polygon fill="blue" stroke="blue" points="1591.2,-3019.62 1600.89,-3015.34 1590.64,-3012.64 1591.2,-3019.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_Credentials_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get...">
<polygon fill="white" stroke="black" points="460,-3907 381,-3907 381,-3871 460,-3871 460,-3907"/>
<text text-anchor="middle" x="420.5" y="-3885.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M460.13,-3892.43C562.29,-3900.5 847.42,-3916.46 1077,-3867 1280,-3823.27 1390.81,-3859.74 1509,-3689 1549.81,-3630.05 1483.8,-3099.66 1529,-3044 1543.75,-3025.83 1568.45,-3018.66 1590.86,-3016.21"/>
<polygon fill="blue" stroke="blue" points="1591.27,-3019.68 1600.95,-3015.39 1590.7,-3012.71 1591.27,-3019.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyCommitment_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="885.5,-4018 806.5,-4018 806.5,-3982 885.5,-3982 885.5,-4018"/>
<text text-anchor="middle" x="846" y="-3996.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M885.66,-4009.77C1001.19,-4036.4 1345.91,-4096.6 1509,-3914 1541.21,-3877.94 1498.67,-3081.65 1529,-3044 1543.68,-3025.77 1568.38,-3018.59 1590.8,-3016.15"/>
<polygon fill="blue" stroke="blue" points="1591.21,-3019.63 1600.9,-3015.35 1590.65,-3012.65 1591.21,-3019.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="914.5,-3964 777.5,-3964 777.5,-3928 914.5,-3928 914.5,-3964"/>
<text text-anchor="middle" x="846" y="-3942.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.74,-3939.41C964.41,-3931.5 1030.94,-3914.12 1077,-3876 1146.04,-3818.85 1182.09,-3713.9 1196.03,-3663.91"/>
<polygon fill="blue" stroke="blue" points="1199.45,-3664.67 1198.67,-3654.11 1192.69,-3662.85 1199.45,-3664.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="932,-3737 760,-3737 760,-3701 932,-3701 932,-3737"/>
<text text-anchor="middle" x="846" y="-3715.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M932.18,-3713.38C976.01,-3709.11 1029.96,-3701.71 1077,-3689 1108.69,-3680.44 1142.92,-3665.65 1167.7,-3653.87"/>
<polygon fill="blue" stroke="blue" points="1169.22,-3657.02 1176.7,-3649.52 1166.18,-3650.72 1169.22,-3657.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="948.5,-3571 743.5,-3571 743.5,-3535 948.5,-3535 948.5,-3571"/>
<text text-anchor="middle" x="846" y="-3549.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1243.5,-3571 1164.5,-3571 1164.5,-3535 1243.5,-3535 1243.5,-3571"/>
<text text-anchor="middle" x="1204" y="-3549.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M948.54,-3553C1015.97,-3553 1101.49,-3553 1154.21,-3553"/>
<polygon fill="blue" stroke="blue" points="1154.3,-3556.5 1164.3,-3553 1154.3,-3549.5 1154.3,-3556.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M925.81,-3571.01C970.23,-3581.2 1026.73,-3594.22 1077,-3606 1107.4,-3613.12 1141.9,-3621.35 1167.1,-3627.38"/>
<polygon fill="blue" stroke="blue" points="1166.41,-3630.81 1176.95,-3629.74 1168.04,-3624.01 1166.41,-3630.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1221.15,-3534.56C1245.65,-3505.36 1291.46,-3445.65 1311.5,-3386 1342.74,-3293.01 1274.9,-3012.52 1347,-2946 1421,-2877.73 1549.16,-2951.85 1608.56,-2993.14"/>
<polygon fill="blue" stroke="blue" points="1606.63,-2996.06 1616.81,-2998.98 1610.67,-2990.35 1606.63,-2996.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY...">
<polygon fill="white" stroke="black" points="1459.5,-3654 1388.5,-3654 1388.5,-3618 1459.5,-3618 1459.5,-3654"/>
<text text-anchor="middle" x="1424" y="-3632.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1428.19,-3617.98C1443.94,-3529.46 1513.18,-3144.23 1529,-3124 1539.17,-3111 1553.31,-3101.02 1568.12,-3093.43"/>
<polygon fill="blue" stroke="blue" points="1569.87,-3096.47 1577.39,-3089 1566.86,-3090.15 1569.87,-3096.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M1231.3,-3648C1287.01,-3671.47 1419.18,-3716.7 1509,-3663 1706.46,-3544.93 1686.49,-3426.94 1754,-3207 1771.83,-3148.91 1740.69,-2979.56 1782,-2935 1784.99,-2931.78 1788.21,-2928.86 1791.64,-2926.23"/>
<polygon fill="blue" stroke="blue" points="1793.67,-2929.08 1799.98,-2920.56 1789.74,-2923.29 1793.67,-2929.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1231.3,-3636C1267.68,-3636 1333.87,-3636 1378.15,-3636"/>
<polygon fill="blue" stroke="blue" points="1378.35,-3639.5 1388.35,-3636 1378.35,-3632.5 1378.35,-3639.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="873,-2831 819,-2831 819,-2795 873,-2795 873,-2831"/>
<text text-anchor="middle" x="846" y="-2809.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.02,-2819.03C920.72,-2828.39 1022.27,-2840.15 1077,-2786 1125.42,-2738.1 1045.37,-2678.99 1096.5,-2634 1178.43,-2561.91 1319.98,-2619.74 1386.49,-2653.69"/>
<polygon fill="blue" stroke="blue" points="1385.25,-2656.99 1395.74,-2658.51 1388.48,-2650.79 1385.25,-2656.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="874,-2993 818,-2993 818,-2957 874,-2957 874,-2993"/>
<text text-anchor="middle" x="846" y="-2971.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.14,-2980.68C951.25,-2995.16 1174.84,-3025.64 1311.5,-2925 1343.48,-2901.45 1317.65,-2869.75 1347,-2843 1402.98,-2791.96 1443.24,-2827.61 1509,-2790 1551.63,-2765.62 1592.75,-2725.91 1617.33,-2699.86"/>
<polygon fill="blue" stroke="blue" points="1620.17,-2701.96 1624.42,-2692.25 1615.04,-2697.19 1620.17,-2701.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.23,-2710.6C920.36,-2719 1019.78,-2728.91 1077,-2678 1104.99,-2653.1 1067.11,-2619.22 1096.5,-2596 1171.48,-2536.76 1220.36,-2567.29 1311.5,-2596 1344.47,-2606.39 1376.17,-2630.38 1397.29,-2649.03"/>
<polygon fill="blue" stroke="blue" points="1395.08,-2651.76 1404.84,-2655.88 1399.78,-2646.57 1395.08,-2651.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="874,-2615 818,-2615 818,-2579 874,-2579 874,-2615"/>
<text text-anchor="middle" x="846" y="-2593.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.12,-2602.9C921.78,-2611.53 1020.82,-2621.46 1077,-2570 1108.46,-2541.18 1063.41,-2502.93 1096.5,-2476 1170.61,-2415.68 1217.79,-2457.32 1311.5,-2476 1404.71,-2494.58 1428.38,-2507.66 1509,-2558 1550.42,-2583.86 1591.56,-2622.86 1616.51,-2648.37"/>
<polygon fill="blue" stroke="blue" points="1614.25,-2651.07 1623.72,-2655.83 1619.29,-2646.21 1614.25,-2651.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.26,-2548.22C921.68,-2555.61 1019.77,-2563.17 1077,-2513 1102.25,-2490.86 1069.87,-2460.45 1096.5,-2440 1172.29,-2381.8 1216.4,-2430.7 1311.5,-2440 1400.55,-2448.71 1434.47,-2429.5 1509,-2479 1571.8,-2520.7 1612.41,-2603.67 1630.18,-2646.7"/>
<polygon fill="blue" stroke="blue" points="1626.93,-2648.02 1633.91,-2655.99 1633.43,-2645.41 1626.93,-2648.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.1,-2656.8C920.47,-2665.64 1020.87,-2676.41 1077,-2624 1111.37,-2591.9 1060.31,-2550.03 1096.5,-2520 1170.03,-2458.97 1226.4,-2476.55 1311.5,-2520 1363.36,-2546.48 1396.7,-2609.6 1412.41,-2646.28"/>
<polygon fill="blue" stroke="blue" points="1409.32,-2647.97 1416.37,-2655.87 1415.79,-2645.3 1409.32,-2647.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="873,-3047 819,-3047 819,-3011 873,-3011 873,-3047"/>
<text text-anchor="middle" x="846" y="-3025.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.27,-3035.28C921.39,-3045.05 1023.6,-3057.46 1077,-3002 1115.04,-2962.5 1059.35,-2796.34 1096.5,-2756 1129.29,-2720.39 1264.98,-2734.38 1311.5,-2721 1319.17,-2718.79 1357.06,-2702.63 1386.57,-2689.86"/>
<polygon fill="blue" stroke="blue" points="1388.02,-2693.05 1395.81,-2685.86 1385.24,-2686.63 1388.02,-2693.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.14,-3029.6C922.45,-3032.29 1028.6,-3045.89 1077,-3112 1109.45,-3156.32 1062.48,-3562.87 1096.5,-3606 1112.98,-3626.89 1142.8,-3633.96 1166.7,-3636.04"/>
<polygon fill="blue" stroke="blue" points="1166.67,-3639.55 1176.86,-3636.67 1167.1,-3632.56 1166.67,-3639.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.04,-3033.09C916.23,-3040.3 1005.03,-3056.91 1077,-3082 1105.88,-3092.07 1136.92,-3106.8 1160.96,-3119.14"/>
<polygon fill="blue" stroke="blue" points="1159.66,-3122.41 1170.15,-3123.92 1162.89,-3116.2 1159.66,-3122.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.08,-2765.18C922.12,-2774.38 1022.33,-2785.35 1077,-2732 1121.02,-2689.05 1050.05,-2635.31 1096.5,-2595 1244.36,-2466.69 1504.55,-2594.74 1602.11,-2650.69"/>
<polygon fill="blue" stroke="blue" points="1600.63,-2653.87 1611.04,-2655.86 1604.15,-2647.82 1600.63,-2653.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.25,-2752.96C922.11,-2744.12 1021.45,-2733.86 1077,-2786 1112.25,-2819.08 1082.57,-2846.71 1096.5,-2893 1121.61,-2976.47 1166.21,-3069.64 1188.9,-3114.68"/>
<polygon fill="blue" stroke="blue" points="1185.87,-3116.46 1193.52,-3123.79 1192.12,-3113.29 1185.87,-3116.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="873,-2885 819,-2885 819,-2849 873,-2849 873,-2885"/>
<text text-anchor="middle" x="846" y="-2863.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M873.1,-2873.11C920.93,-2882.61 1022.68,-2894.57 1077,-2840 1104.29,-2812.58 1067.65,-2692.78 1096.5,-2667 1138.19,-2629.75 1309.43,-2654.05 1385.86,-2667.17"/>
<polygon fill="blue" stroke="blue" points="1385.54,-2670.67 1396,-2668.94 1386.75,-2663.77 1385.54,-2670.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="874,-2939 818,-2939 818,-2903 874,-2903 874,-2939"/>
<text text-anchor="middle" x="846" y="-2917.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M874.14,-2923.05C962.69,-2929.2 1241.46,-2944.01 1311.5,-2893 1346.59,-2867.44 1315.29,-2831.65 1347,-2802 1402.13,-2750.44 1440,-2781.6 1509,-2751 1542.97,-2735.94 1579.24,-2714.23 1605.07,-2697.7"/>
<polygon fill="blue" stroke="blue" points="1607.25,-2700.46 1613.75,-2692.09 1603.45,-2694.58 1607.25,-2700.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_UidEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_a1 = ...">
<polygon fill="white" stroke="black" points="1243.5,-4158 1164.5,-4158 1164.5,-4122 1243.5,-4122 1243.5,-4158"/>
<text text-anchor="middle" x="1204" y="-4136.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1243.66,-4146.03C1309.78,-4153.89 1443.78,-4158.56 1509,-4081 1546.09,-4036.9 1492.94,-3088.94 1529,-3044 1543.65,-3025.75 1568.34,-3018.56 1590.77,-3016.13"/>
<polygon fill="blue" stroke="blue" points="1591.18,-3019.61 1600.87,-3015.32 1590.62,-3012.63 1591.18,-3019.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="922,-4131 770,-4131 770,-4095 922,-4095 922,-4131"/>
<text text-anchor="middle" x="846" y="-4109.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.14,-4115.21C974.33,-4112.3 1040.78,-4098.8 1077,-4053 1106.58,-4015.6 1070.94,-3235.25 1096.5,-3195 1104.99,-3181.63 1117.96,-3171.51 1131.95,-3163.9"/>
<polygon fill="blue" stroke="blue" points="1133.88,-3166.85 1141.26,-3159.25 1130.75,-3160.59 1133.88,-3166.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="922,-4185 770,-4185 770,-4149 922,-4149 922,-4185"/>
<text text-anchor="middle" x="846" y="-4163.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.06,-4161.31C991.92,-4156.01 1094,-4148.27 1153.96,-4143.72"/>
<polygon fill="blue" stroke="blue" points="1154.58,-4147.18 1164.28,-4142.94 1154.05,-4140.2 1154.58,-4147.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M922.02,-4181.01C973.45,-4185.87 1039.02,-4181.82 1077,-4140 1112.3,-4101.13 1068.39,-3239.36 1096.5,-3195 1104.98,-3181.62 1117.94,-3171.5 1131.93,-3163.89"/>
<polygon fill="blue" stroke="blue" points="1133.85,-3166.84 1141.24,-3159.24 1130.73,-3160.58 1133.85,-3166.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M1(service_id: ServiceId) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_UID_CalcM1&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;service_id.service_id_binary(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1459.5,-3160 1388.5,-3160 1388.5,-3124 1459.5,-3124 1459.5,-3160"/>
<text text-anchor="middle" x="1424" y="-3138.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1459.71,-3137.13C1476.66,-3133.07 1496.13,-3125.62 1509,-3112 1530.63,-3089.1 1506.19,-3065.73 1529,-3044 1545.43,-3028.35 1569.33,-3021.28 1590.79,-3018.25"/>
<polygon fill="blue" stroke="blue" points="1591.23,-3021.73 1600.76,-3017.1 1590.43,-3014.77 1591.23,-3021.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M1216.26,-3123.85C1236.29,-3091.3 1279.05,-3020.64 1311.5,-2959 1328.68,-2926.37 1316.36,-2904.52 1347,-2884 1430.39,-2828.17 1732.89,-2840.59 1867.1,-2849.21"/>
<polygon fill="blue" stroke="blue" points="1867.03,-2852.72 1877.24,-2849.88 1867.49,-2845.73 1867.03,-2852.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1266.6,-3142C1302.16,-3142 1346.08,-3142 1378.31,-3142"/>
<polygon fill="blue" stroke="blue" points="1378.34,-3145.5 1388.34,-3142 1378.34,-3138.5 1378.34,-3145.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node135"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="945.5,-2233 746.5,-2233 746.5,-2197 945.5,-2197 945.5,-2233"/>
<text text-anchor="middle" x="846" y="-2211.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.78,-2202.5C990.89,-2202.3 1041.94,-2210.64 1077,-2242 1105.57,-2267.55 1069.67,-2298.63 1096.5,-2326 1114.33,-2344.19 1142.54,-2350.75 1165.45,-2352.86"/>
<polygon fill="blue" stroke="blue" points="1165.33,-2356.36 1175.54,-2353.55 1165.8,-2349.38 1165.33,-2356.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.63,-2210.03C988.39,-2211.92 1037.58,-2219.82 1077,-2242 1089.28,-2248.91 1084.87,-2259.04 1096.5,-2267 1117.54,-2281.4 1145.22,-2289.46 1167.09,-2293.89"/>
<polygon fill="blue" stroke="blue" points="1166.52,-2297.34 1176.99,-2295.73 1167.8,-2290.46 1166.52,-2297.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.53,-2221.3C988.64,-2219.73 1038.13,-2211.72 1077,-2188 1090.26,-2179.91 1083.8,-2167.94 1096.5,-2159 1116.83,-2144.68 1144.07,-2137.95 1165.91,-2134.78"/>
<polygon fill="blue" stroke="blue" points="1166.35,-2138.25 1175.83,-2133.53 1165.47,-2131.31 1166.35,-2138.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.69,-2206.96C1015.72,-2201.26 1106.33,-2193.87 1159.23,-2189.57"/>
<polygon fill="blue" stroke="blue" points="1159.6,-2193.05 1169.29,-2188.75 1159.04,-2186.07 1159.6,-2193.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.69,-2199.43C992.34,-2198.04 1044.75,-2206.26 1077,-2242 1127.77,-2298.26 1050.32,-3545.91 1096.5,-3606 1112.71,-3627.1 1142.56,-3634.15 1166.54,-3636.17"/>
<polygon fill="blue" stroke="blue" points="1166.54,-3639.68 1176.73,-3636.77 1166.96,-3632.69 1166.54,-3639.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M945.75,-2199.64C992.26,-2198.35 1044.54,-2206.58 1077,-2242 1101.45,-2268.67 1088.71,-2857.67 1096.5,-2893 1115.26,-2978.09 1162.67,-3070.47 1187.42,-3115"/>
<polygon fill="blue" stroke="blue" points="1184.39,-3116.75 1192.34,-3123.75 1190.49,-3113.32 1184.39,-3116.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node136"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="914.5,-2071 777.5,-2071 777.5,-2035 914.5,-2035 914.5,-2071"/>
<text text-anchor="middle" x="846" y="-2049.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.55,-2065.66C966.48,-2071.14 1036.07,-2068.49 1077,-2026 1114.89,-1986.66 1061.27,-1822.74 1096.5,-1781 1113.22,-1761.19 1142.2,-1754.8 1165.71,-1753.17"/>
<polygon fill="blue" stroke="blue" points="1165.89,-1756.67 1175.73,-1752.73 1165.59,-1749.67 1165.89,-1756.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.57,-2060.36C963.52,-2062.27 1029.22,-2057.43 1077,-2026 1086.06,-2020.04 1156.79,-1892.32 1188.13,-1835.19"/>
<polygon fill="blue" stroke="blue" points="1191.25,-1836.79 1192.99,-1826.34 1185.11,-1833.43 1191.25,-1836.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.57,-2056.05C960.89,-2059.32 1023.4,-2066.08 1077,-2080 1108.14,-2088.09 1141.74,-2102.25 1166.41,-2113.76"/>
<polygon fill="blue" stroke="blue" points="1165.2,-2117.05 1175.73,-2118.18 1168.19,-2110.73 1165.2,-2117.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.57,-2042.08C965.3,-2037.9 1033.28,-2041.44 1077,-2080 1104.12,-2103.92 1071.01,-2133.35 1096.5,-2159 1112.87,-2175.47 1137.75,-2182.38 1159.34,-2185.1"/>
<polygon fill="blue" stroke="blue" points="1159.01,-2188.59 1169.31,-2186.1 1159.71,-2181.62 1159.01,-2188.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M914.67,-2039.79C967.03,-2033.89 1037.13,-2036.24 1077,-2080 1107.43,-2113.4 1086.9,-2848.85 1096.5,-2893 1115.01,-2978.14 1162.53,-3070.5 1187.36,-3115.01"/>
<polygon fill="blue" stroke="blue" points="1184.33,-3116.77 1192.3,-3123.76 1190.43,-3113.33 1184.33,-3116.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node137"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="911.5,-2287 780.5,-2287 780.5,-2251 911.5,-2251 911.5,-2287"/>
<text text-anchor="middle" x="846" y="-2265.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M911.74,-2264.34C964.94,-2264.42 1037.72,-2274.33 1077,-2322 1097.19,-2346.5 1089.6,-2862.02 1096.5,-2893 1115.44,-2978.05 1162.77,-3070.45 1187.46,-3114.99"/>
<polygon fill="blue" stroke="blue" points="1184.42,-3116.73 1192.37,-3123.74 1190.53,-3113.31 1184.42,-3116.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node138"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="1069,-2179 623,-2179 623,-2143 1069,-2143 1069,-2179"/>
<text text-anchor="middle" x="846" y="-2157.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1066.6,-2179C1070.22,-2181.77 1073.69,-2184.77 1077,-2188 1121.31,-2231.28 1055.13,-2279.9 1096.5,-2326 1113.63,-2345.08 1142.13,-2351.57 1165.34,-2353.43"/>
<polygon fill="blue" stroke="blue" points="1165.4,-2356.93 1175.57,-2353.98 1165.78,-2349.94 1165.4,-2356.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1065.67,-2179.13C1069.6,-2181.86 1073.38,-2184.81 1077,-2188 1104.12,-2211.92 1071.57,-2240.8 1096.5,-2267 1114.62,-2286.04 1143.59,-2293.88 1166.74,-2297.05"/>
<polygon fill="blue" stroke="blue" points="1166.58,-2300.55 1176.91,-2298.2 1167.37,-2293.6 1166.58,-2300.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.16,-2142.98C1105.83,-2139.92 1140.75,-2137.07 1165.61,-2135.05"/>
<polygon fill="blue" stroke="blue" points="1165.95,-2138.53 1175.63,-2134.23 1165.38,-2131.55 1165.95,-2138.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1069.17,-2176.6C1103.38,-2179 1135.27,-2181.24 1159.33,-2182.93"/>
<polygon fill="blue" stroke="blue" points="1159.26,-2186.44 1169.48,-2183.65 1159.75,-2179.45 1159.26,-2186.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.07,-2179.22C1071.19,-2181.94 1074.17,-2184.87 1077,-2188 1129.76,-2246.51 1048.51,-3543.52 1096.5,-3606 1112.71,-3627.1 1142.55,-3634.15 1166.53,-3636.18"/>
<polygon fill="blue" stroke="blue" points="1166.54,-3639.68 1176.73,-3636.78 1166.95,-3632.69 1166.54,-3639.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.01,-2179.27C1071.15,-2181.98 1074.15,-2184.88 1077,-2188 1103.44,-2216.91 1088.11,-2854.73 1096.5,-2893 1115.17,-2978.11 1162.62,-3070.48 1187.4,-3115"/>
<polygon fill="blue" stroke="blue" points="1184.37,-3116.76 1192.32,-3123.75 1190.47,-3113.32 1184.37,-3116.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node139"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1033.5,-2017 658.5,-2017 658.5,-1981 1033.5,-1981 1033.5,-2017"/>
<text text-anchor="middle" x="846" y="-1995.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M966.56,-1980.99C1007.37,-1968.91 1049.58,-1948.73 1077,-1915 1114.96,-1868.3 1056.21,-1825.71 1096.5,-1781 1113.66,-1761.95 1142.16,-1755.47 1165.36,-1753.6"/>
<polygon fill="blue" stroke="blue" points="1165.8,-1757.08 1175.59,-1753.04 1165.41,-1750.09 1165.8,-1757.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M915.47,-1980.95C962.74,-1966.85 1026.02,-1944.67 1077,-1915 1115.94,-1892.33 1154.51,-1857.22 1178.52,-1833.46"/>
<polygon fill="blue" stroke="blue" points="1181.2,-1835.72 1185.78,-1826.17 1176.24,-1830.78 1181.2,-1835.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1033.7,-2011.43C1048.64,-2015.27 1063.25,-2020.06 1077,-2026 1118.91,-2044.12 1157.57,-2080.89 1180.72,-2105.99"/>
<polygon fill="blue" stroke="blue" points="1178.38,-2108.61 1187.68,-2113.68 1183.57,-2103.92 1178.38,-2108.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1033.68,-1998.84C1049.71,-2005.09 1064.53,-2013.88 1077,-2026 1119.85,-2067.63 1056.48,-2114.64 1096.5,-2159 1112.22,-2176.42 1137.42,-2183.34 1159.37,-2185.82"/>
<polygon fill="blue" stroke="blue" points="1159.23,-2189.32 1169.5,-2186.69 1159.83,-2182.34 1159.23,-2189.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1033.64,-1996.63C1049.99,-2003.21 1064.89,-2012.69 1077,-2026 1109.42,-2061.64 1086.3,-2845.91 1096.5,-2893 1114.95,-2978.16 1162.5,-3070.51 1187.35,-3115.01"/>
<polygon fill="blue" stroke="blue" points="1184.32,-3116.77 1192.29,-3123.76 1190.42,-3113.33 1184.32,-3116.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="883,-2125 809,-2125 809,-2089 883,-2089 883,-2125"/>
<text text-anchor="middle" x="846" y="-2103.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.06,-2099.45C933.45,-2091.19 1024.59,-2084.98 1077,-2134 1111.66,-2166.42 1062.19,-2206.2 1096.5,-2239 1166.24,-2305.67 1238.99,-2205.35 1311.5,-2269 1369.39,-2319.81 1407.66,-2562.53 1419.28,-2645.85"/>
<polygon fill="blue" stroke="blue" points="1415.82,-2646.42 1420.65,-2655.86 1422.76,-2645.47 1415.82,-2646.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.19,-2104.12C1014.4,-2094.04 1460,-2062.98 1509,-2102 1596.19,-2171.42 1630.39,-2539.88 1638.5,-2645.61"/>
<polygon fill="blue" stroke="blue" points="1635.02,-2646.12 1639.26,-2655.83 1642,-2645.59 1635.02,-2646.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.2,-2098.94C934.18,-2089.95 1026.51,-2082.72 1077,-2134 1107.09,-2164.56 1068.48,-2293.53 1096.5,-2326 1113.43,-2345.63 1142.4,-2352.02 1165.85,-2353.71"/>
<polygon fill="blue" stroke="blue" points="1165.69,-2357.2 1175.84,-2354.17 1166.02,-2350.21 1165.69,-2357.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.32,-2099.17C934.02,-2090.59 1025.53,-2083.99 1077,-2134 1119.85,-2175.63 1057.46,-2221.78 1096.5,-2267 1113.87,-2287.11 1143.34,-2294.85 1166.89,-2297.7"/>
<polygon fill="blue" stroke="blue" points="1166.6,-2301.19 1176.89,-2298.67 1167.28,-2294.22 1166.6,-2301.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.09,-2109.53C950.88,-2114.3 1096.59,-2124.53 1165.46,-2129.36"/>
<polygon fill="blue" stroke="blue" points="1165.61,-2132.88 1175.84,-2130.09 1166.11,-2125.9 1165.61,-2132.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.09,-2103.03C930.72,-2099.55 1015.69,-2099.49 1077,-2134 1089.28,-2140.91 1084.7,-2151.3 1096.5,-2159 1115.08,-2171.13 1138.77,-2177.81 1159.09,-2181.49"/>
<polygon fill="blue" stroke="blue" points="1158.62,-2184.96 1169.05,-2183.11 1159.75,-2178.05 1158.62,-2184.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M883.02,-2105.8C928.77,-2103.59 1009.86,-2097.37 1077,-2080 1086.07,-2077.65 1087.51,-2074.62 1096.5,-2072 1275.33,-2019.92 1363.21,-2113.93 1509,-1998 1599.33,-1926.17 1628.69,-1780.44 1637.28,-1719.16"/>
<polygon fill="blue" stroke="blue" points="1640.78,-1719.44 1638.62,-1709.06 1633.84,-1718.52 1640.78,-1719.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().</title>
<g id="a_node141"><a xlink:title="fn test_lizard() { &#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(&amp;zkgroup::common::constants::TEST_ARRAY_16); &#160;&#160;&#160;&#160;let data_out = p.lizard_decode::&lt;Sha256&gt;(); &#160;&#160;&#160;&#160;assert_hex_eq!(data_out.unwrap()...">
<polygon fill="white" stroke="black" points="1685,-3172 1598,-3172 1598,-3136 1685,-3136 1685,-3172"/>
<text text-anchor="middle" x="1641.5" y="-3150.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M1685.13,-3153.64C1708.94,-3151.05 1737.12,-3143.59 1754,-3124 1824.97,-3041.65 1707.6,-2960.27 1782,-2881 1803.47,-2858.12 1837.24,-2850.64 1867.31,-2849.21"/>
<polygon fill="blue" stroke="blue" points="1867.44,-2852.71 1877.34,-2848.94 1867.25,-2845.71 1867.44,-2852.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M1685.07,-3147.48C1706.65,-3142.98 1732.72,-3135.64 1754,-3124 1819.16,-3088.35 1879.65,-3024.11 1910.54,-2988.16"/>
<polygon fill="blue" stroke="blue" points="1913.58,-2989.98 1917.38,-2980.09 1908.25,-2985.45 1913.58,-2989.98"/>
</g>
</g>
</svg>
