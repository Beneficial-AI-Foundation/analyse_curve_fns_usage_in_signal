<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="951pt" height="481pt"
 viewBox="0.00 0.00 951.00 481.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 477)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-477 947,-477 947,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="785,-313 785,-388 935,-388 935,-313 785,-313"/>
<text text-anchor="middle" x="860" y="-372.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-145 8,-274 444.5,-274 444.5,-145 8,-145"/>
<text text-anchor="middle" x="226.25" y="-258.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="106,-8 106,-137 192,-137 192,-8 106,-8"/>
<text text-anchor="middle" x="149" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="310,-282 310,-465 765,-465 765,-282 310,-282"/>
<text text-anchor="middle" x="537.5" y="-449.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="927,-357 793,-357 793,-321 927,-321 927,-357"/>
<text text-anchor="middle" x="860" y="-335.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="282,-243 16,-243 16,-207 282,-207 282,-243"/>
<text text-anchor="middle" x="149" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node3"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="436.5,-243 342.5,-243 342.5,-207 436.5,-207 436.5,-243"/>
<text text-anchor="middle" x="389.5" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M282.15,-225C299.71,-225 316.88,-225 332.13,-225"/>
<polygon fill="blue" stroke="blue" points="332.37,-228.5 342.37,-225 332.37,-221.5 332.37,-228.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="561,-380 507,-380 507,-344 561,-344 561,-380"/>
<text text-anchor="middle" x="534" y="-358.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M419.2,-243.02C432.82,-252.42 448.75,-264.71 461,-278 481.31,-300.03 476.68,-312.98 497,-335 497.74,-335.8 498.51,-336.6 499.3,-337.39"/>
<polygon fill="blue" stroke="blue" points="497.08,-340.1 506.85,-344.2 501.77,-334.9 497.08,-340.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="280.5,-189 17.5,-189 17.5,-153 280.5,-153 280.5,-189"/>
<text text-anchor="middle" x="149" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node5"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="434,-189 345,-189 345,-153 434,-153 434,-189"/>
<text text-anchor="middle" x="389.5" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M280.76,-171C299.72,-171 318.29,-171 334.52,-171"/>
<polygon fill="blue" stroke="blue" points="334.83,-174.5 344.83,-171 334.83,-167.5 334.83,-174.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="571,-326 497,-326 497,-290 571,-290 571,-326"/>
<text text-anchor="middle" x="534" y="-304.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M434.18,-182.85C443.63,-186.7 453.14,-191.67 461,-198 488.61,-220.26 509.23,-256.02 521.17,-280.69"/>
<polygon fill="blue" stroke="blue" points="518.06,-282.3 525.46,-289.87 524.4,-279.33 518.06,-282.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="181.5,-52 116.5,-52 116.5,-16 181.5,-16 181.5,-52"/>
<text text-anchor="middle" x="149" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M181.67,-35.24C209.6,-37.51 250.62,-43.79 282,-61 319.27,-81.44 351.54,-119.27 370.51,-144.79"/>
<polygon fill="blue" stroke="blue" points="367.71,-146.89 376.42,-152.92 373.37,-142.78 367.71,-146.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="184,-106 114,-106 114,-70 184,-70 184,-106"/>
<text text-anchor="middle" x="149" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M184.03,-94.49C213.11,-101.57 254.48,-115.47 282,-141 302.69,-160.2 288.83,-179.33 310,-198 316.6,-203.82 324.51,-208.4 332.74,-212"/>
<polygon fill="blue" stroke="blue" points="331.52,-215.28 342.1,-215.66 334.07,-208.76 331.52,-215.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="461,-380 318,-380 318,-344 461,-344 461,-380"/>
<text text-anchor="middle" x="389.5" y="-358.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M461.33,-362C473.49,-362 485.66,-362 496.43,-362"/>
<polygon fill="blue" stroke="blue" points="496.68,-365.5 506.68,-362 496.68,-358.5 496.68,-365.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="571,-434 497,-434 497,-398 571,-398 571,-434"/>
<text text-anchor="middle" x="534" y="-412.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M438.35,-380.13C454.15,-386.12 471.68,-392.76 487.31,-398.69"/>
<polygon fill="blue" stroke="blue" points="486.18,-402 496.77,-402.27 488.66,-395.46 486.18,-402"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M438.35,-343.87C454.15,-337.88 471.68,-331.24 487.31,-325.31"/>
<polygon fill="blue" stroke="blue" points="488.66,-328.54 496.77,-321.73 486.18,-322 488.66,-328.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node11"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="757,-380 607,-380 607,-344 757,-344 757,-380"/>
<text text-anchor="middle" x="682" y="-358.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M561.1,-362C571.33,-362 583.68,-362 596.52,-362"/>
<polygon fill="blue" stroke="blue" points="596.89,-365.5 606.89,-362 596.89,-358.5 596.89,-365.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M561.46,-397.82C564.82,-395.04 568.1,-392.06 571,-389 590.82,-368.05 581.57,-348.61 607,-335 660.64,-306.29 730.35,-309.95 782.85,-319.28"/>
<polygon fill="blue" stroke="blue" points="782.3,-322.74 792.78,-321.15 783.6,-315.86 782.3,-322.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M757.13,-352.31C765.64,-351.2 774.32,-350.07 782.86,-348.95"/>
<polygon fill="blue" stroke="blue" points="783.32,-352.42 792.79,-347.65 782.42,-345.48 783.32,-352.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M571.09,-321.35C586.62,-327.09 605.18,-333.96 622.58,-340.39"/>
<polygon fill="blue" stroke="blue" points="621.51,-343.73 632.11,-343.92 623.94,-337.17 621.51,-343.73"/>
</g>
</g>
</svg>
