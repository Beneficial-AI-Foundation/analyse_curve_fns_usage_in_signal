digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." [label="from_canonical_bytes", tooltip="    pub fn from_canonical_bytes(bytes: [u8; 32]) -> CtOption<Scalar> {         let high_bit_unset = (bytes[31] >> 7).ct_eq(&0);         let candidate = Scalar { bytes };         CtOption::new(candidat...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "signature.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom<&ed25519::Signature>`]try_from()." [label="try_from", tooltip="    fn try_from(sig: &ed25519::Signature) -> Result<InternalSignature, SignatureError> {         InternalSignature::from_bytes(&sig.to_bytes())     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature]from_bytes()." [label="from_bytes", tooltip="    pub fn from_bytes(bytes: &[u8; SIGNATURE_LENGTH]) -> Result<InternalSignature, SignatureError> {         // TODO: Use bytes.split_array_ref once itâ€™s in MSRV.         let mut R_bytes: [u8; 32] =...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 signature/check_scalar()." [label="check_scalar", tooltip="fn check_scalar(bytes: [u8; 32]) -> Result<Scalar, SignatureError> {     match Scalar::from_canonical_bytes(bytes).into() {         None => Err(InternalError::ScalarFormat.into()),         Some(x) => ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "verifying.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." [label="verify", tooltip="    fn verify(&self, message: &[u8], signature: &ed25519::Signature) -> Result<(), SignatureError> {         self.raw_verify::<Sha512>(message, signature)     }", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." [label="raw_verify", tooltip="    pub(crate) fn raw_verify<CtxDigest>(         &self,         message: &[u8],         signature: &ed25519::Signature,     ) -> Result<(), SignatureError>     where         CtxDigest: Digest<OutputSi...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_3 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." [label="KeyTransparency_Distinguished", tooltip="async fn KeyTransparency_Distinguished(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedCha...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." [label="KeyTransparency_Search", tooltip="async fn KeyTransparency_Search(     // TODO: it is currently possible to pass an env that does not match chat     environment: AsType<Environment, u8>,     chat_connection: &UnauthenticatedChatConnec...", fillcolor=white, style="filled"]
  }
  subgraph cluster_4 {
    label = "usernames.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." [label="Username_Verify", tooltip="pub fn Username_Verify(     proof: &[u8],     hash: &[u8], ) -> Result<(), ::usernames::ProofVerificationFailure> {     if hash.len() != 32 {         return Err(::usernames::ProofVerificationFailure);...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." [label="Username_Proof", tooltip="pub fn Username_Proof(username: String, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(&username)?.proof(randomness) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_5 {
    label = "zkgroup.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation()." [label="ServerSecretParams_VerifyAuthCredentialPresentation", tooltip="fn ServerSecretParams_VerifyAuthCredentialPresentation(     server_secret_params: &ServerSecretParams,     group_public_params: Serialized<GroupPublicParams>,     presentation_bytes: &[u8],     curren...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic()." [label="ServerSecretParams_IssueReceiptCredentialDeterministic", tooltip="fn ServerSecretParams_IssueReceiptCredentialDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     request: Serialized<ReceiptCredentialRequest>,     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic()." [label="ServerSecretParams_SignDeterministic", tooltip="fn ServerSecretParams_SignDeterministic(     params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     message: &[u8], ) -> [u8; SIGNATURE_LEN] {     params.sign(*randomness, message) }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic()." [label="ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic", tooltip="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     user_id: Aci,     profile_key: Se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify()." [label="CreateCallLinkCredentialPresentation_Verify", tooltip="fn CreateCallLinkCredentialPresentation_Verify(     presentation_bytes: &[u8],     room_id: &[u8],     now: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8], ) -> Result<()...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic()." [label="ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic", tooltip="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     aci: Aci,     pni: Pni,     redemption_time:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse()." [label="BackupAuthCredentialRequestContext_ReceiveResponse", tooltip="fn BackupAuthCredentialRequestContext_ReceiveResponse(     context_bytes: &[u8],     response_bytes: &[u8],     expected_redemption_time: Timestamp,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGro...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic()." [label="BackupAuthCredential_PresentDeterministic", tooltip="fn BackupAuthCredential_PresentDeterministic(     credential_bytes: &[u8],     server_params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Result<Vec<u8>, ZkGroupVerificationFailure> {    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation()." [label="ServerSecretParams_VerifyProfileKeyCredentialPresentation", tooltip="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation(     server_secret_params: &ServerSecretParams,     group_public_params: Serialized<GroupPublicParams>,     presentation_bytes: &[u8],     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(     response_bytes: &[u8],     concatenated_group_member_ciphertexts: &[u8],     local_user_ciphertext: &[u8],     now: Timestamp,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic()." [label="ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic", tooltip="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     group_secret_params: Serial...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic()." [label="ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic", tooltip="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     group_secret_params: Serialized<Gr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse()." [label="CreateCallLinkCredentialRequestContext_ReceiveResponse", tooltip="fn CreateCallLinkCredentialRequestContext_ReceiveResponse(     context_bytes: &[u8],     response_bytes: &[u8],     user_id: Aci,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGroupVerificationFailu...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify()." [label="BackupAuthCredentialPresentation_Verify", tooltip="fn BackupAuthCredentialPresentation_Verify(     presentation_bytes: &[u8],     now: Timestamp,     server_params_bytes: &[u8], ) -> Result<(), ZkGroupVerificationFailure> {     let presentation = binc...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic()." [label="CreateCallLinkCredential_PresentDeterministic", tooltip="fn CreateCallLinkCredential_PresentDeterministic(     credential_bytes: &[u8],     room_id: &[u8],     user_id: Aci,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8],     randomness: ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic()." [label="CallLinkAuthCredentialResponse_IssueDeterministic", tooltip="fn CallLinkAuthCredentialResponse_IssueDeterministic(     user_id: Aci,     redemption_time: Timestamp,     params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     let params = ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic()." [label="ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic", tooltip="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(     server_secret_params: &ServerSecretParams,     randomness: &[u8; RANDOMNESS_LEN],     request: Serialized<ProfileKeyCredential...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic()." [label="BackupAuthCredentialRequest_IssueDeterministic", tooltip="fn BackupAuthCredentialRequest_IssueDeterministic(     request_bytes: &[u8],     redemption_time: Timestamp,     backup_level: AsType<BackupLevel, u8>,     credential_type: AsType<BackupCredentialType...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation()." [label="ServerSecretParams_VerifyReceiptCredentialPresentation", tooltip="fn ServerSecretParams_VerifyReceiptCredentialPresentation(     server_secret_params: &ServerSecretParams,     presentation: Serialized<ReceiptCredentialPresentation>, ) -> Result<(), ZkGroupVerificati...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential()." [label="ServerPublicParams_ReceiveReceiptCredential", tooltip="fn ServerPublicParams_ReceiveReceiptCredential(     server_public_params: &ServerPublicParams,     request_context: Serialized<ReceiptCredentialRequestContext>,     response: Serialized<ReceiptCredent...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." [label="GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds", tooltip="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(     response_bytes: &[u8],     group_members: ServiceIdSequence<'_>,     local_user: ServiceId,     now: Timestamp,     group_params: ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic()." [label="ServerPublicParams_CreateReceiptCredentialPresentationDeterministic", tooltip="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(     server_public_params: &ServerPublicParams,     randomness: &[u8; RANDOMNESS_LEN],     receipt_credential: Serialized<Receipt...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." [label="GroupSendEndorsementsResponse_IssueDeterministic", tooltip="fn GroupSendEndorsementsResponse_IssueDeterministic(     concatenated_group_member_ciphertexts: &[u8],     key_pair: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8> {     assert!(concatenat...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential()." [label="ServerPublicParams_ReceiveExpiringProfileKeyCredential", tooltip="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential(     server_public_params: &ServerPublicParams,     request_context: Serialized<ProfileKeyCredentialRequestContext>,     response: Serialized<...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic()." [label="CallLinkAuthCredential_PresentDeterministic", tooltip="fn CallLinkAuthCredential_PresentDeterministic(     credential_bytes: &[u8],     user_id: Aci,     redemption_time: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8],     ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature()." [label="ServerPublicParams_VerifySignature", tooltip="fn ServerPublicParams_VerifySignature(     server_public_params: &ServerPublicParams,     message: &[u8],     notary_signature: &[u8; SIGNATURE_LEN], ) -> Result<(), ZkGroupVerificationFailure> {     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId()." [label="ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId", tooltip="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(     params: &ServerPublicParams,     aci: Aci,     pni: Pni,     redemption_time: Timestamp,     auth_credential_with_pni_response_bytes:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify()." [label="CallLinkAuthCredentialPresentation_Verify", tooltip="fn CallLinkAuthCredentialPresentation_Verify(     presentation_bytes: &[u8],     now: Timestamp,     server_params_bytes: &[u8],     call_link_params_bytes: &[u8], ) -> Result<(), ZkGroupVerificationF...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive()." [label="CallLinkAuthCredentialResponse_Receive", tooltip="fn CallLinkAuthCredentialResponse_Receive(     response_bytes: &[u8],     user_id: Aci,     redemption_time: Timestamp,     params_bytes: &[u8], ) -> Result<Vec<u8>, ZkGroupVerificationFailure> {     ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic()." [label="CreateCallLinkCredentialRequest_IssueDeterministic", tooltip="fn CreateCallLinkCredentialRequest_IssueDeterministic(     request_bytes: &[u8],     user_id: Aci,     timestamp: Timestamp,     params_bytes: &[u8],     randomness: &[u8; RANDOMNESS_LEN], ) -> Vec<u8...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [label="bench_verify_search", tooltip="fn bench_verify_search(c: &mut Criterion) {     let sig_key = VerifyingKey::from_bytes(&hex!(         ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'      ))     .unwrap();     let...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." [label="benches", tooltip="criterion_group!(benches, bench_verify_search); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_7 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [label="verify_search", tooltip="    pub fn verify_search(         &self,         request: SlimSearchRequest,         response: FullSearchResponse,         context: SearchContext,         force_monitor: bool,         now: SystemTime,...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." [label="verify_monitor", tooltip="    pub fn verify_monitor<'a>(         &'a self,         request: &'a MonitorRequest,         response: &'a MonitorResponse,         context: MonitorContext,         now: SystemTime,     ) -> Result<M...", fillcolor=white, style="filled"]
  }
  subgraph cluster_8 {
    label = "verify.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." [label="can_verify_search_response", tooltip="    fn can_verify_search_response() {         let sig_key = VerifyingKey::from_bytes(&hex!(             ' ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e'          ))         .unwrap(...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." [label="verify_monitor", tooltip="pub fn verify_monitor<'a>(     config: &'a PublicConfig,     req: &'a MonitorRequest,     res: &'a MonitorResponse,     context: MonitorContext,     now: SystemTime, ) -> Result<MonitorStateUpdate> { ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [label="verify_full_tree_head", tooltip="fn verify_full_tree_head(     config: &PublicConfig,     fth: &FullTreeHead,     root: [u8; 32],     last_tree_head: Option<&LastTreeHead>,     last_distinguished_tree_head: Option<&LastTreeHead>,    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [label="evaluate_vrf_proof", tooltip="fn evaluate_vrf_proof(     proof: &[u8],     vrf_key: &vrf::PublicKey,     search_key: &[u8], ) -> Result<[u8; 32]> {     let proof = proof.try_into().map_err(|_| MalformedProof)?;     Ok(vrf_key.proo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." [label="verify_tree_head_signature", tooltip="fn verify_tree_head_signature(     config: &PublicConfig,     head: &SingleSignatureTreeHead,     root: &[u8; 32],     verifying_key: &VerifyingKey, ) -> Result<()> {     let raw = marshal_tree_head_t...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [label="verify_search_internal", tooltip="fn verify_search_internal(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     monitor: bool,     now: SystemTime, ) -> Result<SearchSta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [label="verify_search", tooltip="pub fn verify_search(     config: &PublicConfig,     req: SlimSearchRequest,     res: FullSearchResponse,     context: SearchContext,     force_monitor: bool,     now: SystemTime, ) -> Result<SearchSt...", fillcolor=white, style="filled"]
  }
  subgraph cluster_9 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." [label="test_proof_to_hash_fails", tooltip="    fn test_proof_to_hash_fails() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();              assert!(pk.proof_to_hash(b' a' , &v.pi).is_err());            ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." [label="test_proof_to_hash", tooltip="    fn test_proof_to_hash() {         for v in TEST_VECTORS {             let pk = PublicKey::try_from(v.pk).unwrap();             let index = pk.proof_to_hash(v.alpha, &v.pi).unwrap();             as...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
  }
  subgraph cluster_10 {
    label = "gift_badge.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." [label="test_data", tooltip="        fn test_data() -> Self {             Self {                 receiptCredentialPresentation: zkgroup::serialize(&Self::test_data_presentation()),                 state: proto::gift_badge::State:...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/gift_badge()." [label="gift_badge", tooltip="    fn gift_badge(modifier: impl FnOnce(&mut proto::GiftBadge)) -> Result<(), GiftBadgeError> {         let mut gift_badge = proto::GiftBadge::test_data();         modifier(&mut gift_badge);         G...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge()." [label="valid_gift_badge", tooltip="    fn valid_gift_badge() {         assert_eq!(             proto::GiftBadge::test_data().try_into(),             Ok(GiftBadge::Valid {                 receipt_credential_presentation: proto::GiftBadg...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." [label="test_data_presentation", tooltip="        fn test_data_presentation() -> ReceiptCredentialPresentation {             const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32];              let server_params = zkgroup::ServerSecretParams::gene...", fillcolor=white, style="filled"]
  }
  subgraph cluster_11 {
    label = "scramble.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit<Scrambler>`]accept()." [label="accept", tooltip="    fn accept(&mut self, visitor: &mut Scrambler) {         let Self {             item,             special_fields: _,         } = self;          if let Some(item) = item {             use proto::fra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." [label="accept", tooltip="    fn accept(&mut self, visitor: &mut Scrambler) {         let Self {             receiptCredentialPresentation,             state: _,             special_fields: _,         } = self;          if let...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit<Scrambler>`]accept()." [label="accept", tooltip="    fn accept(&mut self, visitor: &mut Scrambler) {         let Self {             chatId: _,             authorId: _,             dateSent: _,             expireStartDate: _,             expiresInMs:...", fillcolor=white, style="filled"]
  }
  subgraph cluster_12 {
    label = "fetch_profile_key_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." [label="main", tooltip="async fn main() -> anyhow::Result<()> {     env_logger::builder()         .filter_module(module_path!(), log::LevelFilter::Info)         .parse_default_env()         .init();      let Config {        ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_13 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [label="search", tooltip="    async fn search(         &self,         aci: &Aci,         aci_identity_key: &PublicKey,         e164: Option<(E164, Vec<u8>)>,         username_hash: Option<UsernameHash<'_>>,         stored_acco...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." [label="monitor", tooltip="    async fn monitor(         &self,         aci: &Aci,         e164: Option<E164>,         username_hash: Option<UsernameHash<'_>>,         account_data: AccountData,         last_distinguished_tree_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." [label="search_does_not_return_requested_data", tooltip="    fn search_does_not_return_requested_data(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();        ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [label="distinguished", tooltip="    async fn distinguished(         &self,         last_distinguished: Option<LastTreeHead>,     ) -> Result<SearchStateUpdate, RequestError<Error>> {         let ChatDistinguishedResponse {          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [label="verify_single_search_response", tooltip="fn verify_single_search_response(     kt: &KeyTransparency,     search_key: Vec<u8>,     response: CondensedTreeSearchResponse,     monitoring_data: Option<MonitoringData>,     full_tree_head: &FullTr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [label="verify_chat_search_response", tooltip="fn verify_chat_search_response(     kt: &KeyTransparency,     aci: &Aci,     e164: Option<E164>,     username_hash: Option<UsernameHash>,     stored_account_data: Option<AccountData>,     chat_search_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." [label="search_returns_data_not_requested", tooltip="    fn search_returns_data_not_requested(skip: &[AccountDataField]) {         let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT;          let aci = test_account::aci();         let...", fillcolor=white, style="filled"]
  }
  subgraph cluster_14 {
    label = "keytrans.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." [label="prompt", tooltip="        fn prompt(text: &str) {             println!(' {} >' , text);              let mut input = String::new();              std::io::stdin()                 .read_line(&mut input)                 ....", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." [label="search_for_deleted_account", tooltip="    async fn search_for_deleted_account() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled' )...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." [label="search_for_account_that_isnt", tooltip="    async fn search_for_account_that_isnt() {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running integration tests is not enabled'...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test()." [label="monitor_permutations_integration_test", tooltip="    async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SK...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." [label="distinguished_integration_test", tooltip="    async fn distinguished_integration_test(have_last_distinguished: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKIPPED: running in...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." [label="search_permutations_integration_test", tooltip="    async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) {         if std::env::var(' LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS' ).is_err() {             println!(' SKI...", fillcolor=white, style="filled"]
  }
  subgraph cluster_15 {
    label = "profiles.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." [label="test_successful_request", tooltip="    async fn test_successful_request() {         let randomness = zkgroup::TEST_ARRAY_32;         let server_params = zkgroup::ServerSecretParams::generate(randomness);         let aci = Aci::parse_fr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_unsuccessful_requests()." [label="test_unsuccessful_requests", tooltip="    async fn test_unsuccessful_requests(         response: chat::Response,     ) -> RequestError<ProfileKeyCredentialRequestError> {         let randomness = zkgroup::TEST_ARRAY_32;         let server...", fillcolor=white, style="filled"]
  }
  subgraph cluster_16 {
    label = "proof.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice()." [label="from_slice", tooltip="    pub fn from_slice(bytes: &[u8]) -> Option<Self> {         // TODO use Iterator::array_chunks once that's stabilized.         // See https://github.com/rust-lang/rust/issues/100450.         let chu...", fillcolor=white, style="filled"]
  }
  subgraph cluster_17 {
    label = "scalar.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical()." [label="scalar_from_slice_canonical", tooltip="pub fn scalar_from_slice_canonical(bytes: &[u8]) -> Option<Scalar> {     let mut scalar_bytes = [0u8; 32];     scalar_bytes.copy_from_slice(bytes);     Scalar::from_canonical_bytes(scalar_bytes).into(...", fillcolor=white, style="filled"]
  }
  subgraph cluster_18 {
    label = "sign.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 sign/sign()." [label="sign", tooltip="pub fn sign(     private_key: Scalar,     public_key: RistrettoPoint,     message: &[u8],     randomness: &[u8], ) -> Result<Vec<u8>, PokshoError> {     let mut st = Statement::new();     st.add(' pub...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let mut block64 = [0u8; 64];         let mut block32 = [0u8; 32];         let mut block100 = [0u8; 100];         for i in 0..32 {             block32[i] = i as u8;   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." [label="verify_signature", tooltip="pub fn verify_signature(     signature: &[u8],     public_key: RistrettoPoint,     message: &[u8], ) -> Result<(), PokshoError> {     let mut st = Statement::new();     st.add(' public_key' , &[(' pri...", fillcolor=white, style="filled"]
  }
  subgraph cluster_19 {
    label = "statement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." [label="test_complex_statement", tooltip="    fn test_complex_statement() {         let mut block32 = [0u8; 32];         let mut block64a = [0u8; 64];         let mut block64b = [0u8; 64];         let mut block64c = [0u8; 64];         let mut...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [label="prove", tooltip="    pub fn prove(         &self,         scalar_args: &ScalarArgs,         point_args: &PointArgs,         message: &[u8],         randomness: &[u8], // must be 32 bytes     ) -> Result<Vec<u8>, Poksh...", fillcolor=white, style="filled"]
    "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(         &self,         proof_bytes: &[u8],         point_args: &PointArgs,         message: &[u8],     ) -> Result<(), PokshoError> {         let proof = Proof::from_slice(pro...", fillcolor=white, style="filled"]
  }
  subgraph cluster_20 {
    label = "lib.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." [label="new", tooltip="        fn new(req: &svrb::request4::Create) -> Self {             Self {                 auth_commitment: to_ristretto_pt(&req.auth_commitment)                     .expect(' decode auth_commitment' )...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." [label="create", tooltip="        fn create(&mut self, req_bytes: &[u8]) {             self.versions.clear();             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()." [label="to_ristretto_scalar", tooltip="    fn to_ristretto_scalar(b: &[u8]) -> Option<Scalar> {         Scalar::from_canonical_bytes(b.try_into().ok()?).into_option()     }", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." [label="full_create_restore", tooltip="    fn full_create_restore() {         let mut rng = OsRng.unwrap_err();         let server_ids = vec![1u64, 2u64, 3u64];         let mut servers = server_ids             .iter()             .map(|_| ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [label="restore2", tooltip="        fn restore2(&self, req_bytes: &[u8], handshake_hash: &[u8]) -> Vec<u8> {             let req = match svrb::Request4::decode(req_bytes)                 .expect(' decode Request4' )             ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_21 {
    label = "usernames_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_usernames); criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [label="bench_usernames", tooltip="fn bench_usernames(c: &mut Criterion) {     let mut rng = OsRng.unwrap_err();     let usernames =         Username::candidates_from(&mut rng, ' signal' , NicknameLimits::default()).unwrap();      let ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username_proof()." [label="username_proof", tooltip="pub fn username_proof(username: &str, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {     Username::new(username)?.proof(randomness) }", fillcolor=white, style="filled"]
  }
  subgraph cluster_22 {
    label = "username.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [label="verify_proof", tooltip="    pub fn verify_proof(proof: &[u8], hash: [u8; 32]) -> Result<(), ProofVerificationFailure> {         let hash_point = CompressedRistretto(hash)             .decompress()             .ok_or(ProofVer...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." [label="many_random_makes_valid_usernames", tooltip="    fn many_random_makes_valid_usernames() {         let mut rng = rand::rng();         let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap());         let nickname = ' _SiGNA1' ;      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [label="proof", tooltip="    pub fn proof(&self, randomness: &[u8; 32]) -> Result<Vec<u8>, UsernameError> {         let hash = Self::hash_from_scalars(&self.scalars);         let scalar_args = Self::make_scalar_args(&self.sca...", fillcolor=white, style="filled"]
    "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." [label="valid_usernames_proof_and_verify", tooltip="    fn valid_usernames_proof_and_verify() {         proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| {             let username = Username::new(&Username::format_parts...", fillcolor=white, style="filled"]
  }
  subgraph cluster_23 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 benches()." [label="benches", tooltip="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [label="endorsement_flow", tooltip="fn endorsement_flow(c: &mut Criterion) {     let mut group = c.benchmark_group(' endorsements' );      let mut input_sho = poksho::ShoSha256::new(b' test' );     let inputs: Vec<RistrettoPoint> = (0.....", fillcolor=white, style="filled"]
  }
  subgraph cluster_24 {
    label = "endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." [label="combining_endorsements", tooltip="    fn combining_endorsements() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          l...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." [label="default_is_identity", tooltip="    fn default_is_identity() {         assert_eq!(Endorsement::combine([]).R, Endorsement::default().R);          let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRo...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         server_public_key: &ServerDerivedPublicKey,     ) -> Result<ReceivedEndorsements, V...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [label="issue", tooltip="    pub fn issue(         hidden_attribute_points: impl IntoIterator<Item = RistrettoPoint>,         private_key: &ServerDerivedKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> EndorsementR...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." [label="default_flow", tooltip="    fn default_flow() {         let mut input_sho = poksho::ShoSha256::new(b' test' );         let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]);          // Client          let client_...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." [label="round_trip", tooltip="        fn round_trip<T: Serialize + for<'a> Deserialize<'a> + PartialDefault>(             value: &T,             expected_len: usize,         ) {             let bincode_options = bincode::DefaultOp...", fillcolor=white, style="filled"]
  }
  subgraph cluster_25 {
    label = "issuance.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         public_key: &CredentialPublicKey,         // Even though it would work with a borrow, this deliberately consumes         // IssuanceProof to indicate that ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [label="issue", tooltip="    pub fn issue(         mut self,         key_pair: &CredentialKeyPair,         randomness: [u8; RANDOMNESS_LEN],     ) -> IssuanceProof {         self.finalize_public_attrs();          let mut sho ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_26 {
    label = "blind.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [label="issue", tooltip="    pub fn issue(         mut self,         key_pair: &CredentialKeyPair,         blinding_key: &BlindingPublicKey,         randomness: [u8; RANDOMNESS_LEN],     ) -> BlindedIssuanceProof {         se...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         public_key: &CredentialPublicKey,         blinding_key: &BlindingKeyPair,         proof: BlindedIssuanceProof,     ) -> Result<Credential, VerificationFail...", fillcolor=white, style="filled"]
  }
  subgraph cluster_27 {
    label = "presentation.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [label="verify", tooltip="    pub fn verify(         mut self,         key_pair: &CredentialKeyPair,         proof: &PresentationProof,     ) -> Result<(), VerificationFailure> {         self.finalize_public_attrs();          ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [label="present", tooltip="    pub fn present(         self,         public_key: &CredentialPublicKey,         credential: &Credential,         randomness: [u8; RANDOMNESS_LEN],     ) -> PresentationProof {         let credenti...", fillcolor=white, style="filled"]
  }
  subgraph cluster_28 {
    label = "serialization.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 benches()." [label="benches", tooltip="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);", fillcolor=white, style="filled"]
  }
  subgraph cluster_29 {
    label = "zkgroup_benchmarks.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [label="benchmark_group_send_endorsements", tooltip="pub fn benchmark_group_send_endorsements(c: &mut Criterion) {     const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp =         zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023-04-13 00:00:00 U...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." [label="benchmark_integration_profile", tooltip="pub fn benchmark_integration_profile(c: &mut Criterion) {     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = ser...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." [label="benchmark_integration_auth", tooltip="fn benchmark_integration_auth(c: &mut Criterion) {     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.get...", fillcolor=white, style="filled"]
  }
  subgraph cluster_30 {
    label = "auth_credential_with_pni.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present()." [label="present", tooltip="    pub fn present(         &self,         public_params: &ServerPublicParams,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AnyAuthCredentialPresentat...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         public_params: &ServerPublicParams,         aci: Aci,         pni: Pni,         redemption_time: crate::Timestamp,     ) -> Result<AuthCredentialWithPni, ZkGr...", fillcolor=white, style="filled"]
  }
  subgraph cluster_31 {
    label = "zkc.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [label="issue_credential", tooltip="    pub fn issue_credential(         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         params: &ServerSecretParams,         randomness: RandomnessBytes,     ) -> Self {         S...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." [label="issue_credential_for_key", tooltip="    pub(crate) fn issue_credential_for_key(         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         credential_key: &CredentialKeyPair,         randomness: RandomnessBytes,    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         public_params: &ServerPublicParams,     ) -> Result<AuthCredentialWithPniZkc, ZkGroupV...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." [label="present_for_key", tooltip="    pub(crate) fn present_for_key(         &self,         public_key: &CredentialPublicKey,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AuthCredentia...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [label="present", tooltip="    pub fn present(         &self,         public_params: &ServerPublicParams,         group_secret_params: &GroupSecretParams,         randomness: RandomnessBytes,     ) -> AuthCredentialWithPniZkcPr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." [label="receive_for_key", tooltip="    pub(crate) fn receive_for_key(         self,         aci: Aci,         pni: Pni,         redemption_time: Timestamp,         public_key: &CredentialPublicKey,     ) -> Result<AuthCredentialWithPni...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." [label="verify_for_key", tooltip="    pub(crate) fn verify_for_key(         &self,         credential_key: &CredentialKeyPair,         group_public_params: &GroupPublicParams,         redemption_time: Timestamp,     ) -> Result<(), Zk...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." [label="issue_receive_present", tooltip="    fn issue_receive_present() {         const ACI: Aci = Aci::from_uuid_bytes([b'a'; 16]);         const PNI: Pni = Pni::from_uuid_bytes([b'p'; 16]);         const REDEMPTION_TIME: Timestamp = Timest...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         params: &ServerSecretParams,         group_public_params: &GroupPublicParams,         redemption_time: Timestamp,     ) -> Result<(), ZkGroupVerificationFailu...", fillcolor=white, style="filled"]
  }
  subgraph cluster_32 {
    label = "auth_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [label="issue", tooltip="    pub fn issue(         &self,         redemption_time: Timestamp,         backup_level: BackupLevel,         credential_type: BackupCredentialType,         params: &GenericServerSecretParams,      ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." [label="test_server_verify_wrong_receipt_level", tooltip="    fn test_server_verify_wrong_receipt_level() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_pa...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." [label="test_server_verify_expiration", tooltip="    fn test_server_verify_expiration() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let presentation =             credential.present(&server_secret_params().get_publ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [label="present", tooltip="    pub fn present(         &self,         server_params: &GenericServerPublicParams,         randomness: RandomnessBytes,     ) -> BackupAuthCredentialPresentation {         BackupAuthCredentialPrese...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." [label="test_client_enforces_timestamp_granularity", tooltip="    fn test_client_enforces_timestamp_granularity() {         let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary!          let request_context = Back...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         current_time: Timestamp,         server_params: &GenericServerSecretParams,     ) -> Result<(), ZkGroupVerificationFailure> {         let acceptable_start_tim...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [label="receive", tooltip="    pub fn receive(         self,         response: BackupAuthCredentialResponse,         params: &GenericServerPublicParams,         expected_redemption_time: Timestamp,     ) -> Result<BackupAuthCre...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [label="generate_credential", tooltip="    fn generate_credential(redemption_time: Timestamp) -> BackupAuthCredential {         // client generated materials; issuance request         let request_context = BackupAuthCredentialRequestContex...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." [label="test_server_verify_wrong_backup_id", tooltip="    fn test_server_verify_wrong_backup_id() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_params...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." [label="test_server_verify_wrong_redemption", tooltip="    fn test_server_verify_wrong_redemption() {         let credential = generate_credential(DAY_ALIGNED_TIMESTAMP);         let valid_presentation =             credential.present(&server_secret_param...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." [label="test_client_enforces_timestamp", tooltip="    fn test_client_enforces_timestamp() {         let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP;          let request_context = BackupAuthCredentialRequestContext::new(&KEY, ACI.into());     ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_33 {
    label = "auth_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [label="issue_credential", tooltip="    pub fn issue_credential(         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         params: &GenericServerSecretParams,         randomness: RandomnessBytes,     ) -> CallLin...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         current_time: Timestamp,         server_params: &GenericServerSecretParams,         call_link_params: &CallLinkPublicParams,     ) -> Result<(), ZkGroupVerifi...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [label="receive", tooltip="    pub fn receive(         self,         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         params: &GenericServerPublicParams,     ) -> Result<CallLinkAuthCredential, ZkGroupV...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." [label="present", tooltip="    pub fn present(         &self,         user_id: libsignal_core::Aci,         redemption_time: Timestamp,         server_params: &GenericServerPublicParams,         call_link_params: &CallLinkSecre...", fillcolor=white, style="filled"]
  }
  subgraph cluster_34 {
    label = "create_credential.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [label="receive", tooltip="    pub fn receive(         self,         response: CreateCallLinkCredentialResponse,         user_id: libsignal_core::Aci,         params: &GenericServerPublicParams,     ) -> Result<CreateCallLinkCr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." [label="present", tooltip="    pub fn present(         &self,         room_id: &[u8],         user_id: libsignal_core::Aci,         server_params: &GenericServerPublicParams,         call_link_params: &CallLinkSecretParams,    ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [label="issue", tooltip="    pub fn issue(         &self,         user_id: libsignal_core::Aci,         timestamp: Timestamp,         params: &GenericServerSecretParams,         randomness: RandomnessBytes,     ) -> CreateCal...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." [label="verify", tooltip="    pub fn verify(         &self,         room_id: &[u8],         current_time: Timestamp,         server_params: &GenericServerSecretParams,         call_link_params: &CallLinkPublicParams,     ) -> ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_35 {
    label = "group_send_endorsement.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [label="receive_with_ciphertexts", tooltip="    pub fn receive_with_ciphertexts(         self,         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         now: Timestamp,         root_public_key: impl AsRef<zkcredential::endor...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [label="receive_with_service_ids", tooltip="    pub fn receive_with_service_ids<T>(         self,         user_ids: T,         now: Timestamp,         group_params: &GroupSecretParams,         root_public_key: impl AsRef<zkcredential::endorseme...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [label="issue", tooltip="    pub fn issue(         member_ciphertexts: impl IntoIterator<Item = UuidCiphertext>,         key_pair: &GroupSendDerivedKeyPair,         randomness: RandomnessBytes,     ) -> Self {         // Note...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [label="receive_with_service_ids_single_threaded", tooltip="    pub fn receive_with_service_ids_single_threaded(         self,         user_ids: impl IntoIterator<Item = libsignal_core::ServiceId>,         now: Timestamp,         group_params: &GroupSecretPara...", fillcolor=white, style="filled"]
  }
  subgraph cluster_36 {
    label = "server_params.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [label="create_profile_key_credential_request_context", tooltip="    pub fn create_profile_key_credential_request_context(         &self,         randomness: RandomnessBytes,         aci: libsignal_core::Aci,         profile_key: api::profiles::ProfileKey,     ) ->...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [label="create_expiring_profile_key_credential_presentation", tooltip="    pub fn create_expiring_profile_key_credential_presentation(         &self,         randomness: RandomnessBytes,         group_secret_params: api::groups::GroupSecretParams,         expiring_profil...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." [label="verify_auth_credential_presentation", tooltip="    pub fn verify_auth_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::auth::AnyAuthCredentialPresentation,         cur...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [label="issue_expiring_profile_key_credential", tooltip="    pub fn issue_expiring_profile_key_credential(         &self,         randomness: RandomnessBytes,         request: &api::profiles::ProfileKeyCredentialRequest,         aci: libsignal_core::Aci,   ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [label="create_receipt_credential_presentation", tooltip="    pub fn create_receipt_credential_presentation(         &self,         randomness: RandomnessBytes,         receipt_credential: &api::receipts::ReceiptCredential,     ) -> api::receipts::ReceiptCre...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." [label="verify_expiring_profile_key_credential_presentation", tooltip="    pub fn verify_expiring_profile_key_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::profiles::ExpiringProfileKeyCred...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         &self,         message: &[u8],         signature: NotarySignatureBytes,     ) -> Result<(), ZkGroupVerificationFailure> {         self.sig_public_key.verify(messag...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [label="receive_receipt_credential", tooltip="    pub fn receive_receipt_credential(         &self,         context: &api::receipts::ReceiptCredentialRequestContext,         response: &api::receipts::ReceiptCredentialResponse,     ) -> Result<api...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [label="verify_profile_key_credential_presentation", tooltip="    pub fn verify_profile_key_credential_presentation(         &self,         group_public_params: api::groups::GroupPublicParams,         presentation: &api::profiles::AnyProfileKeyCredentialPresenta...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." [label="verify_receipt_credential_presentation", tooltip="    pub fn verify_receipt_credential_presentation(         &self,         presentation: &api::receipts::ReceiptCredentialPresentation,     ) -> Result<(), ZkGroupVerificationFailure> {         present...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [label="issue_receipt_credential", tooltip="    pub fn issue_receipt_credential(         &self,         randomness: RandomnessBytes,         request: &api::receipts::ReceiptCredentialRequest,         receipt_expiration_time: Timestamp,         ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." [label="sign", tooltip="    pub fn sign(&self, randomness: RandomnessBytes, message: &[u8]) -> NotarySignatureBytes {         let mut sho = Sho::new(             b' Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign' ,  ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [label="receive_expiring_profile_key_credential", tooltip="    pub fn receive_expiring_profile_key_credential(         &self,         context: &api::profiles::ProfileKeyCredentialRequestContext,         response: &api::profiles::ExpiringProfileKeyCredentialRe...", fillcolor=white, style="filled"]
  }
  subgraph cluster_37 {
    label = "credentials.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." [label="test_mac", tooltip="    fn test_mac() {         // It doesn't really matter *which* credential we test here, we just want to generally know         // we've set things up correctly. (Also, the credentials hardcoded here ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_38 {
    label = "proofs.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." [label="new", tooltip="    pub fn new(         key_pair: profile_key_credential_request::KeyPair,         ciphertext: profile_key_credential_request::CiphertextWithSecretNonce,         commitment: profile_key_commitment::Co...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." [label="new", tooltip="    pub fn new(         credentials_public_key: credentials::PublicKey,         credential: credentials::ReceiptCredential,         sho: &mut Sho,     ) -> Self {         let credentials_system = cred...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_public_key: credentials::PublicKey,         request_public_key: receipt_credential_request::PublicKey,         request: receipt_credential_request...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         public_key: profile_key_credential_request::PublicKey,         ciphertext: profile_key_credential_request::Ciphertext,         commitment: profile_key_commitm...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_key_pair: credentials::KeyPair<credentials::ExpiringProfileKeyCredential>,         uid_ciphertext: uid_encryption::Ciphertext,         uid_enc_pub...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." [label="new", tooltip="    pub fn new(         uid_enc_key_pair: uid_encryption::KeyPair,         profile_key_enc_key_pair: profile_key_encryption::KeyPair,         credentials_public_key: credentials::PublicKey,         cr...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_key_pair: credentials::KeyPair<credentials::ReceiptCredential>,         receipt_struct: ReceiptStruct,     ) -> Result<(), ZkGroupVerificationFail...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." [label="new", tooltip="    pub fn new(         key_pair: credentials::KeyPair<credentials::ReceiptCredential>,         request_public_key: receipt_credential_request::PublicKey,         request: receipt_credential_request::...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." [label="new", tooltip="    pub fn new(         key_pair: credentials::KeyPair<credentials::ExpiringProfileKeyCredential>,         request_public_key: profile_key_credential_request::PublicKey,         request: profile_key_c...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." [label="verify", tooltip="    pub fn verify(         &self,         credentials_public_key: credentials::PublicKey,         request_public_key: profile_key_credential_request::PublicKey,         aci_bytes: UidBytes,         re...", fillcolor=white, style="filled"]
  }
  subgraph cluster_39 {
    label = "signature.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." [label="verify", tooltip="    pub fn verify(         &self,         message: &[u8],         signature: SignatureBytes,     ) -> Result<(), ZkGroupVerificationFailure> {         match poksho::verify_signature(&signature, self.p...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." [label="test_signature", tooltip="    fn test_signature() {         let group_key = TEST_ARRAY_32;         let mut sho = Sho::new(b' Test_Signature' , &group_key);         let key_pair = KeyPair::generate(&mut sho);          // Test s...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." [label="sign", tooltip="    pub fn sign(&self, message: &[u8], sho: &mut Sho) -> SignatureBytes {         let vec_bytes = poksho::sign(             self.signing_key,             self.public_key,             message,         ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_40 {
    label = "zkcredential_examples.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." [label="test_profile_key_credential_only_verifying_one_encryption_key", tooltip="fn test_profile_key_credential_only_verifying_one_encryption_key() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." [label="test_mac_generic", tooltip="fn test_mac_generic() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());      let label = b' 20221221_AuthCre...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." [label="as_point", tooltip="        fn as_point(&self) -> RistrettoPoint {             self.opaque_id         }", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." [label="test_profile_key_credential", tooltip="fn test_profile_key_credential() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());     let blinding_keypair ...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." [label="test_mac_generic_without_verifying_encryption_key", tooltip="fn test_mac_generic_without_verifying_encryption_key() {     let mut sho = ShoSha256::new(b' Test_Credentials' );     let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array());    ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_41 {
    label = "backup_auth_flow.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." [label="test_backup_auth_request_response", tooltip="fn test_backup_auth_request_response() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: Randomne...", fillcolor=white, style="filled"]
  }
  subgraph cluster_42 {
    label = "call_link_flow.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." [label="test_create_call_link_request_response", tooltip="fn test_create_call_link_request_response() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: Ran...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." [label="test_auth_credential_enforces_timestamp_granularity", tooltip="fn test_auth_credential_enforces_timestamp_granularity() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];      // cli...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." [label="test_create_call_link_enforces_timestamp_granularity", tooltip="fn test_create_call_link_enforces_timestamp_granularity() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let ra...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." [label="test_auth_credential", tooltip="fn test_auth_credential() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes = [0x...", fillcolor=white, style="filled"]
  }
  subgraph cluster_43 {
    label = "group_send_endorsements.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." [label="test_single_member_group", tooltip="fn test_single_member_group() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes =...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." [label="test_client_rejects_bad_expirations", tooltip="fn test_client_rejects_bad_expirations() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: Random...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." [label="test_endorsement", tooltip="fn test_endorsement() {     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN];     let randomness3: RandomnessBytes = [0x45u8...", fillcolor=white, style="filled"]
  }
  subgraph cluster_44 {
    label = "integration_tests.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." [label="test_profile_key_credential_presentation_v1_does_not_verify", tooltip="fn test_profile_key_credential_presentation_v1_does_not_verify() {     // Originally from test_integration_profile.     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(z...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." [label="test_integration_expiring_profile", tooltip="fn test_integration_expiring_profile() {     // SERVER     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." [label="test_server_sigs", tooltip="fn test_server_sigs() {     let server_secret_params =         zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.ge...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." [label="test_integration_auth_zkc", tooltip="fn test_integration_auth_zkc() {     let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32);     let server_public_params = server_secret_params.get_public_params(); ...", fillcolor=white, style="filled"]
  }
  subgraph cluster_45 {
    label = "receipt_flow.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo zkgroup 0.9.0 test_api()." [label="test_api", tooltip="fn test_api() {     let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN];     let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN];     let randomness2: RandomnessBytes = [0x44u8; RANDOM...", fillcolor=white, style="filled"]
    "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." [label="test_request_response", tooltip="fn test_request_response() {     let mut sho = Sho::new(b' Test_Receipt_Credential_Request' , b' ' );      // client receives in response to initial request     let receipt_expiration_time: Timestamp ...", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_api()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_successful_request()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 benches()." -> "rust-analyzer cargo usernames 0.1.0 bench_usernames()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test_support/prompt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/profiles/test/test_unsuccessful_requests()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/gift_badge()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit<Scrambler>`]accept()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_deleted_account()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/sign()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." [color=gray, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." -> "rust-analyzer cargo poksho 0.7.0 sign/sign()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/tests/test_signature()." -> "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/tests/test_proof_to_hash()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/test/can_verify_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." -> "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 bench_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom<&ed25519::Signature>`]try_from()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_single_member_group()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 net/keytrans/KeyTransparency_Search()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom<&ed25519::Signature>`]try_from()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature]from_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 sign/verify_signature()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 benches()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 bench_verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServerVersion]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 signature/impl#[InternalSignature]from_bytes()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 signature/check_scalar()." [color=gray, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo ed25519-dalek 2.1.0 signature/check_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." -> "rust-analyzer cargo poksho 0.7.0 sign/sign()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/distinguished_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_tree_head_signature()." -> "rust-analyzer cargo ed25519-dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier<ed25519::Signature>`]verify()." [color=blue]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit<Scrambler>`]accept()." -> "rust-analyzer cargo libsignal-message-backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit<Scrambler>`]accept()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 main()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 ws/keytrans/test/search_permutations_integration_test()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient<'_>`][UnauthenticatedChatApi]distinguished()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder<'_>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_endorsement()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-message-backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_auth_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_full_tree_head()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/evaluate_vrf_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder<'a>`]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." [color=blue]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids()." [color=blue, style=dashed]
  "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." -> "rust-analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes()." [color=blue]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." -> "rust-analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier<'a>`]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." -> "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp()." -> "rust-analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_search()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_profile()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 benches()." -> "rust-analyzer cargo zkgroup 0.9.0 benchmark_integration_auth()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_server_sigs()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_single_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 benches()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsement_flow()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/full_create_restore()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]create()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/test/search_returns_data_not_requested()." -> "rust-analyzer cargo libsignal-net-chat 0.1.0 api/keytrans/verify_chat_search_response()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 impl#[KeyTransparency]verify_monitor()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_monitor()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc()." -> "rust-analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip()." -> "rust-analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo usernames 0.1.0 username_proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 usernames/Username_Proof()." -> "rust-analyzer cargo usernames 0.1.0 username/impl#[Username]proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search()." -> "rust-analyzer cargo libsignal-keytrans 0.0.1 verify/verify_search_internal()." [color=blue, style=dashed]
  "rust-analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify()." -> "rust-analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic()." -> "rust-analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue()." [color=blue, style=dashed]
  "rust-analyzer cargo libsignal-svrb 0.1.0 test/impl#[TestServer]restore2()." -> "rust-analyzer cargo libsignal-svrb 0.1.0 test/to_ristretto_scalar()." [color=blue, style=dashed]
}
