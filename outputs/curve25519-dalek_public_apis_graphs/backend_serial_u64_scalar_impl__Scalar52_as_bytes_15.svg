<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="6068pt" height="12706pt"
 viewBox="0.00 0.00 6068.00 12705.65" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 12701.65)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-12701.65 6064,-12701.65 6064,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5959,-12086.65 5959,-12161.65 6052,-12161.65 6052,-12086.65 5959,-12086.65"/>
<text text-anchor="middle" x="6005.5" y="-12146.45" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5206,-12032.65 5206,-12215.65 5939,-12215.65 5939,-12032.65 5206,-12032.65"/>
<text text-anchor="middle" x="5572.5" y="-12200.45" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4183.5,-12614.65 4183.5,-12689.65 5080.5,-12689.65 5080.5,-12614.65 4183.5,-12614.65"/>
<text text-anchor="middle" x="4632" y="-12674.45" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3222,-11405.65 3222,-11480.65 4740.5,-11480.65 4740.5,-11405.65 3222,-11405.65"/>
<text text-anchor="middle" x="3981.25" y="-11465.45" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="1185.5,-8070.65 1185.5,-8145.65 1451.5,-8145.65 1451.5,-8070.65 1185.5,-8070.65"/>
<text text-anchor="middle" x="1318.5" y="-8130.45" font-family="Helvetica,sans-Serif" font-size="14.00">message_backup.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="32.5,-10008.65 32.5,-10137.65 284.5,-10137.65 284.5,-10008.65 32.5,-10008.65"/>
<text text-anchor="middle" x="158.5" y="-10122.45" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="2457,-7634.65 2457,-8357.65 2747,-8357.65 2747,-7634.65 2457,-7634.65"/>
<text text-anchor="middle" x="2602" y="-8342.45" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="3670.5,-11023.65 3670.5,-11260.65 3883.5,-11260.65 3883.5,-11023.65 3670.5,-11023.65"/>
<text text-anchor="middle" x="3777" y="-11245.45" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="2960,-2319.65 2960,-4770.65 3556,-4770.65 3556,-2319.65 2960,-2319.65"/>
<text text-anchor="middle" x="3258" y="-4755.45" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="3212.5,-9379.65 3212.5,-9454.65 3829.5,-9454.65 3829.5,-9379.65 3212.5,-9379.65"/>
<text text-anchor="middle" x="3521" y="-9439.45" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="4177,-9213.65 4177,-9288.65 4281,-9288.65 4281,-9213.65 4177,-9213.65"/>
<text text-anchor="middle" x="4229" y="-9273.45" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="4139,-9362.65 4139,-9531.65 5186,-9531.65 5186,-9362.65 4139,-9362.65"/>
<text text-anchor="middle" x="4662.5" y="-9516.45" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="4920.5,-11895.65 4920.5,-12024.65 5380,-12024.65 5380,-11895.65 4920.5,-11895.65"/>
<text text-anchor="middle" x="5150.25" y="-12009.45" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="729,-10008.65 729,-10083.65 1118,-10083.65 1118,-10008.65 729,-10008.65"/>
<text text-anchor="middle" x="923.5" y="-10068.45" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1252.5,-9861.65 1252.5,-9990.65 1384.5,-9990.65 1384.5,-9861.65 1252.5,-9861.65"/>
<text text-anchor="middle" x="1318.5" y="-9975.45" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="1485,-10886.65 1485,-11015.65 2711.5,-11015.65 2711.5,-10886.65 1485,-10886.65"/>
<text text-anchor="middle" x="2098.25" y="-11000.45" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="2018,-1688.65 2018,-1817.65 2666.5,-1817.65 2666.5,-1688.65 2018,-1688.65"/>
<text text-anchor="middle" x="2342.25" y="-1802.45" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="981,-7933.65 981,-8062.65 1401.5,-8062.65 1401.5,-7933.65 981,-7933.65"/>
<text text-anchor="middle" x="1191.25" y="-8047.45" font-family="Helvetica,sans-Serif" font-size="14.00">validation.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="1234.5,-9998.65 1234.5,-10417.65 2665,-10417.65 2665,-9998.65 1234.5,-9998.65"/>
<text text-anchor="middle" x="1949.75" y="-10402.45" font-family="Helvetica,sans-Serif" font-size="14.00">backup.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="3175.5,-10886.65 3175.5,-11015.65 3866,-11015.65 3866,-10886.65 3175.5,-10886.65"/>
<text text-anchor="middle" x="3520.75" y="-11000.45" font-family="Helvetica,sans-Serif" font-size="14.00">account_data.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="2044.5,-1908.65 2044.5,-2037.65 3353,-2037.65 3353,-1908.65 2044.5,-1908.65"/>
<text text-anchor="middle" x="2698.75" y="-2022.45" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="2490.5,-10425.65 2490.5,-10878.65 3837.5,-10878.65 3837.5,-10425.65 2490.5,-10425.65"/>
<text text-anchor="middle" x="3164" y="-10863.45" font-family="Helvetica,sans-Serif" font-size="14.00">recipient.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1172,-8995.65 1172,-9178.65 1686,-9178.65 1686,-8995.65 1172,-8995.65"/>
<text text-anchor="middle" x="1429" y="-9163.45" font-family="Helvetica,sans-Serif" font-size="14.00">serialize.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1283.5,-8236.65 1283.5,-8311.65 1353.5,-8311.65 1353.5,-8236.65 1283.5,-8236.65"/>
<text text-anchor="middle" x="1318.5" y="-8296.45" font-family="Helvetica,sans-Serif" font-size="14.00">main.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="981.5,-8153.65 981.5,-8228.65 1690.5,-8228.65 1690.5,-8153.65 981.5,-8153.65"/>
<text text-anchor="middle" x="1336" y="-8213.45" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="2078,-1825.65 2078,-1900.65 3297,-1900.65 3297,-1825.65 2078,-1825.65"/>
<text text-anchor="middle" x="2687.5" y="-1885.45" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="3145,-5052.65 3145,-5127.65 3371,-5127.65 3371,-5052.65 3145,-5052.65"/>
<text text-anchor="middle" x="3258" y="-5112.45" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="329,-9709.65 329,-10000.65 1152,-10000.65 1152,-9709.65 329,-9709.65"/>
<text text-anchor="middle" x="740.5" y="-9985.45" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-9655.65 8,-10000.65 309,-10000.65 309,-9655.65 8,-9655.65"/>
<text text-anchor="middle" x="158.5" y="-9985.45" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="3146.5,-1331.65 3146.5,-1460.65 3369.5,-1460.65 3369.5,-1331.65 3146.5,-1331.65"/>
<text text-anchor="middle" x="3258" y="-1445.45" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="3117,-11268.65 3117,-11397.65 3832,-11397.65 3832,-11268.65 3117,-11268.65"/>
<text text-anchor="middle" x="3474.5" y="-11382.45" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="3215,-11131.65 3215,-11260.65 3301,-11260.65 3301,-11131.65 3215,-11131.65"/>
<text text-anchor="middle" x="3258" y="-11245.45" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="5452.5,-5689.65 5452.5,-5764.65 5554.5,-5764.65 5554.5,-5689.65 5452.5,-5689.65"/>
<text text-anchor="middle" x="5503.5" y="-5749.45" font-family="Helvetica,sans-Serif" font-size="14.00">proof.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="4909,-12371.65 4909,-12500.65 5131,-12500.65 5131,-12371.65 4909,-12371.65"/>
<text text-anchor="middle" x="5020" y="-12485.45" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="4163.5,-5514.65 4163.5,-5643.65 4729,-5643.65 4729,-5514.65 4163.5,-5514.65"/>
<text text-anchor="middle" x="4446.25" y="-5628.45" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="4556.5,-5651.65 4556.5,-5746.65 5354,-5746.65 5354,-5651.65 4556.5,-5651.65"/>
<text text-anchor="middle" x="4955.25" y="-5731.45" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="1804.5,-8312.65 1804.5,-8387.65 1895.5,-8387.65 1895.5,-8312.65 1804.5,-8312.65"/>
<text text-anchor="middle" x="1850" y="-8372.45" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="1809,-8395.65 1809,-8470.65 2696,-8470.65 2696,-8395.65 1809,-8395.65"/>
<text text-anchor="middle" x="2252.5" y="-8455.45" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="2536,-9155.65 2536,-9284.65 2669,-9284.65 2669,-9155.65 2536,-9155.65"/>
<text text-anchor="middle" x="2602.5" y="-9269.45" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="2045,-1605.65 2045,-1680.65 2697,-1680.65 2697,-1605.65 2045,-1605.65"/>
<text text-anchor="middle" x="2371" y="-1665.45" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="3191.5,-8640.65 3191.5,-8769.65 3324.5,-8769.65 3324.5,-8640.65 3191.5,-8640.65"/>
<text text-anchor="middle" x="3258" y="-8754.45" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="2480,-1468.65 2480,-1597.65 3357.5,-1597.65 3357.5,-1468.65 2480,-1468.65"/>
<text text-anchor="middle" x="2918.75" y="-1582.45" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="3598,-9022.65 3598,-9205.65 4264,-9205.65 4264,-9022.65 3598,-9022.65"/>
<text text-anchor="middle" x="3931" y="-9190.45" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="3159,-8777.65 3159,-9014.65 4272.5,-9014.65 4272.5,-8777.65 3159,-8777.65"/>
<text text-anchor="middle" x="3715.75" y="-8999.45" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="3161,-5514.65 3161,-5589.65 3355,-5589.65 3355,-5514.65 3161,-5514.65"/>
<text text-anchor="middle" x="3258" y="-5574.45" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="4166.5,-7825.65 4166.5,-7900.65 4291.5,-7900.65 4291.5,-7825.65 4166.5,-7825.65"/>
<text text-anchor="middle" x="4229" y="-7885.45" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="2362.5,-8478.65 2362.5,-9147.65 2841.5,-9147.65 2841.5,-8478.65 2362.5,-8478.65"/>
<text text-anchor="middle" x="2602" y="-9132.45" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="2347.5,-9292.65 2347.5,-9853.65 2856.5,-9853.65 2856.5,-9292.65 2347.5,-9292.65"/>
<text text-anchor="middle" x="2602" y="-9838.45" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="2264,-6309.65 2264,-7626.65 3293,-7626.65 3293,-6309.65 2264,-6309.65"/>
<text text-anchor="middle" x="2778.5" y="-7611.45" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="3163,-7634.65 3163,-7817.65 4264,-7817.65 4264,-7634.65 3163,-7634.65"/>
<text text-anchor="middle" x="3713.5" y="-7802.45" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="3697.5,-12032.65 3697.5,-12363.65 5098,-12363.65 5098,-12032.65 3697.5,-12032.65"/>
<text text-anchor="middle" x="4397.75" y="-12348.45" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightblue" stroke="lightblue" points="2556.5,-9861.65 2556.5,-9990.65 3849,-9990.65 3849,-9861.65 2556.5,-9861.65"/>
<text text-anchor="middle" x="3202.75" y="-9975.45" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightblue" stroke="lightblue" points="3623.5,-11488.65 3623.5,-11887.65 5387.5,-11887.65 5387.5,-11488.65 3623.5,-11488.65"/>
<text text-anchor="middle" x="4505.5" y="-11872.45" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightblue" stroke="lightblue" points="3731.5,-5860.65 3731.5,-5989.65 4309,-5989.65 4309,-5860.65 3731.5,-5860.65"/>
<text text-anchor="middle" x="4020.25" y="-5974.45" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightblue" stroke="lightblue" points="4551,-3479.65 4551,-3554.65 4763,-3554.65 4763,-3479.65 4551,-3479.65"/>
<text text-anchor="middle" x="4657" y="-3539.45" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightblue" stroke="lightblue" points="4962.5,-4180.65 4962.5,-4309.65 5077.5,-4309.65 5077.5,-4180.65 4962.5,-4180.65"/>
<text text-anchor="middle" x="5020" y="-4294.45" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightblue" stroke="lightblue" points="4936,-2585.65 4936,-2714.65 5551,-2714.65 5551,-2585.65 4936,-2585.65"/>
<text text-anchor="middle" x="5243.5" y="-2699.45" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightblue" stroke="lightblue" points="4121,-5997.65 4121,-6342.65 5132.5,-6342.65 5132.5,-5997.65 4121,-5997.65"/>
<text text-anchor="middle" x="4626.75" y="-6327.45" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightblue" stroke="lightblue" points="4610,-4131.65 4610,-4260.65 4705,-4260.65 4705,-4131.65 4610,-4131.65"/>
<text text-anchor="middle" x="4657.5" y="-4245.45" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightblue" stroke="lightblue" points="4573,-5029.65 4573,-5266.65 5344.5,-5266.65 5344.5,-5029.65 4573,-5029.65"/>
<text text-anchor="middle" x="4958.75" y="-5251.45" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightblue" stroke="lightblue" points="4596.5,-4651.65 4596.5,-4780.65 4718.5,-4780.65 4718.5,-4651.65 4596.5,-4651.65"/>
<text text-anchor="middle" x="4657.5" y="-4765.45" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightblue" stroke="lightblue" points="5452,-4001.65 5452,-4076.65 5555,-4076.65 5555,-4001.65 5452,-4001.65"/>
<text text-anchor="middle" x="5503.5" y="-4061.45" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightblue" stroke="lightblue" points="2556.5,-2236.65 2556.5,-2311.65 3392,-2311.65 3392,-2236.65 2556.5,-2236.65"/>
<text text-anchor="middle" x="2974.25" y="-2296.45" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightblue" stroke="lightblue" points="3105,-2045.65 3105,-2228.65 3411,-2228.65 3411,-2045.65 3105,-2045.65"/>
<text text-anchor="middle" x="3258" y="-2213.45" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightblue" stroke="lightblue" points="3674.5,-427.65 3674.5,-556.65 3880.5,-556.65 3880.5,-427.65 3674.5,-427.65"/>
<text text-anchor="middle" x="3777.5" y="-541.45" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightblue" stroke="lightblue" points="3685,-3012.65 3685,-3303.65 4329.5,-3303.65 4329.5,-3012.65 3685,-3012.65"/>
<text text-anchor="middle" x="4007.25" y="-3288.45" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightblue" stroke="lightblue" points="3109,-5135.65 3109,-5506.65 4321.5,-5506.65 4321.5,-5135.65 3109,-5135.65"/>
<text text-anchor="middle" x="3715.25" y="-5491.45" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust68" class="cluster">
<title>cluster_67</title>
<polygon fill="lightblue" stroke="lightblue" points="4157,-2767.65 4157,-3004.65 4301,-3004.65 4301,-2767.65 4157,-2767.65"/>
<text text-anchor="middle" x="4229" y="-2989.45" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust69" class="cluster">
<title>cluster_68</title>
<polygon fill="lightblue" stroke="lightblue" points="4153.5,-4694.65 4153.5,-4985.65 4305.5,-4985.65 4305.5,-4694.65 4153.5,-4694.65"/>
<text text-anchor="middle" x="4229.5" y="-4970.45" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust70" class="cluster">
<title>cluster_69</title>
<polygon fill="lightblue" stroke="lightblue" points="4139,-1026.65 4139,-1155.65 4319,-1155.65 4319,-1026.65 4139,-1026.65"/>
<text text-anchor="middle" x="4229" y="-1140.45" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust71" class="cluster">
<title>cluster_70</title>
<polygon fill="lightblue" stroke="lightblue" points="4558.5,-479.65 4558.5,-554.65 4755.5,-554.65 4755.5,-479.65 4558.5,-479.65"/>
<text text-anchor="middle" x="4657" y="-539.45" font-family="Helvetica,sans-Serif" font-size="14.00">generic_server_params.rs</text>
</g>
<g id="clust72" class="cluster">
<title>cluster_71</title>
<polygon fill="lightblue" stroke="lightblue" points="3667.5,-1603.65 3667.5,-1894.65 4757.5,-1894.65 4757.5,-1603.65 3667.5,-1603.65"/>
<text text-anchor="middle" x="4212.5" y="-1879.45" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust73" class="cluster">
<title>cluster_72</title>
<polygon fill="lightblue" stroke="lightblue" points="3618,-6455.65 3618,-6800.65 4393.5,-6800.65 4393.5,-6455.65 3618,-6455.65"/>
<text text-anchor="middle" x="4005.75" y="-6785.45" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust74" class="cluster">
<title>cluster_73</title>
<polygon fill="lightblue" stroke="lightblue" points="3702,-1199.65 3702,-1274.65 3852,-1274.65 3852,-1199.65 3702,-1199.65"/>
<text text-anchor="middle" x="3777" y="-1259.45" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust75" class="cluster">
<title>cluster_74</title>
<polygon fill="lightblue" stroke="lightblue" points="3582.5,-3502.65 3582.5,-4279.65 4421.5,-4279.65 4421.5,-3502.65 3582.5,-3502.65"/>
<text text-anchor="middle" x="4002" y="-4264.45" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust76" class="cluster">
<title>cluster_75</title>
<polygon fill="lightblue" stroke="lightblue" points="3125,-535.65 3125,-610.65 3391,-610.65 3391,-535.65 3125,-535.65"/>
<text text-anchor="middle" x="3258" y="-595.45" font-family="Helvetica,sans-Serif" font-size="14.00">generate_generic_server_params.rs</text>
</g>
<g id="clust77" class="cluster">
<title>cluster_76</title>
<polygon fill="lightblue" stroke="lightblue" points="5245.5,-2790.65 5245.5,-2865.65 5348.5,-2865.65 5348.5,-2790.65 5245.5,-2790.65"/>
<text text-anchor="middle" x="5297" y="-2850.45" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust78" class="cluster">
<title>cluster_77</title>
<polygon fill="lightblue" stroke="lightblue" points="4544,-5754.65 4544,-5883.65 4770,-5883.65 4770,-5754.65 4544,-5754.65"/>
<text text-anchor="middle" x="4657" y="-5868.45" font-family="Helvetica,sans-Serif" font-size="14.00">simple_types.rs</text>
</g>
<g id="clust79" class="cluster">
<title>cluster_78</title>
<polygon fill="lightblue" stroke="lightblue" points="4070,-2394.65 4070,-2577.65 5088.5,-2577.65 5088.5,-2394.65 4070,-2394.65"/>
<text text-anchor="middle" x="4579.25" y="-2562.45" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust80" class="cluster">
<title>cluster_79</title>
<polygon fill="lightblue" stroke="lightblue" points="4152.5,-2205.65 4152.5,-2280.65 5059.5,-2280.65 5059.5,-2205.65 4152.5,-2205.65"/>
<text text-anchor="middle" x="4606" y="-2265.45" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust81" class="cluster">
<title>cluster_80</title>
<polygon fill="lightblue" stroke="lightblue" points="4135,-1163.65 4135,-1292.65 4704.5,-1292.65 4704.5,-1163.65 4135,-1163.65"/>
<text text-anchor="middle" x="4419.75" y="-1277.45" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust82" class="cluster">
<title>cluster_81</title>
<polygon fill="lightblue" stroke="lightblue" points="4546.5,-1437.65 4546.5,-1512.65 5063,-1512.65 5063,-1437.65 4546.5,-1437.65"/>
<text text-anchor="middle" x="4804.75" y="-1497.45" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust83" class="cluster">
<title>cluster_82</title>
<polygon fill="lightblue" stroke="lightblue" points="4618,-3562.65 4618,-4123.65 4696,-4123.65 4696,-3562.65 4618,-3562.65"/>
<text text-anchor="middle" x="4657" y="-4108.45" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust84" class="cluster">
<title>cluster_83</title>
<polygon fill="lightblue" stroke="lightblue" points="4121.5,-517.65 4121.5,-646.65 4337.5,-646.65 4337.5,-517.65 4121.5,-517.65"/>
<text text-anchor="middle" x="4229.5" y="-631.45" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust85" class="cluster">
<title>cluster_84</title>
<polygon fill="lightblue" stroke="lightblue" points="4612.5,-1902.65 4612.5,-1977.65 5084,-1977.65 5084,-1902.65 4612.5,-1902.65"/>
<text text-anchor="middle" x="4848.25" y="-1962.45" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_struct.rs</text>
</g>
<g id="clust86" class="cluster">
<title>cluster_85</title>
<polygon fill="lightblue" stroke="lightblue" points="3711.5,-3311.65 3711.5,-3494.65 4276.5,-3494.65 4276.5,-3311.65 3711.5,-3311.65"/>
<text text-anchor="middle" x="3994" y="-3479.45" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust87" class="cluster">
<title>cluster_86</title>
<polygon fill="lightblue" stroke="lightblue" points="4617,-1520.65 4617,-1595.65 5079.5,-1595.65 5079.5,-1520.65 4617,-1520.65"/>
<text text-anchor="middle" x="4848.25" y="-1580.45" font-family="Helvetica,sans-Serif" font-size="14.00">timestamp_struct.rs</text>
</g>
<g id="clust88" class="cluster">
<title>cluster_87</title>
<polygon fill="lightblue" stroke="lightblue" points="4573,-1300.65 4573,-1429.65 5063,-1429.65 5063,-1300.65 4573,-1300.65"/>
<text text-anchor="middle" x="4818" y="-1414.45" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust89" class="cluster">
<title>cluster_88</title>
<polygon fill="lightblue" stroke="lightblue" points="3998,-4287.65 3998,-4686.65 4460,-4686.65 4460,-4287.65 3998,-4287.65"/>
<text text-anchor="middle" x="4229" y="-4671.45" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust90" class="cluster">
<title>cluster_89</title>
<polygon fill="lightblue" stroke="lightblue" points="3116.5,-4778.65 3116.5,-4853.65 3399.5,-4853.65 3399.5,-4778.65 3116.5,-4778.65"/>
<text text-anchor="middle" x="3258" y="-4838.45" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust91" class="cluster">
<title>cluster_90</title>
<polygon fill="lightblue" stroke="lightblue" points="3576,-2767.65 3576,-3004.65 3978,-3004.65 3978,-2767.65 3576,-2767.65"/>
<text text-anchor="middle" x="3777" y="-2989.45" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust92" class="cluster">
<title>cluster_91</title>
<polygon fill="lightblue" stroke="lightblue" points="3121.5,-4861.65 3121.5,-5044.65 3394.5,-5044.65 3394.5,-4861.65 3121.5,-4861.65"/>
<text text-anchor="middle" x="3258" y="-5029.45" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust93" class="cluster">
<title>cluster_92</title>
<polygon fill="lightblue" stroke="lightblue" points="3034.5,-1032.65 3034.5,-1323.65 3481.5,-1323.65 3481.5,-1032.65 3034.5,-1032.65"/>
<text text-anchor="middle" x="3258" y="-1308.45" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust94" class="cluster">
<title>cluster_93</title>
<polygon fill="lightblue" stroke="lightblue" points="3164,-895.65 3164,-1024.65 3352,-1024.65 3352,-895.65 3164,-895.65"/>
<text text-anchor="middle" x="3258" y="-1009.45" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_bytes(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_bytes().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn as_bytes(&amp;self) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s[ 0] = &#160;(self.0[ 0] &gt;&gt; &#160;0) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as u8; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s[ 1] = &#160;(self.0[ 0] &gt;&gt; &#160;8) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as u8;...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="6044,-12130.65 5967,-12130.65 5967,-12094.65 6044,-12094.65 6044,-12130.65"/>
<text text-anchor="middle" x="6005.5" y="-12108.95" font-family="Helvetica,sans-Serif" font-size="14.00">as_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;fn pack(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes: self.as_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5931,-12130.65 5877,-12130.65 5877,-12094.65 5931,-12094.65 5931,-12130.65"/>
<text text-anchor="middle" x="5904" y="-12108.95" font-family="Helvetica,sans-Serif" font-size="14.00">pack</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_bytes(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5931.14,-12112.65C5939.01,-12112.65 5947.89,-12112.65 5956.7,-12112.65"/>
<polygon fill="gray" stroke="gray" points="5956.93,-12116.15 5966.93,-12112.65 5956.93,-12109.15 5956.93,-12116.15"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order(bytes: [u8; 32]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Temporarily allow s_unreduced.bytes &gt; 2^255 ... &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s_unreduced = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Then reduce mod the grou...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5591,-12076.65 5416,-12076.65 5416,-12040.65 5591,-12040.65 5591,-12076.65"/>
<text text-anchor="middle" x="5503.5" y="-12054.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;fn reduce(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = self.unpack(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let xR = UnpackedScalar::mul_internal(&amp;x, &amp;constants::R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x_mod_l = UnpackedScalar::montgomery_reduce(&amp;xR); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5766,-12184.65 5702,-12184.65 5702,-12148.65 5766,-12148.65 5766,-12184.65"/>
<text text-anchor="middle" x="5734" y="-12162.95" font-family="Helvetica,sans-Serif" font-size="14.00">reduce</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5576.3,-12076.68C5581.5,-12079.28 5586.47,-12082.26 5591,-12085.65 5614.09,-12102.94 5603.46,-12122.98 5627,-12139.65 5645.91,-12153.04 5670.88,-12159.8 5691.83,-12163.21"/>
<polygon fill="gray" stroke="gray" points="5691.36,-12166.68 5701.75,-12164.63 5692.35,-12159.75 5691.36,-12166.68"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5762.5,-12076.65 5705.5,-12076.65 5705.5,-12040.65 5762.5,-12040.65 5762.5,-12076.65"/>
<text text-anchor="middle" x="5734" y="-12054.95" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5762.81,-12064.44C5784.4,-12069.25 5814.95,-12076.73 5841,-12085.65 5849.72,-12088.64 5858.91,-12092.33 5867.48,-12096.01"/>
<polygon fill="gray" stroke="gray" points="5866.26,-12099.3 5876.82,-12100.13 5869.08,-12092.9 5866.26,-12099.3"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;fn is_canonical(&amp;self) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(&amp;self.reduce()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5553.5,-12184.65 5453.5,-12184.65 5453.5,-12148.65 5553.5,-12148.65 5553.5,-12184.65"/>
<text text-anchor="middle" x="5503.5" y="-12162.95" font-family="Helvetica,sans-Serif" font-size="14.00">is_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5553.52,-12166.65C5594.63,-12166.65 5652.69,-12166.65 5691.53,-12166.65"/>
<polygon fill="gray" stroke="gray" points="5691.95,-12170.15 5701.95,-12166.65 5691.95,-12163.15 5691.95,-12170.15"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5364,-12184.65 5230,-12184.65 5230,-12148.65 5364,-12148.65 5364,-12184.65"/>
<text text-anchor="middle" x="5297" y="-12162.95" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5548,-12130.65 5459,-12130.65 5459,-12094.65 5548,-12094.65 5548,-12130.65"/>
<text text-anchor="middle" x="5503.5" y="-12108.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5364.11,-12149.19C5391.64,-12141.92 5423.17,-12133.6 5449.18,-12126.73"/>
<polygon fill="gray" stroke="gray" points="5450.08,-12130.11 5458.86,-12124.18 5448.29,-12123.34 5450.08,-12130.11"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn from_canonical_bytes(bytes: [u8; 32]) &#45;&gt; CtOption&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let high_bit_unset = (bytes[31] &gt;&gt; 7).ct_eq(&amp;0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let candidate = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtOption::new(candidat...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5380,-12130.65 5214,-12130.65 5214,-12094.65 5380,-12094.65 5380,-12130.65"/>
<text text-anchor="middle" x="5297" y="-12108.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_canonical_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5366.38,-12130.71C5391.38,-12137.31 5419.43,-12144.72 5443.54,-12151.08"/>
<polygon fill="gray" stroke="gray" points="5442.7,-12154.48 5453.26,-12153.65 5444.49,-12147.71 5442.7,-12154.48"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5766.46,-12160.04C5787.76,-12155.22 5816.39,-12148.08 5841,-12139.65 5849.72,-12136.66 5858.91,-12132.97 5867.48,-12129.29"/>
<polygon fill="gray" stroke="gray" points="5869.08,-12132.41 5876.82,-12125.17 5866.26,-12126 5869.08,-12132.41"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5841,-12130.65 5627,-12130.65 5627,-12094.65 5841,-12094.65 5841,-12130.65"/>
<text text-anchor="middle" x="5734" y="-12108.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge595" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5548.02,-12112.65C5567.71,-12112.65 5592.01,-12112.65 5616.46,-12112.65"/>
<polygon fill="gray" stroke="gray" points="5616.56,-12116.15 5626.56,-12112.65 5616.56,-12109.15 5616.56,-12116.15"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack(). -->
<g id="edge829" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]pack().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5841.4,-12112.65C5850.35,-12112.65 5858.94,-12112.65 5866.71,-12112.65"/>
<polygon fill="gray" stroke="gray" points="5866.76,-12116.15 5876.76,-12112.65 5866.76,-12109.15 5866.76,-12116.15"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn try_from(sig: &amp;ed25519::Signature) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;InternalSignature::from_bytes(&amp;sig.to_bytes()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4266.5,-12658.65 4191.5,-12658.65 4191.5,-12622.65 4266.5,-12622.65 4266.5,-12658.65"/>
<text text-anchor="middle" x="4229" y="-12636.95" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; SIGNATURE_LENGTH]) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO: Use bytes.split_array_ref once it’s in MSRV. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut R_bytes: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4704,-12658.65 4610,-12658.65 4610,-12622.65 4704,-12622.65 4704,-12658.65"/>
<text text-anchor="middle" x="4657" y="-12636.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4266.69,-12640.65C4341.24,-12640.65 4510.85,-12640.65 4599.56,-12640.65"/>
<polygon fill="gray" stroke="gray" points="4599.7,-12644.15 4609.7,-12640.65 4599.7,-12637.15 4599.7,-12644.15"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<g id="a_node13"><a xlink:title="fn check_scalar(bytes: [u8; 32]) &#45;&gt; Result&lt;Scalar, SignatureError&gt; { &#160;&#160;&#160;&#160;match Scalar::from_canonical_bytes(bytes).into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(InternalError::ScalarFormat.into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(x) =&gt; ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5072.5,-12658.65 4967.5,-12658.65 4967.5,-12622.65 5072.5,-12622.65 5072.5,-12658.65"/>
<text text-anchor="middle" x="5020" y="-12636.95" font-family="Helvetica,sans-Serif" font-size="14.00">check_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4704.09,-12640.65C4768.4,-12640.65 4885.24,-12640.65 4957.1,-12640.65"/>
<polygon fill="gray" stroke="gray" points="4957.36,-12644.15 4967.36,-12640.65 4957.36,-12637.15 4957.36,-12644.15"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge567" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5071.25,-12622.5C5109.92,-12605.63 5160.86,-12576.45 5186,-12532.65 5229.53,-12456.81 5152.03,-12208.46 5206,-12139.65 5206.49,-12139.02 5207,-12138.41 5207.51,-12137.82"/>
<polygon fill="gray" stroke="gray" points="5210.08,-12140.21 5214.93,-12130.79 5205.27,-12135.12 5210.08,-12140.21"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3821,-11449.65 3733,-11449.65 3733,-11413.65 3821,-11413.65 3821,-11449.65"/>
<text text-anchor="middle" x="3777" y="-11427.95" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3821.1,-11429.33C3867.96,-11429.43 3941.1,-11437.81 3978,-11484.65 4008.36,-11523.2 3980.65,-12321.75 3998,-12367.65 4039.18,-12476.6 4143.86,-12572.72 4196.61,-12616.13"/>
<polygon fill="gray" stroke="gray" points="4194.65,-12619.04 4204.61,-12622.64 4199.06,-12613.61 4194.65,-12619.04"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4282.5,-11449.65 4175.5,-11449.65 4175.5,-11413.65 4282.5,-11413.65 4282.5,-11449.65"/>
<text text-anchor="middle" x="4229" y="-11427.95" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3821.15,-11431.65C3901.08,-11431.65 4072.49,-11431.65 4165.26,-11431.65"/>
<polygon fill="gray" stroke="gray" points="4165.36,-11435.15 4175.36,-11431.65 4165.36,-11428.15 4165.36,-11435.15"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4732.5,-11449.65 4581.5,-11449.65 4581.5,-11413.65 4732.5,-11413.65 4732.5,-11449.65"/>
<text text-anchor="middle" x="4657" y="-11427.95" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge766" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4282.66,-11431.65C4354.75,-11431.65 4485,-11431.65 4571,-11431.65"/>
<polygon fill="gray" stroke="gray" points="4571.26,-11435.15 4581.26,-11431.65 4571.26,-11428.15 4571.26,-11435.15"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3286,-11449.65 3230,-11449.65 3230,-11413.65 3286,-11413.65 3286,-11449.65"/>
<text text-anchor="middle" x="3258" y="-11427.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge827" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3286.07,-11431.65C3367.89,-11431.65 3613.67,-11431.65 3722.8,-11431.65"/>
<polygon fill="gray" stroke="gray" points="3722.93,-11435.15 3732.93,-11431.65 3722.93,-11428.15 3722.93,-11435.15"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge830" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4716.23,-11413.65C4855.14,-11374.72 5207.75,-11300.33 5387.5,-11484.65 5434.17,-11532.51 5375.13,-12032.75 5416,-12085.65 5424.12,-12096.17 5436.3,-12102.68 5448.98,-12106.69"/>
<polygon fill="gray" stroke="gray" points="5448.15,-12110.09 5458.71,-12109.3 5449.95,-12103.33 5448.15,-12110.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().</title>
<g id="a_node18"><a xlink:title="fn OnlineBackupValidator_AddFrame( &#160;&#160;&#160;&#160;backup: &amp;mut OnlineBackupValidator, &#160;&#160;&#160;&#160;frame: &amp;[u8], ) &#45;&gt; Result&lt;(), ReadError&gt; { &#160;&#160;&#160;&#160;let unknown_fields = backup &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_mut() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_and_add_fram...">
<polygon fill="white" stroke="black" points="1443.5,-8114.65 1193.5,-8114.65 1193.5,-8078.65 1443.5,-8078.65 1443.5,-8114.65"/>
<text text-anchor="middle" x="1318.5" y="-8092.95" font-family="Helvetica,sans-Serif" font-size="14.00">OnlineBackupValidator_AddFrame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;pub fn parse_and_add_frame( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;raw_frame: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut visitor: impl FnMut(&amp;proto::backup::Frame) + Send, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;(Vec&lt;PathPart&gt;, UnknownValue)&gt;, crate::E...">
<polygon fill="white" stroke="black" points="1682.5,-8197.65 1512.5,-8197.65 1512.5,-8161.65 1682.5,-8161.65 1682.5,-8197.65"/>
<text text-anchor="middle" x="1597.5" y="-8175.95" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge658" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1379.6,-8114.66C1422.74,-8127.59 1481.01,-8145.05 1526.29,-8158.61"/>
<polygon fill="blue" stroke="blue" points="1525.45,-8162.02 1536.03,-8161.53 1527.46,-8155.31 1525.45,-8162.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().</title>
<g id="a_node19"><a xlink:title="async fn KeyTransparency_Distinguished( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedCha...">
<polygon fill="white" stroke="black" points="276.5,-10052.65 40.5,-10052.65 40.5,-10016.65 276.5,-10016.65 276.5,-10052.65"/>
<text text-anchor="middle" x="158.5" y="-10030.95" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;async fn distinguished( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished: Option&lt;LastTreeHead&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;SearchStateUpdate, RequestError&lt;Error&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ChatDistinguishedResponse { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="539,-9753.65 429,-9753.65 429,-9717.65 539,-9717.65 539,-9753.65"/>
<text text-anchor="middle" x="484" y="-9731.95" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M276.65,-10026.99C288.91,-10021.85 300.11,-10014.63 309,-10004.65 344.89,-9964.35 292.62,-9802.5 329,-9762.65 351.29,-9738.23 387.24,-9730.94 418.8,-9730"/>
<polygon fill="blue" stroke="blue" points="418.9,-9733.5 428.87,-9729.91 418.84,-9726.5 418.9,-9733.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().</title>
<g id="a_node20"><a xlink:title="async fn KeyTransparency_Search( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedChatConnec...">
<polygon fill="white" stroke="black" points="252.5,-10106.65 64.5,-10106.65 64.5,-10070.65 252.5,-10070.65 252.5,-10106.65"/>
<text text-anchor="middle" x="158.5" y="-10084.95" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;async fn search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_identity_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;(E164, Vec&lt;u8&gt;)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored_acco...">
<polygon fill="white" stroke="black" points="515,-9915.65 453,-9915.65 453,-9879.65 515,-9879.65 515,-9915.65"/>
<text text-anchor="middle" x="484" y="-9893.95" font-family="Helvetica,sans-Serif" font-size="14.00">search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge788" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M252.75,-10089.58C273.73,-10085.35 294.15,-10077.01 309,-10061.65 351.77,-10017.41 286.12,-9968.78 329,-9924.65 357.97,-9894.84 407.4,-9891.03 442.44,-9892.79"/>
<polygon fill="blue" stroke="blue" points="442.59,-9896.31 452.81,-9893.49 443.07,-9889.32 442.59,-9896.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node21"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="2689,-8164.65 2515,-8164.65 2515,-8128.65 2689,-8128.65 2689,-8164.65"/>
<text text-anchor="middle" x="2602" y="-8142.95" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node211"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-8821.65 3231,-8821.65 3231,-8785.65 3285,-8785.65 3285,-8821.65"/>
<text text-anchor="middle" x="3258" y="-8799.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.26,-8141.43C2775.43,-8138.29 2899.61,-8140.1 2932,-8173.65 2978.35,-8221.67 2914.1,-8725.2 2960,-8773.65 3027.53,-8844.93 3157.77,-8827.14 3220.91,-8813.07"/>
<polygon fill="blue" stroke="blue" points="3221.87,-8816.44 3230.82,-8810.77 3220.28,-8809.63 3221.87,-8816.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node22"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="2719.5,-8272.65 2484.5,-8272.65 2484.5,-8236.65 2719.5,-8236.65 2719.5,-8272.65"/>
<text text-anchor="middle" x="2602" y="-8250.95" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node207"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="3346,-8929.65 3170,-8929.65 3170,-8893.65 3346,-8893.65 3346,-8929.65"/>
<text text-anchor="middle" x="3258" y="-8907.95" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2719.5,-8248.6C2802.13,-8247.1 2903.25,-8251.86 2932,-8281.65 2978.58,-8329.91 2913.63,-8836.19 2960,-8884.65 3012.34,-8939.36 3101.81,-8940.38 3168.9,-8931.19"/>
<polygon fill="blue" stroke="blue" points="3169.66,-8934.61 3179.04,-8929.7 3168.64,-8927.69 3169.66,-8934.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node23"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="2687,-8218.65 2517,-8218.65 2517,-8182.65 2687,-8182.65 2687,-8218.65"/>
<text text-anchor="middle" x="2602" y="-8196.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node209"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="3285,-8875.65 3231,-8875.65 3231,-8839.65 3285,-8839.65 3285,-8875.65"/>
<text text-anchor="middle" x="3258" y="-8853.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2687.29,-8195.5C2773.52,-8192.27 2899.36,-8193.84 2932,-8227.65 2978.58,-8275.91 2913.63,-8782.19 2960,-8830.65 3027.81,-8901.53 3157.91,-8882.29 3220.97,-8867.49"/>
<polygon fill="blue" stroke="blue" points="3221.97,-8870.85 3230.86,-8865.08 3220.31,-8864.05 3221.97,-8870.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node24"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="2675,-7894.65 2529,-7894.65 2529,-7858.65 2675,-7858.65 2675,-7894.65"/>
<text text-anchor="middle" x="2602" y="-7872.95" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="4732,-9406.65 4582,-9406.65 4582,-9370.65 4732,-9370.65 4732,-9406.65"/>
<text text-anchor="middle" x="4657" y="-9384.95" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.13,-7881.45C2761.37,-7885.44 2898.3,-7885.61 2932,-7849.65 2994.61,-7782.84 2894.7,-6265.85 2960,-6201.65 3054.44,-6108.8 3461.56,-6108.8 3556,-6201.65 3602.75,-6247.62 3537.75,-7328.4 3576,-7381.65 3686.65,-7535.66 3867.79,-7370.33 3978,-7524.65 4006.54,-7564.62 3964.52,-9256.71 3998,-9292.65 4033.11,-9330.34 4409.37,-9321.18 4460,-9330.65 4506.27,-9339.3 4557.21,-9354.56 4595.56,-9367.26"/>
<polygon fill="blue" stroke="blue" points="4594.94,-9370.74 4605.53,-9370.59 4597.16,-9364.1 4594.94,-9370.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node25"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2730.5,-7732.65 2473.5,-7732.65 2473.5,-7696.65 2730.5,-7696.65 2730.5,-7732.65"/>
<text text-anchor="middle" x="2602" y="-7710.95" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node200"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="3349.5,-1566.65 3166.5,-1566.65 3166.5,-1530.65 3349.5,-1530.65 3349.5,-1566.65"/>
<text text-anchor="middle" x="3258" y="-1544.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2730.7,-7721.22C2811.29,-7722.27 2905.09,-7716.72 2932,-7687.65 2987.35,-7627.86 2927.07,-1896.17 2960,-1821.65 3012.7,-1702.41 3145.78,-1612.24 3214.49,-1571.9"/>
<polygon fill="blue" stroke="blue" points="3216.45,-1574.82 3223.35,-1566.77 3212.94,-1568.76 3216.45,-1574.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node26"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="2734,-8326.65 2470,-8326.65 2470,-8290.65 2734,-8290.65 2734,-8326.65"/>
<text text-anchor="middle" x="2602" y="-8304.95" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node203"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="3841,-9174.65 3713,-9174.65 3713,-9138.65 3841,-9138.65 3841,-9174.65"/>
<text text-anchor="middle" x="3777" y="-9152.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2734.29,-8293.63C2803.42,-8293.54 2883.66,-8307.28 2932,-8361.65 2980.55,-8416.25 2911.96,-8963.6 2960,-9018.65 3148.89,-9235.08 3540.47,-9197.62 3702.92,-9170.83"/>
<polygon fill="blue" stroke="blue" points="3703.54,-9174.28 3712.82,-9169.17 3702.37,-9167.38 3703.54,-9174.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node27"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="2715,-8056.65 2489,-8056.65 2489,-8020.65 2715,-8020.65 2715,-8056.65"/>
<text text-anchor="middle" x="2602" y="-8034.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node198"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="3316.5,-8684.65 3199.5,-8684.65 3199.5,-8648.65 3316.5,-8648.65 3316.5,-8684.65"/>
<text text-anchor="middle" x="3258" y="-8662.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.25,-8020.61C2752.04,-8007.3 2865.6,-8001.17 2932,-8065.65 2972.26,-8104.75 2937.76,-8265.12 2960,-8316.65 3021.95,-8460.21 3163.38,-8589.29 3226.09,-8641.77"/>
<polygon fill="blue" stroke="blue" points="3224.11,-8644.68 3234.04,-8648.37 3228.58,-8639.29 3224.11,-8644.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node28"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="2701.5,-8002.65 2502.5,-8002.65 2502.5,-7966.65 2701.5,-7966.65 2701.5,-8002.65"/>
<text text-anchor="middle" x="2602" y="-7980.95" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node208"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="3812.5,-8956.65 3741.5,-8956.65 3741.5,-8920.65 3812.5,-8920.65 3812.5,-8956.65"/>
<text text-anchor="middle" x="3777" y="-8934.95" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2701.79,-7975.4C2769.6,-7973.11 2859.99,-7978.27 2932,-8011.65 3377.98,-8218.37 3693.95,-8781.84 3762.19,-8911.7"/>
<polygon fill="blue" stroke="blue" points="3759.12,-8913.38 3766.85,-8920.63 3765.33,-8910.14 3759.12,-8913.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node29"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="2675.5,-7948.65 2528.5,-7948.65 2528.5,-7912.65 2675.5,-7912.65 2675.5,-7948.65"/>
<text text-anchor="middle" x="2602" y="-7926.95" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4721,-9460.65 4593,-9460.65 4593,-9424.65 4721,-9424.65 4721,-9460.65"/>
<text text-anchor="middle" x="4657" y="-9438.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.51,-7935.47C2761.76,-7939.43 2898.34,-7939.55 2932,-7903.65 2992.73,-7838.88 2896.67,-6367.88 2960,-6305.65 3054.47,-6212.82 3461.55,-6212.81 3556,-6305.65 3602.05,-6350.91 3539.47,-7414.41 3576,-7467.65 3685.08,-7626.62 3869.35,-7471.39 3978,-7630.65 4004.54,-7669.55 3966.04,-9291.07 3998,-9325.65 4067.97,-9401.36 4373.02,-9312.31 4460,-9367.65 4480.84,-9380.91 4467.63,-9401.68 4488,-9415.65 4515.48,-9434.49 4551.36,-9441.97 4582.9,-9444.45"/>
<polygon fill="blue" stroke="blue" points="4582.77,-9447.94 4592.97,-9445.08 4583.21,-9440.96 4582.77,-9447.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node30"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="2715.5,-8110.65 2488.5,-8110.65 2488.5,-8074.65 2715.5,-8074.65 2715.5,-8110.65"/>
<text text-anchor="middle" x="2602" y="-8088.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node197"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="3316.5,-8738.65 3199.5,-8738.65 3199.5,-8702.65 3316.5,-8702.65 3316.5,-8738.65"/>
<text text-anchor="middle" x="3258" y="-8716.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2715.64,-8086.69C2798.93,-8084.98 2902.76,-8089.43 2932,-8119.65 2976.4,-8165.54 2915.8,-8647.56 2960,-8693.65 3017.86,-8753.99 3120.88,-8748.96 3189.08,-8737.01"/>
<polygon fill="blue" stroke="blue" points="3190.09,-8740.38 3199.29,-8735.12 3188.82,-8733.5 3190.09,-8740.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node31"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2696,-7840.65 2508,-7840.65 2508,-7804.65 2696,-7804.65 2696,-7840.65"/>
<text text-anchor="middle" x="2602" y="-7818.95" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-9066.65 4202,-9066.65 4202,-9030.65 4256,-9030.65 4256,-9066.65"/>
<text text-anchor="middle" x="4229" y="-9044.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge511" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.3,-7828.3C2782.22,-7831.24 2900.94,-7828.79 2932,-7795.65 2994.01,-7729.49 2895.33,-6227.22 2960,-6163.65 3148.9,-5977.96 3367.03,-5978.02 3556,-6163.65 3600.51,-6207.38 3540.62,-7235.25 3576,-7286.65 3685.21,-7445.33 3869.2,-7289.69 3978,-7448.65 4002.63,-7484.64 3969.02,-8986.06 3998,-9018.65 4046.07,-9072.7 4139.92,-9065.67 4191.64,-9056.67"/>
<polygon fill="blue" stroke="blue" points="4192.5,-9060.06 4201.7,-9054.8 4191.23,-9053.18 4192.5,-9060.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node32"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="2739,-7786.65 2465,-7786.65 2465,-7750.65 2739,-7750.65 2739,-7786.65"/>
<text text-anchor="middle" x="2602" y="-7764.95" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node212"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="3347,-5558.65 3169,-5558.65 3169,-5522.65 3347,-5522.65 3347,-5558.65"/>
<text text-anchor="middle" x="3258" y="-5536.95" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge688" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2739.37,-7775.19C2817.82,-7775.68 2905.89,-7769.51 2932,-7741.65 2962.7,-7708.9 2949.17,-6169.22 2960,-6125.65 3017.79,-5893.08 3181.19,-5647.66 3237.58,-5567.59"/>
<polygon fill="blue" stroke="blue" points="3240.69,-5569.27 3243.61,-5559.08 3234.97,-5565.22 3240.69,-5569.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node33"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="2739,-7678.65 2465,-7678.65 2465,-7642.65 2739,-7642.65 2739,-7678.65"/>
<text text-anchor="middle" x="2602" y="-7656.95" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node201"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="3344.5,-1512.65 3171.5,-1512.65 3171.5,-1476.65 3344.5,-1476.65 3344.5,-1512.65"/>
<text text-anchor="middle" x="3258" y="-1490.95" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge716" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2739.13,-7666C2817.76,-7665.81 2906.12,-7658.86 2932,-7630.65 2989.35,-7568.12 2902.64,-1584.17 2960,-1521.65 3012.02,-1464.95 3103.74,-1464.98 3171.53,-1474.99"/>
<polygon fill="blue" stroke="blue" points="3171.35,-1478.5 3181.77,-1476.6 3172.44,-1471.59 3171.35,-1478.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node34"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3841.5,-11067.65 3712.5,-11067.65 3712.5,-11031.65 3841.5,-11031.65 3841.5,-11067.65"/>
<text text-anchor="middle" x="3777" y="-11045.95" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<g id="a_node290"><a xlink:title=" &#160;&#160;&#160;pub fn new(s: &amp;str) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (nickname, discriminator) = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s.rsplit_once(&#39;.&#39;).ok_or(UsernameError::MissingSeparator)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_parts_withou...">
<polygon fill="white" stroke="black" points="4256,-11586.65 4202,-11586.65 4202,-11550.65 4256,-11550.65 4256,-11586.65"/>
<text text-anchor="middle" x="4229" y="-11564.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.71,-11039.08C3886.59,-11035.61 3944.46,-11039.9 3978,-11076.65 4012.86,-11114.85 3962.81,-11503.76 3998,-11541.65 4047.15,-11594.57 4140.56,-11586.52 4191.92,-11577"/>
<polygon fill="blue" stroke="blue" points="4192.78,-11580.4 4201.91,-11575.04 4191.42,-11573.54 4192.78,-11580.4"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node292"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="4256,-11532.65 4202,-11532.65 4202,-11496.65 4256,-11496.65 4256,-11532.65"/>
<text text-anchor="middle" x="4229" y="-11510.95" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.64,-11039.14C3886.49,-11035.7 3944.35,-11040 3978,-11076.65 4008.7,-11110.08 3967.23,-11451.29 3998,-11484.65 4047.04,-11537.82 4140.5,-11531.15 4191.9,-11522.43"/>
<polygon fill="blue" stroke="blue" points="4192.68,-11525.85 4201.89,-11520.62 4191.43,-11518.96 4192.68,-11525.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node35"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3841.5,-11121.65 3712.5,-11121.65 3712.5,-11085.65 3841.5,-11085.65 3841.5,-11121.65"/>
<text text-anchor="middle" x="3777" y="-11099.95" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.64,-11093.14C3886.5,-11089.7 3944.36,-11094 3978,-11130.65 4008.92,-11164.33 3966.79,-11508.24 3998,-11541.65 4047.29,-11594.43 4140.65,-11586.43 4191.96,-11576.97"/>
<polygon fill="blue" stroke="blue" points="4192.8,-11580.37 4201.94,-11575.01 4191.46,-11573.5 4192.8,-11580.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node36"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="3875.5,-11229.65 3678.5,-11229.65 3678.5,-11193.65 3875.5,-11193.65 3875.5,-11229.65"/>
<text text-anchor="middle" x="3777" y="-11207.95" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;pub fn from_parts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limits: NicknameLimits, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should perform the same set of checks...">
<polygon fill="white" stroke="black" points="4275,-11755.65 4183,-11755.65 4183,-11719.65 4275,-11719.65 4275,-11755.65"/>
<text text-anchor="middle" x="4229" y="-11733.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge609" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3875.69,-11213.94C3913.4,-11220.13 3953.32,-11234.25 3978,-11264.65 4031.99,-11331.17 3947.62,-11580.36 3998,-11649.65 4038.39,-11705.2 4118.66,-11725.69 4172.85,-11733.24"/>
<polygon fill="blue" stroke="blue" points="4172.62,-11736.74 4182.99,-11734.55 4173.52,-11729.8 4172.62,-11736.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node37"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="3843.5,-11175.65 3710.5,-11175.65 3710.5,-11139.65 3843.5,-11139.65 3843.5,-11175.65"/>
<text text-anchor="middle" x="3777" y="-11153.95" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node289"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="4278,-11640.65 4180,-11640.65 4180,-11604.65 4278,-11604.65 4278,-11640.65"/>
<text text-anchor="middle" x="4229" y="-11618.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge828" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.55,-11147C3888.13,-11143.83 3944.83,-11148.51 3978,-11184.65 4008.92,-11218.33 3966.79,-11562.24 3998,-11595.65 4040.8,-11641.47 4116.8,-11641.49 4169.68,-11634.5"/>
<polygon fill="blue" stroke="blue" points="4170.2,-11637.96 4179.6,-11633.07 4169.2,-11631.03 4170.2,-11637.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node38"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="3399,-2795.65 3117,-2795.65 3117,-2759.65 3399,-2759.65 3399,-2795.65"/>
<text text-anchor="middle" x="3258" y="-2773.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node379" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node379"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3852.5,-1701.65 3701.5,-1701.65 3701.5,-1665.65 3852.5,-1665.65 3852.5,-1701.65"/>
<text text-anchor="middle" x="3777" y="-1679.95" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.02,-2795.68C3403.34,-2806.88 3501.14,-2809.58 3556,-2750.65 3595.38,-2708.35 3537.55,-1753.79 3576,-1710.65 3604.21,-1678.99 3650.45,-1671.23 3691.36,-1671.85"/>
<polygon fill="blue" stroke="blue" points="3691.25,-1675.35 3701.36,-1672.17 3691.47,-1668.35 3691.25,-1675.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node39"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3519,-4577.65 2997,-4577.65 2997,-4541.65 3519,-4541.65 3519,-4577.65"/>
<text text-anchor="middle" x="3258" y="-4555.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node385" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node385"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="3870.5,-6607.65 3683.5,-6607.65 3683.5,-6571.65 3870.5,-6571.65 3870.5,-6607.65"/>
<text text-anchor="middle" x="3777" y="-6585.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-4541.62C3402.93,-4530.25 3501.23,-4527.29 3556,-4586.65 3593.22,-4627 3539.67,-6521.5 3576,-6562.65 3600.01,-6589.84 3637.3,-6599.45 3673.21,-6601.26"/>
<polygon fill="blue" stroke="blue" points="3673.19,-6604.76 3683.29,-6601.57 3673.4,-6597.77 3673.19,-6604.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().</title>
<g id="a_node40"><a xlink:title="fn GroupSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::generate(*randomness).into() }">
<polygon fill="white" stroke="black" points="3415.5,-2849.65 3100.5,-2849.65 3100.5,-2813.65 3415.5,-2813.65 3415.5,-2849.65"/>
<text text-anchor="middle" x="3258" y="-2827.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="node373" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<g id="a_node373"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_GroupSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4268.5,-1863.65 4189.5,-1863.65 4189.5,-1827.65 4268.5,-1827.65 4268.5,-1863.65"/>
<text text-anchor="middle" x="4229" y="-1841.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.34,-2849.68C3406,-2859.91 3500.84,-2861.14 3556,-2804.65 3602.52,-2757 3548.66,-2566.37 3576,-2505.65 3716.49,-2193.61 4072.88,-1944.91 4190.03,-1869.35"/>
<polygon fill="blue" stroke="blue" points="4192.17,-1872.14 4198.7,-1863.8 4188.39,-1866.25 4192.17,-1872.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().</title>
<g id="a_node41"><a xlink:title="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serialized&lt;Gr...">
<polygon fill="white" stroke="black" points="3528,-2417.65 2988,-2417.65 2988,-2381.65 3528,-2381.65 3528,-2417.65"/>
<text text-anchor="middle" x="3258" y="-2395.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="node338" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<g id="a_node338"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AnyAuthCredentialPresentat...">
<polygon fill="white" stroke="black" points="3811.5,-525.65 3742.5,-525.65 3742.5,-489.65 3811.5,-489.65 3811.5,-525.65"/>
<text text-anchor="middle" x="3777" y="-503.95" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.46,-2417.66C3402.89,-2429.02 3501.18,-2431.97 3556,-2372.65 3588.01,-2338.01 3555.76,-717.26 3576,-674.65 3608.73,-605.75 3685.12,-555.16 3733.45,-528.65"/>
<polygon fill="blue" stroke="blue" points="3735.28,-531.64 3742.43,-523.83 3731.96,-525.48 3735.28,-531.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().</title>
<g id="a_node42"><a xlink:title="fn GenericServerSecretParams_GenerateDeterministic(randomness: &amp;[u8; RANDOMNESS_LEN]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = GenericServerSecretParams::generate(*randomness); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3444,-2471.65 3072,-2471.65 3072,-2435.65 3444,-2435.65 3444,-2471.65"/>
<text text-anchor="middle" x="3258" y="-2449.95" font-family="Helvetica,sans-Serif" font-size="14.00">GenericServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="node372" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<g id="a_node372"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: Default::default(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: zkcredential::credentials::CredentialKeyPair::generate(ra...">
<polygon fill="white" stroke="black" points="4696.5,-523.65 4617.5,-523.65 4617.5,-487.65 4696.5,-487.65 4696.5,-523.65"/>
<text text-anchor="middle" x="4657" y="-501.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.73,-2471.66C3403.1,-2482.93 3501.14,-2485.75 3556,-2426.65 3579.27,-2401.59 3566.21,-1228.42 3576,-1195.65 3671.61,-875.61 3872.84,-877.69 3978,-560.65 3987.19,-532.94 3976.58,-318.49 3998,-298.65 4148.62,-159.09 4271.39,-217.49 4460,-298.65 4546.31,-335.79 4612.39,-431.68 4640.79,-478.76"/>
<polygon fill="blue" stroke="blue" points="4637.85,-480.68 4645.96,-487.5 4643.88,-477.11 4637.85,-480.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node43"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3408.5,-2957.65 3107.5,-2957.65 3107.5,-2921.65 3408.5,-2921.65 3408.5,-2957.65"/>
<text text-anchor="middle" x="3258" y="-2935.95" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node361" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node361"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="4262,-2865.65 4196,-2865.65 4196,-2829.65 4262,-2829.65 4262,-2865.65"/>
<text text-anchor="middle" x="4229" y="-2843.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.32,-2957.68C3407.6,-2967.37 3500.78,-2967.81 3556,-2912.65 3590.26,-2878.43 3540.22,-2728.28 3576,-2695.65 3642,-2635.45 3910.02,-2637.69 3978,-2695.65 4020.81,-2732.16 3957.39,-2781.71 3998,-2820.65 4047.81,-2868.42 4134.25,-2864.27 4185.79,-2856.34"/>
<polygon fill="blue" stroke="blue" points="4186.62,-2859.75 4195.92,-2854.67 4185.48,-2852.85 4186.62,-2859.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node44"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="3484,-2363.65 3032,-2363.65 3032,-2327.65 3484,-2327.65 3484,-2363.65"/>
<text text-anchor="middle" x="3258" y="-2341.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node337" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node337"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="3810,-471.65 3744,-471.65 3744,-435.65 3810,-435.65 3810,-471.65"/>
<text text-anchor="middle" x="3777" y="-449.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.25,-2363.66C3408.43,-2373.47 3502.94,-2373.7 3556,-2315.65 3590.39,-2278.02 3542.24,-518.85 3576,-480.65 3614.61,-436.96 3687.54,-438.66 3733.85,-445.2"/>
<polygon fill="blue" stroke="blue" points="3733.46,-448.69 3743.87,-446.75 3734.53,-441.77 3733.46,-448.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node45"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="3439,-4199.65 3077,-4199.65 3077,-4163.65 3439,-4163.65 3439,-4199.65"/>
<text text-anchor="middle" x="3258" y="-4177.95" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node358" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node358"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-5189.65 4202,-5189.65 4202,-5153.65 4256,-5153.65 4256,-5189.65"/>
<text text-anchor="middle" x="4229" y="-5167.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.85,-4163.61C3404.02,-4152.65 3501.07,-4150.32 3556,-4208.65 3605.61,-4261.33 3529.9,-4803.87 3576,-4859.65 3692.63,-5000.78 3855.9,-4813.22 3978,-4949.65 4032.27,-5010.29 3942.29,-5072.33 3998,-5131.65 4047.71,-5184.58 4140.49,-5183.02 4191.71,-5177.31"/>
<polygon fill="blue" stroke="blue" points="4192.18,-5180.78 4201.67,-5176.09 4191.32,-5173.83 4192.18,-5180.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node46"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3469.5,-4091.65 3046.5,-4091.65 3046.5,-4055.65 3469.5,-4055.65 3469.5,-4091.65"/>
<text text-anchor="middle" x="3258" y="-4069.95" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node368" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node368"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="4262,-4900.65 4196,-4900.65 4196,-4864.65 4262,-4864.65 4262,-4900.65"/>
<text text-anchor="middle" x="4229" y="-4878.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.13,-4055.6C3404.25,-4044.72 3501.05,-4042.51 3556,-4100.65 3600.6,-4147.84 3538.8,-4631.43 3576,-4684.65 3691.93,-4850.52 3801.97,-4805.4 3998,-4855.65 4062.27,-4872.12 4139.25,-4878.58 4185.85,-4881.09"/>
<polygon fill="blue" stroke="blue" points="4185.72,-4884.58 4195.88,-4881.59 4186.07,-4877.59 4185.72,-4884.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node47"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3464.5,-3335.65 3051.5,-3335.65 3051.5,-3299.65 3464.5,-3299.65 3464.5,-3335.65"/>
<text text-anchor="middle" x="3258" y="-3313.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node391" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node391"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3868,-3708.65 3686,-3708.65 3686,-3672.65 3868,-3672.65 3868,-3708.65"/>
<text text-anchor="middle" x="3777" y="-3686.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3299.61C3405.79,-3289.3 3500.87,-3287.95 3556,-3344.65 3605.52,-3395.57 3527.6,-3611.66 3576,-3663.65 3601.09,-3690.61 3639.3,-3699.98 3675.62,-3701.66"/>
<polygon fill="blue" stroke="blue" points="3675.71,-3705.17 3685.8,-3701.94 3675.9,-3698.17 3675.71,-3705.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node48"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3394,-2633.65 3122,-2633.65 3122,-2597.65 3394,-2597.65 3394,-2633.65"/>
<text text-anchor="middle" x="3258" y="-2611.95" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node370" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node370"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="4278,-1070.65 4180,-1070.65 4180,-1034.65 4278,-1034.65 4278,-1070.65"/>
<text text-anchor="middle" x="4229" y="-1048.95" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.01,-2633.67C3403.34,-2644.87 3501.13,-2647.57 3556,-2588.65 3594.74,-2547.05 3548.3,-1615.29 3576,-1565.65 3679.57,-1380.06 3868.15,-1488.6 3978,-1306.65 4004.17,-1263.3 3962.71,-1115.97 3998,-1079.65 4041.6,-1034.77 4117.19,-1034.48 4169.76,-1041.15"/>
<polygon fill="blue" stroke="blue" points="4169.56,-1044.66 4179.95,-1042.57 4170.53,-1037.72 4169.56,-1044.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node49"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="3454,-3713.65 3062,-3713.65 3062,-3677.65 3454,-3677.65 3454,-3713.65"/>
<text text-anchor="middle" x="3258" y="-3691.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node402" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node402"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="3908.5,-4086.65 3645.5,-4086.65 3645.5,-4050.65 3908.5,-4050.65 3908.5,-4086.65"/>
<text text-anchor="middle" x="3777" y="-4064.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3677.61C3405.79,-3667.3 3500.87,-3665.95 3556,-3722.65 3605.52,-3773.57 3527.6,-3989.66 3576,-4041.65 3591.8,-4058.63 3612.81,-4068.63 3635.27,-4074.13"/>
<polygon fill="blue" stroke="blue" points="3634.81,-4077.61 3645.32,-4076.28 3636.28,-4070.77 3634.81,-4077.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node50"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="3411,-3065.65 3105,-3065.65 3105,-3029.65 3411,-3029.65 3411,-3065.65"/>
<text text-anchor="middle" x="3258" y="-3043.95" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node363" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node363"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="4257,-2973.65 4201,-2973.65 4201,-2937.65 4257,-2937.65 4257,-2973.65"/>
<text text-anchor="middle" x="4229" y="-2951.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3339.18,-3065.68C3406.69,-3075.68 3500.81,-3076.57 3556,-3020.65 3596.24,-2979.88 3533.95,-2802.55 3576,-2763.65 3608.79,-2733.32 3944.57,-2734.03 3978,-2763.65 4033.29,-2812.64 3945.67,-2876.51 3998,-2928.65 4048.63,-2979.09 4139.84,-2972.5 4190.86,-2963.76"/>
<polygon fill="blue" stroke="blue" points="4191.6,-2967.18 4200.81,-2961.94 4190.34,-2960.3 4191.6,-2967.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node51"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="3381.5,-4523.65 3134.5,-4523.65 3134.5,-4487.65 3381.5,-4487.65 3381.5,-4523.65"/>
<text text-anchor="middle" x="3258" y="-4501.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node383" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node383"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="3814.5,-6553.65 3739.5,-6553.65 3739.5,-6517.65 3814.5,-6517.65 3814.5,-6553.65"/>
<text text-anchor="middle" x="3777" y="-6531.95" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-4487.62C3402.93,-4476.25 3501.23,-4473.29 3556,-4532.65 3593.22,-4573 3539.67,-6467.5 3576,-6508.65 3613.3,-6550.89 3682.68,-6550.71 3729.1,-6544.74"/>
<polygon fill="blue" stroke="blue" points="3729.81,-6548.18 3739.21,-6543.3 3728.82,-6541.25 3729.81,-6548.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node52"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="3406.5,-4631.65 3109.5,-4631.65 3109.5,-4595.65 3406.5,-4595.65 3406.5,-4631.65"/>
<text text-anchor="middle" x="3258" y="-4609.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node386" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node386"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="3833.5,-6661.65 3720.5,-6661.65 3720.5,-6625.65 3833.5,-6625.65 3833.5,-6661.65"/>
<text text-anchor="middle" x="3777" y="-6639.95" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-4595.62C3402.93,-4584.25 3501.23,-4581.29 3556,-4640.65 3593.22,-4681 3539.67,-6575.5 3576,-6616.65 3608.49,-6653.44 3665.31,-6658.05 3710.1,-6654.69"/>
<polygon fill="blue" stroke="blue" points="3710.69,-6658.15 3720.34,-6653.76 3710.06,-6651.17 3710.69,-6658.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node53"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3463,-3605.65 3053,-3605.65 3053,-3569.65 3463,-3569.65 3463,-3605.65"/>
<text text-anchor="middle" x="3258" y="-3583.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node395" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node395"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="3916,-3978.65 3638,-3978.65 3638,-3942.65 3916,-3942.65 3916,-3978.65"/>
<text text-anchor="middle" x="3777" y="-3956.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3569.61C3405.79,-3559.3 3500.87,-3557.95 3556,-3614.65 3605.52,-3665.57 3527.6,-3881.66 3576,-3933.65 3590.1,-3948.8 3608.35,-3958.4 3628.08,-3964.2"/>
<polygon fill="blue" stroke="blue" points="3627.31,-3967.61 3637.87,-3966.75 3629.07,-3960.84 3627.31,-3967.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node54"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="3420,-3011.65 3096,-3011.65 3096,-2975.65 3420,-2975.65 3420,-3011.65"/>
<text text-anchor="middle" x="3258" y="-2989.95" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node362" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node362"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="4263.5,-2919.65 4194.5,-2919.65 4194.5,-2883.65 4263.5,-2883.65 4263.5,-2919.65"/>
<text text-anchor="middle" x="4229" y="-2897.95" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3339.72,-3011.65C3407.09,-3021.47 3500.72,-3022.12 3556,-2966.65 3592.06,-2930.47 3538.34,-2772.16 3576,-2737.65 3641.86,-2677.29 3910.42,-2679.22 3978,-2737.65 4024.55,-2777.9 3953.88,-2831.75 3998,-2874.65 4047.05,-2922.34 4132.51,-2918.56 4184.3,-2910.67"/>
<polygon fill="blue" stroke="blue" points="4184.89,-2914.12 4194.19,-2909.05 4183.76,-2907.21 4184.89,-2914.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node55"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="3397.5,-2741.65 3118.5,-2741.65 3118.5,-2705.65 3397.5,-2705.65 3397.5,-2741.65"/>
<text text-anchor="middle" x="3258" y="-2719.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node378" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node378"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="3850,-1647.65 3704,-1647.65 3704,-1611.65 3850,-1611.65 3850,-1647.65"/>
<text text-anchor="middle" x="3777" y="-1625.95" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.02,-2741.68C3403.34,-2752.88 3501.14,-2755.58 3556,-2696.65 3595.38,-2654.35 3537.55,-1699.79 3576,-1656.65 3604.75,-1624.39 3652.22,-1616.95 3693.69,-1617.9"/>
<polygon fill="blue" stroke="blue" points="3693.69,-1621.4 3703.82,-1618.29 3693.96,-1614.4 3693.69,-1621.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().</title>
<g id="a_node56"><a xlink:title="fn CallLinkSecretParams_DeriveFromRootKey(root_key: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = CallLinkSecretParams::derive_from_root_key(root_key); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3411,-2687.65 3105,-2687.65 3105,-2651.65 3411,-2651.65 3411,-2687.65"/>
<text text-anchor="middle" x="3258" y="-2665.95" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DeriveFromRootKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="node371" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<g id="a_node371"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_root_key(root_key: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4311,-1124.65 4147,-1124.65 4147,-1088.65 4311,-1088.65 4311,-1124.65"/>
<text text-anchor="middle" x="4229" y="-1102.95" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_root_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.02,-2687.68C3403.35,-2698.88 3501.14,-2701.58 3556,-2642.65 3595.49,-2600.23 3542.44,-1646.9 3576,-1599.65 3686.33,-1444.3 3863.87,-1603.23 3978,-1450.65 4016.83,-1398.75 3955.92,-1208.96 3998,-1159.65 4031.59,-1120.29 4088,-1106.87 4136.54,-1103.37"/>
<polygon fill="blue" stroke="blue" points="4137,-1106.85 4146.77,-1102.76 4136.58,-1099.86 4137,-1106.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node57"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3418.5,-4361.65 3097.5,-4361.65 3097.5,-4325.65 3418.5,-4325.65 3418.5,-4361.65"/>
<text text-anchor="middle" x="3258" y="-4339.95" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node356" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node356"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="3811.5,-5179.65 3742.5,-5179.65 3742.5,-5143.65 3811.5,-5143.65 3811.5,-5179.65"/>
<text text-anchor="middle" x="3777" y="-5157.95" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.56,-4325.62C3403.78,-4314.59 3501.07,-4312.15 3556,-4370.65 3610.86,-4429.07 3528.72,-5026.94 3576,-5091.65 3611.91,-5140.81 3684.97,-5155.66 3732.14,-5160.02"/>
<polygon fill="blue" stroke="blue" points="3732.12,-5163.53 3742.37,-5160.84 3732.68,-5156.55 3732.12,-5163.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().</title>
<g id="a_node58"><a xlink:title="fn ProfileKey_GetCommitment( &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCommitment&gt; { &#160;&#160;&#160;&#160;profile_key.get_commitment(user_id).into() }">
<polygon fill="white" stroke="black" points="3360.5,-2525.65 3155.5,-2525.65 3155.5,-2489.65 3360.5,-2489.65 3360.5,-2525.65"/>
<text text-anchor="middle" x="3258" y="-2503.95" font-family="Helvetica,sans-Serif" font-size="14.00">ProfileKey_GetCommitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node387" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node387"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="3844,-1243.65 3710,-1243.65 3710,-1207.65 3844,-1207.65 3844,-1243.65"/>
<text text-anchor="middle" x="3777" y="-1221.95" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.72,-2525.66C3403.09,-2536.93 3501.13,-2539.74 3556,-2480.65 3601.45,-2431.71 3534.83,-1331.24 3576,-1278.65 3604.86,-1241.78 3656.18,-1228.72 3699.61,-1224.78"/>
<polygon fill="blue" stroke="blue" points="3699.9,-1228.26 3709.6,-1224.01 3699.36,-1221.28 3699.9,-1228.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node59"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="3511,-3659.65 3005,-3659.65 3005,-3623.65 3511,-3623.65 3511,-3659.65"/>
<text text-anchor="middle" x="3258" y="-3637.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node394" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node394"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="3918,-4032.65 3636,-4032.65 3636,-3996.65 3918,-3996.65 3918,-4032.65"/>
<text text-anchor="middle" x="3777" y="-4010.95" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3623.61C3405.79,-3613.3 3500.87,-3611.95 3556,-3668.65 3605.52,-3719.57 3527.6,-3935.66 3576,-3987.65 3589.63,-4002.29 3607.13,-4011.75 3626.1,-4017.6"/>
<polygon fill="blue" stroke="blue" points="3625.26,-4021 3635.83,-4020.27 3627.11,-4014.25 3625.26,-4021"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node60"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="3446,-2903.65 3070,-2903.65 3070,-2867.65 3446,-2867.65 3446,-2903.65"/>
<text text-anchor="middle" x="3258" y="-2881.95" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node364" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node364"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="4293,-2811.65 4165,-2811.65 4165,-2775.65 4293,-2775.65 4293,-2811.65"/>
<text text-anchor="middle" x="4229" y="-2789.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.62,-2903.69C3407.85,-2913.31 3500.8,-2913.64 3556,-2858.65 3589.37,-2825.41 3541.16,-2679.34 3576,-2647.65 3708.16,-2527.42 3841.18,-2532.75 3978,-2647.65 4017.39,-2680.73 3960.99,-2725.93 3998,-2761.65 4038.77,-2801.01 4104.12,-2806.79 4154.75,-2804"/>
<polygon fill="blue" stroke="blue" points="4155.25,-2807.48 4164.99,-2803.32 4154.78,-2800.49 4155.25,-2807.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node61"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="3446.5,-4037.65 3069.5,-4037.65 3069.5,-4001.65 3446.5,-4001.65 3446.5,-4037.65"/>
<text text-anchor="middle" x="3258" y="-4015.95" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node369" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node369"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="4256,-4846.65 4202,-4846.65 4202,-4810.65 4256,-4810.65 4256,-4846.65"/>
<text text-anchor="middle" x="4229" y="-4824.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.4,-4001.61C3404.46,-3990.81 3501.01,-3988.74 3556,-4046.65 3595.35,-4088.1 3541.17,-4515.33 3576,-4560.65 3689.93,-4708.9 3854.65,-4544.14 3978,-4684.65 4012.8,-4724.3 3959.73,-4765.34 3998,-4801.65 4050.01,-4851 4141.15,-4844.7 4191.68,-4836.33"/>
<polygon fill="blue" stroke="blue" points="4192.58,-4839.73 4201.82,-4834.54 4191.36,-4832.84 4192.58,-4839.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node62"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="3426,-3551.65 3090,-3551.65 3090,-3515.65 3426,-3515.65 3426,-3551.65"/>
<text text-anchor="middle" x="3258" y="-3529.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node397" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node397"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="3874.5,-3924.65 3679.5,-3924.65 3679.5,-3888.65 3874.5,-3888.65 3874.5,-3924.65"/>
<text text-anchor="middle" x="3777" y="-3902.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3515.61C3405.79,-3505.3 3500.87,-3503.95 3556,-3560.65 3605.52,-3611.57 3527.6,-3827.66 3576,-3879.65 3599.63,-3905.03 3634.88,-3914.83 3669.24,-3917.29"/>
<polygon fill="blue" stroke="blue" points="3669.21,-3920.79 3679.38,-3917.81 3669.57,-3913.8 3669.21,-3920.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node63"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3437.5,-4469.65 3078.5,-4469.65 3078.5,-4433.65 3437.5,-4433.65 3437.5,-4469.65"/>
<text text-anchor="middle" x="3258" y="-4447.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-4433.61C3402.93,-4422.24 3501.24,-4419.28 3556,-4478.65 3594.23,-4520.1 3538.68,-6466.38 3576,-6508.65 3613.29,-6550.9 3682.67,-6550.72 3729.1,-6544.74"/>
<polygon fill="blue" stroke="blue" points="3729.8,-6548.18 3739.21,-6543.31 3728.82,-6541.25 3729.8,-6548.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node64"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="3494.5,-3119.65 3021.5,-3119.65 3021.5,-3083.65 3494.5,-3083.65 3494.5,-3119.65"/>
<text text-anchor="middle" x="3258" y="-3097.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node343" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node343"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="3841,-3056.65 3713,-3056.65 3713,-3020.65 3841,-3020.65 3841,-3056.65"/>
<text text-anchor="middle" x="3777" y="-3034.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge516" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3494.53,-3087.52C3515.47,-3084.08 3536.22,-3079.84 3556,-3074.65 3565.43,-3072.18 3566.63,-3068.33 3576,-3065.65 3617.13,-3053.89 3664.52,-3047.21 3702.84,-3043.43"/>
<polygon fill="blue" stroke="blue" points="3703.26,-3046.91 3712.89,-3042.49 3702.6,-3039.94 3703.26,-3046.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node65"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="3426,-3929.65 3090,-3929.65 3090,-3893.65 3426,-3893.65 3426,-3929.65"/>
<text text-anchor="middle" x="3258" y="-3907.95" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node365" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node365"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4263.5,-4738.65 4194.5,-4738.65 4194.5,-4702.65 4263.5,-4702.65 4263.5,-4738.65"/>
<text text-anchor="middle" x="4229" y="-4716.95" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge551" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.79,-3893.6C3405.58,-3883.2 3500.91,-3881.73 3556,-3938.65 3582.7,-3966.24 3556.35,-4250.66 3576,-4283.65 3683.52,-4464.23 3864.4,-4355.83 3978,-4532.65 4016.26,-4592.2 3948.04,-4640.5 3998,-4690.65 4046.49,-4739.33 4132.52,-4736.44 4184.5,-4729.11"/>
<polygon fill="blue" stroke="blue" points="4185.06,-4732.56 4194.42,-4727.59 4184.01,-4725.64 4185.06,-4732.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().</title>
<g id="a_node66"><a xlink:title="fn ServerPublicParams_VerifySignature( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;notary_signature: &amp;[u8; SIGNATURE_LEN], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3391.5,-3389.65 3124.5,-3389.65 3124.5,-3353.65 3391.5,-3353.65 3391.5,-3389.65"/>
<text text-anchor="middle" x="3258" y="-3367.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node390" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node390"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="3841,-3762.65 3713,-3762.65 3713,-3726.65 3841,-3726.65 3841,-3762.65"/>
<text text-anchor="middle" x="3777" y="-3740.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge557" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3353.61C3405.79,-3343.3 3500.87,-3341.95 3556,-3398.65 3605.52,-3449.57 3527.6,-3665.66 3576,-3717.65 3607.49,-3751.48 3659.64,-3757.62 3702.79,-3755.61"/>
<polygon fill="blue" stroke="blue" points="3703.21,-3759.09 3712.98,-3754.99 3702.78,-3752.11 3703.21,-3759.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node67"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="3462,-4253.65 3054,-4253.65 3054,-4217.65 3462,-4217.65 3462,-4253.65"/>
<text text-anchor="middle" x="3258" y="-4231.95" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node352" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node352"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="4262,-5258.65 4196,-5258.65 4196,-5222.65 4262,-5222.65 4262,-5258.65"/>
<text text-anchor="middle" x="4229" y="-5236.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge570" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.85,-4217.61C3404.03,-4206.64 3501.08,-4204.32 3556,-4262.65 3605.99,-4315.74 3528.49,-4863.33 3576,-4918.65 3694.36,-5056.47 3855.13,-4858.83 3978,-4992.65 4009.11,-5026.53 3966.87,-5164.79 3998,-5198.65 4045.39,-5250.19 4133.35,-5251.34 4185.68,-5246.61"/>
<polygon fill="blue" stroke="blue" points="4186.05,-5250.09 4195.65,-5245.6 4185.35,-5243.13 4186.05,-5250.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node68"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="3515,-4739.65 3001,-4739.65 3001,-4703.65 3515,-4703.65 3515,-4739.65"/>
<text text-anchor="middle" x="3258" y="-4717.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node384" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node384"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="3869.5,-6769.65 3684.5,-6769.65 3684.5,-6733.65 3869.5,-6733.65 3869.5,-6769.65"/>
<text text-anchor="middle" x="3777" y="-6747.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge594" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3512.71,-4739.72C3528.99,-4748.7 3543.74,-4760.16 3556,-4774.65 3590.99,-4816 3540.14,-6684.05 3576,-6724.65 3600.22,-6752.08 3637.96,-6761.62 3674.16,-6763.31"/>
<polygon fill="blue" stroke="blue" points="3674.23,-6766.81 3684.32,-6763.58 3674.42,-6759.81 3674.23,-6766.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().</title>
<g id="a_node69"><a xlink:title="fn ServerSecretParams_SignDeterministic( &#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; [u8; SIGNATURE_LEN] { &#160;&#160;&#160;&#160;params.sign(*randomness, message) }">
<polygon fill="white" stroke="black" points="3401,-3443.65 3115,-3443.65 3115,-3407.65 3401,-3407.65 3401,-3443.65"/>
<text text-anchor="middle" x="3258" y="-3421.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_SignDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node392" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node392"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="3804,-3816.65 3750,-3816.65 3750,-3780.65 3804,-3780.65 3804,-3816.65"/>
<text text-anchor="middle" x="3777" y="-3794.95" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge598" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3407.61C3405.79,-3397.3 3500.87,-3395.95 3556,-3452.65 3605.52,-3503.57 3527.6,-3719.66 3576,-3771.65 3617.42,-3816.14 3694.55,-3812.73 3739.97,-3805.91"/>
<polygon fill="blue" stroke="blue" points="3740.67,-3809.34 3749.97,-3804.28 3739.54,-3802.43 3740.67,-3809.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node70"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="3417,-4307.65 3099,-4307.65 3099,-4271.65 3417,-4271.65 3417,-4307.65"/>
<text text-anchor="middle" x="3258" y="-4285.95" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node348" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node348"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="4256,-5319.65 4202,-5319.65 4202,-5283.65 4256,-5283.65 4256,-5319.65"/>
<text text-anchor="middle" x="4229" y="-5297.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge600" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.85,-4271.61C3404.02,-4260.64 3501.07,-4258.32 3556,-4316.65 3605.76,-4369.5 3531.87,-4912.01 3576,-4969.65 3689.5,-5117.91 3858.48,-4948.2 3978,-5091.65 4028.39,-5152.13 3943.28,-5211.06 3998,-5267.65 4048.27,-5319.64 4140.82,-5315.51 4191.86,-5308.35"/>
<polygon fill="blue" stroke="blue" points="4192.43,-5311.81 4201.79,-5306.85 4191.38,-5304.88 4192.43,-5311.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().</title>
<g id="a_node71"><a xlink:title="fn ServerSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; ServerSecretParams { &#160;&#160;&#160;&#160;ServerSecretParams::generate(*randomness) }">
<polygon fill="white" stroke="black" points="3417.5,-3227.65 3098.5,-3227.65 3098.5,-3191.65 3417.5,-3191.65 3417.5,-3227.65"/>
<text text-anchor="middle" x="3258" y="-3205.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node399" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node399"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3816.5,-3600.65 3737.5,-3600.65 3737.5,-3564.65 3816.5,-3564.65 3816.5,-3600.65"/>
<text text-anchor="middle" x="3777" y="-3578.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge628" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3191.61C3405.79,-3181.3 3500.87,-3179.95 3556,-3236.65 3605.52,-3287.57 3527.6,-3503.66 3576,-3555.65 3613.73,-3596.18 3681.1,-3596.96 3727.14,-3591.62"/>
<polygon fill="blue" stroke="blue" points="3727.72,-3595.07 3737.19,-3590.32 3726.83,-3588.13 3727.72,-3595.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node72"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="3409.5,-4415.65 3106.5,-4415.65 3106.5,-4379.65 3409.5,-4379.65 3409.5,-4415.65"/>
<text text-anchor="middle" x="3258" y="-4393.95" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node349" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node349"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="3805,-5233.65 3749,-5233.65 3749,-5197.65 3805,-5197.65 3805,-5233.65"/>
<text text-anchor="middle" x="3777" y="-5211.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge650" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.58,-4379.6C3403.81,-4368.56 3501.11,-4366.1 3556,-4424.65 3614.08,-4486.6 3519.28,-5125.45 3576,-5188.65 3616.27,-5233.53 3692.78,-5230.27 3738.61,-5223.31"/>
<polygon fill="blue" stroke="blue" points="3739.43,-5226.72 3748.73,-5221.64 3738.29,-5219.82 3739.43,-5226.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node73"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="3548,-3821.65 2968,-3821.65 2968,-3785.65 3548,-3785.65 3548,-3821.65"/>
<text text-anchor="middle" x="3258" y="-3799.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node400" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node400"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="3963.5,-4194.65 3590.5,-4194.65 3590.5,-4158.65 3963.5,-4158.65 3963.5,-4194.65"/>
<text text-anchor="middle" x="3777" y="-4172.95" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge718" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3785.61C3405.79,-3775.3 3500.87,-3773.95 3556,-3830.65 3605.52,-3881.57 3527.6,-4097.66 3576,-4149.65 3578.07,-4151.87 3580.23,-4153.98 3582.47,-4155.97"/>
<polygon fill="blue" stroke="blue" points="3580.39,-4158.79 3590.39,-4162.3 3584.77,-4153.32 3580.39,-4158.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node74"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="3456,-4685.65 3060,-4685.65 3060,-4649.65 3456,-4649.65 3456,-4685.65"/>
<text text-anchor="middle" x="3258" y="-4663.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node380" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node380"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="3804,-6715.65 3750,-6715.65 3750,-6679.65 3804,-6679.65 3804,-6715.65"/>
<text text-anchor="middle" x="3777" y="-6693.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge721" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-4649.62C3402.93,-4638.25 3501.23,-4635.29 3556,-4694.65 3593.22,-4735 3539.67,-6629.5 3576,-6670.65 3616.23,-6716.21 3693.79,-6712.42 3739.6,-6705.24"/>
<polygon fill="blue" stroke="blue" points="3740.42,-6708.65 3749.7,-6703.53 3739.25,-6701.75 3740.42,-6708.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node75"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="3531,-3281.65 2985,-3281.65 2985,-3245.65 3531,-3245.65 3531,-3281.65"/>
<text text-anchor="middle" x="3258" y="-3259.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node401" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node401"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="3943.5,-3654.65 3610.5,-3654.65 3610.5,-3618.65 3943.5,-3618.65 3943.5,-3654.65"/>
<text text-anchor="middle" x="3777" y="-3632.95" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge759" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3245.61C3405.79,-3235.3 3500.87,-3233.95 3556,-3290.65 3605.52,-3341.57 3527.6,-3557.66 3576,-3609.65 3583.42,-3617.62 3591.98,-3624.05 3601.3,-3629.2"/>
<polygon fill="blue" stroke="blue" points="3599.95,-3632.44 3610.46,-3633.76 3603.06,-3626.17 3599.95,-3632.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node76"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="3463,-3875.65 3053,-3875.65 3053,-3839.65 3463,-3839.65 3463,-3875.65"/>
<text text-anchor="middle" x="3258" y="-3853.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node388" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node388"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="3920,-4248.65 3634,-4248.65 3634,-4212.65 3920,-4212.65 3920,-4248.65"/>
<text text-anchor="middle" x="3777" y="-4226.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge786" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3839.61C3405.79,-3829.3 3500.87,-3827.95 3556,-3884.65 3605.52,-3935.57 3527.6,-4151.66 3576,-4203.65 3589.16,-4217.79 3605.93,-4227.09 3624.15,-4232.98"/>
<polygon fill="blue" stroke="blue" points="3623.21,-4236.36 3633.79,-4235.76 3625.15,-4229.63 3623.21,-4236.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node77"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="3502,-3497.65 3014,-3497.65 3014,-3461.65 3502,-3461.65 3502,-3497.65"/>
<text text-anchor="middle" x="3258" y="-3475.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node396" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node396"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3913,-3870.65 3641,-3870.65 3641,-3834.65 3913,-3834.65 3913,-3870.65"/>
<text text-anchor="middle" x="3777" y="-3848.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge789" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3461.61C3405.79,-3451.3 3500.87,-3449.95 3556,-3506.65 3605.52,-3557.57 3527.6,-3773.66 3576,-3825.65 3590.79,-3841.54 3610.13,-3851.31 3630.95,-3857.01"/>
<polygon fill="blue" stroke="blue" points="3630.4,-3860.48 3640.94,-3859.42 3632.04,-3853.67 3630.4,-3860.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node78"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="3470.5,-4145.65 3045.5,-4145.65 3045.5,-4109.65 3470.5,-4109.65 3470.5,-4145.65"/>
<text text-anchor="middle" x="3258" y="-4123.95" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node367" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node367"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="4256,-4954.65 4202,-4954.65 4202,-4918.65 4256,-4918.65 4256,-4954.65"/>
<text text-anchor="middle" x="4229" y="-4932.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge802" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.83,-4109.62C3403.99,-4098.67 3501.03,-4096.36 3556,-4154.65 3603.82,-4205.36 3533.59,-4726.33 3576,-4781.65 3652.61,-4881.58 4065.74,-4923.33 4191.59,-4933.85"/>
<polygon fill="blue" stroke="blue" points="4191.6,-4937.36 4201.85,-4934.69 4192.17,-4930.38 4191.6,-4937.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().</title>
<g id="a_node79"><a xlink:title="fn GroupSecretParams_DeriveFromMasterKey( &#160;&#160;&#160;&#160;master_key: Serialized&lt;GroupMasterKey&gt;, ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::derive_from_master_key(master_key.into_inner()).into()...">
<polygon fill="white" stroke="black" points="3413.5,-2579.65 3102.5,-2579.65 3102.5,-2543.65 3413.5,-2543.65 3413.5,-2579.65"/>
<text text-anchor="middle" x="3258" y="-2557.95" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DeriveFromMasterKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="node375" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<g id="a_node375"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_master_key(master_key: GroupMasterKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey&#39; , &#160;...">
<polygon fill="white" stroke="black" points="4749.5,-1647.65 4564.5,-1647.65 4564.5,-1611.65 4749.5,-1611.65 4749.5,-1647.65"/>
<text text-anchor="middle" x="4657" y="-1625.95" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_master_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge811" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.73,-2579.66C3403.1,-2590.93 3501.14,-2593.75 3556,-2534.65 3602.42,-2484.64 3529.05,-1356.16 3576,-1306.65 3637.61,-1241.67 3914.41,-1341.7 3978,-1278.65 4018.52,-1238.47 3956.11,-1061.4 3998,-1022.65 4035.69,-987.79 4422.83,-987.24 4460,-1022.65 4506.47,-1066.92 4445.61,-1551.45 4488,-1599.65 4504.84,-1618.8 4529.35,-1628.47 4554.46,-1632.86"/>
<polygon fill="blue" stroke="blue" points="4554.08,-1636.34 4564.48,-1634.34 4555.1,-1629.41 4554.08,-1636.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().</title>
<g id="a_node80"><a xlink:title="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3471.5,-3767.65 3044.5,-3767.65 3044.5,-3731.65 3471.5,-3731.65 3471.5,-3767.65"/>
<text text-anchor="middle" x="3258" y="-3745.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyProfileKeyCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node398" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node398"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="3929.5,-4140.65 3624.5,-4140.65 3624.5,-4104.65 3929.5,-4104.65 3929.5,-4140.65"/>
<text text-anchor="middle" x="3777" y="-4118.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge812" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.06,-3731.61C3405.79,-3721.3 3500.87,-3719.95 3556,-3776.65 3605.52,-3827.57 3527.6,-4043.66 3576,-4095.65 3586.77,-4107.22 3599.96,-4115.55 3614.37,-4121.43"/>
<polygon fill="blue" stroke="blue" points="3613.42,-4124.8 3624.01,-4124.94 3615.81,-4118.23 3613.42,-4124.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node81"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="3417,-3983.65 3099,-3983.65 3099,-3947.65 3417,-3947.65 3417,-3983.65"/>
<text text-anchor="middle" x="3258" y="-3961.95" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node366" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node366"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="4257,-4792.65 4201,-4792.65 4201,-4756.65 4257,-4756.65 4257,-4792.65"/>
<text text-anchor="middle" x="4229" y="-4770.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge844" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.96,-3947.6C3404.91,-3936.96 3500.97,-3935.13 3556,-3992.65 3589.07,-4027.21 3547.31,-4384.38 3576,-4422.65 3689.31,-4573.79 3860.2,-4412.98 3978,-4560.65 4004.06,-4593.32 3968.6,-4717.95 3998,-4747.65 4048.27,-4798.44 4139.62,-4791.72 4190.76,-4782.86"/>
<polygon fill="blue" stroke="blue" points="4191.54,-4786.28 4200.74,-4781.02 4190.27,-4779.39 4191.54,-4786.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().</title>
<g id="a_node82"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_serial: &amp;[u8; RECEIPT_SERIAL...">
<polygon fill="white" stroke="black" points="3523,-3173.65 2993,-3173.65 2993,-3137.65 3523,-3137.65 3523,-3173.65"/>
<text text-anchor="middle" x="3258" y="-3151.95" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node389" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node389"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="3930,-3546.65 3624,-3546.65 3624,-3510.65 3930,-3510.65 3930,-3546.65"/>
<text text-anchor="middle" x="3777" y="-3524.95" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge855" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.05,-3137.62C3405.77,-3127.31 3500.85,-3125.97 3556,-3182.65 3605.07,-3233.08 3528.42,-3446.81 3576,-3498.65 3586.71,-3510.32 3599.86,-3518.81 3614.25,-3524.88"/>
<polygon fill="blue" stroke="blue" points="3613.29,-3528.25 3623.88,-3528.52 3615.76,-3521.71 3613.29,-3528.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node83"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3295.5,-9423.65 3220.5,-9423.65 3220.5,-9387.65 3295.5,-9387.65 3295.5,-9423.65"/>
<text text-anchor="middle" x="3258" y="-9401.95" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node84"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="3821.5,-9423.65 3732.5,-9423.65 3732.5,-9387.65 3821.5,-9387.65 3821.5,-9423.65"/>
<text text-anchor="middle" x="3777" y="-9401.95" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3295.77,-9405.65C3385.63,-9405.65 3616.72,-9405.65 3722.14,-9405.65"/>
<polygon fill="blue" stroke="blue" points="3722.24,-9409.15 3732.24,-9405.65 3722.24,-9402.15 3722.24,-9409.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="4304,-9446.65 4154,-9446.65 4154,-9410.65 4304,-9410.65 4304,-9446.65"/>
<text text-anchor="middle" x="4229" y="-9424.95" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge653" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.56,-9407.88C3895.72,-9411.67 4047.77,-9419.44 4143.42,-9424.33"/>
<polygon fill="blue" stroke="blue" points="4143.48,-9427.84 4153.65,-9424.85 4143.84,-9420.84 4143.48,-9427.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge654" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.89,-9398.35C3931.42,-9381.65 4224.92,-9346.15 4460,-9401.65 4473.54,-9404.85 4474.76,-9411.39 4488,-9415.65 4518.32,-9425.41 4552.89,-9431.74 4582.77,-9435.8"/>
<polygon fill="blue" stroke="blue" points="4582.34,-9439.27 4592.7,-9437.09 4583.24,-9432.33 4582.34,-9439.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node85"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="4256,-9257.65 4202,-9257.65 4202,-9221.65 4256,-9221.65 4256,-9257.65"/>
<text text-anchor="middle" x="4229" y="-9235.95" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.07,-9242.73C4303.39,-9249.69 4403.73,-9270.98 4460,-9330.65 4487.29,-9359.59 4457.73,-9389.85 4488,-9415.65 4513.76,-9437.61 4550.12,-9445.32 4582.43,-9447.14"/>
<polygon fill="blue" stroke="blue" points="4582.64,-9450.65 4592.76,-9447.53 4582.9,-9443.66 4582.64,-9450.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.07,-9243.65C4299.3,-9250.73 4388.17,-9267.16 4460,-9292.65 4516.03,-9312.53 4577.02,-9344.11 4615.83,-9365.58"/>
<polygon fill="blue" stroke="blue" points="4614.28,-9368.72 4624.72,-9370.53 4617.69,-9362.61 4614.28,-9368.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4304.2,-9421.68C4378.81,-9414.68 4493.64,-9403.9 4571.65,-9396.57"/>
<polygon fill="blue" stroke="blue" points="4572.3,-9400.02 4581.93,-9395.61 4571.65,-9393.06 4572.3,-9400.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="5166.5,-9490.65 4873.5,-9490.65 4873.5,-9454.65 5166.5,-9454.65 5166.5,-9490.65"/>
<text text-anchor="middle" x="5020" y="-9468.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4721.29,-9447.91C4760.64,-9451.18 4813.09,-9455.54 4862.99,-9459.69"/>
<polygon fill="blue" stroke="blue" points="4863,-9463.2 4873.26,-9460.54 4863.58,-9456.22 4863,-9463.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="4311,-9500.65 4147,-9500.65 4147,-9464.65 4311,-9464.65 4311,-9500.65"/>
<text text-anchor="middle" x="4229" y="-9478.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.13,-9475.03C4389.41,-9467.68 4506.85,-9456.65 4582.46,-9449.56"/>
<polygon fill="blue" stroke="blue" points="4583.22,-9453 4592.85,-9448.58 4582.56,-9446.03 4583.22,-9453"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.05,-9488.95C4357.65,-9488.87 4415.56,-9482.2 4460,-9455.65 4478.63,-9444.52 4469.61,-9427.17 4488,-9415.65 4512.64,-9400.21 4543.16,-9392.66 4571.4,-9389.2"/>
<polygon fill="blue" stroke="blue" points="4572.11,-9392.64 4581.69,-9388.11 4571.37,-9385.68 4572.11,-9392.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="5178,-9426.65 4862,-9426.65 4862,-9390.65 5178,-9390.65 5178,-9426.65"/>
<text text-anchor="middle" x="5020" y="-9404.95" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.28,-9483.4C4462.99,-9484.42 4778.3,-9484.66 4826,-9469.65 4844.34,-9463.88 4844.36,-9453.31 4862,-9445.65 4876.68,-9439.28 4892.62,-9433.9 4908.54,-9429.4"/>
<polygon fill="blue" stroke="blue" points="4909.71,-9432.71 4918.44,-9426.71 4907.87,-9425.96 4909.71,-9432.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311,-9484.69C4425.68,-9487.17 4641.91,-9490.37 4826,-9484.65 4838.11,-9484.27 4850.65,-9483.77 4863.24,-9483.17"/>
<polygon fill="blue" stroke="blue" points="4863.54,-9486.66 4873.35,-9482.67 4863.19,-9479.67 4863.54,-9486.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge526" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4732.36,-9392.77C4767.04,-9394.69 4809.83,-9397.06 4851.67,-9399.38"/>
<polygon fill="blue" stroke="blue" points="4851.54,-9402.88 4861.71,-9399.94 4851.92,-9395.89 4851.54,-9402.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="5372,-11939.65 5222,-11939.65 5222,-11903.65 5372,-11903.65 5372,-11939.65"/>
<text text-anchor="middle" x="5297" y="-11917.95" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge527" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5164.63,-9426.81C5172.66,-9431.9 5179.91,-9438.11 5186,-9445.65 5228.68,-9498.52 5166.05,-11836.69 5206,-11891.65 5208.26,-11894.76 5210.86,-11897.56 5213.72,-11900.07"/>
<polygon fill="blue" stroke="blue" points="5211.71,-11902.93 5221.83,-11906.06 5215.87,-11897.3 5211.71,-11902.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="5361,-11993.65 5233,-11993.65 5233,-11957.65 5361,-11957.65 5361,-11993.65"/>
<text text-anchor="middle" x="5297" y="-11971.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge815" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5022.78,-9491.02C5037.09,-9639.32 5134.21,-10656.51 5186,-11484.65 5187.61,-11510.4 5190.16,-11928.29 5206,-11948.65 5210.68,-11954.67 5216.66,-11959.39 5223.29,-11963.09"/>
<polygon fill="blue" stroke="blue" points="5222.16,-11966.42 5232.7,-11967.52 5225.14,-11960.09 5222.16,-11966.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5369.19,-11939.7C5375.55,-11942.33 5381.75,-11945.3 5387.5,-11948.65 5425.24,-11970.66 5460.23,-12007.45 5481.47,-12032.36"/>
<polygon fill="blue" stroke="blue" points="5479.03,-12034.9 5488.13,-12040.32 5484.4,-12030.4 5479.03,-12034.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5372.26,-11936.65C5377.92,-11939.91 5383.12,-11943.86 5387.5,-11948.65 5429.5,-11994.52 5374.22,-12039.58 5416,-12085.65 5424.67,-12095.21 5436.67,-12101.42 5448.98,-12105.44"/>
<polygon fill="blue" stroke="blue" points="5448.28,-12108.88 5458.85,-12108.22 5450.17,-12102.14 5448.28,-12108.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="5077.5,-11993.65 4962.5,-11993.65 4962.5,-11957.65 5077.5,-11957.65 5077.5,-11993.65"/>
<text text-anchor="middle" x="5020" y="-11971.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5077.65,-11975.65C5119.6,-11975.65 5177.13,-11975.65 5222.6,-11975.65"/>
<polygon fill="blue" stroke="blue" points="5222.7,-11979.15 5232.7,-11975.65 5222.7,-11972.15 5222.7,-11979.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5111.5,-11939.65 4928.5,-11939.65 4928.5,-11903.65 5111.5,-11903.65 5111.5,-11939.65"/>
<text text-anchor="middle" x="5020" y="-11917.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge586" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5111.81,-11921.65C5143.99,-11921.65 5180.05,-11921.65 5211.68,-11921.65"/>
<polygon fill="blue" stroke="blue" points="5211.78,-11925.15 5221.78,-11921.65 5211.78,-11918.15 5211.78,-11925.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge587" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5111.58,-11935.16C5135.82,-11939.13 5161.97,-11943.74 5186,-11948.65 5198.01,-11951.1 5210.69,-11953.96 5223.01,-11956.88"/>
<polygon fill="blue" stroke="blue" points="5222.25,-11960.3 5232.79,-11959.23 5223.88,-11953.49 5222.25,-11960.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge617" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5342.37,-11993.66C5373.49,-12006.29 5415.26,-12023.24 5448.34,-12036.67"/>
<polygon fill="blue" stroke="blue" points="5447.28,-12040.02 5457.86,-12040.53 5449.91,-12033.53 5447.28,-12040.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge618" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5339.37,-11993.76C5355.87,-12002.5 5374.08,-12014.25 5387.5,-12028.65 5406.8,-12049.38 5394.43,-12067.3 5416,-12085.65 5425.36,-12093.61 5437.07,-12099.23 5448.81,-12103.19"/>
<polygon fill="blue" stroke="blue" points="5448.05,-12106.62 5458.63,-12106.15 5450.07,-12099.92 5448.05,-12106.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node96"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="812,-10052.65 737,-10052.65 737,-10016.65 812,-10016.65 812,-10052.65"/>
<text text-anchor="middle" x="774.5" y="-10030.95" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node97"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1110,-10052.65 952,-10052.65 952,-10016.65 1110,-10016.65 1110,-10052.65"/>
<text text-anchor="middle" x="1031" y="-10030.95" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.23,-10034.65C845.95,-10034.65 897.24,-10034.65 941.58,-10034.65"/>
<polygon fill="blue" stroke="blue" points="941.8,-10038.15 951.8,-10034.65 941.8,-10031.15 941.8,-10038.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;pub fn verify_search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: SlimSearchRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: FullSearchResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime,...">
<polygon fill="white" stroke="black" points="1372.5,-9905.65 1264.5,-9905.65 1264.5,-9869.65 1372.5,-9869.65 1372.5,-9905.65"/>
<text text-anchor="middle" x="1318.5" y="-9883.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge702" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1110.28,-10028.17C1125.81,-10023.54 1140.76,-10016.19 1152,-10004.65 1180.59,-9975.3 1142.52,-9943.11 1172,-9914.65 1193.48,-9893.91 1225.45,-9886.44 1253.95,-9884.46"/>
<polygon fill="blue" stroke="blue" points="1254.45,-9887.94 1264.27,-9883.97 1254.12,-9880.95 1254.45,-9887.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node105"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="1651.5,-10930.65 1543.5,-10930.65 1543.5,-10894.65 1651.5,-10894.65 1651.5,-10930.65"/>
<text text-anchor="middle" x="1597.5" y="-10908.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1372.58,-9883.52C1401.92,-9884.36 1436.48,-9891.07 1457,-9914.65 1494.03,-9957.21 1477.17,-10365.78 1485,-10421.65 1510.03,-10600.28 1567.16,-10809.96 1588.37,-10884.57"/>
<polygon fill="blue" stroke="blue" points="1585.12,-10885.92 1591.23,-10894.58 1591.85,-10884 1585.12,-10885.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;a self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;M...">
<polygon fill="white" stroke="black" points="1376.5,-9959.65 1260.5,-9959.65 1260.5,-9923.65 1376.5,-9923.65 1376.5,-9959.65"/>
<text text-anchor="middle" x="1318.5" y="-9937.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<g id="a_node100"><a xlink:title="pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;config: &amp;&#39;a PublicConfig, &#160;&#160;&#160;&#160;req: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;res: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;MonitorStateUpdate&gt; { ...">
<polygon fill="white" stroke="black" points="1908,-10930.65 1792,-10930.65 1792,-10894.65 1908,-10894.65 1908,-10930.65"/>
<text text-anchor="middle" x="1850" y="-10908.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="edge541" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1376.56,-9930.07C1461.01,-9916.61 1618.3,-9906.34 1702,-9994.65 1734.75,-10029.21 1730.73,-10374.6 1738,-10421.65 1765.52,-10599.88 1820.8,-10809.8 1841.2,-10884.52"/>
<polygon fill="blue" stroke="blue" points="1837.93,-10885.83 1843.95,-10894.54 1844.68,-10883.98 1837.93,-10885.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node101"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2196.5,-10930.65 2037.5,-10930.65 2037.5,-10894.65 2196.5,-10894.65 2196.5,-10930.65"/>
<text text-anchor="middle" x="2117" y="-10908.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1908.17,-10912.65C1942.89,-10912.65 1987.93,-10912.65 2027.2,-10912.65"/>
<polygon fill="blue" stroke="blue" points="2027.32,-10916.15 2037.32,-10912.65 2027.32,-10909.15 2027.32,-10916.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node106"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="2703.5,-10957.65 2500.5,-10957.65 2500.5,-10921.65 2703.5,-10921.65 2703.5,-10957.65"/>
<text text-anchor="middle" x="2602" y="-10935.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge515" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.68,-10917.05C2276.34,-10921.5 2400.25,-10928.43 2489.9,-10933.44"/>
<polygon fill="blue" stroke="blue" points="2489.93,-10936.95 2500.11,-10934.01 2490.32,-10929.96 2489.93,-10936.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node102"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="2189.5,-10984.65 2044.5,-10984.65 2044.5,-10948.65 2189.5,-10948.65 2189.5,-10984.65"/>
<text text-anchor="middle" x="2117" y="-10962.95" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="2658.5,-1786.65 2545.5,-1786.65 2545.5,-1750.65 2658.5,-1750.65 2658.5,-1786.65"/>
<text text-anchor="middle" x="2602" y="-1764.95" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge552" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2189.76,-10965.49C2207.5,-10961.53 2224.65,-10953.85 2236,-10939.65 2275.54,-10890.2 2222.78,-1869.71 2264,-1821.65 2329.68,-1745.07 2457.18,-1746.94 2535.13,-1756.76"/>
<polygon fill="blue" stroke="blue" points="2534.95,-1760.27 2545.32,-1758.13 2535.88,-1753.33 2534.95,-1760.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="1702,-10984.65 1493,-10984.65 1493,-10948.65 1702,-10948.65 1702,-10984.65"/>
<text text-anchor="middle" x="1597.5" y="-10962.95" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node104"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="1933.5,-10984.65 1766.5,-10984.65 1766.5,-10948.65 1933.5,-10948.65 1933.5,-10984.65"/>
<text text-anchor="middle" x="1850" y="-10962.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge625" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1702.2,-10966.65C1720.09,-10966.65 1738.58,-10966.65 1756.16,-10966.65"/>
<polygon fill="blue" stroke="blue" points="1756.39,-10970.15 1766.39,-10966.65 1756.39,-10963.15 1756.39,-10970.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge662" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1933.76,-10949.79C1963.5,-10943.73 1997.16,-10936.87 2027.38,-10930.71"/>
<polygon fill="blue" stroke="blue" points="2028.39,-10934.08 2037.49,-10928.65 2026.99,-10927.22 2028.39,-10934.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge661" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1933.76,-10966.65C1965.69,-10966.65 2002.12,-10966.65 2033.98,-10966.65"/>
<polygon fill="blue" stroke="blue" points="2034.15,-10970.15 2044.15,-10966.65 2034.15,-10963.15 2034.15,-10970.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge683" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.62,-10924.1C1682.08,-10930.67 1721.17,-10939.09 1756.51,-10946.71"/>
<polygon fill="blue" stroke="blue" points="1755.86,-10950.15 1766.37,-10948.84 1757.33,-10943.31 1755.86,-10950.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge835" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M2610.63,-10958.07C2641.51,-11030.01 2765.03,-11293.41 2960,-11401.65 3043.57,-11448.04 3160.87,-11443.16 3219.93,-11436.81"/>
<polygon fill="blue" stroke="blue" points="3220.39,-11440.28 3229.92,-11435.66 3219.58,-11433.32 3220.39,-11440.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2208,-1786.65 2026,-1786.65 2026,-1750.65 2208,-1750.65 2208,-1786.65"/>
<text text-anchor="middle" x="2117" y="-1764.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2208.28,-1768.65C2303.3,-1768.65 2450.57,-1768.65 2535.17,-1768.65"/>
<polygon fill="blue" stroke="blue" points="2535.42,-1772.15 2545.42,-1768.65 2535.42,-1765.15 2535.42,-1772.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M2658.6,-1758.48C2733.56,-1748.35 2865.31,-1743.94 2932,-1821.65 3000.83,-1901.86 2887.07,-5550.14 2960,-5626.65 3051.52,-5722.67 3464.18,-5563.92 3556,-5659.65 3584.38,-5689.24 3562.02,-7097.1 3576,-7135.65 3672.6,-7402.09 3881.81,-7364.06 3978,-7630.65 4013.92,-7730.21 3975.52,-9432.23 3998,-9535.65 4190.74,-10422.26 4623.46,-10517.23 4826,-11401.65 4839.69,-11461.41 4817.95,-12462.01 4862,-12504.65 4887.87,-12529.69 5159.86,-12529.4 5186,-12504.65 5215.5,-12476.73 5180.87,-12171.56 5206,-12139.65 5206.49,-12139.03 5207,-12138.41 5207.52,-12137.82"/>
<polygon fill="blue" stroke="blue" points="5210.08,-12140.21 5214.95,-12130.8 5205.28,-12135.12 5210.08,-12140.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="2190,-1732.65 2044,-1732.65 2044,-1696.65 2190,-1696.65 2190,-1732.65"/>
<text text-anchor="middle" x="2117" y="-1710.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge634" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2190.05,-1722.71C2283.49,-1733.15 2445.15,-1751.23 2535.34,-1761.31"/>
<polygon fill="blue" stroke="blue" points="2535.12,-1764.81 2545.45,-1762.44 2535.9,-1757.85 2535.12,-1764.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<g id="a_node110"><a xlink:title="fn parse_and_validate(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; PartialBackup&#39; ); &#160;&#160;&#160;&#160;benchmark_multiple_backup_sizes(|size, _backup, _key| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if size == 0 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;retu...">
<polygon fill="white" stroke="black" points="1393.5,-8031.65 1243.5,-8031.65 1243.5,-7995.65 1393.5,-7995.65 1393.5,-8031.65"/>
<text text-anchor="middle" x="1318.5" y="-8009.95" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge549" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1378.21,-8031.71C1403.3,-8040.58 1432.42,-8052.43 1457,-8066.65 1500.22,-8091.65 1543.97,-8129.61 1570.67,-8154.52"/>
<polygon fill="blue" stroke="blue" points="1568.38,-8157.17 1578.06,-8161.49 1573.18,-8152.08 1568.38,-8157.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;validation, &#160;&#160;&#160;&#160;hmac_only, &#160;&#160;&#160;&#160;decrypt_only, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment, &#160;&#160;&#160;&#160;decrypt_and_decompress_and_hmac_and_segment_and_parse, &#160;&#160;&#160;&#160;de...">
<polygon fill="white" stroke="black" points="1073,-8031.65 989,-8031.65 989,-7995.65 1073,-7995.65 1073,-8031.65"/>
<text text-anchor="middle" x="1031" y="-8009.95" font-family="Helvetica,sans-Serif" font-size="14.00">validation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="edge566" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 validation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1073.21,-8013.65C1114.92,-8013.65 1180.6,-8013.65 1233.36,-8013.65"/>
<polygon fill="blue" stroke="blue" points="1233.39,-8017.15 1243.39,-8013.65 1233.39,-8010.15 1233.39,-8017.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn process&lt;R: ReaderFactory&lt;Reader: Unpin&gt;&gt;(input: R, key: &amp;MessageBackupKey) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;futures::executor::block_on(async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupReader::new_encrypted_compressed( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key,...">
<polygon fill="white" stroke="black" points="1066,-7977.65 996,-7977.65 996,-7941.65 1066,-7941.65 1066,-7977.65"/>
<text text-anchor="middle" x="1031" y="-7955.95" font-family="Helvetica,sans-Serif" font-size="14.00">process</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge824" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1066.1,-7952.6C1141.89,-7938.8 1327.86,-7915.39 1457,-7986.65 1524,-8023.62 1567.04,-8108.01 1585.74,-8151.93"/>
<polygon fill="blue" stroke="blue" points="1582.61,-8153.52 1589.67,-8161.42 1589.08,-8150.84 1582.61,-8153.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake() &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::fake_with([ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Recipient::test_data_contact().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Chat::test_data().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1624.5,-10204.65 1570.5,-10204.65 1570.5,-10168.65 1624.5,-10168.65 1624.5,-10204.65"/>
<text text-anchor="middle" x="1597.5" y="-10182.95" font-family="Helvetica,sans-Serif" font-size="14.00">fake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake_with(frames: impl IntoIterator&lt;Item = proto::frame::Item&gt;) &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut backup = Self::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for frame in frames { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backu...">
<polygon fill="white" stroke="black" points="1891,-10204.65 1809,-10204.65 1809,-10168.65 1891,-10168.65 1891,-10204.65"/>
<text text-anchor="middle" x="1850" y="-10182.95" font-family="Helvetica,sans-Serif" font-size="14.00">fake_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.83,-10182.31C1665.93,-10179.57 1746.05,-10179.17 1798.53,-10181.11"/>
<polygon fill="blue" stroke="blue" points="1798.5,-10184.61 1808.64,-10181.53 1798.79,-10177.62 1798.5,-10184.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1808.64,-10191.77C1760.64,-10194 1681.24,-10193.94 1635,-10191.58"/>
<polygon fill="blue" stroke="blue" points="1635.02,-10188.08 1624.83,-10190.99 1634.61,-10195.07 1635.02,-10188.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;fn add_frame_item(&amp;mut self, item: FrameItem) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FrameItem::Account(account_data) =&gt; self.add_account_data(account_data), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2181,-10042.65 2053,-10042.65 2053,-10006.65 2181,-10006.65 2181,-10042.65"/>
<text text-anchor="middle" x="2117" y="-10020.95" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame_item</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1891.14,-10186.18C1914.48,-10183.85 1942.95,-10177.18 1962,-10159.65 1999.23,-10125.39 1960.53,-10085.65 1998,-10051.65 2010.37,-10040.42 2026.44,-10033.56 2042.71,-10029.44"/>
<polygon fill="blue" stroke="blue" points="2043.83,-10032.78 2052.84,-10027.22 2042.32,-10025.95 2043.83,-10032.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn chat_item_order() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut partial = Store::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account data&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2181,-10386.65 2053,-10386.65 2053,-10350.65 2181,-10350.65 2181,-10386.65"/>
<text text-anchor="middle" x="2117" y="-10364.95" font-family="Helvetica,sans-Serif" font-size="14.00">chat_item_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;fn add_recipient(&amp;mut self, recipient: proto::Recipient) &#45;&gt; Result&lt;(), RecipientFrameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = recipient.id(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err_with_id = |e| RecipientFrameError(id, e); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2657,-10258.65 2547,-10258.65 2547,-10222.65 2657,-10222.65 2657,-10258.65"/>
<text text-anchor="middle" x="2602" y="-10236.95" font-family="Helvetica,sans-Serif" font-size="14.00">add_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.14,-10351.92C2273.42,-10327.46 2444.18,-10282.21 2536.96,-10257.62"/>
<polygon fill="blue" stroke="blue" points="2538.01,-10260.96 2546.78,-10255.02 2536.22,-10254.2 2538.01,-10260.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn allows_lone_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; ac...">
<polygon fill="white" stroke="black" points="1932.5,-10340.65 1767.5,-10340.65 1767.5,-10304.65 1932.5,-10304.65 1932.5,-10340.65"/>
<text text-anchor="middle" x="1850" y="-10318.95" font-family="Helvetica,sans-Serif" font-size="14.00">allows_lone_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1932.78,-10327.53C2010.91,-10330.98 2131.87,-10333.2 2236,-10321.65 2343.06,-10309.77 2464.69,-10279.26 2537.02,-10259.26"/>
<polygon fill="blue" stroke="blue" points="2538.2,-10262.57 2546.89,-10256.51 2536.32,-10255.82 2538.2,-10262.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1932.7,-10308.71C1943.82,-10303.67 1954.11,-10296.86 1962,-10287.65 2031.03,-10207.07 1925.78,-10129.38 1998,-10051.65 2009.78,-10038.97 2026.19,-10031.66 2043.03,-10027.57"/>
<polygon fill="blue" stroke="blue" points="2043.88,-10030.96 2052.96,-10025.51 2042.46,-10024.11 2043.88,-10030.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;pub fn add_frame(&amp;mut self, frame: proto::Frame) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_frame_item(frame.item.ok_or(ValidationError::EmptyFrame)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1895.5,-10096.65 1804.5,-10096.65 1804.5,-10060.65 1895.5,-10060.65 1895.5,-10096.65"/>
<text text-anchor="middle" x="1850" y="-10074.95" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1895.65,-10069.55C1935.87,-10061.36 1995.72,-10049.16 2042.91,-10039.55"/>
<polygon fill="blue" stroke="blue" points="2043.67,-10042.96 2052.77,-10037.53 2042.27,-10036.1 2043.67,-10042.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;fn duplicate_contact_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, fill_in_field): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; CompletionE...">
<polygon fill="white" stroke="black" points="2196,-10312.65 2038,-10312.65 2038,-10276.65 2196,-10276.65 2196,-10312.65"/>
<text text-anchor="middle" x="2117" y="-10290.95" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_contact_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.14,-10285.91C2290.91,-10275.32 2448.85,-10257.66 2536.84,-10247.82"/>
<polygon fill="blue" stroke="blue" points="2537.4,-10251.28 2546.95,-10246.69 2536.62,-10244.33 2537.4,-10251.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn zero_recipient_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid accoun...">
<polygon fill="white" stroke="black" points="2183,-10258.65 2051,-10258.65 2051,-10222.65 2183,-10222.65 2183,-10258.65"/>
<text text-anchor="middle" x="2117" y="-10236.95" font-family="Helvetica,sans-Serif" font-size="14.00">zero_recipient_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.14,-10240.65C2275.84,-10240.65 2444.77,-10240.65 2536.9,-10240.65"/>
<polygon fill="blue" stroke="blue" points="2536.93,-10244.15 2546.92,-10240.65 2536.92,-10237.15 2536.93,-10244.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;fn duplicate_non_contact_recipient&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, destination): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; Co...">
<polygon fill="white" stroke="black" points="2236,-10204.65 1998,-10204.65 1998,-10168.65 2236,-10168.65 2236,-10204.65"/>
<text text-anchor="middle" x="2117" y="-10182.95" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_non_contact_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2236.16,-10199.86C2330.91,-10210.45 2460.28,-10224.92 2536.79,-10233.47"/>
<polygon fill="blue" stroke="blue" points="2536.45,-10236.95 2546.77,-10234.59 2537.22,-10230 2536.45,-10236.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err = partial.add_frame_item(item.into()).unwra...">
<polygon fill="white" stroke="black" points="1394.5,-10204.65 1242.5,-10204.65 1242.5,-10168.65 1394.5,-10168.65 1394.5,-10204.65"/>
<text text-anchor="middle" x="1318.5" y="-10182.95" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge538" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.83,-10186.65C1448.47,-10186.65 1518.21,-10186.65 1560.04,-10186.65"/>
<polygon fill="blue" stroke="blue" points="1560.31,-10190.15 1570.31,-10186.65 1560.31,-10183.15 1560.31,-10190.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge539" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.57,-10171.77C1422.8,-10166.87 1455.26,-10162.06 1485,-10159.65 1581.13,-10151.86 1605.95,-10150.9 1702,-10159.65 1734.45,-10162.61 1770.44,-10169.16 1798.68,-10175.07"/>
<polygon fill="blue" stroke="blue" points="1798.21,-10178.55 1808.72,-10177.21 1799.67,-10171.7 1798.21,-10178.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge540" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.57,-10201.53C1422.8,-10206.43 1455.26,-10211.24 1485,-10213.65 1537.83,-10217.93 1920.66,-10246.81 1962,-10213.65 2019.53,-10167.5 1946.01,-10103.97 1998,-10051.65 2010.07,-10039.5 2026.42,-10032.35 2043.09,-10028.25"/>
<polygon fill="blue" stroke="blue" points="2043.86,-10031.66 2052.92,-10026.17 2042.41,-10024.82 2043.86,-10031.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;fn zero_chat_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account dat...">
<polygon fill="white" stroke="black" points="2168,-10150.65 2066,-10150.65 2066,-10114.65 2168,-10114.65 2168,-10150.65"/>
<text text-anchor="middle" x="2117" y="-10128.95" font-family="Helvetica,sans-Serif" font-size="14.00">zero_chat_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge605" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2168.32,-10143.9C2256.65,-10163.65 2439.42,-10204.52 2536.74,-10226.28"/>
<polygon fill="blue" stroke="blue" points="2536.22,-10229.75 2546.74,-10228.52 2537.75,-10222.92 2536.22,-10229.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expec...">
<polygon fill="white" stroke="black" points="1951.5,-10150.65 1748.5,-10150.65 1748.5,-10114.65 1951.5,-10114.65 1951.5,-10150.65"/>
<text text-anchor="middle" x="1850" y="-10128.95" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge660" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1946.66,-10114.52C1952.04,-10111.95 1957.21,-10109.01 1962,-10105.65 1985.63,-10089.11 1974.26,-10068.03 1998,-10051.65 2011.32,-10042.46 2027.31,-10036.36 2043.15,-10032.31"/>
<polygon fill="blue" stroke="blue" points="2044.01,-10035.71 2052.97,-10030.05 2042.44,-10028.88 2044.01,-10035.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_foreign_key&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let frame = proto::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item:...">
<polygon fill="white" stroke="black" points="1702,-10096.65 1493,-10096.65 1493,-10060.65 1702,-10060.65 1702,-10096.65"/>
<text text-anchor="middle" x="1597.5" y="-10074.95" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_foreign_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge723" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1702.2,-10078.65C1733.82,-10078.65 1767.34,-10078.65 1794.35,-10078.65"/>
<polygon fill="blue" stroke="blue" points="1794.37,-10082.15 1804.37,-10078.65 1794.37,-10075.15 1794.37,-10082.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(...">
<polygon fill="white" stroke="black" points="1946.5,-10042.65 1753.5,-10042.65 1753.5,-10006.65 1946.5,-10006.65 1946.5,-10042.65"/>
<text text-anchor="middle" x="1850" y="-10020.95" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge731" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1946.67,-10024.65C1978.23,-10024.65 2012.83,-10024.65 2042.47,-10024.65"/>
<polygon fill="blue" stroke="blue" points="2042.74,-10028.15 2052.74,-10024.65 2042.74,-10021.15 2042.74,-10028.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;Destination&lt;R&gt;, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3310.5,-10658.65 3205.5,-10658.65 3205.5,-10622.65 3310.5,-10622.65 3310.5,-10658.65"/>
<text text-anchor="middle" x="3258" y="-10636.95" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge739" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2638.16,-10258.66C2698.99,-10290.12 2827.38,-10357.8 2932,-10421.65 3041.1,-10488.23 3165.09,-10575.03 3223.37,-10616.51"/>
<polygon fill="blue" stroke="blue" points="3221.64,-10619.58 3231.81,-10622.54 3225.7,-10613.88 3221.64,-10619.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge836" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.02,-10035.98C2199.05,-10040.05 2218.54,-10045.25 2236,-10051.65 2361.74,-10097.74 2499.28,-10177.83 2563.75,-10217.3"/>
<polygon fill="blue" stroke="blue" points="2562,-10220.33 2572.35,-10222.59 2565.67,-10214.37 2562,-10220.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn pni_matching_aci_is_okay&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid...">
<polygon fill="white" stroke="black" points="2214,-10096.65 2020,-10096.65 2020,-10060.65 2214,-10060.65 2214,-10096.65"/>
<text text-anchor="middle" x="2117" y="-10074.95" font-family="Helvetica,sans-Serif" font-size="14.00">pni_matching_aci_is_okay</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge843" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2202.78,-10096.66C2214.01,-10099.45 2225.33,-10102.47 2236,-10105.65 2349.17,-10139.37 2477.95,-10189.97 2548.27,-10218.69"/>
<polygon fill="blue" stroke="blue" points="2547.21,-10222.04 2557.79,-10222.59 2549.87,-10215.56 2547.21,-10222.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;fn rejects_multiple_account_data&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expe...">
<polygon fill="white" stroke="black" points="1962,-10278.65 1738,-10278.65 1738,-10242.65 1962,-10242.65 1962,-10278.65"/>
<text text-anchor="middle" x="1850" y="-10256.95" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_multiple_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge864" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1944.4,-10242.59C1950.91,-10238.77 1956.9,-10234.18 1962,-10228.65 2016.45,-10169.66 1941.93,-10109.1 1998,-10051.65 2009.96,-10039.39 2026.27,-10032.2 2042.94,-10028.1"/>
<polygon fill="blue" stroke="blue" points="2043.71,-10031.51 2052.77,-10026.02 2042.26,-10024.66 2043.71,-10031.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;fn try_from( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(username, username_link): (String, Option&lt;proto::account_data::UsernameLink&gt;), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;username)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3295.5,-10984.65 3220.5,-10984.65 3220.5,-10948.65 3295.5,-10948.65 3295.5,-10984.65"/>
<text text-anchor="middle" x="3258" y="-10962.95" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3295.56,-10963.32C3428.48,-10952.08 3883.25,-10921.49 3978,-11019.65 4018.31,-11061.41 3958.6,-11499.03 3998,-11541.65 4047.02,-11594.68 4140.48,-11586.59 4191.89,-11577.04"/>
<polygon fill="blue" stroke="blue" points="4192.76,-11580.43 4201.89,-11575.06 4191.4,-11573.56 4192.76,-11580.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(crate) fn from_proto_test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: FAKE_PROFILE_KEY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Some(UsernameData { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Use...">
<polygon fill="white" stroke="black" points="3858,-10930.65 3696,-10930.65 3696,-10894.65 3858,-10894.65 3858,-10930.65"/>
<text text-anchor="middle" x="3777" y="-10908.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_proto_test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge555" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.18,-10914.46C3900.73,-10919.99 3949.9,-10934.57 3978,-10970.65 4017.01,-11020.73 3954.98,-11494.96 3998,-11541.65 4046.93,-11594.76 4140.43,-11586.63 4191.87,-11577.06"/>
<polygon fill="blue" stroke="blue" points="4192.74,-11580.45 4201.87,-11575.08 4191.38,-11573.59 4192.74,-11580.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn valid_account_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::AccountData::test_data().try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(AccountData::from_proto_test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3332.5,-10930.65 3183.5,-10930.65 3183.5,-10894.65 3332.5,-10894.65 3332.5,-10930.65"/>
<text text-anchor="middle" x="3258" y="-10908.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge780" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3332.52,-10912.65C3425.51,-10912.65 3585.55,-10912.65 3685.82,-10912.65"/>
<polygon fill="blue" stroke="blue" points="3685.93,-10916.15 3695.93,-10912.65 3685.93,-10909.15 3685.93,-10916.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="2181.5,-2006.65 2052.5,-2006.65 2052.5,-1970.65 2181.5,-1970.65 2181.5,-2006.65"/>
<text text-anchor="middle" x="2117" y="-1984.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="2642,-1969.65 2562,-1969.65 2562,-1933.65 2642,-1933.65 2642,-1969.65"/>
<text text-anchor="middle" x="2602" y="-1947.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.64,-1983.78C2279.22,-1976.3 2463.72,-1962.17 2551.8,-1955.42"/>
<polygon fill="blue" stroke="blue" points="2552.09,-1958.91 2561.8,-1954.65 2551.56,-1951.93 2552.09,-1958.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="3345,-2006.65 3171,-2006.65 3171,-1970.65 3345,-1970.65 3345,-2006.65"/>
<text text-anchor="middle" x="3258" y="-1984.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.68,-1988.65C2371.43,-1988.65 2933.89,-1988.65 3160.64,-1988.65"/>
<polygon fill="blue" stroke="blue" points="3160.85,-1992.15 3170.85,-1988.65 3160.85,-1985.15 3160.85,-1992.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2642.44,-1953.88C2743.57,-1959.6 3014.44,-1974.93 3160.49,-1983.19"/>
<polygon fill="blue" stroke="blue" points="3160.61,-1986.7 3170.79,-1983.77 3161,-1979.71 3160.61,-1986.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge563" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.15,-1977.49C3413.47,-1973.99 3505.57,-1982.26 3556,-2041.65 3608.4,-2103.36 3522.75,-3437.67 3576,-3498.65 3586.51,-3510.69 3599.61,-3519.4 3614.05,-3525.58"/>
<polygon fill="blue" stroke="blue" points="3613.12,-3528.97 3623.71,-3529.28 3615.63,-3522.43 3613.12,-3528.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge564" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.18,-1977.47C3413.51,-1973.96 3505.61,-1982.23 3556,-2041.65 3585.14,-2076.02 3546.14,-3629.91 3576,-3663.65 3600.57,-3691.41 3638.99,-3700.84 3675.62,-3702.34"/>
<polygon fill="blue" stroke="blue" points="3675.82,-3705.85 3685.89,-3702.56 3675.97,-3698.85 3675.82,-3705.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge561" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.21,-1977.45C3413.56,-1973.92 3505.68,-1982.17 3556,-2041.65 3590.92,-2082.92 3540.22,-3947.13 3576,-3987.65 3589.39,-4002.81 3606.92,-4012.51 3626.03,-4018.44"/>
<polygon fill="blue" stroke="blue" points="3625.28,-4021.86 3635.85,-4021.12 3627.13,-4015.11 3625.28,-4021.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge562" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.2,-1977.45C3413.54,-1973.93 3505.66,-1982.19 3556,-2041.65 3588.99,-2080.62 3542.19,-3841.39 3576,-3879.65 3599.12,-3905.82 3634.55,-3915.7 3669.21,-3918.02"/>
<polygon fill="blue" stroke="blue" points="3669.28,-3921.52 3679.43,-3918.49 3669.6,-3914.53 3669.28,-3921.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge565" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.16,-1977.48C3413.49,-1973.98 3505.59,-1982.25 3556,-2041.65 3610.43,-2105.79 3520.22,-3492.68 3576,-3555.65 3612.83,-3597.22 3680.73,-3597.67 3727.1,-3591.97"/>
<polygon fill="blue" stroke="blue" points="3727.79,-3595.41 3737.23,-3590.59 3726.85,-3588.47 3727.79,-3595.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="2161.5,-1952.65 2072.5,-1952.65 2072.5,-1916.65 2161.5,-1916.65 2161.5,-1952.65"/>
<text text-anchor="middle" x="2117" y="-1930.95" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge640" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2161.71,-1936.19C2251.69,-1939.36 2457.07,-1946.58 2551.65,-1949.91"/>
<polygon fill="blue" stroke="blue" points="2551.69,-1953.42 2561.81,-1950.27 2551.94,-1946.42 2551.69,-1953.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;fn requires_destination() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: None, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r...">
<polygon fill="white" stroke="black" points="2680.5,-10739.65 2523.5,-10739.65 2523.5,-10703.65 2680.5,-10703.65 2680.5,-10739.65"/>
<text text-anchor="middle" x="2602" y="-10717.95" font-family="Helvetica,sans-Serif" font-size="14.00">requires_destination</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.63,-10717.1C2747.41,-10712.75 2846.26,-10705.27 2932,-10694.65 3024.14,-10683.24 3130.09,-10664.59 3195.3,-10652.47"/>
<polygon fill="blue" stroke="blue" points="3196.22,-10655.86 3205.41,-10650.58 3194.93,-10648.97 3196.22,-10655.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_contact() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Contact::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}...">
<polygon fill="white" stroke="black" points="2697.5,-10685.65 2506.5,-10685.65 2506.5,-10649.65 2697.5,-10649.65 2697.5,-10685.65"/>
<text text-anchor="middle" x="2602" y="-10663.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2697.75,-10663.74C2833.83,-10658.12 3080.81,-10647.92 3195.46,-10643.19"/>
<polygon fill="blue" stroke="blue" points="3195.63,-10646.69 3205.47,-10642.78 3195.34,-10639.69 3195.63,-10646.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;fn valid_distribution_list() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::DistributionListItem::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data(...">
<polygon fill="white" stroke="black" points="2683.5,-10631.65 2520.5,-10631.65 2520.5,-10595.65 2683.5,-10595.65 2683.5,-10631.65"/>
<text text-anchor="middle" x="2602" y="-10609.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.52,-10616.97C2815.89,-10622.44 3076.62,-10633.2 3195.42,-10638.11"/>
<polygon fill="blue" stroke="blue" points="3195.3,-10641.61 3205.43,-10638.52 3195.59,-10634.61 3195.3,-10641.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;ContactData, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3829.5,-10766.65 3724.5,-10766.65 3724.5,-10730.65 3829.5,-10730.65 3829.5,-10766.65"/>
<text text-anchor="middle" x="3777" y="-10744.95" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3828.52,-10766.74C3876.47,-10786.9 3945.82,-10824.5 3978,-10882.65 4013.47,-10946.75 3948.49,-11487.66 3998,-11541.65 4046.81,-11594.88 4140.36,-11586.7 4191.83,-11577.09"/>
<polygon fill="blue" stroke="blue" points="4192.72,-11580.48 4201.84,-11575.1 4191.35,-11573.61 4192.72,-11580.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn destination_group(modifier: fn(&amp;mut proto::Group)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut group = proto::Group::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut group); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = prot...">
<polygon fill="white" stroke="black" points="2672.5,-10577.65 2531.5,-10577.65 2531.5,-10541.65 2672.5,-10541.65 2672.5,-10577.65"/>
<text text-anchor="middle" x="2602" y="-10555.95" font-family="Helvetica,sans-Serif" font-size="14.00">destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2672.81,-10563.7C2739.52,-10567.96 2842.85,-10575.61 2932,-10586.65 3024.14,-10598.07 3130.09,-10616.71 3195.3,-10628.83"/>
<polygon fill="blue" stroke="blue" points="3194.93,-10632.33 3205.41,-10630.72 3196.22,-10625.45 3194.93,-10632.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_group() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Group::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2692.5,-10523.65 2511.5,-10523.65 2511.5,-10487.65 2692.5,-10487.65 2692.5,-10523.65"/>
<text text-anchor="middle" x="2602" y="-10501.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.83,-10507.25C2759.43,-10509.82 2852.12,-10516.35 2932,-10532.65 3030.63,-10552.78 3140.96,-10593.53 3204.37,-10618.81"/>
<polygon fill="blue" stroke="blue" points="3203.17,-10622.1 3213.75,-10622.58 3205.77,-10615.6 3203.17,-10622.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;fn destination_distribution_list( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier: fn(&amp;mut proto::DistributionListItem), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut distribution_list = proto::DistributionListItem::tes...">
<polygon fill="white" stroke="black" points="2705.5,-10469.65 2498.5,-10469.65 2498.5,-10433.65 2705.5,-10433.65 2705.5,-10469.65"/>
<text text-anchor="middle" x="2602" y="-10447.95" font-family="Helvetica,sans-Serif" font-size="14.00">destination_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2705.54,-10450.14C2771.36,-10451.58 2858.03,-10458.01 2932,-10478.65 3044.05,-10509.92 3163.43,-10580.28 3221.35,-10617.13"/>
<polygon fill="blue" stroke="blue" points="3219.47,-10620.08 3229.77,-10622.53 3223.24,-10614.19 3219.47,-10620.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_self() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;recipient.try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Destination::...">
<polygon fill="white" stroke="black" points="2684.5,-10847.65 2519.5,-10847.65 2519.5,-10811.65 2684.5,-10811.65 2684.5,-10847.65"/>
<text text-anchor="middle" x="2602" y="-10825.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.61,-10831.47C2752.12,-10830.97 2849.89,-10825.57 2932,-10802.65 3044.05,-10771.38 3163.43,-10701.02 3221.35,-10664.17"/>
<polygon fill="blue" stroke="blue" points="3223.24,-10667.11 3229.77,-10658.77 3219.47,-10661.22 3223.24,-10667.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;fn destination_contact(modifier: fn(&amp;mut proto::Contact)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut contact = proto::Contact::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut contact); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipi...">
<polygon fill="white" stroke="black" points="2678,-10793.65 2526,-10793.65 2526,-10757.65 2678,-10757.65 2678,-10793.65"/>
<text text-anchor="middle" x="2602" y="-10771.95" font-family="Helvetica,sans-Serif" font-size="14.00">destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.2,-10774.57C2745.35,-10772.41 2846.09,-10766.19 2932,-10748.65 3030.63,-10728.52 3140.96,-10687.78 3204.37,-10662.49"/>
<polygon fill="blue" stroke="blue" points="3205.77,-10665.7 3213.75,-10658.72 3203.17,-10659.2 3205.77,-10665.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="edge781" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3310.94,-10651.5C3406.97,-10671.56 3611.82,-10714.35 3714.56,-10735.82"/>
<polygon fill="blue" stroke="blue" points="3713.97,-10739.27 3724.48,-10737.89 3715.41,-10732.42 3713.97,-10739.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chat_item_frames_not_equal() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let first_contact = make_contact(&#39; first&#39; , 1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let second_contact = make_contact(&#39; second&#39; , 2); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let constant_frames = vec![ &#160;&#160;...">
<polygon fill="white" stroke="black" points="1457,-9147.65 1180,-9147.65 1180,-9111.65 1457,-9111.65 1457,-9147.65"/>
<text text-anchor="middle" x="1318.5" y="-9125.95" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chat_item_frames_not_equal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;fn backup_from_frames( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;frames: impl IntoIterator&lt;Item = proto::Frame&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; crate::CompletedBackup&lt;Store&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut reader = crate::backup::PartialBackup::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prot...">
<polygon fill="white" stroke="black" points="1678,-9147.65 1517,-9147.65 1517,-9111.65 1678,-9111.65 1678,-9147.65"/>
<text text-anchor="middle" x="1597.5" y="-9125.95" font-family="Helvetica,sans-Serif" font-size="14.00">backup_from_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.19,-9129.65C1474.01,-9129.65 1490.84,-9129.65 1506.7,-9129.65"/>
<polygon fill="blue" stroke="blue" points="1506.97,-9133.15 1516.97,-9129.65 1506.97,-9126.15 1506.97,-9133.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1600.66,-9147.73C1615.76,-9273.72 1706,-10016.68 1738,-10051.65 1752.26,-10067.23 1773.87,-10074.52 1794.24,-10077.72"/>
<polygon fill="blue" stroke="blue" points="1794.06,-10081.23 1804.42,-10079.02 1794.94,-10074.28 1794.06,-10081.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;fn can_serialize() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = Backup { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;meta: BackupMeta { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_time: Timestamp::test_value(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;purpose: crate::...">
<polygon fill="white" stroke="black" points="1371,-9039.65 1266,-9039.65 1266,-9003.65 1371,-9003.65 1371,-9039.65"/>
<text text-anchor="middle" x="1318.5" y="-9017.95" font-family="Helvetica,sans-Serif" font-size="14.00">can_serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge604" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1323.3,-9003.45C1344.16,-8908.82 1454.32,-8471.08 1738,-8308.65 1824.4,-8259.18 1862.48,-8305.93 1962,-8308.65 2083.91,-8311.99 2128.69,-8265.69 2236,-8323.65 2254.46,-8333.62 2245.49,-8351.77 2264,-8361.65 2329.54,-8396.64 2880.19,-8338.4 2932,-8391.65 2994.11,-8455.49 2918.61,-9915.78 2960,-9994.65 3111.42,-10283.19 3400.85,-10135.1 3556,-10421.65 3580.41,-10466.74 3541.71,-10844.54 3576,-10882.65 3603.06,-10912.73 3646.27,-10921.8 3685.62,-10922.7"/>
<polygon fill="blue" stroke="blue" points="3685.78,-10926.2 3695.8,-10922.75 3685.81,-10919.2 3685.78,-10926.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chats_and_recipient_ids() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base = vec![crate::proto::backup::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: Some(proto::AccountData::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: Default::d...">
<polygon fill="white" stroke="black" points="1440.5,-9093.65 1196.5,-9093.65 1196.5,-9057.65 1440.5,-9057.65 1440.5,-9093.65"/>
<text text-anchor="middle" x="1318.5" y="-9071.95" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chats_and_recipient_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge722" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1412.12,-9093.71C1442.64,-9099.66 1476.52,-9106.26 1506.82,-9112.17"/>
<polygon fill="blue" stroke="blue" points="1506.46,-9115.66 1516.94,-9114.14 1507.8,-9108.79 1506.46,-9115.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().</title>
<g id="a_node151"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;futures::executor::block_on(async_main()) }">
<polygon fill="white" stroke="black" points="1345.5,-8280.65 1291.5,-8280.65 1291.5,-8244.65 1345.5,-8244.65 1345.5,-8280.65"/>
<text text-anchor="middle" x="1318.5" y="-8258.95" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1333.06,-8280.77C1391.26,-8359.77 1620.59,-8683.87 1702,-8991.65 1717.07,-9048.61 1700.81,-10005.95 1738,-10051.65 1751.55,-10068.31 1773.5,-10075.7 1794.32,-10078.69"/>
<polygon fill="blue" stroke="blue" points="1794.07,-10082.19 1804.4,-10079.83 1794.86,-10075.23 1794.07,-10082.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1345.64,-8258.14C1373.52,-8253.06 1418.83,-8244 1457,-8232.65 1486.53,-8223.87 1518.72,-8211.82 1544.73,-8201.42"/>
<polygon fill="blue" stroke="blue" points="1546.05,-8204.66 1554.02,-8197.67 1543.43,-8198.17 1546.05,-8204.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;pub async fn collect_all&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; ReadResult&lt;backup::PartialBackup&lt;M&gt;&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup::PartialBackup&lt;M&gt;: Send, &#160;&#160;&#160;&#160;{ &#160;...">
<polygon fill="white" stroke="black" points="1072.5,-8197.65 989.5,-8197.65 989.5,-8161.65 1072.5,-8161.65 1072.5,-8197.65"/>
<text text-anchor="middle" x="1031" y="-8175.95" font-family="Helvetica,sans-Serif" font-size="14.00">collect_all</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<g id="a_node154"><a xlink:title="async fn read_all_frames&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;purpose: Purpose, &#160;&#160;&#160;&#160;mut reader: VarintDelimitedReader&lt;impl AsyncRead + Unpin + VerifyHmac&gt;, &#160;&#160;&#160;&#160;mut visitor: impl F...">
<polygon fill="white" stroke="black" points="1381,-8197.65 1256,-8197.65 1256,-8161.65 1381,-8161.65 1381,-8197.65"/>
<text text-anchor="middle" x="1318.5" y="-8175.95" font-family="Helvetica,sans-Serif" font-size="14.00">read_all_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`BackupReader&lt;R&gt;`]collect_all().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1072.6,-8179.65C1117.51,-8179.65 1190.74,-8179.65 1245.44,-8179.65"/>
<polygon fill="blue" stroke="blue" points="1245.77,-8183.15 1255.77,-8179.65 1245.77,-8176.15 1245.77,-8183.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1650.88,-8197.74C1670.43,-8207.31 1690.63,-8221.2 1702,-8240.65 1752.79,-8327.52 1675.03,-9973.15 1738,-10051.65 1751.44,-10068.4 1773.37,-10075.81 1794.2,-10078.79"/>
<polygon fill="blue" stroke="blue" points="1793.97,-10082.28 1804.3,-10079.91 1794.74,-10075.33 1793.97,-10082.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1381.32,-8179.65C1416.89,-8179.65 1462.32,-8179.65 1502.26,-8179.65"/>
<polygon fill="blue" stroke="blue" points="1502.28,-8183.15 1512.28,-8179.65 1502.28,-8176.15 1502.28,-8183.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="3289,-1869.65 3227,-1869.65 3227,-1833.65 3289,-1833.65 3289,-1869.65"/>
<text text-anchor="middle" x="3258" y="-1847.95" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.35,-1846.12C3350.78,-1836.88 3489.6,-1826.36 3556,-1904.65 3613.28,-1972.19 3517.79,-3431.91 3576,-3498.65 3586.51,-3510.7 3599.6,-3519.41 3614.03,-3525.59"/>
<polygon fill="blue" stroke="blue" points="3613.1,-3528.98 3623.69,-3529.29 3615.61,-3522.45 3613.1,-3528.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.36,-1846.11C3350.8,-1836.86 3489.65,-1826.32 3556,-1904.65 3587.58,-1941.94 3543.63,-3627.04 3576,-3663.65 3600.55,-3691.42 3638.97,-3700.85 3675.61,-3702.35"/>
<polygon fill="blue" stroke="blue" points="3675.8,-3705.86 3685.88,-3702.58 3675.95,-3698.86 3675.8,-3705.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.37,-1846.1C3350.83,-1836.84 3489.72,-1826.26 3556,-1904.65 3593.36,-1948.84 3537.71,-3944.27 3576,-3987.65 3589.39,-4002.82 3606.91,-4012.52 3626.02,-4018.44"/>
<polygon fill="blue" stroke="blue" points="3625.27,-4021.87 3635.84,-4021.13 3627.12,-4015.11 3625.27,-4021.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.37,-1846.1C3350.82,-1836.84 3489.7,-1826.28 3556,-1904.65 3591.44,-1946.54 3539.68,-3838.53 3576,-3879.65 3599.11,-3905.82 3634.54,-3915.71 3669.19,-3918.03"/>
<polygon fill="blue" stroke="blue" points="3669.27,-3921.53 3679.42,-3918.5 3669.59,-3914.54 3669.27,-3921.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.36,-1846.12C3350.79,-1836.88 3489.62,-1826.34 3556,-1904.65 3585.66,-1939.64 3545.61,-3521.3 3576,-3555.65 3612.8,-3597.24 3680.71,-3597.68 3727.09,-3591.98"/>
<polygon fill="blue" stroke="blue" points="3727.79,-3595.42 3737.22,-3590.6 3726.84,-3588.48 3727.79,-3595.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="2633,-1869.65 2571,-1869.65 2571,-1833.65 2633,-1833.65 2633,-1869.65"/>
<text text-anchor="middle" x="2602" y="-1847.95" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2633.23,-1851.65C2739.43,-1851.65 3095.5,-1851.65 3216.42,-1851.65"/>
<polygon fill="blue" stroke="blue" points="3216.71,-1855.15 3226.71,-1851.65 3216.71,-1848.15 3216.71,-1855.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="2148,-1869.65 2086,-1869.65 2086,-1833.65 2148,-1833.65 2148,-1869.65"/>
<text text-anchor="middle" x="2117" y="-1847.95" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge571" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2148.21,-1851.65C2231.82,-1851.65 2466.28,-1851.65 2560.78,-1851.65"/>
<polygon fill="blue" stroke="blue" points="2560.8,-1855.15 2570.8,-1851.65 2560.8,-1848.15 2560.8,-1855.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node158"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-5096.65 3231,-5096.65 3231,-5060.65 3285,-5060.65 3285,-5096.65"/>
<text text-anchor="middle" x="3258" y="-5074.95" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.29,-5073.71C3344.5,-5064.3 3488.38,-5051.3 3556,-5131.65 3592.47,-5174.99 3544.39,-9162.65 3576,-9209.65 3683.87,-9370.05 3869.78,-9215.48 3978,-9375.65 4011.69,-9425.51 3957.8,-11496.88 3998,-11541.65 4046.25,-11595.39 4140.02,-11587.01 4191.68,-11577.22"/>
<polygon fill="blue" stroke="blue" points="4192.62,-11580.61 4201.73,-11575.2 4191.24,-11573.74 4192.62,-11580.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.36,-5084.87C3342.22,-5096.61 3477.61,-5115.27 3556,-5048.65 3682.17,-4941.44 3756.59,-4389.99 3772.69,-4258.72"/>
<polygon fill="blue" stroke="blue" points="3776.18,-4259.01 3773.9,-4248.66 3769.23,-4258.17 3776.18,-4259.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.36,-5085.94C3344.07,-5100.38 3485.94,-5125.03 3556,-5048.65 3608.02,-4991.94 3524.94,-3721.22 3576,-3663.65 3583.31,-3655.41 3591.84,-3648.78 3601.19,-3643.5"/>
<polygon fill="blue" stroke="blue" points="3603.05,-3646.48 3610.38,-3638.84 3599.88,-3640.24 3603.05,-3646.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<g id="a_node159"><a xlink:title="fn verify_chat_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&gt;, &#160;&#160;&#160;&#160;stored_account_data: Option&lt;AccountData&gt;, &#160;&#160;&#160;&#160;chat_search_...">
<polygon fill="white" stroke="black" points="882,-9865.65 667,-9865.65 667,-9829.65 882,-9829.65 882,-9865.65"/>
<text text-anchor="middle" x="774.5" y="-9843.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_chat_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<g id="a_node162"><a xlink:title="fn verify_single_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;search_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;response: CondensedTreeSearchResponse, &#160;&#160;&#160;&#160;monitoring_data: Option&lt;MonitoringData&gt;, &#160;&#160;&#160;&#160;full_tree_head: &amp;FullTr...">
<polygon fill="white" stroke="black" points="1144,-9892.65 918,-9892.65 918,-9856.65 1144,-9856.65 1144,-9892.65"/>
<text text-anchor="middle" x="1031" y="-9870.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_single_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M882.32,-9858.98C890.73,-9859.88 899.26,-9860.78 907.76,-9861.68"/>
<polygon fill="blue" stroke="blue" points="907.41,-9865.16 917.72,-9862.74 908.15,-9858.2 907.41,-9865.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<g id="a_node160"><a xlink:title=" &#160;&#160;&#160;async fn monitor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;account_data: AccountData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished_tree_...">
<polygon fill="white" stroke="black" points="519.5,-9969.65 448.5,-9969.65 448.5,-9933.65 519.5,-9933.65 519.5,-9969.65"/>
<text text-anchor="middle" x="484" y="-9947.95" font-family="Helvetica,sans-Serif" font-size="14.00">monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.71,-9951.23C645.85,-9949.72 1081.39,-9944.49 1250.05,-9942.46"/>
<polygon fill="blue" stroke="blue" points="1250.33,-9945.96 1260.29,-9942.34 1250.24,-9938.96 1250.33,-9945.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().</title>
<g id="a_node161"><a xlink:title=" &#160;&#160;&#160;fn search_does_not_return_requested_data(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="631,-9807.65 337,-9807.65 337,-9771.65 631,-9771.65 631,-9807.65"/>
<text text-anchor="middle" x="484" y="-9785.95" font-family="Helvetica,sans-Serif" font-size="14.00">search_does_not_return_requested_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M584.82,-9807.68C600.3,-9810.6 616.09,-9813.65 631,-9816.65 647.7,-9820.01 665.47,-9823.75 682.59,-9827.43"/>
<polygon fill="blue" stroke="blue" points="682.07,-9830.9 692.58,-9829.59 683.55,-9824.05 682.07,-9830.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1144.02,-9879.75C1181.37,-9881.45 1221.68,-9883.29 1254.03,-9884.76"/>
<polygon fill="blue" stroke="blue" points="1254.09,-9888.27 1264.24,-9885.23 1254.4,-9881.27 1254.09,-9888.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M515.06,-9892.44C549.22,-9886.52 607.05,-9876.5 659.35,-9867.43"/>
<polygon fill="blue" stroke="blue" points="660.13,-9870.85 669.39,-9865.69 658.94,-9863.95 660.13,-9870.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().</title>
<g id="a_node164"><a xlink:title=" &#160;&#160;&#160;fn search_returns_data_not_requested(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="615,-9861.65 353,-9861.65 353,-9825.65 615,-9825.65 615,-9861.65"/>
<text text-anchor="middle" x="484" y="-9839.95" font-family="Helvetica,sans-Serif" font-size="14.00">search_returns_data_not_requested</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge502" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M615.32,-9845.46C629.01,-9845.65 642.86,-9845.84 656.38,-9846.03"/>
<polygon fill="blue" stroke="blue" points="656.6,-9849.53 666.65,-9846.17 656.7,-9842.53 656.6,-9849.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge813" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M539.28,-9743.43C653.25,-9760.07 925.66,-9801.36 1152,-9847.65 1186.1,-9854.63 1223.85,-9863.65 1254.67,-9871.36"/>
<polygon fill="blue" stroke="blue" points="1253.87,-9874.76 1264.42,-9873.81 1255.58,-9867.98 1253.87,-9874.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKI...">
<polygon fill="white" stroke="black" points="297,-9861.65 20,-9861.65 20,-9825.65 297,-9825.65 297,-9861.65"/>
<text text-anchor="middle" x="158.5" y="-9839.95" font-family="Helvetica,sans-Serif" font-size="14.00">search_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-9861.71C327.87,-9871.76 399.23,-9883.67 442.79,-9890.94"/>
<polygon fill="blue" stroke="blue" points="442.27,-9894.4 452.71,-9892.6 443.43,-9887.5 442.27,-9894.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SK...">
<polygon fill="white" stroke="black" points="301,-9969.65 16,-9969.65 16,-9933.65 301,-9933.65 301,-9969.65"/>
<text text-anchor="middle" x="158.5" y="-9947.95" font-family="Helvetica,sans-Serif" font-size="14.00">monitor_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M301.39,-9951.65C350.84,-9951.65 402.79,-9951.65 438.41,-9951.65"/>
<polygon fill="blue" stroke="blue" points="438.46,-9955.15 448.46,-9951.65 438.46,-9948.15 438.46,-9955.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn prompt(text: &amp;str) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; {} &gt;&#39; , text); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_line(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="192,-9753.65 125,-9753.65 125,-9717.65 192,-9717.65 192,-9753.65"/>
<text text-anchor="middle" x="158.5" y="-9731.95" font-family="Helvetica,sans-Serif" font-size="14.00">prompt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge632" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.29,-9731.74C226.26,-9729.67 278.53,-9732.32 309,-9762.65 343.59,-9797.09 294.32,-9836.3 329,-9870.65 358.45,-9899.82 407.56,-9903.8 442.4,-9902.26"/>
<polygon fill="blue" stroke="blue" points="442.95,-9905.73 452.71,-9901.62 442.52,-9898.74 442.95,-9905.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge633" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-9735.65C245.24,-9735.65 350.48,-9735.65 418.75,-9735.65"/>
<polygon fill="blue" stroke="blue" points="418.96,-9739.15 428.96,-9735.65 418.96,-9732.15 418.96,-9739.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;async fn search_for_account_that_isnt() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39;...">
<polygon fill="white" stroke="black" points="267,-9807.65 50,-9807.65 50,-9771.65 267,-9771.65 267,-9807.65"/>
<text text-anchor="middle" x="158.5" y="-9785.95" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_account_that_isnt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge700" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.26,-9795.14C282.46,-9799.72 296.97,-9806.57 309,-9816.65 328.62,-9833.09 309.34,-9854.26 329,-9870.65 360.56,-9896.95 408.62,-9901.59 442.65,-9900.99"/>
<polygon fill="blue" stroke="blue" points="442.85,-9904.49 452.73,-9900.65 442.62,-9897.49 442.85,-9904.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;async fn distinguished_integration_test(have_last_distinguished: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running in...">
<polygon fill="white" stroke="black" points="271.5,-9699.65 45.5,-9699.65 45.5,-9663.65 271.5,-9663.65 271.5,-9699.65"/>
<text text-anchor="middle" x="158.5" y="-9677.95" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge738" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-9699.71C317.83,-9708.08 375.75,-9717.75 418.87,-9724.95"/>
<polygon fill="blue" stroke="blue" points="418.51,-9728.43 428.95,-9726.63 419.66,-9721.53 418.51,-9728.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;async fn search_for_deleted_account() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39; )...">
<polygon fill="white" stroke="black" points="263,-9915.65 54,-9915.65 54,-9879.65 263,-9879.65 263,-9915.65"/>
<text text-anchor="middle" x="158.5" y="-9893.95" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_deleted_account</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge769" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M263.19,-9897.65C324.27,-9897.65 398.09,-9897.65 442.75,-9897.65"/>
<polygon fill="blue" stroke="blue" points="442.9,-9901.15 452.9,-9897.65 442.9,-9894.15 442.9,-9901.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="3349,-1429.65 3167,-1429.65 3167,-1393.65 3349,-1393.65 3349,-1429.65"/>
<text text-anchor="middle" x="3258" y="-1407.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.14,-1429.57C3414.65,-1437.04 3501.1,-1434.52 3556,-1384.65 3591.49,-1352.41 3543.35,-1313.76 3576,-1278.65 3607.37,-1244.92 3657.48,-1231.69 3699.7,-1226.87"/>
<polygon fill="blue" stroke="blue" points="3700.09,-1230.35 3709.69,-1225.87 3699.39,-1223.39 3700.09,-1230.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.07,-1400.22C3417.03,-1397.18 3506.69,-1406.2 3556,-1464.65 3605.06,-1522.81 3525.72,-4146.55 3576,-4203.65 3588.91,-4218.32 3605.7,-4227.88 3624.05,-4233.85"/>
<polygon fill="blue" stroke="blue" points="3623.19,-4237.25 3633.77,-4236.66 3625.14,-4230.53 3623.19,-4237.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.05,-1400.24C3417,-1397.21 3506.66,-1406.23 3556,-1464.65 3598.32,-1514.76 3532.63,-3776.45 3576,-3825.65 3590.57,-3842.17 3610.04,-3852.21 3631.14,-3857.95"/>
<polygon fill="blue" stroke="blue" points="3630.39,-3861.37 3640.93,-3860.29 3632.02,-3854.56 3630.39,-3861.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.03,-1400.25C3416.97,-1397.23 3506.63,-1406.26 3556,-1464.65 3593.5,-1509.01 3537.56,-3512.1 3576,-3555.65 3612.75,-3597.29 3680.67,-3597.72 3727.07,-3592"/>
<polygon fill="blue" stroke="blue" points="3727.77,-3595.44 3737.2,-3590.62 3726.82,-3588.5 3727.77,-3595.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.04,-1400.25C3416.97,-1397.22 3506.63,-1406.25 3556,-1464.65 3594.47,-1510.16 3536.58,-3564.97 3576,-3609.65 3583.29,-3617.91 3591.81,-3624.55 3601.14,-3629.84"/>
<polygon fill="blue" stroke="blue" points="3599.82,-3633.1 3610.33,-3634.51 3603,-3626.86 3599.82,-3633.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="3361.5,-1375.65 3154.5,-1375.65 3154.5,-1339.65 3361.5,-1339.65 3361.5,-1375.65"/>
<text text-anchor="middle" x="3258" y="-1353.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge513" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-1339.6C3402.95,-1328.23 3501.26,-1325.26 3556,-1384.65 3596.87,-1429 3536.1,-3510.43 3576,-3555.65 3612.74,-3597.3 3680.66,-3597.72 3727.06,-3592"/>
<polygon fill="blue" stroke="blue" points="3727.77,-3595.44 3737.2,-3590.62 3726.82,-3588.51 3727.77,-3595.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge512" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.5,-1339.6C3402.95,-1328.22 3501.27,-1325.25 3556,-1384.65 3597.88,-1430.1 3535.11,-3563.3 3576,-3609.65 3583.29,-3617.91 3591.81,-3624.56 3601.14,-3629.85"/>
<polygon fill="blue" stroke="blue" points="3599.82,-3633.1 3610.32,-3634.52 3602.99,-3626.86 3599.82,-3633.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node174"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="3824,-11366.65 3730,-11366.65 3730,-11330.65 3824,-11330.65 3824,-11366.65"/>
<text text-anchor="middle" x="3777" y="-11344.95" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node275"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-12204.65 4202,-12204.65 4202,-12168.65 4256,-12168.65 4256,-12204.65"/>
<text text-anchor="middle" x="4229" y="-12182.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3824.05,-11346.38C3870.96,-11346.86 3941.78,-11355.88 3978,-11401.65 4028.9,-11465.98 3945.27,-12076.81 3998,-12139.65 4045.18,-12195.88 4139.81,-12196.25 4191.77,-12191.53"/>
<polygon fill="blue" stroke="blue" points="4192.28,-12195 4201.88,-12190.5 4191.57,-12188.04 4192.28,-12195"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node175"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="3821.5,-11312.65 3732.5,-11312.65 3732.5,-11276.65 3821.5,-11276.65 3821.5,-11312.65"/>
<text text-anchor="middle" x="3777" y="-11290.95" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="4266,-12076.65 4192,-12076.65 4192,-12040.65 4266,-12040.65 4266,-12076.65"/>
<text text-anchor="middle" x="4229" y="-12054.95" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.56,-11286.16C3867.76,-11279.96 3939.31,-11278.93 3978,-11321.65 4020.54,-11368.63 3968.24,-11835.7 3998,-11891.65 4037.68,-11966.24 4127.17,-12015.76 4182.09,-12040.38"/>
<polygon fill="blue" stroke="blue" points="4181.02,-12043.73 4191.59,-12044.54 4183.84,-12037.32 4181.02,-12043.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4684,-12096.65 4630,-12096.65 4630,-12060.65 4684,-12060.65 4684,-12096.65"/>
<text text-anchor="middle" x="4657" y="-12074.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.6,-11285.3C3943.98,-11261.9 4292.64,-11215.28 4460,-11401.65 4496.44,-11442.23 4467.04,-11841.31 4488,-11891.65 4516.95,-11961.2 4583.24,-12021.97 4623.35,-12054.19"/>
<polygon fill="blue" stroke="blue" points="4621.23,-12056.98 4631.25,-12060.43 4625.58,-12051.48 4621.23,-12056.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node176"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="3391,-11366.65 3125,-11366.65 3125,-11330.65 3391,-11330.65 3391,-11366.65"/>
<text text-anchor="middle" x="3258" y="-11344.95" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge588" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.13,-11348.65C3497.36,-11348.65 3641.34,-11348.65 3719.63,-11348.65"/>
<polygon fill="blue" stroke="blue" points="3719.76,-11352.15 3729.76,-11348.65 3719.76,-11345.15 3719.76,-11352.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node177"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="3389.5,-11312.65 3126.5,-11312.65 3126.5,-11276.65 3389.5,-11276.65 3389.5,-11312.65"/>
<text text-anchor="middle" x="3258" y="-11290.95" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge657" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3389.79,-11294.65C3497.3,-11294.65 3644.15,-11294.65 3722.16,-11294.65"/>
<polygon fill="blue" stroke="blue" points="3722.24,-11298.15 3732.24,-11294.65 3722.24,-11291.15 3722.24,-11298.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node178"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3293,-11229.65 3223,-11229.65 3223,-11193.65 3293,-11193.65 3293,-11229.65"/>
<text text-anchor="middle" x="3258" y="-11207.95" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge771" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.41,-11207.5C3353.99,-11202.19 3480.4,-11200.33 3556,-11264.65 3576.45,-11282.05 3555.19,-11304.69 3576,-11321.65 3615.85,-11354.13 3675.73,-11358.25 3719.58,-11355.84"/>
<polygon fill="blue" stroke="blue" points="3720.06,-11359.32 3729.8,-11355.15 3719.59,-11352.33 3720.06,-11359.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node179"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3290.5,-11175.65 3225.5,-11175.65 3225.5,-11139.65 3290.5,-11139.65 3290.5,-11175.65"/>
<text text-anchor="middle" x="3258" y="-11153.95" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge854" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3290.78,-11149.84C3350.51,-11137.22 3480.3,-11119.82 3556,-11184.65 3583.84,-11208.49 3548.87,-11240.01 3576,-11264.65 3615.18,-11300.24 3677.58,-11304.32 3722.25,-11301.65"/>
<polygon fill="blue" stroke="blue" points="3722.63,-11305.13 3732.35,-11300.92 3722.13,-11298.15 3722.63,-11305.13"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;pub fn from_slice(bytes: &amp;[u8]) &#45;&gt; Option&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO use Iterator::array_chunks once that&#39;s stabilized. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// See https://github.com/rust&#45;lang/rust/issues/100450. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chu...">
<polygon fill="white" stroke="black" points="5546.5,-5733.65 5460.5,-5733.65 5460.5,-5697.65 5546.5,-5697.65 5546.5,-5733.65"/>
<text text-anchor="middle" x="5503.5" y="-5711.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_slice</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5502.37,-5733.86C5499.69,-6100.17 5456.38,-11873.42 5387.5,-12028.65 5376.61,-12053.19 5354.76,-12073.93 5335.37,-12088.65"/>
<polygon fill="blue" stroke="blue" points="5333.26,-12085.86 5327.26,-12094.59 5337.39,-12091.51 5333.26,-12085.86"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node181"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="5106.5,-12415.65 4933.5,-12415.65 4933.5,-12379.65 5106.5,-12379.65 5106.5,-12415.65"/>
<text text-anchor="middle" x="5020" y="-12393.95" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5106.92,-12402.71C5136.31,-12399.68 5166.62,-12390.34 5186,-12367.65 5217.86,-12330.34 5170.91,-11518.95 5206,-11484.65 5263.68,-11428.26 5320.73,-11439.38 5387.5,-11484.65 5447,-11524.99 5572.98,-12038.22 5627,-12085.65 5628.32,-12086.81 5629.69,-12087.93 5631.1,-12088.99"/>
<polygon fill="blue" stroke="blue" points="5629.27,-12091.98 5639.54,-12094.61 5633.15,-12086.16 5629.27,-12091.98"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().</title>
<g id="a_node182"><a xlink:title="pub fn scalar_from_slice_canonical(bytes: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 32]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(scalar_bytes).into(...">
<polygon fill="white" stroke="black" points="5123,-12469.65 4917,-12469.65 4917,-12433.65 5123,-12433.65 5123,-12469.65"/>
<text text-anchor="middle" x="5020" y="-12447.95" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge510" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5123.4,-12455.64C5146.99,-12451.44 5169.86,-12442.35 5186,-12424.65 5228.78,-12377.74 5166.34,-12189.23 5206,-12139.65 5206.5,-12139.03 5207.01,-12138.42 5207.53,-12137.83"/>
<polygon fill="blue" stroke="blue" points="5210.09,-12140.23 5215.01,-12130.85 5205.31,-12135.11 5210.09,-12140.23"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node183"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="4684,-5612.65 4630,-5612.65 4630,-5576.65 4684,-5576.65 4684,-5612.65"/>
<text text-anchor="middle" x="4657" y="-5590.95" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="5048,-5695.65 4992,-5695.65 4992,-5659.65 5048,-5659.65 5048,-5695.65"/>
<text text-anchor="middle" x="5020" y="-5673.95" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-5600.69C4747.5,-5615.23 4908.49,-5652.24 4981.72,-5669.08"/>
<polygon fill="blue" stroke="blue" points="4981.34,-5672.58 4991.87,-5671.41 4982.9,-5665.76 4981.34,-5672.58"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node184"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="4286.5,-5558.65 4171.5,-5558.65 4171.5,-5522.65 4286.5,-5522.65 4286.5,-5558.65"/>
<text text-anchor="middle" x="4229" y="-5536.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4286.51,-5551.34C4339.45,-5557.74 4416.73,-5557.16 4460,-5510.65 4533.54,-5431.61 4409.49,-5099.76 4488,-5025.65 4713.59,-4812.71 4963.64,-4809.34 5186,-5025.65 5214.88,-5053.75 5180.08,-5719.8 5206,-5750.65 5258.95,-5813.69 5327.28,-5731.51 5387.5,-5787.65 5634.49,-6017.91 5544.28,-6185.23 5591,-6519.65 5601.7,-6596.21 5579.36,-12024.76 5627,-12085.65 5627.48,-12086.27 5627.98,-12086.87 5628.48,-12087.46"/>
<polygon fill="blue" stroke="blue" points="5626.06,-12089.99 5635.67,-12094.46 5630.95,-12084.98 5626.06,-12089.99"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4286.57,-5547.82C4375.45,-5559.09 4545.31,-5580.62 4619.64,-5590.04"/>
<polygon fill="blue" stroke="blue" points="4619.54,-5593.56 4629.9,-5591.34 4620.42,-5586.61 4619.54,-5593.56"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node185"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="4721,-5558.65 4593,-5558.65 4593,-5522.65 4721,-5522.65 4721,-5558.65"/>
<text text-anchor="middle" x="4657" y="-5536.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4286.57,-5540.65C4362.83,-5540.65 4498.71,-5540.65 4582.72,-5540.65"/>
<polygon fill="blue" stroke="blue" points="4582.95,-5544.15 4592.95,-5540.65 4582.95,-5537.15 4582.95,-5544.15"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="5346,-5695.65 5248,-5695.65 5248,-5659.65 5346,-5659.65 5346,-5695.65"/>
<text text-anchor="middle" x="5297" y="-5673.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge568" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4673.26,-5522.47C4707.18,-5480.92 4788.78,-5374.6 4826,-5270.65 4846.63,-5213.04 4815.99,-5037.99 4862,-4997.65 4970.27,-4902.72 5081.96,-4898.1 5186,-4997.65 5222.4,-5032.48 5195.46,-5401.38 5206,-5450.65 5222.13,-5526.03 5260.75,-5608.85 5281.78,-5650.51"/>
<polygon fill="blue" stroke="blue" points="5278.69,-5652.16 5286.35,-5659.48 5284.92,-5648.98 5278.69,-5652.16"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5048.26,-5695.39C5083.79,-5718.16 5148.23,-5758.22 5206,-5787.65 5284.23,-5827.5 5337.8,-5793.27 5387.5,-5865.65 5411.97,-5901.29 5599.82,-12052.04 5627,-12085.65 5627.49,-12086.26 5628,-12086.86 5628.51,-12087.44"/>
<polygon fill="blue" stroke="blue" points="5626.14,-12090.01 5635.8,-12094.36 5630.96,-12084.93 5626.14,-12090.01"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5048.12,-5677.65C5091.97,-5677.65 5179.39,-5677.65 5237.81,-5677.65"/>
<polygon fill="blue" stroke="blue" points="5238,-5681.15 5248,-5677.65 5238,-5674.15 5238,-5681.15"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="4749.5,-5695.65 4564.5,-5695.65 4564.5,-5659.65 4749.5,-5659.65 4749.5,-5695.65"/>
<text text-anchor="middle" x="4657" y="-5673.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge521" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4749.88,-5682.22C4778.23,-5678.7 4806.96,-5669.18 4826,-5647.65 4874.88,-5592.39 4808.44,-5035.38 4862,-4984.65 4966.55,-4885.63 5082.02,-4885.03 5186,-4984.65 5223.42,-5020.5 5177.84,-5407.14 5206,-5450.65 5310.01,-5611.33 5490,-5481.06 5591,-5643.65 5638.21,-5719.65 5571.9,-12015.16 5627,-12085.65 5627.48,-12086.27 5627.98,-12086.87 5628.48,-12087.46"/>
<polygon fill="blue" stroke="blue" points="5626.06,-12089.99 5635.66,-12094.46 5630.95,-12084.98 5626.06,-12089.99"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge522" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4749.56,-5677.65C4824.76,-5677.65 4927.42,-5677.65 4981.74,-5677.65"/>
<polygon fill="blue" stroke="blue" points="4981.94,-5681.15 4991.94,-5677.65 4981.94,-5674.15 4981.94,-5681.15"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge523" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4749.65,-5692.39C4784.7,-5697.34 4825.1,-5702.22 4862,-5704.65 5005.69,-5714.12 5043.04,-5721.94 5186,-5704.65 5202.97,-5702.6 5221.11,-5698.82 5237.66,-5694.74"/>
<polygon fill="blue" stroke="blue" points="5238.91,-5698.03 5247.73,-5692.16 5237.17,-5691.25 5238.91,-5698.03"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge763" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5346.12,-5671.32C5420.47,-5662.75 5558.17,-5652.1 5591,-5685.65 5653.17,-5749.18 5572.25,-12015.62 5627,-12085.65 5627.48,-12086.27 5627.98,-12086.87 5628.48,-12087.46"/>
<polygon fill="blue" stroke="blue" points="5626.06,-12089.99 5635.66,-12094.46 5630.95,-12084.98 5626.06,-12089.99"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="edge762" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5346.2,-5686.61C5377.42,-5692.41 5418.08,-5699.96 5450.1,-5705.91"/>
<polygon fill="blue" stroke="blue" points="5449.7,-5709.4 5460.17,-5707.78 5450.97,-5702.52 5449.7,-5709.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node189"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1887.5,-8356.65 1812.5,-8356.65 1812.5,-8320.65 1887.5,-8320.65 1887.5,-8356.65"/>
<text text-anchor="middle" x="1850" y="-8334.95" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node193"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2629,-9253.65 2575,-9253.65 2575,-9217.65 2629,-9217.65 2629,-9253.65"/>
<text text-anchor="middle" x="2602" y="-9231.95" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1887.53,-8343.64C1983.53,-8356.76 2235.63,-8391.24 2236,-8391.65 2296.85,-8459.08 2201.26,-9142.97 2264,-9208.65 2342.48,-9290.8 2494.94,-9264.16 2564.64,-9246.28"/>
<polygon fill="blue" stroke="blue" points="2565.94,-9249.55 2574.7,-9243.61 2564.14,-9242.79 2565.94,-9249.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node194"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2629,-9199.65 2575,-9199.65 2575,-9163.65 2629,-9163.65 2629,-9199.65"/>
<text text-anchor="middle" x="2602" y="-9177.95" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1887.57,-8334.95C1974.26,-8327.05 2188.53,-8313.01 2236,-8361.65 2297.35,-8424.51 2203.57,-9087.91 2264,-9151.65 2304.24,-9194.09 2485.79,-9188.66 2564.46,-9184.15"/>
<polygon fill="blue" stroke="blue" points="2565.08,-9187.62 2574.85,-9183.53 2564.66,-9180.63 2565.08,-9187.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node195"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="2181,-1649.65 2053,-1649.65 2053,-1613.65 2181,-1613.65 2181,-1649.65"/>
<text text-anchor="middle" x="2117" y="-1627.95" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1851.13,-8320.57C1853.81,-7944.76 1899,-1834.01 1998,-1684.65 2008.72,-1668.47 2025.66,-1657.18 2043.39,-1649.31"/>
<polygon fill="blue" stroke="blue" points="2044.77,-1652.53 2052.7,-1645.5 2042.12,-1646.05 2044.77,-1652.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node190"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="2180,-8439.65 2054,-8439.65 2054,-8403.65 2180,-8403.65 2180,-8439.65"/>
<text text-anchor="middle" x="2117" y="-8417.95" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node191"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="2688,-8439.65 2516,-8439.65 2516,-8403.65 2688,-8403.65 2688,-8439.65"/>
<text text-anchor="middle" x="2602" y="-8417.95" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.16,-8421.65C2262.71,-8421.65 2409.34,-8421.65 2505.87,-8421.65"/>
<polygon fill="blue" stroke="blue" points="2505.92,-8425.15 2515.92,-8421.65 2505.92,-8418.15 2505.92,-8425.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.19,-8409.72C2763.22,-8404.44 2869.93,-8410.53 2932,-8474.65 3000.25,-8545.16 2889.36,-8625.54 2960,-8693.65 3019.92,-8751.42 3121.69,-8747.28 3189.13,-8736.21"/>
<polygon fill="blue" stroke="blue" points="3189.98,-8739.62 3199.23,-8734.46 3188.78,-8732.72 3189.98,-8739.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.33,-8426.64C2756.06,-8432.66 2852.29,-8445.85 2932,-8474.65 3048.37,-8516.69 3169.87,-8601.16 3225.64,-8642.6"/>
<polygon fill="blue" stroke="blue" points="3223.59,-8645.44 3233.69,-8648.63 3227.79,-8639.84 3223.59,-8645.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node192"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="1883,-8439.65 1817,-8439.65 1817,-8403.65 1883,-8403.65 1883,-8439.65"/>
<text text-anchor="middle" x="1850" y="-8417.95" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1883.23,-8421.65C1922.8,-8421.65 1991.1,-8421.65 2043.52,-8421.65"/>
<polygon fill="blue" stroke="blue" points="2043.78,-8425.15 2053.78,-8421.65 2043.78,-8418.15 2043.78,-8425.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.33,-9243.33C2691.77,-9259.77 2849.76,-9290.53 2932,-9208.65 2983.21,-9157.66 2909.01,-8935.87 2960,-8884.65 3029.03,-8815.31 3157.99,-8833.63 3220.78,-8847.98"/>
<polygon fill="blue" stroke="blue" points="3220.1,-8851.41 3230.63,-8850.32 3221.72,-8844.6 3220.1,-8851.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.39,-9243.4C2691.98,-9259.98 2850.26,-9291.04 2932,-9208.65 2991.32,-9148.85 2900.94,-8890.71 2960,-8830.65 3028.61,-8760.89 3157.77,-8779.41 3220.7,-8793.89"/>
<polygon fill="blue" stroke="blue" points="3220.03,-8797.33 3230.57,-8796.25 3221.66,-8790.52 3220.03,-8797.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.28,-9243.61C2692.32,-9260.9 2852.77,-9293.84 2932,-9208.65 2960.08,-9178.45 2951.58,-6280.02 2960,-6239.65 3017.85,-5962.27 3187.86,-5658.03 3240.96,-5567.47"/>
<polygon fill="blue" stroke="blue" points="3244.09,-5569.07 3246.15,-5558.67 3238.06,-5565.51 3244.09,-5569.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node264"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="3345,-7786.65 3171,-7786.65 3171,-7750.65 3345,-7750.65 3345,-7786.65"/>
<text text-anchor="middle" x="3258" y="-7764.95" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.06,-9243.41C2691.63,-9260.25 2851.1,-9292.26 2932,-9208.65 2976.25,-9162.92 2948.03,-8699.15 2960,-8636.65 3025.69,-8293.79 3196.6,-7901.76 3244.41,-7796.08"/>
<polygon fill="blue" stroke="blue" points="3247.7,-7797.31 3248.65,-7786.75 3241.32,-7794.41 3247.7,-7797.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge531" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.27,-9188.95C2691.58,-9204.51 2849.32,-9233.22 2932,-9151.65 2974.47,-9109.75 2917.52,-8926.54 2960,-8884.65 3029.66,-8815.94 3158.32,-8833.96 3220.91,-8848.11"/>
<polygon fill="blue" stroke="blue" points="3220.2,-8851.53 3230.73,-8850.42 3221.8,-8844.72 3220.2,-8851.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge530" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.36,-9189.05C2691.88,-9204.82 2850.04,-9233.94 2932,-9151.65 2982.53,-9100.92 2909.46,-8881.37 2960,-8830.65 3029.06,-8761.34 3158.01,-8779.65 3220.79,-8793.98"/>
<polygon fill="blue" stroke="blue" points="3220.1,-8797.41 3230.64,-8796.32 3221.72,-8790.6 3220.1,-8797.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge529" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.1,-9183.51C2699.65,-9187.9 2891.57,-9195.51 2932,-9151.65 2959.41,-9121.91 2951.74,-6279.24 2960,-6239.65 3017.87,-5962.28 3187.87,-5658.03 3240.96,-5567.47"/>
<polygon fill="blue" stroke="blue" points="3244.09,-5569.07 3246.15,-5558.67 3238.06,-5565.51 3244.09,-5569.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge528" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.08,-9189.1C2691.67,-9205.22 2851.19,-9235.47 2932,-9151.65 2971.77,-9110.39 2949.06,-8692.9 2960,-8636.65 3026.61,-8293.97 3196.87,-7901.81 3244.47,-7796.09"/>
<polygon fill="blue" stroke="blue" points="3247.76,-7797.32 3248.69,-7786.76 3241.38,-7794.43 3247.76,-7797.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node196"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="2689,-1649.65 2515,-1649.65 2515,-1613.65 2689,-1613.65 2689,-1649.65"/>
<text text-anchor="middle" x="2602" y="-1627.95" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.14,-1631.65C2263.51,-1631.65 2408.41,-1631.65 2504.56,-1631.65"/>
<polygon fill="blue" stroke="blue" points="2504.58,-1635.15 2514.58,-1631.65 2504.58,-1628.15 2504.58,-1635.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge870" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.33,-1618.08C2765.66,-1611.54 2873.7,-1616.7 2932,-1684.65 3002.71,-1767.06 2885.42,-5514.73 2960,-5593.65 3051.15,-5690.11 3464.37,-5535.65 3556,-5631.65 3578.5,-5655.22 3566.64,-6773.44 3576,-6804.65 3671.76,-7123.87 3878.14,-7119.69 3978,-7437.65 3993.56,-7487.2 3961.6,-7867.6 3998,-7904.65 4070.08,-7978.02 4384.66,-7862.63 4460,-7932.65 4569.28,-8034.2 4642.52,-9166.21 4654.32,-9360.39"/>
<polygon fill="blue" stroke="blue" points="4650.84,-9360.85 4654.94,-9370.62 4657.83,-9360.43 4650.84,-9360.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge871" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.32,-1618.08C2765.66,-1611.54 2873.7,-1616.71 2932,-1684.65 3001.21,-1765.31 2888.44,-5432.07 2960,-5510.65 3010.45,-5566.05 3098.65,-5568.44 3165.86,-5560.03"/>
<polygon fill="blue" stroke="blue" points="3166.6,-5563.46 3176.04,-5558.66 3165.66,-5556.53 3166.6,-5563.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3316.74,-8712.04C3385.02,-8705.5 3496.86,-8706.91 3556,-8773.65 3608.55,-8832.95 3522.2,-9071.48 3576,-9129.65 3607.38,-9163.59 3659.53,-9169.72 3702.71,-9167.69"/>
<polygon fill="blue" stroke="blue" points="3703.15,-9171.17 3712.91,-9167.05 3702.71,-9164.18 3703.15,-9171.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3267.24,-8648.39C3306.84,-8559.69 3478.99,-8164.14 3556,-7821.65 3565.36,-7780.01 3544.29,-7659.21 3576,-7630.65 3609.19,-7600.76 3946.19,-7599.29 3978,-7630.65 4032.92,-7684.79 3946.7,-8961.07 3998,-9018.65 4046.12,-9072.66 4139.94,-9065.65 4191.65,-9056.65"/>
<polygon fill="blue" stroke="blue" points="4192.51,-9060.05 4201.71,-9054.79 4191.23,-9053.17 4192.51,-9060.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node199"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="2716,-1539.65 2488,-1539.65 2488,-1503.65 2716,-1503.65 2716,-1539.65"/>
<text text-anchor="middle" x="2602" y="-1517.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.17,-1526.32C2840.15,-1531.44 3037.15,-1539.57 3156.06,-1544.48"/>
<polygon fill="blue" stroke="blue" points="3156.12,-1547.99 3166.25,-1544.9 3156.41,-1540.99 3156.12,-1547.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.17,-1516.98C2841.93,-1511.79 3042.81,-1503.49 3161.12,-1498.61"/>
<polygon fill="blue" stroke="blue" points="3161.4,-1502.1 3171.25,-1498.19 3161.12,-1495.11 3161.4,-1502.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3292.63,-1566.79C3358.03,-1604.23 3500.78,-1697.12 3556,-1821.65 3586.99,-1891.53 3540.93,-4505.72 3576,-4573.65 3677.06,-4769.41 3867.86,-4672.85 3978,-4863.65 4000,-4901.76 3967.69,-5028.75 3998,-5060.65 4141.08,-5211.27 4321.94,-4976.42 4460,-5131.65 4518.3,-5197.2 4431.7,-5853.38 4488,-5920.65 4586.63,-6038.51 4728.85,-5874.56 4826,-5993.65 4886.44,-6067.74 4802.26,-9361 4862,-9435.65 4865.92,-9440.55 4870.36,-9444.88 4875.2,-9448.7"/>
<polygon fill="blue" stroke="blue" points="4873.49,-9451.77 4883.69,-9454.65 4877.51,-9446.04 4873.49,-9451.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge627" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.19,-1476.63C3402.68,-1465.19 3501.23,-1462.11 3556,-1521.65 3581.97,-1549.88 3563.99,-4247.22 3576,-4283.65 3670.99,-4571.9 3865.63,-4553.72 3978,-4835.65 4003.56,-4899.76 3952.02,-4938.17 3998,-4989.65 4138.88,-5147.39 4326.64,-4939.5 4460,-5103.65 4514.96,-5171.3 4428.76,-5823.71 4488,-5887.65 4590.74,-5998.54 4722.18,-5815.78 4826,-5925.65 4857.5,-5958.99 5002.35,-9051.24 5017.69,-9380.37"/>
<polygon fill="blue" stroke="blue" points="5014.2,-9380.68 5018.16,-9390.51 5021.19,-9380.36 5014.2,-9380.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.07,-9057.37C4300.83,-9073.16 4393.88,-9109.66 4460,-9160.65 4537.89,-9220.72 4607.31,-9315.89 4638.53,-9361.94"/>
<polygon fill="blue" stroke="blue" points="4635.77,-9364.12 4644.25,-9370.47 4641.58,-9360.22 4635.77,-9364.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.2,-9151.96C3993,-9142.14 4372.13,-9126.7 4460,-9209.65 4527.19,-9273.08 4423.46,-9349.53 4488,-9415.65 4512.12,-9440.36 4549.25,-9448.14 4582.47,-9449.29"/>
<polygon fill="blue" stroke="blue" points="4582.58,-9452.79 4592.64,-9449.44 4582.69,-9445.79 4582.58,-9452.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="3948,-9120.65 3606,-9120.65 3606,-9084.65 3948,-9084.65 3948,-9120.65"/>
<text text-anchor="middle" x="3777" y="-9098.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3928.16,-9084.63C4021.75,-9073.4 4134.86,-9059.83 4191.68,-9053.01"/>
<polygon fill="blue" stroke="blue" points="4192.1,-9056.48 4201.61,-9051.82 4191.27,-9049.53 4192.1,-9056.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node205"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="3893.5,-9066.65 3660.5,-9066.65 3660.5,-9030.65 3893.5,-9030.65 3893.5,-9066.65"/>
<text text-anchor="middle" x="3777" y="-9044.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge569" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3893.59,-9048.65C3992.06,-9048.65 4127.48,-9048.65 4191.56,-9048.65"/>
<polygon fill="blue" stroke="blue" points="4191.95,-9052.15 4201.95,-9048.65 4191.95,-9045.15 4191.95,-9052.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node206"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="4264.5,-8922.65 4193.5,-8922.65 4193.5,-8886.65 4264.5,-8886.65 4264.5,-8922.65"/>
<text text-anchor="middle" x="4229" y="-8900.95" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge537" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4264.9,-8901.25C4316.45,-8898.39 4412,-8901.75 4460,-8958.65 4525.6,-9036.42 4419.67,-9340.26 4488,-9415.65 4511.37,-9441.44 4548.81,-9449.21 4582.42,-9450.08"/>
<polygon fill="blue" stroke="blue" points="4582.69,-9453.59 4592.71,-9450.15 4582.73,-9446.59 4582.69,-9453.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge672" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3346.12,-8916.2C3457.31,-8922.01 3645.5,-8931.84 3731.15,-8936.31"/>
<polygon fill="blue" stroke="blue" points="3731.15,-8939.81 3741.32,-8936.84 3731.51,-8932.82 3731.15,-8939.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge737" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3812.69,-8937.2C3938.8,-8932.73 4370.27,-8924.66 4460,-9018.65 4521.07,-9082.62 4428.3,-9350.39 4488,-9415.65 4511.49,-9441.33 4548.94,-9449.09 4582.53,-9449.99"/>
<polygon fill="blue" stroke="blue" points="4582.78,-9453.49 4592.81,-9450.06 4582.83,-9446.49 4582.78,-9453.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge736" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3812.56,-8936.04C3893.14,-8929.95 4093.39,-8914.82 4183.19,-8908.04"/>
<polygon fill="blue" stroke="blue" points="4183.61,-8911.51 4193.32,-8907.27 4183.08,-8904.53 4183.61,-8911.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge758" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.3,-8865.23C3343.9,-8880.33 3485.54,-8906.53 3556,-8830.65 3601.37,-8781.79 3528.46,-7677.4 3576,-7630.65 3703.38,-7505.37 3848.01,-7508.08 3978,-7630.65 4005.53,-7656.61 3988.09,-7934.13 3998,-7970.65 4116.46,-8407.26 4276.07,-8464.33 4460,-8877.65 4540.41,-9058.35 4619.64,-9283.04 4646.45,-9360.71"/>
<polygon fill="blue" stroke="blue" points="4643.17,-9361.95 4649.74,-9370.27 4649.79,-9359.67 4643.17,-9361.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node210"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="3349,-8983.65 3167,-8983.65 3167,-8947.65 3349,-8947.65 3349,-8983.65"/>
<text text-anchor="middle" x="3258" y="-8961.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge801" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.05,-8960.95C3460.7,-8955.12 3646.59,-8945.41 3731.38,-8940.98"/>
<polygon fill="blue" stroke="blue" points="3731.65,-8944.47 3741.45,-8940.45 3731.28,-8937.48 3731.65,-8944.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge814" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.35,-8810.93C3344.04,-8825.35 3485.87,-8849.97 3556,-8773.65 3602.58,-8722.96 3526.93,-7582.93 3576,-7534.65 3703.35,-7409.34 3848.53,-7411.53 3978,-7534.65 4010.09,-7565.16 3967.19,-7900.85 3998,-7932.65 4069.67,-8006.64 4385.17,-7899.85 4460,-7970.65 4565.48,-8070.45 4641.72,-9169.88 4654.2,-9360.55"/>
<polygon fill="blue" stroke="blue" points="4650.71,-9360.86 4654.85,-9370.61 4657.7,-9360.41 4650.71,-9360.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3347,-5541.5C3415.92,-5547.36 3507.92,-5567.78 3556,-5631.65 3595.2,-5683.72 3555.72,-6742.71 3576,-6804.65 3672.25,-7098.56 3878.74,-7079.74 3978,-7372.65 4015.97,-7484.7 3967.23,-7790.42 3998,-7904.65 4111.76,-8327.01 4344.97,-8351.64 4460,-8773.65 4478.78,-8842.54 4440.52,-9362.33 4488,-9415.65 4511.23,-9441.74 4548.86,-9449.49 4582.61,-9450.27"/>
<polygon fill="blue" stroke="blue" points="4582.93,-9453.77 4592.94,-9450.3 4582.96,-9446.77 4582.93,-9453.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node213"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="4268.5,-7869.65 4189.5,-7869.65 4189.5,-7833.65 4268.5,-7833.65 4268.5,-7869.65"/>
<text text-anchor="middle" x="4229" y="-7847.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge641" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.69,-7848.33C4320.45,-7846.22 4411.35,-7851.13 4460,-7904.65 4562.3,-8017.18 4641.39,-9164.61 4654.18,-9360.34"/>
<polygon fill="blue" stroke="blue" points="4650.7,-9360.65 4654.84,-9370.4 4657.68,-9360.2 4650.7,-9360.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node214"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="2680,-8576.65 2524,-8576.65 2524,-8540.65 2680,-8540.65 2680,-8576.65"/>
<text text-anchor="middle" x="2602" y="-8554.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.27,-8541.86C2753.63,-8530.73 2862.71,-8527.35 2932,-8585.65 2969.94,-8617.58 2922.2,-8661.56 2960,-8693.65 3023.07,-8747.2 3123.12,-8744.41 3189.42,-8734.76"/>
<polygon fill="blue" stroke="blue" points="3190,-8738.21 3199.35,-8733.23 3188.93,-8731.3 3190,-8738.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.21,-8561.44C2747.16,-8564.71 2846.47,-8571.58 2932,-8585.65 3022.32,-8600.51 3124.45,-8627.72 3189.72,-8646.48"/>
<polygon fill="blue" stroke="blue" points="3188.89,-8649.88 3199.47,-8649.3 3190.84,-8643.16 3188.89,-8649.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node215"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="2677,-9116.65 2527,-9116.65 2527,-9080.65 2677,-9080.65 2677,-9116.65"/>
<text text-anchor="middle" x="2602" y="-9094.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.1,-9116.67C2751.05,-9130.35 2865.76,-9137.11 2932,-9071.65 2979.31,-9024.9 2914.96,-8822.59 2960,-8773.65 3017.35,-8711.33 3120.75,-8706.59 3189.14,-8711.56"/>
<polygon fill="blue" stroke="blue" points="3189.13,-8715.07 3199.38,-8712.39 3189.7,-8708.09 3189.13,-8715.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2674.97,-9116.68C2750.11,-9130.73 2866.01,-9138.17 2932,-9071.65 2991.32,-9011.85 2900.94,-8753.71 2960,-8693.65 3018.53,-8634.13 3121.13,-8638.87 3189.09,-8650.54"/>
<polygon fill="blue" stroke="blue" points="3188.8,-8654.05 3199.27,-8652.38 3190.05,-8647.16 3188.8,-8654.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node216"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="2699,-9062.65 2505,-9062.65 2505,-9026.65 2699,-9026.65 2699,-9062.65"/>
<text text-anchor="middle" x="2602" y="-9040.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.56,-9062.71C2752.32,-9075.94 2865.61,-9081.93 2932,-9017.65 3010.42,-8941.72 2885.26,-8853.2 2960,-8773.65 3017.91,-8712.02 3120.91,-8707.05 3189.1,-8711.78"/>
<polygon fill="blue" stroke="blue" points="3189.07,-8715.29 3199.31,-8712.58 3189.61,-8708.31 3189.07,-8715.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2699.07,-9049.92C2784.34,-9052.34 2900.22,-9049.29 2932,-9017.65 2983.21,-8966.66 2909.01,-8744.87 2960,-8693.65 3018.89,-8634.49 3121.4,-8639.14 3189.23,-8650.69"/>
<polygon fill="blue" stroke="blue" points="3188.93,-8654.19 3199.4,-8652.51 3190.17,-8647.3 3188.93,-8654.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node217"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="2833.5,-8630.65 2370.5,-8630.65 2370.5,-8594.65 2833.5,-8594.65 2833.5,-8630.65"/>
<text text-anchor="middle" x="2602" y="-8608.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.77,-8601.99C2868.7,-8608.52 2902.78,-8620.2 2932,-8639.65 2954.51,-8654.63 2937.56,-8678.57 2960,-8693.65 3027.82,-8739.21 3124.89,-8738.86 3189.37,-8731.89"/>
<polygon fill="blue" stroke="blue" points="3189.9,-8735.35 3199.43,-8730.72 3189.09,-8728.4 3189.9,-8735.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2822.89,-8630.67C2859.33,-8633.66 2896.73,-8636.74 2932,-8639.65 3020.91,-8646.99 3123.5,-8655.52 3189.24,-8661"/>
<polygon fill="blue" stroke="blue" points="3189.21,-8664.51 3199.47,-8661.85 3189.79,-8657.54 3189.21,-8664.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.59,-8594.61C2754.03,-8582.02 2865.34,-8577.1 2932,-8639.65 2994.57,-8698.36 2897.69,-8771.67 2960,-8830.65 3030.91,-8897.77 3158.53,-8880.65 3220.82,-8866.98"/>
<polygon fill="blue" stroke="blue" points="3221.98,-8870.31 3230.95,-8864.66 3220.42,-8863.48 3221.98,-8870.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.06,-8594.65C2757.82,-8583.38 2865.09,-8580.57 2932,-8639.65 2977.61,-8679.92 2914.77,-8732.95 2960,-8773.65 3032.47,-8838.86 3158.81,-8824.43 3220.71,-8812.2"/>
<polygon fill="blue" stroke="blue" points="3221.7,-8815.57 3230.79,-8810.11 3220.28,-8808.71 3221.7,-8815.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.53,-8615.69C2878.38,-8611.34 2916.37,-8602.42 2932,-8585.65 2976.44,-8537.98 2946.61,-6303.43 2960,-6239.65 3018.2,-5962.34 3187.97,-5658.05 3240.99,-5567.48"/>
<polygon fill="blue" stroke="blue" points="3244.11,-5569.07 3246.17,-5558.68 3238.08,-5565.52 3244.11,-5569.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2707.36,-8630.68C2777.46,-8636.88 2868.31,-8632.78 2932,-8585.65 3204.8,-8383.79 3248.89,-7916.41 3255.77,-7796.89"/>
<polygon fill="blue" stroke="blue" points="3259.27,-7796.9 3256.31,-7786.73 3252.28,-7796.53 3259.27,-7796.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node218"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2706.5,-8954.65 2497.5,-8954.65 2497.5,-8918.65 2706.5,-8918.65 2706.5,-8954.65"/>
<text text-anchor="middle" x="2602" y="-8932.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.1,-8954.7C2757.89,-8965.99 2865.18,-8968.83 2932,-8909.65 2978.2,-8868.74 2915.79,-8816.71 2960,-8773.65 3020.32,-8714.91 3121.99,-8709.04 3189.3,-8712.81"/>
<polygon fill="blue" stroke="blue" points="3189.18,-8716.3 3199.38,-8713.46 3189.63,-8709.32 3189.18,-8716.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.41,-8954.69C2753.03,-8967.64 2865.45,-8973.14 2932,-8909.65 3002.04,-8842.83 2890.25,-8760.78 2960,-8693.65 3019.97,-8635.94 3121.73,-8640.06 3189.15,-8651.11"/>
<polygon fill="blue" stroke="blue" points="3188.8,-8654.6 3199.25,-8652.86 3190,-8647.71 3188.8,-8654.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node219"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="2689.5,-8900.65 2514.5,-8900.65 2514.5,-8864.65 2689.5,-8864.65 2689.5,-8900.65"/>
<text text-anchor="middle" x="2602" y="-8878.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.55,-8899.64C2761.87,-8908.67 2863.84,-8908.74 2932,-8855.65 2962.38,-8831.98 2930.77,-8798.73 2960,-8773.65 3023.29,-8719.34 3122.75,-8712.09 3188.9,-8714.36"/>
<polygon fill="blue" stroke="blue" points="3189.08,-8717.87 3199.22,-8714.8 3189.38,-8710.88 3189.08,-8717.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.35,-8900.67C2755.52,-8912.72 2865.18,-8916.76 2932,-8855.65 2985.92,-8806.34 2906.3,-8743.2 2960,-8693.65 3021.08,-8637.3 3122.32,-8641 3189.35,-8651.6"/>
<polygon fill="blue" stroke="blue" points="3188.96,-8655.08 3199.4,-8653.28 3190.11,-8648.17 3188.96,-8655.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node220"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="2692,-8522.65 2512,-8522.65 2512,-8486.65 2692,-8486.65 2692,-8522.65"/>
<text text-anchor="middle" x="2602" y="-8500.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge590" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.16,-8504.5C2759.03,-8506.18 2852.35,-8512.35 2932,-8531.65 3037.9,-8557.32 3153.98,-8612.74 3214.66,-8644.01"/>
<polygon fill="blue" stroke="blue" points="3213.07,-8647.12 3223.56,-8648.62 3216.29,-8640.91 3213.07,-8647.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node221"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2712,-8792.65 2492,-8792.65 2492,-8756.65 2712,-8756.65 2712,-8792.65"/>
<text text-anchor="middle" x="2602" y="-8770.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge648" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.29,-8765.71C2776.32,-8760.46 2858.75,-8753.7 2932,-8747.65 3020.91,-8740.31 3123.5,-8731.78 3189.24,-8726.3"/>
<polygon fill="blue" stroke="blue" points="3189.79,-8729.77 3199.47,-8725.45 3189.21,-8722.79 3189.79,-8729.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge649" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.38,-8791.09C2780.92,-8795.6 2868.07,-8790.2 2932,-8747.65 2954.51,-8732.67 2937.56,-8708.73 2960,-8693.65 3027.82,-8648.09 3124.89,-8648.44 3189.37,-8655.41"/>
<polygon fill="blue" stroke="blue" points="3189.09,-8658.9 3199.43,-8656.58 3189.9,-8651.95 3189.09,-8658.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node222"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="2690,-9008.65 2514,-9008.65 2514,-8972.65 2690,-8972.65 2690,-9008.65"/>
<text text-anchor="middle" x="2602" y="-8986.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge652" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.58,-9008.68C2754.01,-9021.27 2865.32,-9026.17 2932,-8963.65 2994.27,-8905.27 2900.56,-8834.91 2960,-8773.65 3018.8,-8713.04 3121.34,-8707.75 3189.2,-8712.14"/>
<polygon fill="blue" stroke="blue" points="3189.13,-8715.65 3199.36,-8712.89 3189.65,-8708.67 3189.13,-8715.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge651" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.66,-9008.67C2751.53,-9022.15 2865.65,-9028.59 2932,-8963.65 2975.11,-8921.46 2917.08,-8736.03 2960,-8693.65 3019.31,-8635.09 3121.48,-8639.5 3189.14,-8650.85"/>
<polygon fill="blue" stroke="blue" points="3188.82,-8654.34 3199.28,-8652.64 3190.04,-8647.45 3188.82,-8654.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node223"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="2684,-8684.65 2520,-8684.65 2520,-8648.65 2684,-8648.65 2684,-8684.65"/>
<text text-anchor="middle" x="2602" y="-8662.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge713" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.12,-8673.29C2750.72,-8678.74 2847.47,-8686.67 2932,-8693.65 3020.91,-8700.99 3123.5,-8709.52 3189.24,-8715"/>
<polygon fill="blue" stroke="blue" points="3189.21,-8718.51 3199.47,-8715.85 3189.79,-8711.54 3189.21,-8718.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge714" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.18,-8666.65C2814.48,-8666.65 3067.93,-8666.65 3189.19,-8666.65"/>
<polygon fill="blue" stroke="blue" points="3189.45,-8670.15 3199.45,-8666.65 3189.45,-8663.15 3189.45,-8670.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge710" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.77,-8648.64C2757.57,-8637.28 2865.11,-8634.33 2932,-8693.65 2978.5,-8734.89 2913.69,-8789.21 2960,-8830.65 3032.58,-8895.6 3158.87,-8879.67 3220.74,-8866.66"/>
<polygon fill="blue" stroke="blue" points="3221.79,-8870.01 3230.8,-8864.45 3220.29,-8863.18 3221.79,-8870.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge712" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.11,-8650.48C2756.61,-8640.88 2861.94,-8639.5 2932,-8693.65 2961.81,-8716.69 2930.41,-8750.33 2960,-8773.65 3036.19,-8833.69 3159.73,-8821.97 3220.66,-8811.33"/>
<polygon fill="blue" stroke="blue" points="3221.38,-8814.76 3230.58,-8809.51 3220.12,-8807.87 3221.38,-8814.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge709" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.37,-8671.89C2770.86,-8675.47 2899.57,-8674.45 2932,-8639.65 2977.46,-8590.88 2946.32,-6304.9 2960,-6239.65 3018.16,-5962.34 3187.96,-5658.05 3240.99,-5567.48"/>
<polygon fill="blue" stroke="blue" points="3244.11,-5569.07 3246.17,-5558.68 3238.08,-5565.52 3244.11,-5569.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge711" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.2,-8682.53C2756.52,-8691.86 2861.51,-8692.99 2932,-8639.65 3219.35,-8422.22 3252.68,-7921.57 3256.51,-7797.07"/>
<polygon fill="blue" stroke="blue" points="3260.02,-7796.94 3256.78,-7786.85 3253.02,-7796.75 3260.02,-7796.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node224"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="2662.5,-8846.65 2541.5,-8846.65 2541.5,-8810.65 2662.5,-8810.65 2662.5,-8846.65"/>
<text text-anchor="middle" x="2602" y="-8824.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge760" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.54,-8835.66C2730.93,-8841.1 2844.89,-8841.99 2932,-8801.65 2947.97,-8794.26 2944.4,-8781.79 2960,-8773.65 3032.25,-8735.95 3126.38,-8724.5 3189.11,-8721.31"/>
<polygon fill="blue" stroke="blue" points="3189.45,-8724.8 3199.29,-8720.86 3189.14,-8717.81 3189.45,-8724.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge761" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.61,-8842.51C2735.05,-8855.57 2856.9,-8864.84 2932,-8801.65 2969.94,-8769.72 2922.2,-8725.74 2960,-8693.65 3023.07,-8640.11 3123.12,-8642.89 3189.42,-8652.54"/>
<polygon fill="blue" stroke="blue" points="3188.93,-8656.01 3199.35,-8654.07 3190,-8649.09 3188.93,-8656.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node225"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2745,-8738.65 2459,-8738.65 2459,-8702.65 2745,-8702.65 2745,-8738.65"/>
<text text-anchor="middle" x="2602" y="-8716.95" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge808" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.31,-8720.65C2882.77,-8720.65 3085.02,-8720.65 3189.3,-8720.65"/>
<polygon fill="blue" stroke="blue" points="3189.39,-8724.15 3199.39,-8720.65 3189.39,-8717.15 3189.39,-8724.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge806" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.1,-8709.02C2803.07,-8704.27 2870.74,-8698.71 2932,-8693.65 3020.91,-8686.31 3123.5,-8677.78 3189.24,-8672.3"/>
<polygon fill="blue" stroke="blue" points="3189.79,-8675.77 3199.47,-8671.45 3189.21,-8668.79 3189.79,-8675.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge805" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2697.63,-8702.65C2769.35,-8694.59 2866.43,-8696.37 2932,-8747.65 2962.67,-8771.63 2929.44,-8806.53 2960,-8830.65 3036.27,-8890.83 3160.3,-8877.3 3221.1,-8865.78"/>
<polygon fill="blue" stroke="blue" points="3221.86,-8869.19 3230.99,-8863.81 3220.5,-8862.33 3221.86,-8869.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge807" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.27,-8712.16C2805.14,-8713.63 2874.18,-8722.17 2932,-8747.65 2947.54,-8754.5 2944.53,-8766.66 2960,-8773.65 3047.14,-8813.04 3162.96,-8811.23 3220.84,-8807.15"/>
<polygon fill="blue" stroke="blue" points="3221.26,-8810.63 3230.96,-8806.37 3220.72,-8803.65 3221.26,-8810.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge809" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.19,-8727.27C2822.16,-8727.44 2906.6,-8720.9 2932,-8693.65 2978.48,-8643.78 2946.02,-6306.37 2960,-6239.65 3018.12,-5962.33 3187.95,-5658.04 3240.98,-5567.48"/>
<polygon fill="blue" stroke="blue" points="3244.11,-5569.07 3246.17,-5558.68 3238.08,-5565.52 3244.11,-5569.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge810" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2699.68,-8738.67C2771.07,-8746.31 2866.79,-8743.99 2932,-8693.65 2951.3,-8678.75 3196.63,-7948.86 3247.72,-7796.38"/>
<polygon fill="blue" stroke="blue" points="3251.07,-7797.4 3250.93,-7786.81 3244.43,-7795.18 3251.07,-7797.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node226"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2676.5,-9714.65 2527.5,-9714.65 2527.5,-9678.65 2676.5,-9678.65 2676.5,-9714.65"/>
<text text-anchor="middle" x="2602" y="-9692.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.52,-9701.4C2762.7,-9705.2 2898.12,-9705.05 2932,-9669.65 2988.21,-9610.94 2904.05,-8997.61 2960,-8938.65 3012.29,-8883.55 3102.2,-8882.74 3169.43,-8892.09"/>
<polygon fill="blue" stroke="blue" points="3169.19,-8895.59 3179.59,-8893.6 3170.22,-8888.67 3169.19,-8895.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.53,-9701.42C2762.74,-9705.23 2898.16,-9705.09 2932,-9669.65 2992.27,-9606.53 2900.01,-8948.04 2960,-8884.65 3027.43,-8813.41 3157.71,-8832.83 3220.89,-8847.73"/>
<polygon fill="blue" stroke="blue" points="3220.25,-8851.18 3230.8,-8850.16 3221.92,-8844.38 3220.25,-8851.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.55,-9701.43C2762.76,-9705.26 2898.2,-9705.13 2932,-9669.65 2996.34,-9602.12 2895.96,-8898.47 2960,-8830.65 3027.34,-8759.33 3157.67,-8778.79 3220.88,-8793.72"/>
<polygon fill="blue" stroke="blue" points="3220.24,-8797.17 3230.79,-8796.15 3221.91,-8790.37 3220.24,-8797.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.7,-9701.57C2763.06,-9705.54 2898.65,-9705.55 2932,-9669.65 2963.8,-9635.42 2951.21,-6351.54 2960,-6305.65 3018.12,-6002.32 3190.78,-5664.15 3242.32,-5567.66"/>
<polygon fill="blue" stroke="blue" points="3245.41,-5569.3 3247.05,-5558.83 3239.24,-5565.99 3245.41,-5569.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.58,-9701.47C2762.84,-9705.33 2898.31,-9705.23 2932,-9669.65 2971.47,-9627.96 2949.81,-8693.15 2960,-8636.65 3021.94,-8293.1 3195.53,-7901.56 3244.18,-7796.03"/>
<polygon fill="blue" stroke="blue" points="3247.46,-7797.27 3248.49,-7786.72 3241.11,-7794.33 3247.46,-7797.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node227"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="2825.5,-9390.65 2378.5,-9390.65 2378.5,-9354.65 2825.5,-9354.65 2825.5,-9390.65"/>
<text text-anchor="middle" x="2602" y="-9368.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.75,-9375.79C2873.71,-9371.72 2915.11,-9362.9 2932,-9345.65 3003.8,-9272.31 2888.52,-8958.3 2960,-8884.65 3028.31,-8814.26 3158.17,-8833.27 3221.07,-8847.91"/>
<polygon fill="blue" stroke="blue" points="3220.39,-8851.34 3230.93,-8850.29 3222.04,-8844.54 3220.39,-8851.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.82,-9375.87C2873.78,-9371.79 2915.17,-9362.96 2932,-9345.65 3011.92,-9263.5 2880.44,-8913.15 2960,-8830.65 3028.09,-8760.04 3158.06,-8779.15 3221.03,-8793.86"/>
<polygon fill="blue" stroke="blue" points="3220.36,-8797.3 3230.9,-8796.26 3222.01,-8790.5 3220.36,-8797.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.5,-9376.45C2873.82,-9372.41 2915.46,-9363.44 2932,-9345.65 2961.37,-9314.05 2951.2,-6281.88 2960,-6239.65 3017.79,-5962.26 3187.84,-5658.02 3240.96,-5567.47"/>
<polygon fill="blue" stroke="blue" points="3244.08,-5569.06 3246.15,-5558.67 3238.05,-5565.51 3244.08,-5569.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.57,-9376.07C2873.71,-9372.01 2915.25,-9363.13 2932,-9345.65 2959.28,-9317.19 2952.77,-8675.4 2960,-8636.65 3024.07,-8293.49 3196.14,-7901.67 3244.31,-7796.06"/>
<polygon fill="blue" stroke="blue" points="3247.6,-7797.29 3248.58,-7786.74 3241.23,-7794.38 3247.6,-7797.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node228"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="2696.5,-9660.65 2507.5,-9660.65 2507.5,-9624.65 2696.5,-9624.65 2696.5,-9660.65"/>
<text text-anchor="middle" x="2602" y="-9638.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.77,-9648.38C2782.71,-9651.34 2901.13,-9648.87 2932,-9615.65 2994.59,-9548.29 2894.71,-6370.39 2960,-6305.65 3054.05,-6212.4 3461.52,-6212.83 3556,-6305.65 3600.91,-6349.77 3540.54,-7386.64 3576,-7438.65 3684.89,-7598.36 3866.92,-7446.46 3978,-7604.65 4006.25,-7644.88 3990.48,-7998.07 3998,-8046.65 4049.65,-8380.35 4181.2,-8770.89 4218.19,-8876.92"/>
<polygon fill="blue" stroke="blue" points="4214.96,-8878.27 4221.57,-8886.55 4221.56,-8875.96 4214.96,-8878.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.56,-9648.17C2782.33,-9650.98 2900.64,-9648.41 2932,-9615.65 2988.21,-9556.94 2904.05,-8943.61 2960,-8884.65 3027.52,-8813.5 3157.76,-8832.87 3220.91,-8847.75"/>
<polygon fill="blue" stroke="blue" points="3220.27,-8851.2 3230.81,-8850.18 3221.94,-8844.4 3220.27,-8851.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node229"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2667.5,-9822.65 2536.5,-9822.65 2536.5,-9786.65 2667.5,-9786.65 2667.5,-9822.65"/>
<text text-anchor="middle" x="2602" y="-9800.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.58,-9821.29C2742.36,-9836.25 2863.94,-9846.56 2932,-9777.65 2994.93,-9713.94 2912.62,-9451.64 2960,-9375.65 3052.34,-9227.56 3575.4,-9016.18 3731.82,-8955.52"/>
<polygon fill="blue" stroke="blue" points="3733.09,-8958.78 3741.15,-8951.9 3730.56,-8952.25 3733.09,-8958.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.71,-9821.67C2742.9,-9837.1 2865.17,-9847.95 2932,-9777.65 3000.4,-9705.7 2891.92,-8956.9 2960,-8884.65 3027.27,-8813.26 3157.63,-8832.75 3220.86,-8847.7"/>
<polygon fill="blue" stroke="blue" points="3220.23,-8851.15 3230.78,-8850.14 3221.9,-8844.36 3220.23,-8851.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.73,-9821.69C2742.94,-9837.14 2865.23,-9848.01 2932,-9777.65 3004.46,-9701.29 2887.87,-8907.33 2960,-8830.65 3027.21,-8759.2 3157.6,-8778.72 3220.85,-8793.69"/>
<polygon fill="blue" stroke="blue" points="3220.22,-8797.14 3230.77,-8796.13 3221.89,-8790.34 3220.22,-8797.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node230"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="2731,-9768.65 2473,-9768.65 2473,-9732.65 2731,-9732.65 2731,-9768.65"/>
<text text-anchor="middle" x="2602" y="-9746.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.29,-9756.96C2811.56,-9757.84 2904.74,-9752.2 2932,-9723.65 2992.27,-9660.53 2900.01,-9002.04 2960,-8938.65 3012.3,-8883.39 3102.43,-8882.68 3169.71,-8892.09"/>
<polygon fill="blue" stroke="blue" points="3169.48,-8895.6 3179.89,-8893.62 3170.52,-8888.68 3169.48,-8895.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.31,-9756.98C2811.59,-9757.87 2904.77,-9752.23 2932,-9723.65 2996.34,-9656.12 2895.96,-8952.47 2960,-8884.65 3027.34,-8813.33 3157.67,-8832.79 3220.88,-8847.72"/>
<polygon fill="blue" stroke="blue" points="3220.24,-8851.17 3230.79,-8850.15 3221.91,-8844.37 3220.24,-8851.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.33,-9757C2811.62,-9757.9 2904.8,-9752.26 2932,-9723.65 3000.4,-9651.7 2891.92,-8902.9 2960,-8830.65 3027.27,-8759.26 3157.63,-8778.75 3220.86,-8793.7"/>
<polygon fill="blue" stroke="blue" points="3220.23,-8797.15 3230.78,-8796.14 3221.9,-8790.36 3220.23,-8797.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.11,-9757.2C2811.59,-9758.21 2905.09,-9752.62 2932,-9723.65 2964.31,-9688.87 2951.07,-6352.28 2960,-6305.65 3018.1,-6002.32 3190.77,-5664.15 3242.32,-5567.65"/>
<polygon fill="blue" stroke="blue" points="3245.41,-5569.3 3247.05,-5558.83 3239.24,-5565.98 3245.41,-5569.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.38,-9757.05C2811.69,-9757.97 2904.88,-9752.33 2932,-9723.65 2973.5,-9679.75 2949.32,-8696.11 2960,-8636.65 3021.71,-8293.06 3195.46,-7901.54 3244.17,-7796.03"/>
<polygon fill="blue" stroke="blue" points="3247.45,-7797.27 3248.48,-7786.72 3241.1,-7794.32 3247.45,-7797.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node231"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="2841.5,-9498.65 2362.5,-9498.65 2362.5,-9462.65 2841.5,-9462.65 2841.5,-9498.65"/>
<text text-anchor="middle" x="2602" y="-9476.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge621" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.83,-9482.36C2882.86,-9477.75 2917.1,-9469.04 2932,-9453.65 2976.02,-9408.17 2916.18,-8930.33 2960,-8884.65 3027.91,-8813.87 3157.96,-8833.06 3220.99,-8847.83"/>
<polygon fill="blue" stroke="blue" points="3220.33,-8851.27 3230.87,-8850.23 3221.99,-8844.47 3220.33,-8851.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge619" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.88,-9482.41C2882.9,-9477.79 2917.14,-9469.07 2932,-9453.65 2980.08,-9403.76 2912.14,-8880.76 2960,-8830.65 3027.76,-8759.72 3157.89,-8778.99 3220.96,-8793.8"/>
<polygon fill="blue" stroke="blue" points="3220.31,-8797.24 3230.85,-8796.21 3221.97,-8790.44 3220.31,-8797.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge622" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.89,-9482.85C2883.07,-9478.23 2917.37,-9469.39 2932,-9453.65 2962.39,-9420.95 2950.9,-6283.35 2960,-6239.65 3017.75,-5962.25 3187.83,-5658.02 3240.95,-5567.47"/>
<polygon fill="blue" stroke="blue" points="3244.08,-5569.06 3246.15,-5558.67 3238.05,-5565.51 3244.08,-5569.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge620" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.59,-9482.57C2882.79,-9477.96 2917.17,-9469.2 2932,-9453.65 2963.34,-9420.78 2951.78,-8681.32 2960,-8636.65 3023.17,-8293.32 3195.88,-7901.62 3244.26,-7796.05"/>
<polygon fill="blue" stroke="blue" points="3247.54,-7797.28 3248.54,-7786.73 3241.18,-7794.36 3247.54,-7797.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node232"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2747,-9444.65 2457,-9444.65 2457,-9408.65 2747,-9408.65 2747,-9444.65"/>
<text text-anchor="middle" x="2602" y="-9422.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge647" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.43,-9432.87C2823.53,-9432.74 2906.32,-9426.04 2932,-9399.65 3011.92,-9317.5 2880.44,-8967.15 2960,-8884.65 3028.09,-8814.04 3158.06,-8833.15 3221.03,-8847.86"/>
<polygon fill="blue" stroke="blue" points="3220.36,-8851.3 3230.9,-8850.26 3222.01,-8844.5 3220.36,-8851.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge646" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.04,-9432.92C2823.28,-9432.84 2906.34,-9426.16 2932,-9399.65 2976.02,-9354.17 2916.18,-8876.33 2960,-8830.65 3027.91,-8759.87 3157.96,-8779.06 3220.99,-8793.83"/>
<polygon fill="blue" stroke="blue" points="3220.33,-8797.27 3230.87,-8796.23 3221.99,-8790.47 3220.33,-8797.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge644" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.44,-9433.3C2823.81,-9433.34 2906.88,-9426.67 2932,-9399.65 2961.88,-9367.5 2951.05,-6282.62 2960,-6239.65 3017.77,-5962.25 3187.83,-5658.02 3240.96,-5567.47"/>
<polygon fill="blue" stroke="blue" points="3244.08,-5569.06 3246.15,-5558.67 3238.05,-5565.51 3244.08,-5569.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge645" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.16,-9433.04C2823.44,-9432.99 2906.51,-9426.32 2932,-9399.65 2961.31,-9368.99 2952.27,-8678.36 2960,-8636.65 3023.59,-8293.4 3196,-7901.64 3244.28,-7796.05"/>
<polygon fill="blue" stroke="blue" points="3247.57,-7797.29 3248.56,-7786.74 3241.2,-7794.36 3247.57,-7797.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node233"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2729,-9336.65 2475,-9336.65 2475,-9300.65 2729,-9300.65 2729,-9336.65"/>
<text text-anchor="middle" x="2602" y="-9314.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge663" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.11,-9336.67C2753.6,-9349.82 2867.71,-9355.34 2932,-9288.65 3011.55,-9206.14 2884.06,-8859.49 2960,-8773.65 3016.2,-8710.12 3120.14,-8705.76 3188.94,-8711.13"/>
<polygon fill="blue" stroke="blue" points="3188.98,-8714.64 3199.24,-8712.03 3189.58,-8707.67 3188.98,-8714.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge668" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.86,-9336.7C2753.43,-9349.98 2867.86,-9355.67 2932,-9288.65 2977.76,-9240.84 2914.23,-8741.46 2960,-8693.65 3017.81,-8633.26 3120.84,-8638.31 3189.06,-8650.27"/>
<polygon fill="blue" stroke="blue" points="3188.8,-8653.78 3199.27,-8652.16 3190.08,-8646.9 3188.8,-8653.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge665" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.32,-9336.71C2754.65,-9349.53 2867.62,-9354.45 2932,-9288.65 2994.94,-9224.33 2897.05,-8948.96 2960,-8884.65 3028.61,-8814.55 3158.33,-8833.42 3221.14,-8847.96"/>
<polygon fill="blue" stroke="blue" points="3220.44,-8851.4 3230.98,-8850.34 3222.08,-8844.59 3220.44,-8851.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge666" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.72,-9336.7C2754.14,-9349.7 2867.69,-9354.91 2932,-9288.65 3003.02,-9215.48 2888.97,-8903.81 2960,-8830.65 3028.33,-8760.27 3158.18,-8779.27 3221.08,-8793.91"/>
<polygon fill="blue" stroke="blue" points="3220.39,-8797.34 3230.94,-8796.3 3222.04,-8790.54 3220.39,-8797.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge667" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.42,-9323.95C2810.32,-9324.29 2904.99,-9317.97 2932,-9288.65 2960.7,-9257.51 2951.36,-6281.11 2960,-6239.65 3017.81,-5962.26 3187.85,-5658.02 3240.96,-5567.47"/>
<polygon fill="blue" stroke="blue" points="3244.08,-5569.06 3246.15,-5558.67 3238.05,-5565.51 3244.08,-5569.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge664" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.57,-9336.69C2753.17,-9350.06 2867.9,-9355.91 2932,-9288.65 2982.03,-9236.16 2946.57,-8707.91 2960,-8636.65 3024.66,-8293.6 3196.31,-7901.7 3244.35,-7796.06"/>
<polygon fill="blue" stroke="blue" points="3247.63,-7797.3 3248.6,-7786.75 3241.27,-7794.39 3247.63,-7797.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node234"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="2848.5,-9552.65 2355.5,-9552.65 2355.5,-9516.65 2848.5,-9516.65 2848.5,-9552.65"/>
<text text-anchor="middle" x="2602" y="-9530.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge752" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.81,-9535.58C2886.73,-9530.78 2917.98,-9522.2 2932,-9507.65 2980.08,-9457.76 2912.14,-8934.76 2960,-8884.65 3027.76,-8813.72 3157.89,-8832.99 3220.96,-8847.8"/>
<polygon fill="blue" stroke="blue" points="3220.31,-8851.24 3230.85,-8850.21 3221.97,-8844.44 3220.31,-8851.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge750" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.85,-9535.62C2886.77,-9530.82 2918.01,-9522.22 2932,-9507.65 2984.15,-9453.35 2908.09,-8885.18 2960,-8830.65 3027.63,-8759.6 3157.82,-8778.92 3220.94,-8793.77"/>
<polygon fill="blue" stroke="blue" points="3220.29,-8797.22 3230.83,-8796.19 3221.95,-8790.42 3220.29,-8797.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge749" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.82,-9536.03C2886.9,-9531.21 2918.2,-9522.5 2932,-9507.65 2962.9,-9474.4 2950.75,-6284.09 2960,-6239.65 3017.73,-5962.25 3187.82,-5658.02 3240.95,-5567.47"/>
<polygon fill="blue" stroke="blue" points="3244.08,-5569.06 3246.14,-5558.67 3238.05,-5565.51 3244.08,-5569.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge751" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.55,-9535.77C2886.65,-9530.97 2918.03,-9522.34 2932,-9507.65 2965.37,-9472.58 2951.29,-8684.27 2960,-8636.65 3022.81,-8293.26 3195.78,-7901.6 3244.23,-7796.04"/>
<polygon fill="blue" stroke="blue" points="3247.52,-7797.28 3248.53,-7786.73 3241.16,-7794.35 3247.52,-7797.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node235"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2666,-9606.65 2538,-9606.65 2538,-9570.65 2666,-9570.65 2666,-9606.65"/>
<text text-anchor="middle" x="2602" y="-9584.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge768" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.35,-9593.06C2751.78,-9597.47 2897.28,-9599.02 2932,-9561.65 2994.1,-9494.82 2895.22,-6341.88 2960,-6277.65 3148.1,-6091.15 3366.85,-6092.21 3556,-6277.65 3596.04,-6316.9 3549.39,-7237.3 3576,-7286.65 3678.85,-7477.41 3873.11,-7373 3978,-7562.65 4004.05,-7609.75 3989.87,-7993.44 3998,-8046.65 4049,-8380.45 4181.01,-8770.92 4218.15,-8876.92"/>
<polygon fill="blue" stroke="blue" points="4214.92,-8878.28 4221.54,-8886.56 4221.52,-8875.96 4214.92,-8878.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge767" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.18,-9592.9C2751.41,-9597.12 2896.67,-9598.44 2932,-9561.65 2984.15,-9507.35 2908.09,-8939.18 2960,-8884.65 3027.63,-8813.6 3157.82,-8832.92 3220.94,-8847.77"/>
<polygon fill="blue" stroke="blue" points="3220.29,-8851.22 3230.83,-8850.19 3221.95,-8844.42 3220.29,-8851.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node236"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="2799.5,-6461.65 2404.5,-6461.65 2404.5,-6425.65 2799.5,-6425.65 2799.5,-6461.65"/>
<text text-anchor="middle" x="2602" y="-6439.95" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2799.83,-6448.75C2858.42,-6445.83 2912.3,-6437.16 2932,-6416.65 2983.69,-6362.84 2923.95,-5810.99 2960,-5745.65 3011.7,-5651.94 3126.66,-5592.01 3197.42,-5562.51"/>
<polygon fill="blue" stroke="blue" points="3198.75,-5565.75 3206.68,-5558.72 3196.1,-5559.27 3198.75,-5565.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node261"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="3855,-7732.65 3699,-7732.65 3699,-7696.65 3855,-7696.65 3855,-7732.65"/>
<text text-anchor="middle" x="3777" y="-7710.95" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2799.61,-6437.63C3063.28,-6431.66 3504.5,-6429.88 3556,-6482.65 3602.76,-6530.57 3531.52,-7637.61 3576,-7687.65 3603.57,-7718.67 3648.45,-7726.77 3688.72,-7726.51"/>
<polygon fill="blue" stroke="blue" points="3688.93,-7730 3698.84,-7726.27 3688.76,-7723.01 3688.93,-7730"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node263"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="3851.5,-7678.65 3702.5,-7678.65 3702.5,-7642.65 3851.5,-7642.65 3851.5,-7678.65"/>
<text text-anchor="middle" x="3777" y="-7656.95" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2799.79,-6448.71C2858.38,-6445.78 2912.26,-6437.13 2932,-6416.65 2979.86,-6367 2910.15,-5844.3 2960,-5796.65 3007.87,-5750.89 3508.88,-5750.12 3556,-5796.65 3587.7,-5827.96 3561.39,-7358.56 3576,-7400.65 3610.78,-7500.84 3700.79,-7592.85 3747.28,-7635.56"/>
<polygon fill="blue" stroke="blue" points="3745.13,-7638.34 3754.89,-7642.47 3749.84,-7633.16 3745.13,-7638.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node237"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="2740.5,-7001.65 2463.5,-7001.65 2463.5,-6965.65 2740.5,-6965.65 2740.5,-7001.65"/>
<text text-anchor="middle" x="2602" y="-6979.95" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2740.54,-6990.05C2818.59,-6990.4 2905.81,-6984.14 2932,-6956.65 2963.87,-6923.21 2948.49,-6170.39 2960,-6125.65 3019.69,-5893.56 3181.87,-5647.83 3237.76,-5567.64"/>
<polygon fill="blue" stroke="blue" points="3240.86,-5569.31 3243.74,-5559.12 3235.13,-5565.29 3240.86,-5569.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node262"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3337.5,-7732.65 3178.5,-7732.65 3178.5,-7696.65 3337.5,-7696.65 3337.5,-7732.65"/>
<text text-anchor="middle" x="3258" y="-7710.95" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2740.91,-6977.32C2818.82,-6977.02 2905.75,-6983.32 2932,-7010.65 2984.15,-7064.95 2908.09,-7633.12 2960,-7687.65 3012.37,-7742.67 3102.27,-7743.5 3169.47,-7734.17"/>
<polygon fill="blue" stroke="blue" points="3170.26,-7737.59 3179.64,-7732.66 3169.23,-7730.67 3170.26,-7737.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3334,-7678.65 3182,-7678.65 3182,-7642.65 3334,-7642.65 3334,-7678.65"/>
<text text-anchor="middle" x="3258" y="-7656.95" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2740.87,-6977.35C2818.77,-6977.07 2905.7,-6983.37 2932,-7010.65 2979.86,-7060.3 2912.61,-7580.55 2960,-7630.65 3012.85,-7686.52 3104.21,-7687.7 3171.69,-7678.82"/>
<polygon fill="blue" stroke="blue" points="3172.47,-7682.24 3181.88,-7677.38 3171.49,-7675.31 3172.47,-7682.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node238"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2746,-6407.65 2458,-6407.65 2458,-6371.65 2746,-6371.65 2746,-6407.65"/>
<text text-anchor="middle" x="2602" y="-6385.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2746.21,-6395.98C2822.72,-6395.97 2906.33,-6389.35 2932,-6362.65 2982.49,-6310.14 2921.89,-5769.73 2960,-5707.65 3007.82,-5629.77 3106.08,-5585.07 3176.49,-5561.87"/>
<polygon fill="blue" stroke="blue" points="3177.78,-5565.13 3186.23,-5558.73 3175.64,-5558.46 3177.78,-5565.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2746.45,-6385.41C2998.83,-6379.47 3500.95,-6375.03 3556,-6431.65 3604.65,-6481.69 3529.66,-7635.47 3576,-7687.65 3603.56,-7718.68 3648.44,-7726.78 3688.71,-7726.52"/>
<polygon fill="blue" stroke="blue" points="3688.92,-7730.01 3698.84,-7726.28 3688.76,-7723.01 3688.92,-7730.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2746.18,-6395.95C2822.67,-6395.92 2906.28,-6389.3 2932,-6362.65 2978.65,-6314.31 2911.41,-5805.04 2960,-5758.65 3007.9,-5712.92 3508.89,-5712.11 3556,-5758.65 3588.45,-5790.71 3561.05,-7357.56 3576,-7400.65 3610.76,-7500.85 3700.78,-7592.85 3747.27,-7635.57"/>
<polygon fill="blue" stroke="blue" points="3745.13,-7638.35 3754.89,-7642.48 3749.83,-7633.16 3745.13,-7638.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node239"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="2783,-6947.65 2421,-6947.65 2421,-6911.65 2783,-6911.65 2783,-6947.65"/>
<text text-anchor="middle" x="2602" y="-6925.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2783.41,-6935.48C2848.16,-6933.41 2910.53,-6925.13 2932,-6902.65 2961.83,-6871.41 2949.19,-6167.47 2960,-6125.65 3019.96,-5893.63 3181.97,-5647.86 3237.79,-5567.65"/>
<polygon fill="blue" stroke="blue" points="3240.89,-5569.32 3243.76,-5559.12 3235.15,-5565.3 3240.89,-5569.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2783.39,-6923.84C2848.13,-6925.92 2910.5,-6934.19 2932,-6956.65 2988.21,-7015.36 2904.05,-7628.69 2960,-7687.65 3012.29,-7742.75 3102.2,-7743.56 3169.43,-7734.21"/>
<polygon fill="blue" stroke="blue" points="3170.22,-7737.64 3179.59,-7732.7 3169.19,-7730.71 3170.22,-7737.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2783.35,-6923.88C2848.08,-6925.96 2910.46,-6934.23 2932,-6956.65 2983.92,-7010.71 2908.59,-7576.11 2960,-7630.65 3012.74,-7686.61 3104.13,-7687.78 3171.63,-7678.87"/>
<polygon fill="blue" stroke="blue" points="3172.42,-7682.29 3181.83,-7677.43 3171.44,-7675.36 3172.42,-7682.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node240"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2750.5,-7541.65 2453.5,-7541.65 2453.5,-7505.65 2750.5,-7505.65 2750.5,-7541.65"/>
<text text-anchor="middle" x="2602" y="-7519.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node245"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="3285,-7244.65 3231,-7244.65 3231,-7208.65 3285,-7208.65 3285,-7244.65"/>
<text text-anchor="middle" x="3258" y="-7222.95" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2750.74,-7530.38C2809.06,-7528.26 2875.49,-7519.72 2932,-7496.65 3067.29,-7441.43 3188.82,-7308.66 3236.08,-7252.47"/>
<polygon fill="blue" stroke="blue" points="3238.8,-7254.68 3242.51,-7244.75 3233.42,-7250.2 3238.8,-7254.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.77,-7505.64C2757.57,-7494.28 2865.11,-7491.33 2932,-7550.65 2978.5,-7591.89 2913.69,-7646.21 2960,-7687.65 3015.58,-7737.38 3102.64,-7739.7 3168.16,-7732.21"/>
<polygon fill="blue" stroke="blue" points="3168.99,-7735.63 3178.49,-7730.93 3168.13,-7728.69 3168.99,-7735.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2699.69,-7505.61C2771.1,-7497.96 2866.82,-7500.27 2932,-7550.65 2961.81,-7573.69 2930.41,-7607.33 2960,-7630.65 3019.12,-7677.24 3106.74,-7680.62 3171.51,-7674.83"/>
<polygon fill="blue" stroke="blue" points="3172.09,-7678.29 3181.7,-7673.82 3171.4,-7671.32 3172.09,-7678.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node241"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="2737.5,-7487.65 2466.5,-7487.65 2466.5,-7451.65 2737.5,-7451.65 2737.5,-7487.65"/>
<text text-anchor="middle" x="2602" y="-7465.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2737.81,-7473.71C2798.61,-7471.75 2870.42,-7464.04 2932,-7442.65 3055.58,-7399.74 3177.63,-7298.68 3230.15,-7251.6"/>
<polygon fill="blue" stroke="blue" points="3232.61,-7254.09 3237.68,-7244.79 3227.92,-7248.9 3232.61,-7254.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.59,-7451.61C2754.03,-7439.02 2865.34,-7434.1 2932,-7496.65 2994.57,-7555.36 2897.69,-7628.67 2960,-7687.65 3014.45,-7739.19 3102.34,-7741.06 3168.41,-7732.96"/>
<polygon fill="blue" stroke="blue" points="3168.95,-7736.42 3178.4,-7731.64 3168.03,-7729.48 3168.95,-7736.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.06,-7451.65C2757.82,-7440.38 2865.09,-7437.57 2932,-7496.65 2977.61,-7536.92 2914.77,-7589.95 2960,-7630.65 3016.52,-7681.51 3105.81,-7683.93 3171.74,-7676.72"/>
<polygon fill="blue" stroke="blue" points="3172.18,-7680.19 3181.7,-7675.54 3171.36,-7673.24 3172.18,-7680.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node242"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="2817.5,-6893.65 2386.5,-6893.65 2386.5,-6857.65 2817.5,-6857.65 2817.5,-6893.65"/>
<text text-anchor="middle" x="2602" y="-6871.95" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.84,-6879.69C2869.22,-6875.94 2914.36,-6867.07 2932,-6848.65 2959.8,-6819.62 2949.89,-6164.56 2960,-6125.65 3020.27,-5893.71 3182.08,-5647.88 3237.82,-5567.65"/>
<polygon fill="blue" stroke="blue" points="3240.92,-5569.33 3243.78,-5559.13 3235.18,-5565.32 3240.92,-5569.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.87,-6871.58C2869.26,-6875.32 2914.39,-6884.21 2932,-6902.65 2992.27,-6965.78 2900.01,-7624.26 2960,-7687.65 3012.3,-7742.91 3102.43,-7743.62 3169.71,-7734.21"/>
<polygon fill="blue" stroke="blue" points="3170.52,-7737.63 3179.89,-7732.68 3169.48,-7730.7 3170.52,-7737.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.84,-6871.61C2869.22,-6875.35 2914.36,-6884.23 2932,-6902.65 2987.98,-6961.12 2904.57,-7571.66 2960,-7630.65 3012.66,-7686.69 3104.05,-7687.85 3171.59,-7678.91"/>
<polygon fill="blue" stroke="blue" points="3172.38,-7682.34 3181.79,-7677.46 3171.4,-7675.41 3172.38,-7682.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node243"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="2772.5,-7433.65 2431.5,-7433.65 2431.5,-7397.65 2772.5,-7397.65 2772.5,-7433.65"/>
<text text-anchor="middle" x="2602" y="-7411.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2772.54,-7414.05C2824.44,-7410.3 2881.22,-7402.82 2932,-7388.65 3044.4,-7357.28 3164.17,-7286.58 3221.88,-7249.83"/>
<polygon fill="blue" stroke="blue" points="3224.08,-7252.58 3230.61,-7244.23 3220.3,-7246.69 3224.08,-7252.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.22,-7397.65C2751.98,-7384.36 2865.52,-7378.26 2932,-7442.65 3010.72,-7518.9 2881.61,-7611.05 2960,-7687.65 3013.72,-7740.14 3101.91,-7741.81 3168.27,-7733.41"/>
<polygon fill="blue" stroke="blue" points="3168.87,-7736.86 3178.31,-7732.04 3167.93,-7729.92 3168.87,-7736.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.56,-7397.64C2753.98,-7385.07 2865.27,-7380.18 2932,-7442.65 2993.67,-7500.38 2898.87,-7572.34 2960,-7630.65 3015.29,-7683.39 3105.4,-7685.33 3171.89,-7677.5"/>
<polygon fill="blue" stroke="blue" points="3172.45,-7680.95 3181.93,-7676.22 3171.57,-7674.01 3172.45,-7680.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node244"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="2714,-6839.65 2490,-6839.65 2490,-6803.65 2714,-6803.65 2714,-6839.65"/>
<text text-anchor="middle" x="2602" y="-6817.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2714.42,-6827.64C2797.96,-6829.45 2902.72,-6825.13 2932,-6794.65 2983.54,-6741 2941.18,-6197.63 2960,-6125.65 3020.77,-5893.28 3182.95,-5646.79 3238.23,-5567.11"/>
<polygon fill="blue" stroke="blue" points="3241.28,-5568.86 3244.14,-5558.66 3235.54,-5564.85 3241.28,-5568.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2714.06,-6815.61C2797.71,-6813.73 2902.8,-6818 2932,-6848.65 2996.34,-6916.19 2895.96,-7619.83 2960,-7687.65 3012.32,-7743.06 3102.66,-7743.68 3170.01,-7734.19"/>
<polygon fill="blue" stroke="blue" points="3170.82,-7737.61 3180.19,-7732.66 3169.78,-7730.69 3170.82,-7737.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2714.05,-6815.63C2797.68,-6813.76 2902.76,-6818.03 2932,-6848.65 2992.05,-6911.53 2900.55,-7567.21 2960,-7630.65 3012.58,-7686.76 3103.99,-7687.91 3171.55,-7678.95"/>
<polygon fill="blue" stroke="blue" points="3172.35,-7682.37 3181.76,-7677.5 3171.36,-7675.44 3172.35,-7682.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3258,-7208.33C3258,-6661.83 3258,-6115.33 3258,-5568.83"/>
<polygon fill="blue" stroke="blue" points="3261.5,-5568.76 3258,-5558.76 3254.5,-5568.76 3261.5,-5568.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3275.36,-7244.65C3324.09,-7299.09 3470.25,-7468.21 3556,-7630.65 3568.53,-7654.39 3555.19,-7670.69 3576,-7687.65 3607.04,-7712.95 3650.23,-7721.04 3688.53,-7722.24"/>
<polygon fill="blue" stroke="blue" points="3688.61,-7725.75 3698.67,-7722.41 3688.73,-7718.75 3688.61,-7725.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3269.81,-7244.71C3305.77,-7303.28 3427.54,-7490.06 3576,-7590.65 3610.95,-7614.33 3654.75,-7630.84 3692.44,-7641.86"/>
<polygon fill="blue" stroke="blue" points="3691.82,-7645.32 3702.39,-7644.68 3693.73,-7638.59 3691.82,-7645.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node246"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="2671.5,-6569.65 2532.5,-6569.65 2532.5,-6533.65 2671.5,-6533.65 2671.5,-6569.65"/>
<text text-anchor="middle" x="2602" y="-6547.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.72,-6538.97C2743.06,-6529.7 2854.82,-6526.54 2932,-6578.65 3159.67,-6732.38 3235.37,-7095.05 3252.74,-7198.6"/>
<polygon fill="blue" stroke="blue" points="3249.31,-7199.29 3254.37,-7208.6 3256.21,-7198.16 3249.31,-7199.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.68,-6546.52C2870,-6533.33 3436.99,-6507.74 3556,-6635.65 3595.82,-6678.45 3537.11,-7644.01 3576,-7687.65 3603.61,-7718.64 3648.49,-7726.73 3688.75,-7726.48"/>
<polygon fill="blue" stroke="blue" points="3688.96,-7729.98 3698.87,-7726.24 3688.8,-7722.98 3688.96,-7729.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.57,-6556.1C2757.33,-6560.02 2897.18,-6560.44 2932,-6524.65 2971.81,-6483.74 2918.55,-6050.9 2960,-6011.65 3152.34,-5829.52 3367.35,-5825.7 3556,-6011.65 3583.48,-6038.74 3563.31,-7364.21 3576,-7400.65 3610.87,-7500.81 3700.84,-7592.83 3747.3,-7635.56"/>
<polygon fill="blue" stroke="blue" points="3745.15,-7638.33 3754.91,-7642.47 3749.86,-7633.15 3745.15,-7638.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node247"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2821.5,-6353.65 2382.5,-6353.65 2382.5,-6317.65 2821.5,-6317.65 2821.5,-6353.65"/>
<text text-anchor="middle" x="2602" y="-6331.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2607.89,-6317.51C2631.64,-6232.55 2742.87,-5869.61 2960,-5669.65 3019.69,-5614.68 3106.49,-5580.69 3170.85,-5561.49"/>
<polygon fill="blue" stroke="blue" points="3171.96,-5564.82 3180.58,-5558.65 3170,-5558.1 3171.96,-5564.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2653.27,-6317.65C2812.56,-6264.17 3310.01,-6125.22 3556,-6378.65 3606.66,-6430.84 3527.72,-7633.26 3576,-7687.65 3603.55,-7718.69 3648.43,-7726.79 3688.7,-7726.52"/>
<polygon fill="blue" stroke="blue" points="3688.91,-7730.02 3698.83,-7726.29 3688.75,-7723.02 3688.91,-7730.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2606.72,-6317.46C2625.51,-6230.94 2718.74,-5859.56 2960,-5720.65 3074.78,-5654.56 3461.79,-5627.56 3556,-5720.65 3589.2,-5753.45 3560.71,-7356.56 3576,-7400.65 3610.75,-7500.85 3700.78,-7592.86 3747.27,-7635.57"/>
<polygon fill="blue" stroke="blue" points="3745.13,-7638.35 3754.88,-7642.48 3749.83,-7633.16 3745.13,-7638.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node248"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2932,-7109.65 2272,-7109.65 2272,-7073.65 2932,-7073.65 2932,-7109.65"/>
<text text-anchor="middle" x="2602" y="-7087.95" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2920.43,-7073.46C2925.05,-7070.8 2928.94,-7067.87 2932,-7064.65 2967.93,-7026.8 2947.1,-6176.22 2960,-6125.65 3019.24,-5893.45 3181.71,-5647.79 3237.72,-5567.63"/>
<polygon fill="blue" stroke="blue" points="3240.82,-5569.3 3243.71,-5559.11 3235.09,-5565.28 3240.82,-5569.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2919.9,-7109.66C2924.74,-7112.37 2928.81,-7115.36 2932,-7118.65 2976.02,-7164.14 2916.18,-7641.97 2960,-7687.65 3012.42,-7742.29 3101.87,-7743.31 3168.94,-7734.15"/>
<polygon fill="blue" stroke="blue" points="3169.69,-7737.57 3179.08,-7732.66 3168.68,-7730.65 3169.69,-7737.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2919.87,-7109.68C2924.72,-7112.38 2928.8,-7115.36 2932,-7118.65 3011.47,-7200.31 2881.3,-7548.24 2960,-7630.65 3013.02,-7686.17 3104.14,-7687.48 3171.5,-7678.73"/>
<polygon fill="blue" stroke="blue" points="3172.26,-7682.16 3181.68,-7677.31 3171.29,-7675.22 3172.26,-7682.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node249"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="2823,-6515.65 2381,-6515.65 2381,-6479.65 2823,-6479.65 2823,-6515.65"/>
<text text-anchor="middle" x="2602" y="-6493.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2722.78,-6479.63C2789.93,-6475.93 2871.97,-6482.74 2932,-6524.65 3173.66,-6693.39 3239.83,-7088.73 3253.8,-7198.14"/>
<polygon fill="blue" stroke="blue" points="3250.36,-7198.89 3255.06,-7208.39 3257.31,-7198.03 3250.36,-7198.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2823.04,-6489.93C3088.56,-6482.99 3505.85,-6480.58 3556,-6531.65 3601,-6577.48 3533.31,-7639.66 3576,-7687.65 3603.58,-7718.66 3648.47,-7726.76 3688.73,-7726.5"/>
<polygon fill="blue" stroke="blue" points="3688.94,-7730 3698.85,-7726.26 3688.77,-7723 3688.94,-7730"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2823.35,-6501.17C2872.39,-6497.19 2914.93,-6488.33 2932,-6470.65 2978.43,-6422.55 2911.64,-5915.81 2960,-5869.65 3055.81,-5778.2 3461.74,-5776.61 3556,-5869.65 3586.27,-5899.53 3562.04,-7360.47 3576,-7400.65 3610.8,-7500.83 3700.81,-7592.85 3747.28,-7635.56"/>
<polygon fill="blue" stroke="blue" points="3745.14,-7638.34 3754.89,-7642.47 3749.84,-7633.16 3745.14,-7638.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node250"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="2695.5,-6785.65 2508.5,-6785.65 2508.5,-6749.65 2695.5,-6749.65 2695.5,-6785.65"/>
<text text-anchor="middle" x="2602" y="-6763.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.45,-6749.65C2757.3,-6738.21 2865.09,-6735.14 2932,-6794.65 2979.09,-6836.53 2930.04,-6878.21 2960,-6933.65 3025.95,-7055.67 3159.42,-7159.09 3222.49,-7203.46"/>
<polygon fill="blue" stroke="blue" points="3220.7,-7206.48 3230.91,-7209.32 3224.71,-7200.73 3220.7,-7206.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node251"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="2725.5,-6731.65 2478.5,-6731.65 2478.5,-6695.65 2725.5,-6695.65 2725.5,-6731.65"/>
<text text-anchor="middle" x="2602" y="-6709.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge556" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.26,-6695.64C2753.72,-6682.99 2865.28,-6677.96 2932,-6740.65 2995.16,-6800 2920.89,-6856.3 2960,-6933.65 3022.74,-7057.74 3158.4,-7160.48 3222.33,-7204.12"/>
<polygon fill="blue" stroke="blue" points="3220.61,-7207.18 3230.86,-7209.88 3224.53,-7201.38 3220.61,-7207.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node252"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="2716,-7379.65 2488,-7379.65 2488,-7343.65 2716,-7343.65 2716,-7379.65"/>
<text text-anchor="middle" x="2602" y="-7357.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge558" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.24,-7359.03C2780.12,-7355.89 2861.11,-7349.12 2932,-7334.65 3040.16,-7312.57 3162.38,-7265.71 3221.38,-7241.63"/>
<polygon fill="blue" stroke="blue" points="3222.71,-7244.87 3230.63,-7237.83 3220.05,-7238.39 3222.71,-7244.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge560" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.12,-7356.04C2799.07,-7354.58 2902.2,-7359.19 2932,-7388.65 2979.46,-7435.57 2912.75,-7640.53 2960,-7687.65 3013.26,-7740.77 3101.73,-7742.29 3168.29,-7733.67"/>
<polygon fill="blue" stroke="blue" points="3168.94,-7737.12 3178.36,-7732.27 3167.97,-7730.18 3168.94,-7737.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge559" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.55,-7343.61C2752.3,-7330.38 2865.58,-7324.4 2932,-7388.65 3009.82,-7463.93 2882.89,-7554.65 2960,-7630.65 3014.51,-7684.37 3104.95,-7686.1 3171.74,-7677.94"/>
<polygon fill="blue" stroke="blue" points="3172.37,-7681.39 3181.83,-7676.61 3171.46,-7674.45 3172.37,-7681.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node253"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2748,-7325.65 2456,-7325.65 2456,-7289.65 2748,-7289.65 2748,-7325.65"/>
<text text-anchor="middle" x="2602" y="-7303.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge581" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748.21,-7298.34C2805.57,-7293.98 2872,-7288.08 2932,-7280.65 3037.49,-7267.58 3161.09,-7245.03 3220.92,-7233.65"/>
<polygon fill="blue" stroke="blue" points="3221.82,-7237.04 3230.99,-7231.73 3220.51,-7230.17 3221.82,-7237.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge582" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748.07,-7301.67C2823.85,-7301.93 2906.1,-7308.68 2932,-7334.65 2987.57,-7390.37 2904.68,-7631.69 2960,-7687.65 3012.97,-7741.24 3101.7,-7742.62 3168.41,-7733.84"/>
<polygon fill="blue" stroke="blue" points="3169.09,-7737.28 3178.5,-7732.41 3168.11,-7730.35 3169.09,-7737.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge580" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748.37,-7301.82C2823.97,-7302.15 2905.95,-7308.93 2932,-7334.65 2979.01,-7381.08 2913.43,-7583.78 2960,-7630.65 3014.03,-7685.02 3104.77,-7686.58 3171.76,-7678.2"/>
<polygon fill="blue" stroke="blue" points="3172.44,-7681.64 3181.88,-7676.84 3171.51,-7674.71 3172.44,-7681.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node254"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="2711,-7271.65 2493,-7271.65 2493,-7235.65 2711,-7235.65 2711,-7271.65"/>
<text text-anchor="middle" x="2602" y="-7249.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge585" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.36,-7249.18C2861.47,-7242.98 3125.01,-7232.1 3220.85,-7228.14"/>
<polygon fill="blue" stroke="blue" points="3221.06,-7231.64 3230.91,-7227.73 3220.77,-7224.64 3221.06,-7231.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge583" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.24,-7247.94C2795.12,-7246.09 2901.96,-7250.21 2932,-7280.65 2995.68,-7345.18 2896.6,-7622.85 2960,-7687.65 3012.69,-7741.51 3101.45,-7742.86 3168.25,-7734"/>
<polygon fill="blue" stroke="blue" points="3168.95,-7737.43 3178.35,-7732.56 3167.96,-7730.5 3168.95,-7737.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge584" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.15,-7248.03C2794.98,-7246.23 2901.79,-7250.38 2932,-7280.65 2987.12,-7335.88 2905.4,-7574.91 2960,-7630.65 3013.63,-7685.41 3104.43,-7686.91 3171.55,-7678.41"/>
<polygon fill="blue" stroke="blue" points="3172.26,-7681.85 3181.69,-7677.03 3171.31,-7674.91 3172.26,-7681.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node255"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="2721.5,-7217.65 2482.5,-7217.65 2482.5,-7181.65 2721.5,-7181.65 2721.5,-7217.65"/>
<text text-anchor="middle" x="2602" y="-7195.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge607" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.81,-7204.56C2873.4,-7210.81 3127.18,-7221.29 3220.84,-7225.16"/>
<polygon fill="blue" stroke="blue" points="3220.81,-7228.66 3230.94,-7225.57 3221.1,-7221.67 3220.81,-7228.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge608" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.53,-7193.68C2803.69,-7192.36 2903.28,-7197.32 2932,-7226.65 3003.8,-7299.99 2888.52,-7614 2960,-7687.65 3012.47,-7741.72 3101.27,-7743.04 3168.13,-7734.11"/>
<polygon fill="blue" stroke="blue" points="3168.84,-7737.55 3178.24,-7732.66 3167.85,-7730.62 3168.84,-7737.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge606" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.89,-7193.74C2803.93,-7192.48 2903.21,-7197.49 2932,-7226.65 2995.23,-7290.69 2897.37,-7566.02 2960,-7630.65 3013.43,-7685.79 3104.48,-7687.16 3171.72,-7678.52"/>
<polygon fill="blue" stroke="blue" points="3172.45,-7681.95 3181.88,-7677.12 3171.49,-7675.02 3172.45,-7681.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node256"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="2682,-6677.65 2522,-6677.65 2522,-6641.65 2682,-6641.65 2682,-6677.65"/>
<text text-anchor="middle" x="2602" y="-6655.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge669" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.23,-6641.64C2752,-6628.34 2865.55,-6622.23 2932,-6686.65 2971.66,-6725.1 2935.85,-6883.97 2960,-6933.65 3020.8,-7058.7 3157.42,-7160.97 3221.97,-7204.3"/>
<polygon fill="blue" stroke="blue" points="3220.31,-7207.4 3230.58,-7210.02 3224.18,-7201.57 3220.31,-7207.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge670" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.22,-6644.31C2754.43,-6634.99 2860.44,-6633.54 2932,-6686.65 2959.24,-6706.87 2939.36,-6730.73 2960,-6757.65 3160.67,-7019.35 3401.72,-6908.18 3556,-7199.65 3581.39,-7247.61 3539.46,-7647.53 3576,-7687.65 3603.84,-7718.22 3648.51,-7726.34 3688.58,-7726.22"/>
<polygon fill="blue" stroke="blue" points="3688.72,-7729.72 3698.65,-7726.02 3688.58,-7722.72 3688.72,-7729.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge671" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.11,-6651.06C2871.35,-6635.49 3349.73,-6626.77 3556,-6905.65 3588.73,-6949.91 3557.23,-7348.91 3576,-7400.65 3612.17,-7500.35 3701.55,-7592.58 3747.59,-7635.45"/>
<polygon fill="blue" stroke="blue" points="3745.4,-7638.19 3755.12,-7642.39 3750.14,-7633.04 3745.4,-7638.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node257"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="2703.5,-7163.65 2500.5,-7163.65 2500.5,-7127.65 2703.5,-7127.65 2703.5,-7163.65"/>
<text text-anchor="middle" x="2602" y="-7141.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge674" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.65,-7151.74C2768.89,-7156.23 2855.65,-7163.19 2932,-7172.65 3037.49,-7185.72 3161.09,-7208.27 3220.92,-7219.65"/>
<polygon fill="blue" stroke="blue" points="3220.51,-7223.14 3230.99,-7221.58 3221.82,-7216.26 3220.51,-7223.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge673" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.83,-7140.02C2788.79,-7137.68 2901.28,-7141.07 2932,-7172.65 3011.92,-7254.8 2880.44,-7605.15 2960,-7687.65 3012.39,-7741.98 3101.41,-7743.19 3168.36,-7734.16"/>
<polygon fill="blue" stroke="blue" points="3169.09,-7737.59 3178.49,-7732.7 3168.09,-7730.66 3169.09,-7737.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge675" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.78,-7140.07C2788.7,-7137.77 2901.17,-7141.17 2932,-7172.65 3003.35,-7245.5 2889.34,-7557.13 2960,-7630.65 3013.2,-7686 3104.29,-7687.34 3171.6,-7678.64"/>
<polygon fill="blue" stroke="blue" points="3172.34,-7682.07 3181.77,-7677.22 3171.38,-7675.13 3172.34,-7682.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node258"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2702,-7595.65 2502,-7595.65 2502,-7559.65 2702,-7559.65 2702,-7595.65"/>
<text text-anchor="middle" x="2602" y="-7573.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge746" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.13,-7586.86C2769.89,-7589.1 2860.08,-7583.89 2932,-7550.65 3079.13,-7482.66 3197.65,-7318.13 3240.13,-7253.43"/>
<polygon fill="blue" stroke="blue" points="3243.1,-7255.27 3245.61,-7244.98 3237.23,-7251.46 3243.1,-7255.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge745" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.08,-7570.75C2772.62,-7570.9 2866.19,-7581.96 2932,-7630.65 2954.69,-7647.44 2936.74,-7671.66 2960,-7687.65 3020.44,-7729.21 3104.94,-7733.04 3168.36,-7728.17"/>
<polygon fill="blue" stroke="blue" points="3168.69,-7731.66 3178.35,-7727.32 3168.09,-7724.68 3168.69,-7731.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge747" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.09,-7593.63C2773.64,-7604.86 2872.64,-7619.76 2960,-7630.65 3031.22,-7639.53 3112.3,-7647.58 3171.73,-7653.1"/>
<polygon fill="blue" stroke="blue" points="3171.54,-7656.6 3181.82,-7654.03 3172.19,-7649.63 3171.54,-7656.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node259"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="2712,-6623.65 2492,-6623.65 2492,-6587.65 2712,-6587.65 2712,-6623.65"/>
<text text-anchor="middle" x="2602" y="-6601.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge797" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2685.65,-6587.6C2759.2,-6576.72 2865.21,-6574.52 2932,-6632.65 2974.95,-6670.03 2938.23,-6705.05 2960,-6757.65 3035.64,-6940.4 3180.87,-7131.55 3235.51,-7200.19"/>
<polygon fill="blue" stroke="blue" points="3233.03,-7202.69 3242.01,-7208.31 3238.49,-7198.31 3233.03,-7202.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge795" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.27,-6611.44C2776.47,-6615.63 2859.07,-6622.39 2932,-6632.65 2940.75,-6633.88 3550.32,-6750.87 3556,-6757.65 3589.19,-6797.27 3541.57,-7649.11 3576,-7687.65 3603.65,-7718.61 3648.54,-7726.69 3688.79,-7726.45"/>
<polygon fill="blue" stroke="blue" points="3688.99,-7729.95 3698.91,-7726.22 3688.83,-7722.95 3688.99,-7729.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge796" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.42,-6602.3C2950.31,-6596.16 3498.03,-6588.66 3556,-6647.65 3585.33,-6677.5 3562,-7361.21 3576,-7400.65 3611.48,-7500.59 3701.18,-7592.72 3747.43,-7635.51"/>
<polygon fill="blue" stroke="blue" points="3745.27,-7638.27 3755.01,-7642.43 3749.99,-7633.1 3745.27,-7638.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node260"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="2732.5,-7055.65 2471.5,-7055.65 2471.5,-7019.65 2732.5,-7019.65 2732.5,-7055.65"/>
<text text-anchor="middle" x="2602" y="-7033.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge867" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2732.64,-7044.01C2812.63,-7044.83 2904.95,-7039.1 2932,-7010.65 2965.9,-6975 2947.8,-6173.3 2960,-6125.65 3019.45,-5893.5 3181.78,-5647.81 3237.74,-5567.63"/>
<polygon fill="blue" stroke="blue" points="3240.84,-5569.31 3243.72,-5559.11 3235.11,-5565.28 3240.84,-5569.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge865" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2732.52,-7031.4C2812.45,-7030.64 2904.76,-7036.38 2932,-7064.65 2980.08,-7114.54 2912.14,-7637.55 2960,-7687.65 3012.39,-7742.49 3102.06,-7743.41 3169.2,-7734.16"/>
<polygon fill="blue" stroke="blue" points="3169.97,-7737.59 3179.35,-7732.67 3168.95,-7730.66 3169.97,-7737.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge866" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2732.92,-7031.44C2812.73,-7030.72 2904.74,-7036.5 2932,-7064.65 2975.8,-7109.89 2916.63,-7585 2960,-7630.65 3012.97,-7686.4 3104.31,-7687.6 3171.75,-7678.76"/>
<polygon fill="blue" stroke="blue" points="3172.53,-7682.19 3181.94,-7677.32 3171.55,-7675.25 3172.53,-7682.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="4256,-7732.65 4202,-7732.65 4202,-7696.65 4256,-7696.65 4256,-7732.65"/>
<text text-anchor="middle" x="4229" y="-7710.95" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.1,-7714.65C3953.25,-7714.65 4118.81,-7714.65 4191.7,-7714.65"/>
<polygon fill="blue" stroke="blue" points="4191.76,-7718.15 4201.76,-7714.65 4191.76,-7711.15 4191.76,-7718.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge536" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.52,-7714.65C3432.05,-7714.65 3590.34,-7714.65 3688.65,-7714.65"/>
<polygon fill="blue" stroke="blue" points="3688.86,-7718.15 3698.86,-7714.65 3688.86,-7711.15 3688.86,-7718.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge689" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3851.55,-7669.48C3949.17,-7681.19 4117.78,-7701.42 4191.6,-7710.28"/>
<polygon fill="blue" stroke="blue" points="4191.44,-7713.79 4201.79,-7711.51 4192.28,-7706.84 4191.44,-7713.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge717" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-7786.67C3403.12,-7797.95 3501.16,-7800.77 3556,-7741.65 3604.74,-7689.1 3524.93,-6501.94 3576,-6451.65 3715.98,-6313.82 4316.54,-6317.45 4460,-6451.65 4572.38,-6556.78 4646.82,-9064.85 4655.21,-9360.31"/>
<polygon fill="blue" stroke="blue" points="4651.72,-9360.7 4655.5,-9370.6 4658.71,-9360.5 4651.72,-9360.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge853" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.22,-7718.49C4305.18,-7727.16 4410.06,-7753.14 4460,-7821.65 4648.53,-8080.28 4656.2,-9170.47 4656.09,-9360.38"/>
<polygon fill="blue" stroke="blue" points="4652.59,-9360.4 4656.08,-9370.41 4659.59,-9360.41 4652.59,-9360.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge856" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-7660.65C3429.39,-7660.65 3592.96,-7660.65 3692.13,-7660.65"/>
<polygon fill="blue" stroke="blue" points="3692.41,-7664.15 3702.41,-7660.65 3692.41,-7657.15 3692.41,-7664.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4266.28,-12044.89C4320.08,-12022.27 4419.06,-11971.59 4460,-11891.65 4483.03,-11846.69 4452.21,-4653.3 4488,-4617.65 4542.95,-4562.92 5130.44,-4563.54 5186,-4617.65 5216.14,-4647 5177.74,-5343.49 5206,-5374.65 5321.84,-5502.38 5475.48,-5294.63 5591,-5422.65 5709.75,-5554.26 5731.42,-11566.77 5732.91,-12030.38"/>
<polygon fill="blue" stroke="blue" points="5729.41,-12030.59 5732.95,-12040.57 5736.41,-12030.56 5729.41,-12030.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M4266.27,-12044.89C4320.06,-12022.26 4419.03,-11971.57 4460,-11891.65 4497.37,-11818.76 4429.94,-6051.44 4488,-5993.65 4542.97,-5938.94 5130.14,-5939.85 5186,-5993.65 5193.62,-6000.99 5409.57,-12077.24 5416,-12085.65 5424.07,-12096.21 5436.24,-12102.73 5448.91,-12106.75"/>
<polygon fill="blue" stroke="blue" points="5448.08,-12110.15 5458.64,-12109.35 5449.89,-12103.38 5448.08,-12110.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node270"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4732,-12224.65 4582,-12224.65 4582,-12188.65 4732,-12188.65 4732,-12224.65"/>
<text text-anchor="middle" x="4657" y="-12202.95" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.17,-12052.26C4315.43,-12045.71 4403.91,-12041.85 4460,-12085.65 4487.72,-12107.29 4462.05,-12135.92 4488,-12159.65 4510.89,-12180.59 4542.35,-12192.3 4571.87,-12198.81"/>
<polygon fill="blue" stroke="blue" points="4571.29,-12202.26 4581.79,-12200.82 4572.69,-12195.4 4571.29,-12202.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node277"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="5079.5,-12096.65 4960.5,-12096.65 4960.5,-12060.65 5079.5,-12060.65 5079.5,-12096.65"/>
<text text-anchor="middle" x="5020" y="-12074.95" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266,-12056.2C4358.88,-12050.3 4614.12,-12036.9 4826,-12051.65 4867.34,-12054.53 4913.3,-12060.83 4950,-12066.63"/>
<polygon fill="blue" stroke="blue" points="4949.67,-12070.12 4960.1,-12068.24 4950.77,-12063.21 4949.67,-12070.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<g id="a_node268"><a xlink:title="fn scalars_summing_to&lt;R: Rng + CryptoRng&gt;(n: NonZeroUsize, s: &amp;Scalar, rng: &amp;mut R) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut v: Vec&lt;Scalar&gt; = repeat_with(|| random_scalar(rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.take(n.get() &#45; 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4736,-12150.65 4578,-12150.65 4578,-12114.65 4736,-12114.65 4736,-12150.65"/>
<text text-anchor="middle" x="4657" y="-12128.95" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4736.33,-12120.93C4800.17,-12111.38 4889.44,-12098.03 4950.47,-12088.9"/>
<polygon fill="blue" stroke="blue" points="4951.02,-12092.36 4960.39,-12087.42 4949.99,-12085.44 4951.02,-12092.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create(&amp;mut self, req_bytes: &amp;[u8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.versions.clear(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4258.5,-12268.65 4199.5,-12268.65 4199.5,-12232.65 4258.5,-12232.65 4258.5,-12268.65"/>
<text text-anchor="middle" x="4229" y="-12246.95" font-family="Helvetica,sans-Serif" font-size="14.00">create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node276"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="4684,-12278.65 4630,-12278.65 4630,-12242.65 4684,-12242.65 4684,-12278.65"/>
<text text-anchor="middle" x="4657" y="-12256.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4258.61,-12251.32C4333.76,-12253.09 4536.66,-12257.85 4619.76,-12259.8"/>
<polygon fill="blue" stroke="blue" points="4619.9,-12263.3 4629.98,-12260.04 4620.06,-12256.31 4619.9,-12263.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M4732.04,-12199.86C4765.22,-12201.02 4802.15,-12208.84 4826,-12233.65 4918.76,-12330.15 4761.86,-12443.84 4862,-12532.65 4915.87,-12580.42 5128.22,-12575.62 5186,-12532.65 5241.68,-12491.24 5279.81,-12273.17 5291.89,-12194.76"/>
<polygon fill="blue" stroke="blue" points="5295.39,-12195.07 5293.42,-12184.66 5288.46,-12194.02 5295.39,-12195.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node271"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="3848.5,-12204.65 3705.5,-12204.65 3705.5,-12168.65 3848.5,-12168.65 3848.5,-12204.65"/>
<text text-anchor="middle" x="3777" y="-12182.95" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3809.23,-12168.48C3850.82,-12145.2 3927.39,-12105.47 3998,-12085.65 4060.08,-12068.23 4134.64,-12062.04 4181.68,-12059.84"/>
<polygon fill="blue" stroke="blue" points="4182.02,-12063.33 4191.87,-12059.41 4181.73,-12056.34 4182.02,-12063.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.81,-12196.72C3945.02,-12210.4 4113.71,-12234.4 4189.37,-12245.16"/>
<polygon fill="blue" stroke="blue" points="4189.01,-12248.64 4199.41,-12246.58 4190,-12241.71 4189.01,-12248.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.7,-12176.54C3891.76,-12170.73 3947.95,-12163.8 3998,-12159.65 4049.21,-12155.41 4414.02,-12162.58 4460,-12139.65 4477.52,-12130.91 4471.02,-12115.39 4488,-12105.65 4528.76,-12082.28 4583.72,-12077.53 4619.5,-12077.28"/>
<polygon fill="blue" stroke="blue" points="4619.94,-12080.78 4629.95,-12077.33 4619.97,-12073.78 4619.94,-12080.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node274"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4694,-12332.65 4620,-12332.65 4620,-12296.65 4694,-12296.65 4694,-12332.65"/>
<text text-anchor="middle" x="4657" y="-12310.95" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.49,-12204.7C3853.64,-12226.41 3928.89,-12261.89 3998,-12277.65 4222.55,-12328.85 4500.8,-12322.41 4609.47,-12317.32"/>
<polygon fill="blue" stroke="blue" points="4609.93,-12320.8 4619.75,-12316.82 4609.59,-12313.81 4609.93,-12320.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.81,-12186.65C3946,-12186.65 4117.16,-12186.65 4191.66,-12186.65"/>
<polygon fill="blue" stroke="blue" points="4191.93,-12190.15 4201.93,-12186.65 4191.93,-12183.15 4191.93,-12190.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-12078.65C4739.57,-12078.65 4869.63,-12078.65 4950.38,-12078.65"/>
<polygon fill="blue" stroke="blue" points="4950.46,-12082.15 4960.46,-12078.65 4950.46,-12075.15 4950.46,-12082.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;fn to_ristretto_scalar(b: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(b.try_into().ok()?).into_option() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5090,-12278.65 4950,-12278.65 4950,-12242.65 5090,-12242.65 5090,-12278.65"/>
<text text-anchor="middle" x="5020" y="-12256.95" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge514" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5043.95,-12242.48C5077.71,-12216.5 5143.54,-12168.7 5206,-12139.65 5210.02,-12137.78 5214.2,-12136 5218.46,-12134.32"/>
<polygon fill="blue" stroke="blue" points="5219.75,-12137.58 5227.89,-12130.79 5217.3,-12131.02 5219.75,-12137.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge623" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M4665.91,-12332.73C4688.26,-12381.26 4757.19,-12514.03 4862,-12563.65 4927.07,-12594.46 5128.69,-12607.24 5186,-12563.65 5246.12,-12517.92 5281.92,-12277.35 5292.6,-12194.62"/>
<polygon fill="blue" stroke="blue" points="5296.08,-12195.04 5293.86,-12184.68 5289.13,-12194.16 5296.08,-12195.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge624" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4694.27,-12309.23C4751.33,-12300.69 4863.44,-12283.92 4939.8,-12272.5"/>
<polygon fill="blue" stroke="blue" points="4940.48,-12275.93 4949.85,-12270.99 4939.45,-12269.01 4940.48,-12275.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge630" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-12183.35C4316.61,-12175.67 4469.52,-12156.29 4567.76,-12143.84"/>
<polygon fill="blue" stroke="blue" points="4568.2,-12147.31 4577.68,-12142.58 4567.32,-12140.36 4568.2,-12147.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge631" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-12187.87C4317.42,-12190.75 4473.63,-12198.09 4571.67,-12202.69"/>
<polygon fill="blue" stroke="blue" points="4571.7,-12206.2 4581.86,-12203.17 4572.03,-12199.2 4571.7,-12206.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge629" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.14,-12186.01C4363.82,-12183.28 4769.98,-12172.26 4826,-12159.65 4880.25,-12147.44 4938.61,-12120.89 4976.78,-12101.5"/>
<polygon fill="blue" stroke="blue" points="4978.74,-12104.42 4986.03,-12096.74 4975.54,-12098.2 4978.74,-12104.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge770" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-12260.65C4737.16,-12260.65 4858.43,-12260.65 4939.55,-12260.65"/>
<polygon fill="blue" stroke="blue" points="4939.73,-12264.15 4949.73,-12260.65 4939.73,-12257.15 4939.73,-12264.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge783" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5079.75,-12077.52C5116.65,-12073.38 5161.69,-12061.31 5186,-12028.65 5212.46,-11993.1 5174.62,-5678.94 5206,-5647.65 5224.94,-5628.77 5590.57,-5659.19 5591,-5659.65 5652.41,-5724.42 5572.03,-12015.33 5627,-12085.65 5627.48,-12086.27 5627.98,-12086.87 5628.48,-12087.46"/>
<polygon fill="blue" stroke="blue" points="5626.06,-12089.99 5635.66,-12094.46 5630.95,-12084.98 5626.06,-12089.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="4332,-12130.65 4126,-12130.65 4126,-12094.65 4332,-12094.65 4332,-12130.65"/>
<text text-anchor="middle" x="4229" y="-12108.95" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge825" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4332.08,-12128.45C4377.94,-12129.39 4428.67,-12120.74 4460,-12085.65 4528.8,-12008.59 4414.81,-4720.56 4488,-4647.65 4541.21,-4594.64 4752.88,-4630.47 4826,-4647.65 4999.95,-4688.51 5089.3,-4676.39 5186,-4826.65 5221.14,-4881.25 5164.47,-5360.74 5206,-5410.65 5258.84,-5474.14 5309.22,-5424.29 5387.5,-5450.65 5481.92,-5482.45 5537.09,-5460.87 5591,-5544.65 5640.16,-5621.05 5571.05,-12014.07 5627,-12085.65 5627.48,-12086.27 5627.98,-12086.87 5628.48,-12087.46"/>
<polygon fill="blue" stroke="blue" points="5626.06,-12089.99 5635.66,-12094.47 5630.95,-12084.98 5626.06,-12089.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge826" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4332.04,-12117.44C4403.8,-12120.81 4498.87,-12125.27 4567.44,-12128.49"/>
<polygon fill="blue" stroke="blue" points="4567.64,-12132.01 4577.79,-12128.98 4567.96,-12125.01 4567.64,-12132.01"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node279"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2639.5,-9959.65 2564.5,-9959.65 2564.5,-9923.65 2639.5,-9923.65 2639.5,-9959.65"/>
<text text-anchor="middle" x="2602" y="-9937.95" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node280"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="3329.5,-9959.65 3186.5,-9959.65 3186.5,-9923.65 3329.5,-9923.65 3329.5,-9959.65"/>
<text text-anchor="middle" x="3258" y="-9937.95" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.56,-9941.65C2742.01,-9941.65 3033.7,-9941.65 3176.39,-9941.65"/>
<polygon fill="blue" stroke="blue" points="3176.41,-9945.15 3186.41,-9941.65 3176.41,-9938.15 3176.41,-9945.15"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node281"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3840,-9959.65 3714,-9959.65 3714,-9923.65 3840,-9923.65 3840,-9959.65"/>
<text text-anchor="middle" x="3777" y="-9937.95" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.53,-9941.65C3427.61,-9941.65 3604.27,-9941.65 3703.42,-9941.65"/>
<polygon fill="blue" stroke="blue" points="3703.65,-9945.15 3713.65,-9941.65 3703.65,-9938.15 3703.65,-9945.15"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node282"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3841,-9905.65 3713,-9905.65 3713,-9869.65 3841,-9869.65 3841,-9905.65"/>
<text text-anchor="middle" x="3777" y="-9883.95" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.53,-9934.28C3427.44,-9924.06 3603.66,-9905.65 3702.91,-9895.28"/>
<polygon fill="blue" stroke="blue" points="3703.28,-9898.77 3712.86,-9894.25 3702.55,-9891.8 3703.28,-9898.77"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.61,-9932.15C3398.19,-9927.3 3499.94,-9932.54 3556,-9994.65 3596.16,-10039.15 3540.43,-10215.4 3576,-10263.65 3689.91,-10418.17 3868.55,-10263.94 3978,-10421.65 4015.19,-10475.24 3954.23,-11547.28 3998,-11595.65 4040.19,-11642.28 4116.69,-11642.01 4169.82,-11634.74"/>
<polygon fill="blue" stroke="blue" points="4170.41,-11638.19 4179.79,-11633.26 4169.38,-11631.27 4170.41,-11638.19"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.53,-9932.77C3397.56,-9928.52 3498.44,-9934.29 3556,-9994.65 3603.63,-10044.6 3536.06,-10092.36 3576,-10148.65 3691.72,-10311.72 3871.62,-10181.34 3978,-10350.65 4013.21,-10406.68 3953.61,-11492.58 3998,-11541.65 4046.45,-11595.21 4140.14,-11586.9 4191.74,-11577.18"/>
<polygon fill="blue" stroke="blue" points="4192.65,-11580.56 4201.77,-11575.17 4191.28,-11573.7 4192.65,-11580.56"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.55,-9947.55C3483.36,-9964.79 3845.69,-10030.23 3978,-10269.65 4010.65,-10328.74 3953.04,-11434.29 3998,-11484.65 4046.17,-11538.61 4139.98,-11531.62 4191.66,-11522.64"/>
<polygon fill="blue" stroke="blue" points="4192.52,-11526.04 4201.72,-11520.78 4191.25,-11519.16 4192.52,-11526.04"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3794.13,-9959.88C3834.61,-10006.99 3940,-10138.31 3978,-10269.65 3987.82,-10303.6 3974.31,-11515.43 3998,-11541.65 4046.42,-11595.23 4140.13,-11586.91 4191.73,-11577.18"/>
<polygon fill="blue" stroke="blue" points="4192.65,-11580.57 4201.77,-11575.17 4191.27,-11573.7 4192.65,-11580.57"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge603" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.09,-9876.86C3886.28,-9873.1 3944.8,-9877.13 3978,-9914.65 4007.95,-9948.5 3967.75,-11508.06 3998,-11541.65 4046.33,-11595.32 4140.07,-11586.96 4191.7,-11577.2"/>
<polygon fill="blue" stroke="blue" points="4192.63,-11580.59 4201.75,-11575.19 4191.25,-11573.72 4192.63,-11580.59"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge602" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.09,-9876.86C3886.27,-9873.11 3944.79,-9877.14 3978,-9914.65 4035.82,-9979.96 3940.03,-11419.47 3998,-11484.65 4046.07,-11538.7 4139.92,-11531.67 4191.64,-11522.67"/>
<polygon fill="blue" stroke="blue" points="4192.5,-11526.06 4201.7,-11520.8 4191.23,-11519.18 4192.5,-11526.06"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().</title>
<g id="a_node283"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(&amp;nickname, discriminator).u...">
<polygon fill="white" stroke="black" points="5168.5,-11849.65 4871.5,-11849.65 4871.5,-11813.65 5168.5,-11813.65 5168.5,-11849.65"/>
<text text-anchor="middle" x="5020" y="-11827.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<g id="a_node293"><a xlink:title="fn username_sha_scalar(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;let mut hash = Sha512::new(); &#160;&#160;&#160;&#160;hash.update(nickname.as_bytes()); &#160;&#160;&#160;&#160;hash.update([0x00]); &#160;&#160;&#160;&#160;hash....">
<polygon fill="white" stroke="black" points="5379.5,-11849.65 5214.5,-11849.65 5214.5,-11813.65 5379.5,-11813.65 5379.5,-11849.65"/>
<text text-anchor="middle" x="5297" y="-11827.95" font-family="Helvetica,sans-Serif" font-size="14.00">username_sha_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5168.56,-11831.65C5180.68,-11831.65 5192.7,-11831.65 5204.23,-11831.65"/>
<polygon fill="blue" stroke="blue" points="5204.23,-11835.15 5214.23,-11831.65 5204.23,-11828.15 5204.23,-11835.15"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().</title>
<g id="a_node284"><a xlink:title=" &#160;&#160;&#160;fn invalid_discriminators() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (discriminator, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::DiscriminatorCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; 0&#39; , UsernameError::DiscriminatorCannot...">
<polygon fill="white" stroke="black" points="3861,-11802.65 3693,-11802.65 3693,-11766.65 3861,-11766.65 3861,-11802.65"/>
<text text-anchor="middle" x="3777" y="-11780.95" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_discriminators</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-11775.98C3951.84,-11766.49 4094.71,-11751.57 4172.7,-11743.43"/>
<polygon fill="blue" stroke="blue" points="4173.21,-11746.89 4182.8,-11742.37 4172.49,-11739.93 4173.21,-11746.89"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.08,-11795.19C3901.69,-11795.51 3948.13,-11787.86 3978,-11757.65 4029.01,-11706.06 3946.55,-11646.8 3998,-11595.65 4049.08,-11544.87 4141.31,-11551.94 4192.08,-11560.76"/>
<polygon fill="blue" stroke="blue" points="4191.48,-11564.21 4201.95,-11562.59 4192.76,-11557.33 4191.48,-11564.21"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<g id="a_node295"><a xlink:title=" &#160;&#160;&#160;fn from_parts_without_soft_limit( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;validate_prefix(nickname)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let discriminator = valida...">
<polygon fill="white" stroke="black" points="4766.5,-11755.65 4547.5,-11755.65 4547.5,-11719.65 4766.5,-11719.65 4766.5,-11755.65"/>
<text text-anchor="middle" x="4657" y="-11733.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts_without_soft_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4275.19,-11737.65C4336.98,-11737.65 4450.09,-11737.65 4537.04,-11737.65"/>
<polygon fill="blue" stroke="blue" points="4537.24,-11741.15 4547.24,-11737.65 4537.24,-11734.15 4537.24,-11741.15"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="3843.5,-11694.65 3710.5,-11694.65 3710.5,-11658.65 3843.5,-11658.65 3843.5,-11694.65"/>
<text text-anchor="middle" x="3777" y="-11672.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.65,-11684.03C3886.28,-11685.23 3940.67,-11679.54 3978,-11649.65 3997.98,-11633.65 3977.88,-11611.47 3998,-11595.65 4053.94,-11551.65 4142.48,-11555.59 4191.8,-11562.21"/>
<polygon fill="blue" stroke="blue" points="4191.59,-11565.72 4201.99,-11563.69 4192.6,-11558.79 4191.59,-11565.72"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().</title>
<g id="a_node287"><a xlink:title=" &#160;&#160;&#160;fn nicknames_exceeding_soft_limits() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39; 42&#39; , NicknameLimits::default()).expect(&#39; valid&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39;...">
<polygon fill="white" stroke="black" points="3900,-11856.65 3654,-11856.65 3654,-11820.65 3900,-11820.65 3900,-11856.65"/>
<text text-anchor="middle" x="3777" y="-11834.95" font-family="Helvetica,sans-Serif" font-size="14.00">nicknames_exceeding_soft_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3900.15,-11825.2C3925.98,-11821.5 3952.99,-11817.01 3978,-11811.65 4046.26,-11797.03 4123,-11773.17 4173.24,-11756.51"/>
<polygon fill="blue" stroke="blue" points="4174.54,-11759.76 4182.92,-11753.28 4172.33,-11753.12 4174.54,-11759.76"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node288"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3922.5,-11532.65 3631.5,-11532.65 3631.5,-11496.65 3922.5,-11496.65 3922.5,-11532.65"/>
<text text-anchor="middle" x="3777" y="-11510.95" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.62,-11515.12C3942.7,-11520.4 3961.93,-11528.79 3978,-11541.65 3997.98,-11557.65 3977.88,-11579.83 3998,-11595.65 4046.34,-11633.67 4119.02,-11635.89 4169.71,-11631.53"/>
<polygon fill="blue" stroke="blue" points="4170.24,-11634.99 4179.85,-11630.54 4169.56,-11628.02 4170.24,-11634.99"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.66,-11532.51C3947.77,-11535.58 3973.64,-11538.73 3998,-11541.65 4066.51,-11549.88 4146.54,-11559.21 4191.85,-11564.47"/>
<polygon fill="blue" stroke="blue" points="4191.44,-11567.94 4201.78,-11565.62 4192.25,-11560.99 4191.44,-11567.94"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.55,-11514.65C4017.15,-11514.65 4133.6,-11514.65 4191.59,-11514.65"/>
<polygon fill="blue" stroke="blue" points="4191.72,-11518.15 4201.72,-11514.65 4191.72,-11511.15 4191.72,-11518.15"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4278.33,-11633.36C4331.53,-11641.98 4415.4,-11645.57 4460,-11595.65 4520.79,-11527.6 4436.11,-5100.71 4488,-5025.65 4578.04,-4895.41 5072.09,-4772.68 5186,-4882.65 5208.72,-4904.58 5199.53,-5419.75 5206,-5450.65 5221.79,-5526.1 5260.56,-5608.89 5281.69,-5650.53"/>
<polygon fill="blue" stroke="blue" points="5278.61,-5652.19 5286.29,-5659.49 5284.84,-5649 5278.61,-5652.19"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.21,-11567.52C4300,-11566.53 4390.14,-11568.4 4460,-11595.65 4528.79,-11622.48 4595.48,-11679.38 4630.55,-11712.43"/>
<polygon fill="blue" stroke="blue" points="4628.3,-11715.12 4637.95,-11719.49 4633.14,-11710.06 4628.3,-11715.12"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().</title>
<g id="a_node291"><a xlink:title=" &#160;&#160;&#160;fn invalid_nicknames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (nickname, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::NicknameCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; ab🦀d&#39; , UsernameError::BadNicknameCharacter), &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3849,-11748.65 3705,-11748.65 3705,-11712.65 3849,-11712.65 3849,-11748.65"/>
<text text-anchor="middle" x="3777" y="-11726.95" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_nicknames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3849.3,-11731.76C3939.02,-11733.16 4091.19,-11735.52 4172.65,-11736.79"/>
<polygon fill="blue" stroke="blue" points="4172.65,-11740.29 4182.7,-11736.95 4172.75,-11733.29 4172.65,-11740.29"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3849.26,-11740.21C3891.98,-11741.77 3944.38,-11735.66 3978,-11703.65 4013.35,-11669.99 3962.36,-11629.01 3998,-11595.65 4050.34,-11546.66 4141.36,-11552.82 4191.78,-11561.07"/>
<polygon fill="blue" stroke="blue" points="4191.44,-11564.56 4201.89,-11562.84 4192.64,-11557.67 4191.44,-11564.56"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.35,-11520.83C4305.05,-11530.51 4408.85,-11542.62 4460,-11484.65 4512.69,-11424.93 4435.47,-5810.51 4488,-5750.65 4538,-5693.67 4750.91,-5715.01 4826,-5704.65 4880.07,-5697.19 4942.64,-5688.41 4981.52,-5682.94"/>
<polygon fill="blue" stroke="blue" points="4982.42,-5686.34 4991.84,-5681.48 4981.45,-5679.41 4982.42,-5686.34"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5339.56,-11849.91C5357.12,-11859.75 5376.12,-11873.62 5387.5,-11891.65 5434.02,-11965.35 5359.39,-12019.39 5416,-12085.65 5424.47,-12095.56 5436.51,-12101.88 5448.94,-12105.9"/>
<polygon fill="blue" stroke="blue" points="5448.35,-12109.37 5458.92,-12108.66 5450.21,-12102.62 5448.35,-12109.37"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node294"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="3904,-11640.65 3650,-11640.65 3650,-11604.65 3904,-11604.65 3904,-11640.65"/>
<text text-anchor="middle" x="3777" y="-11618.95" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge505" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.25,-11622.65C3991.24,-11622.65 4102.8,-11622.65 4169.66,-11622.65"/>
<polygon fill="blue" stroke="blue" points="4170,-11626.15 4180,-11622.65 4170,-11619.15 4170,-11626.15"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge504" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.21,-11607.05C3934.9,-11603.28 3967.63,-11599.3 3998,-11595.65 4066.51,-11587.43 4146.54,-11578.09 4191.85,-11572.84"/>
<polygon fill="blue" stroke="blue" points="4192.25,-11576.31 4201.78,-11571.68 4191.44,-11569.36 4192.25,-11576.31"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge503" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.23,-11626.15C3930.8,-11621.55 3957.08,-11612.4 3978,-11595.65 3997.98,-11579.65 3977.88,-11557.47 3998,-11541.65 4053.94,-11497.65 4142.48,-11501.59 4191.8,-11508.21"/>
<polygon fill="blue" stroke="blue" points="4191.59,-11511.72 4201.99,-11509.69 4192.6,-11504.79 4191.59,-11511.72"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node296"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5075,-11782.65 4965,-11782.65 4965,-11746.65 5075,-11746.65 5075,-11782.65"/>
<text text-anchor="middle" x="5020" y="-11760.95" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="edge601" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4766.8,-11745.79C4828.11,-11750.37 4902.6,-11755.94 4954.66,-11759.84"/>
<polygon fill="blue" stroke="blue" points="4954.53,-11763.34 4964.77,-11760.59 4955.06,-11756.36 4954.53,-11763.34"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge798" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5075.26,-11777.76C5107.45,-11785.55 5149.06,-11795.64 5186,-11804.65 5194.7,-11806.77 5203.78,-11808.99 5212.84,-11811.21"/>
<polygon fill="blue" stroke="blue" points="5212.09,-11814.63 5222.64,-11813.61 5213.76,-11807.83 5212.09,-11814.63"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().</title>
<g id="a_node297"><a xlink:title=" &#160;&#160;&#160;fn no_discriminator() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::new(&#39; no_discriminator&#39; ).expect_err(&#39; not a valid username&#39; ), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UsernameError::MissingSeparator &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3843,-11586.65 3711,-11586.65 3711,-11550.65 3843,-11550.65 3843,-11586.65"/>
<text text-anchor="middle" x="3777" y="-11564.95" font-family="Helvetica,sans-Serif" font-size="14.00">no_discriminator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge863" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.43,-11568.65C3939.5,-11568.65 4115.54,-11568.65 4191.51,-11568.65"/>
<polygon fill="blue" stroke="blue" points="4191.97,-11572.15 4201.97,-11568.65 4191.97,-11565.15 4191.97,-11572.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node298"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="4301,-5958.65 4157,-5958.65 4157,-5922.65 4301,-5922.65 4301,-5958.65"/>
<text text-anchor="middle" x="4229" y="-5936.95" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4301.2,-5954.28C4353.17,-5959.69 4421.07,-5956.5 4460,-5913.65 4510.07,-5858.53 4434.8,-4625.75 4488,-4573.65 4598.82,-4465.12 5074.84,-4465.47 5186,-4573.65 5215.35,-4602.22 5179.14,-5279.73 5206,-5310.65 5262.91,-5376.15 5534.29,-5309.99 5591,-5375.65 5707.69,-5510.75 5731.26,-11563.48 5732.9,-12030.19"/>
<polygon fill="blue" stroke="blue" points="5729.4,-12030.47 5732.94,-12040.45 5736.4,-12030.44 5729.4,-12030.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node308" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node308"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="4696.5,-6041.65 4617.5,-6041.65 4617.5,-6005.65 4696.5,-6005.65 4696.5,-6041.65"/>
<text text-anchor="middle" x="4657" y="-6019.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.3,-5954.54C4388.06,-5971.45 4532.21,-5999.53 4607.24,-6014.15"/>
<polygon fill="blue" stroke="blue" points="4606.87,-6017.64 4617.35,-6016.12 4608.21,-6010.77 4606.87,-6017.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node313" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node313"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4737,-6203.65 4577,-6203.65 4577,-6167.65 4737,-6167.65 4737,-6203.65"/>
<text text-anchor="middle" x="4657" y="-6181.95" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.11,-5937.59C4352.5,-5939.44 4419.72,-5950.95 4460,-5993.65 4511.04,-6047.76 4435.17,-6106.29 4488,-6158.65 4508.64,-6179.11 4538.24,-6187.84 4566.85,-6190.82"/>
<polygon fill="blue" stroke="blue" points="4566.66,-6194.31 4576.92,-6191.64 4567.24,-6187.34 4566.66,-6194.31"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node315" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node315"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="4684,-6257.65 4630,-6257.65 4630,-6221.65 4684,-6221.65 4684,-6257.65"/>
<text text-anchor="middle" x="4657" y="-6235.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.08,-5937.1C4352.81,-5938.64 4420.47,-5949.98 4460,-5993.65 4525.86,-6066.39 4419.74,-6142.16 4488,-6212.65 4521.72,-6247.47 4581.22,-6248.75 4619.61,-6245.18"/>
<polygon fill="blue" stroke="blue" points="4620.28,-6248.62 4629.84,-6244.06 4619.52,-6241.67 4620.28,-6248.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node317" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node317"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4702.5,-6149.65 4611.5,-6149.65 4611.5,-6113.65 4702.5,-6113.65 4702.5,-6149.65"/>
<text text-anchor="middle" x="4657" y="-6127.95" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.21,-5938.58C4351.98,-5941.04 4418.36,-5952.86 4460,-5993.65 4496.35,-6029.25 4450.48,-6070.29 4488,-6104.65 4518.17,-6132.28 4564.86,-6137.92 4601.37,-6137.27"/>
<polygon fill="blue" stroke="blue" points="4601.49,-6140.77 4611.37,-6136.94 4601.26,-6133.77 4601.49,-6140.77"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node318" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node318"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="4690,-6311.65 4624,-6311.65 4624,-6275.65 4690,-6275.65 4690,-6311.65"/>
<text text-anchor="middle" x="4657" y="-6289.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.13,-5936.81C4353.06,-5938.18 4420.95,-5949.42 4460,-5993.65 4500.36,-6039.37 4446.13,-6222.31 4488,-6266.65 4519.61,-6300.12 4575,-6302.85 4613.49,-6299.86"/>
<polygon fill="blue" stroke="blue" points="4614.24,-6303.3 4623.87,-6298.88 4613.59,-6296.33 4614.24,-6303.3"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node319" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node319"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="4702.5,-6095.65 4611.5,-6095.65 4611.5,-6059.65 4702.5,-6059.65 4702.5,-6095.65"/>
<text text-anchor="middle" x="4657" y="-6073.95" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.19,-5941.48C4350.47,-5945.5 4415.05,-5958.01 4460,-5993.65 4482.12,-6011.19 4465.31,-6033.87 4488,-6050.65 4520.32,-6074.55 4565.74,-6080.67 4601.21,-6081.16"/>
<polygon fill="blue" stroke="blue" points="4601.4,-6084.66 4611.4,-6081.15 4601.4,-6077.66 4601.4,-6084.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node331" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node331"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="5547,-4045.65 5460,-4045.65 5460,-4009.65 5547,-4009.65 5547,-4045.65"/>
<text text-anchor="middle" x="5503.5" y="-4023.95" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.1,-5954.4C4353.19,-5959.93 4421.3,-5956.85 4460,-5913.65 4532.18,-5833.09 4411.24,-2095.86 4488,-2019.65 4514.65,-1993.19 4798.77,-1993.79 4826,-2019.65 4882.39,-2073.21 4808.83,-2661.89 4862,-2718.65 4961.12,-2824.46 5082.49,-2655.13 5186,-2756.65 5232.76,-2802.51 5161.98,-2854.16 5206,-2902.65 5261.72,-2964.03 5334.34,-2882.04 5387.5,-2945.65 5424.96,-2990.47 5409.93,-3412.55 5416,-3470.65 5437.32,-3674.64 5481.71,-3917.96 5497.1,-3999.48"/>
<polygon fill="blue" stroke="blue" points="5493.7,-4000.29 5499,-4009.47 5500.57,-3998.99 5493.7,-4000.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node299"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="4287.5,-5904.65 4170.5,-5904.65 4170.5,-5868.65 4287.5,-5868.65 4287.5,-5904.65"/>
<text text-anchor="middle" x="4229" y="-5882.95" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.55,-5880.86C4336.76,-5878.69 4407.71,-5882.41 4460,-5913.65 4478.63,-5924.78 4471.09,-5940.05 4488,-5953.65 4523.33,-5982.07 4571.84,-6000.63 4607.66,-6011.44"/>
<polygon fill="blue" stroke="blue" points="4606.82,-6014.85 4617.4,-6014.29 4608.78,-6008.13 4606.82,-6014.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.53,-5875.75C4339.69,-5869.48 4415.09,-5870.01 4460,-5913.65 4521.53,-5973.44 4427.75,-6043.57 4488,-6104.65 4516.92,-6133.97 4564.15,-6139.36 4601.18,-6138.2"/>
<polygon fill="blue" stroke="blue" points="4601.52,-6141.68 4611.34,-6137.71 4601.18,-6134.69 4601.52,-6141.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.72,-5876.26C4339.47,-5870.49 4414.11,-5871.49 4460,-5913.65 4505.77,-5955.69 4443.14,-6007.64 4488,-6050.65 4517.63,-6079.05 4564.58,-6084.58 4601.33,-6083.69"/>
<polygon fill="blue" stroke="blue" points="4601.55,-6087.19 4611.4,-6083.29 4601.26,-6080.19 4601.55,-6087.19"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node300"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3814.5,-5904.65 3739.5,-5904.65 3739.5,-5868.65 3814.5,-5868.65 3814.5,-5904.65"/>
<text text-anchor="middle" x="3777" y="-5882.95" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge686" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.58,-5891.2C3858.24,-5896.61 3933.43,-5905.9 3998,-5913.65 4047.35,-5919.58 4102.67,-5926.07 4146.69,-5931.21"/>
<polygon fill="blue" stroke="blue" points="4146.42,-5934.7 4156.76,-5932.39 4147.23,-5927.75 4146.42,-5934.7"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge687" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.83,-5886.65C3890.37,-5886.65 4063.85,-5886.65 4160.27,-5886.65"/>
<polygon fill="blue" stroke="blue" points="4160.49,-5890.15 4170.49,-5886.65 4160.49,-5883.15 4160.49,-5890.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node301"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="4746,-3523.65 4568,-3523.65 4568,-3487.65 4746,-3487.65 4746,-3523.65"/>
<text text-anchor="middle" x="4657" y="-3501.95" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge685" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3791.91,-5868.43C3830.76,-5816.27 3940.06,-5660.45 3978,-5510.65 3987.37,-5473.66 3970.92,-2790.53 3998,-2763.65 4143.72,-2618.99 4297.32,-2638.36 4460,-2763.65 4577.97,-2854.5 4639.35,-3352.3 4653.03,-3477.21"/>
<polygon fill="blue" stroke="blue" points="4649.59,-3477.91 4654.14,-3487.48 4656.54,-3477.16 4649.59,-3477.91"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node302"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="5064,-4278.65 4976,-4278.65 4976,-4242.65 5064,-4242.65 5064,-4278.65"/>
<text text-anchor="middle" x="5020" y="-4256.95" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4746.06,-3513.24C4776.04,-3520.44 4806.8,-3533.87 4826,-3558.65 4918.01,-3677.39 4762.18,-4121.4 4862,-4233.65 4887.34,-4262.15 4930.93,-4267.78 4965.76,-4266.91"/>
<polygon fill="blue" stroke="blue" points="4965.95,-4270.4 4975.79,-4266.48 4965.65,-4263.41 4965.95,-4270.4"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="node303" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<g id="a_node303"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a1 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a2 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_scalars(a1, a2) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5069.5,-4224.65 4970.5,-4224.65 4970.5,-4188.65 5069.5,-4188.65 5069.5,-4224.65"/>
<text text-anchor="middle" x="5020" y="-4202.95" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4746.1,-3516.65C4774.83,-3524.25 4804.76,-3537.07 4826,-3558.65 5004.35,-3739.9 5019.06,-4078.41 5019.36,-4178.25"/>
<polygon fill="blue" stroke="blue" points="5015.86,-4178.44 5019.35,-4188.45 5022.86,-4178.45 5015.86,-4178.44"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5064.3,-4260.29C5103,-4262.56 5157.82,-4272.7 5186,-4309.65 5218.38,-4352.11 5171.67,-5229.75 5206,-5270.65 5318.14,-5404.23 5478.84,-5213.09 5591,-5346.65 5706.3,-5483.95 5731.15,-11561.46 5732.9,-12030.08"/>
<polygon fill="blue" stroke="blue" points="5729.4,-12030.39 5732.94,-12040.38 5736.4,-12030.37 5729.4,-12030.39"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5069.55,-4214.07C5143.19,-4222.87 5285.32,-4230.08 5387.5,-4174.65 5437.1,-4147.75 5472.43,-4089.43 5489.95,-4054.88"/>
<polygon fill="blue" stroke="blue" points="5493.14,-4056.33 5494.42,-4045.82 5486.86,-4053.24 5493.14,-4056.33"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair(). -->
<g id="node304" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().</title>
<g id="a_node304"><a xlink:title=" &#160;&#160;&#160;fn round_trip_key_pair() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = CredentialKeyPair::generate([0x42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deserialized: Cr...">
<polygon fill="white" stroke="black" points="5096,-2629.65 4944,-2629.65 4944,-2593.65 5096,-2593.65 5096,-2629.65"/>
<text text-anchor="middle" x="5020" y="-2607.95" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="node307" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<g id="a_node307"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CredentialPrivateKey::generate(randomness).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5336.5,-2629.65 5257.5,-2629.65 5257.5,-2593.65 5336.5,-2593.65 5336.5,-2629.65"/>
<text text-anchor="middle" x="5297" y="-2607.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5096.14,-2611.65C5144.23,-2611.65 5205.23,-2611.65 5247.11,-2611.65"/>
<polygon fill="blue" stroke="blue" points="5247.33,-2615.15 5257.33,-2611.65 5247.33,-2608.15 5247.33,-2615.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="node305" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<g id="a_node305"><a xlink:title=" &#160;&#160;&#160;fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ShoHmacSha256::new(b&#39; Signal_ZKCredential_CredentialPrivateKey_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_an...">
<polygon fill="white" stroke="black" points="5543,-2656.65 5464,-2656.65 5464,-2620.65 5543,-2620.65 5543,-2656.65"/>
<text text-anchor="middle" x="5503.5" y="-2634.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge542" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5503.5,-2656.96C5503.5,-3104.42 5503.5,-3551.88 5503.5,-3999.34"/>
<polygon fill="blue" stroke="blue" points="5500,-3999.58 5503.5,-4009.58 5507,-3999.58 5500,-3999.58"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node306" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node306"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="5080.5,-2683.65 4959.5,-2683.65 4959.5,-2647.65 5080.5,-2647.65 5080.5,-2683.65"/>
<text text-anchor="middle" x="5020" y="-2661.95" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge597" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5080.9,-2669.33C5116.81,-2674.83 5160.35,-2687.94 5186,-2718.65 5229.4,-2770.61 5159.95,-2820.03 5206,-2869.65 5262.06,-2930.06 5333.72,-2845.2 5387.5,-2907.65 5423.52,-2949.48 5410.62,-3348.71 5416,-3403.65 5438.63,-3634.84 5483.25,-3911.93 5497.79,-3999.62"/>
<polygon fill="blue" stroke="blue" points="5494.36,-4000.3 5499.45,-4009.59 5501.26,-3999.15 5494.36,-4000.3"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="edge684" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5336.95,-2616.79C5370.07,-2621.17 5417.79,-2627.47 5453.5,-2632.18"/>
<polygon fill="blue" stroke="blue" points="5453.33,-2635.69 5463.7,-2633.53 5454.24,-2628.75 5453.33,-2635.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4695.9,-6005.59C4736.48,-5983.93 4798.69,-5943.43 4826,-5887.65 4869.46,-5798.87 4795.89,-4182.14 4862,-4108.65 4881.65,-4086.81 5298.94,-4046.39 5449.19,-4032.49"/>
<polygon fill="blue" stroke="blue" points="5449.9,-4035.94 5459.54,-4031.54 5449.26,-4028.97 5449.9,-4035.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node309" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node309"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="4327,-6095.65 4131,-6095.65 4131,-6059.65 4327,-6059.65 4327,-6095.65"/>
<text text-anchor="middle" x="4229" y="-6073.95" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.14,-6066.68C4368.16,-6061.94 4416.43,-6056.21 4460,-6050.65 4510.31,-6044.23 4567.78,-6036.24 4607.42,-6030.62"/>
<polygon fill="blue" stroke="blue" points="4607.95,-6034.08 4617.35,-6029.21 4606.96,-6027.15 4607.95,-6034.08"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.27,-6069.27C4371.25,-6070.18 4421.8,-6078.25 4460,-6104.65 4482.24,-6120.02 4466.09,-6142.81 4488,-6158.65 4510.6,-6174.99 4539.38,-6182.95 4566.71,-6186.49"/>
<polygon fill="blue" stroke="blue" points="4566.37,-6189.97 4576.7,-6187.6 4567.14,-6183.01 4566.37,-6189.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.27,-6065.55C4372.58,-6065.3 4424.24,-6073.48 4460,-6104.65 4497.38,-6137.23 4451.32,-6179.28 4488,-6212.65 4523.65,-6245.09 4582.1,-6247.15 4619.81,-6244.37"/>
<polygon fill="blue" stroke="blue" points="4620.2,-6247.85 4629.86,-6243.48 4619.59,-6240.88 4620.2,-6247.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.14,-6088.62C4368.16,-6093.36 4416.43,-6099.09 4460,-6104.65 4507.8,-6110.75 4562.07,-6118.27 4601.37,-6123.83"/>
<polygon fill="blue" stroke="blue" points="4600.88,-6127.29 4611.27,-6125.23 4601.86,-6120.36 4600.88,-6127.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.26,-6064.31C4373.12,-6063.6 4425.26,-6071.75 4460,-6104.65 4513.05,-6154.9 4436.03,-6215.29 4488,-6266.65 4520.65,-6298.92 4575.56,-6301.96 4613.68,-6299.37"/>
<polygon fill="blue" stroke="blue" points="4614.28,-6302.83 4623.95,-6298.51 4613.7,-6295.86 4614.28,-6302.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.2,-6077.65C4411.99,-6077.65 4531.95,-6077.65 4601.08,-6077.65"/>
<polygon fill="blue" stroke="blue" points="4601.32,-6081.15 4611.32,-6077.65 4601.32,-6074.15 4601.32,-6081.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.05,-6093.26C4374.16,-6094.93 4427.47,-6086.96 4460,-6050.65 4533.31,-5968.82 4410.04,-2173.06 4488,-2095.65 4514.65,-2069.19 4798.82,-2069.73 4826,-2095.65 4887.18,-2154 4811.43,-2787.9 4862,-2855.65 4958.86,-2985.41 5050.93,-2929.05 5206,-2975.65 5285.7,-2999.6 5334.34,-2957.63 5387.5,-3021.65 5419.43,-3060.11 5410.58,-3420.96 5416,-3470.65 5438.26,-3674.55 5482.05,-3917.93 5497.2,-3999.47"/>
<polygon fill="blue" stroke="blue" points="5493.78,-4000.27 5499.06,-4009.46 5500.67,-3998.99 5493.78,-4000.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node310" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node310"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="4279.5,-6203.65 4178.5,-6203.65 4178.5,-6167.65 4279.5,-6167.65 4279.5,-6203.65"/>
<text text-anchor="middle" x="4229" y="-6181.95" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.92,-6194.66C4331.35,-6200.89 4410.75,-6201.58 4460,-6158.65 4497.38,-6126.07 4451.32,-6084.02 4488,-6050.65 4519.86,-6021.67 4569.92,-6016.94 4607.11,-6018.24"/>
<polygon fill="blue" stroke="blue" points="4607.07,-6021.74 4617.24,-6018.75 4607.43,-6014.75 4607.07,-6021.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.7,-6185.65C4350,-6185.65 4479.63,-6185.65 4566.83,-6185.65"/>
<polygon fill="blue" stroke="blue" points="4566.98,-6189.15 4576.98,-6185.65 4566.98,-6182.15 4566.98,-6189.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.84,-6191.21C4326.45,-6196.48 4397.98,-6204.74 4460,-6212.65 4515.83,-6219.77 4580.49,-6228.84 4619.8,-6234.44"/>
<polygon fill="blue" stroke="blue" points="4619.31,-6237.91 4629.71,-6235.86 4620.3,-6230.98 4619.31,-6237.91"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.84,-6180.09C4326.45,-6174.82 4397.98,-6166.56 4460,-6158.65 4507.8,-6152.55 4562.07,-6145.03 4601.37,-6139.48"/>
<polygon fill="blue" stroke="blue" points="4601.86,-6142.94 4611.27,-6138.07 4600.88,-6136.01 4601.86,-6142.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.51,-6178.84C4329.51,-6174.66 4406.75,-6175.85 4460,-6212.65 4482.24,-6228.02 4466.09,-6250.81 4488,-6266.65 4524.39,-6292.95 4576.79,-6297.54 4613.36,-6296.93"/>
<polygon fill="blue" stroke="blue" points="4613.81,-6300.41 4623.7,-6296.61 4613.6,-6293.42 4613.81,-6300.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.51,-6192.46C4329.51,-6196.64 4406.75,-6195.45 4460,-6158.65 4482.24,-6143.28 4466.09,-6120.49 4488,-6104.65 4520.47,-6081.18 4565.68,-6075 4601.03,-6074.38"/>
<polygon fill="blue" stroke="blue" points="4601.19,-6077.88 4611.18,-6074.34 4601.17,-6070.88 4601.19,-6077.88"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.75,-6196.57C4332.98,-6204.99 4415.74,-6208.06 4460,-6158.65 4533.34,-6076.78 4410,-2279.1 4488,-2201.65 4514.65,-2175.19 4798.84,-2175.71 4826,-2201.65 4888.75,-2261.57 4836.55,-2898.71 4862,-2981.65 5000.97,-3434.45 5381.99,-3890.07 5479.52,-4001.77"/>
<polygon fill="blue" stroke="blue" points="5477.08,-4004.29 5486.3,-4009.51 5482.34,-3999.68 5477.08,-4004.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node311" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node311"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="4300.5,-6041.65 4157.5,-6041.65 4157.5,-6005.65 4300.5,-6005.65 4300.5,-6041.65"/>
<text text-anchor="middle" x="4229" y="-6019.95" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.82,-6023.65C4387.48,-6023.65 4531.92,-6023.65 4607.12,-6023.65"/>
<polygon fill="blue" stroke="blue" points="4607.26,-6027.15 4617.26,-6023.65 4607.26,-6020.15 4607.26,-6027.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.75,-6011.66C4351.62,-6007.34 4418.33,-6011.18 4460,-6050.65 4513.05,-6100.9 4436.03,-6161.29 4488,-6212.65 4522.38,-6246.63 4581.44,-6248.2 4619.59,-6244.91"/>
<polygon fill="blue" stroke="blue" points="4620.16,-6248.37 4629.75,-6243.88 4619.45,-6241.41 4620.16,-6248.37"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.61,-6015.54C4349.48,-6013.6 4413.78,-6018.71 4460,-6050.65 4482.24,-6066.02 4466.09,-6088.81 4488,-6104.65 4520.47,-6128.12 4565.68,-6134.3 4601.03,-6134.92"/>
<polygon fill="blue" stroke="blue" points="4601.17,-6138.42 4611.18,-6134.96 4601.19,-6131.42 4601.17,-6138.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.7,-6011.19C4351.89,-6006.54 4419.03,-6010.17 4460,-6050.65 4528.86,-6118.69 4420.6,-6197.17 4488,-6266.65 4519.96,-6299.6 4575.02,-6302.5 4613.36,-6299.68"/>
<polygon fill="blue" stroke="blue" points="4614.05,-6303.14 4623.7,-6298.76 4613.43,-6296.17 4614.05,-6303.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.51,-6031.56C4346.05,-6036.76 4406.56,-6043.83 4460,-6050.65 4507.8,-6056.75 4562.07,-6064.27 4601.37,-6069.83"/>
<polygon fill="blue" stroke="blue" points="4600.88,-6073.29 4611.27,-6071.23 4601.86,-6066.36 4600.88,-6073.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.68,-6036.32C4352.91,-6041.19 4421.39,-6037.31 4460,-5993.65 4532.43,-5911.75 4410.41,-2134.69 4488,-2057.65 4514.65,-2031.19 4798.77,-2031.79 4826,-2057.65 4882,-2110.82 4820.83,-2686.33 4862,-2751.65 4954.78,-2898.87 5043.79,-2875.65 5206,-2938.65 5283.47,-2968.74 5334.4,-2919.72 5387.5,-2983.65 5422.13,-3025.35 5410.25,-3416.75 5416,-3470.65 5437.75,-3674.6 5481.87,-3917.95 5497.15,-3999.48"/>
<polygon fill="blue" stroke="blue" points="5493.74,-4000.28 5499.03,-4009.46 5500.62,-3998.99 5493.74,-4000.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node312" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node312"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="4273,-6149.65 4185,-6149.65 4185,-6113.65 4273,-6113.65 4273,-6149.65"/>
<text text-anchor="middle" x="4229" y="-6127.95" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.15,-6137.88C4322.74,-6142.68 4404.43,-6143.05 4460,-6104.65 4482.24,-6089.28 4466.09,-6066.49 4488,-6050.65 4522.32,-6025.84 4570.88,-6020.35 4606.97,-6020.32"/>
<polygon fill="blue" stroke="blue" points="4607.23,-6023.83 4617.27,-6020.46 4607.32,-6016.83 4607.23,-6023.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.27,-6136.47C4319.52,-6141.68 4394.99,-6150.36 4460,-6158.65 4494.89,-6163.1 4533.23,-6168.31 4566.68,-6172.96"/>
<polygon fill="blue" stroke="blue" points="4566.51,-6176.47 4576.89,-6174.39 4567.47,-6169.54 4566.51,-6176.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.15,-6125.42C4322.74,-6120.62 4404.43,-6120.25 4460,-6158.65 4482.24,-6174.02 4466.09,-6196.81 4488,-6212.65 4526.57,-6240.53 4583.12,-6244.01 4619.76,-6242.76"/>
<polygon fill="blue" stroke="blue" points="4620.16,-6246.25 4629.98,-6242.27 4619.83,-6239.26 4620.16,-6246.25"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.19,-6131.65C4351.24,-6131.65 4515.63,-6131.65 4601.36,-6131.65"/>
<polygon fill="blue" stroke="blue" points="4601.42,-6135.15 4611.42,-6131.65 4601.42,-6128.15 4601.42,-6135.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.44,-6123.48C4324.46,-6116.55 4408.63,-6113.87 4460,-6158.65 4497.38,-6191.23 4451.32,-6233.28 4488,-6266.65 4521.75,-6297.36 4575.94,-6300.84 4613.62,-6298.77"/>
<polygon fill="blue" stroke="blue" points="4614.04,-6302.25 4623.77,-6298.06 4613.55,-6295.27 4614.04,-6302.25"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.27,-6126.83C4319.52,-6121.62 4394.99,-6112.94 4460,-6104.65 4507.8,-6098.55 4562.07,-6091.03 4601.37,-6085.48"/>
<polygon fill="blue" stroke="blue" points="4601.86,-6088.94 4611.27,-6084.07 4600.88,-6082.01 4601.86,-6088.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.13,-6141.47C4325.89,-6150.64 4413.86,-6156.16 4460,-6104.65 4532.9,-6023.28 4410.47,-2248.63 4488,-2171.65 4541.3,-2118.73 4771.64,-2119.82 4826,-2171.65 4886.86,-2229.68 4808.72,-2862.59 4862,-2927.65 4871.54,-2939.3 5377.84,-3048.11 5387.5,-3059.65 5416.88,-3094.75 5410.9,-3425.16 5416,-3470.65 5438.85,-3674.48 5482.27,-3917.9 5497.26,-3999.47"/>
<polygon fill="blue" stroke="blue" points="5493.84,-4000.26 5499.1,-4009.45 5500.73,-3998.99 5493.84,-4000.26"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4737.37,-6193.2C4769.58,-6191.7 4804.26,-6183.39 4826,-6158.65 4912.16,-6060.63 4768.31,-5075.51 4862,-4984.65 4965.37,-4884.4 5082.18,-4884.87 5186,-4984.65 5226.41,-5023.49 5173.72,-5442.84 5206,-5488.65 5312.25,-5639.43 5486.07,-5491.94 5591,-5643.65 5688.4,-5784.48 5729.71,-11575.44 5732.81,-12030.36"/>
<polygon fill="blue" stroke="blue" points="5729.31,-12030.41 5732.88,-12040.39 5736.31,-12030.36 5729.31,-12030.41"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node314" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node314"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="5124.5,-6311.65 4915.5,-6311.65 4915.5,-6275.65 5124.5,-6275.65 5124.5,-6311.65"/>
<text text-anchor="middle" x="5020" y="-6289.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5022.51,-6311.76C5050.74,-6649.71 5465.03,-11610.03 5500.13,-12030.32"/>
<polygon fill="blue" stroke="blue" points="5496.66,-12030.75 5500.98,-12040.42 5503.63,-12030.17 5496.66,-12030.75"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.29,-6243.92C4721.33,-6248.3 4788.54,-6249.97 4826,-6212.65 4895.87,-6143.03 4831.72,-6087.53 4862,-5993.65 4898.46,-5880.63 4969.73,-5757.57 5002.18,-5704.49"/>
<polygon fill="blue" stroke="blue" points="5005.33,-5706.05 5007.59,-5695.7 4999.37,-5702.38 5005.33,-5706.05"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-6243.58C4730.06,-6250.43 4827.13,-6264.95 4905.01,-6276.6"/>
<polygon fill="blue" stroke="blue" points="4904.96,-6280.13 4915.37,-6278.15 4906,-6273.21 4904.96,-6280.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node316" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node316"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4329,-6257.65 4129,-6257.65 4129,-6221.65 4329,-6221.65 4329,-6257.65"/>
<text text-anchor="middle" x="4229" y="-6235.95" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge525" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4329.11,-6228.46C4369.7,-6223.76 4417.13,-6218.12 4460,-6212.65 4494.89,-6208.2 4533.23,-6202.99 4566.68,-6198.34"/>
<polygon fill="blue" stroke="blue" points="4567.47,-6201.76 4576.89,-6196.92 4566.51,-6194.83 4567.47,-6201.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge593" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4702.55,-6138.57C4741.44,-6141.79 4796.17,-6139 4826,-6104.65 4896.24,-6023.76 4790.29,-4256.24 4862,-4176.65 4910.56,-4122.75 5114.49,-4148.85 5186,-4136.65 5276.36,-4121.24 5301.86,-4125.35 5387.5,-4092.65 5415.56,-4081.94 5445,-4065.18 5467.07,-4051.36"/>
<polygon fill="blue" stroke="blue" points="5469.19,-4054.16 5475.75,-4045.84 5465.44,-4048.25 5469.19,-4054.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge784" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4690.25,-6299.26C4728.92,-6303.91 4792.68,-6304.62 4826,-6266.65 4916.98,-6162.96 4763.05,-5121.77 4862,-5025.65 4913.64,-4975.48 5134.15,-4975.69 5186,-5025.65 5229.16,-5067.23 5185.18,-5508.45 5206,-5564.65 5218.78,-5599.15 5246.47,-5631.22 5267.78,-5652.31"/>
<polygon fill="blue" stroke="blue" points="5265.4,-5654.87 5275.02,-5659.3 5270.26,-5649.84 5265.4,-5654.87"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge785" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4690.04,-6293.65C4737.83,-6293.65 4830.18,-6293.65 4904.9,-6293.65"/>
<polygon fill="blue" stroke="blue" points="4905.32,-6297.15 4915.32,-6293.65 4905.32,-6290.15 4905.32,-6297.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge817" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4702.83,-6084.51C4741.62,-6087.62 4796.05,-6084.7 4826,-6050.65 4910.07,-5955.08 4770.59,-4994.23 4862,-4905.65 4965.41,-4805.44 5082.19,-4805.85 5186,-4905.65 5226.64,-4944.72 5173.27,-5366.75 5206,-5412.65 5312.6,-5562.18 5485.71,-5412.19 5591,-5562.65 5690.44,-5704.75 5729.89,-11572.26 5732.82,-12030.35"/>
<polygon fill="blue" stroke="blue" points="5729.32,-12030.46 5732.89,-12040.44 5736.32,-12030.41 5729.32,-12030.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge816" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4702.55,-6084.56C4741.43,-6087.79 4796.17,-6085 4826,-6050.65 4895.38,-5970.78 4792.14,-4226.1 4862,-4146.65 4910.07,-4091.99 5114.19,-4110.56 5186,-4098.65 5275.83,-4083.75 5298.94,-4082.81 5387.5,-4061.65 5408.2,-4056.7 5430.71,-4050.29 5450.28,-4044.36"/>
<polygon fill="blue" stroke="blue" points="5451.38,-4047.68 5459.92,-4041.41 5449.33,-4040.99 5451.38,-4047.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node320" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node320"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="4685,-4229.65 4629,-4229.65 4629,-4193.65 4685,-4193.65 4685,-4229.65"/>
<text text-anchor="middle" x="4657" y="-4207.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4667.08,-4229.79C4692.12,-4278.28 4766.66,-4412.68 4862,-4493.65 4984.71,-4597.87 5099.24,-4520.03 5186,-4655.65 5205.26,-4685.76 5201.29,-5263.22 5206,-5298.65 5223.73,-5432.05 5268.27,-5587.06 5287.23,-5649.48"/>
<polygon fill="blue" stroke="blue" points="5283.99,-5650.82 5290.26,-5659.36 5290.68,-5648.78 5283.99,-5650.82"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node321" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node321"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="4684,-4175.65 4630,-4175.65 4630,-4139.65 4684,-4139.65 4684,-4175.65"/>
<text text-anchor="middle" x="4657" y="-4153.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge804" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.02,-4152.87C4721.69,-4147.63 4790.75,-4144.64 4826,-4184.65 4865.91,-4229.94 4849.97,-5211.5 4862,-5270.65 4892.37,-5419.95 4971.96,-5585.94 5004.66,-5650.19"/>
<polygon fill="blue" stroke="blue" points="5001.63,-5651.96 5009.31,-5659.26 5007.86,-5648.77 5001.63,-5651.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge803" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.2,-4161.52C4721.45,-4165.38 4789.26,-4166.1 4826,-4127.65 4877.83,-4073.41 4996.59,-2892.37 5016.23,-2693.85"/>
<polygon fill="blue" stroke="blue" points="5019.73,-2693.96 5017.23,-2683.66 5012.77,-2693.27 5019.73,-2693.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="node322" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<g id="a_node322"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn Attribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedAttribute&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The points in a regular verifiably encrypted attribute ...">
<polygon fill="white" stroke="black" points="4692,-5235.65 4622,-5235.65 4622,-5199.65 4692,-5199.65 4692,-5235.65"/>
<text text-anchor="middle" x="4657" y="-5213.95" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="node327" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<g id="a_node327"><a xlink:title=" &#160;&#160;&#160;pub fn blind( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn RevealedAttribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedPoint&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is technically something you can do with just th...">
<polygon fill="white" stroke="black" points="5047,-5235.65 4993,-5235.65 4993,-5199.65 5047,-5199.65 5047,-5235.65"/>
<text text-anchor="middle" x="5020" y="-5213.95" font-family="Helvetica,sans-Serif" font-size="14.00">blind</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4692.29,-5217.65C4760.59,-5217.65 4913.05,-5217.65 4982.85,-5217.65"/>
<polygon fill="blue" stroke="blue" points="4982.92,-5221.15 4992.92,-5217.65 4982.92,-5214.15 4982.92,-5221.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair(). -->
<g id="node323" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().</title>
<g id="a_node323"><a xlink:title="fn round_trip_key_pair() { &#160;&#160;&#160;&#160;let key_pair = BlindingKeyPair::generate(&amp;mut poksho::ShoSha256::new(b&#39; test&#39; )); &#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;let deserialized: Blin...">
<polygon fill="white" stroke="black" points="4733,-5181.65 4581,-5181.65 4581,-5145.65 4733,-5145.65 4733,-5181.65"/>
<text text-anchor="middle" x="4657" y="-5159.95" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="node326" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<g id="a_node326"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BlindingPrivateKey::generate(sho).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5059.5,-5075.65 4980.5,-5075.65 4980.5,-5039.65 5059.5,-5039.65 5059.5,-5075.65"/>
<text text-anchor="middle" x="5020" y="-5053.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.23,-5155.31C4762.51,-5151.09 4796.14,-5145.04 4826,-5136.65 4877.73,-5122.11 4934.35,-5097.88 4972.8,-5080.08"/>
<polygon fill="blue" stroke="blue" points="4974.6,-5083.1 4982.18,-5075.7 4971.63,-5076.76 4974.6,-5083.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node324" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node324"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="4685,-5127.65 4629,-5127.65 4629,-5091.65 4685,-5091.65 4685,-5127.65"/>
<text text-anchor="middle" x="4657" y="-5105.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge532" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.24,-5113.76C4722.19,-5117.67 4787.92,-5118.49 4826,-5082.65 4879.39,-5032.4 4804.78,-4967.49 4862,-4921.65 4918.19,-4876.64 5134.14,-4871.71 5186,-4921.65 5207.19,-4942.05 5199.94,-5421.87 5206,-5450.65 5221.89,-5526.08 5260.61,-5608.88 5281.72,-5650.53"/>
<polygon fill="blue" stroke="blue" points="5278.63,-5652.18 5286.31,-5659.49 5284.86,-5648.99 5278.63,-5652.18"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node325" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node325"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="4684,-5073.65 4630,-5073.65 4630,-5037.65 4684,-5037.65 4684,-5073.65"/>
<text text-anchor="middle" x="4657" y="-5051.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge534" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.16,-5051.51C4721.04,-5047.3 4788.06,-5045.82 4826,-5082.65 4887.05,-5141.9 4838.6,-5188.86 4862,-5270.65 4904.01,-5417.48 4977.25,-5585.52 5006.46,-5650.26"/>
<polygon fill="blue" stroke="blue" points="5003.28,-5651.73 5010.59,-5659.39 5009.66,-5648.84 5003.28,-5651.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge535" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4673.88,-5037.6C4709.08,-4996.31 4793.14,-4890.37 4826,-4784.65 4875.66,-4624.89 4848.45,-4199.4 4862,-4032.65 4905.9,-3492.54 4995.27,-2836.29 5015.06,-2693.8"/>
<polygon fill="blue" stroke="blue" points="5018.55,-2694.1 5016.46,-2683.72 5011.62,-2693.14 5018.55,-2694.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge533" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4673.86,-5037.59C4709.02,-4996.29 4793,-4890.33 4826,-4784.65 4849.68,-4708.83 4806.3,-4127.28 4862,-4070.65 4942.73,-3988.56 5310.37,-4010.97 5449.21,-4022.67"/>
<polygon fill="blue" stroke="blue" points="5449.32,-4026.19 5459.58,-4023.56 5449.92,-4019.22 5449.32,-4026.19"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="node328" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<g id="a_node328"><a xlink:title=" &#160;&#160;&#160;fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y: sho.get_scalar(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5336.5,-5074.65 5257.5,-5074.65 5257.5,-5038.65 5336.5,-5038.65 5336.5,-5074.65"/>
<text text-anchor="middle" x="5297" y="-5052.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="edge626" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5059.53,-5057.51C5108.58,-5057.33 5193.4,-5057.02 5247.01,-5056.83"/>
<polygon fill="blue" stroke="blue" points="5247.3,-5060.33 5257.29,-5056.79 5247.28,-5053.33 5247.3,-5060.33"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge845" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5047.13,-5216.91C5115.67,-5213.43 5301.24,-5193.79 5387.5,-5083.65 5452.81,-5000.26 5493.51,-4216.1 5501.18,-4056.08"/>
<polygon fill="blue" stroke="blue" points="5504.7,-4055.81 5501.67,-4045.66 5497.7,-4055.48 5504.7,-4055.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge862" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5301.64,-5038.35C5326.13,-4915.12 5466.94,-4206.56 5496.9,-4055.84"/>
<polygon fill="blue" stroke="blue" points="5500.34,-4056.46 5498.86,-4045.96 5493.48,-4055.09 5500.34,-4056.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node329" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node329"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="4691.5,-4695.65 4622.5,-4695.65 4622.5,-4659.65 4691.5,-4659.65 4691.5,-4695.65"/>
<text text-anchor="middle" x="4657" y="-4673.95" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4691.73,-4672.04C4730.34,-4667.77 4792.53,-4667.81 4826,-4704.65 4868.37,-4751.29 4848.5,-5209.1 4862,-5270.65 4894.71,-5419.82 4973.3,-5586.52 5005.2,-5650.58"/>
<polygon fill="blue" stroke="blue" points="5002.12,-5652.24 5009.73,-5659.61 5008.38,-5649.1 5002.12,-5652.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4667.3,-4659.26C4695.73,-4602.25 4782.21,-4422.8 4826,-4264.65 4839.92,-4214.37 4822.51,-4066.75 4862,-4032.65 5031.25,-3886.49 5329.82,-3966.87 5450.11,-4008.07"/>
<polygon fill="blue" stroke="blue" points="5449.23,-4011.47 5459.82,-4011.45 5451.53,-4004.86 5449.23,-4011.47"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node330" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node330"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4685,-4749.65 4629,-4749.65 4629,-4713.65 4685,-4713.65 4685,-4749.65"/>
<text text-anchor="middle" x="4657" y="-4727.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.28,-4727.45C4774.18,-4715.49 5057.24,-4691.41 5186,-4845.65 5207.55,-4871.47 5199.15,-5417.73 5206,-5450.65 5221.71,-5526.12 5260.51,-5608.9 5281.67,-5650.54"/>
<polygon fill="blue" stroke="blue" points="5278.59,-5652.2 5286.28,-5659.49 5284.82,-5649 5278.59,-5652.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5506.01,-4045.72C5515.93,-4165.52 5571.97,-4857.59 5591,-5422.65 5592.56,-5468.9 5598.51,-12049.19 5627,-12085.65 5627.48,-12086.27 5627.98,-12086.87 5628.48,-12087.46"/>
<polygon fill="blue" stroke="blue" points="5626.06,-12089.99 5635.66,-12094.47 5630.95,-12084.98 5626.06,-12089.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="node332" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<g id="a_node332"><a xlink:title="fn bench_server_param_serialization(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;&#160;let serialized_secret_params = zkgroup::seri...">
<polygon fill="white" stroke="black" points="3384,-2280.65 3132,-2280.65 3132,-2244.65 3384,-2244.65 3384,-2280.65"/>
<text text-anchor="middle" x="3258" y="-2258.95" font-family="Helvetica,sans-Serif" font-size="14.00">bench_server_param_serialization</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3384.27,-2251.03C3445.47,-2252.73 3514.67,-2267.09 3556,-2315.65 3600.66,-2368.12 3530.24,-3504.14 3576,-3555.65 3612.89,-3597.17 3680.77,-3597.62 3727.13,-3591.95"/>
<polygon fill="blue" stroke="blue" points="3727.81,-3595.39 3737.25,-3590.57 3726.87,-3588.45 3727.81,-3595.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node333" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node333"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2639.5,-2280.65 2564.5,-2280.65 2564.5,-2244.65 2639.5,-2244.65 2639.5,-2280.65"/>
<text text-anchor="middle" x="2602" y="-2258.95" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.56,-2262.65C2730.15,-2262.65 2968.69,-2262.65 3121.36,-2262.65"/>
<polygon fill="blue" stroke="blue" points="3121.75,-2266.15 3131.75,-2262.65 3121.75,-2259.15 3121.75,-2266.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node334" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node334"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="3403,-2197.65 3113,-2197.65 3113,-2161.65 3403,-2161.65 3403,-2197.65"/>
<text text-anchor="middle" x="3258" y="-2175.95" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.56,-2258.01C2726.95,-2246.92 2952.02,-2218.36 3104.87,-2198.96"/>
<polygon fill="blue" stroke="blue" points="3105.35,-2202.42 3114.83,-2197.69 3104.47,-2195.48 3105.35,-2202.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node335" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node335"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="3372,-2143.65 3144,-2143.65 3144,-2107.65 3372,-2107.65 3372,-2143.65"/>
<text text-anchor="middle" x="3258" y="-2121.95" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.61,-2248.58C2703.56,-2224.64 2840.22,-2176.28 2960,-2152.65 3016.43,-2141.52 3079.81,-2134.96 3133.49,-2131.11"/>
<polygon fill="blue" stroke="blue" points="3134.01,-2134.58 3143.74,-2130.4 3133.52,-2127.6 3134.01,-2134.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node336" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node336"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="3366,-2089.65 3150,-2089.65 3150,-2053.65 3366,-2053.65 3366,-2089.65"/>
<text text-anchor="middle" x="3258" y="-2067.95" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2633.18,-2244.45C2693.05,-2209.35 2832.15,-2132.75 2960,-2098.65 3018.04,-2083.17 3084.48,-2076.17 3139.78,-2073.15"/>
<polygon fill="blue" stroke="blue" points="3140.17,-2076.64 3149.98,-2072.64 3139.81,-2069.65 3140.17,-2076.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.99,-2197.66C3403.31,-2208.84 3501.09,-2211.53 3556,-2152.65 3592.27,-2113.76 3547.23,-1240.37 3576,-1195.65 3688.6,-1020.61 3795.08,-1038.92 3998,-992.65 4098.1,-969.83 4385.75,-921.75 4460,-992.65 4508.83,-1039.28 4443.48,-1548.9 4488,-1599.65 4504.82,-1618.82 4529.32,-1628.49 4554.43,-1632.88"/>
<polygon fill="blue" stroke="blue" points="4554.05,-1636.37 4564.45,-1634.36 4555.07,-1629.44 4554.05,-1636.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3403.2,-2168.74C3459.41,-2172.72 3519.08,-2188.76 3556,-2232.65 3595.68,-2279.82 3535.33,-6624.33 3576,-6670.65 3616.11,-6716.33 3693.7,-6712.49 3739.56,-6705.28"/>
<polygon fill="blue" stroke="blue" points="3740.4,-6708.69 3749.67,-6703.55 3739.22,-6701.79 3740.4,-6708.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node381" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node381"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="3928,-6499.65 3626,-6499.65 3626,-6463.65 3928,-6463.65 3928,-6499.65"/>
<text text-anchor="middle" x="3777" y="-6477.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3403.18,-2168.75C3459.39,-2172.74 3519.06,-2188.78 3556,-2232.65 3589.64,-2272.61 3565.77,-5942.43 3576,-5993.65 3612.99,-6178.83 3720.18,-6382.37 3760.46,-6454.5"/>
<polygon fill="blue" stroke="blue" points="3757.52,-6456.4 3765.47,-6463.4 3763.62,-6452.97 3757.52,-6456.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3403.2,-2168.73C3459.41,-2172.72 3519.08,-2188.76 3556,-2232.65 3596.16,-2280.4 3534.84,-6677.77 3576,-6724.65 3600.19,-6752.21 3638.03,-6761.74 3674.32,-6763.39"/>
<polygon fill="blue" stroke="blue" points="3674.41,-6766.89 3684.5,-6763.65 3674.59,-6759.9 3674.41,-6766.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3403.2,-2168.74C3459.4,-2172.72 3519.08,-2188.76 3556,-2232.65 3594.72,-2278.67 3536.32,-6517.46 3576,-6562.65 3599.99,-6589.96 3637.38,-6599.57 3673.37,-6601.34"/>
<polygon fill="blue" stroke="blue" points="3673.37,-6604.84 3683.47,-6601.64 3673.58,-6597.85 3673.37,-6604.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3403.2,-2168.74C3459.4,-2172.72 3519.08,-2188.76 3556,-2232.65 3595.2,-2279.25 3535.82,-6570.9 3576,-6616.65 3608.39,-6653.53 3665.22,-6658.13 3710.04,-6654.74"/>
<polygon fill="blue" stroke="blue" points="3710.64,-6658.2 3720.28,-6653.81 3710.01,-6651.23 3710.64,-6658.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3403.35,-2168.96C3459.41,-2173.02 3518.93,-2189.06 3556,-2232.65 3603.62,-2288.65 3527.21,-3500.67 3576,-3555.65 3612.87,-3597.19 3680.76,-3597.64 3727.12,-3591.96"/>
<polygon fill="blue" stroke="blue" points="3727.81,-3595.4 3737.24,-3590.58 3726.86,-3588.46 3727.81,-3595.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.04,-2143.7C3403.39,-2154.92 3501.19,-2157.62 3556,-2098.65 3599.27,-2052.09 3530.66,-999.2 3576,-954.65 3611.03,-920.23 4424.53,-920.69 4460,-954.65 4511.81,-1004.26 4440.77,-1545.66 4488,-1599.65 4504.79,-1618.84 4529.28,-1628.52 4554.4,-1632.91"/>
<polygon fill="blue" stroke="blue" points="4554.01,-1636.4 4564.42,-1634.39 4555.04,-1629.47 4554.01,-1636.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.64,-2143.66C3404.63,-2154.36 3500.92,-2156.3 3556,-2098.65 3589.96,-2063.11 3542.82,-1692.92 3576,-1656.65 3605.06,-1624.89 3652.29,-1617.39 3693.57,-1618.19"/>
<polygon fill="blue" stroke="blue" points="3693.52,-1621.69 3703.64,-1618.55 3693.77,-1614.7 3693.52,-1621.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.22,-2143.68C3405.11,-2154.23 3500.91,-2155.94 3556,-2098.65 3585.92,-2067.53 3546.76,-1742.41 3576,-1710.65 3604.55,-1679.64 3650.43,-1671.81 3691.06,-1672.23"/>
<polygon fill="blue" stroke="blue" points="3691.17,-1675.73 3701.26,-1672.5 3691.35,-1668.73 3691.17,-1675.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.27,-2143.67C3403.54,-2154.78 3501.08,-2157.34 3556,-2098.65 3587.14,-2065.38 3547.77,-1314.42 3576,-1278.65 3605,-1241.89 3656.32,-1228.83 3699.71,-1224.86"/>
<polygon fill="blue" stroke="blue" points="3699.99,-1228.35 3709.69,-1224.09 3699.45,-1221.37 3699.99,-1228.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-2107.61C3402.93,-2096.24 3501.24,-2093.27 3556,-2152.65 3594.63,-2194.53 3538.3,-4160.94 3576,-4203.65 3588.93,-4218.3 3605.72,-4227.85 3624.08,-4233.82"/>
<polygon fill="blue" stroke="blue" points="3623.23,-4237.22 3633.81,-4236.63 3625.17,-4230.5 3623.23,-4237.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node393" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node393"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="4413.5,-4140.65 4044.5,-4140.65 4044.5,-4104.65 4413.5,-4104.65 4413.5,-4140.65"/>
<text text-anchor="middle" x="4229" y="-4118.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-2107.61C3402.94,-2096.23 3501.25,-2093.27 3556,-2152.65 3595.64,-2195.64 3534.46,-4216.5 3576,-4257.65 3607.73,-4289.08 3934.7,-4268.6 3978,-4257.65 4062.91,-4236.19 4150.3,-4179.56 4195.88,-4146.86"/>
<polygon fill="blue" stroke="blue" points="4198.12,-4149.56 4204.16,-4140.86 4194.01,-4143.9 4198.12,-4149.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.46,-2107.64C3402.88,-2096.28 3501.18,-2093.34 3556,-2152.65 3587.54,-2186.78 3545.21,-3790.84 3576,-3825.65 3590.6,-3842.15 3610.09,-3852.17 3631.18,-3857.91"/>
<polygon fill="blue" stroke="blue" points="3630.44,-3861.33 3640.98,-3860.25 3632.07,-3854.52 3630.44,-3861.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-2107.61C3403.15,-2096.32 3501.2,-2093.49 3556,-2152.65 3608.98,-2209.84 3524.28,-3497.33 3576,-3555.65 3612.85,-3597.2 3680.74,-3597.65 3727.11,-3591.96"/>
<polygon fill="blue" stroke="blue" points="3727.8,-3595.4 3737.24,-3590.58 3726.86,-3588.47 3727.8,-3595.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-2107.61C3402.93,-2096.24 3501.24,-2093.28 3556,-2152.65 3593.61,-2193.43 3539.28,-4108.07 3576,-4149.65 3578.07,-4151.99 3580.23,-4154.2 3582.48,-4156.28"/>
<polygon fill="blue" stroke="blue" points="3580.54,-4159.22 3590.47,-4162.91 3585.01,-4153.83 3580.54,-4159.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.76,-2107.61C3403.16,-2096.31 3501.21,-2093.48 3556,-2152.65 3611,-2212.05 3522.31,-3549.07 3576,-3609.65 3583.31,-3617.9 3591.84,-3624.52 3601.18,-3629.81"/>
<polygon fill="blue" stroke="blue" points="3599.87,-3633.07 3610.38,-3634.47 3603.04,-3626.82 3599.87,-3633.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node340" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node340"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="3810,-3164.65 3744,-3164.65 3744,-3128.65 3810,-3128.65 3810,-3164.65"/>
<text text-anchor="middle" x="3777" y="-3142.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.01,-2053.63C3403.34,-2042.43 3501.13,-2039.73 3556,-2098.65 3594.67,-2140.17 3538.25,-3077.3 3576,-3119.65 3614.8,-3163.17 3687.67,-3161.52 3733.92,-3155.03"/>
<polygon fill="blue" stroke="blue" points="3734.58,-3158.47 3743.93,-3153.5 3733.51,-3151.56 3734.58,-3158.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node341" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node341"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3805,-3272.65 3749,-3272.65 3749,-3236.65 3805,-3236.65 3805,-3272.65"/>
<text text-anchor="middle" x="3777" y="-3250.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.04,-2053.6C3403.38,-2042.39 3501.18,-2039.68 3556,-2098.65 3598.71,-2144.6 3534.3,-3180.79 3576,-3227.65 3616.08,-3272.7 3692.66,-3269.38 3738.55,-3262.37"/>
<polygon fill="blue" stroke="blue" points="3739.39,-3265.78 3748.68,-3260.68 3738.24,-3258.87 3739.39,-3265.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node342" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node342"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="3811.5,-3218.65 3742.5,-3218.65 3742.5,-3182.65 3811.5,-3182.65 3811.5,-3218.65"/>
<text text-anchor="middle" x="3777" y="-3196.95" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.02,-2053.61C3403.36,-2042.41 3501.16,-2039.71 3556,-2098.65 3596.69,-2142.38 3536.27,-3129.04 3576,-3173.65 3614.35,-3216.71 3686.03,-3215.57 3732.35,-3209.26"/>
<polygon fill="blue" stroke="blue" points="3733.03,-3212.7 3742.4,-3207.75 3731.99,-3205.77 3733.03,-3212.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.31,-2053.6C3403.6,-2042.47 3501.15,-2039.89 3556,-2098.65 3590.51,-2135.61 3542.58,-2970.7 3576,-3008.65 3606.78,-3043.61 3659.37,-3050.39 3702.9,-3048.81"/>
<polygon fill="blue" stroke="blue" points="3703.08,-3052.31 3712.89,-3048.3 3702.73,-3045.32 3703.08,-3052.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.82,-2089.66C3408.89,-2099.32 3502.92,-2099.33 3556,-2041.65 3598.33,-1995.66 3531.41,-960.46 3576,-916.65 3611.03,-882.23 4424.57,-882.64 4460,-916.65 4514.8,-969.25 4438.06,-1542.43 4488,-1599.65 4504.77,-1618.86 4529.25,-1628.55 4554.37,-1632.94"/>
<polygon fill="blue" stroke="blue" points="4553.98,-1636.42 4564.39,-1634.42 4555.01,-1629.5 4553.98,-1636.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3343.71,-2089.66C3411.18,-2098.55 3502.83,-2097.47 3556,-2041.65 3615.08,-1979.61 3517.96,-1719.67 3576,-1656.65 3605.16,-1624.98 3652.4,-1617.49 3693.65,-1618.27"/>
<polygon fill="blue" stroke="blue" points="3693.6,-1621.77 3703.72,-1618.62 3693.85,-1614.77 3693.6,-1621.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.76,-2053.61C3403.16,-2042.31 3501.21,-2039.48 3556,-2098.65 3611,-2158.05 3522.31,-3495.07 3576,-3555.65 3612.84,-3597.21 3680.73,-3597.66 3727.1,-3591.97"/>
<polygon fill="blue" stroke="blue" points="3727.8,-3595.41 3737.23,-3590.59 3726.85,-3588.47 3727.8,-3595.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3743.77,-445.93C3691.71,-436.01 3593.97,-426.85 3566,-489.65 3558.59,-506.28 3558.59,-3094.02 3566,-3110.65 3592.28,-3169.65 3680.13,-3165.13 3733.83,-3156.15"/>
<polygon fill="blue" stroke="blue" points="3734.54,-3159.58 3743.77,-3154.37 3733.31,-3152.69 3734.54,-3159.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge748" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3769.33,-525.77C3736.46,-604.58 3607.24,-926.06 3566,-1204.65 3562.01,-1231.58 3554.92,-3139.78 3566,-3164.65 3592.06,-3223.17 3678.71,-3219.2 3732.52,-3210.37"/>
<polygon fill="blue" stroke="blue" points="3733.25,-3213.79 3742.49,-3208.61 3732.04,-3206.9 3733.25,-3213.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node339" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node339"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="4290.5,-3164.65 4167.5,-3164.65 4167.5,-3128.65 4290.5,-3128.65 4290.5,-3164.65"/>
<text text-anchor="middle" x="4229" y="-3142.95" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4290.54,-3134.33C4343.47,-3127.47 4418.21,-3127.96 4460,-3173.65 4535.84,-3256.58 4413.94,-4100.13 4488,-4184.65 4519.77,-4220.9 4579.28,-4221.91 4618.27,-4217.88"/>
<polygon fill="blue" stroke="blue" points="4619.17,-4221.29 4628.69,-4216.63 4618.34,-4214.34 4619.17,-4221.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3810,-3146.65C3881.95,-3146.65 4057.92,-3146.65 4157.08,-3146.65"/>
<polygon fill="blue" stroke="blue" points="4157.31,-3150.15 4167.31,-3146.65 4157.31,-3143.15 4157.31,-3150.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node346" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node346"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="4285.5,-3272.65 4172.5,-3272.65 4172.5,-3236.65 4285.5,-3236.65 4285.5,-3272.65"/>
<text text-anchor="middle" x="4229" y="-3250.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.14,-3254.65C3874.85,-3254.65 4061.8,-3254.65 4162.16,-3254.65"/>
<polygon fill="blue" stroke="blue" points="4162.19,-3258.15 4172.19,-3254.65 4162.19,-3251.15 4162.19,-3258.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node344" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node344"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="4292,-3218.65 4166,-3218.65 4166,-3182.65 4292,-3182.65 4292,-3218.65"/>
<text text-anchor="middle" x="4229" y="-3196.95" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.82,-3200.65C3884.57,-3200.65 4057.28,-3200.65 4155.82,-3200.65"/>
<polygon fill="blue" stroke="blue" points="4156,-3204.15 4166,-3200.65 4156,-3197.15 4156,-3204.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node345" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node345"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4321.5,-3110.65 4136.5,-3110.65 4136.5,-3074.65 4321.5,-3074.65 4321.5,-3110.65"/>
<text text-anchor="middle" x="4229" y="-3088.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.04,-3046.22C3914.99,-3055.09 4038.59,-3069.92 4126.19,-3080.43"/>
<polygon fill="blue" stroke="blue" points="4125.8,-3083.91 4136.15,-3081.63 4126.64,-3076.96 4125.8,-3083.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4292.1,-3188.13C4344.94,-3181.47 4418.64,-3182.39 4460,-3227.65 4498.88,-3270.19 4476.17,-4208.24 4488,-4264.65 4520.03,-4417.42 4605.84,-4585.77 4640.83,-4650.36"/>
<polygon fill="blue" stroke="blue" points="4637.94,-4652.38 4645.8,-4659.48 4644.08,-4649.02 4637.94,-4652.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4321.53,-3077.53C4369.78,-3075.17 4425.88,-3082.34 4460,-3119.65 4535.62,-3202.33 4414.89,-4042.75 4488,-4127.65 4519.9,-4164.69 4580.46,-4166.45 4619.49,-4163.02"/>
<polygon fill="blue" stroke="blue" points="4620.3,-4166.45 4629.89,-4161.94 4619.58,-4159.49 4620.3,-4166.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge724" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4285.59,-3249.95C4339.4,-3248.8 4418.73,-3256.84 4460,-3307.65 4508.94,-3367.9 4437.06,-4646.07 4488,-4704.65 4519.72,-4741.12 4579.52,-4742 4618.55,-4737.89"/>
<polygon fill="blue" stroke="blue" points="4619.46,-4741.3 4628.96,-4736.62 4618.61,-4734.36 4619.46,-4741.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node347" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node347"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="3861,-3110.65 3693,-3110.65 3693,-3074.65 3861,-3074.65 3861,-3110.65"/>
<text text-anchor="middle" x="3777" y="-3088.95" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge726" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.04,-3104.55C3902.42,-3105.45 3949.57,-3097.92 3978,-3065.65 4024.86,-3012.46 3947.68,-563.58 3998,-513.65 4070.88,-441.34 4370.25,-463.79 4460,-513.65 4480.59,-525.09 4467.9,-546.37 4488,-558.65 4552.32,-597.94 4751.01,-579.07 4826,-586.65 4986.32,-602.86 5075.73,-512.15 5186,-629.65 5256.01,-704.25 5290.79,-2346.05 5295.46,-2583.2"/>
<polygon fill="blue" stroke="blue" points="5291.96,-2583.49 5295.65,-2593.42 5298.96,-2583.36 5291.96,-2583.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge725" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.04,-3102.95C3902.23,-3108.03 3952.73,-3114.21 3998,-3119.65 4051.44,-3126.07 4111.89,-3133.16 4157.4,-3138.46"/>
<polygon fill="blue" stroke="blue" points="4157.12,-3141.95 4167.46,-3139.63 4157.93,-3135 4157.12,-3141.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge729" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-3085.19C3900.33,-3085.99 3945.59,-3093.7 3978,-3119.65 3997.98,-3135.65 3977.88,-3157.83 3998,-3173.65 4042.12,-3208.36 4106.54,-3213.23 4155.98,-3210.5"/>
<polygon fill="blue" stroke="blue" points="4156.23,-3213.99 4165.98,-3209.83 4155.77,-3207.01 4156.23,-3213.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge728" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-3092.65C3935.83,-3092.65 4045.94,-3092.65 4126.02,-3092.65"/>
<polygon fill="blue" stroke="blue" points="4126.13,-3096.15 4136.13,-3092.65 4126.13,-3089.15 4126.13,-3096.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge727" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.08,-3082.87C3901.32,-3082.85 3947.42,-3090.54 3978,-3119.65 4013.35,-3153.31 3962.36,-3194.29 3998,-3227.65 4041.21,-3268.09 4110.76,-3270.95 4162.08,-3266.08"/>
<polygon fill="blue" stroke="blue" points="4162.52,-3269.55 4172.09,-3265.01 4161.78,-3262.59 4162.52,-3269.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge730" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.09,-3104.38C3902.36,-3105.19 3949.38,-3097.64 3978,-3065.65 4010.01,-3029.87 3983.89,-2247.54 3998,-2201.65 4040.68,-2062.89 4154.18,-1926.56 4204,-1871.33"/>
<polygon fill="blue" stroke="blue" points="4206.73,-1873.54 4210.87,-1863.78 4201.55,-1868.82 4206.73,-1873.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.26,-5309.46C4345.65,-5334.35 4642.66,-5402.94 4826,-5275.65 4859.7,-5252.25 4837.69,-5223.7 4862,-5190.65 4895.27,-5145.42 4946.87,-5105.6 4981.75,-5081.59"/>
<polygon fill="blue" stroke="blue" points="4983.93,-5084.34 4990.24,-5075.83 4980,-5078.55 4983.93,-5084.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.16,-5301.35C4301.48,-5302.04 4395.87,-5308.98 4460,-5351.65 4478.07,-5363.67 4468.75,-5381.63 4488,-5391.65 4621.24,-5461.02 4685.77,-5445.53 4826,-5391.65 4903.65,-5361.82 4969.57,-5284.69 5000.37,-5243.88"/>
<polygon fill="blue" stroke="blue" points="5003.25,-5245.87 5006.4,-5235.75 4997.63,-5241.69 5003.25,-5245.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.3,-5219.68C3846.89,-5224.28 3926.68,-5226.79 3978,-5188.65 3995.24,-5175.84 3981.13,-5157.94 3998,-5144.65 4162.26,-5015.25 4318.07,-5209.22 4460,-5055.65 4535.88,-4973.54 4421.8,-4895.75 4488,-4805.65 4519.01,-4763.45 4579.43,-4744.94 4618.72,-4737.09"/>
<polygon fill="blue" stroke="blue" points="4619.52,-4740.5 4628.71,-4735.23 4618.24,-4733.62 4619.52,-4740.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node350" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node350"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="3395.5,-5413.65 3120.5,-5413.65 3120.5,-5377.65 3395.5,-5377.65 3395.5,-5413.65"/>
<text text-anchor="middle" x="3258" y="-5391.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3353.07,-5413.66C3418.37,-5420.37 3502.85,-5416.57 3556,-5366.65 3596.69,-5328.43 3536.02,-5281.61 3576,-5242.65 3618.95,-5200.79 3693.88,-5202.84 3738.82,-5208.79"/>
<polygon fill="blue" stroke="blue" points="3738.34,-5212.26 3748.74,-5210.23 3739.35,-5205.33 3738.34,-5212.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="node351" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<g id="a_node351"><a xlink:title=" &#160;&#160;&#160;fn server_secret_params() &#45;&gt; GenericServerSecretParams { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GenericServerSecretParams::generate(SERVER_SECRET_RAND) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4313.5,-5396.65 4144.5,-5396.65 4144.5,-5360.65 4313.5,-5360.65 4313.5,-5396.65"/>
<text text-anchor="middle" x="4229" y="-5374.95" font-family="Helvetica,sans-Serif" font-size="14.00">server_secret_params</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3327.97,-5413.71C3391.78,-5429.43 3489.55,-5451.01 3576,-5459.65 3753.78,-5477.42 3801.52,-5487.53 3978,-5459.65 4048.77,-5448.47 4126.78,-5420.53 4176.53,-5400.6"/>
<polygon fill="blue" stroke="blue" points="4178.13,-5403.72 4186.09,-5396.72 4175.51,-5397.23 4178.13,-5403.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node354" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node354"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="3854,-5415.65 3700,-5415.65 3700,-5379.65 3854,-5379.65 3854,-5415.65"/>
<text text-anchor="middle" x="3777" y="-5393.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3395.51,-5396.18C3488.75,-5396.54 3609.47,-5397.01 3689.66,-5397.32"/>
<polygon fill="blue" stroke="blue" points="3689.7,-5400.82 3699.72,-5397.36 3689.73,-5393.82 3689.7,-5400.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3347.23,-5413.68C3413.71,-5421.7 3502.31,-5419.56 3556,-5366.65 3612.7,-5310.77 3520.34,-5245.57 3576,-5188.65 3616.08,-5147.66 3686.63,-5148.04 3732.33,-5153.65"/>
<polygon fill="blue" stroke="blue" points="3731.86,-5157.12 3742.24,-5155 3732.81,-5150.18 3731.86,-5157.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4313.69,-5384.37C4364.33,-5382.83 4425.56,-5371.09 4460,-5328.65 4496.49,-5283.69 4480.55,-1217.07 4488,-1159.65 4520.19,-911.68 4615.37,-622.89 4646.23,-533.46"/>
<polygon fill="blue" stroke="blue" points="4649.61,-534.39 4649.58,-523.79 4643,-532.09 4649.61,-534.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.35,-5243.58C4310.61,-5246.17 4401.96,-5244.03 4460,-5198.65 4483.82,-5180.03 4463.98,-5155.02 4488,-5136.65 4525.48,-5107.98 4581.59,-5104.58 4618.5,-5106.07"/>
<polygon fill="blue" stroke="blue" points="4618.65,-5109.58 4628.83,-5106.64 4619.03,-5102.6 4618.65,-5109.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node353" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node353"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3894,-5341.65 3660,-5341.65 3660,-5305.65 3894,-5305.65 3894,-5341.65"/>
<text text-anchor="middle" x="3777" y="-5319.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.18,-5317.97C3992.61,-5313.16 4127.63,-5306.56 4191.58,-5303.43"/>
<polygon fill="blue" stroke="blue" points="4191.76,-5306.93 4201.58,-5302.94 4191.42,-5299.93 4191.76,-5306.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.18,-5337.85C3968.77,-5346.97 4064.37,-5358.65 4134.13,-5367.18"/>
<polygon fill="blue" stroke="blue" points="4133.88,-5370.67 4144.23,-5368.41 4134.73,-5363.72 4133.88,-5370.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.07,-5321.74C3922.72,-5317.63 3952.49,-5310.05 3978,-5296.65 3989.7,-5290.51 3986.34,-5280.87 3998,-5274.65 4057.56,-5242.89 4137.45,-5238.12 4185.7,-5238.62"/>
<polygon fill="blue" stroke="blue" points="4185.72,-5242.12 4195.79,-5238.81 4185.85,-5235.13 4185.72,-5242.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.04,-5330.69C3924.5,-5326.9 3955.18,-5317.25 3978,-5296.65 4006.17,-5271.23 3970.43,-5239.72 3998,-5213.65 4050.59,-5163.92 4141.51,-5163.09 4191.84,-5167.17"/>
<polygon fill="blue" stroke="blue" points="4191.66,-5170.67 4201.94,-5168.1 4192.3,-5163.69 4191.66,-5170.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.08,-5381.42C3952.02,-5360.53 4118.28,-5325.06 4191.52,-5309.43"/>
<polygon fill="blue" stroke="blue" points="4192.58,-5312.79 4201.63,-5307.28 4191.12,-5305.94 4192.58,-5312.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.08,-5394.44C3931.31,-5391.18 4051.02,-5386.12 4134.1,-5382.62"/>
<polygon fill="blue" stroke="blue" points="4134.46,-5386.1 4144.3,-5382.18 4134.16,-5379.11 4134.46,-5386.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.45,-5397.95C3896.07,-5394.07 3945.55,-5382.25 3978,-5350.65 4003.02,-5326.28 3971.98,-5297.95 3998,-5274.65 4049.49,-5228.56 4134.98,-5228.91 4185.96,-5234.2"/>
<polygon fill="blue" stroke="blue" points="4185.65,-5237.69 4195.99,-5235.35 4186.45,-5230.73 4185.65,-5237.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.35,-5399.42C3896.74,-5396.13 3947.01,-5384.42 3978,-5350.65 4019.6,-5305.31 3955.27,-5257.93 3998,-5213.65 4048.39,-5161.43 4140.58,-5161.66 4191.6,-5166.56"/>
<polygon fill="blue" stroke="blue" points="4191.52,-5170.07 4201.84,-5167.65 4192.27,-5163.11 4191.52,-5170.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node355" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node355"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="3391,-5357.65 3125,-5357.65 3125,-5321.65 3391,-5321.65 3391,-5357.65"/>
<text text-anchor="middle" x="3258" y="-5335.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.17,-5355.76C3447.63,-5355.55 3510.8,-5344.94 3556,-5307.65 3579.31,-5288.42 3552.95,-5262.2 3576,-5242.65 3621.4,-5204.16 3694.62,-5204.86 3738.74,-5209.69"/>
<polygon fill="blue" stroke="blue" points="3738.41,-5213.18 3748.76,-5210.92 3739.26,-5206.23 3738.41,-5213.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3384,-5321.65C3442.35,-5320.19 3509.12,-5329.42 3556,-5368.65 3581.14,-5389.69 3549.86,-5419.86 3576,-5439.65 3611.61,-5466.61 3933.65,-5444.98 3978,-5439.65 4041.21,-5432.05 4111.51,-5414.01 4161.42,-5399.51"/>
<polygon fill="blue" stroke="blue" points="4162.52,-5402.83 4171.13,-5396.66 4160.55,-5396.12 4162.52,-5402.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.06,-5351.58C3442.57,-5356.49 3502.08,-5362.47 3556,-5368.65 3600.19,-5373.72 3649.28,-5380.12 3689.85,-5385.61"/>
<polygon fill="blue" stroke="blue" points="3689.59,-5389.11 3699.97,-5386.99 3690.53,-5382.17 3689.59,-5389.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3368.73,-5357.65C3431.41,-5361.39 3507.03,-5353.8 3556,-5307.65 3595.03,-5270.87 3537.47,-5225.96 3576,-5188.65 3616.98,-5148.97 3686.74,-5148.84 3732.09,-5154.01"/>
<polygon fill="blue" stroke="blue" points="3731.85,-5157.5 3742.21,-5155.29 3732.73,-5150.56 3731.85,-5157.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3807.76,-5143.64C3848.96,-5119.57 3926.41,-5077.44 3998,-5055.65 4097.22,-5025.45 4388.3,-5064.58 4460,-4989.65 4504,-4943.67 4444.4,-4751.01 4488,-4704.65 4519.17,-4671.51 4573.64,-4668.47 4612.1,-4671.31"/>
<polygon fill="blue" stroke="blue" points="4612.21,-4674.84 4622.49,-4672.25 4612.84,-4667.86 4612.21,-4674.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node357" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node357"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="3935.5,-5287.65 3618.5,-5287.65 3618.5,-5251.65 3935.5,-5251.65 3935.5,-5287.65"/>
<text text-anchor="middle" x="3777" y="-5265.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge506" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.7,-5280.87C4027.81,-5287.42 4136.5,-5295.14 4191.77,-5299.07"/>
<polygon fill="blue" stroke="blue" points="4191.55,-5302.57 4201.77,-5299.79 4192.05,-5295.58 4191.55,-5302.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge507" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.66,-5277.33C3950.64,-5282.01 3965.05,-5288.29 3978,-5296.65 3992.09,-5305.75 3984.28,-5319 3998,-5328.65 4037.54,-5356.47 4089.65,-5369.25 4134.27,-5374.96"/>
<polygon fill="blue" stroke="blue" points="4133.92,-5378.44 4144.26,-5376.14 4134.74,-5371.49 4133.92,-5378.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge509" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.7,-5259.49C4024.67,-5253.75 4129.09,-5247.02 4185.92,-5243.36"/>
<polygon fill="blue" stroke="blue" points="4186.21,-5246.85 4195.96,-5242.72 4185.76,-5239.87 4186.21,-5246.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge508" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.53,-5261.29C3950.5,-5256.74 3964.94,-5250.67 3978,-5242.65 3991.34,-5234.46 3984.85,-5222.15 3998,-5213.65 4057.74,-5175.04 4143.47,-5169.61 4191.61,-5170.02"/>
<polygon fill="blue" stroke="blue" points="4191.8,-5173.53 4201.86,-5170.21 4191.93,-5166.53 4191.8,-5173.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge616" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-5163.27C4298.78,-5149.4 4386.54,-5120.52 4460,-5093.65 4472.56,-5089.06 4475.1,-5086.18 4488,-5082.65 4532.55,-5070.47 4585.34,-5063.1 4619.69,-5059.2"/>
<polygon fill="blue" stroke="blue" points="4620.17,-5062.67 4629.73,-5058.11 4619.41,-5055.71 4620.17,-5062.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node359" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node359"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="3366,-5234.65 3150,-5234.65 3150,-5198.65 3366,-5198.65 3366,-5234.65"/>
<text text-anchor="middle" x="3258" y="-5212.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge735" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.12,-5216.44C3482.36,-5216.22 3661.66,-5215.87 3738.71,-5215.72"/>
<polygon fill="blue" stroke="blue" points="3738.9,-5219.22 3748.89,-5215.7 3738.88,-5212.22 3738.9,-5219.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge734" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.15,-5201.48C3429.1,-5198.83 3505.9,-5207.38 3556,-5253.65 3588.34,-5283.52 3542.48,-5322.12 3576,-5350.65 3581.24,-5355.11 3954.79,-5368.95 4134.03,-5375.35"/>
<polygon fill="blue" stroke="blue" points="4134.13,-5378.85 4144.25,-5375.71 4134.38,-5371.86 4134.13,-5378.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge733" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.24,-5201.03C3429.42,-5198.15 3506.43,-5206.63 3556,-5253.65 3592.69,-5288.45 3539.92,-5330.22 3576,-5365.65 3605.43,-5394.55 3649.87,-5403.69 3689.4,-5405.1"/>
<polygon fill="blue" stroke="blue" points="3689.52,-5408.6 3699.59,-5405.3 3689.66,-5401.6 3689.52,-5408.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge732" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.12,-5205.25C3479.2,-5193.22 3651.96,-5174.85 3732.21,-5166.31"/>
<polygon fill="blue" stroke="blue" points="3732.87,-5169.76 3742.44,-5165.22 3732.13,-5162.8 3732.87,-5169.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node360" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node360"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="3399,-5298.65 3117,-5298.65 3117,-5262.65 3399,-5262.65 3399,-5298.65"/>
<text text-anchor="middle" x="3258" y="-5276.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge757" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.14,-5263.27C3448.7,-5257.1 3504.83,-5250.09 3556,-5243.65 3620.23,-5235.56 3694.99,-5226.02 3738.74,-5220.42"/>
<polygon fill="blue" stroke="blue" points="3739.43,-5223.86 3748.91,-5219.12 3738.54,-5216.92 3739.43,-5223.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge755" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3371.82,-5262.65C3433.79,-5259.43 3507.65,-5267.54 3556,-5312.65 3592.97,-5347.14 3537.23,-5392.19 3576,-5424.65 3610.25,-5453.32 3933.52,-5428.71 3978,-5424.65 4032.47,-5419.68 4092.79,-5408.74 4140.53,-5398.78"/>
<polygon fill="blue" stroke="blue" points="4141.46,-5402.16 4150.52,-5396.67 4140.02,-5395.31 4141.46,-5402.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge754" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.12,-5266.04C3453.03,-5267.52 3512.12,-5278.69 3556,-5312.65 3575.91,-5328.06 3556.49,-5349.74 3576,-5365.65 3607.39,-5391.26 3651.03,-5400.3 3689.54,-5402.5"/>
<polygon fill="blue" stroke="blue" points="3689.59,-5406 3699.73,-5402.93 3689.89,-5399.01 3689.59,-5406"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge756" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.15,-5292.88C3453.23,-5290.51 3512.42,-5278.39 3556,-5243.65 3576.34,-5227.44 3555.74,-5204.97 3576,-5188.65 3619.95,-5153.24 3687.78,-5151.71 3732.03,-5155.43"/>
<polygon fill="blue" stroke="blue" points="3731.91,-5158.94 3742.2,-5156.41 3732.58,-5151.97 3731.91,-5158.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.13,-2839.95C4312.67,-2829.96 4410.11,-2819.76 4460,-2874.65 4508.96,-2928.52 4440.2,-4129.75 4488,-4184.65 4519.74,-4221.1 4579.53,-4221.99 4618.56,-4217.88"/>
<polygon fill="blue" stroke="blue" points="4619.47,-4221.3 4628.97,-4216.62 4618.62,-4214.35 4619.47,-4221.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4263.79,-2893.62C4314.78,-2883.74 4410.66,-2874.34 4460,-2928.65 4509.92,-2983.6 4472.99,-4191.95 4488,-4264.65 4519.57,-4417.51 4605.64,-4585.81 4640.77,-4650.38"/>
<polygon fill="blue" stroke="blue" points="4637.88,-4652.4 4645.76,-4659.49 4644.02,-4649.03 4637.88,-4652.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge715" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.04,-2952.43C4306.42,-2948.26 4410.63,-2947.65 4460,-3008.65 4519.28,-3081.9 4426.29,-4633.43 4488,-4704.65 4519.65,-4741.18 4579.47,-4742.04 4618.52,-4737.91"/>
<polygon fill="blue" stroke="blue" points="4619.44,-4741.32 4628.94,-4736.64 4618.59,-4734.38 4619.44,-4741.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge753" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4293.21,-2780.94C4346,-2774.39 4419.03,-2775.58 4460,-2820.65 4508.85,-2874.4 4440.78,-4072.47 4488,-4127.65 4519.78,-4164.79 4580.38,-4166.52 4619.45,-4163.05"/>
<polygon fill="blue" stroke="blue" points="4620.27,-4166.49 4629.85,-4161.96 4619.54,-4159.53 4620.27,-4166.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4263.78,-4717.24C4340.29,-4709.52 4526.76,-4690.7 4612.08,-4682.08"/>
<polygon fill="blue" stroke="blue" points="4612.62,-4685.55 4622.21,-4681.06 4611.91,-4678.58 4612.62,-4685.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.3,-4771.9C4331.08,-4764.45 4534.62,-4743.9 4618.8,-4735.41"/>
<polygon fill="blue" stroke="blue" points="4619.33,-4738.87 4628.93,-4734.38 4618.63,-4731.9 4619.33,-4738.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.13,-4933.91C4304.48,-4930.44 4407.72,-4930.86 4460,-4989.65 4497.88,-5032.25 4445.55,-5206.6 4488,-5244.65 4543.94,-5294.78 4759.78,-5280.09 4826,-5244.65 4851.43,-5231.04 4842.81,-5212.18 4862,-5190.65 4900.02,-5148 4951.82,-5106.72 4985.33,-5081.76"/>
<polygon fill="blue" stroke="blue" points="4987.48,-5084.53 4993.44,-5075.77 4983.32,-5078.89 4987.48,-5084.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.2,-4933.85C4304.66,-4930.29 4408.07,-4930.55 4460,-4989.65 4502.15,-5037.62 4440.7,-5232.75 4488,-5275.65 4630.29,-5404.69 4889.96,-5286.94 4983.9,-5237.29"/>
<polygon fill="blue" stroke="blue" points="4985.82,-5240.23 4992.98,-5232.43 4982.51,-5234.06 4985.82,-5240.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge599" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.07,-4875.64C4311.64,-4866.88 4406.71,-4858.63 4460,-4909.65 4516.26,-4963.51 4432.89,-5027.6 4488,-5082.65 4521.91,-5116.52 4580.32,-5118.31 4618.55,-5115.07"/>
<polygon fill="blue" stroke="blue" points="4619.16,-5118.52 4628.76,-5114.04 4618.46,-5111.56 4619.16,-5118.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge636" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.33,-4822.93C4303.64,-4814.34 4403.32,-4804.13 4460,-4855.65 4503.73,-4895.4 4450.19,-4940.22 4488,-4985.65 4521.25,-5025.61 4581.16,-5043.12 4619.72,-5050.53"/>
<polygon fill="blue" stroke="blue" points="4619.53,-5054.05 4629.99,-5052.36 4620.76,-5047.16 4619.53,-5054.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node444" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node444"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="5055,-1344.65 4985,-1344.65 4985,-1308.65 5055,-1308.65 5055,-1344.65"/>
<text text-anchor="middle" x="5020" y="-1322.95" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4278.06,-1052.27C4383.2,-1053.31 4639.18,-1066.1 4826,-1159.65 4897.27,-1195.34 4963.68,-1263.34 4996.87,-1300.61"/>
<polygon fill="blue" stroke="blue" points="4994.58,-1303.31 5003.81,-1308.51 4999.84,-1298.69 4994.58,-1303.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge831" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.15,-1102.33C4362.09,-1104.42 4424.63,-1116.72 4460,-1159.65 4518.11,-1230.18 4443.07,-1902.07 4488,-1981.65 4576.11,-2137.74 4735.13,-2047.15 4826,-2201.65 4855.19,-2251.29 4856.98,-2661.29 4862,-2718.65 4913.66,-3308.78 4997.87,-4028.29 5015.64,-4178.4"/>
<polygon fill="blue" stroke="blue" points="5012.2,-4179.07 5016.85,-4188.59 5019.15,-4178.25 5012.2,-4179.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.55,-503.39C4806.7,-497.84 5119.21,-488.68 5186,-558.65 5259.27,-635.41 5291.34,-2341.67 5295.52,-2583.3"/>
<polygon fill="blue" stroke="blue" points="5292.03,-2583.45 5295.7,-2593.39 5299.03,-2583.33 5292.03,-2583.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4265.59,-1827.61C4342.88,-1788.42 4525.96,-1695.58 4611.07,-1652.43"/>
<polygon fill="blue" stroke="blue" points="4612.88,-1655.44 4620.21,-1647.8 4609.71,-1649.2 4612.88,-1655.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1(). -->
<g id="node374" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().</title>
<g id="a_node374"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec1() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3858.5,-1755.65 3695.5,-1755.65 3695.5,-1719.65 3858.5,-1719.65 3858.5,-1755.65"/>
<text text-anchor="middle" x="3777" y="-1733.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.88,-1745.23C3895.52,-1749.52 3939.22,-1755.83 3978,-1764.65 4049.53,-1780.93 4129.82,-1808.71 4179.66,-1827.12"/>
<polygon fill="blue" stroke="blue" points="4178.61,-1830.47 4189.2,-1830.68 4181.05,-1823.91 4178.61,-1830.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge501" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4674.18,-1647.85C4709.59,-1688.98 4793.43,-1793.74 4826,-1898.65 4880.09,-2072.84 4848.42,-2536.76 4862,-2718.65 4906.09,-3309.39 4996.21,-4028.42 5015.37,-4178.42"/>
<polygon fill="blue" stroke="blue" points="5011.93,-4179.13 5016.67,-4188.61 5018.87,-4178.24 5011.93,-4179.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding(). -->
<g id="node376" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().</title>
<g id="a_node376"><a xlink:title=" &#160;&#160;&#160;fn test_encrypt_with_padding() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext = b&#39; secret team&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected...">
<polygon fill="white" stroke="black" points="3878.5,-1863.65 3675.5,-1863.65 3675.5,-1827.65 3878.5,-1827.65 3878.5,-1863.65"/>
<text text-anchor="middle" x="3777" y="-1841.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_encrypt_with_padding</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge524" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3878.71,-1845.65C3972.3,-1845.65 4107.7,-1845.65 4179.32,-1845.65"/>
<polygon fill="blue" stroke="blue" points="4179.41,-1849.15 4189.41,-1845.65 4179.41,-1842.15 4179.41,-1849.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2(). -->
<g id="node377" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().</title>
<g id="a_node377"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3858.5,-1809.65 3695.5,-1809.65 3695.5,-1773.65 3858.5,-1773.65 3858.5,-1809.65"/>
<text text-anchor="middle" x="3777" y="-1787.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge543" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.71,-1801.34C3951.83,-1812.51 4101.99,-1830.53 4179,-1839.77"/>
<polygon fill="blue" stroke="blue" points="4179.02,-1843.3 4189.37,-1841.01 4179.85,-1836.35 4179.02,-1843.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge635" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3792.91,-1611.37C3832.39,-1561.7 3939.22,-1418.56 3978,-1278.65 3990.96,-1231.9 3963.31,-439.56 3998,-405.65 4144.85,-262.13 4302.28,-274.17 4460,-405.65 4513.1,-449.91 4444.69,-504.77 4488,-558.65 4590.08,-685.65 4716.61,-579.89 4826,-700.65 4990.69,-882.45 5014.87,-1202.27 5018.4,-1298.49"/>
<polygon fill="blue" stroke="blue" points="5014.91,-1298.72 5018.72,-1308.6 5021.9,-1298.5 5014.91,-1298.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node420" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node420"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="5055,-1481.65 4985,-1481.65 4985,-1445.65 5055,-1445.65 5055,-1481.65"/>
<text text-anchor="middle" x="5020" y="-1459.95" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge787" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3852.66,-1695.15C3895.84,-1697.21 3947.49,-1690.94 3978,-1656.65 4020.21,-1609.2 3952.7,-558.16 3998,-513.65 4144.46,-369.73 4304.43,-379.64 4460,-513.65 4491.84,-541.07 4471.96,-661.81 4488,-700.65 4584.71,-934.81 4731.4,-924.63 4826,-1159.65 4848.93,-1216.62 4819.86,-1388.98 4862,-1433.65 4890.43,-1463.78 4939.08,-1468.97 4974.71,-1468.07"/>
<polygon fill="blue" stroke="blue" points="4975,-1471.56 4984.84,-1467.64 4974.71,-1464.56 4975,-1471.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3804.11,-6703.08C3847.02,-6710.32 3932.27,-6717.32 3978,-6670.65 4032.79,-6614.73 3948.93,-6556.64 3998,-6495.65 4134.04,-6326.57 4303.05,-6487.52 4460,-6337.65 4484.53,-6314.22 4461.57,-6287.91 4488,-6266.65 4525.19,-6236.74 4582.35,-6233.83 4619.46,-6235.75"/>
<polygon fill="blue" stroke="blue" points="4619.61,-6239.27 4629.82,-6236.44 4620.08,-6232.29 4619.61,-6239.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.6,-6463.52C3853.86,-6441.55 3929.22,-6405.07 3998,-6385.65 4224.45,-6321.71 4507.82,-6301.26 4613.6,-6295.58"/>
<polygon fill="blue" stroke="blue" points="4614.06,-6299.06 4623.87,-6295.05 4613.7,-6292.07 4614.06,-6299.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node382" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node382"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="4385.5,-6590.65 4072.5,-6590.65 4072.5,-6554.65 4385.5,-6554.65 4385.5,-6590.65"/>
<text text-anchor="middle" x="4229" y="-6568.95" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3926.04,-6499.66C3943.6,-6502.38 3961.23,-6505.38 3978,-6508.65 4038.71,-6520.48 4106.64,-6538.16 4156.35,-6551.94"/>
<polygon fill="blue" stroke="blue" points="4155.47,-6555.33 4166.04,-6554.64 4157.35,-6548.59 4155.47,-6555.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.96,-6554.5C4307.87,-6520.43 4411.61,-6441.68 4460,-6346.65 4498.33,-6271.37 4428.61,-6218.73 4488,-6158.65 4516.95,-6129.37 4564.18,-6123.97 4601.21,-6125.13"/>
<polygon fill="blue" stroke="blue" points="4601.2,-6128.63 4611.35,-6125.61 4601.53,-6121.64 4601.2,-6128.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.55,-6542.78C3859.79,-6549.26 3936,-6552.11 3978,-6508.65 4008.89,-6476.69 3969.79,-6343.99 3998,-6309.65 4027.5,-6273.75 4074.84,-6255.83 4118.92,-6247.05"/>
<polygon fill="blue" stroke="blue" points="4119.66,-6250.47 4128.86,-6245.21 4118.39,-6243.59 4119.66,-6250.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge592" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3869.59,-6762.29C3908.12,-6761.54 3950.33,-6752.97 3978,-6724.65 4033.95,-6667.4 3944.54,-6605.23 3998,-6545.65 4138.5,-6389.08 4269.19,-6531.24 4460,-6442.65 4528.3,-6410.94 4595.42,-6352.31 4630.64,-6318.83"/>
<polygon fill="blue" stroke="blue" points="4633.28,-6321.14 4638.07,-6311.68 4628.43,-6316.09 4633.28,-6321.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge591" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3869.72,-6747.23C3904.39,-6743.51 3943.73,-6736.78 3978,-6724.65 4063.92,-6694.23 4152.22,-6631.78 4197.35,-6597.14"/>
<polygon fill="blue" stroke="blue" points="4199.76,-6599.7 4205.52,-6590.81 4195.47,-6594.17 4199.76,-6599.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge720" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3870.63,-6597.75C3907.85,-6596.17 3948.77,-6587.64 3978,-6562.65 4001.62,-6542.45 3975.94,-6517.54 3998,-6495.65 4149.76,-6345.06 4256.27,-6426.49 4460,-6361.65 4513.63,-6344.58 4574.81,-6323.02 4614.35,-6308.8"/>
<polygon fill="blue" stroke="blue" points="4615.69,-6312.04 4623.92,-6305.35 4613.32,-6305.45 4615.69,-6312.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge719" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3870.69,-6586.15C3925.77,-6584.07 3997.24,-6581.37 4061.78,-6578.93"/>
<polygon fill="blue" stroke="blue" points="4062.21,-6582.42 4072.07,-6578.54 4061.95,-6575.42 4062.21,-6582.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge800" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3833.51,-6653.26C3879.12,-6657.66 3941.9,-6655.09 3978,-6616.65 4020.56,-6571.34 3955.86,-6383.35 3998,-6337.65 4138.83,-6184.93 4311.74,-6412.17 4460,-6266.65 4512.15,-6215.47 4436.03,-6156.01 4488,-6104.65 4517.19,-6075.8 4564.18,-6070.31 4601.05,-6071.33"/>
<polygon fill="blue" stroke="blue" points="4601.02,-6074.83 4611.16,-6071.77 4601.32,-6067.83 4601.02,-6074.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="node416" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<g id="a_node416"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CommitmentWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let commitment_system = SystemParams::get_hardcoded...">
<polygon fill="white" stroke="black" points="4684,-2249.65 4630,-2249.65 4630,-2213.65 4684,-2213.65 4684,-2249.65"/>
<text text-anchor="middle" x="4657" y="-2227.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3828.19,-1243.68C3872.47,-1259.15 3938.96,-1281.3 3998,-1296.65 4200.63,-1349.33 4324.29,-1229.23 4460,-1388.65 4515.71,-1454.1 4439.04,-2091.01 4488,-2161.65 4517.99,-2204.92 4580.1,-2221.52 4619.82,-2227.83"/>
<polygon fill="blue" stroke="blue" points="4619.5,-2231.32 4629.9,-2229.29 4620.5,-2224.39 4619.5,-2231.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node430" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node430"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="4685,-3606.65 4629,-3606.65 4629,-3570.65 4685,-3570.65 4685,-3606.65"/>
<text text-anchor="middle" x="4657" y="-3584.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3920.11,-4233.77C3941.62,-4228.31 3961.95,-4218.93 3978,-4203.65 4013.35,-4169.99 3975.05,-4138.74 3998,-4095.65 4141.31,-3826.58 4215.82,-3752.96 4488,-3615.65 4529.35,-3594.79 4583.06,-3589.35 4618.49,-3588.27"/>
<polygon fill="blue" stroke="blue" points="4618.93,-3591.77 4628.86,-3588.07 4618.79,-3584.77 4618.93,-3591.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node432" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node432"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="4264,-561.65 4194,-561.65 4194,-525.65 4264,-525.65 4264,-561.65"/>
<text text-anchor="middle" x="4229" y="-539.95" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3930.38,-3529.36C3948.6,-3523.12 3965.23,-3513.37 3978,-3498.65 4031.29,-3437.2 3943.74,-631.24 3998,-570.65 4043.77,-519.55 4130.7,-524.57 4183.59,-533.61"/>
<polygon fill="blue" stroke="blue" points="4183.23,-537.1 4193.69,-535.45 4184.48,-530.21 4183.23,-537.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="node433" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node433"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4268.5,-615.65 4189.5,-615.65 4189.5,-579.65 4268.5,-579.65 4268.5,-615.65"/>
<text text-anchor="middle" x="4229" y="-593.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3930.38,-3529.36C3948.6,-3523.12 3965.23,-3513.37 3978,-3498.65 4027.77,-3441.28 3963.26,-832.19 3998,-764.65 4036.19,-690.4 4124.38,-641.34 4179.79,-616.62"/>
<polygon fill="blue" stroke="blue" points="4181.29,-619.78 4189.06,-612.57 4178.49,-613.36 4181.29,-619.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node439" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node439"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="4257,-3409.65 4201,-3409.65 4201,-3373.65 4257,-3373.65 4257,-3409.65"/>
<text text-anchor="middle" x="4229" y="-3387.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.45,-3754.98C3886.21,-3758.33 3944.02,-3754 3978,-3717.65 4023.48,-3669 3952.11,-3466.9 3998,-3418.65 4047.38,-3366.73 4139.48,-3374.02 4190.88,-3383.24"/>
<polygon fill="blue" stroke="blue" points="4190.42,-3386.71 4200.9,-3385.15 4191.74,-3379.83 4190.42,-3386.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node413" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node413"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="4780.5,-2438.65 4533.5,-2438.65 4533.5,-2402.65 4780.5,-2402.65 4780.5,-2438.65"/>
<text text-anchor="middle" x="4657" y="-2416.95" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3868.07,-3702.53C3907.61,-3702.4 3951.08,-3693.98 3978,-3663.65 4026.06,-3609.51 3946.42,-2411.45 3998,-2360.65 4144.3,-2216.58 4256.93,-2330.26 4460,-2360.65 4508.83,-2367.96 4562.3,-2384.97 4601.04,-2399.02"/>
<polygon fill="blue" stroke="blue" points="4599.97,-2402.35 4610.56,-2402.52 4602.38,-2395.78 4599.97,-2402.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node427" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node427"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="4684,-3822.65 4630,-3822.65 4630,-3786.65 4684,-3786.65 4684,-3822.65"/>
<text text-anchor="middle" x="4657" y="-3800.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3868.24,-3702.37C4058.08,-3727.02 4491.74,-3783.32 4619.77,-3799.95"/>
<polygon fill="blue" stroke="blue" points="4619.47,-3803.44 4629.83,-3801.25 4620.37,-3796.49 4619.47,-3803.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node438" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node438"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-3463.65 4202,-3463.65 4202,-3427.65 4256,-3427.65 4256,-3463.65"/>
<text text-anchor="middle" x="4229" y="-3441.95" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3804.32,-3804.28C3847.54,-3811.82 3933.23,-3819.24 3978,-3771.65 4019.68,-3727.34 3958.41,-3544.83 3998,-3498.65 4045.91,-3442.77 4139.82,-3439.21 4191.59,-3442.07"/>
<polygon fill="blue" stroke="blue" points="4191.45,-3445.57 4201.66,-3442.73 4191.92,-3438.58 4191.45,-3445.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node422" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node422"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="4685,-3984.65 4629,-3984.65 4629,-3948.65 4685,-3948.65 4685,-3984.65"/>
<text text-anchor="middle" x="4657" y="-3962.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4413.52,-4117.38C4430.47,-4111.13 4446.37,-4102.47 4460,-4090.65 4493.91,-4061.27 4454.4,-4023.39 4488,-3993.65 4523.69,-3962.06 4581.12,-3959.56 4618.71,-3962.04"/>
<polygon fill="blue" stroke="blue" points="4618.5,-3965.53 4628.75,-3962.85 4619.07,-3958.55 4618.5,-3965.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node425" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node425"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="4684,-3930.65 4630,-3930.65 4630,-3894.65 4684,-3894.65 4684,-3930.65"/>
<text text-anchor="middle" x="4657" y="-3908.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.31,-4001.77C4056.35,-3988.64 4272.99,-3966.82 4460,-3942.65 4515.94,-3935.42 4580.57,-3925.16 4619.84,-3918.7"/>
<polygon fill="blue" stroke="blue" points="4620.45,-3922.15 4629.74,-3917.07 4619.31,-3915.24 4620.45,-3922.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node428" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node428"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="4685,-3768.65 4629,-3768.65 4629,-3732.65 4685,-3732.65 4685,-3768.65"/>
<text text-anchor="middle" x="4657" y="-3746.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3916.18,-3943.32C3936.94,-3940.34 3958.06,-3937.08 3978,-3933.65 4193.71,-3896.54 4286.19,-3965.67 4460,-3832.65 4481.78,-3815.98 4465.83,-3793.8 4488,-3777.65 4526.03,-3749.94 4581.77,-3746.26 4618.46,-3747.44"/>
<polygon fill="blue" stroke="blue" points="4618.59,-3750.94 4628.74,-3747.91 4618.91,-3743.95 4618.59,-3750.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node409" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node409"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="4826,-2546.65 4488,-2546.65 4488,-2510.65 4826,-2510.65 4826,-2546.65"/>
<text text-anchor="middle" x="4657" y="-2524.95" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.25,-3860.17C3937.96,-3854.99 3961.21,-3844.59 3978,-3825.65 4030.78,-3766.11 3941.35,-2449.52 3998,-2393.65 4034.55,-2357.61 4419.4,-2362.24 4460,-2393.65 4499.22,-2424 4451.32,-2468.28 4488,-2501.65 4489.01,-2502.57 4490.05,-2503.47 4491.1,-2504.35"/>
<polygon fill="blue" stroke="blue" points="4489.36,-2507.42 4499.47,-2510.59 4493.54,-2501.8 4489.36,-2507.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node424" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node424"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="4685,-3876.65 4629,-3876.65 4629,-3840.65 4685,-3840.65 4685,-3876.65"/>
<text text-anchor="middle" x="4657" y="-3854.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.26,-3853.57C4118.95,-3854.98 4499.11,-3857.58 4618.87,-3858.4"/>
<polygon fill="blue" stroke="blue" points="4618.96,-3861.9 4628.99,-3858.47 4619.01,-3854.9 4618.96,-3861.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node426" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node426"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="4684,-3660.65 4630,-3660.65 4630,-3624.65 4684,-3624.65 4684,-3660.65"/>
<text text-anchor="middle" x="4657" y="-3638.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.05,-3847.07C3935.54,-3842.63 3958.03,-3835.85 3978,-3825.65 3989.48,-3819.79 3986.94,-3811.27 3998,-3804.65 4191.83,-3688.64 4267.27,-3717.64 4488,-3669.65 4533.13,-3659.84 4585.79,-3651.94 4619.95,-3647.28"/>
<polygon fill="blue" stroke="blue" points="4620.49,-3650.74 4629.93,-3645.94 4619.56,-3643.8 4620.49,-3650.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node431" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node431"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="4685,-3714.65 4629,-3714.65 4629,-3678.65 4685,-3678.65 4685,-3714.65"/>
<text text-anchor="middle" x="4657" y="-3692.95" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3874.64,-3912.8C3910.21,-3910.42 3948.88,-3901.85 3978,-3879.65 3996.05,-3865.89 3980.16,-3846.69 3998,-3832.65 4161.58,-3703.9 4278.18,-3857.01 4460,-3755.65 4476.51,-3746.45 4471.47,-3732.8 4488,-3723.65 4528.64,-3701.15 4582.73,-3696.1 4618.42,-3695.56"/>
<polygon fill="blue" stroke="blue" points="4618.89,-3699.06 4628.87,-3695.52 4618.86,-3692.06 4618.89,-3699.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3929.72,-4122.65C3963.16,-4122.65 3999.03,-4122.65 4033.89,-4122.65"/>
<polygon fill="blue" stroke="blue" points="4034.18,-4126.15 4044.18,-4122.65 4034.18,-4119.15 4034.18,-4126.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge547" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.82,-3590.64C3862.93,-3597.58 3938.54,-3600.5 3978,-3555.65 4005.91,-3523.93 3975.11,-549.16 3998,-513.65 4127.94,-312.08 4253.75,-339.07 4488,-287.65 4791.01,-221.14 4961.51,-73.54 5186,-287.65 5273.35,-370.96 5293.48,-2325.39 5295.77,-2583.58"/>
<polygon fill="blue" stroke="blue" points="5292.27,-2583.68 5295.85,-2593.65 5299.27,-2583.62 5292.27,-2583.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge546" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.8,-3574.69C3862.88,-3567.76 3938.47,-3564.87 3978,-3609.65 4015.47,-3652.09 3967.07,-5600.23 3998,-5647.65 4121.11,-5836.42 4277.97,-5723.78 4460,-5856.65 4475,-5867.6 4474.52,-5874.88 4488,-5887.65 4532.33,-5929.64 4588.17,-5973.2 4622.99,-5999.36"/>
<polygon fill="blue" stroke="blue" points="4621.26,-6002.44 4631.37,-6005.63 4625.46,-5996.84 4621.26,-6002.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="node410" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<g id="a_node410"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(S::NUM_ATTRS &gt;= 1, &#39; at least one attribute required&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S::NUM_ATTRS &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; mo...">
<polygon fill="white" stroke="black" points="4696.5,-2492.65 4617.5,-2492.65 4617.5,-2456.65 4696.5,-2456.65 4696.5,-2492.65"/>
<text text-anchor="middle" x="4657" y="-2470.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge545" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.74,-3590.57C3862.77,-3597.45 3938.31,-3600.3 3978,-3555.65 4022.11,-3506.03 3950.66,-2407.21 3998,-2360.65 4071.2,-2288.66 4377.03,-2300.19 4460,-2360.65 4492.83,-2384.57 4457.18,-2421.19 4488,-2447.65 4520.58,-2475.62 4570.31,-2480.53 4607.22,-2479.55"/>
<polygon fill="blue" stroke="blue" points="4607.42,-2483.05 4617.27,-2479.14 4607.13,-2476.05 4607.42,-2483.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="node436" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<g id="a_node436"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = signing_key * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key, &#160;&#160;...">
<polygon fill="white" stroke="black" points="4268.5,-3355.65 4189.5,-3355.65 4189.5,-3319.65 4268.5,-3319.65 4268.5,-3355.65"/>
<text text-anchor="middle" x="4229" y="-3333.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge544" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.5,-3590.03C3861.93,-3596.27 3936.52,-3598.39 3978,-3555.65 4007.72,-3525.03 3968.01,-3395.02 3998,-3364.65 4044.61,-3317.45 4126.69,-3319.88 4179.14,-3327.57"/>
<polygon fill="blue" stroke="blue" points="4178.8,-3331.06 4189.22,-3329.16 4179.89,-3324.14 4178.8,-3331.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node423" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node423"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="4684,-4038.65 4630,-4038.65 4630,-4002.65 4684,-4002.65 4684,-4038.65"/>
<text text-anchor="middle" x="4657" y="-4016.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge596" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3963.76,-4159.46C3968.73,-4156.52 3973.49,-4153.26 3978,-4149.65 3997.98,-4133.65 3977.86,-4111.44 3998,-4095.65 4188.91,-3946.01 4512.05,-3992.08 4619.81,-4012.91"/>
<polygon fill="blue" stroke="blue" points="4619.36,-4016.39 4629.85,-4014.9 4620.72,-4009.52 4619.36,-4016.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge613" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.67,-3634.51C3956.62,-3628.63 3968.38,-3620.55 3978,-3609.65 4014.95,-3567.79 3958.32,-1638.94 3998,-1599.65 4143.91,-1455.18 4311.24,-1458.12 4460,-1599.65 4505.3,-1642.75 4452.04,-2110.51 4488,-2161.65 4518.28,-2204.71 4580.31,-2221.37 4619.93,-2227.76"/>
<polygon fill="blue" stroke="blue" points="4619.58,-2231.24 4629.98,-2229.23 4620.59,-2224.32 4619.58,-2231.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node417" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node417"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_struct: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r1 = sho.get_scalar(); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4692,-1261.65 4622,-1261.65 4622,-1225.65 4692,-1225.65 4692,-1261.65"/>
<text text-anchor="middle" x="4657" y="-1239.95" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge612" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.69,-3634.53C3956.64,-3628.64 3968.39,-3620.56 3978,-3609.65 4025.5,-3555.73 3946.99,-1073.27 3998,-1022.65 4143.75,-878.02 4304.78,-888.23 4460,-1022.65 4525.85,-1079.68 4426.9,-1154.56 4488,-1216.65 4519.63,-1248.79 4573.27,-1252.2 4611.43,-1249.72"/>
<polygon fill="blue" stroke="blue" points="4612.07,-1253.18 4621.75,-1248.88 4611.5,-1246.2 4612.07,-1253.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="node418" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node418"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4696.5,-1207.65 4617.5,-1207.65 4617.5,-1171.65 4696.5,-1171.65 4696.5,-1207.65"/>
<text text-anchor="middle" x="4657" y="-1185.95" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge614" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.7,-3634.53C3956.64,-3628.65 3968.39,-3620.56 3978,-3609.65 4027.48,-3553.47 3944.87,-967.39 3998,-914.65 4143.73,-770 4277.47,-820.6 4460,-914.65 4563,-967.72 4623.78,-1102.75 4646.14,-1161.56"/>
<polygon fill="blue" stroke="blue" points="4643,-1163.14 4649.76,-1171.3 4649.56,-1160.7 4643,-1163.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node429" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node429"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="4684,-4092.65 4630,-4092.65 4630,-4056.65 4684,-4056.65 4684,-4092.65"/>
<text text-anchor="middle" x="4657" y="-4070.95" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge615" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.76,-3652.21C3955.53,-3655.38 3967.06,-3659.16 3978,-3663.65 4240.45,-3771.47 4226.93,-3936.54 4488,-4047.65 4530.86,-4065.89 4584.66,-4071.91 4619.66,-4073.83"/>
<polygon fill="blue" stroke="blue" points="4619.74,-4077.34 4629.89,-4074.31 4620.06,-4070.35 4619.74,-4077.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge701" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3645.29,-4081.71C3611.07,-4077.31 3579.91,-4063.88 3566,-4032.65 3557.91,-4014.48 3557.91,-3334.82 3566,-3316.65 3593.81,-3254.2 3685.95,-3248.78 3738.82,-3251.16"/>
<polygon fill="blue" stroke="blue" points="3738.66,-3254.66 3748.84,-3251.73 3739.05,-3247.67 3738.66,-3254.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main(). -->
<g id="node403" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().</title>
<g id="a_node403"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;let mut randomness = [0u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut randomness); &#160;&#160;&#160;&#160;&#160;let secret_params = GenericServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-579.65 3231,-579.65 3231,-543.65 3285,-543.65 3285,-579.65"/>
<text text-anchor="middle" x="3258" y="-557.95" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge643" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3265.73,-543.46C3292.25,-474.8 3396.92,-230.85 3576,-141.65 3927.68,33.52 4122.7,59.82 4460,-141.65 4586.6,-217.27 4636.23,-405.96 4650.9,-477.53"/>
<polygon fill="blue" stroke="blue" points="4647.52,-478.46 4652.89,-487.59 4654.38,-477.1 4647.52,-478.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge642" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.09,-579.8C3346.56,-624.35 3499.53,-746.14 3556,-891.65 3569.39,-926.15 3551.54,-3527.88 3576,-3555.65 3612.71,-3597.33 3680.64,-3597.75 3727.05,-3592.02"/>
<polygon fill="blue" stroke="blue" points="3727.75,-3595.45 3737.19,-3590.63 3726.8,-3588.52 3727.75,-3595.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node404" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node404"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5340.5,-2834.65 5253.5,-2834.65 5253.5,-2798.65 5340.5,-2798.65 5340.5,-2834.65"/>
<text text-anchor="middle" x="5297" y="-2812.95" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge589" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5340.56,-2830.64C5357.66,-2838.36 5376.01,-2849.69 5387.5,-2865.65 5686.12,-3280.53 5544.47,-3488.6 5591,-3997.65 5596.11,-4053.58 5592.43,-12041.38 5627,-12085.65 5627.48,-12086.27 5627.98,-12086.87 5628.48,-12087.46"/>
<polygon fill="blue" stroke="blue" points="5626.06,-12089.99 5635.66,-12094.47 5630.95,-12084.98 5626.06,-12089.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="node405" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<g id="a_node405"><a xlink:title="pub fn encode_receipt_serial_bytes(receipt_serial_bytes: ReceiptSerialBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..16].copy_from_slice(&amp;receipt_seria...">
<polygon fill="white" stroke="black" points="4762,-5852.65 4552,-5852.65 4552,-5816.65 4762,-5816.65 4762,-5852.65"/>
<text text-anchor="middle" x="4657" y="-5830.95" font-family="Helvetica,sans-Serif" font-size="14.00">encode_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M4722.13,-5852.65C4753.75,-5862.09 4792.26,-5874.43 4826,-5887.65 4842.48,-5894.1 4844.98,-5899.82 4862,-5904.65 4975.05,-5936.73 5308.36,-5876.79 5387.5,-5963.65 5496.96,-6083.78 5502.24,-11587.44 5502.49,-12030.39"/>
<polygon fill="blue" stroke="blue" points="5498.99,-12030.45 5502.49,-12040.45 5505.99,-12030.44 5498.99,-12030.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time(). -->
<g id="node406" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().</title>
<g id="a_node406"><a xlink:title="pub fn encode_redemption_time(redemption_time: u32) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..4].copy_from_slice(&amp;redemption_time.to_be_bytes()); &#160;&#160;&#160;&#160;Sca...">
<polygon fill="white" stroke="black" points="4752.5,-5798.65 4561.5,-5798.65 4561.5,-5762.65 4752.5,-5762.65 4752.5,-5798.65"/>
<text text-anchor="middle" x="4657" y="-5776.95" font-family="Helvetica,sans-Serif" font-size="14.00">encode_redemption_time</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge799" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M4752.75,-5794.41C4945.53,-5822.85 5367,-5887.47 5387.5,-5911.65 5493.51,-6036.71 5501.97,-11586.53 5502.47,-12030.51"/>
<polygon fill="blue" stroke="blue" points="5498.97,-12030.58 5502.48,-12040.58 5505.97,-12030.57 5498.97,-12030.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="node407" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<g id="a_node407"><a xlink:title="pub(crate) fn convert_to_points_receipt_struct( &#160;&#160;&#160;&#160;receipt: receipt_struct::ReceiptStruct, ) &#45;&gt; Vec&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let m1 = receipt.calc_m1(); &#160;...">
<polygon fill="white" stroke="black" points="4349,-2492.65 4109,-2492.65 4109,-2456.65 4349,-2456.65 4349,-2492.65"/>
<text text-anchor="middle" x="4229" y="-2470.95" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_points_receipt_struct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4349.23,-2459.04C4390.13,-2460.54 4432.48,-2470.98 4460,-2501.65 4521.33,-2570.01 4428.14,-5738 4488,-5807.65 4501.88,-5823.8 4521.26,-5833 4541.95,-5837.87"/>
<polygon fill="blue" stroke="blue" points="4541.37,-5841.33 4551.86,-5839.88 4542.75,-5834.46 4541.37,-5841.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="node434" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<g id="a_node434"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4693.5,-1946.65 4620.5,-1946.65 4620.5,-1910.65 4693.5,-1910.65 4693.5,-1946.65"/>
<text text-anchor="middle" x="4657" y="-1924.95" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4349.28,-2489.44C4389.81,-2487.75 4431.91,-2477.39 4460,-2447.65 4531.24,-2372.24 4424.18,-2063.44 4488,-1981.65 4516.76,-1944.8 4571.06,-1933.06 4610.15,-1929.58"/>
<polygon fill="blue" stroke="blue" points="4610.53,-1933.06 4620.24,-1928.83 4610.01,-1926.08 4610.53,-1933.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="node408" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<g id="a_node408"><a xlink:title="pub(crate) fn convert_to_point_M2_receipt_serial_bytes( &#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, ) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let receipt_serial_scala...">
<polygon fill="white" stroke="black" points="4380,-2546.65 4078,-2546.65 4078,-2510.65 4380,-2510.65 4380,-2546.65"/>
<text text-anchor="middle" x="4229" y="-2524.95" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_point_M2_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4258.9,-2546.92C4310.82,-2581.66 4418.35,-2662.88 4460,-2763.65 4492.3,-2841.8 4432.86,-5743.54 4488,-5807.65 4501.89,-5823.79 4521.27,-5832.99 4541.96,-5837.86"/>
<polygon fill="blue" stroke="blue" points="4541.37,-5841.32 4551.87,-5839.87 4542.76,-5834.46 4541.37,-5841.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4663.8,-2546.69C4682.28,-2600.8 4745.58,-2761.73 4862,-2822.65 4985.95,-2887.51 5158.37,-2855.14 5243.77,-2832.46"/>
<polygon fill="blue" stroke="blue" points="5244.76,-2835.81 5253.5,-2829.81 5242.93,-2829.06 5244.76,-2835.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node412" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node412"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="5080.5,-2546.65 4959.5,-2546.65 4959.5,-2510.65 5080.5,-2510.65 5080.5,-2546.65"/>
<text text-anchor="middle" x="5020" y="-2524.95" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4826.08,-2528.65C4869.45,-2528.65 4913.78,-2528.65 4948.99,-2528.65"/>
<polygon fill="blue" stroke="blue" points="4949.14,-2532.15 4959.14,-2528.65 4949.14,-2525.15 4949.14,-2532.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="node441" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<g id="a_node441"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m_from(timestamp: Timestamp) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20220524_Timestamp_Calc_m&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;timestamp.to_be_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5071.5,-1564.65 4968.5,-1564.65 4968.5,-1528.65 5071.5,-1528.65 5071.5,-1564.65"/>
<text text-anchor="middle" x="5020" y="-1542.95" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4816.77,-2510.38C4820.04,-2507.73 4823.13,-2504.83 4826,-2501.65 4871.04,-2451.88 4846.07,-1963.85 4862,-1898.65 4893.29,-1770.57 4969.41,-1631.13 5002.83,-1573.69"/>
<polygon fill="blue" stroke="blue" points="5005.96,-1575.27 5007.99,-1564.87 4999.92,-1571.73 5005.96,-1575.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.66,-2469.16C4734.89,-2466.09 4792.39,-2468.21 4826,-2501.65 4895.3,-2570.6 4794.89,-2647.56 4862,-2718.65 4913.83,-2773.56 5139.58,-2801.75 5243.41,-2812.02"/>
<polygon fill="blue" stroke="blue" points="5243.07,-2815.5 5253.36,-2812.98 5243.75,-2808.53 5243.07,-2815.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node411" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node411"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="4268.5,-2438.65 4189.5,-2438.65 4189.5,-2402.65 4268.5,-2402.65 4268.5,-2438.65"/>
<text text-anchor="middle" x="4229" y="-2416.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.81,-2414.86C4317.86,-2409.68 4402.78,-2408.11 4460,-2447.65 4482.24,-2463.02 4466.09,-2485.81 4488,-2501.65 4489.85,-2502.99 4491.74,-2504.27 4493.66,-2505.49"/>
<polygon fill="blue" stroke="blue" points="4491.93,-2508.53 4502.33,-2510.53 4495.45,-2502.48 4491.93,-2508.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.69,-2424.95C4314.42,-2430.09 4392.8,-2439.08 4460,-2447.65 4510.31,-2454.07 4567.78,-2462.06 4607.42,-2467.68"/>
<polygon fill="blue" stroke="blue" points="4606.96,-2471.15 4617.35,-2469.09 4607.95,-2464.22 4606.96,-2471.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.91,-2410.42C4322.72,-2393.96 4417.96,-2355.99 4460,-2284.65 4515.76,-2190.04 4421.82,-1384.29 4488,-1296.65 4516.59,-1258.79 4572.23,-1247.35 4611.63,-1244.22"/>
<polygon fill="blue" stroke="blue" points="4612.02,-1247.7 4621.77,-1243.56 4611.57,-1240.71 4612.02,-1247.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.94,-2410.43C4322.77,-2393.99 4418.03,-2356.03 4460,-2284.65 4490.08,-2233.48 4448.92,-1261.32 4488,-1216.65 4516.93,-1183.59 4568.94,-1179.83 4607.45,-1182.48"/>
<polygon fill="blue" stroke="blue" points="4607.17,-1185.97 4617.43,-1183.33 4607.76,-1179 4607.17,-1185.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.94,-2411.67C4320.99,-2402.24 4412.21,-2395.2 4460,-2447.65 4503.72,-2495.63 4445.31,-3566.75 4488,-3615.65 4520.05,-3652.37 4580.57,-3652.97 4619.55,-3648.76"/>
<polygon fill="blue" stroke="blue" points="4620.44,-3652.18 4629.93,-3647.47 4619.58,-3645.23 4620.44,-3652.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.93,-2411.68C4320.97,-2402.26 4412.17,-2395.23 4460,-2447.65 4501.61,-2493.26 4447.77,-3511.81 4488,-3558.65 4519.59,-3595.42 4579.42,-3597.45 4618.5,-3594.12"/>
<polygon fill="blue" stroke="blue" points="4619.33,-3597.55 4628.93,-3593.06 4618.62,-3590.59 4619.33,-3597.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge659" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5080.86,-2531.97C5116.98,-2537.33 5160.77,-2550.4 5186,-2581.65 5242.94,-2652.2 5150.15,-2713.24 5206,-2784.65 5215.3,-2796.54 5229.36,-2804.02 5243.62,-2808.72"/>
<polygon fill="blue" stroke="blue" points="5242.89,-2812.15 5253.47,-2811.55 5244.82,-2805.43 5242.89,-2812.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge832" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4760.82,-2402.65C4881.67,-2388.03 5079.24,-2385.8 5186,-2501.65 5228.72,-2548.01 5167.85,-2734.46 5206,-2784.65 5215.13,-2796.67 5229.14,-2804.18 5243.41,-2808.88"/>
<polygon fill="blue" stroke="blue" points="5242.7,-2812.32 5253.27,-2811.7 5244.62,-2805.59 5242.7,-2812.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge834" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4780.62,-2435.89C4796.06,-2439.11 4811.52,-2442.99 4826,-2447.65 4843.03,-2453.13 4845.69,-2458.31 4862,-2465.65 4894.63,-2480.32 4931.75,-2495.3 4961.71,-2506.96"/>
<polygon fill="blue" stroke="blue" points="4960.58,-2510.28 4971.17,-2510.63 4963.11,-2503.75 4960.58,-2510.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="node435" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<g id="a_node435"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[0u8; std::mem::size_of::&lt;Timestamp&gt;() + std::mem::size_of::&lt;Re...">
<polygon fill="white" stroke="black" points="5076,-1946.65 4964,-1946.65 4964,-1910.65 5076,-1910.65 5076,-1946.65"/>
<text text-anchor="middle" x="5020" y="-1924.95" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge833" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4688.42,-2402.53C4725.26,-2379.26 4787.18,-2335.74 4826,-2284.65 4850.33,-2252.63 4843.95,-2237.58 4862,-2201.65 4908.58,-2108.94 4972.37,-2003.66 5002.27,-1955.4"/>
<polygon fill="blue" stroke="blue" points="5005.31,-1957.14 5007.61,-1946.79 4999.36,-1953.44 5005.31,-1957.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node414" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node414"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="4297.5,-2249.65 4160.5,-2249.65 4160.5,-2213.65 4297.5,-2213.65 4297.5,-2249.65"/>
<text text-anchor="middle" x="4229" y="-2227.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.5,-2231.65C4388.77,-2231.65 4548.32,-2231.65 4619.69,-2231.65"/>
<polygon fill="blue" stroke="blue" points="4619.96,-2235.15 4629.96,-2231.65 4619.96,-2228.15 4619.96,-2235.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="node415" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<g id="a_node415"><a xlink:title=" &#160;&#160;&#160;pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY_LEN].co...">
<polygon fill="white" stroke="black" points="5051.5,-2249.65 4988.5,-2249.65 4988.5,-2213.65 5051.5,-2213.65 5051.5,-2249.65"/>
<text text-anchor="middle" x="5020" y="-2227.95" font-family="Helvetica,sans-Serif" font-size="14.00">calc_j3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5050.77,-2249.86C5089.88,-2275.67 5156.98,-2326.93 5186,-2390.65 5204.17,-2430.54 5179.82,-2749.49 5206,-2784.65 5215.01,-2796.76 5228.99,-2804.3 5243.26,-2808.99"/>
<polygon fill="blue" stroke="blue" points="5242.56,-2812.43 5253.13,-2811.81 5244.48,-2805.7 5242.56,-2812.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="edge782" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-2231.65C4746.42,-2231.65 4903.01,-2231.65 4977.88,-2231.65"/>
<polygon fill="blue" stroke="blue" points="4978.32,-2235.15 4988.32,-2231.65 4978.32,-2228.15 4978.32,-2235.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4692.07,-1241.51C4798.19,-1235.67 5119.67,-1224.35 5186,-1296.65 5212.71,-1325.76 5191.4,-2681.94 5206,-2718.65 5217.73,-2748.15 5242.81,-2774.22 5263.52,-2792.04"/>
<polygon fill="blue" stroke="blue" points="5261.29,-2794.74 5271.2,-2798.46 5265.77,-2789.37 5261.29,-2794.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge550" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.84,-1177.87C4795.54,-1150.62 5057.23,-1095.58 5186,-1233.65 5214.14,-1263.82 5190.77,-2680.31 5206,-2718.65 5217.72,-2748.16 5242.8,-2774.23 5263.51,-2792.05"/>
<polygon fill="blue" stroke="blue" points="5261.28,-2794.74 5271.2,-2798.46 5265.77,-2789.37 5261.28,-2794.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node419" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node419"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4315,-1261.65 4143,-1261.65 4143,-1225.65 4315,-1225.65 4315,-1261.65"/>
<text text-anchor="middle" x="4229" y="-1239.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge637" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.17,-1249.95C4365.88,-1258.55 4426.66,-1278.37 4460,-1323.65 4515.24,-1398.67 4435.04,-2085.01 4488,-2161.65 4517.93,-2204.96 4580.06,-2221.55 4619.8,-2227.85"/>
<polygon fill="blue" stroke="blue" points="4619.48,-2231.34 4629.88,-2229.3 4620.48,-2224.41 4619.48,-2231.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge638" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.18,-1243.65C4404.56,-1243.65 4541.59,-1243.65 4611.55,-1243.65"/>
<polygon fill="blue" stroke="blue" points="4611.78,-1247.15 4621.78,-1243.65 4611.78,-1240.15 4611.78,-1247.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge639" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.18,-1232.85C4402.78,-1221.75 4536.14,-1204.84 4607.28,-1195.83"/>
<polygon fill="blue" stroke="blue" points="4607.83,-1199.28 4617.31,-1194.55 4606.95,-1192.34 4607.83,-1199.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5055.07,-1463.72C5093.87,-1465.85 5155.8,-1475.93 5186,-1516.65 5226.71,-1571.54 5162.76,-2693.73 5206,-2746.65 5258.26,-2810.62 5310.85,-2755.85 5387.5,-2786.65 5485.77,-2826.14 5538.42,-2818.71 5591,-2910.65 5713.01,-3123.97 5731.83,-11478.53 5732.94,-12030.08"/>
<polygon fill="blue" stroke="blue" points="5729.45,-12030.36 5732.97,-12040.35 5736.45,-12030.35 5729.45,-12030.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node421" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node421"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="4759.5,-1481.65 4554.5,-1481.65 4554.5,-1445.65 4759.5,-1445.65 4759.5,-1481.65"/>
<text text-anchor="middle" x="4657" y="-1459.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge517" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4759.56,-1474.57C4785.12,-1482.36 4809.86,-1495.31 4826,-1516.65 4866.3,-1569.93 4857.49,-2652 4862,-2718.65 4901.97,-3309.68 4995.31,-4028.49 5015.22,-4178.43"/>
<polygon fill="blue" stroke="blue" points="5011.79,-4179.16 5016.58,-4188.61 5018.73,-4178.24 5011.79,-4179.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge518" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4759.52,-1463.65C4830.29,-1463.65 4921.25,-1463.65 4974.54,-1463.65"/>
<polygon fill="blue" stroke="blue" points="4974.67,-1467.15 4984.67,-1463.65 4974.67,-1460.15 4974.67,-1467.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.04,-3961.91C4722.69,-3957.05 4790.27,-3954.87 4826,-3993.65 4895.79,-4069.38 4790.62,-4381.43 4862,-4455.65 4962.5,-4560.15 5088.3,-4386.53 5186,-4493.65 5216.15,-4526.7 5200.25,-5254.29 5206,-5298.65 5223.31,-5432.1 5268.09,-5587.08 5287.17,-5649.49"/>
<polygon fill="blue" stroke="blue" points="5283.93,-5650.84 5290.22,-5659.37 5290.62,-5648.78 5283.93,-5650.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.05,-3971.63C4723.02,-3976.88 4791.35,-3979.59 4826,-3939.65 4863.16,-3896.82 4849.7,-1954 4862,-1898.65 4890.59,-1769.95 4968.17,-1630.84 5002.4,-1573.59"/>
<polygon fill="blue" stroke="blue" points="5005.53,-1575.18 5007.69,-1564.8 4999.53,-1571.56 5005.53,-1575.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.04,-4015.85C4721.73,-4010.59 4790.82,-4007.58 4826,-4047.65 4870.84,-4098.73 4848.58,-5204.02 4862,-5270.65 4892.09,-5420.01 4971.84,-5585.96 5004.62,-5650.19"/>
<polygon fill="blue" stroke="blue" points="5001.6,-5651.97 5009.28,-5659.27 5007.83,-5648.77 5001.6,-5651.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.16,-4023.84C4720.13,-4026.73 4785.07,-4026.42 4826,-3993.65 5217.28,-3680.39 5284.36,-2992.67 5294.39,-2844.95"/>
<polygon fill="blue" stroke="blue" points="5297.89,-2845.09 5295.04,-2834.89 5290.9,-2844.64 5297.89,-2845.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.1,-3853.86C4722.81,-3848.94 4790.46,-3846.69 4826,-3885.65 4905.85,-3973.19 4780.3,-4331.83 4862,-4417.65 4961.97,-4522.66 5088.36,-4348.47 5186,-4455.65 5217.55,-4490.28 5200,-5252.19 5206,-5298.65 5223.24,-5432.11 5268.05,-5587.08 5287.16,-5649.49"/>
<polygon fill="blue" stroke="blue" points="5283.92,-5650.85 5290.21,-5659.37 5290.61,-5648.78 5283.92,-5650.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.05,-3907.84C4721.76,-3902.57 4790.87,-3899.54 4826,-3939.65 4874.73,-3995.3 4847.48,-5198.12 4862,-5270.65 4891.91,-5420.04 4971.76,-5585.98 5004.6,-5650.2"/>
<polygon fill="blue" stroke="blue" points="5001.58,-5651.98 5009.27,-5659.27 5007.8,-5648.78 5001.58,-5651.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.31,-3917.45C4722.02,-3922.64 4790.76,-3925.47 4826,-3885.65 4896.53,-3805.97 4793.87,-3010.39 4862,-2928.65 4956.45,-2815.34 5044.38,-2897.94 5186,-2856.65 5205.1,-2851.08 5225.68,-2843.92 5243.81,-2837.2"/>
<polygon fill="blue" stroke="blue" points="5245.19,-2840.42 5253.33,-2833.63 5242.74,-2833.87 5245.19,-2840.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.08,-3637.82C4721.81,-3632.52 4790.96,-3629.46 4826,-3669.65 4884.46,-3736.71 4844.73,-5183.38 4862,-5270.65 4891.57,-5420.11 4971.62,-5586.01 5004.55,-5650.21"/>
<polygon fill="blue" stroke="blue" points="5001.54,-5652 5009.24,-5659.28 5007.75,-5648.79 5001.54,-5652"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.08,-3647.49C4721.83,-3652.8 4790.99,-3655.87 4826,-3615.65 4888.64,-3543.68 4841.16,-1991.76 4862,-1898.65 4890.8,-1769.99 4968.27,-1630.87 5002.43,-1573.6"/>
<polygon fill="blue" stroke="blue" points="5005.56,-1575.18 5007.72,-1564.81 4999.56,-1571.57 5005.56,-1575.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.06,-3799.83C4721.78,-3794.55 4790.91,-3791.5 4826,-3831.65 4878.62,-3891.87 4846.38,-5192.22 4862,-5270.65 4891.76,-5420.07 4971.7,-5585.99 5004.58,-5650.2"/>
<polygon fill="blue" stroke="blue" points="5001.56,-5651.99 5009.25,-5659.27 5007.78,-5648.78 5001.56,-5651.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.07,-3809.48C4721.81,-3814.78 4790.96,-3817.84 4826,-3777.65 4883.56,-3711.64 4838.44,-2286 4862,-2201.65 4889.76,-2102.26 4961.94,-2001.02 4997.94,-1954.69"/>
<polygon fill="blue" stroke="blue" points="5000.8,-1956.72 5004.22,-1946.69 4995.29,-1952.4 5000.8,-1956.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.14,-3745.83C4722.9,-3740.85 4790.62,-3738.55 4826,-3777.65 4915.93,-3877.02 4769.98,-4282.22 4862,-4379.65 4961.56,-4485.05 5088.41,-4310.42 5186,-4417.65 5202.48,-4435.75 5202.88,-5274.37 5206,-5298.65 5223.17,-5432.12 5268.02,-5587.09 5287.15,-5649.49"/>
<polygon fill="blue" stroke="blue" points="5283.91,-5650.85 5290.2,-5659.37 5290.6,-5648.78 5283.91,-5650.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4628.98,-3755.61C4591.04,-3760.82 4522.75,-3763.5 4488,-3723.65 4443.37,-3672.47 4505.71,-2551.87 4460,-2501.65 4434.6,-2473.74 4396.9,-2462.67 4359.35,-2459.84"/>
<polygon fill="blue" stroke="blue" points="4359.47,-2456.34 4349.29,-2459.27 4359.08,-2463.33 4359.47,-2456.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.2,-4074.27C4722.43,-4075.3 4792.57,-4083.53 4826,-4127.65 4864.36,-4178.29 4849.39,-5208.38 4862,-5270.65 4892.24,-5419.98 4971.91,-5585.95 5004.64,-5650.19"/>
<polygon fill="blue" stroke="blue" points="5001.62,-5651.96 5009.3,-5659.26 5007.85,-5648.77 5001.62,-5651.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge554" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.18,-3583.79C4723,-3578.76 4790.78,-3576.41 4826,-3615.65 4877.87,-3673.44 4808.05,-4257.79 4862,-4313.65 4912.21,-4365.63 5136.59,-4288.91 5186,-4341.65 5204.18,-4361.06 5202.63,-5272.28 5206,-5298.65 5223.05,-5432.14 5267.97,-5587.1 5287.13,-5649.49"/>
<polygon fill="blue" stroke="blue" points="5283.89,-5650.85 5290.19,-5659.37 5290.58,-5648.78 5283.89,-5650.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge553" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.09,-3593.08C4723.12,-3597.56 4791.52,-3598.94 4826,-3558.65 4885.98,-3488.57 4841.81,-1988.66 4862,-1898.65 4890.85,-1770 4968.29,-1630.87 5002.44,-1573.6"/>
<polygon fill="blue" stroke="blue" points="5005.57,-1575.18 5007.72,-1564.81 4999.57,-1571.58 5005.57,-1575.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge655" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.15,-3691.82C4722.92,-3686.84 4790.65,-3684.53 4826,-3723.65 4918.23,-3825.72 4767.62,-4241.57 4862,-4341.65 4961.48,-4447.13 5088.46,-4272.38 5186,-4379.65 5203.18,-4398.54 5202.75,-5273.32 5206,-5298.65 5223.11,-5432.13 5268,-5587.09 5287.14,-5649.49"/>
<polygon fill="blue" stroke="blue" points="5283.9,-5650.85 5290.2,-5659.37 5290.59,-5648.78 5283.9,-5650.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge656" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4628.98,-3701.6C4591.06,-3706.81 4522.78,-3709.48 4488,-3669.65 4445.31,-3620.75 4503.72,-2549.63 4460,-2501.65 4434.58,-2473.76 4396.89,-2462.69 4359.33,-2459.86"/>
<polygon fill="blue" stroke="blue" points="4359.45,-2456.36 4349.27,-2459.29 4359.06,-2463.35 4359.45,-2456.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4264.04,-543.44C4309.76,-544.09 4392.98,-548.59 4460,-570.65 4473.61,-575.13 4474.65,-581.45 4488,-586.65 4788.91,-703.91 4997.44,-526.46 5186,-788.65 5217.3,-832.18 5186.28,-2668.79 5206,-2718.65 5217.68,-2748.17 5242.76,-2774.24 5263.48,-2792.06"/>
<polygon fill="blue" stroke="blue" points="5261.25,-2794.76 5271.18,-2798.47 5265.74,-2789.38 5261.25,-2794.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4193.87,-534.54C4135.16,-521.64 4020.36,-507 3988,-579.65 3977.19,-603.92 3977.19,-2468.38 3988,-2492.65 4010.48,-2543.13 4072.76,-2551.47 4128.38,-2547.53"/>
<polygon fill="blue" stroke="blue" points="4129,-2550.99 4138.67,-2546.66 4128.41,-2544.01 4129,-2550.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.63,-606.99C4433.67,-647.76 5076.14,-815.48 5186,-981.65 5212.61,-1021.9 5188.23,-2673.79 5206,-2718.65 5217.69,-2748.17 5242.77,-2774.24 5263.49,-2792.05"/>
<polygon fill="blue" stroke="blue" points="5261.26,-2794.75 5271.19,-2798.47 5265.75,-2789.38 5261.26,-2794.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4693.6,-1928.65C4753.91,-1928.65 4877.04,-1928.65 4953.34,-1928.65"/>
<polygon fill="blue" stroke="blue" points="4953.79,-1932.15 4963.79,-1928.65 4953.79,-1925.15 4953.79,-1932.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge610" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5036.7,-1946.88C5071.48,-1988.58 5154.44,-2095.48 5186,-2201.65 5204.47,-2263.78 5167.72,-2732.34 5206,-2784.65 5214.99,-2796.94 5229.11,-2804.53 5243.52,-2809.21"/>
<polygon fill="blue" stroke="blue" points="5242.91,-2812.67 5253.49,-2812.01 5244.8,-2805.93 5242.91,-2812.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.66,-3346.06C4320.81,-3354.86 4412.62,-3360.9 4460,-3307.65 4499.66,-3263.07 4446.61,-1202.63 4488,-1159.65 4703.26,-936.11 4965.17,-922.6 5186,-1140.65 5217.19,-1171.45 5189.83,-2677.9 5206,-2718.65 5217.71,-2748.16 5242.79,-2774.23 5263.5,-2792.05"/>
<polygon fill="blue" stroke="blue" points="5261.27,-2794.75 5271.19,-2798.47 5265.76,-2789.37 5261.27,-2794.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node437" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node437"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="3834.5,-3409.65 3719.5,-3409.65 3719.5,-3373.65 3834.5,-3373.65 3834.5,-3409.65"/>
<text text-anchor="middle" x="3777" y="-3387.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.51,-3384.63C3878.94,-3379.13 3942.41,-3371.32 3998,-3364.65 4060.53,-3357.14 4132.66,-3348.71 4179.22,-3343.3"/>
<polygon fill="blue" stroke="blue" points="4179.8,-3346.76 4189.33,-3342.13 4179,-3339.8 4179.8,-3346.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.51,-3398.67C3878.94,-3404.17 3942.41,-3411.98 3998,-3418.65 4066.51,-3426.88 4146.54,-3436.21 4191.85,-3441.47"/>
<polygon fill="blue" stroke="blue" points="4191.44,-3444.94 4201.78,-3442.62 4192.25,-3437.99 4191.44,-3444.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.54,-3391.65C3927.76,-3391.65 4111.27,-3391.65 4190.31,-3391.65"/>
<polygon fill="blue" stroke="blue" points="4190.75,-3395.15 4200.75,-3391.65 4190.75,-3388.15 4190.75,-3395.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.29,-3442.48C4305.38,-3438.23 4410.47,-3437.26 4460,-3498.65 4532.19,-3588.11 4412.85,-5480.66 4488,-5567.65 4519.86,-5604.53 4580.44,-5605.09 4619.48,-5600.82"/>
<polygon fill="blue" stroke="blue" points="4620.39,-5604.24 4629.88,-5599.52 4619.52,-5597.29 4620.39,-5604.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge611" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.38,-3384.89C4306.37,-3374.61 4408.67,-3361.81 4460,-3418.65 4494.48,-3456.83 4473.49,-5221.29 4488,-5270.65 4517.3,-5370.34 4594.32,-5469.38 4633.06,-5514.84"/>
<polygon fill="blue" stroke="blue" points="4630.42,-5517.15 4639.6,-5522.44 4635.73,-5512.58 4630.42,-5517.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m(). -->
<g id="node440" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().</title>
<g id="a_node440"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m_from(self.timestamp) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4689,-1564.65 4625,-1564.65 4625,-1528.65 4689,-1528.65 4689,-1564.65"/>
<text text-anchor="middle" x="4657" y="-1542.95" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4689.09,-1546.65C4748.83,-1546.65 4880.62,-1546.65 4958.34,-1546.65"/>
<polygon fill="blue" stroke="blue" points="4958.47,-1550.15 4968.47,-1546.65 4958.47,-1543.15 4958.47,-1550.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5032.85,-1564.72C5065.05,-1615.02 5153.93,-1761.98 5186,-1898.65 5197.25,-1946.58 5177.16,-2744.75 5206,-2784.65 5214.92,-2796.99 5229.02,-2804.59 5243.43,-2809.27"/>
<polygon fill="blue" stroke="blue" points="5242.83,-2812.74 5253.4,-2812.07 5244.72,-2806 5242.83,-2812.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node442" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node442"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4733,-1398.65 4581,-1398.65 4581,-1362.65 4733,-1362.65 4733,-1398.65"/>
<text text-anchor="middle" x="4657" y="-1376.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.3,-1385.22C4767.18,-1391.45 4804.35,-1404.97 4826,-1433.65 4869.03,-1490.65 4857.25,-2647.39 4862,-2718.65 4901.4,-3309.72 4995.19,-4028.5 5015.2,-4178.44"/>
<polygon fill="blue" stroke="blue" points="5011.77,-4179.17 5016.56,-4188.61 5018.71,-4178.24 5011.77,-4179.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.24,-1369.4C4806.29,-1358.47 4914.71,-1342.25 4974.82,-1333.26"/>
<polygon fill="blue" stroke="blue" points="4975.38,-1336.71 4984.75,-1331.77 4974.35,-1329.79 4975.38,-1336.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node443" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node443"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="4733,-1344.65 4581,-1344.65 4581,-1308.65 4733,-1308.65 4733,-1344.65"/>
<text text-anchor="middle" x="4657" y="-1322.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge519" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.1,-1318.89C4766.51,-1319.83 4803.34,-1327.75 4826,-1353.65 4875.96,-1410.74 4857.02,-2642.95 4862,-2718.65 4900.92,-3309.75 4995.08,-4028.5 5015.18,-4178.44"/>
<polygon fill="blue" stroke="blue" points="5011.75,-4179.17 5016.55,-4188.61 5018.69,-4178.24 5011.75,-4179.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge520" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.24,-1326.65C4806.14,-1326.65 4914.27,-1326.65 4974.45,-1326.65"/>
<polygon fill="blue" stroke="blue" points="4974.75,-1330.15 4984.75,-1326.65 4974.75,-1323.15 4974.75,-1330.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge548" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5055.19,-1337.7C5094.73,-1352.53 5157.98,-1383.02 5186,-1433.65 5220.58,-1496.12 5159.1,-2664.82 5206,-2718.65 5232.81,-2749.42 5347.44,-2738.85 5387.5,-2746.65 5478.71,-2764.41 5532.77,-2722.23 5591,-2794.65 5746.99,-2988.64 5734.07,-11473.97 5733.06,-12030.06"/>
<polygon fill="blue" stroke="blue" points="5729.55,-12030.41 5733.04,-12040.42 5736.55,-12030.42 5729.55,-12030.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node445" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node445"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="4328.5,-4601.65 4129.5,-4601.65 4129.5,-4565.65 4328.5,-4565.65 4328.5,-4601.65"/>
<text text-anchor="middle" x="4229" y="-4579.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.61,-4591.87C4372.23,-4590.78 4422.11,-4582.62 4460,-4556.65 4481.98,-4541.59 4466.86,-4519.87 4488,-4503.65 4610.24,-4409.87 4719.23,-4537.73 4826,-4426.65 4886.47,-4363.74 4799.87,-4294.91 4862,-4233.65 4887.43,-4208.57 4927.16,-4201.93 4960.29,-4201.5"/>
<polygon fill="blue" stroke="blue" points="4960.31,-4205 4970.33,-4201.55 4960.35,-4198 4960.31,-4205"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.51,-4599.31C4375.26,-4600.77 4427.81,-4592.59 4460,-4556.65 4535.63,-4472.2 4407.57,-555.54 4488,-475.65 4543.05,-420.97 5131.31,-441.61 5186,-496.65 5263.13,-574.27 5291.94,-2336.94 5295.59,-2583.19"/>
<polygon fill="blue" stroke="blue" points="5292.1,-2583.51 5295.74,-2593.45 5299.1,-2583.4 5292.1,-2583.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.76,-4568.53C4375.14,-4567.35 4427.28,-4575.61 4460,-4610.65 4504.03,-4657.81 4444.98,-5142.57 4488,-5190.65 4518.38,-5224.6 4573.12,-5227.45 4611.85,-5224.34"/>
<polygon fill="blue" stroke="blue" points="4612.2,-5227.82 4621.82,-5223.38 4611.53,-5220.86 4612.2,-5227.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.6,-4568.69C4374.93,-4567.54 4427.09,-4575.79 4460,-4610.65 4532.13,-4687.06 4417.51,-5004.73 4488,-5082.65 4520.33,-5118.39 4579.7,-5119.54 4618.5,-5115.68"/>
<polygon fill="blue" stroke="blue" points="4619.33,-5119.1 4628.86,-5114.48 4618.52,-5112.15 4619.33,-5119.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.54,-4569.02C4374.71,-4568 4426.75,-4576.25 4460,-4610.65 4512.23,-4664.68 4449.29,-4883.24 4488,-4947.65 4517.89,-4997.38 4580.47,-5028.24 4620.25,-5043.65"/>
<polygon fill="blue" stroke="blue" points="4619.24,-5047.01 4629.83,-5047.24 4621.7,-5040.46 4619.24,-5047.01"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.68,-4569.16C4374.74,-4568.22 4426.64,-4576.5 4460,-4610.65 4506.63,-4658.39 4441.95,-4861.35 4488,-4909.65 4540.35,-4964.56 4753.74,-4934.54 4826,-4957.65 4883.9,-4976.17 4945.35,-5010.98 4982.96,-5034.24"/>
<polygon fill="blue" stroke="blue" points="4981.2,-5037.27 4991.53,-5039.6 4984.91,-5031.33 4981.2,-5037.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.71,-4590.6C4369.66,-4594.68 4417.46,-4601 4460,-4610.65 4513.83,-4622.86 4573.57,-4644.52 4612.78,-4659.9"/>
<polygon fill="blue" stroke="blue" points="4611.71,-4663.24 4622.29,-4663.67 4614.28,-4656.73 4611.71,-4663.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.52,-4572.11C4373.29,-4572.21 4424.15,-4580.51 4460,-4610.65 4493.37,-4638.7 4455.24,-4675.9 4488,-4704.65 4523.82,-4736.09 4581.21,-4738.62 4618.76,-4736.2"/>
<polygon fill="blue" stroke="blue" points="4619.1,-4739.69 4628.8,-4735.41 4618.55,-4732.71 4619.1,-4739.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node446" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node446"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4266,-4655.65 4192,-4655.65 4192,-4619.65 4266,-4619.65 4266,-4655.65"/>
<text text-anchor="middle" x="4229" y="-4633.95" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge680" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.27,-4633.93C4318.2,-4630.85 4412.69,-4634.06 4460,-4690.65 4501.38,-4740.15 4457.02,-5214.05 4488,-5270.65 4576.46,-5432.27 4681.06,-5396.91 4826,-5510.65 4886.92,-5558.46 4954.62,-5618.83 4991.44,-5652.33"/>
<polygon fill="blue" stroke="blue" points="4989.51,-5655.29 4999.25,-5659.45 4994.22,-5650.12 4989.51,-5655.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge679" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.18,-4634.3C4425.84,-4620.39 5064.75,-4574.35 5186,-4715.65 5207.1,-4740.24 5201.68,-5266.53 5206,-5298.65 5223.94,-5432.02 5268.37,-5587.04 5287.27,-5649.48"/>
<polygon fill="blue" stroke="blue" points="5284.02,-5650.82 5290.28,-5659.36 5290.71,-5648.77 5284.02,-5650.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge676" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.1,-4634.07C4317.82,-4631.17 4412.04,-4634.61 4460,-4690.65 4516.78,-4757 4429.02,-5018.24 4488,-5082.65 4520.55,-5118.2 4579.85,-5119.4 4618.58,-5115.6"/>
<polygon fill="blue" stroke="blue" points="4619.38,-5119.03 4628.92,-5114.42 4618.59,-5112.08 4619.38,-5119.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge681" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.36,-4634.2C4317.95,-4631.53 4411.53,-4635.33 4460,-4690.65 4503.39,-4740.18 4448.92,-4932.65 4488,-4985.65 4519.15,-5027.91 4580.64,-5044.8 4619.96,-5051.45"/>
<polygon fill="blue" stroke="blue" points="4619.51,-5054.92 4629.93,-5053 4620.58,-5048.01 4619.51,-5054.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge682" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.25,-4634.29C4317.72,-4631.73 4411.15,-4635.66 4460,-4690.65 4536.31,-4776.54 4412.06,-4861.43 4488,-4947.65 4590.1,-5063.58 4700.04,-4939.23 4826,-5028.65 4850.13,-5045.78 4842.5,-5062.4 4862,-5084.65 4899.66,-5127.62 4951.55,-5168.81 4985.18,-5193.68"/>
<polygon fill="blue" stroke="blue" points="4983.19,-5196.55 4993.32,-5199.64 4987.32,-5190.9 4983.19,-5196.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge677" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.32,-4641.06C4344.45,-4648.4 4528.21,-4665.65 4612.44,-4673.56"/>
<polygon fill="blue" stroke="blue" points="4612.16,-4677.05 4622.44,-4674.5 4612.81,-4670.08 4612.16,-4677.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge678" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.22,-4643.26C4312.18,-4650.99 4393.48,-4666.74 4460,-4690.65 4473.09,-4695.36 4474.76,-4700.39 4488,-4704.65 4531.7,-4718.72 4584.26,-4725.66 4618.82,-4728.94"/>
<polygon fill="blue" stroke="blue" points="4618.66,-4732.44 4628.93,-4729.84 4619.29,-4725.47 4618.66,-4732.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node447" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node447"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="4297.5,-4385.65 4160.5,-4385.65 4160.5,-4349.65 4297.5,-4349.65 4297.5,-4385.65"/>
<text text-anchor="middle" x="4229" y="-4363.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge706" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.69,-4359.75C4343.51,-4354.4 4405.4,-4347.14 4460,-4340.65 4541.35,-4330.99 4757.73,-4341.93 4826,-4296.65 4852.87,-4278.83 4835.59,-4252.15 4862,-4233.65 4890.41,-4213.75 4928.67,-4206.87 4960.31,-4205.03"/>
<polygon fill="blue" stroke="blue" points="4960.49,-4208.52 4970.33,-4204.59 4960.18,-4201.53 4960.49,-4208.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge708" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.6,-4381.01C4350.11,-4387.06 4420.43,-4384.82 4460,-4340.65 4533.6,-4258.49 4409.73,-447.37 4488,-369.65 4543.03,-315 5129.83,-316.17 5186,-369.65 5270.21,-449.83 5293.02,-2329.73 5295.71,-2583.42"/>
<polygon fill="blue" stroke="blue" points="5292.22,-2583.68 5295.82,-2593.65 5299.22,-2583.61 5292.22,-2583.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge707" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.61,-4373.43C4345.96,-4374.45 4410.9,-4369.18 4460,-4340.65 4478.14,-4330.11 4472.17,-4316.42 4488,-4302.65 4527.8,-4268.02 4582.99,-4241.29 4619.09,-4226.02"/>
<polygon fill="blue" stroke="blue" points="4620.84,-4229.08 4628.73,-4222.02 4618.16,-4222.62 4620.84,-4229.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge705" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.75,-4379.31C4348.93,-4383.98 4417.4,-4380.74 4460,-4340.65 4511.3,-4292.38 4437.74,-4234 4488,-4184.65 4522.49,-4150.79 4581.52,-4149.18 4619.63,-4152.43"/>
<polygon fill="blue" stroke="blue" points="4619.49,-4155.93 4629.79,-4153.45 4620.19,-4148.97 4619.49,-4155.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge704" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.61,-4361.44C4346.11,-4360.2 4411.23,-4365.35 4460,-4394.65 4561.25,-4455.48 4622.98,-4591.05 4645.87,-4649.71"/>
<polygon fill="blue" stroke="blue" points="4642.74,-4651.32 4649.57,-4659.41 4649.28,-4648.82 4642.74,-4651.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge703" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.69,-4355.08C4349.53,-4349.71 4418.91,-4352.45 4460,-4394.65 4508.25,-4444.21 4440.81,-4654.08 4488,-4704.65 4520.79,-4739.79 4579.76,-4741.17 4618.39,-4737.51"/>
<polygon fill="blue" stroke="blue" points="4619.15,-4740.95 4628.71,-4736.37 4618.38,-4733.99 4619.15,-4740.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential(). -->
<g id="node448" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().</title>
<g id="a_node448"><a xlink:title="fn test_room_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; RoomCredential&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair = Blindin...">
<polygon fill="white" stroke="black" points="4309,-4493.65 4149,-4493.65 4149,-4457.65 4309,-4457.65 4309,-4493.65"/>
<text text-anchor="middle" x="4229" y="-4471.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_room_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge765" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4309.07,-4490.17C4359.96,-4494.53 4423.25,-4489.68 4460,-4448.65 4534.89,-4365.04 4408.35,-486.75 4488,-407.65 4543.03,-353 5129.81,-354.19 5186,-407.65 5268.78,-486.4 5292.8,-2332.6 5295.69,-2583.51"/>
<polygon fill="blue" stroke="blue" points="5292.19,-2583.67 5295.81,-2593.63 5299.19,-2583.59 5292.19,-2583.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge764" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4309.25,-4462.15C4359.4,-4458.48 4421.75,-4463.71 4460,-4502.65 4504.13,-4547.58 4447,-4736.85 4488,-4784.65 4588.98,-4902.4 4690.58,-4796 4826,-4871.65 4900.53,-4913.28 4967.35,-4990.76 4999.24,-5031.33"/>
<polygon fill="blue" stroke="blue" points="4996.61,-5033.65 5005.51,-5039.4 5002.14,-5029.36 4996.61,-5033.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node449" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node449"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="4452,-4547.65 4006,-4547.65 4006,-4511.65 4452,-4511.65 4452,-4547.65"/>
<text text-anchor="middle" x="4229" y="-4525.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge778" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4444.58,-4511.56C4449.89,-4508.86 4455.04,-4505.9 4460,-4502.65 4480.66,-4489.12 4468.26,-4469.49 4488,-4454.65 4611.82,-4361.58 4715.79,-4478.5 4826,-4369.65 4870.49,-4325.71 4815.88,-4275.87 4862,-4233.65 4888.05,-4209.81 4927.17,-4203.03 4959.84,-4202.23"/>
<polygon fill="blue" stroke="blue" points="4960.22,-4205.73 4970.2,-4202.17 4960.18,-4198.73 4960.22,-4205.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge774" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.1,-4511.46C4454.21,-4508.73 4457.18,-4505.8 4460,-4502.65 4535.19,-4418.7 4408.04,-525.06 4488,-445.65 4543.03,-391 5129.79,-392.22 5186,-445.65 5267.35,-522.97 5292.59,-2335.53 5295.67,-2583.61"/>
<polygon fill="blue" stroke="blue" points="5292.17,-2583.67 5295.79,-2593.63 5299.17,-2583.59 5292.17,-2583.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge772" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.94,-4547.99C4454.1,-4550.68 4457.13,-4553.56 4460,-4556.65 4508.01,-4608.29 4441.09,-5138 4488,-5190.65 4518.31,-5224.67 4573.07,-5227.5 4611.82,-5224.37"/>
<polygon fill="blue" stroke="blue" points="4612.18,-5227.85 4621.8,-5223.41 4611.51,-5220.89 4612.18,-5227.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge776" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.9,-4548.02C4454.07,-4550.7 4457.11,-4553.57 4460,-4556.65 4540.09,-4642.01 4409.74,-4995.61 4488,-5082.65 4520.23,-5118.49 4579.62,-5119.61 4618.46,-5115.71"/>
<polygon fill="blue" stroke="blue" points="4619.3,-5119.14 4628.82,-5114.51 4618.49,-5112.19 4619.3,-5119.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge773" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.33,-4547.75C4453.7,-4550.5 4456.93,-4553.46 4460,-4556.65 4514.58,-4613.33 4452.56,-4839.39 4488,-4909.65 4517.39,-4967.9 4581.09,-5012.83 4621.06,-5036.66"/>
<polygon fill="blue" stroke="blue" points="4619.54,-5039.83 4629.94,-5041.84 4623.07,-5033.78 4619.54,-5039.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge777" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.29,-4547.79C4453.67,-4550.53 4456.92,-4553.48 4460,-4556.65 4508.99,-4607.04 4438.89,-4821.38 4488,-4871.65 4540.82,-4925.72 4755.89,-4881.4 4826,-4909.65 4895.36,-4937.6 4961.12,-4997.71 4995.07,-5032.11"/>
<polygon fill="blue" stroke="blue" points="4992.73,-5034.72 5002.21,-5039.45 4997.75,-5029.84 4992.73,-5034.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge779" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4430.06,-4547.7C4440.28,-4550.31 4450.32,-4553.28 4460,-4556.65 4523.98,-4578.92 4589.12,-4624.71 4625.86,-4653.13"/>
<polygon fill="blue" stroke="blue" points="4624.11,-4656.2 4634.14,-4659.61 4628.42,-4650.69 4624.11,-4656.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge775" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4449.39,-4547.86C4453.08,-4550.57 4456.62,-4553.5 4460,-4556.65 4508.97,-4602.3 4440.01,-4657.97 4488,-4704.65 4522.36,-4738.07 4580.64,-4739.97 4618.73,-4736.89"/>
<polygon fill="blue" stroke="blue" points="4619.28,-4740.35 4628.9,-4735.9 4618.61,-4733.38 4619.28,-4740.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node450" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node450"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4416.5,-4331.65 4041.5,-4331.65 4041.5,-4295.65 4416.5,-4295.65 4416.5,-4331.65"/>
<text text-anchor="middle" x="4229" y="-4309.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge821" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.62,-4304.11C4577.21,-4294.94 4788.8,-4280.22 4826,-4264.65 4845.48,-4256.5 4842.9,-4242.66 4862,-4233.65 4892.57,-4219.24 4929.72,-4212.43 4960.21,-4209.26"/>
<polygon fill="blue" stroke="blue" points="4960.65,-4212.73 4970.28,-4208.31 4959.99,-4205.76 4960.65,-4212.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge818" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.71,-4313.77C4433.1,-4306.95 4448,-4297.22 4460,-4283.65 4532.72,-4201.41 4410.1,-409 4488,-331.65 4543.03,-277.01 5129.85,-278.15 5186,-331.65 5271.65,-413.26 5293.23,-2326.85 5295.74,-2583.33"/>
<polygon fill="blue" stroke="blue" points="5292.24,-2583.38 5295.83,-2593.34 5299.24,-2583.31 5292.24,-2583.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge820" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.7,-4296.89C4431.56,-4293.27 4446.17,-4288.9 4460,-4283.65 4474.06,-4278.31 4474.46,-4271.2 4488,-4264.65 4531.09,-4243.79 4584.3,-4228.62 4619.15,-4219.99"/>
<polygon fill="blue" stroke="blue" points="4620.01,-4223.38 4628.9,-4217.62 4618.36,-4216.58 4620.01,-4223.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge823" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.63,-4308.98C4432.41,-4302.94 4447.2,-4294.71 4460,-4283.65 4494.6,-4253.76 4453.84,-4215.05 4488,-4184.65 4524,-4152.61 4582.36,-4150.44 4619.95,-4153.08"/>
<polygon fill="blue" stroke="blue" points="4619.7,-4156.58 4629.96,-4153.94 4620.29,-4149.6 4619.7,-4156.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge819" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.77,-4320.23C4432.06,-4325.28 4446.72,-4331.94 4460,-4340.65 4574.7,-4415.87 4630.63,-4583.19 4648.96,-4649.65"/>
<polygon fill="blue" stroke="blue" points="4645.61,-4650.67 4651.58,-4659.42 4652.37,-4648.86 4645.61,-4650.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge822" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.74,-4312.29C4432.91,-4318.72 4447.74,-4327.89 4460,-4340.65 4516.2,-4399.15 4433.05,-4644.97 4488,-4704.65 4520.65,-4740.11 4579.92,-4741.34 4618.62,-4737.56"/>
<polygon fill="blue" stroke="blue" points="4619.41,-4741 4628.95,-4736.39 4618.62,-4734.04 4619.41,-4741"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node451" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node451"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="4294.5,-4439.65 4163.5,-4439.65 4163.5,-4403.65 4294.5,-4403.65 4294.5,-4439.65"/>
<text text-anchor="middle" x="4229" y="-4417.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge869" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4294.76,-4424.63C4406.06,-4427.83 4639.64,-4426.18 4826,-4368.65 4886.63,-4349.93 4949.4,-4310.38 4986.29,-4284.69"/>
<polygon fill="blue" stroke="blue" points="4988.5,-4287.42 4994.65,-4278.79 4984.46,-4281.7 4988.5,-4287.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge868" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4294.94,-4420.93C4341.85,-4418.77 4406.15,-4412.38 4460,-4394.65 4473.61,-4390.17 4474.43,-4383.28 4488,-4378.65 4631.55,-4329.7 4707.92,-4426.84 4826,-4331.65 4862.13,-4302.53 4826.35,-4263.35 4862,-4233.65 4888.94,-4211.21 4927.7,-4204.37 4959.97,-4203.19"/>
<polygon fill="blue" stroke="blue" points="4960.26,-4206.68 4970.2,-4202.99 4960.13,-4199.69 4960.26,-4206.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node452" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node452"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="3391.5,-4822.65 3124.5,-4822.65 3124.5,-4786.65 3391.5,-4786.65 3391.5,-4822.65"/>
<text text-anchor="middle" x="3258" y="-4800.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.58,-4794.6C3450.22,-4797.68 3515.04,-4812.77 3556,-4857.65 3591.18,-4896.2 3539.49,-5054.36 3576,-5091.65 3638.85,-5155.85 3913.13,-5072.49 3978,-5134.65 4021.16,-5176.01 3955.68,-5225.44 3998,-5267.65 4049.09,-5318.62 4141,-5314.98 4191.79,-5308.15"/>
<polygon fill="blue" stroke="blue" points="4192.59,-5311.57 4201.98,-5306.66 4191.58,-5304.64 4192.59,-5311.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.7,-4794.13C3450.56,-4797.06 3515.52,-4812.17 3556,-4857.65 3604.99,-4912.7 3525.85,-5134.66 3576,-5188.65 3617.03,-5232.83 3693.28,-5229.81 3738.85,-5223.09"/>
<polygon fill="blue" stroke="blue" points="3739.6,-5226.51 3748.91,-5221.47 3738.48,-5219.6 3739.6,-5226.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.56,-4795.74C3449.67,-4799.19 3514.04,-4814.25 3556,-4857.65 3599.38,-4902.52 3534.42,-4950.1 3576,-4996.65 3699.02,-5134.36 3850.87,-4967.72 3978,-5101.65 4008.3,-5133.58 3966.52,-5167.88 3998,-5198.65 4047.83,-5247.36 4134.26,-5249.63 4185.79,-5245.84"/>
<polygon fill="blue" stroke="blue" points="4186.25,-5249.31 4195.92,-5244.98 4185.66,-5242.34 4186.25,-5249.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.81,-4794.38C3450.52,-4797.42 3515.31,-4812.53 3556,-4857.65 3596.59,-4902.66 3535.01,-5085.01 3576,-5129.65 3615.02,-5172.15 3686.19,-5173.32 3732.26,-5168.67"/>
<polygon fill="blue" stroke="blue" points="3732.72,-5172.14 3742.26,-5167.54 3731.93,-5165.19 3732.72,-5172.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.59,-4797.75C3448.82,-4801.79 3512.48,-4816.77 3556,-4857.65 3583.34,-4883.33 3549.1,-4913.51 3576,-4939.65 3707.02,-5066.99 3850.38,-4894.9 3978,-5025.65 4011.49,-5059.96 3963.86,-5097.99 3998,-5131.65 4049.47,-5182.39 4140.83,-5181.85 4191.53,-5176.85"/>
<polygon fill="blue" stroke="blue" points="4192.15,-5180.31 4201.71,-5175.73 4191.39,-5173.35 4192.15,-5180.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340,-4822.69C3408.26,-4832.61 3503.04,-4832.96 3556,-4774.65 3596.63,-4729.92 3539.73,-471.99 3576,-423.65 3814.14,-106.26 4095.51,-141.82 4460,-298.65 4546.31,-335.79 4612.39,-431.68 4640.79,-478.76"/>
<polygon fill="blue" stroke="blue" points="4637.85,-480.68 4645.96,-487.5 4643.88,-477.11 4637.85,-480.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node453" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node453"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="3970,-2811.65 3584,-2811.65 3584,-2775.65 3970,-2775.65 3970,-2811.65"/>
<text text-anchor="middle" x="3777" y="-2789.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3923.84,-2811.66C3948.59,-2814.68 3974.03,-2817.77 3998,-2820.65 4063.55,-2828.52 4139.64,-2837.4 4185.78,-2842.76"/>
<polygon fill="blue" stroke="blue" points="4185.66,-2846.27 4195.99,-2843.95 4186.47,-2839.32 4185.66,-2846.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3970.15,-2793.65C4035.52,-2793.65 4104.67,-2793.65 4154.88,-2793.65"/>
<polygon fill="blue" stroke="blue" points="4154.99,-2797.15 4164.99,-2793.65 4154.99,-2790.15 4154.99,-2797.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3783.5,-2775.62C3811.24,-2683.69 3936.06,-2257.63 3978,-1898.65 3983.05,-1855.41 3967.02,-362.23 3998,-331.65 4144.12,-187.39 4268.05,-258.74 4460,-331.65 4538.43,-361.44 4605.56,-438.58 4636.98,-479.41"/>
<polygon fill="blue" stroke="blue" points="4634.31,-481.68 4643.13,-487.54 4639.89,-477.46 4634.31,-481.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node454" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node454"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="3918.5,-2919.65 3635.5,-2919.65 3635.5,-2883.65 3918.5,-2883.65 3918.5,-2919.65"/>
<text text-anchor="middle" x="3777" y="-2897.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge575" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.65,-2895.31C3941.34,-2900.83 3962.45,-2911.06 3978,-2928.65 4010.42,-2965.32 3965.5,-4654.05 3998,-4690.65 4043.88,-4742.31 4131.56,-4738.2 4184.41,-4729.87"/>
<polygon fill="blue" stroke="blue" points="4185.22,-4733.28 4194.5,-4728.16 4184.05,-4726.38 4185.22,-4733.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge576" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.65,-2895.31C3941.35,-2900.83 3962.45,-2911.06 3978,-2928.65 4011.46,-2966.51 3964.21,-4710.08 3998,-4747.65 4046.04,-4801.07 4139.07,-4793.07 4190.89,-4783.37"/>
<polygon fill="blue" stroke="blue" points="4191.85,-4786.74 4200.98,-4781.36 4190.49,-4779.88 4191.85,-4786.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge573" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.67,-2895.3C3941.36,-2900.82 3962.46,-2911.05 3978,-2928.65 4014.42,-2969.9 3961.22,-4868.72 3998,-4909.65 4046.27,-4963.37 4140.04,-4955 4191.69,-4945.22"/>
<polygon fill="blue" stroke="blue" points="4192.62,-4948.6 4201.74,-4943.2 4191.24,-4941.74 4192.62,-4948.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge572" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.66,-2895.3C3941.35,-2900.82 3962.46,-2911.06 3978,-2928.65 4013.44,-2968.77 3962.22,-4815.84 3998,-4855.65 4044.49,-4907.37 4133.15,-4901.53 4185.78,-4892.29"/>
<polygon fill="blue" stroke="blue" points="4186.62,-4895.7 4195.8,-4890.42 4185.33,-4888.82 4186.62,-4895.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge577" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.66,-2895.3C3941.35,-2900.83 3962.46,-2911.06 3978,-2928.65 4012.45,-2967.64 3963.21,-4762.96 3998,-4801.65 4046.28,-4855.35 4140.05,-4846.99 4191.69,-4837.21"/>
<polygon fill="blue" stroke="blue" points="4192.63,-4840.6 4201.74,-4835.19 4191.25,-4833.73 4192.63,-4840.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge579" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.65,-2907.99C3941.34,-2902.47 3962.45,-2892.24 3978,-2874.65 4011.02,-2837.29 3964.65,-1116.72 3998,-1079.65 4040.06,-1032.89 4116.59,-1033.2 4169.76,-1040.5"/>
<polygon fill="blue" stroke="blue" points="4169.33,-1043.98 4179.74,-1041.99 4170.36,-1037.06 4169.33,-1043.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge578" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.64,-2907.98C3941.34,-2902.46 3962.45,-2892.23 3978,-2874.65 4009.56,-2838.96 3968.12,-1196.76 3998,-1159.65 4030.7,-1119.04 4087.71,-1105.71 4136.79,-1102.57"/>
<polygon fill="blue" stroke="blue" points="4137,-1106.06 4146.81,-1102.06 4136.64,-1099.07 4137,-1106.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge574" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.69,-2908.03C3941.38,-2902.51 3962.48,-2892.26 3978,-2874.65 4023.31,-2823.24 3949.35,-455.91 3998,-407.65 4070.89,-335.35 4360.08,-384.06 4460,-407.65 4520.5,-421.93 4583.62,-457.91 4621.37,-482.07"/>
<polygon fill="blue" stroke="blue" points="4619.65,-485.12 4629.94,-487.63 4623.46,-479.25 4619.65,-485.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node455" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node455"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="3969,-2973.65 3585,-2973.65 3585,-2937.65 3969,-2937.65 3969,-2973.65"/>
<text text-anchor="middle" x="3777" y="-2951.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge741" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3932.32,-2973.75C3950.01,-2981.92 3965.98,-2993.2 3978,-3008.65 4010.43,-3050.33 3962.7,-4870.38 3998,-4909.65 4046.28,-4963.36 4140.04,-4954.99 4191.69,-4945.22"/>
<polygon fill="blue" stroke="blue" points="4192.62,-4948.6 4201.74,-4943.2 4191.24,-4941.74 4192.62,-4948.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge742" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3932.32,-2973.75C3950.01,-2981.93 3965.98,-2993.2 3978,-3008.65 4009.51,-3049.14 3963.69,-4817.5 3998,-4855.65 4044.5,-4907.36 4133.16,-4901.52 4185.78,-4892.29"/>
<polygon fill="blue" stroke="blue" points="4186.62,-4895.7 4195.8,-4890.42 4185.33,-4888.82 4186.62,-4895.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge743" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3932.32,-2973.75C3950.01,-2981.93 3965.97,-2993.2 3978,-3008.65 4008.6,-3047.95 3964.69,-4764.62 3998,-4801.65 4046.3,-4855.34 4140.05,-4846.98 4191.7,-4837.21"/>
<polygon fill="blue" stroke="blue" points="4192.63,-4840.59 4201.74,-4835.19 4191.25,-4833.73 4192.63,-4840.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge740" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3969.15,-2937.42C3972.26,-2934.72 3975.22,-2931.8 3978,-2928.65 4023.6,-2876.9 3949.03,-494.23 3998,-445.65 4070.89,-373.35 4358.46,-430.46 4460,-445.65 4511.75,-453.39 4568.71,-472.04 4607.83,-486.5"/>
<polygon fill="blue" stroke="blue" points="4606.78,-489.85 4617.37,-490.08 4609.24,-483.29 4606.78,-489.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node456" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node456"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="3855,-2865.65 3699,-2865.65 3699,-2829.65 3855,-2829.65 3855,-2865.65"/>
<text text-anchor="middle" x="3777" y="-2843.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge846" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.1,-2847.65C3950.69,-2847.65 4110.22,-2847.65 4185.81,-2847.65"/>
<polygon fill="blue" stroke="blue" points="4185.91,-2851.15 4195.91,-2847.65 4185.91,-2844.15 4185.91,-2851.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge849" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.11,-2857.21C3897.31,-2862.42 3950.53,-2868.95 3998,-2874.65 4062.94,-2882.45 4138.24,-2891.24 4184.49,-2896.61"/>
<polygon fill="blue" stroke="blue" points="4184.14,-2900.09 4194.47,-2897.77 4184.94,-2893.14 4184.14,-2900.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge850" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.15,-2840.12C3895.71,-2840.26 3943.95,-2847.39 3978,-2874.65 3997.98,-2890.65 3977.88,-2912.83 3998,-2928.65 4053.61,-2972.39 4141.45,-2968.75 4190.93,-2962.21"/>
<polygon fill="blue" stroke="blue" points="4191.48,-2965.66 4200.89,-2960.78 4190.49,-2958.73 4191.48,-2965.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge848" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.11,-2838.09C3897.31,-2832.88 3950.53,-2826.35 3998,-2820.65 4050.33,-2814.37 4109.37,-2807.44 4154.53,-2802.18"/>
<polygon fill="blue" stroke="blue" points="4155.01,-2805.64 4164.53,-2801.01 4154.2,-2798.69 4155.01,-2805.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge851" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.22,-2859.33C3897.9,-2861.05 3948.18,-2854.38 3978,-2820.65 4010.04,-2784.42 3965.65,-1115.6 3998,-1079.65 4040.07,-1032.9 4116.59,-1033.2 4169.76,-1040.51"/>
<polygon fill="blue" stroke="blue" points="4169.33,-1043.98 4179.74,-1042 4170.37,-1037.06 4169.33,-1043.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge852" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.21,-2859.32C3897.89,-2861.04 3948.17,-2854.37 3978,-2820.65 4008.58,-2786.09 3969.05,-1195.58 3998,-1159.65 4030.71,-1119.05 4087.72,-1105.72 4136.79,-1102.57"/>
<polygon fill="blue" stroke="blue" points="4137,-1106.07 4146.81,-1102.06 4136.65,-1099.08 4137,-1106.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge847" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.26,-2859.37C3897.96,-2861.1 3948.23,-2854.43 3978,-2820.65 4023.02,-2769.57 3949.66,-417.6 3998,-369.65 4070.89,-297.35 4362.02,-338.99 4460,-369.65 4529.64,-391.44 4596.25,-447.65 4631.03,-480.58"/>
<polygon fill="blue" stroke="blue" points="4628.72,-483.22 4638.36,-487.63 4633.57,-478.18 4628.72,-483.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node457" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node457"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="3329,-4905.65 3187,-4905.65 3187,-4869.65 3329,-4869.65 3329,-4905.65"/>
<text text-anchor="middle" x="3258" y="-4883.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.08,-4903.95C3397.76,-4915.31 3500.04,-4919.01 3556,-4857.65 3599.31,-4810.15 3544.98,-2599.95 3576,-2543.65 3678.56,-2357.49 3854.95,-2457.94 3978,-2284.65 3999.97,-2253.71 3983.05,-2236.53 3998,-2201.65 4055.36,-2067.85 4161.43,-1928.23 4206.67,-1871.7"/>
<polygon fill="blue" stroke="blue" points="4209.59,-1873.65 4213.14,-1863.67 4204.14,-1869.26 4209.59,-1873.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.26,-4870.52C3397.83,-4858.46 3499.79,-4853.8 3556,-4914.65 3589.1,-4950.48 3543.69,-6634.11 3576,-6670.65 3616.26,-6716.19 3693.81,-6712.41 3739.61,-6705.24"/>
<polygon fill="blue" stroke="blue" points="3740.43,-6708.65 3749.7,-6703.52 3739.26,-6701.75 3740.43,-6708.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.24,-4870.54C3397.8,-4858.49 3499.76,-4853.83 3556,-4914.65 3586.07,-4947.16 3546.65,-6475.49 3576,-6508.65 3613.35,-6550.85 3682.71,-6550.68 3729.12,-6544.72"/>
<polygon fill="blue" stroke="blue" points="3729.82,-6548.16 3739.23,-6543.29 3728.84,-6541.23 3729.82,-6548.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.26,-4870.52C3397.83,-4858.46 3499.8,-4853.79 3556,-4914.65 3590.11,-4951.59 3542.7,-6686.98 3576,-6724.65 3600.23,-6752.07 3637.98,-6761.61 3674.18,-6763.3"/>
<polygon fill="blue" stroke="blue" points="3674.24,-6766.8 3684.33,-6763.57 3674.43,-6759.8 3674.24,-6766.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.25,-4870.53C3397.81,-4858.48 3499.77,-4853.82 3556,-4914.65 3587.08,-4948.27 3545.66,-6528.36 3576,-6562.65 3600.03,-6589.81 3637.33,-6599.42 3673.24,-6601.24"/>
<polygon fill="blue" stroke="blue" points="3673.22,-6604.74 3683.32,-6601.55 3673.43,-6597.74 3673.22,-6604.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.25,-4870.53C3397.82,-4858.47 3499.78,-4853.81 3556,-4914.65 3588.09,-4949.38 3544.68,-6581.23 3576,-6616.65 3608.52,-6653.42 3665.34,-6658.03 3710.12,-6654.67"/>
<polygon fill="blue" stroke="blue" points="3710.71,-6658.13 3720.35,-6653.75 3710.08,-6651.16 3710.71,-6658.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.31,-4903.92C3397.91,-4915.17 3499.9,-4918.71 3556,-4857.65 3602.91,-4806.59 3529.95,-3661.49 3576,-3609.65 3612.88,-3568.13 3680.77,-3567.67 3727.13,-3573.35"/>
<polygon fill="blue" stroke="blue" points="3726.87,-3576.85 3737.25,-3574.73 3727.81,-3569.91 3726.87,-3576.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node458" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node458"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="3359.5,-5013.65 3156.5,-5013.65 3156.5,-4977.65 3359.5,-4977.65 3359.5,-5013.65"/>
<text text-anchor="middle" x="3258" y="-4991.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge793" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-5013.7C3402.95,-5025.08 3501.26,-5028.04 3556,-4968.65 3597.51,-4923.61 3545.72,-2816.89 3576,-2763.65 3679.34,-2581.98 3869.82,-2698.48 3978,-2519.65 4014.65,-2459.07 3975.85,-2268.9 3998,-2201.65 4043.42,-2063.76 4155.44,-1926.96 4204.43,-1871.47"/>
<polygon fill="blue" stroke="blue" points="4207.15,-1873.68 4211.18,-1863.88 4201.92,-1869.03 4207.15,-1873.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge790" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3359.62,-4983.93C3426,-4982.35 3509.09,-4993.32 3556,-5048.65 3585.14,-5083.02 3546.14,-6636.91 3576,-6670.65 3616.28,-6716.17 3693.82,-6712.39 3739.62,-6705.23"/>
<polygon fill="blue" stroke="blue" points="3740.43,-6708.64 3749.71,-6703.52 3739.26,-6701.74 3740.43,-6708.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge794" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3359.63,-4983.92C3426.01,-4982.34 3509.1,-4993.31 3556,-5048.65 3586.1,-5084.17 3545.15,-6689.78 3576,-6724.65 3600.24,-6752.06 3637.99,-6761.59 3674.19,-6763.28"/>
<polygon fill="blue" stroke="blue" points="3674.25,-6766.79 3684.34,-6763.56 3674.44,-6759.79 3674.25,-6766.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge791" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3359.61,-4983.93C3425.99,-4982.36 3509.07,-4993.33 3556,-5048.65 3612.35,-5115.09 3518.25,-6551.42 3576,-6616.65 3608.54,-6653.4 3665.35,-6658.01 3710.13,-6654.66"/>
<polygon fill="blue" stroke="blue" points="3710.72,-6658.12 3720.36,-6653.74 3710.09,-6651.15 3710.72,-6658.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge792" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-5013.68C3403.13,-5024.97 3501.18,-5027.8 3556,-4968.65 3607.33,-4913.27 3525.89,-3666.14 3576,-3609.65 3612.86,-3568.1 3680.75,-3567.66 3727.11,-3573.34"/>
<polygon fill="blue" stroke="blue" points="3726.86,-3576.84 3737.24,-3574.72 3727.8,-3569.9 3726.86,-3576.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node459" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node459"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="3386.5,-4959.65 3129.5,-4959.65 3129.5,-4923.65 3386.5,-4923.65 3386.5,-4959.65"/>
<text text-anchor="middle" x="3258" y="-4937.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge859" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.5,-4959.7C3402.96,-4971.09 3501.28,-4974.06 3556,-4914.65 3599.91,-4866.98 3538.99,-2634.85 3576,-2581.65 3685.18,-2424.72 3862.69,-2581.13 3978,-2428.65 4008.55,-2388.26 3981.55,-2249.55 3998,-2201.65 4045.15,-2064.34 4156.23,-1927.23 4204.7,-1871.56"/>
<polygon fill="blue" stroke="blue" points="4207.42,-1873.78 4211.38,-1863.95 4202.16,-1869.16 4207.42,-1873.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge861" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.46,-4923.64C3402.89,-4912.28 3501.18,-4909.33 3556,-4968.65 3588.09,-5003.38 3544.68,-6635.23 3576,-6670.65 3616.27,-6716.18 3693.81,-6712.4 3739.61,-6705.23"/>
<polygon fill="blue" stroke="blue" points="3740.43,-6708.64 3749.7,-6703.52 3739.26,-6701.74 3740.43,-6708.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge857" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.46,-4923.63C3402.9,-4912.27 3501.2,-4909.32 3556,-4968.65 3589.1,-5004.48 3543.69,-6688.11 3576,-6724.65 3600.24,-6752.06 3637.98,-6761.6 3674.18,-6763.29"/>
<polygon fill="blue" stroke="blue" points="3674.25,-6766.79 3684.34,-6763.57 3674.44,-6759.8 3674.25,-6766.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge860" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.45,-4923.64C3402.88,-4912.29 3501.17,-4909.34 3556,-4968.65 3587.08,-5002.27 3545.66,-6582.36 3576,-6616.65 3608.53,-6653.41 3665.34,-6658.02 3710.13,-6654.67"/>
<polygon fill="blue" stroke="blue" points="3710.71,-6658.13 3720.36,-6653.75 3710.08,-6651.16 3710.71,-6658.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge858" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-4959.67C3403.12,-4970.95 3501.17,-4973.78 3556,-4914.65 3605.3,-4861.48 3527.86,-3663.88 3576,-3609.65 3612.87,-3568.12 3680.76,-3567.67 3727.12,-3573.34"/>
<polygon fill="blue" stroke="blue" points="3726.86,-3576.84 3737.25,-3574.72 3727.81,-3569.91 3726.86,-3576.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node460" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node460"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="3322,-1292.65 3194,-1292.65 3194,-1256.65 3322,-1256.65 3322,-1292.65"/>
<text text-anchor="middle" x="3258" y="-1270.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.2,-1265.09C3391.35,-1258.65 3499.82,-1261.12 3556,-1327.65 3598.84,-1378.37 3532.1,-3667.85 3576,-3717.65 3606.74,-3752.52 3659.33,-3758.5 3702.87,-3756.17"/>
<polygon fill="blue" stroke="blue" points="3703.13,-3759.66 3712.86,-3755.48 3702.65,-3752.68 3703.13,-3759.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.2,-1265.09C3391.35,-1258.65 3499.82,-1261.12 3556,-1327.65 3599.8,-1379.52 3531.11,-3720.72 3576,-3771.65 3616.19,-3817.25 3693.76,-3813.45 3739.59,-3806.26"/>
<polygon fill="blue" stroke="blue" points="3740.42,-3809.67 3749.69,-3804.54 3739.24,-3802.77 3740.42,-3809.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.19,-1265.1C3391.34,-1258.66 3499.8,-1261.14 3556,-1327.65 3595.95,-1374.92 3535.06,-3509.23 3576,-3555.65 3612.74,-3597.3 3680.66,-3597.72 3727.06,-3592.01"/>
<polygon fill="blue" stroke="blue" points="3727.77,-3595.44 3737.2,-3590.62 3726.82,-3588.51 3727.77,-3595.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node461" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node461"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="3473.5,-1184.65 3042.5,-1184.65 3042.5,-1148.65 3473.5,-1148.65 3473.5,-1184.65"/>
<text text-anchor="middle" x="3258" y="-1162.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.05,-1184.68C3405.77,-1194.98 3500.84,-1196.33 3556,-1139.65 3604.92,-1089.38 3524.86,-872.65 3576,-824.65 3647.62,-757.43 4389.3,-756.46 4460,-824.65 4522.02,-884.47 4431.5,-1534.59 4488,-1599.65 4504.72,-1618.91 4529.19,-1628.6 4554.31,-1632.99"/>
<polygon fill="blue" stroke="blue" points="4553.92,-1636.48 4564.33,-1634.47 4554.95,-1629.55 4553.92,-1636.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-1148.63C3402.69,-1137.19 3501.24,-1134.1 3556,-1193.65 3610.57,-1252.99 3522.74,-4035.14 3576,-4095.65 3586.63,-4107.73 3599.89,-4116.35 3614.49,-4122.35"/>
<polygon fill="blue" stroke="blue" points="3613.67,-4125.78 3624.26,-4125.93 3616.07,-4119.2 3613.67,-4125.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.17,-1148.65C3402.65,-1137.22 3501.19,-1134.14 3556,-1193.65 3600.45,-1241.91 3532.61,-3506.43 3576,-3555.65 3612.73,-3597.31 3680.65,-3597.73 3727.06,-3592.01"/>
<polygon fill="blue" stroke="blue" points="3727.76,-3595.45 3737.19,-3590.62 3726.81,-3588.51 3727.76,-3595.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node462" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node462"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="3355,-1130.65 3161,-1130.65 3161,-1094.65 3355,-1094.65 3355,-1130.65"/>
<text text-anchor="middle" x="3258" y="-1108.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-1094.62C3402.93,-1083.24 3501.23,-1080.28 3556,-1139.65 3593.3,-1180.08 3539.59,-3078.42 3576,-3119.65 3614.59,-3163.36 3687.53,-3161.65 3733.84,-3155.1"/>
<polygon fill="blue" stroke="blue" points="3734.52,-3158.54 3743.87,-3153.55 3733.45,-3151.62 3734.52,-3158.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-1094.61C3402.94,-1083.23 3501.25,-1080.27 3556,-1139.65 3595.32,-1182.29 3537.62,-3184.16 3576,-3227.65 3616.01,-3272.98 3692.95,-3269.47 3738.86,-3262.36"/>
<polygon fill="blue" stroke="blue" points="3739.71,-3265.77 3748.99,-3260.66 3738.55,-3258.87 3739.71,-3265.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-1094.61C3402.93,-1083.24 3501.24,-1080.28 3556,-1139.65 3594.31,-1181.19 3538.61,-3131.29 3576,-3173.65 3614.16,-3216.87 3685.9,-3215.69 3732.28,-3209.32"/>
<polygon fill="blue" stroke="blue" points="3732.98,-3212.76 3742.34,-3207.81 3731.93,-3205.83 3732.98,-3212.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.47,-1094.62C3402.91,-1083.26 3501.22,-1080.3 3556,-1139.65 3591.22,-1177.8 3541.91,-2969.49 3576,-3008.65 3606.58,-3043.78 3659.18,-3050.56 3702.76,-3048.93"/>
<polygon fill="blue" stroke="blue" points="3702.96,-3052.43 3712.77,-3048.41 3702.6,-3045.44 3702.96,-3052.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.05,-1130.68C3405.77,-1140.98 3500.84,-1142.33 3556,-1085.65 3604.92,-1035.38 3524.86,-818.65 3576,-770.65 3647.62,-703.43 4389.38,-702.38 4460,-770.65 4526.26,-834.71 4427.65,-1529.99 4488,-1599.65 4504.7,-1618.92 4529.16,-1628.63 4554.28,-1633.02"/>
<polygon fill="blue" stroke="blue" points="4553.89,-1636.5 4564.3,-1634.5 4554.92,-1629.58 4553.89,-1636.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-1094.65C3402.65,-1083.22 3501.2,-1080.14 3556,-1139.65 3601.46,-1189.02 3531.62,-3505.3 3576,-3555.65 3612.72,-3597.31 3680.65,-3597.73 3727.06,-3592.01"/>
<polygon fill="blue" stroke="blue" points="3727.76,-3595.45 3737.19,-3590.62 3726.81,-3588.51 3727.76,-3595.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-1094.63C3402.69,-1083.19 3501.24,-1080.1 3556,-1139.65 3610.57,-1198.99 3522.74,-3981.14 3576,-4041.65 3591.55,-4059.31 3612.7,-4069.57 3635.45,-4075.08"/>
<polygon fill="blue" stroke="blue" points="3634.77,-4078.52 3645.28,-4077.17 3636.22,-4071.67 3634.77,-4078.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node463" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node463"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="3377.5,-1238.65 3138.5,-1238.65 3138.5,-1202.65 3377.5,-1202.65 3377.5,-1238.65"/>
<text text-anchor="middle" x="3258" y="-1216.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge697" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.05,-1238.68C3405.77,-1248.98 3500.84,-1250.33 3556,-1193.65 3604.92,-1143.38 3524.86,-926.65 3576,-878.65 3647.62,-811.43 4389.21,-810.56 4460,-878.65 4517.78,-934.23 4435.35,-1539.19 4488,-1599.65 4504.75,-1618.88 4529.23,-1628.57 4554.34,-1632.97"/>
<polygon fill="blue" stroke="blue" points="4553.96,-1636.45 4564.36,-1634.44 4554.98,-1629.52 4553.96,-1636.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge691" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3339.46,-1202.63C3406.9,-1192.72 3500.77,-1191.95 3556,-1247.65 3594.15,-1286.13 3548.95,-1443.7 3576,-1490.65 3608.26,-1546.64 3673.27,-1585.31 3720.44,-1607.39"/>
<polygon fill="blue" stroke="blue" points="3719.07,-1610.62 3729.62,-1611.59 3721.98,-1604.25 3719.07,-1610.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge690" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.92,-1202.64C3404.86,-1192.02 3500.9,-1190.2 3556,-1247.65 3587.49,-1280.49 3545.23,-1623.14 3576,-1656.65 3604.51,-1687.7 3650.39,-1695.53 3691.02,-1695.11"/>
<polygon fill="blue" stroke="blue" points="3691.32,-1698.6 3701.22,-1694.83 3691.13,-1691.6 3691.32,-1698.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge694" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3377.61,-1221.8C3476.59,-1222.75 3614.72,-1224.09 3699.6,-1224.91"/>
<polygon fill="blue" stroke="blue" points="3699.65,-1228.41 3709.69,-1225.01 3699.72,-1221.41 3699.65,-1228.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge693" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-1202.63C3402.69,-1191.18 3501.25,-1188.1 3556,-1247.65 3611.58,-1308.1 3521.75,-4142.01 3576,-4203.65 3588.91,-4218.32 3605.69,-4227.88 3624.04,-4233.86"/>
<polygon fill="blue" stroke="blue" points="3623.19,-4237.26 3633.77,-4236.67 3625.13,-4230.53 3623.19,-4237.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge698" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-1202.64C3402.67,-1191.2 3501.22,-1188.13 3556,-1247.65 3604.5,-1300.34 3528.66,-3771.91 3576,-3825.65 3590.56,-3842.18 3610.03,-3852.22 3631.13,-3857.96"/>
<polygon fill="blue" stroke="blue" points="3630.38,-3861.38 3640.92,-3860.3 3632.01,-3854.57 3630.38,-3861.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge692" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.19,-1202.63C3402.68,-1191.19 3501.24,-1188.11 3556,-1247.65 3609.55,-1305.88 3523.73,-4036.27 3576,-4095.65 3586.63,-4107.73 3599.89,-4116.35 3614.49,-4122.35"/>
<polygon fill="blue" stroke="blue" points="3613.67,-4125.78 3624.26,-4125.93 3616.08,-4119.2 3613.67,-4125.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge695" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.5,-1202.6C3402.96,-1191.21 3501.28,-1188.25 3556,-1247.65 3599.44,-1294.81 3533.6,-3507.56 3576,-3555.65 3612.73,-3597.31 3680.65,-3597.73 3727.06,-3592.01"/>
<polygon fill="blue" stroke="blue" points="3727.76,-3595.45 3737.2,-3590.62 3726.81,-3588.51 3727.76,-3595.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge699" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-1202.63C3402.69,-1191.19 3501.24,-1188.1 3556,-1247.65 3610.57,-1306.99 3522.74,-4089.14 3576,-4149.65 3578.06,-4151.99 3580.22,-4154.21 3582.47,-4156.29"/>
<polygon fill="blue" stroke="blue" points="3580.52,-4159.22 3590.45,-4162.92 3585,-4153.84 3580.52,-4159.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge696" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.17,-1202.65C3402.65,-1191.22 3501.19,-1188.14 3556,-1247.65 3600.45,-1295.91 3532.61,-3560.43 3576,-3609.65 3583.29,-3617.92 3591.8,-3624.56 3601.13,-3629.85"/>
<polygon fill="blue" stroke="blue" points="3599.82,-3633.11 3610.32,-3634.52 3602.99,-3626.87 3599.82,-3633.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption(). -->
<g id="node464" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().</title>
<g id="a_node464"><a xlink:title="fn test_blob_encryption() { &#160;&#160;&#160;&#160;let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1); &#160;&#160;&#160;&#160;let group_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::groups::GroupSecretParams::derive_from_m...">
<polygon fill="white" stroke="black" points="3338.5,-1076.65 3177.5,-1076.65 3177.5,-1040.65 3338.5,-1040.65 3338.5,-1076.65"/>
<text text-anchor="middle" x="3258" y="-1054.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_blob_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge744" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.82,-1075.85C3406.56,-1085.31 3501.24,-1085.46 3556,-1028.65 3604.22,-978.63 3525.33,-764.18 3576,-716.65 3647.64,-649.46 4389.45,-648.31 4460,-716.65 4530.5,-784.95 4423.8,-1525.39 4488,-1599.65 4504.68,-1618.94 4529.13,-1628.65 4554.25,-1633.04"/>
<polygon fill="blue" stroke="blue" points="4553.87,-1636.52 4564.27,-1634.52 4554.89,-1629.6 4553.87,-1636.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node465" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node465"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="3344,-939.65 3172,-939.65 3172,-903.65 3344,-903.65 3344,-939.65"/>
<text text-anchor="middle" x="3258" y="-917.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.22,-903.62C3405.11,-893.07 3500.92,-891.36 3556,-948.65 3586,-979.85 3549.23,-1303.65 3576,-1337.65 3829.51,-1659.6 4209.46,-1275.38 4460,-1599.65 4517.64,-1674.25 4425.68,-2376.91 4488,-2447.65 4517.04,-2480.61 4569.03,-2484.39 4607.51,-2481.77"/>
<polygon fill="blue" stroke="blue" points="4607.81,-2485.26 4617.48,-2480.93 4607.22,-2478.28 4607.81,-2485.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.76,-903.64C3405.52,-893.26 3500.84,-891.8 3556,-948.65 3607.16,-1001.38 3527.94,-1223.08 3576,-1278.65 3707.26,-1430.42 4330.76,-1309.16 4460,-1462.65 4518.86,-1532.56 4447.25,-2202.85 4488,-2284.65 4513.74,-2336.33 4569.23,-2375.02 4609.41,-2397.66"/>
<polygon fill="blue" stroke="blue" points="4607.79,-2400.77 4618.24,-2402.52 4611.17,-2394.63 4607.79,-2400.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.76,-903.61C3403.16,-892.31 3501.21,-889.48 3556,-948.65 3610.89,-1007.93 3529.69,-2336.46 3576,-2402.65 3685.58,-2559.29 3859.38,-2405.74 3978,-2555.65 4020.01,-2608.74 3949.92,-2659 3998,-2706.65 4144.95,-2852.29 4321.03,-2610.38 4460,-2763.65 4501.88,-2809.84 4446.97,-3838.7 4488,-3885.65 4520.07,-3922.35 4580.58,-3922.96 4619.56,-3918.75"/>
<polygon fill="blue" stroke="blue" points="4620.44,-3922.17 4629.94,-3917.47 4619.58,-3915.23 4620.44,-3922.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-903.62C3403.13,-892.33 3501.19,-889.51 3556,-948.65 3607.36,-1004.07 3533.06,-2246.47 3576,-2308.65 3685.19,-2466.74 3861.49,-2314.87 3978,-2467.65 4027.61,-2532.71 3942.17,-2590.84 3998,-2650.65 4140.35,-2803.16 4324.03,-2575.43 4460,-2733.65 4535.63,-2821.66 4411.56,-3690.34 4488,-3777.65 4520.11,-3814.32 4580.61,-3814.94 4619.57,-3810.74"/>
<polygon fill="blue" stroke="blue" points="4620.45,-3814.16 4629.95,-3809.46 4619.59,-3807.21 4620.45,-3814.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.72,-903.64C3403.09,-892.37 3501.13,-889.56 3556,-948.65 3601.78,-997.96 3543.86,-2100.53 3576,-2159.65 3678.79,-2348.74 3866.7,-2245.44 3978,-2429.65 3999.38,-2465.04 3968.54,-2585.63 3998,-2614.65 4071.45,-2687.02 4389.56,-2582.36 4460,-2657.65 4540.95,-2744.17 4409.97,-3634.48 4488,-3723.65 4519.83,-3760.02 4579.6,-3760.93 4618.59,-3756.85"/>
<polygon fill="blue" stroke="blue" points="4619.49,-3760.27 4629,-3755.59 4618.65,-3753.32 4619.49,-3760.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.99,-903.65C3403.3,-892.46 3501.09,-889.77 3556,-948.65 3592.01,-987.25 3557.77,-1849.11 3576,-1898.65 3673.62,-2163.98 3869.34,-2130.64 3978,-2391.65 3994.32,-2430.85 3967.64,-2551.97 3998,-2581.65 4071.67,-2653.66 4389.2,-2544.82 4460,-2619.65 4540.21,-2704.43 4411.13,-3581.84 4488,-3669.65 4519.84,-3706.02 4579.6,-3706.93 4618.59,-3702.85"/>
<polygon fill="blue" stroke="blue" points="4619.49,-3706.27 4629,-3701.59 4618.65,-3699.32 4619.49,-3706.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3276.94,-903.5C3323.49,-856.33 3451.75,-725.81 3556,-614.65 3565.04,-605.01 3564.12,-598.45 3576,-592.65 3582.85,-589.31 4037.54,-557.06 4183.45,-546.78"/>
<polygon fill="blue" stroke="blue" points="4184.09,-550.24 4193.82,-546.05 4183.6,-543.26 4184.09,-550.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3271.86,-903.54C3310.58,-850.71 3432.27,-696.74 3576,-636.65 3684.74,-591.19 4046.77,-593.84 4179.06,-596.45"/>
<polygon fill="blue" stroke="blue" points="4179.22,-599.95 4189.29,-596.66 4179.37,-592.95 4179.22,-599.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node466" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node466"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="3293.5,-993.65 3222.5,-993.65 3222.5,-957.65 3293.5,-957.65 3293.5,-993.65"/>
<text text-anchor="middle" x="3258" y="-971.95" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge837" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.74,-969.45C3357.2,-960.37 3491.3,-952.01 3556,-1028.65 3600.26,-1081.08 3531.02,-3446.84 3576,-3498.65 3586.48,-3510.72 3599.56,-3519.45 3613.98,-3525.64"/>
<polygon fill="blue" stroke="blue" points="3613.04,-3529.03 3623.63,-3529.35 3615.56,-3522.49 3613.04,-3529.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge842" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.74,-969.45C3357.21,-960.36 3491.31,-951.99 3556,-1028.65 3603.2,-1084.59 3527.62,-3608.72 3576,-3663.65 3600.5,-3691.47 3638.91,-3700.9 3675.55,-3702.4"/>
<polygon fill="blue" stroke="blue" points="3675.75,-3705.91 3685.82,-3702.62 3675.9,-3698.91 3675.75,-3705.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge839" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.75,-969.44C3357.23,-960.35 3491.35,-951.97 3556,-1028.65 3608.98,-1091.49 3521.7,-3925.95 3576,-3987.65 3589.37,-4002.84 3606.88,-4012.55 3625.99,-4018.48"/>
<polygon fill="blue" stroke="blue" points="3625.23,-4021.9 3635.79,-4021.17 3627.08,-4015.15 3625.23,-4021.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge840" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.75,-969.45C3357.22,-960.35 3491.34,-951.97 3556,-1028.65 3608.02,-1090.34 3522.68,-3873.08 3576,-3933.65 3589.83,-3949.36 3608.09,-3959.21 3627.96,-3965.08"/>
<polygon fill="blue" stroke="blue" points="3627.28,-3968.51 3637.83,-3967.64 3629.04,-3961.74 3627.28,-3968.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge838" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.75,-969.45C3357.22,-960.36 3491.34,-951.97 3556,-1028.65 3607.06,-1089.19 3523.67,-3820.2 3576,-3879.65 3599.07,-3905.86 3634.49,-3915.76 3669.15,-3918.07"/>
<polygon fill="blue" stroke="blue" points="3669.23,-3921.57 3679.38,-3918.54 3669.55,-3914.58 3669.23,-3921.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge841" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.74,-969.45C3357.2,-960.37 3491.3,-952 3556,-1028.65 3601.28,-1082.29 3529.59,-3502.98 3576,-3555.65 3612.72,-3597.32 3680.64,-3597.74 3727.05,-3592.02"/>
<polygon fill="blue" stroke="blue" points="3727.76,-3595.45 3737.19,-3590.63 3726.81,-3588.52 3727.76,-3595.45"/>
</g>
</g>
</svg>
