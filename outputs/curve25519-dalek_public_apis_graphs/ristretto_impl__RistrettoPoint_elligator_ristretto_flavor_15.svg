<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="3143pt" height="3920pt"
 viewBox="0.00 0.00 3143.00 3920.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 3916)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-3916 3139,-3916 3139,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2437,-1848 2437,-1977 2719,-1977 2719,-1848 2437,-1848"/>
<text text-anchor="middle" x="2578" y="-1961.8" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_ristretto.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2739,-2313 2739,-2388 3127,-2388 3127,-2313 2739,-2313"/>
<text text-anchor="middle" x="2933" y="-2372.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="316,-199 316,-1894 912,-1894 912,-199 316,-199"/>
<text text-anchor="middle" x="614" y="-1878.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-1985 8,-2114 709,-2114 709,-1985 8,-1985"/>
<text text-anchor="middle" x="358.5" y="-2098.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="41.5,-1902 41.5,-1977 653,-1977 653,-1902 41.5,-1902"/>
<text text-anchor="middle" x="347.25" y="-1961.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="501,-2122 501,-2197 727,-2197 727,-2122 501,-2122"/>
<text text-anchor="middle" x="614" y="-2181.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="502.5,-2205 502.5,-2334 725.5,-2334 725.5,-2205 502.5,-2205"/>
<text text-anchor="middle" x="614" y="-2318.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="1444,-3584 1444,-3713 1970.5,-3713 1970.5,-3584 1444,-3584"/>
<text text-anchor="middle" x="1707.25" y="-3697.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="1542,-3447 1542,-3576 1628,-3576 1628,-3447 1542,-3447"/>
<text text-anchor="middle" x="1585" y="-3560.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="1836,-3721 1836,-3904 2643,-3904 2643,-3721 1836,-3721"/>
<text text-anchor="middle" x="2239.5" y="-3888.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="2028,-1890 2028,-1965 2172,-1965 2172,-1890 2028,-1890"/>
<text text-anchor="middle" x="2100" y="-1949.8" font-family="Helvetica,sans-Serif" font-size="14.00">constants.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="2054.5,-2436 2054.5,-2511 2391,-2511 2391,-2436 2054.5,-2436"/>
<text text-anchor="middle" x="2222.75" y="-2495.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="2254.5,-2323 2254.5,-2398 2367.5,-2398 2367.5,-2323 2254.5,-2323"/>
<text text-anchor="middle" x="2311" y="-2382.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="2031.5,-2794 2031.5,-2977 2358.5,-2977 2358.5,-2794 2031.5,-2794"/>
<text text-anchor="middle" x="2195" y="-2961.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="2205,-2549 2205,-2786 2417,-2786 2417,-2549 2205,-2549"/>
<text text-anchor="middle" x="2311" y="-2770.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="1879.5,-2110 1879.5,-2239 2185,-2239 2185,-2110 1879.5,-2110"/>
<text text-anchor="middle" x="2032.25" y="-2223.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="1879.5,-1973 1879.5,-2102 2185,-2102 2185,-1973 1879.5,-1973"/>
<text text-anchor="middle" x="2032.25" y="-2086.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="1879.5,-1739 1879.5,-1814 2185,-1814 2185,-1739 1879.5,-1739"/>
<text text-anchor="middle" x="2032.25" y="-1798.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="2529.5,-2469 2529.5,-2544 2626.5,-2544 2626.5,-2469 2529.5,-2469"/>
<text text-anchor="middle" x="2578" y="-2528.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="175.5,-2533 175.5,-2608 293.5,-2608 293.5,-2533 175.5,-2533"/>
<text text-anchor="middle" x="234.5" y="-2592.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="461,-2479 461,-2662 767,-2662 767,-2479 461,-2479"/>
<text text-anchor="middle" x="614" y="-2646.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1030,-1777 1030,-1852 1236,-1852 1236,-1777 1030,-1777"/>
<text text-anchor="middle" x="1133" y="-1836.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1041,-2601 1041,-2838 1685.5,-2838 1685.5,-2601 1041,-2601"/>
<text text-anchor="middle" x="1363.25" y="-2822.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="465,-3148 465,-3439 1950.5,-3439 1950.5,-3148 465,-3148"/>
<text text-anchor="middle" x="1207.75" y="-3423.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1513,-739 1513,-976 1657,-976 1657,-739 1513,-739"/>
<text text-anchor="middle" x="1585" y="-960.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="1542.5,-1219 1542.5,-1510 1950.5,-1510 1950.5,-1219 1542.5,-1219"/>
<text text-anchor="middle" x="1746.5" y="-1494.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1528,-602 1528,-731 1642,-731 1642,-602 1528,-602"/>
<text text-anchor="middle" x="1585" y="-715.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="1049.5,-2356 1049.5,-2593 1691,-2593 1691,-2356 1049.5,-2356"/>
<text text-anchor="middle" x="1370.25" y="-2577.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="974,-199 974,-382 1292,-382 1292,-199 974,-199"/>
<text text-anchor="middle" x="1133" y="-366.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="1058,-2243 1058,-2318 1208,-2318 1208,-2243 1058,-2243"/>
<text text-anchor="middle" x="1133" y="-2302.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="938.5,-1860 938.5,-2205 1327.5,-2205 1327.5,-1860 938.5,-1860"/>
<text text-anchor="middle" x="1133" y="-2189.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="2207,-1890 2207,-2019 2415,-2019 2415,-1890 2207,-1890"/>
<text text-anchor="middle" x="2311" y="-2003.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="1075,-1518 1075,-1701 1984,-1701 1984,-1518 1075,-1518"/>
<text text-anchor="middle" x="1529.5" y="-1685.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="1508.5,-3011 1508.5,-3140 1963,-3140 1963,-3011 1508.5,-3011"/>
<text text-anchor="middle" x="1735.75" y="-3124.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="1464,-2273 1464,-2348 1707,-2348 1707,-2273 1464,-2273"/>
<text text-anchor="middle" x="1585.5" y="-2332.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="1474.5,-2874 1474.5,-3003 1963,-3003 1963,-2874 1474.5,-2874"/>
<text text-anchor="middle" x="1718.75" y="-2987.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="1880.5,-2247 1880.5,-2322 2143.5,-2322 2143.5,-2247 1880.5,-2247"/>
<text text-anchor="middle" x="2012" y="-2306.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_struct.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="1546,-1014 1546,-1143 1624,-1143 1624,-1014 1546,-1014"/>
<text text-anchor="middle" x="1585" y="-1127.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="1501,-465 1501,-594 1963,-594 1963,-465 1501,-465"/>
<text text-anchor="middle" x="1732" y="-578.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="1845,-1135 1845,-1210 2143.5,-1210 2143.5,-1135 1845,-1135"/>
<text text-anchor="middle" x="1994.25" y="-1194.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_struct.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="1354,-1814 1354,-2159 1816,-2159 1816,-1814 1354,-1814"/>
<text text-anchor="middle" x="1585" y="-2143.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="472.5,-3447 472.5,-3522 755.5,-3522 755.5,-3447 472.5,-3447"/>
<text text-anchor="middle" x="614" y="-3506.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="932,-910 932,-1147 1334,-1147 1334,-910 932,-910"/>
<text text-anchor="middle" x="1133" y="-1131.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="477.5,-8 477.5,-191 750.5,-191 750.5,-8 477.5,-8"/>
<text text-anchor="middle" x="614" y="-175.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="486.5,-2670 486.5,-2853 741.5,-2853 741.5,-2670 486.5,-2670"/>
<text text-anchor="middle" x="614" y="-2837.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="520,-2342 520,-2471 708,-2471 708,-2342 520,-2342"/>
<text text-anchor="middle" x="614" y="-2455.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes_single_elligator(bytes: &amp;[u8; 32]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::elligator_ristretto_flavor(&amp;FieldElement::from_bytes(bytes)) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2711,-1946 2445,-1946 2445,-1910 2711,-1910 2711,-1946"/>
<text text-anchor="middle" x="2578" y="-1924.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_ristretto_flavor(r_0: &amp;FieldElement) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let i = &amp;constants::SQRT_M1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let d = &amp;constants::EDWARDS_D; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let one_minus_d_sq = &amp;constants...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="3119,-2357 2938,-2357 2938,-2321 3119,-2321 3119,-2357"/>
<text text-anchor="middle" x="3028.5" y="-2335.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2598.85,-1946.19C2670.7,-2012.03 2917.32,-2238.04 3000.13,-2313.92"/>
<polygon fill="gray" stroke="gray" points="2997.89,-2316.61 3007.63,-2320.79 3002.62,-2311.45 2997.89,-2316.61"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_encode&lt;D: Digest&gt;(data: &amp;[u8; 16]) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut fe_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let digest...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2633.5,-1892 2522.5,-1892 2522.5,-1856 2633.5,-1856 2633.5,-1892"/>
<text text-anchor="middle" x="2578" y="-1870.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_encode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2633.63,-1877.11C2660.57,-1880.44 2692.81,-1887.24 2719,-1901 2892.31,-1992.07 2989.19,-2229.51 3018.15,-2311.04"/>
<polygon fill="gray" stroke="gray" points="3014.9,-2312.33 3021.5,-2320.62 3021.51,-2310.02 3014.9,-2312.33"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn from_uniform_bytes(bytes: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This follows the one&#45;way map construction from the Ristretto RFC: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://datatracker.ietf.org/doc/html/draft&#45;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="2902,-2357 2747,-2357 2747,-2321 2902,-2321 2902,-2357"/>
<text text-anchor="middle" x="2824.5" y="-2335.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_uniform_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M2902.16,-2339C2910.5,-2339 2919.08,-2339 2927.64,-2339"/>
<polygon fill="gray" stroke="gray" points="2927.68,-2342.5 2937.68,-2339 2927.68,-2335.5 2927.68,-2342.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node5"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="871,-297 357,-297 357,-261 871,-261 871,-297"/>
<text text-anchor="middle" x="614" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="1225.5,-297 1040.5,-297 1040.5,-261 1225.5,-261 1225.5,-297"/>
<text text-anchor="middle" x="1133" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M871.23,-279C927.65,-279 984.21,-279 1030.16,-279"/>
<polygon fill="blue" stroke="blue" points="1030.4,-282.5 1040.4,-279 1030.4,-275.5 1030.4,-282.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node6"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="810,-1377 418,-1377 418,-1341 810,-1341 810,-1377"/>
<text text-anchor="middle" x="614" y="-1355.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="1264.5,-2174 1001.5,-2174 1001.5,-2138 1264.5,-2138 1264.5,-2174"/>
<text text-anchor="middle" x="1133" y="-2152.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.57,-1340.96C759.8,-1329.92 857.09,-1327.47 912,-1386 968.51,-1446.23 876.82,-2067.56 932,-2129 947.67,-2146.45 968.82,-2156.62 991.51,-2162.12"/>
<polygon fill="blue" stroke="blue" points="990.81,-2165.55 1001.32,-2164.2 992.26,-2158.71 990.81,-2165.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node7"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="773,-891 455,-891 455,-855 773,-855 773,-891"/>
<text text-anchor="middle" x="614" y="-869.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="1613,-1479 1557,-1479 1557,-1443 1613,-1443 1613,-1479"/>
<text text-anchor="middle" x="1585" y="-1457.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.39,-854.96C760.45,-844.17 857,-842.09 912,-900 951.06,-941.12 892.69,-1369.13 932,-1410 1016.8,-1498.16 1420.74,-1474.04 1546.52,-1464.2"/>
<polygon fill="blue" stroke="blue" points="1547.11,-1467.66 1556.8,-1463.38 1546.55,-1460.69 1547.11,-1467.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node8"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="767,-513 461,-513 461,-477 767,-477 767,-513"/>
<text text-anchor="middle" x="614" y="-491.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="1613,-837 1557,-837 1557,-801 1613,-801 1613,-837"/>
<text text-anchor="middle" x="1585" y="-815.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M711.17,-476.99C775.54,-470.74 858.04,-474.77 912,-522 942.18,-548.42 906.36,-579.16 932,-610 1062.57,-767.07 1156.72,-739.09 1354,-792 1420.47,-809.83 1500.87,-815.88 1546.87,-817.94"/>
<polygon fill="blue" stroke="blue" points="1546.83,-821.44 1556.96,-818.35 1547.11,-814.45 1546.83,-821.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node9"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="764.5,-567 463.5,-567 463.5,-531 764.5,-531 764.5,-567"/>
<text text-anchor="middle" x="614" y="-545.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="1618,-891 1552,-891 1552,-855 1618,-855 1618,-891"/>
<text text-anchor="middle" x="1585" y="-869.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M701.3,-530.97C767.62,-522.54 856.93,-523.84 912,-576 956.68,-618.31 892.11,-666.14 932,-713 1059.47,-862.74 1161.71,-804.8 1354,-846 1418.69,-859.86 1495.25,-867.06 1541.69,-870.43"/>
<polygon fill="blue" stroke="blue" points="1541.47,-873.93 1551.69,-871.13 1541.96,-866.94 1541.47,-873.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey().</title>
<g id="a_node10"><a xlink:title="fn GroupSecretParams_EncryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCiphertext&gt; { &#160;&#160;&#160;&#160;params &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="754.5,-1539 473.5,-1539 473.5,-1503 754.5,-1503 754.5,-1539"/>
<text text-anchor="middle" x="614" y="-1517.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_EncryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::ProfileKeyCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.encrypt_p...">
<polygon fill="white" stroke="black" points="1208.5,-2454 1057.5,-2454 1057.5,-2418 1208.5,-2418 1208.5,-2454"/>
<text text-anchor="middle" x="1133" y="-2432.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.29,-1502.97C759.57,-1491.85 857.11,-1489.28 912,-1548 944.67,-1582.95 900.1,-2373.34 932,-2409 960.21,-2440.53 1006.32,-2448.32 1047.15,-2447.76"/>
<polygon fill="blue" stroke="blue" points="1047.52,-2451.25 1057.41,-2447.44 1047.3,-2444.25 1047.52,-2451.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node11"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="887,-1215 341,-1215 341,-1179 887,-1179 887,-1215"/>
<text text-anchor="middle" x="614" y="-1193.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="1299.5,-2012 966.5,-2012 966.5,-1976 1299.5,-1976 1299.5,-2012"/>
<text text-anchor="middle" x="1133" y="-1990.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.57,-1178.96C759.8,-1167.92 857.09,-1165.47 912,-1224 968.51,-1284.23 876.82,-1905.56 932,-1967 939.27,-1975.1 947.73,-1981.63 956.97,-1986.85"/>
<polygon fill="blue" stroke="blue" points="955.56,-1990.06 966.06,-1991.47 958.73,-1983.82 955.56,-1990.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node12"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="750,-405 478,-405 478,-369 750,-369 750,-405"/>
<text text-anchor="middle" x="614" y="-383.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="1634,-700 1536,-700 1536,-664 1634,-664 1634,-700"/>
<text text-anchor="middle" x="1585" y="-678.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M723.36,-368.99C785.17,-364.95 860.37,-371.42 912,-414 936.63,-434.32 908.97,-460.89 932,-483 1064.73,-610.44 1202.21,-453.59 1334,-582 1358.09,-605.48 1328.49,-633.07 1354,-655 1400.87,-695.3 1474.41,-696.93 1525.67,-691.81"/>
<polygon fill="blue" stroke="blue" points="1526.06,-695.28 1535.61,-690.7 1525.28,-688.33 1526.06,-695.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node13"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="765.5,-1809 462.5,-1809 462.5,-1773 765.5,-1773 765.5,-1809"/>
<text text-anchor="middle" x="614" y="-1787.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="1161,-3192 1105,-3192 1105,-3156 1161,-3156 1161,-3192"/>
<text text-anchor="middle" x="1133" y="-3170.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M690.72,-1773C759.09,-1761.73 857.12,-1758.91 912,-1818 956.92,-1866.37 903.62,-2946.4 932,-3006 966.37,-3078.16 1048.21,-3130.59 1095.87,-3156.25"/>
<polygon fill="blue" stroke="blue" points="1094.44,-3159.46 1104.92,-3161.03 1097.71,-3153.27 1094.44,-3159.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node14"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="755,-1593 473,-1593 473,-1557 755,-1557 755,-1593"/>
<text text-anchor="middle" x="614" y="-1571.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1208.5,-2508 1057.5,-2508 1057.5,-2472 1208.5,-2472 1208.5,-2508"/>
<text text-anchor="middle" x="1133" y="-2486.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.29,-1556.97C759.57,-1545.85 857.11,-1543.28 912,-1602 944.67,-1636.95 900.1,-2427.34 932,-2463 960.21,-2494.53 1006.32,-2502.32 1047.15,-2501.76"/>
<polygon fill="blue" stroke="blue" points="1047.52,-2505.25 1057.41,-2501.44 1047.3,-2498.25 1047.52,-2505.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node15"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="795,-999 433,-999 433,-963 795,-963 795,-999"/>
<text text-anchor="middle" x="614" y="-977.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1612,-3295 1558,-3295 1558,-3259 1612,-3259 1612,-3295"/>
<text text-anchor="middle" x="1585" y="-3273.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.56,-962.97C759.78,-951.94 857.07,-949.49 912,-1008 967.16,-1066.75 877.09,-1674.01 932,-1733 993.17,-1798.71 1273.3,-1706.86 1334,-1773 1389.49,-1833.46 1299.05,-3189.05 1354,-3250 1402.36,-3303.63 1496.09,-3295.3 1547.71,-3285.55"/>
<polygon fill="blue" stroke="blue" points="1548.64,-3288.93 1557.75,-3283.53 1547.26,-3282.07 1548.64,-3288.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().</title>
<g id="a_node16"><a xlink:title="fn GroupSendFullToken_Verify( &#160;&#160;&#160;&#160;token: &amp;[u8], &#160;&#160;&#160;&#160;user_ids: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;key_pair: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let token = zkgroup::des...">
<polygon fill="white" stroke="black" points="715.5,-243 512.5,-243 512.5,-207 715.5,-207 715.5,-243"/>
<text text-anchor="middle" x="614" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendFullToken_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroup...">
<polygon fill="white" stroke="black" points="1161,-243 1105,-243 1105,-207 1161,-207 1161,-243"/>
<text text-anchor="middle" x="1133" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendFullToken_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M715.6,-225C831.47,-225 1015.95,-225 1094.55,-225"/>
<polygon fill="blue" stroke="blue" points="1094.92,-228.5 1104.92,-225 1094.92,-221.5 1094.92,-228.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node17"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="773,-1755 455,-1755 455,-1719 773,-1719 773,-1755"/>
<text text-anchor="middle" x="614" y="-1733.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="1612,-3349 1558,-3349 1558,-3313 1612,-3313 1612,-3349"/>
<text text-anchor="middle" x="1585" y="-3327.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.02,-1718.96C759.36,-1707.76 857.16,-1705.06 912,-1764 952.8,-1807.85 904.86,-2788.6 932,-2842 1033.6,-3041.94 1221.74,-2952.85 1334,-3147 1369.21,-3207.9 1304.02,-3254.51 1354,-3304 1405.18,-3354.68 1497.37,-3347.65 1548.11,-3338.86"/>
<polygon fill="blue" stroke="blue" points="1548.78,-3342.3 1557.97,-3337.04 1547.51,-3335.41 1548.78,-3342.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node18"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="802,-621 426,-621 426,-585 802,-585 802,-621"/>
<text text-anchor="middle" x="614" y="-599.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="1649,-945 1521,-945 1521,-909 1649,-909 1649,-945"/>
<text text-anchor="middle" x="1585" y="-923.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M698.91,-584.99C765.67,-576 856.77,-576.51 912,-630 964.12,-680.47 884.08,-737.53 932,-792 1059.88,-937.35 1163.66,-864.64 1354,-900 1406,-909.66 1465.29,-916.52 1510.65,-920.91"/>
<polygon fill="blue" stroke="blue" points="1510.41,-924.4 1520.69,-921.86 1511.07,-917.44 1510.41,-924.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node19"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="818,-945 410,-945 410,-909 818,-909 818,-945"/>
<text text-anchor="middle" x="614" y="-923.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="1618,-3241 1552,-3241 1552,-3205 1618,-3205 1618,-3241"/>
<text text-anchor="middle" x="1585" y="-3219.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.57,-908.96C759.8,-897.92 857.1,-895.47 912,-954 969.11,-1014.88 874.25,-1644.72 932,-1705 993.95,-1769.67 1272.46,-1667.95 1334,-1733 1387.88,-1789.95 1308,-3080.52 1354,-3144 1397.08,-3203.46 1487.77,-3218.59 1541.5,-3222.18"/>
<polygon fill="blue" stroke="blue" points="1541.55,-3225.69 1551.73,-3222.75 1541.95,-3218.7 1541.55,-3225.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node20"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="904,-1323 324,-1323 324,-1287 904,-1287 904,-1323"/>
<text text-anchor="middle" x="614" y="-1301.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="1319.5,-2120 946.5,-2120 946.5,-2084 1319.5,-2084 1319.5,-2120"/>
<text text-anchor="middle" x="1133" y="-2098.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.57,-1286.96C759.8,-1275.92 857.09,-1273.47 912,-1332 968.51,-1392.23 876.82,-2013.56 932,-2075 934.03,-2077.26 936.15,-2079.4 938.36,-2081.42"/>
<polygon fill="blue" stroke="blue" points="936.22,-2084.2 946.17,-2087.85 940.67,-2078.79 936.22,-2084.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node21"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="850.5,-1701 377.5,-1701 377.5,-1665 850.5,-1665 850.5,-1701"/>
<text text-anchor="middle" x="614" y="-1679.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="1197,-2645 1069,-2645 1069,-2609 1197,-2609 1197,-2645"/>
<text text-anchor="middle" x="1133" y="-2623.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.3,-1664.96C759.58,-1653.83 857.13,-1651.26 912,-1710 945.65,-1746.02 899.42,-2560.02 932,-2597 962.79,-2631.95 1015.38,-2638.73 1058.91,-2637.16"/>
<polygon fill="blue" stroke="blue" points="1059.09,-2640.65 1068.9,-2636.65 1058.73,-2633.66 1059.09,-2640.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node22"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="858,-1269 370,-1269 370,-1233 858,-1233 858,-1269"/>
<text text-anchor="middle" x="614" y="-1247.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1269,-2066 997,-2066 997,-2030 1269,-2030 1269,-2066"/>
<text text-anchor="middle" x="1133" y="-2044.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.57,-1232.96C759.8,-1221.92 857.09,-1219.47 912,-1278 968.51,-1338.23 876.82,-1959.56 932,-2021 946.67,-2037.33 966.14,-2047.29 987.18,-2053.01"/>
<polygon fill="blue" stroke="blue" points="986.4,-2056.42 996.94,-2055.35 988.03,-2049.61 986.4,-2056.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node23"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="840,-1053 388,-1053 388,-1017 840,-1017 840,-1053"/>
<text text-anchor="middle" x="614" y="-1031.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="1166,-1821 1100,-1821 1100,-1785 1166,-1785 1166,-1821"/>
<text text-anchor="middle" x="1133" y="-1799.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.55,-1016.98C759.77,-1005.95 857.05,-1003.51 912,-1062 965.96,-1119.44 880.02,-1711.76 932,-1771 970.59,-1814.99 1043.53,-1815.31 1089.84,-1810.15"/>
<polygon fill="blue" stroke="blue" points="1090.38,-1813.61 1099.87,-1808.9 1089.51,-1806.66 1090.38,-1813.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node24"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="819,-1161 409,-1161 409,-1125 819,-1125 819,-1161"/>
<text text-anchor="middle" x="614" y="-1139.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="1276,-1958 990,-1958 990,-1922 1276,-1922 1276,-1958"/>
<text text-anchor="middle" x="1133" y="-1936.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.57,-1124.96C759.8,-1113.92 857.09,-1111.47 912,-1170 968.51,-1230.23 876.82,-1851.56 932,-1913 945.01,-1927.48 961.79,-1936.95 980.1,-1942.9"/>
<polygon fill="blue" stroke="blue" points="979.22,-1946.29 989.8,-1945.7 981.16,-1939.56 979.22,-1946.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node25"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="774.5,-1863 453.5,-1863 453.5,-1827 774.5,-1827 774.5,-1863"/>
<text text-anchor="middle" x="614" y="-1841.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="1167.5,-3408 1098.5,-3408 1098.5,-3372 1167.5,-3372 1167.5,-3408"/>
<text text-anchor="middle" x="1133" y="-3386.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M774.85,-1835.71C826.16,-1841.5 878.35,-1858.37 912,-1898 964.68,-1960.05 878.02,-3302.08 932,-3363 970.24,-3406.15 1041.95,-3404.98 1088.31,-3398.64"/>
<polygon fill="blue" stroke="blue" points="1089,-3402.08 1098.37,-3397.13 1087.96,-3395.16 1089,-3402.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId().</title>
<g id="a_node26"><a xlink:title="fn CallLinkSecretParams_EncryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;UuidCiphertext&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLinkSecretParams&gt;(params_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="750,-351 478,-351 478,-315 750,-315 750,-351"/>
<text text-anchor="middle" x="614" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_EncryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_uid(&amp;self, user_id: libsignal_core::Aci) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(user_id.into()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.encrypt_uid_...">
<polygon fill="white" stroke="black" points="1634,-646 1536,-646 1536,-610 1634,-610 1634,-646"/>
<text text-anchor="middle" x="1585" y="-624.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_EncryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.01,-322.65C803.33,-324.16 863.35,-333.24 912,-360 924.77,-367.03 919.77,-378.06 932,-386 1086.15,-486.1 1208.3,-348.91 1334,-483 1369.48,-520.85 1316.55,-562.1 1354,-598 1398.97,-641.1 1473.57,-643.07 1525.57,-637.87"/>
<polygon fill="blue" stroke="blue" points="1526.11,-641.34 1535.66,-636.75 1525.33,-634.38 1526.11,-641.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node27"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="782,-675 446,-675 446,-639 782,-639 782,-675"/>
<text text-anchor="middle" x="614" y="-653.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1619.5,-1263 1550.5,-1263 1550.5,-1227 1619.5,-1227 1619.5,-1263"/>
<text text-anchor="middle" x="1585" y="-1241.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.67,-638.96C760.68,-628.24 856.98,-626.29 912,-684 947.84,-721.59 897.16,-1112.48 932,-1151 1013.31,-1240.92 1407.12,-1246.37 1540.06,-1245.59"/>
<polygon fill="blue" stroke="blue" points="1540.3,-1249.09 1550.28,-1245.52 1540.25,-1242.09 1540.3,-1249.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node28"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="753.5,-1647 474.5,-1647 474.5,-1611 753.5,-1611 753.5,-1647"/>
<text text-anchor="middle" x="614" y="-1625.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="1206,-2562 1060,-2562 1060,-2526 1206,-2526 1206,-2562"/>
<text text-anchor="middle" x="1133" y="-2540.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.29,-1610.97C759.57,-1599.85 857.11,-1597.28 912,-1656 944.67,-1690.95 900.1,-2481.34 932,-2517 960.81,-2549.2 1008.28,-2556.64 1049.75,-2555.71"/>
<polygon fill="blue" stroke="blue" points="1050.01,-2559.2 1059.87,-2555.31 1049.74,-2552.21 1050.01,-2559.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node29"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="826.5,-729 401.5,-729 401.5,-693 826.5,-693 826.5,-729"/>
<text text-anchor="middle" x="614" y="-707.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="1612,-1317 1558,-1317 1558,-1281 1612,-1281 1612,-1317"/>
<text text-anchor="middle" x="1585" y="-1295.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.68,-692.95C760.69,-682.23 857,-680.27 912,-738 948.21,-776 896.85,-1171.01 932,-1210 1014.69,-1301.73 1422.73,-1302 1547.62,-1299.87"/>
<polygon fill="blue" stroke="blue" points="1547.87,-1303.36 1557.8,-1299.68 1547.74,-1296.36 1547.87,-1303.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node30"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="825.5,-783 402.5,-783 402.5,-747 825.5,-747 825.5,-783"/>
<text text-anchor="middle" x="614" y="-761.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="1618,-1371 1552,-1371 1552,-1335 1618,-1335 1618,-1371"/>
<text text-anchor="middle" x="1585" y="-1349.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.35,-747C760.39,-736.23 856.92,-734.17 912,-792 948.51,-830.33 896.38,-1228.84 932,-1268 1013.8,-1357.93 1410.78,-1357.06 1541.89,-1354.22"/>
<polygon fill="blue" stroke="blue" points="1542.02,-1357.72 1551.94,-1353.99 1541.86,-1350.72 1542.02,-1357.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node31"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="776,-459 452,-459 452,-423 776,-423 776,-459"/>
<text text-anchor="middle" x="614" y="-437.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="1619.5,-783 1550.5,-783 1550.5,-747 1619.5,-747 1619.5,-783"/>
<text text-anchor="middle" x="1585" y="-761.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M715.71,-422.97C779.16,-417.59 858.85,-422.61 912,-468 939.54,-491.52 905.23,-522.6 932,-547 1065.65,-668.83 1205.92,-482.33 1334,-610 1373.85,-649.72 1313.64,-695.8 1354,-735 1403.04,-782.64 1488.22,-780.28 1540.01,-773.29"/>
<polygon fill="blue" stroke="blue" points="1540.83,-776.71 1550.22,-771.8 1539.82,-769.78 1540.83,-776.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node32"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="802.5,-837 425.5,-837 425.5,-801 802.5,-801 802.5,-837"/>
<text text-anchor="middle" x="614" y="-815.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="1612,-1425 1558,-1425 1558,-1389 1612,-1389 1612,-1425"/>
<text text-anchor="middle" x="1585" y="-1403.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.36,-801C760.39,-790.22 856.93,-788.16 912,-846 948.73,-884.58 896.02,-1285.72 932,-1325 1015.29,-1415.95 1422.92,-1411.77 1547.66,-1408.27"/>
<polygon fill="blue" stroke="blue" points="1547.94,-1411.76 1557.83,-1407.96 1547.73,-1404.76 1547.94,-1411.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node33"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="820.5,-1107 407.5,-1107 407.5,-1071 820.5,-1071 820.5,-1107"/>
<text text-anchor="middle" x="614" y="-1085.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1224,-1904 1042,-1904 1042,-1868 1224,-1868 1224,-1904"/>
<text text-anchor="middle" x="1133" y="-1882.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.57,-1070.96C759.79,-1059.92 857.09,-1057.48 912,-1116 968.28,-1175.98 877.49,-1794.4 932,-1856 956.62,-1883.82 995.05,-1893.77 1031.67,-1895.86"/>
<polygon fill="blue" stroke="blue" points="1031.81,-1899.37 1041.94,-1896.26 1032.08,-1892.38 1031.81,-1899.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId().</title>
<g id="a_node34"><a xlink:title="fn GroupSecretParams_EncryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;service_id: ServiceId, ) &#45;&gt; Serialized&lt;UuidCiphertext&gt; { &#160;&#160;&#160;&#160;params.encrypt_service_id(service_id).into() }">
<polygon fill="white" stroke="black" points="753,-1485 475,-1485 475,-1449 753,-1449 753,-1485"/>
<text text-anchor="middle" x="614" y="-1463.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_EncryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;service_id: libsignal_core::ServiceId, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::UuidCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_struct::UidStruct::from_service_id(ser...">
<polygon fill="white" stroke="black" points="1206,-2400 1060,-2400 1060,-2364 1206,-2364 1206,-2400"/>
<text text-anchor="middle" x="1133" y="-2378.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_EncryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.28,-1448.98C759.55,-1437.87 857.08,-1435.3 912,-1494 943.44,-1527.6 904.09,-2285.42 932,-2322 959.38,-2357.89 1007.44,-2373.06 1049.59,-2379.18"/>
<polygon fill="blue" stroke="blue" points="1049.23,-2382.66 1059.6,-2380.48 1050.13,-2375.72 1049.23,-2382.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().</title>
<g id="a_node35"><a xlink:title="fn ProfileKey_GetCommitment( &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCommitment&gt; { &#160;&#160;&#160;&#160;profile_key.get_commitment(user_id).into() }">
<polygon fill="white" stroke="black" points="716.5,-1431 511.5,-1431 511.5,-1395 716.5,-1395 716.5,-1431"/>
<text text-anchor="middle" x="614" y="-1409.3" font-family="Helvetica,sans-Serif" font-size="14.00">ProfileKey_GetCommitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1200,-2287 1066,-2287 1066,-2251 1200,-2251 1200,-2287"/>
<text text-anchor="middle" x="1133" y="-2265.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.58,-1394.95C759.82,-1383.9 857.12,-1381.45 912,-1440 941.23,-1471.18 906.05,-2175.05 932,-2209 960.8,-2246.67 1012.39,-2261.51 1055.95,-2267.02"/>
<polygon fill="blue" stroke="blue" points="1055.65,-2270.5 1065.97,-2268.14 1056.43,-2263.55 1055.65,-2270.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="701,-2033 527,-2033 527,-1997 701,-1997 701,-2033"/>
<text text-anchor="middle" x="614" y="-2011.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M701.27,-2028.66C766.48,-2033.93 854.31,-2029.53 912,-1981 936.11,-1960.72 908.1,-1933.52 932,-1913 959.16,-1889.68 996.49,-1880.67 1031.56,-1878.27"/>
<polygon fill="blue" stroke="blue" points="1032.05,-1881.75 1041.86,-1877.74 1031.7,-1874.76 1032.05,-1881.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="145,-2083 16,-2083 16,-2047 145,-2047 145,-2083"/>
<text text-anchor="middle" x="80.5" y="-2061.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M145.08,-2059.02C237.31,-2050.34 408.92,-2034.2 516.71,-2024.06"/>
<polygon fill="blue" stroke="blue" points="517.31,-2027.52 526.94,-2023.1 516.65,-2020.55 517.31,-2027.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="274,-2033 194,-2033 194,-1997 274,-1997 274,-2033"/>
<text text-anchor="middle" x="234" y="-2011.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M136.19,-2046.95C151.77,-2041.81 168.63,-2036.24 183.85,-2031.22"/>
<polygon fill="blue" stroke="blue" points="185.19,-2034.46 193.59,-2028.01 183,-2027.82 185.19,-2034.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M274.03,-2015C330.71,-2015 437.63,-2015 516.28,-2015"/>
<polygon fill="blue" stroke="blue" points="516.7,-2018.5 526.7,-2015 516.7,-2011.5 516.7,-2018.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="125,-2029 36,-2029 36,-1993 125,-1993 125,-2029"/>
<text text-anchor="middle" x="80.5" y="-2007.3" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M125.32,-2012.16C143.61,-2012.64 164.93,-2013.2 183.76,-2013.7"/>
<polygon fill="blue" stroke="blue" points="183.83,-2017.2 193.92,-2013.97 184.02,-2010.21 183.83,-2017.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="645,-1946 583,-1946 583,-1910 645,-1910 645,-1946"/>
<text text-anchor="middle" x="614" y="-1924.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.03,-1925.56C718.85,-1919.56 911.83,-1903.89 1031.51,-1894.16"/>
<polygon fill="blue" stroke="blue" points="1032.1,-1897.63 1041.78,-1893.33 1031.53,-1890.65 1032.1,-1897.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="111.5,-1946 49.5,-1946 49.5,-1910 111.5,-1910 111.5,-1946"/>
<text text-anchor="middle" x="80.5" y="-1924.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="265,-1946 203,-1946 203,-1910 265,-1910 265,-1946"/>
<text text-anchor="middle" x="234" y="-1924.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M111.79,-1928C135.02,-1928 167.29,-1928 192.69,-1928"/>
<polygon fill="blue" stroke="blue" points="192.76,-1931.5 202.76,-1928 192.76,-1924.5 192.76,-1931.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M265.29,-1928C332.98,-1928 496.48,-1928 572.67,-1928"/>
<polygon fill="blue" stroke="blue" points="572.82,-1931.5 582.82,-1928 572.82,-1924.5 572.82,-1931.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node43"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="641,-2166 587,-2166 587,-2130 641,-2130 641,-2166"/>
<text text-anchor="middle" x="614" y="-2144.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M641.23,-2154.48C698.44,-2166.89 835.43,-2187.09 912,-2118 944.68,-2088.51 899.82,-2051.03 932,-2021 939.49,-2014.01 947.88,-2008.26 956.87,-2003.57"/>
<polygon fill="blue" stroke="blue" points="958.51,-2006.66 966.05,-1999.22 955.51,-2000.34 958.51,-2006.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M641.17,-2154.78C698.86,-2167.99 837.77,-2189.97 912,-2118 960.61,-2070.88 884.19,-2014.93 932,-1967 945.36,-1953.6 961.99,-1944.66 979.9,-1938.88"/>
<polygon fill="blue" stroke="blue" points="981.33,-1942.11 989.97,-1935.99 979.4,-1935.39 981.33,-1942.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="705,-2303 523,-2303 523,-2267 705,-2267 705,-2303"/>
<text text-anchor="middle" x="614" y="-2281.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M705.05,-2282.21C804.33,-2279.14 962.3,-2274.25 1055.7,-2271.36"/>
<polygon fill="blue" stroke="blue" points="1056.04,-2274.85 1065.93,-2271.04 1055.83,-2267.86 1056.04,-2274.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M697.76,-2303.03C764.76,-2312.33 856.77,-2312.23 912,-2258 970.38,-2200.67 874.88,-2133.58 932,-2075 946.99,-2059.62 966.27,-2050.06 986.92,-2044.41"/>
<polygon fill="blue" stroke="blue" points="987.93,-2047.77 996.83,-2042.02 986.28,-2040.97 987.93,-2047.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M695.76,-2303.04C763.16,-2312.89 856.81,-2313.55 912,-2258 949.25,-2220.51 895.57,-2059.3 932,-2021 939.41,-2013.21 947.92,-2006.9 957.16,-2001.82"/>
<polygon fill="blue" stroke="blue" points="958.82,-2004.91 966.22,-1997.33 955.71,-1998.63 958.82,-2004.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M694.31,-2303.01C761.96,-2313.22 856.79,-2314.44 912,-2258 957.33,-2211.66 887.69,-2014.31 932,-1967 945.21,-1952.9 962,-1943.62 980.23,-1937.74"/>
<polygon fill="blue" stroke="blue" points="981.23,-1941.09 989.88,-1934.97 979.3,-1934.36 981.23,-1941.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="717.5,-2249 510.5,-2249 510.5,-2213 717.5,-2213 717.5,-2249"/>
<text text-anchor="middle" x="614" y="-2227.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M706.04,-2249.03C772.23,-2256.41 859.15,-2253.32 912,-2201 969.2,-2144.37 875.76,-2078.58 932,-2021 939.42,-2013.4 947.89,-2007.23 957.05,-2002.24"/>
<polygon fill="blue" stroke="blue" points="958.61,-2005.37 966.04,-1997.82 955.52,-1999.09 958.61,-2005.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node46"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="1962.5,-3682 1868.5,-3682 1868.5,-3646 1962.5,-3646 1962.5,-3682"/>
<text text-anchor="middle" x="1915.5" y="-3660.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="2127,-3799 2073,-3799 2073,-3763 2127,-3763 2127,-3799"/>
<text text-anchor="middle" x="2100" y="-3777.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1944.62,-3682.02C1976.74,-3702.62 2029.34,-3736.34 2064.07,-3758.61"/>
<polygon fill="blue" stroke="blue" points="2062.62,-3761.83 2072.92,-3764.28 2066.39,-3755.94 2062.62,-3761.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="1716.5,-3628 1453.5,-3628 1453.5,-3592 1716.5,-3592 1716.5,-3628"/>
<text text-anchor="middle" x="1585" y="-3606.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node48"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="1960,-3628 1871,-3628 1871,-3592 1960,-3592 1960,-3628"/>
<text text-anchor="middle" x="1915.5" y="-3606.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1716.78,-3610C1767.03,-3610 1821.66,-3610 1860.73,-3610"/>
<polygon fill="blue" stroke="blue" points="1860.82,-3613.5 1870.82,-3610 1860.82,-3606.5 1860.82,-3613.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2338,-3819 2284,-3819 2284,-3783 2338,-3783 2338,-3819"/>
<text text-anchor="middle" x="2311" y="-3797.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1960.03,-3623.38C1969.29,-3627.12 1978.75,-3631.65 1987,-3637 2005.98,-3649.32 2004.64,-3659.77 2023,-3673 2088.3,-3720.07 2119.7,-3706.93 2185,-3754 2195.2,-3761.35 2194.08,-3767.77 2205,-3774 2226.21,-3786.11 2252.9,-3792.88 2274.06,-3796.61"/>
<polygon fill="blue" stroke="blue" points="2273.53,-3800.07 2283.96,-3798.21 2274.64,-3793.16 2273.53,-3800.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2348,-3765 2274,-3765 2274,-3729 2348,-3729 2348,-3765"/>
<text text-anchor="middle" x="2311" y="-3743.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1960.13,-3619.22C2013.97,-3631.24 2107.85,-3654.26 2185,-3684 2214.16,-3695.24 2245.56,-3711.08 2269.59,-3724.06"/>
<polygon fill="blue" stroke="blue" points="2267.97,-3727.17 2278.42,-3728.89 2271.32,-3721.02 2267.97,-3727.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="1718,-3682 1452,-3682 1452,-3646 1718,-3646 1718,-3682"/>
<text text-anchor="middle" x="1585" y="-3660.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1718.19,-3664C1766.76,-3664 1819.21,-3664 1857.67,-3664"/>
<polygon fill="blue" stroke="blue" points="1858.13,-3667.5 1868.13,-3664 1858.13,-3660.5 1858.13,-3667.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1617.5,-3491 1552.5,-3491 1552.5,-3455 1617.5,-3455 1617.5,-3491"/>
<text text-anchor="middle" x="1585" y="-3469.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1617.79,-3469.91C1664.15,-3466.86 1751.77,-3466.67 1816,-3500 1852.43,-3518.91 1881.83,-3557.2 1898.73,-3583.22"/>
<polygon fill="blue" stroke="blue" points="1895.89,-3585.28 1904.18,-3591.87 1901.81,-3581.54 1895.89,-3585.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1620,-3545 1550,-3545 1550,-3509 1620,-3509 1620,-3545"/>
<text text-anchor="middle" x="1585" y="-3523.3" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1620.24,-3525.24C1669.65,-3524.6 1761.03,-3530.82 1816,-3580 1836.01,-3597.9 1816.96,-3618.07 1836,-3637 1842.39,-3643.35 1850.33,-3648.21 1858.7,-3651.92"/>
<polygon fill="blue" stroke="blue" points="1857.67,-3655.28 1868.26,-3655.65 1860.21,-3648.76 1857.67,-3655.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<g id="a_node56"><a xlink:title="fn input_hash_pt(input: &amp;[u8; 64]) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(input) }">
<polygon fill="white" stroke="black" points="2635,-3792 2521,-3792 2521,-3756 2635,-3756 2635,-3792"/>
<text text-anchor="middle" x="2578" y="-3770.3" font-family="Helvetica,sans-Serif" font-size="14.00">input_hash_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2338.38,-3798.31C2378.19,-3794.26 2454.88,-3786.44 2510.6,-3780.77"/>
<polygon fill="blue" stroke="blue" points="2511.15,-3784.23 2520.74,-3779.73 2510.44,-3777.26 2511.15,-3784.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<g id="a_node55"><a xlink:title="fn auth_pt(input: &amp;[u8; 64], k_oprf: &amp;Scalar) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;input_hash_pt(input) * k_oprf }">
<polygon fill="white" stroke="black" points="2345.5,-3873 2276.5,-3873 2276.5,-3837 2345.5,-3837 2345.5,-3873"/>
<text text-anchor="middle" x="2311" y="-3851.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2127.41,-3794.47C2148.13,-3804.66 2177.9,-3818.47 2205,-3828 2224.87,-3834.99 2247.43,-3841.02 2266.53,-3845.61"/>
<polygon fill="blue" stroke="blue" points="2265.92,-3849.06 2276.46,-3847.93 2267.52,-3842.24 2265.92,-3849.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore1(&amp;mut self, req_bytes: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.inner &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2137,-3873 2063,-3873 2063,-3837 2137,-3837 2137,-3873"/>
<text text-anchor="middle" x="2100" y="-3851.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M2137.38,-3866.6C2246.77,-3898.93 2574,-3976.67 2719,-3801 2813.7,-3686.28 2822.59,-2561.33 2823.42,-2367.4"/>
<polygon fill="blue" stroke="blue" points="2826.92,-2367.19 2823.45,-2357.17 2819.92,-2367.16 2826.92,-2367.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_pt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2345.75,-3846.99C2366.42,-3841.92 2393.36,-3835.02 2417,-3828 2450.35,-3818.1 2487.16,-3805.78 2517.05,-3795.4"/>
<polygon fill="blue" stroke="blue" points="2518.21,-3798.7 2526.5,-3792.11 2515.91,-3792.09 2518.21,-3798.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M2582.09,-3755.86C2607.86,-3604.6 2786.86,-2554.03 2818.67,-2367.34"/>
<polygon fill="blue" stroke="blue" points="2822.17,-2367.67 2820.4,-2357.22 2815.27,-2366.49 2822.17,-2367.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="1987,-3817 1844,-3817 1844,-3781 1987,-3781 1987,-3817"/>
<text text-anchor="middle" x="1915.5" y="-3795.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1987.2,-3805.81C1999.14,-3806.72 2011.41,-3807.51 2023,-3808 2094.94,-3811.03 2113.03,-3810.01 2185,-3808 2214.85,-3807.16 2248.66,-3805.21 2273.58,-3803.58"/>
<polygon fill="blue" stroke="blue" points="2273.94,-3807.06 2283.68,-3802.9 2273.47,-3800.08 2273.94,-3807.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1987.06,-3792.04C2012.92,-3789.49 2041.12,-3786.71 2062.75,-3784.58"/>
<polygon fill="blue" stroke="blue" points="2063.19,-3788.05 2072.79,-3783.58 2062.5,-3781.08 2063.19,-3788.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1975.25,-3817.03C2000.5,-3824.78 2029.58,-3833.7 2053.2,-3840.95"/>
<polygon fill="blue" stroke="blue" points="2052.38,-3844.35 2062.96,-3843.94 2054.43,-3837.66 2052.38,-3844.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1950.44,-3780.79C1970.84,-3770.83 1997.69,-3759.45 2023,-3754 2106.25,-3736.07 2206.23,-3738.96 2263.51,-3742.86"/>
<polygon fill="blue" stroke="blue" points="2263.47,-3746.37 2273.7,-3743.6 2263.98,-3739.38 2263.47,-3746.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 input_hash_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2348.01,-3750.67C2389.67,-3754.91 2459.12,-3761.99 2510.64,-3767.24"/>
<polygon fill="blue" stroke="blue" points="2510.38,-3770.73 2520.69,-3768.26 2511.09,-3763.77 2510.38,-3770.73"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn generate_points() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Signal_Username_20230130_Constant_Points_Generate&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for p in BASE_POINTS.iter() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(&amp;sho.get_point(),...">
<polygon fill="white" stroke="black" points="2164,-1934 2036,-1934 2036,-1898 2164,-1898 2164,-1934"/>
<text text-anchor="middle" x="2100" y="-1912.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_points</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;pub fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2351.5,-1934 2270.5,-1934 2270.5,-1898 2351.5,-1898 2351.5,-1934"/>
<text text-anchor="middle" x="2311" y="-1912.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 constants/test/generate_points().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2164.27,-1916C2194.98,-1916 2231.35,-1916 2260.07,-1916"/>
<polygon fill="blue" stroke="blue" points="2260.28,-1919.5 2270.28,-1916 2260.28,-1912.5 2260.28,-1919.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node60"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="2383,-2480 2239,-2480 2239,-2444 2383,-2444 2383,-2480"/>
<text text-anchor="middle" x="2311" y="-2458.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn get_point(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut point_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut point_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes(&amp;point_byte...">
<polygon fill="white" stroke="black" points="2618.5,-2513 2537.5,-2513 2537.5,-2477 2618.5,-2477 2618.5,-2513"/>
<text text-anchor="middle" x="2578" y="-2491.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2383.02,-2470.84C2428.67,-2476.53 2486.83,-2483.77 2527.51,-2488.84"/>
<polygon fill="blue" stroke="blue" points="2527.1,-2492.31 2537.46,-2490.08 2527.97,-2485.37 2527.1,-2492.31"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node61"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2137.5,-2480 2062.5,-2480 2062.5,-2444 2137.5,-2444 2137.5,-2480"/>
<text text-anchor="middle" x="2100" y="-2458.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2137.88,-2462C2163.05,-2462 2197.39,-2462 2228.77,-2462"/>
<polygon fill="blue" stroke="blue" points="2228.84,-2465.5 2238.84,-2462 2228.84,-2458.5 2228.84,-2465.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn derive_impl&lt;D: Domain&gt;() &#45;&gt; [RistrettoPoint; 2] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new(b&#39; Signal_ZKCredential_Domain_20231011&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_and_ratchet(D::ID.as_bytes()); &#160;...">
<polygon fill="white" stroke="black" points="2359.5,-2367 2262.5,-2367 2262.5,-2331 2359.5,-2331 2359.5,-2367"/>
<text text-anchor="middle" x="2311" y="-2345.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/derive_impl().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2349.21,-2367.11C2369.41,-2377.12 2394.74,-2389.93 2417,-2402 2459.08,-2424.82 2506.37,-2452.58 2538.56,-2471.8"/>
<polygon fill="blue" stroke="blue" points="2536.84,-2474.85 2547.22,-2476.98 2540.44,-2468.84 2536.84,-2474.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn serialize&lt;S&gt;(&amp;self, serializer: S) &#45;&gt; Result&lt;S::Ok, S::Error&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S: serde::Serializer, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.serialize(serializer) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2137,-2892 2063,-2892 2063,-2856 2137,-2856 2137,-2892"/>
<text text-anchor="middle" x="2100" y="-2870.3" font-family="Helvetica,sans-Serif" font-size="14.00">serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Signal_ZKCredential_ConstantSystemParams_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get_point(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_wprime = sho.get_poi...">
<polygon fill="white" stroke="black" points="2350.5,-2892 2271.5,-2892 2271.5,-2856 2350.5,-2856 2350.5,-2892"/>
<text text-anchor="middle" x="2311" y="-2870.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair][Serialize]serialize().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2137.41,-2874C2171.61,-2874 2223.07,-2874 2260.9,-2874"/>
<polygon fill="blue" stroke="blue" points="2261.18,-2877.5 2271.18,-2874 2261.18,-2870.5 2261.18,-2877.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2340.46,-2855.91C2363.2,-2840.44 2394.83,-2816.5 2417,-2790 2489.84,-2702.91 2544.5,-2577.47 2566.45,-2522.53"/>
<polygon fill="blue" stroke="blue" points="2569.75,-2523.7 2570.16,-2513.12 2563.24,-2521.13 2569.75,-2523.7"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="2160.5,-2838 2039.5,-2838 2039.5,-2802 2160.5,-2802 2160.5,-2838"/>
<text text-anchor="middle" x="2100" y="-2816.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2101.81,-2801.95C2105.09,-2751.99 2121.68,-2611.21 2205,-2545 2208.14,-2542.5 2426.7,-2514.25 2527.31,-2501.35"/>
<polygon fill="blue" stroke="blue" points="2527.77,-2504.82 2537.24,-2500.08 2526.88,-2497.88 2527.77,-2504.82"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;fn test_system() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let params = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;params).expect(&#39; can serialize&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; PARAMS = {serialized:#x?}&#39; ); &#160;...">
<polygon fill="white" stroke="black" points="2150,-2946 2050,-2946 2050,-2910 2150,-2910 2150,-2946"/>
<text text-anchor="middle" x="2100" y="-2924.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_system</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2150,-2915.34C2183.57,-2906.67 2227.9,-2895.21 2261.38,-2886.56"/>
<polygon fill="blue" stroke="blue" points="2262.6,-2889.86 2271.4,-2883.97 2260.85,-2883.08 2262.6,-2889.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="2355,-2755 2267,-2755 2267,-2719 2355,-2719 2355,-2755"/>
<text text-anchor="middle" x="2311" y="-2733.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2355.08,-2732.62C2375.21,-2728.97 2398.72,-2722.28 2417,-2710 2489.48,-2661.33 2541.67,-2568.49 2564.38,-2522.38"/>
<polygon fill="blue" stroke="blue" points="2567.57,-2523.81 2568.77,-2513.29 2561.27,-2520.77 2567.57,-2523.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="2361.5,-2701 2260.5,-2701 2260.5,-2665 2361.5,-2665 2361.5,-2701"/>
<text text-anchor="middle" x="2311" y="-2679.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2361.66,-2675.92C2379.89,-2671.89 2400.18,-2665.63 2417,-2656 2477.78,-2621.19 2531.29,-2557.1 2558.33,-2521.17"/>
<polygon fill="blue" stroke="blue" points="2561.17,-2523.22 2564.31,-2513.11 2555.54,-2519.05 2561.17,-2523.22"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="2382.5,-2647 2239.5,-2647 2239.5,-2611 2382.5,-2611 2382.5,-2647"/>
<text text-anchor="middle" x="2311" y="-2625.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2382.6,-2614.36C2394.32,-2610.94 2406.18,-2606.84 2417,-2602 2465.8,-2580.18 2516.08,-2543.85 2546.94,-2519.66"/>
<polygon fill="blue" stroke="blue" points="2549.45,-2522.14 2555.12,-2513.19 2545.1,-2516.66 2549.45,-2522.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="2409,-2593 2213,-2593 2213,-2557 2409,-2557 2409,-2593"/>
<text text-anchor="middle" x="2311" y="-2571.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2371.8,-2556.95C2418.78,-2542.77 2483.41,-2523.25 2527.51,-2509.94"/>
<polygon fill="blue" stroke="blue" points="2528.58,-2513.27 2537.14,-2507.03 2526.56,-2506.57 2528.58,-2513.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2177,-2181 2023,-2181 2023,-2145 2177,-2145 2177,-2181"/>
<text text-anchor="middle" x="2100" y="-2159.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2128.47,-2181.28C2147.68,-2195.65 2172.11,-2217.47 2185,-2243 2201.05,-2274.79 2180.01,-2376.62 2205,-2402 2238.38,-2435.9 2370.99,-2419.87 2417,-2432 2455.85,-2442.24 2498.07,-2459.13 2529.38,-2472.84"/>
<polygon fill="blue" stroke="blue" points="2528.17,-2476.13 2538.73,-2476.98 2531.01,-2469.73 2528.17,-2476.13"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="1942.5,-2208 1888.5,-2208 1888.5,-2172 1942.5,-2172 1942.5,-2208"/>
<text text-anchor="middle" x="1915.5" y="-2186.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1942.57,-2202.77C1958.1,-2211.8 1976.72,-2225.42 1987,-2243 2048.53,-2348.28 2000.22,-2395.2 2023,-2515 2042.64,-2618.28 2075.76,-2738.85 2090.95,-2792.19"/>
<polygon fill="blue" stroke="blue" points="2087.62,-2793.29 2093.74,-2801.94 2094.35,-2791.36 2087.62,-2793.29"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1942.65,-2186.13C1961.18,-2183.39 1987.19,-2179.54 2012.68,-2175.77"/>
<polygon fill="blue" stroke="blue" points="2013.41,-2179.2 2022.79,-2174.27 2012.39,-2172.28 2013.41,-2179.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="1943.5,-2154 1887.5,-2154 1887.5,-2118 1943.5,-2118 1943.5,-2154"/>
<text text-anchor="middle" x="1915.5" y="-2132.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1943.82,-2140.04C1962.34,-2142.78 1987.93,-2146.57 2012.99,-2150.27"/>
<polygon fill="blue" stroke="blue" points="2012.51,-2153.74 2022.92,-2151.74 2013.54,-2146.82 2012.51,-2153.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="1943.5,-2017 1887.5,-2017 1887.5,-1981 1943.5,-1981 1943.5,-2017"/>
<text text-anchor="middle" x="1915.5" y="-1995.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.inner.finalize_public_attrs() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2177,-2071 2023,-2071 2023,-2035 2177,-2035 2177,-2071"/>
<text text-anchor="middle" x="2100" y="-2049.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1943.82,-2007.08C1966.07,-2013.67 1998.5,-2023.26 2027.97,-2031.98"/>
<polygon fill="blue" stroke="blue" points="2027.25,-2035.42 2037.83,-2034.9 2029.23,-2028.71 2027.25,-2035.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="1942.5,-2071 1888.5,-2071 1888.5,-2035 1942.5,-2035 1942.5,-2071"/>
<text text-anchor="middle" x="1915.5" y="-2049.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1942.84,-2065.62C1958.47,-2074.59 1977.11,-2088.2 1987,-2106 2031.3,-2185.76 2007.92,-2425.01 2023,-2515 2040.37,-2618.69 2074.64,-2739.05 2090.53,-2792.27"/>
<polygon fill="blue" stroke="blue" points="2087.23,-2793.42 2093.46,-2801.99 2093.93,-2791.4 2087.23,-2793.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1942.65,-2053C1961.18,-2053 1987.19,-2053 2012.68,-2053"/>
<polygon fill="blue" stroke="blue" points="2012.79,-2056.5 2022.79,-2053 2012.79,-2049.5 2012.79,-2056.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2100,-2071.05C2100,-2092.24 2100,-2113.42 2100,-2134.61"/>
<polygon fill="blue" stroke="blue" points="2096.5,-2134.68 2100,-2144.68 2103.5,-2134.68 2096.5,-2134.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;fn finalize_public_attrs(&amp;mut self) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(self.core.attr_points[0] == RistrettoPoint::identity()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.core.attr_points[0] = self.public_attrs.get_point(); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2177,-1783 2023,-1783 2023,-1747 2177,-1747 2177,-1783"/>
<text text-anchor="middle" x="2100" y="-1761.3" font-family="Helvetica,sans-Serif" font-size="14.00">finalize_public_attrs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2117.83,-1783.04C2137.57,-1805.34 2169.53,-1845.37 2185,-1886 2211.28,-1955.04 2175.62,-1983.22 2205,-2051 2226.57,-2100.77 2476.04,-2382.04 2553.92,-2469.23"/>
<polygon fill="blue" stroke="blue" points="2551.43,-2471.69 2560.7,-2476.82 2556.64,-2467.03 2551.43,-2471.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1943.5,-1783 1887.5,-1783 1887.5,-1747 1943.5,-1747 1943.5,-1783"/>
<text text-anchor="middle" x="1915.5" y="-1761.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]finalize_public_attrs().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1943.82,-1765C1962.26,-1765 1987.7,-1765 2012.65,-1765"/>
<polygon fill="blue" stroke="blue" points="2012.92,-1768.5 2022.92,-1765 2012.92,-1761.5 2012.92,-1768.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M2607.53,-2476.8C2651.88,-2448.5 2737.36,-2393.96 2786.43,-2362.65"/>
<polygon fill="blue" stroke="blue" points="2788.61,-2365.41 2795.16,-2357.08 2784.84,-2359.51 2788.61,-2365.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node80"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="271.5,-2577 196.5,-2577 196.5,-2541 271.5,-2541 271.5,-2577"/>
<text text-anchor="middle" x="234" y="-2555.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node81"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="759,-2523 469,-2523 469,-2487 759,-2487 759,-2523"/>
<text text-anchor="middle" x="614" y="-2501.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M271.6,-2544.8C285.34,-2540.01 301.2,-2535.1 316,-2532 361.92,-2522.4 412.53,-2516.21 458.77,-2512.22"/>
<polygon fill="blue" stroke="blue" points="459.2,-2515.7 468.87,-2511.38 458.62,-2508.72 459.2,-2515.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node82"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="722,-2631 506,-2631 506,-2595 722,-2595 722,-2631"/>
<text text-anchor="middle" x="614" y="-2609.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M271.6,-2573.2C285.34,-2577.99 301.2,-2582.9 316,-2586 374.56,-2598.25 440.77,-2604.94 495.79,-2608.6"/>
<polygon fill="blue" stroke="blue" points="495.73,-2612.1 505.93,-2609.25 496.17,-2605.12 495.73,-2612.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node83"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="728,-2577 500,-2577 500,-2541 728,-2541 728,-2577"/>
<text text-anchor="middle" x="614" y="-2555.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M271.59,-2559C321.59,-2559 413.74,-2559 489.71,-2559"/>
<polygon fill="blue" stroke="blue" points="489.84,-2562.5 499.84,-2559 489.84,-2555.5 489.84,-2562.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.24,-2522.09C812.47,-2520.84 869.98,-2509.58 912,-2475 935.67,-2455.52 908.66,-2428.87 932,-2409 963.9,-2381.83 1009.64,-2374.16 1049.33,-2373.69"/>
<polygon fill="blue" stroke="blue" points="1049.53,-2377.19 1059.55,-2373.72 1049.56,-2370.19 1049.53,-2377.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.27,-2523.03C764.47,-2532.86 858.99,-2533.09 912,-2475 952.61,-2430.49 892.14,-351.18 932,-306 956.21,-278.56 993.95,-269.02 1030.15,-267.33"/>
<polygon fill="blue" stroke="blue" points="1030.41,-270.83 1040.31,-267.06 1030.22,-263.83 1030.41,-270.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="1284,-351 982,-351 982,-315 1284,-315 1284,-351"/>
<text text-anchor="middle" x="1133" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.56,-2523.03C764.69,-2532.78 858.98,-2532.9 912,-2475 941.44,-2442.85 924.44,-948.93 932,-906 970.37,-688.07 1080.39,-442.07 1118.67,-360.73"/>
<polygon fill="blue" stroke="blue" points="1122.06,-361.74 1123.18,-351.21 1115.74,-358.75 1122.06,-361.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="1161,-2807 1105,-2807 1105,-2771 1161,-2771 1161,-2807"/>
<text text-anchor="middle" x="1133" y="-2785.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.36,-2604.36C785.59,-2605.33 862.6,-2618 912,-2666 943.26,-2696.37 900.1,-2732.3 932,-2762 975.8,-2802.78 1050.18,-2801.16 1094.85,-2795.57"/>
<polygon fill="blue" stroke="blue" points="1095.56,-2799 1104.98,-2794.17 1094.6,-2792.07 1095.56,-2799"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="1166,-2699 1100,-2699 1100,-2663 1166,-2663 1166,-2699"/>
<text text-anchor="middle" x="1133" y="-2677.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.12,-2627.09C835.91,-2642.06 1010.12,-2664.97 1089.7,-2675.44"/>
<polygon fill="blue" stroke="blue" points="1089.47,-2678.94 1099.84,-2676.77 1090.38,-2672 1089.47,-2678.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.12,-2615.9C822.84,-2618.63 970.88,-2622.64 1058.76,-2625.02"/>
<polygon fill="blue" stroke="blue" points="1058.81,-2628.52 1068.9,-2625.29 1059,-2621.52 1058.81,-2628.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M698.05,-2631.02C764.99,-2640.25 856.76,-2640.04 912,-2586 968.59,-2530.64 876.63,-2465.58 932,-2409 961.93,-2378.41 1008.83,-2370.87 1049.7,-2371.34"/>
<polygon fill="blue" stroke="blue" points="1049.85,-2374.84 1059.94,-2371.62 1050.04,-2367.85 1049.85,-2374.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.17,-2605.81C778.78,-2601.36 849.32,-2594.81 912,-2586 957.89,-2579.55 1008.73,-2570 1049.97,-2561.64"/>
<polygon fill="blue" stroke="blue" points="1050.87,-2565.03 1059.96,-2559.6 1049.47,-2558.17 1050.87,-2565.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M723.36,-2577.01C785.17,-2581.05 860.37,-2574.58 912,-2532 936.63,-2511.68 907.82,-2483.85 932,-2463 963.25,-2436.06 1008.06,-2428.19 1047.35,-2427.55"/>
<polygon fill="blue" stroke="blue" points="1047.48,-2431.05 1057.48,-2427.54 1047.47,-2424.05 1047.48,-2431.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.11,-2577.04C769.09,-2585.05 857.08,-2583.18 912,-2532 952.52,-2494.24 892.31,-2447.63 932,-2409 962.44,-2379.37 1008.9,-2371.75 1049.38,-2371.94"/>
<polygon fill="blue" stroke="blue" points="1049.46,-2375.44 1059.53,-2372.14 1049.6,-2368.44 1049.46,-2375.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M728.14,-2555.72C825.19,-2552.9 962.74,-2548.91 1049.64,-2546.39"/>
<polygon fill="blue" stroke="blue" points="1049.82,-2549.89 1059.72,-2546.1 1049.62,-2542.89 1049.82,-2549.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M728.3,-2563.12C785.13,-2561.62 854.01,-2554.3 912,-2532 922.37,-2528.01 921.72,-2521.21 932,-2517 968.16,-2502.19 1010.76,-2495.16 1047.34,-2491.94"/>
<polygon fill="blue" stroke="blue" points="1047.8,-2495.41 1057.49,-2491.13 1047.24,-2488.43 1047.8,-2495.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M696.61,-2577.04C763.84,-2586.65 856.78,-2586.98 912,-2532 945.22,-2498.92 901.68,-2357.75 932,-2322 962,-2286.62 1012.64,-2273.45 1055.45,-2269.08"/>
<polygon fill="blue" stroke="blue" points="1055.92,-2272.55 1065.58,-2268.19 1055.31,-2265.58 1055.92,-2272.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.66,-2577.03C760.66,-2587.74 856.96,-2589.69 912,-2532 947.09,-2495.23 897.72,-2112.53 932,-2075 946.75,-2058.85 966.21,-2048.97 987.19,-2043.26"/>
<polygon fill="blue" stroke="blue" points="988.02,-2046.66 996.93,-2040.93 986.39,-2039.86 988.02,-2046.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.39,-2577.04C760.45,-2587.83 857,-2589.91 912,-2532 951.13,-2490.8 893.78,-2063.04 932,-2021 939.32,-2012.95 947.81,-2006.45 957.08,-2001.25"/>
<polygon fill="blue" stroke="blue" points="958.84,-2004.28 966.2,-1996.65 955.69,-1998.03 958.84,-2004.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.91,-2577.01C760.84,-2587.62 856.88,-2589.43 912,-2532 943.04,-2499.65 901.67,-2162.01 932,-2129 934.06,-2126.76 936.2,-2124.65 938.43,-2122.64"/>
<polygon fill="blue" stroke="blue" points="940.73,-2125.28 946.31,-2116.27 936.33,-2119.84 940.73,-2125.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.11,-2577.03C760.23,-2587.91 857.02,-2590.1 912,-2532 955.17,-2486.37 889.83,-2013.56 932,-1967 945.07,-1952.57 961.89,-1943.13 980.21,-1937.2"/>
<polygon fill="blue" stroke="blue" points="981.28,-1940.54 989.92,-1934.41 979.34,-1933.81 981.28,-1940.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1099.94,-1799.77C1048.13,-1796.83 950.74,-1800.48 922,-1865 913.19,-1884.79 913.19,-2625.21 922,-2645 948.28,-2704 1036.13,-2699.48 1089.83,-2690.5"/>
<polygon fill="blue" stroke="blue" points="1090.54,-2693.93 1099.77,-2688.72 1089.31,-2687.04 1090.54,-2693.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="1641.5,-2753 1528.5,-2753 1528.5,-2717 1641.5,-2717 1641.5,-2753"/>
<text text-anchor="middle" x="1585" y="-2731.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1641.71,-2746.67C1694.84,-2754.18 1772.94,-2755.11 1816,-2708 1843.71,-2677.68 1827.95,-2009.27 1836,-1969 1849.19,-1902.96 1881.82,-1830.45 1900.59,-1792.17"/>
<polygon fill="blue" stroke="blue" points="1903.73,-1793.72 1905.05,-1783.21 1897.47,-1790.6 1903.73,-1793.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1161.14,-2785.74C1230.85,-2777.38 1417.8,-2754.94 1518.16,-2742.9"/>
<polygon fill="blue" stroke="blue" points="1518.67,-2746.36 1528.19,-2741.7 1517.84,-2739.41 1518.67,-2746.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="1646.5,-2699 1523.5,-2699 1523.5,-2663 1646.5,-2663 1646.5,-2699"/>
<text text-anchor="middle" x="1585" y="-2677.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1166,-2681C1237.95,-2681 1413.92,-2681 1513.08,-2681"/>
<polygon fill="blue" stroke="blue" points="1513.31,-2684.5 1523.31,-2681 1513.31,-2677.5 1513.31,-2684.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1677.5,-2645 1492.5,-2645 1492.5,-2609 1677.5,-2609 1677.5,-2645"/>
<text text-anchor="middle" x="1585" y="-2623.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1677.55,-2640.42C1725.65,-2641.95 1781.6,-2634.02 1816,-2597 1842.82,-2568.14 1816.54,-2277.25 1836,-2243 1845.57,-2226.15 1862.97,-2213.58 1878.96,-2204.92"/>
<polygon fill="blue" stroke="blue" points="1880.8,-2207.91 1888.14,-2200.27 1877.64,-2201.67 1880.8,-2207.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<g id="a_node155"><a xlink:title=" &#160;&#160;&#160;pub fn from_service_id(service_id: ServiceId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M1 = Self::calc_M1(service_id); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let raw_uuid_bytes = service_id.raw_uuid().into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = RistrettoPoint...">
<polygon fill="white" stroke="black" points="1978,-1179 1853,-1179 1853,-1143 1978,-1143 1978,-1179"/>
<text text-anchor="middle" x="1915.5" y="-1157.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1677.58,-2640.96C1726,-2642.74 1782.25,-2634.88 1816,-2597 1867.08,-2539.67 1799.77,-1282.7 1836,-1215 1842.59,-1202.68 1853.39,-1192.61 1864.89,-1184.64"/>
<polygon fill="blue" stroke="blue" points="1866.82,-1187.56 1873.34,-1179.22 1863.03,-1181.67 1866.82,-1187.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1197.04,-2627C1270.92,-2627 1394.34,-2627 1481.92,-2627"/>
<polygon fill="blue" stroke="blue" points="1482.15,-2630.5 1492.15,-2627 1482.15,-2623.5 1482.15,-2630.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="1217,-2753 1049,-2753 1049,-2717 1217,-2717 1217,-2753"/>
<text text-anchor="middle" x="1133" y="-2731.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1217.06,-2735C1303.83,-2735 1438.19,-2735 1517.99,-2735"/>
<polygon fill="blue" stroke="blue" points="1518.4,-2738.5 1528.4,-2735 1518.4,-2731.5 1518.4,-2738.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1217.06,-2742.46C1256.33,-2741.66 1301.59,-2733.95 1334,-2708 1353.98,-2692 1333.88,-2669.82 1354,-2654 1389.69,-2625.93 1438.67,-2617.37 1482.25,-2616.57"/>
<polygon fill="blue" stroke="blue" points="1482.34,-2620.07 1492.33,-2616.52 1482.31,-2613.07 1482.34,-2620.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1217.04,-2724.7C1258.23,-2719.62 1308.73,-2713.44 1354,-2708 1407.44,-2701.58 1467.89,-2694.49 1513.4,-2689.19"/>
<polygon fill="blue" stroke="blue" points="1513.93,-2692.65 1523.46,-2688.02 1513.12,-2685.7 1513.93,-2692.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.66,-2693.22C1699.48,-2699.96 1773.99,-2699.34 1816,-2654 1853.11,-2613.95 1803.39,-2206.79 1836,-2163 1845.74,-2149.92 1862.22,-2143.12 1877.57,-2139.62"/>
<polygon fill="blue" stroke="blue" points="1878.24,-2143.05 1887.41,-2137.75 1876.94,-2136.17 1878.24,-2143.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1646.69,-2693.45C1699.72,-2700.41 1774.53,-2699.98 1816,-2654 1842.78,-2624.32 1817.15,-1250.25 1836,-1215 1842.59,-1202.68 1853.38,-1192.6 1864.88,-1184.64"/>
<polygon fill="blue" stroke="blue" points="1866.81,-1187.56 1873.33,-1179.21 1863.03,-1181.67 1866.81,-1187.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="1291.5,-3354 974.5,-3354 974.5,-3318 1291.5,-3318 1291.5,-3354"/>
<text text-anchor="middle" x="1133" y="-3332.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1291.84,-3331.99C1307.13,-3326.68 1321.56,-3319.25 1334,-3309 1355.37,-3291.4 1332.48,-3267.42 1354,-3250 1407.21,-3206.93 1491.39,-3209.21 1541.8,-3215.57"/>
<polygon fill="blue" stroke="blue" points="1541.33,-3219.04 1551.71,-3216.92 1542.28,-3212.1 1541.33,-3219.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1291.7,-3334.25C1383.81,-3333.22 1492.5,-3332.02 1547.77,-3331.4"/>
<polygon fill="blue" stroke="blue" points="1547.81,-3334.9 1557.77,-3331.29 1547.73,-3327.9 1547.81,-3334.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1281.48,-3317.98C1299.22,-3315.25 1317.05,-3312.25 1334,-3309 1343,-3307.27 1344.99,-3305.65 1354,-3304 1421.92,-3291.58 1502.22,-3283.67 1547.72,-3279.81"/>
<polygon fill="blue" stroke="blue" points="1548.29,-3283.28 1557.97,-3278.96 1547.71,-3276.3 1548.29,-3283.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1250,-3300 1016,-3300 1016,-3264 1250,-3264 1250,-3300"/>
<text text-anchor="middle" x="1133" y="-3278.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1250.16,-3268.53C1277.74,-3264.73 1306.99,-3260.18 1334,-3255 1343,-3253.27 1344.99,-3251.65 1354,-3250 1419.08,-3238.1 1495.53,-3230.34 1541.84,-3226.32"/>
<polygon fill="blue" stroke="blue" points="1542.14,-3229.8 1551.81,-3225.47 1541.55,-3222.83 1542.14,-3229.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1250.18,-3294.65C1348.61,-3305.37 1483.63,-3320.07 1547.58,-3327.03"/>
<polygon fill="blue" stroke="blue" points="1547.26,-3330.52 1557.58,-3328.12 1548.02,-3323.56 1547.26,-3330.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1250.18,-3280.71C1348.61,-3279.62 1483.63,-3278.12 1547.58,-3277.4"/>
<polygon fill="blue" stroke="blue" points="1547.62,-3280.9 1557.58,-3277.29 1547.54,-3273.9 1547.62,-3280.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="751.5,-3354 476.5,-3354 476.5,-3318 751.5,-3318 751.5,-3354"/>
<text text-anchor="middle" x="614" y="-3332.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="1210,-3246 1056,-3246 1056,-3210 1210,-3210 1210,-3246"/>
<text text-anchor="middle" x="1133" y="-3224.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M751.62,-3353.45C806.42,-3353.34 867.09,-3343.38 912,-3309 932.32,-3293.44 912.02,-3271 932,-3255 963.51,-3229.77 1007.16,-3221.78 1045.65,-3220.62"/>
<polygon fill="blue" stroke="blue" points="1045.88,-3224.12 1055.83,-3220.47 1045.78,-3217.12 1045.88,-3224.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M751.51,-3350.26C863.29,-3361.93 1014.55,-3377.73 1088.14,-3385.42"/>
<polygon fill="blue" stroke="blue" points="1088.11,-3388.93 1098.42,-3386.49 1088.84,-3381.97 1088.11,-3388.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M705.53,-3354.02C771.02,-3361.46 857.28,-3358.88 912,-3309 948.08,-3276.11 896.65,-3234.66 932,-3201 975.34,-3159.73 1049.88,-3161.51 1094.69,-3167.27"/>
<polygon fill="blue" stroke="blue" points="1094.47,-3170.77 1104.87,-3168.71 1095.46,-3163.84 1094.47,-3170.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;fn new(backup_id: &amp;libsignal_account_keys::BackupId) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20231003_Signal_BackupId&#39; , &amp;backup_id.0).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1942.5,-3268 1888.5,-3268 1888.5,-3232 1942.5,-3232 1942.5,-3268"/>
<text text-anchor="middle" x="1915.5" y="-3246.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1933.18,-3231.74C1950.22,-3211.83 1975.71,-3178.21 1987,-3144 2011.82,-3068.78 1972.07,-2492.67 2023,-2432 2070.49,-2375.44 2137.69,-2451.71 2185,-2395 2217.2,-2356.4 2173.32,-1982.04 2205,-1943 2218.29,-1926.62 2240.07,-1919.41 2260.35,-1916.47"/>
<polygon fill="blue" stroke="blue" points="2260.91,-1919.93 2270.46,-1915.33 2260.13,-1912.98 2260.91,-1919.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1210.08,-3227.15C1305.47,-3226.09 1465.66,-3224.31 1541.6,-3223.47"/>
<polygon fill="blue" stroke="blue" points="1541.78,-3226.97 1551.75,-3223.36 1541.71,-3219.97 1541.78,-3226.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1210.31,-3220.91C1250.87,-3221.13 1299.37,-3228.19 1334,-3255 1352.6,-3269.4 1335.28,-3289.76 1354,-3304 1410.5,-3346.96 1498.46,-3343.51 1547.61,-3337.23"/>
<polygon fill="blue" stroke="blue" points="1548.36,-3340.66 1557.78,-3335.82 1547.39,-3333.72 1548.36,-3340.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1210.08,-3236.28C1308.02,-3246.95 1474.28,-3265.05 1547.52,-3273.03"/>
<polygon fill="blue" stroke="blue" points="1547.31,-3276.53 1557.63,-3274.13 1548.06,-3269.57 1547.31,-3276.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.24,-3222.74C1669.86,-3220.36 1769.93,-3207.33 1816,-3144 1852.54,-3093.76 1799.47,-2076.24 1836,-2026 1845.59,-2012.8 1862.05,-2006 1877.43,-2002.51"/>
<polygon fill="blue" stroke="blue" points="1878.11,-2005.95 1887.3,-2000.67 1876.82,-1999.07 1878.11,-2005.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.21,-3331.15C1655.63,-3330.7 1744.76,-3326.75 1816,-3304 1838.35,-3296.86 1861.45,-3284.51 1879.66,-3273.41"/>
<polygon fill="blue" stroke="blue" points="1881.54,-3276.36 1888.18,-3268.1 1877.84,-3270.42 1881.54,-3276.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1167.72,-3397.03C1270.86,-3416.78 1588.82,-3464.71 1816,-3358 1852.78,-3340.72 1882.08,-3302.81 1898.88,-3276.83"/>
<polygon fill="blue" stroke="blue" points="1901.94,-3278.53 1904.29,-3268.19 1896.01,-3274.81 1901.94,-3278.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="747,-3300 481,-3300 481,-3264 747,-3264 747,-3300"/>
<text text-anchor="middle" x="614" y="-3278.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M747.04,-3270.89C798.55,-3266.33 858.07,-3260.76 912,-3255 956.18,-3250.28 1005.26,-3244.33 1045.84,-3239.21"/>
<polygon fill="blue" stroke="blue" points="1046.48,-3242.66 1055.96,-3237.93 1045.6,-3235.71 1046.48,-3242.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M747.12,-3264.56C803.07,-3264.13 865.85,-3273.67 912,-3309 932.32,-3324.56 912.02,-3347 932,-3363 976.06,-3398.28 1043.86,-3399.85 1088.08,-3396.16"/>
<polygon fill="blue" stroke="blue" points="1088.61,-3399.63 1098.23,-3395.19 1087.95,-3392.66 1088.61,-3399.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M747.12,-3299.44C803.07,-3299.87 865.85,-3290.33 912,-3255 932.32,-3239.44 912.02,-3217 932,-3201 978.34,-3163.9 1050.94,-3164.08 1094.74,-3168.45"/>
<polygon fill="blue" stroke="blue" points="1094.37,-3171.92 1104.7,-3169.56 1095.15,-3164.97 1094.37,-3171.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.22,-3283.51C1660.72,-3293.8 1764.19,-3307.23 1816,-3250 1858.66,-3202.88 1805.68,-2161.87 1836,-2106 1845.31,-2088.84 1862.86,-2076.2 1879.02,-2067.58"/>
<polygon fill="blue" stroke="blue" points="1880.9,-2070.55 1888.29,-2062.96 1877.78,-2064.28 1880.9,-2070.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1140.68,-3155.65C1161.85,-3100.57 1233.24,-2936.35 1354,-2870 1399.07,-2845.23 1780.33,-2879.04 1816,-2842 1849.65,-2807.06 1826.59,-2016.59 1836,-1969 1849.06,-1902.93 1881.73,-1830.43 1900.55,-1792.17"/>
<polygon fill="blue" stroke="blue" points="1903.7,-1793.71 1905.02,-1783.2 1897.43,-1790.59 1903.7,-1793.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1161.32,-3170.42C1254.8,-3159.11 1569.75,-3128.68 1816,-3196 1838.96,-3202.28 1862.41,-3214.84 1880.67,-3226.27"/>
<polygon fill="blue" stroke="blue" points="1878.89,-3229.28 1889.19,-3231.76 1882.68,-3223.4 1878.89,-3229.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="755,-3246 473,-3246 473,-3210 755,-3210 755,-3246"/>
<text text-anchor="middle" x="614" y="-3224.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.25,-3228C847.83,-3228 966.2,-3228 1045.32,-3228"/>
<polygon fill="blue" stroke="blue" points="1045.74,-3231.5 1055.74,-3228 1045.74,-3224.5 1045.74,-3231.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M705.53,-3209.98C771.02,-3202.54 857.28,-3205.12 912,-3255 948.08,-3287.89 896.65,-3329.34 932,-3363 973.31,-3402.34 1042.98,-3402.56 1088.22,-3397.51"/>
<polygon fill="blue" stroke="blue" points="1088.83,-3400.96 1098.32,-3396.25 1087.96,-3394.01 1088.83,-3400.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.22,-3216.17C804.79,-3211.74 860.9,-3206.46 912,-3201 976.33,-3194.13 1051.06,-3184.64 1094.78,-3178.93"/>
<polygon fill="blue" stroke="blue" points="1095.48,-3182.37 1104.94,-3177.6 1094.57,-3175.43 1095.48,-3182.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="722,-3192 506,-3192 506,-3156 722,-3156 722,-3192"/>
<text text-anchor="middle" x="614" y="-3170.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.31,-3182.94C778.8,-3187.85 849.19,-3194.29 912,-3201 956.18,-3205.72 1005.26,-3211.67 1045.84,-3216.79"/>
<polygon fill="blue" stroke="blue" points="1045.6,-3220.29 1055.96,-3218.07 1046.48,-3213.34 1045.6,-3220.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M698.91,-3155.99C765.67,-3147 856.77,-3147.51 912,-3201 964.12,-3251.47 880.99,-3311.41 932,-3363 972.22,-3403.68 1042.5,-3403.45 1088.13,-3397.95"/>
<polygon fill="blue" stroke="blue" points="1088.87,-3401.38 1098.32,-3396.58 1087.94,-3394.44 1088.87,-3401.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M722.12,-3174C838.36,-3174 1017.66,-3174 1094.71,-3174"/>
<polygon fill="blue" stroke="blue" points="1094.89,-3177.5 1104.89,-3174 1094.89,-3170.5 1094.89,-3177.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1613.34,-812.28C1662.25,-802.07 1764.43,-789.37 1816,-846 1848.14,-881.3 1814.35,-1662.46 1836,-1705 1845.19,-1723.06 1862.61,-1737.23 1878.71,-1747.25"/>
<polygon fill="blue" stroke="blue" points="1877.07,-1750.34 1887.46,-1752.39 1880.61,-1744.31 1877.07,-1750.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.16,-865.27C1668.74,-855.25 1766.24,-844.99 1816,-900 1860.95,-949.7 1797.55,-2051.12 1836,-2106 1845.48,-2119.53 1861.92,-2126.96 1877.32,-2131.04"/>
<polygon fill="blue" stroke="blue" points="1876.68,-2134.48 1887.2,-2133.26 1878.22,-2127.65 1876.68,-2134.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.09,-867.17C1666.42,-860.3 1758.35,-854.94 1816,-900 1890.05,-957.88 1908.44,-1077.99 1913,-1132.72"/>
<polygon fill="blue" stroke="blue" points="1909.51,-1133.04 1913.74,-1142.76 1916.49,-1132.53 1909.51,-1133.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.9,-758.27C1669.29,-750.57 1761.13,-744.51 1816,-792 1868.31,-837.28 1900.79,-1053.94 1911.01,-1132.48"/>
<polygon fill="blue" stroke="blue" points="1907.57,-1133.14 1912.3,-1142.62 1914.51,-1132.25 1907.57,-1133.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1649.12,-930.81C1703.2,-937.78 1778.15,-957.09 1816,-1010 1853.27,-1062.11 1798.34,-2111.17 1836,-2163 1845.8,-2176.48 1862.77,-2183.3 1878.43,-2186.71"/>
<polygon fill="blue" stroke="blue" points="1877.98,-2190.19 1888.44,-2188.5 1879.21,-2183.3 1877.98,-2190.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1649.24,-927.81C1699.08,-931.46 1767.95,-943.51 1816,-980 1867.37,-1019.01 1895.24,-1092.86 1907.23,-1133.12"/>
<polygon fill="blue" stroke="blue" points="1903.89,-1134.17 1910.01,-1142.82 1910.62,-1132.24 1903.89,-1134.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn new(room_id: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self(Sho::new(b&#39; 20230413_Signal_CallLinkRoomId&#39; , room_id).get_point()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1942.5,-1369 1888.5,-1369 1888.5,-1333 1942.5,-1333 1942.5,-1369"/>
<text text-anchor="middle" x="1915.5" y="-1347.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1942.68,-1364.67C1995.9,-1393.74 2117.34,-1466.79 2185,-1561 2261.2,-1667.11 2294.62,-1824.01 2305.6,-1887.64"/>
<polygon fill="blue" stroke="blue" points="2302.19,-1888.44 2307.29,-1897.72 2309.09,-1887.28 2302.19,-1888.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.38,-1345.36C1668.82,-1335.6 1765.59,-1325.86 1816,-1380 1849.2,-1415.65 1825.02,-1770.54 1836,-1818 1849.27,-1875.34 1880.1,-1937.26 1898.93,-1971.77"/>
<polygon fill="blue" stroke="blue" points="1896,-1973.7 1903.9,-1980.75 1902.12,-1970.31 1896,-1973.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.37,-1359.96C1667.9,-1368.54 1762.4,-1376.4 1816,-1326 1852.52,-1291.66 1808.81,-1257.11 1836,-1215 1843.8,-1202.92 1855.35,-1192.82 1867.2,-1184.75"/>
<polygon fill="blue" stroke="blue" points="1869.3,-1187.56 1875.84,-1179.23 1865.53,-1181.66 1869.3,-1187.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1613.31,-1458.15C1662.17,-1454.73 1764.27,-1455.54 1816,-1514 1844.28,-1545.96 1815.12,-1667.78 1836,-1705 1845.77,-1722.42 1862.89,-1736.41 1878.66,-1746.48"/>
<polygon fill="blue" stroke="blue" points="1876.86,-1749.48 1887.22,-1751.67 1880.48,-1743.49 1876.86,-1749.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1613.15,-1462.73C1657.54,-1464.49 1747.56,-1463.63 1816,-1434 1845.94,-1421.04 1873.75,-1395.89 1892.13,-1376.66"/>
<polygon fill="blue" stroke="blue" points="1894.92,-1378.8 1899.17,-1369.09 1889.79,-1374.03 1894.92,-1378.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.04,-1300.93C1654.84,-1304.36 1742.66,-1312.45 1816,-1326 1836.93,-1329.87 1860.01,-1335.64 1878.57,-1340.67"/>
<polygon fill="blue" stroke="blue" points="1877.8,-1344.09 1888.37,-1343.37 1879.66,-1337.34 1877.8,-1344.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CallLinkRoomIdPoint]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.83,-1243.27C1666.01,-1242.15 1750.54,-1244.6 1816,-1272 1844.84,-1284.07 1872.12,-1307.21 1890.62,-1325.34"/>
<polygon fill="blue" stroke="blue" points="1888.46,-1328.14 1898,-1332.76 1893.43,-1323.2 1888.46,-1328.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.56,-1243.96C1665.08,-1241.74 1748.47,-1234.78 1816,-1213 1837.31,-1206.13 1859.5,-1194.83 1877.41,-1184.52"/>
<polygon fill="blue" stroke="blue" points="1879.52,-1187.34 1886.36,-1179.24 1875.97,-1181.31 1879.52,-1187.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.14,-1400.57C1660.49,-1390.41 1763.73,-1377.2 1816,-1434 1860.57,-1482.43 1796.87,-1973.08 1836,-2026 1845.84,-2039.31 1862.65,-2046.11 1878.19,-2049.56"/>
<polygon fill="blue" stroke="blue" points="1877.68,-2053.03 1888.14,-2051.39 1878.94,-2046.14 1877.68,-2053.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.06,-1413.07C1659.81,-1422.49 1761.46,-1434.34 1816,-1380 1842.17,-1353.93 1816.87,-1246.6 1836,-1215 1843.38,-1202.82 1854.67,-1192.72 1866.41,-1184.68"/>
<polygon fill="blue" stroke="blue" points="1868.45,-1187.53 1874.99,-1179.2 1864.68,-1181.64 1868.45,-1187.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="1950.5,-563 1880.5,-563 1880.5,-527 1950.5,-527 1950.5,-563"/>
<text text-anchor="middle" x="1915.5" y="-541.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1634.23,-685.94C1682.86,-687.79 1758.72,-684.72 1816,-655 1852.43,-636.09 1881.83,-597.8 1898.73,-571.78"/>
<polygon fill="blue" stroke="blue" points="1901.81,-573.46 1904.18,-563.13 1895.89,-569.72 1901.81,-573.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]encrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1634.09,-618.71C1685.87,-611.72 1767.36,-609.89 1816,-655 1886.85,-720.7 1908.26,-1035.56 1913.22,-1132.52"/>
<polygon fill="blue" stroke="blue" points="1909.74,-1132.91 1913.73,-1142.73 1916.73,-1132.57 1909.74,-1132.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt_profile_key_bytes( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_bytes: ProfileKeyBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::groups::ProfileKeyCiphertext { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_...">
<polygon fill="white" stroke="black" points="1683,-2400 1487,-2400 1487,-2364 1683,-2364 1683,-2400"/>
<text text-anchor="middle" x="1585" y="-2378.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt_profile_key_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1208.56,-2427.05C1281.77,-2418.27 1394.19,-2404.78 1476.94,-2394.85"/>
<polygon fill="blue" stroke="blue" points="1477.36,-2398.32 1486.88,-2393.65 1476.53,-2391.37 1477.36,-2398.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1206.48,-2380.54C1250.83,-2375.44 1304.54,-2360.85 1334,-2322 1371.16,-2272.98 1311.53,-1259.5 1354,-1215 1389.51,-1177.78 1765.15,-1192.79 1816,-1185 1824.82,-1183.65 1834,-1181.89 1843.06,-1179.95"/>
<polygon fill="blue" stroke="blue" points="1843.83,-1183.36 1852.83,-1177.77 1842.3,-1176.53 1843.83,-1183.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;pub fn new(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut encoded_profile_key = profile_key_bytes; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profile_key[0] &amp;= 254; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encoded_profil...">
<polygon fill="white" stroke="black" points="1942.5,-2291 1888.5,-2291 1888.5,-2255 1942.5,-2255 1942.5,-2291"/>
<text text-anchor="middle" x="1915.5" y="-2269.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1683.07,-2380.99C1725.3,-2377.63 1774.51,-2369.68 1816,-2352 1844.76,-2339.74 1872.05,-2316.62 1890.58,-2298.55"/>
<polygon fill="blue" stroke="blue" points="1893.37,-2300.7 1897.96,-2291.16 1888.42,-2295.76 1893.37,-2300.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1206.07,-2555.26C1249.68,-2557.63 1302.72,-2551.78 1334,-2517 1386.55,-2458.57 1304.11,-1870.72 1354,-1810 1487.68,-1647.3 1681.79,-1867.26 1816,-1705 1836.34,-1680.41 1833.32,-1162.8 1836,-1131 1854.15,-915.43 1895.62,-657.62 1909.71,-573.23"/>
<polygon fill="blue" stroke="blue" points="1913.2,-573.6 1911.4,-563.16 1906.3,-572.44 1913.2,-573.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="1950.5,-2918 1880.5,-2918 1880.5,-2882 1950.5,-2882 1950.5,-2918"/>
<text text-anchor="middle" x="1915.5" y="-2896.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1208.66,-2478.48C1346.31,-2461.71 1641.9,-2447.21 1816,-2597 1899.09,-2668.49 1912.57,-2810.86 1914.41,-2871.54"/>
<polygon fill="blue" stroke="blue" points="1910.92,-2871.96 1914.64,-2881.88 1917.92,-2871.81 1910.92,-2871.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M1(service_id: ServiceId) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_UID_CalcM1&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;service_id.service_id_binary(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2135.5,-1179 2064.5,-1179 2064.5,-1143 2135.5,-1143 2135.5,-1179"/>
<text text-anchor="middle" x="2100" y="-1157.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1225.74,-279.26C1357.65,-281.24 1607.91,-291.01 1816,-334 1894.59,-350.24 1935.66,-330.32 1987,-392 2083.46,-507.88 2096.86,-1007.58 2098.71,-1132.57"/>
<polygon fill="blue" stroke="blue" points="2095.21,-1132.9 2098.84,-1142.85 2102.21,-1132.8 2095.21,-1132.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1284.14,-334.92C1502.03,-341 1890.44,-365.37 1987,-461 2084.2,-557.26 2097.04,-1014.22 2098.74,-1132.82"/>
<polygon fill="blue" stroke="blue" points="2095.24,-1132.97 2098.87,-1142.92 2102.24,-1132.88 2095.24,-1132.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1161.36,-217.48C1282.27,-186.11 1772.1,-78.74 1987,-334 2091.84,-458.53 2098.92,-1001.59 2099.09,-1132.52"/>
<polygon fill="blue" stroke="blue" points="2095.59,-1132.9 2099.09,-1142.9 2102.59,-1132.9 2095.59,-1132.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1200.32,-2268.11C1322.25,-2266.66 1590.19,-2264.42 1816,-2269 1836.55,-2269.42 1859.5,-2270.32 1878.07,-2271.17"/>
<polygon fill="blue" stroke="blue" points="1878.02,-2274.67 1888.17,-2271.64 1878.34,-2267.68 1878.02,-2274.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="1754,-1616 1416,-1616 1416,-1580 1754,-1580 1754,-1616"/>
<text text-anchor="middle" x="1585" y="-1594.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1269.23,-2054.93C1293.79,-2049.76 1316.98,-2039.5 1334,-2021 1363.82,-1988.57 1323.9,-1657.17 1354,-1625 1368.34,-1609.67 1386.4,-1599.48 1406.06,-1592.95"/>
<polygon fill="blue" stroke="blue" points="1407.25,-1596.25 1415.83,-1590.04 1405.25,-1589.54 1407.25,-1596.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1269.1,-2055.39C1293.83,-2050.22 1317.11,-2039.86 1334,-2021 1364.99,-1986.39 1321.46,-1218.16 1354,-1185 1387.48,-1150.89 1699.14,-1154.98 1842.71,-1158.74"/>
<polygon fill="blue" stroke="blue" points="1842.66,-1162.24 1852.75,-1159.01 1842.85,-1155.24 1842.66,-1162.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1299.89,-1997.88C1312.54,-2003.48 1324.17,-2011.01 1334,-2021 1387.33,-2075.25 1300.97,-2136.45 1354,-2191 1372.47,-2209.99 1757.01,-2255.12 1878.23,-2268.92"/>
<polygon fill="blue" stroke="blue" points="1878.14,-2272.43 1888.47,-2270.08 1878.93,-2265.47 1878.14,-2272.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M946.23,-2108.39C935.98,-2115.76 927.59,-2125.44 922,-2138 912.82,-2158.6 912.82,-2320.4 922,-2341 942.45,-2386.92 999.81,-2395.87 1049.57,-2394.03"/>
<polygon fill="blue" stroke="blue" points="1049.93,-2397.52 1059.73,-2393.51 1049.56,-2390.53 1049.93,-2397.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.87,-2116.8C1324.91,-2120.39 1329.64,-2124.44 1334,-2129 1368.39,-2164.96 1319.53,-2316.12 1354,-2352 1385.12,-2384.4 1432.8,-2394.26 1476.69,-2395.07"/>
<polygon fill="blue" stroke="blue" points="1476.85,-2398.57 1486.87,-2395.1 1476.88,-2391.57 1476.85,-2398.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="1612,-1112 1558,-1112 1558,-1076 1612,-1076 1612,-1112"/>
<text text-anchor="middle" x="1585" y="-1090.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.86,-2087.88C1324.94,-2084.11 1329.68,-2079.83 1334,-2075 1366.96,-2038.13 1325.74,-1225.59 1354,-1185 1398.31,-1121.37 1494.53,-1102.23 1547.4,-1096.47"/>
<polygon fill="blue" stroke="blue" points="1548.06,-1099.92 1557.67,-1095.46 1547.38,-1092.96 1548.06,-1099.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="1708.5,-1670 1461.5,-1670 1461.5,-1634 1708.5,-1634 1708.5,-1670"/>
<text text-anchor="middle" x="1585" y="-1648.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.21,-1894.67C1262.94,-1893.34 1305.69,-1884.3 1334,-1856 1376.28,-1813.74 1315.02,-1768.32 1354,-1723 1378.83,-1694.13 1415.11,-1676.82 1451.56,-1666.5"/>
<polygon fill="blue" stroke="blue" points="1452.57,-1669.85 1461.33,-1663.89 1450.76,-1663.09 1452.57,-1669.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1017.75,-2174.07C978,-2187.09 939.15,-2209.49 922,-2248 910.59,-2273.63 910.59,-2727.37 922,-2753 949.07,-2813.79 1041.5,-2807.15 1094.62,-2797.67"/>
<polygon fill="blue" stroke="blue" points="1095.51,-2801.06 1104.68,-2795.76 1094.21,-2794.19 1095.51,-2801.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="1613,-1058 1557,-1058 1557,-1022 1613,-1022 1613,-1058"/>
<text text-anchor="middle" x="1585" y="-1036.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.25,-1945.74C1298.28,-1940.14 1318.75,-1930.03 1334,-1913 1365.36,-1877.97 1322.34,-1101.76 1354,-1067 1402.25,-1014.03 1494.79,-1021.73 1546.57,-1031.29"/>
<polygon fill="blue" stroke="blue" points="1546.18,-1034.78 1556.66,-1033.28 1547.53,-1027.91 1546.18,-1034.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;pub fn get_point_single_elligator(&amp;mut self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RistrettoPoint::from_uniform_bytes_single_elligator( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.internal_sho.squeeze_and_ratchet_as_array(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2407,-1988 2215,-1988 2215,-1952 2407,-1952 2407,-1988"/>
<text text-anchor="middle" x="2311" y="-1966.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_point_single_elligator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M2407.3,-1954.9C2422.15,-1952.54 2437.68,-1950.08 2453.05,-1947.64"/>
<polygon fill="blue" stroke="blue" points="2453.79,-1951.07 2463.12,-1946.05 2452.7,-1944.16 2453.79,-1951.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]from_uniform_bytes().</title>
<path fill="none" stroke="blue" d="M2351.59,-1918.47C2372.87,-1921.57 2398.47,-1928.35 2417,-1943 2431.97,-1954.84 2425.39,-1965.85 2437,-1981 2547.42,-2125.04 2718.88,-2260.87 2790.41,-2314.68"/>
<polygon fill="blue" stroke="blue" points="2788.52,-2317.64 2798.63,-2320.83 2792.72,-2312.04 2788.52,-2317.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1976,-1670 1855,-1670 1855,-1634 1976,-1634 1976,-1670"/>
<text text-anchor="middle" x="1915.5" y="-1648.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1976.09,-1650.27C2034.4,-1651.47 2123.22,-1661.32 2185,-1705 2249.97,-1750.93 2286.69,-1842.23 2301.79,-1888.2"/>
<polygon fill="blue" stroke="blue" points="2298.48,-1889.34 2304.85,-1897.81 2305.15,-1887.22 2298.48,-1889.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_Credentials_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_w = sho.get...">
<polygon fill="white" stroke="black" points="1624.5,-1562 1545.5,-1562 1545.5,-1526 1624.5,-1526 1624.5,-1562"/>
<text text-anchor="middle" x="1585" y="-1540.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.62,-1539.22C1727.83,-1528.65 2013.81,-1514.04 2185,-1650 2262.54,-1711.58 2294.35,-1832.66 2305.21,-1887.64"/>
<polygon fill="blue" stroke="blue" points="2301.81,-1888.54 2307.11,-1897.71 2308.69,-1887.24 2301.81,-1888.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;fn test_system() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let params = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; PARAMS = {:#x?}&#39; , bincode::serialize(&amp;params)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(SystemParams::generate() == SystemParams::get_...">
<polygon fill="white" stroke="black" points="1183,-1562 1083,-1562 1083,-1526 1183,-1526 1183,-1562"/>
<text text-anchor="middle" x="1133" y="-1540.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_system</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1183.01,-1544C1269.7,-1544 1449.03,-1544 1535.41,-1544"/>
<polygon fill="blue" stroke="blue" points="1535.47,-1547.5 1545.47,-1544 1535.47,-1540.5 1535.47,-1547.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1708.79,-1652C1754.72,-1652 1805.29,-1652 1844.79,-1652"/>
<polygon fill="blue" stroke="blue" points="1844.84,-1655.5 1854.84,-1652 1844.84,-1648.5 1844.84,-1655.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="1172.5,-1616 1093.5,-1616 1093.5,-1580 1172.5,-1580 1172.5,-1616"/>
<text text-anchor="middle" x="1133" y="-1594.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1172.76,-1598C1224.59,-1598 1319.92,-1598 1405.76,-1598"/>
<polygon fill="blue" stroke="blue" points="1405.91,-1601.5 1415.91,-1598 1405.91,-1594.5 1405.91,-1601.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1172.82,-1606.48C1220.05,-1619.08 1297.93,-1647.67 1334,-1705 1361.13,-1748.11 1318.29,-2126.68 1354,-2163 1426.11,-2236.34 1733.02,-2130.23 1816,-2191 1835.98,-2205.63 1818.47,-2225.51 1836,-2243 1847.41,-2254.39 1863.6,-2261.53 1878.31,-2265.98"/>
<polygon fill="blue" stroke="blue" points="1877.62,-2269.42 1888.18,-2268.64 1879.44,-2262.66 1877.62,-2269.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1172.57,-1605.76C1218.43,-1612.49 1293.8,-1615.19 1334,-1571 1371.71,-1529.54 1315.93,-1108.13 1354,-1067 1402.67,-1014.42 1495.05,-1021.96 1546.69,-1031.4"/>
<polygon fill="blue" stroke="blue" points="1546.27,-1034.88 1556.75,-1033.36 1547.61,-1028.01 1546.27,-1034.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1172.6,-1605.79C1218.49,-1612.55 1293.89,-1615.27 1334,-1571 1375.88,-1524.78 1309.12,-1053.31 1354,-1010 1390.94,-974.35 1770.86,-985.55 1816,-1010 1864.09,-1036.05 1892.43,-1096.9 1905.57,-1132.9"/>
<polygon fill="blue" stroke="blue" points="1902.41,-1134.49 1909.02,-1142.77 1909.02,-1132.18 1902.41,-1134.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1754.15,-1614.77C1775.05,-1617.72 1796.07,-1621.12 1816,-1625 1825.53,-1626.85 1835.49,-1629.15 1845.26,-1631.61"/>
<polygon fill="blue" stroke="blue" points="1844.38,-1635 1854.94,-1634.12 1846.14,-1628.23 1844.38,-1635"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyCommitment_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1955,-3082 1876,-3082 1876,-3046 1955,-3046 1955,-3082"/>
<text text-anchor="middle" x="1915.5" y="-3060.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1949.57,-3045.82C1963.65,-3036.23 1978.72,-3023.1 1987,-3007 2048.61,-2887.24 1937.75,-2506.27 2023,-2402 2070.15,-2344.33 2138.18,-2416.94 2185,-2359 2243.17,-2287.02 2146.55,-2014.76 2205,-1943 2218.32,-1926.65 2240.1,-1919.44 2260.38,-1916.5"/>
<polygon fill="blue" stroke="blue" points="2260.94,-1919.96 2270.48,-1915.35 2260.15,-1913 2260.94,-1919.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn test_system() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let params = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; PARAMS = {:#x?}&#39; , bincode::serialize(&amp;params)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(SystemParams::generate() == SystemParams::get_...">
<polygon fill="white" stroke="black" points="1635,-3109 1535,-3109 1535,-3073 1635,-3073 1635,-3109"/>
<text text-anchor="middle" x="1585" y="-3087.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_system</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_system().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1635.18,-3086.96C1697.28,-3081.85 1803.47,-3073.13 1865.48,-3068.03"/>
<polygon fill="blue" stroke="blue" points="1866.11,-3071.49 1875.79,-3067.18 1865.53,-3064.51 1866.11,-3071.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="1653.5,-3055 1516.5,-3055 1516.5,-3019 1653.5,-3019 1653.5,-3055"/>
<text text-anchor="middle" x="1585" y="-3033.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.57,-3048.11C1705.16,-3052.43 1774.28,-3048.57 1816,-3007 1819.21,-3003.8 1893.29,-2435.93 1910.81,-2301.36"/>
<polygon fill="blue" stroke="blue" points="1914.33,-2301.43 1912.15,-2291.06 1907.39,-2300.52 1914.33,-2301.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1671,-2317 1499,-2317 1499,-2281 1671,-2281 1671,-2317"/>
<text text-anchor="middle" x="1585" y="-2295.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1671.02,-2292.27C1738.15,-2286.96 1828.49,-2279.81 1878.1,-2275.88"/>
<polygon fill="blue" stroke="blue" points="1878.64,-2279.35 1888.33,-2275.07 1878.09,-2272.37 1878.64,-2279.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_ProfileKeyEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1955,-2972 1876,-2972 1876,-2936 1955,-2936 1955,-2972"/>
<text text-anchor="middle" x="1915.5" y="-2950.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1955.22,-2947.66C1967.27,-2943.73 1979.39,-2937.34 1987,-2927 2061.31,-2826.03 1942.03,-2459.71 2023,-2364 2070.76,-2307.54 2137.57,-2382.74 2185,-2326 2239.66,-2260.61 2151.04,-2008.97 2205,-1943 2218.3,-1926.74 2239.97,-1919.52 2260.18,-1916.56"/>
<polygon fill="blue" stroke="blue" points="2260.72,-1920.02 2270.25,-1915.4 2259.92,-1913.07 2260.72,-1920.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;pub fn calc_M3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY...">
<polygon fill="white" stroke="black" points="2135.5,-2291 2064.5,-2291 2064.5,-2255 2135.5,-2255 2135.5,-2291"/>
<text text-anchor="middle" x="2100" y="-2269.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_M3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1918.01,-2881.88C1925.53,-2795.09 1961.01,-2422.15 2023,-2326 2031.14,-2313.37 2043.47,-2302.9 2055.84,-2294.69"/>
<polygon fill="blue" stroke="blue" points="2057.72,-2297.64 2064.35,-2289.37 2054.02,-2291.7 2057.72,-2297.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="1687.5,-2920 1482.5,-2920 1482.5,-2884 1687.5,-2884 1687.5,-2920"/>
<text text-anchor="middle" x="1585" y="-2898.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1687.69,-2918.1C1746.9,-2927.47 1818.87,-2938.86 1865.63,-2946.26"/>
<polygon fill="blue" stroke="blue" points="1865.36,-2949.77 1875.79,-2947.87 1866.46,-2942.85 1865.36,-2949.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1687.69,-2901.38C1748.83,-2901.01 1823.56,-2900.55 1870.11,-2900.27"/>
<polygon fill="blue" stroke="blue" points="1870.19,-2903.77 1880.17,-2900.21 1870.15,-2896.77 1870.19,-2903.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1687.67,-2913.04C1732.59,-2912.2 1782.66,-2902.51 1816,-2870 1898.53,-2789.53 1911.95,-2408.28 1914.1,-2301.09"/>
<polygon fill="blue" stroke="blue" points="1917.6,-2301.11 1914.28,-2291.04 1910.6,-2300.98 1917.6,-2301.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point_single_elligator().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2135.75,-2267.12C2152.31,-2262.81 2171.42,-2255.46 2185,-2243 2259.55,-2174.62 2292.91,-2053.03 2304.68,-1998.2"/>
<polygon fill="blue" stroke="blue" points="2308.16,-1998.66 2306.75,-1988.16 2301.3,-1997.25 2308.16,-1998.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]from_uniform_bytes_single_elligator().</title>
<path fill="none" stroke="blue" d="M1942.77,-2268.66C1958.17,-2264.68 1976.59,-2257.14 1987,-2243 2034.26,-2178.78 1963.86,-1939.48 2023,-1886 2087.94,-1827.28 2333.94,-1858.31 2417,-1886 2427.54,-1889.51 2426.84,-1896.5 2437,-1901 2441.69,-1903.08 2446.54,-1905 2451.49,-1906.77"/>
<polygon fill="blue" stroke="blue" points="2450.52,-1910.13 2461.11,-1909.99 2452.74,-1903.5 2450.52,-1910.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]calc_M3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1942.65,-2273C1971.68,-2273 2019.05,-2273 2054.05,-2273"/>
<polygon fill="blue" stroke="blue" points="2054.48,-2276.5 2064.48,-2273 2054.48,-2269.5 2054.48,-2276.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.23,-1098.83C1662.21,-1109.59 1770.15,-1140.71 1816,-1215 1846,-1263.61 1803.15,-2196.27 1836,-2243 1845.7,-2256.81 1862.66,-2264.26 1878.34,-2268.29"/>
<polygon fill="blue" stroke="blue" points="1877.85,-2271.76 1888.37,-2270.47 1879.34,-2264.92 1877.85,-2271.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1612.05,-1099.31C1661.4,-1109.38 1770.08,-1131.54 1842.81,-1146.38"/>
<polygon fill="blue" stroke="blue" points="1842.33,-1149.85 1852.82,-1148.42 1843.72,-1142.99 1842.33,-1149.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1613.01,-1037.82C1657.57,-1035.35 1748.32,-1035.19 1816,-1067 1848.63,-1082.34 1877.34,-1112.76 1895.22,-1134.86"/>
<polygon fill="blue" stroke="blue" points="1892.59,-1137.18 1901.53,-1142.87 1898.09,-1132.85 1892.59,-1137.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1661,-509 1509,-509 1509,-473 1661,-473 1661,-509"/>
<text text-anchor="middle" x="1585" y="-487.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1661.02,-496.93C1706.19,-501.21 1764.7,-508.02 1816,-518 1834.04,-521.51 1853.62,-526.61 1870.54,-531.43"/>
<polygon fill="blue" stroke="blue" points="1869.58,-534.79 1880.16,-534.22 1871.53,-528.07 1869.58,-534.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<g id="a_node154"><a xlink:title=" &#160;&#160;&#160;pub fn generate() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Constant_UidEncryption_SystemParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; &#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let G_a1 = ...">
<polygon fill="white" stroke="black" points="1955,-509 1876,-509 1876,-473 1955,-473 1955,-509"/>
<text text-anchor="middle" x="1915.5" y="-487.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1661.36,-491C1724.05,-491 1811.46,-491 1865.44,-491"/>
<polygon fill="blue" stroke="blue" points="1865.77,-494.5 1875.77,-491 1865.77,-487.5 1865.77,-494.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1661.02,-478.44C1711.44,-474.56 1775.8,-479.18 1816,-518 1827.34,-528.95 1893.82,-1009.86 1910.64,-1132.68"/>
<polygon fill="blue" stroke="blue" points="1907.2,-1133.37 1912.02,-1142.8 1914.13,-1132.42 1907.2,-1133.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="1661,-563 1509,-563 1509,-527 1661,-527 1661,-563"/>
<text text-anchor="middle" x="1585" y="-541.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1661.36,-545C1725.83,-545 1816.43,-545 1869.94,-545"/>
<polygon fill="blue" stroke="blue" points="1870.13,-548.5 1880.13,-545 1870.13,-541.5 1870.13,-548.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1661.11,-542.17C1711.91,-544.51 1776.67,-556.52 1816,-598 1890.43,-676.51 1909.53,-1029.74 1913.56,-1132.73"/>
<polygon fill="blue" stroke="blue" points="1910.07,-1133.11 1913.94,-1142.97 1917.06,-1132.85 1910.07,-1133.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1921.86,-563.1C1947.7,-650.32 2059.4,-1027.34 2090.78,-1133.24"/>
<polygon fill="blue" stroke="blue" points="2087.44,-1134.3 2093.64,-1142.9 2094.15,-1132.31 2087.44,-1134.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[SystemParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1955.28,-499.01C1966.77,-503.04 1978.52,-509.06 1987,-518 2183.98,-725.77 2118.29,-852.58 2185,-1131 2254.88,-1422.67 2296.2,-1784.87 2307.09,-1887.64"/>
<polygon fill="blue" stroke="blue" points="2303.63,-1888.25 2308.16,-1897.83 2310.59,-1887.52 2303.63,-1888.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M1941.58,-1179C1955.32,-1189.16 1972.47,-1202.34 1987,-1215 2237.88,-1433.7 2486.85,-1754.44 2557.32,-1847.68"/>
<polygon fill="blue" stroke="blue" points="2554.58,-1849.86 2563.4,-1855.74 2560.17,-1845.65 2554.58,-1849.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1978.03,-1161C2002.98,-1161 2031.25,-1161 2054.19,-1161"/>
<polygon fill="blue" stroke="blue" points="2054.32,-1164.5 2064.32,-1161 2054.32,-1157.5 2054.32,-1164.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]calc_M1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2108.5,-1179.07C2124.2,-1217.31 2161,-1309.44 2185,-1389 2241.53,-1576.44 2288.79,-1807.58 2304.47,-1887.35"/>
<polygon fill="blue" stroke="blue" points="2301.11,-1888.44 2306.47,-1897.58 2307.98,-1887.1 2301.11,-1888.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node157"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="1650.5,-1858 1519.5,-1858 1519.5,-1822 1650.5,-1822 1650.5,-1858"/>
<text text-anchor="middle" x="1585" y="-1836.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1650.59,-1834.06C1704.46,-1825.36 1778.28,-1803.9 1816,-1751 1850.6,-1702.48 1807.28,-1267.22 1836,-1215 1842.8,-1202.64 1853.78,-1192.52 1865.41,-1184.52"/>
<polygon fill="blue" stroke="blue" points="1867.39,-1187.4 1873.93,-1179.07 1863.62,-1181.5 1867.39,-1187.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node158"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1772.5,-1966 1397.5,-1966 1397.5,-1930 1772.5,-1930 1772.5,-1966"/>
<text text-anchor="middle" x="1585" y="-1944.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.63,-1947.12C1788.77,-1953.48 1803.63,-1962.49 1816,-1975 1845.55,-2004.87 1809.82,-2130.14 1836,-2163 1846.31,-2175.94 1863.17,-2182.71 1878.63,-2186.23"/>
<polygon fill="blue" stroke="blue" points="1878.02,-2189.68 1888.5,-2188.11 1879.33,-2182.8 1878.02,-2189.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.61,-1947.92C1788.65,-1954.15 1803.49,-1962.92 1816,-1975 1858.36,-2015.92 1799.03,-2060.15 1836,-2106 1846.12,-2118.55 1862.13,-2125.85 1877.06,-2130.1"/>
<polygon fill="blue" stroke="blue" points="1876.59,-2133.59 1887.14,-2132.59 1878.26,-2126.8 1876.59,-2133.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.72,-1940.8C1787.98,-1935.88 1802.65,-1929.41 1816,-1921 1863.56,-1891.03 1892.2,-1828.84 1905.51,-1792.69"/>
<polygon fill="blue" stroke="blue" points="1908.82,-1793.82 1908.87,-1783.23 1902.23,-1791.49 1908.82,-1793.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1772.56,-1950.3C1788.93,-1943.73 1803.85,-1934.27 1816,-1921 1842.49,-1892.05 1817.25,-1249.47 1836,-1215 1842.74,-1202.61 1853.71,-1192.48 1865.33,-1184.48"/>
<polygon fill="blue" stroke="blue" points="1867.32,-1187.36 1873.86,-1179.03 1863.55,-1181.46 1867.32,-1187.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node159"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="1808,-2020 1362,-2020 1362,-1984 1808,-1984 1808,-2020"/>
<text text-anchor="middle" x="1585" y="-1998.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1808.3,-1999.97C1834.6,-1999.73 1858.62,-1999.51 1877.14,-1999.34"/>
<polygon fill="blue" stroke="blue" points="1877.42,-2002.84 1887.39,-1999.25 1877.36,-1995.84 1877.42,-2002.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1759.02,-2020C1778.3,-2022.69 1797.6,-2025.69 1816,-2029 1836.9,-2032.76 1859.98,-2038.31 1878.54,-2043.12"/>
<polygon fill="blue" stroke="blue" points="1877.79,-2046.54 1888.35,-2045.7 1879.57,-2039.77 1877.79,-2046.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1802.03,-1983.91C1806.85,-1981.2 1811.52,-1978.23 1816,-1975 1877.07,-1930.98 1901.47,-1839.27 1910.2,-1792.99"/>
<polygon fill="blue" stroke="blue" points="1913.66,-1793.51 1911.96,-1783.05 1906.77,-1792.29 1913.66,-1793.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1806.27,-2020.16C1809.66,-2022.89 1812.91,-2025.84 1816,-2029 1849.37,-2063.17 1807.11,-2204.96 1836,-2243 1846.13,-2256.34 1862.97,-2263.75 1878.46,-2267.87"/>
<polygon fill="blue" stroke="blue" points="1877.83,-2271.31 1888.36,-2270.12 1879.39,-2264.49 1877.83,-2271.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1807.02,-1983.73C1810.15,-1981.02 1813.15,-1978.12 1816,-1975 1844.48,-1943.81 1815.85,-1252.12 1836,-1215 1842.73,-1202.6 1853.69,-1192.47 1865.32,-1184.47"/>
<polygon fill="blue" stroke="blue" points="1867.3,-1187.35 1873.85,-1179.02 1863.53,-1181.45 1867.3,-1187.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node160"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="1684.5,-2074 1485.5,-2074 1485.5,-2038 1684.5,-2038 1684.5,-2074"/>
<text text-anchor="middle" x="1585" y="-2052.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1684.55,-2048.34C1725.48,-2044.14 1773.3,-2037.93 1816,-2029 1836.67,-2024.68 1859.24,-2017.95 1877.55,-2011.97"/>
<polygon fill="blue" stroke="blue" points="1878.86,-2015.22 1887.24,-2008.74 1876.65,-2008.58 1878.86,-2015.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1684.56,-2055.1C1749.96,-2054.5 1831.99,-2053.75 1878.3,-2053.33"/>
<polygon fill="blue" stroke="blue" points="1878.48,-2056.83 1888.45,-2053.24 1878.41,-2049.83 1878.48,-2056.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1684.67,-2067.01C1729.21,-2066.74 1779.82,-2058.43 1816,-2029 1837.8,-2011.26 1826.51,-1995.46 1836,-1969 1858.82,-1905.42 1887.86,-1831.63 1903.43,-1792.56"/>
<polygon fill="blue" stroke="blue" points="1906.72,-1793.77 1907.18,-1783.18 1900.22,-1791.17 1906.72,-1793.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_struct/impl#[ProfileKeyStruct]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1684.51,-2041.95C1730.39,-2041.16 1782.19,-2049.44 1816,-2083 1866.86,-2133.48 1791.78,-2186.61 1836,-2243 1846.27,-2256.09 1862.96,-2263.47 1878.32,-2267.63"/>
<polygon fill="blue" stroke="blue" points="1877.6,-2271.06 1888.14,-2269.93 1879.2,-2264.24 1877.6,-2271.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1684.54,-2071.43C1731.15,-2072.78 1783.56,-2064.58 1816,-2029 1846.48,-1995.57 1814.46,-1254.78 1836,-1215 1842.72,-1202.59 1853.68,-1192.46 1865.3,-1184.46"/>
<polygon fill="blue" stroke="blue" points="1867.29,-1187.34 1873.83,-1179.01 1863.52,-1181.45 1867.29,-1187.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node161"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="1653.5,-2128 1516.5,-2128 1516.5,-2092 1653.5,-2092 1653.5,-2128"/>
<text text-anchor="middle" x="1585" y="-2106.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.6,-2124.81C1699.52,-2135.06 1761.57,-2149.27 1816,-2163 1836.74,-2168.23 1859.82,-2174.53 1878.41,-2179.73"/>
<polygon fill="blue" stroke="blue" points="1877.66,-2183.15 1888.24,-2182.49 1879.56,-2176.41 1877.66,-2183.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.67,-2115.36C1721.28,-2120.71 1822.77,-2128.74 1877.06,-2133.04"/>
<polygon fill="blue" stroke="blue" points="1877.02,-2136.54 1887.27,-2133.84 1877.58,-2129.57 1877.02,-2136.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.53,-2121.68C1704.76,-2126.41 1773.4,-2123.24 1816,-2083 1853.39,-2047.67 1822.25,-2018.57 1836,-1969 1853.97,-1904.21 1884.66,-1831.39 1901.86,-1792.69"/>
<polygon fill="blue" stroke="blue" points="1905.24,-1793.72 1906.13,-1783.16 1898.85,-1790.85 1905.24,-1793.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_struct/impl#[UidStruct]from_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.68,-2123.22C1706.05,-2129.13 1776.15,-2126.78 1816,-2083 1848.47,-2047.33 1813.06,-1257.43 1836,-1215 1842.71,-1202.59 1853.66,-1192.45 1865.29,-1184.45"/>
<polygon fill="blue" stroke="blue" points="1867.28,-1187.34 1873.82,-1179.01 1863.51,-1181.44 1867.28,-1187.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1622,-1912 1548,-1912 1548,-1876 1622,-1876 1622,-1912"/>
<text text-anchor="middle" x="1585" y="-1890.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.19,-1892.28C1668.83,-1891.37 1751.57,-1894.27 1816,-1921 1844.74,-1932.92 1872.03,-1955.77 1890.56,-1973.67"/>
<polygon fill="blue" stroke="blue" points="1888.38,-1976.44 1897.95,-1980.99 1893.31,-1971.47 1888.38,-1976.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.03,-1886.48C1672.38,-1878.26 1763.48,-1872.1 1816,-1921 1850.77,-1953.37 1804.89,-1990.09 1836,-2026 1846.58,-2038.21 1862.95,-2044.91 1878.01,-2048.57"/>
<polygon fill="blue" stroke="blue" points="1877.64,-2052.07 1888.14,-2050.66 1879.05,-2045.22 1877.64,-2052.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.38,-1897.02C1669.59,-1899.36 1753.31,-1898.05 1816,-1867 1850.58,-1849.87 1879.74,-1815.48 1897.16,-1791.38"/>
<polygon fill="blue" stroke="blue" points="1900.15,-1793.22 1903.03,-1783.02 1894.42,-1789.19 1900.15,-1793.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_point().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.29,-1901.79C1672.94,-1910.33 1764.41,-1916.89 1816,-1867 1858.65,-1825.75 1791.01,-1773.69 1836,-1735 1865.4,-1709.72 2156.65,-1708.55 2185,-1735 2231.91,-1778.76 2161.06,-1976.25 2205,-2023 2270.09,-2092.25 2346.09,-1987.72 2417,-2051 2444.35,-2075.4 2425.96,-2096.05 2437,-2131 2477.49,-2259.12 2539.33,-2407.35 2565.09,-2467.51"/>
<polygon fill="blue" stroke="blue" points="2561.89,-2468.91 2569.05,-2476.72 2568.32,-2466.15 2561.89,-2468.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node163"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="747.5,-3491 480.5,-3491 480.5,-3455 747.5,-3455 747.5,-3491"/>
<text text-anchor="middle" x="614" y="-3469.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M747.54,-3463.2C954.53,-3447.83 1331.38,-3419.51 1334,-3417 1387.94,-3365.25 1301.08,-3302.8 1354,-3250 1402.96,-3201.15 1489.98,-3205.76 1541.8,-3214.04"/>
<polygon fill="blue" stroke="blue" points="1541.23,-3217.49 1551.67,-3215.73 1542.41,-3210.6 1541.23,-3217.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M663.68,-3491.15C787.43,-3533.95 1119.39,-3627.47 1334,-3488 1352.35,-3476.07 1338.8,-3458.74 1354,-3443 1408.84,-3386.21 1498.41,-3354.29 1548.04,-3340.08"/>
<polygon fill="blue" stroke="blue" points="1549.01,-3343.44 1557.71,-3337.39 1547.14,-3336.7 1549.01,-3343.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M747.62,-3479.19C801.01,-3476.79 861.73,-3467.61 912,-3443 923.58,-3437.33 920.59,-3428 932,-3422 981.2,-3396.12 1045.91,-3390 1088.21,-3389.11"/>
<polygon fill="blue" stroke="blue" points="1088.5,-3392.6 1098.46,-3388.98 1088.42,-3385.6 1088.5,-3392.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M747.9,-3477.82C943.81,-3483.58 1291.64,-3488.17 1334,-3450 1382.66,-3406.16 1307.24,-3349.86 1354,-3304 1405.29,-3253.69 1497.04,-3260.46 1547.77,-3269.14"/>
<polygon fill="blue" stroke="blue" points="1547.18,-3272.59 1557.65,-3270.94 1548.44,-3265.7 1547.18,-3272.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M702.68,-3491C769.54,-3499.16 858.9,-3497.08 912,-3443 949.81,-3404.5 894.84,-3240.13 932,-3201 973.41,-3157.39 1049.19,-3160.12 1094.64,-3166.66"/>
<polygon fill="blue" stroke="blue" points="1094.26,-3170.14 1104.68,-3168.23 1095.34,-3163.22 1094.26,-3170.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node164"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="1326,-1008 940,-1008 940,-972 1326,-972 1326,-1008"/>
<text text-anchor="middle" x="1133" y="-986.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1321.76,-971.98C1326.02,-969.25 1330.11,-966.27 1334,-963 1356.49,-944.1 1331.35,-918.7 1354,-900 1406.79,-856.42 1491.1,-858.87 1541.66,-865.39"/>
<polygon fill="blue" stroke="blue" points="1541.21,-868.87 1551.6,-866.79 1542.18,-861.93 1541.21,-868.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1268.77,-971.97C1290.58,-969.01 1312.92,-965.94 1334,-963 1393.52,-954.7 1460.97,-944.97 1510.79,-937.72"/>
<polygon fill="blue" stroke="blue" points="1511.44,-941.16 1520.83,-936.25 1510.43,-934.23 1511.44,-941.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node165"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="1325,-1116 941,-1116 941,-1080 1325,-1080 1325,-1116"/>
<text text-anchor="middle" x="1133" y="-1094.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1145.1,-1116.23C1173.45,-1160.98 1253.45,-1276.18 1354,-1326 1414.24,-1355.85 1493.93,-1358.22 1541.94,-1356.28"/>
<polygon fill="blue" stroke="blue" points="1542.16,-1359.77 1551.98,-1355.79 1541.82,-1352.78 1542.16,-1359.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1150.06,-1116.17C1183.71,-1152.87 1265.83,-1235.45 1354,-1272 1418.26,-1298.64 1500.72,-1301.6 1547.43,-1300.73"/>
<polygon fill="blue" stroke="blue" points="1547.76,-1304.22 1557.66,-1300.46 1547.58,-1297.22 1547.76,-1304.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1141.92,-1116.22C1165.48,-1167.96 1240.63,-1316.2 1354,-1380 1415.24,-1414.46 1500.07,-1414.45 1547.73,-1410.98"/>
<polygon fill="blue" stroke="blue" points="1548.2,-1414.45 1557.88,-1410.14 1547.63,-1407.47 1548.2,-1414.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node166"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="1274.5,-1062 991.5,-1062 991.5,-1026 1274.5,-1026 1274.5,-1062"/>
<text text-anchor="middle" x="1133" y="-1040.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1274.72,-1038.78C1297.12,-1044.26 1318.11,-1054.2 1334,-1071 1373.05,-1112.3 1314.59,-1285.04 1354,-1326 1402.08,-1375.98 1489.8,-1370.86 1541.9,-1362.21"/>
<polygon fill="blue" stroke="blue" points="1542.59,-1365.64 1551.83,-1360.44 1541.37,-1358.75 1542.59,-1365.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1274.53,-1038.35C1297.1,-1043.84 1318.19,-1053.89 1334,-1071 1388.82,-1130.34 1298.67,-1375.14 1354,-1434 1403.08,-1486.21 1495.29,-1478.81 1546.8,-1469.5"/>
<polygon fill="blue" stroke="blue" points="1547.68,-1472.89 1556.84,-1467.56 1546.36,-1466.02 1547.68,-1472.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1274.68,-1039.11C1297.02,-1044.59 1318,-1054.43 1334,-1071 1365.18,-1103.29 1322.54,-1239.98 1354,-1272 1404.48,-1323.38 1496.95,-1316.07 1547.92,-1307.05"/>
<polygon fill="blue" stroke="blue" points="1548.65,-1310.47 1557.83,-1305.18 1547.36,-1303.59 1548.65,-1310.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1274.65,-1041.78C1296.46,-1047.11 1317.26,-1056.21 1334,-1071 1360.17,-1094.13 1331.16,-1120.57 1354,-1147 1402.42,-1203.03 1488.47,-1227.91 1540.48,-1238.27"/>
<polygon fill="blue" stroke="blue" points="1539.93,-1241.73 1550.4,-1240.15 1541.23,-1234.85 1539.93,-1241.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1274.65,-1038.53C1297.13,-1044.03 1318.17,-1054.03 1334,-1071 1380.94,-1121.32 1306.63,-1330.09 1354,-1380 1403.59,-1432.25 1496.41,-1424.59 1547.67,-1415.28"/>
<polygon fill="blue" stroke="blue" points="1548.5,-1418.69 1557.65,-1413.36 1547.17,-1411.82 1548.5,-1418.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1274.57,-1049.38C1297.06,-1043.9 1318.11,-1033.93 1334,-1017 1376.99,-971.19 1313.17,-782.74 1354,-735 1395.66,-686.29 1472.28,-677.32 1525.58,-677.71"/>
<polygon fill="blue" stroke="blue" points="1525.52,-681.21 1535.58,-677.89 1525.65,-674.21 1525.52,-681.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node167"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="1211,-954 1055,-954 1055,-918 1211,-918 1211,-954"/>
<text text-anchor="middle" x="1133" y="-932.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1169.56,-917.92C1212.22,-897.07 1286.47,-863.43 1354,-846 1420.45,-828.85 1500.55,-822.57 1546.55,-820.28"/>
<polygon fill="blue" stroke="blue" points="1546.82,-823.77 1556.65,-819.82 1546.5,-816.78 1546.82,-823.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1211.25,-922.48C1253.37,-915.33 1306.48,-906.67 1354,-900 1419.38,-890.82 1495.52,-882.31 1541.71,-877.38"/>
<polygon fill="blue" stroke="blue" points="1542.37,-880.83 1551.94,-876.3 1541.63,-873.87 1542.37,-880.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1154.36,-917.87C1191.21,-886.24 1272.69,-821.52 1354,-792 1415.84,-769.55 1492.59,-764.77 1539.93,-764.24"/>
<polygon fill="blue" stroke="blue" points="1540.16,-767.74 1550.14,-764.19 1540.12,-760.74 1540.16,-767.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1211.1,-934.46C1295.13,-932.78 1428.55,-930.11 1510.95,-928.46"/>
<polygon fill="blue" stroke="blue" points="1511.06,-931.96 1520.98,-928.26 1510.92,-924.96 1511.06,-931.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1148.06,-917.96C1180.05,-878.24 1262.61,-782.97 1354,-735 1408.2,-706.55 1477.45,-693.26 1525.74,-687.12"/>
<polygon fill="blue" stroke="blue" points="1526.21,-690.59 1535.72,-685.91 1525.37,-683.64 1526.21,-690.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node168"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="685,-52 543,-52 543,-16 685,-16 685,-52"/>
<text text-anchor="middle" x="614" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M685.29,-16.84C753.89,-4.76 855.87,-0.08 912,-61 954.56,-107.19 894.29,-2271.78 932,-2322 959.21,-2358.23 1007.52,-2373.38 1049.84,-2379.41"/>
<polygon fill="blue" stroke="blue" points="1049.53,-2382.9 1059.89,-2380.69 1050.41,-2375.95 1049.53,-2382.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M685.05,-17.84C752.7,-6.79 853.3,-3.1 912,-61 942.38,-90.97 902.28,-221.38 932,-252 957.21,-277.97 994.63,-287.38 1030.31,-289.36"/>
<polygon fill="blue" stroke="blue" points="1030.19,-292.86 1040.31,-289.73 1030.45,-285.86 1030.19,-292.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendFullToken]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M685.23,-29.83C746.98,-28.59 838.26,-32.77 912,-61 992.79,-91.93 1069.65,-161.49 1107.52,-199.32"/>
<polygon fill="blue" stroke="blue" points="1105.47,-202.24 1114.99,-206.89 1110.45,-197.32 1105.47,-202.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node169"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="715.5,-106 512.5,-106 512.5,-70 715.5,-70 715.5,-106"/>
<text text-anchor="middle" x="614" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M690.49,-69.95C758.95,-58.57 857.26,-55.61 912,-115 953.55,-160.08 895.18,-2272.98 932,-2322 959.21,-2358.23 1007.52,-2373.38 1049.84,-2379.41"/>
<polygon fill="blue" stroke="blue" points="1049.53,-2382.89 1059.89,-2380.68 1050.41,-2375.95 1049.53,-2382.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M701.3,-69.97C767.62,-61.54 856.93,-62.84 912,-115 956.68,-157.31 888.25,-208.72 932,-252 957.5,-277.23 994.6,-286.6 1029.94,-288.75"/>
<polygon fill="blue" stroke="blue" points="1030.2,-292.27 1040.34,-289.19 1030.49,-285.27 1030.2,-292.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node170"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="742.5,-160 485.5,-160 485.5,-124 742.5,-124 742.5,-160"/>
<text text-anchor="middle" x="614" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M742.67,-130.33C803.35,-132.29 871.34,-146.9 912,-195 950.15,-240.12 896.51,-2274.76 932,-2322 959.22,-2358.22 1007.53,-2373.38 1049.85,-2379.4"/>
<polygon fill="blue" stroke="blue" points="1049.54,-2382.89 1059.9,-2380.68 1050.42,-2375.95 1049.54,-2382.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M742.8,-136.89C800.41,-141.06 865.73,-155.63 912,-195 932.45,-212.4 911.19,-235.04 932,-252 959.25,-274.21 995.87,-283.16 1030.32,-285.83"/>
<polygon fill="blue" stroke="blue" points="1030.26,-289.33 1040.45,-286.44 1030.68,-282.34 1030.26,-289.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node171"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="733.5,-2714 494.5,-2714 494.5,-2678 733.5,-2678 733.5,-2714"/>
<text text-anchor="middle" x="614" y="-2692.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M704.5,-2714.02C771,-2721.75 859.02,-2719.11 912,-2666 944.01,-2633.91 900.53,-2495.62 932,-2463 961.15,-2432.78 1006.84,-2424.94 1047.19,-2425.14"/>
<polygon fill="blue" stroke="blue" points="1047.25,-2428.64 1057.33,-2425.36 1047.4,-2421.65 1047.25,-2428.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M702.4,-2714.03C769.34,-2722.28 858.94,-2720.3 912,-2666 952.04,-2625.03 892.66,-2450.63 932,-2409 961.46,-2377.83 1008.47,-2370.29 1049.52,-2370.92"/>
<polygon fill="blue" stroke="blue" points="1049.43,-2374.42 1059.53,-2371.23 1049.65,-2367.42 1049.43,-2374.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M733.64,-2713.2C793.41,-2715.22 863.33,-2706.56 912,-2666 936.53,-2645.56 909.16,-2619.32 932,-2597 963.03,-2566.68 1009.29,-2553.17 1049.51,-2547.36"/>
<polygon fill="blue" stroke="blue" points="1050.12,-2550.81 1059.59,-2546.05 1049.22,-2543.87 1050.12,-2550.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.82,-2714.01C774.42,-2720.77 859.4,-2716.91 912,-2666 960.01,-2619.53 884.77,-2564.26 932,-2517 961.57,-2487.41 1007.05,-2479.55 1047.18,-2479.58"/>
<polygon fill="blue" stroke="blue" points="1047.19,-2483.08 1057.25,-2479.75 1047.31,-2476.08 1047.19,-2483.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M700.3,-2714.01C767.65,-2722.76 858.84,-2721.47 912,-2666 964.98,-2610.71 883.56,-2381.3 932,-2322 961.45,-2285.94 1012.35,-2272.81 1055.42,-2268.63"/>
<polygon fill="blue" stroke="blue" points="1055.94,-2272.1 1065.62,-2267.79 1055.36,-2265.13 1055.94,-2272.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M698.28,-2714.03C766.06,-2723.32 858.9,-2722.77 912,-2666 956.88,-2618.01 887.93,-2123.73 932,-2075 946.67,-2058.77 966.09,-2048.86 987.05,-2043.14"/>
<polygon fill="blue" stroke="blue" points="987.88,-2046.54 996.79,-2040.8 986.24,-2039.73 987.88,-2046.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M697.98,-2714.02C765.82,-2723.38 858.89,-2722.94 912,-2666 960.9,-2613.56 883.98,-2074.25 932,-2021 939.29,-2012.92 947.76,-2006.4 957.01,-2001.18"/>
<polygon fill="blue" stroke="blue" points="958.77,-2004.21 966.1,-1996.57 955.6,-1997.97 958.77,-2004.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M698.57,-2714.03C766.29,-2723.24 858.89,-2722.59 912,-2666 952.86,-2622.46 891.88,-2173.22 932,-2129 934.04,-2126.75 936.17,-2124.62 938.39,-2122.61"/>
<polygon fill="blue" stroke="blue" points="940.7,-2125.24 946.23,-2116.2 936.27,-2119.82 940.7,-2125.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M697.68,-2714.01C765.56,-2723.43 858.87,-2723.1 912,-2666 964.93,-2609.12 880.03,-2024.76 932,-1967 945.02,-1952.53 961.81,-1943.06 980.12,-1937.12"/>
<polygon fill="blue" stroke="blue" points="981.18,-1940.46 989.82,-1934.32 979.24,-1933.73 981.18,-1940.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().</title>
<g id="a_node172"><a xlink:title="fn test_lizard() { &#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(&amp;zkgroup::common::constants::TEST_ARRAY_16); &#160;&#160;&#160;&#160;let data_out = p.lizard_decode::&lt;Sha256&gt;(); &#160;&#160;&#160;&#160;assert_hex_eq!(data_out.unwrap()...">
<polygon fill="white" stroke="black" points="657.5,-2768 570.5,-2768 570.5,-2732 657.5,-2732 657.5,-2768"/>
<text text-anchor="middle" x="614" y="-2746.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_encode().</title>
<path fill="none" stroke="blue" d="M657.64,-2761.31C722.73,-2775.7 846.25,-2791.22 912,-2723 969.3,-2663.55 874.22,-2410.98 932,-2352 994.69,-2288.01 1271.79,-2386.46 1334,-2322 1373.54,-2281.04 1312.96,-1849.46 1354,-1810 1502,-1667.67 1614.37,-1771.17 1816,-1810 1825.4,-1811.81 1826.65,-1815.93 1836,-1818 2088.51,-1873.87 2159.73,-1823.68 2417,-1850 2448.49,-1853.22 2483.27,-1858.26 2512.34,-1862.89"/>
<polygon fill="blue" stroke="blue" points="2511.93,-1866.37 2522.36,-1864.51 2513.05,-1859.46 2511.93,-1866.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node173"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="711,-2822 517,-2822 517,-2786 711,-2786 711,-2822"/>
<text text-anchor="middle" x="614" y="-2800.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M711.03,-2801.21C826.73,-2797.86 1015.46,-2792.38 1094.9,-2790.08"/>
<polygon fill="blue" stroke="blue" points="1095.03,-2793.57 1104.92,-2789.79 1094.83,-2786.58 1095.03,-2793.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M711.35,-2821.09C775.18,-2826.74 856.98,-2822.38 912,-2777 936.63,-2756.68 907.82,-2728.85 932,-2708 975.36,-2670.62 1044.85,-2669.96 1089.45,-2674.37"/>
<polygon fill="blue" stroke="blue" points="1089.34,-2677.88 1099.67,-2675.51 1090.12,-2670.92 1089.34,-2677.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.11,-2822.04C769.09,-2830.05 857.08,-2828.18 912,-2777 952.52,-2739.24 892.31,-2692.63 932,-2654 964.77,-2622.1 1016.12,-2615.71 1058.59,-2617.11"/>
<polygon fill="blue" stroke="blue" points="1058.46,-2620.61 1068.61,-2617.59 1058.79,-2613.62 1058.46,-2620.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]encrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M693.51,-2822.05C761.36,-2832.53 856.92,-2834.12 912,-2777 968.85,-2718.05 876.45,-2469.18 932,-2409 961.2,-2377.37 1008.44,-2369.88 1049.68,-2370.65"/>
<polygon fill="blue" stroke="blue" points="1049.63,-2374.15 1059.75,-2371 1049.87,-2367.15 1049.63,-2374.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M692.09,-2822.01C760.19,-2832.87 856.97,-2835.06 912,-2777 953.15,-2733.59 897.86,-2288.12 932,-2239 952.98,-2208.81 987.12,-2189.57 1021.31,-2177.32"/>
<polygon fill="blue" stroke="blue" points="1022.6,-2180.58 1030.94,-2174.05 1020.35,-2173.95 1022.6,-2180.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node174"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="649.5,-2386 578.5,-2386 578.5,-2350 649.5,-2350 649.5,-2386"/>
<text text-anchor="middle" x="614" y="-2364.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.55,-2377.08C712.1,-2391.18 843.91,-2409.85 912,-2338 944.52,-2303.69 900.06,-1947.85 932,-1913 956.94,-1885.79 995.22,-1876.4 1031.64,-1874.77"/>
<polygon fill="blue" stroke="blue" points="1031.94,-1878.27 1041.85,-1874.51 1031.76,-1871.27 1031.94,-1878.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node175"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="700,-2440 528,-2440 528,-2404 700,-2404 700,-2440"/>
<text text-anchor="middle" x="614" y="-2418.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M699.52,-2440.03C766.18,-2448.89 856.83,-2448.18 912,-2395 962.33,-2346.49 881.28,-2287.1 932,-2239 997,-2177.36 1271.72,-2273.39 1334,-2209 1371.57,-2170.15 1321.02,-1765.82 1354,-1723 1377.64,-1692.3 1414.33,-1674.53 1451.51,-1664.34"/>
<polygon fill="blue" stroke="blue" points="1452.66,-1667.66 1461.48,-1661.79 1450.92,-1660.88 1452.66,-1667.66"/>
</g>
</g>
</svg>
