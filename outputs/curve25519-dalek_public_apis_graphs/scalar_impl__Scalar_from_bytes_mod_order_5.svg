<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="3052pt" height="3286pt"
 viewBox="0.00 0.00 3052.00 3286.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 3282)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-3282 3048,-3282 3048,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="2845,-1048 2845,-1123 3036,-1123 3036,-1048 2845,-1048"/>
<text text-anchor="middle" x="2940.5" y="-1107.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightblue" stroke="lightblue" points="365,-1729 365,-2290 655,-2290 655,-1729 365,-1729"/>
<text text-anchor="middle" x="510" y="-2274.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="1087,-311 1087,-656 1633,-656 1633,-311 1087,-311"/>
<text text-anchor="middle" x="1360" y="-640.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="922,-1792 922,-1867 1412.5,-1867 1412.5,-1792 922,-1792"/>
<text text-anchor="middle" x="1167.25" y="-1851.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="1762,-1410 1762,-1485 1866,-1485 1866,-1410 1762,-1410"/>
<text text-anchor="middle" x="1814" y="-1469.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="1724,-1738 1724,-1907 2579,-1907 2579,-1738 1724,-1738"/>
<text text-anchor="middle" x="2151.5" y="-1891.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="2313.5,-1915 2313.5,-2044 2795,-2044 2795,-1915 2313.5,-1915"/>
<text text-anchor="middle" x="2554.25" y="-2028.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="1265,-228 1265,-303 1455,-303 1455,-228 1265,-228"/>
<text text-anchor="middle" x="1360" y="-287.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="1311,-145 1311,-220 1409,-220 1409,-145 1311,-145"/>
<text text-anchor="middle" x="1360" y="-204.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="444,-2298 444,-2427 577,-2427 577,-2298 444,-2298"/>
<text text-anchor="middle" x="510.5" y="-2411.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-3195 8,-3270 605,-3270 605,-3195 8,-3195"/>
<text text-anchor="middle" x="306.5" y="-3254.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="901,-2381 901,-2510 1034,-2510 1034,-2381 901,-2381"/>
<text text-anchor="middle" x="967.5" y="-2494.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="388,-1023 388,-1152 1067,-1152 1067,-1023 388,-1023"/>
<text text-anchor="middle" x="727.5" y="-1136.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="1181,-2134 1181,-2317 1849,-2317 1849,-2134 1181,-2134"/>
<text text-anchor="middle" x="1515" y="-2301.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="868.5,-1493 868.5,-1730 1857.5,-1730 1857.5,-1493 868.5,-1493"/>
<text text-anchor="middle" x="1363" y="-1714.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="870.5,-2518 870.5,-2593 1064.5,-2593 1064.5,-2518 870.5,-2518"/>
<text text-anchor="middle" x="967.5" y="-2577.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="1751.5,-1964 1751.5,-2039 1876.5,-2039 1876.5,-1964 1751.5,-1964"/>
<text text-anchor="middle" x="1814" y="-2023.8" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="270.5,-2435 270.5,-2618 749.5,-2618 749.5,-2435 270.5,-2435"/>
<text text-anchor="middle" x="510" y="-2602.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="255.5,-1160 255.5,-1721 764.5,-1721 764.5,-1160 255.5,-1160"/>
<text text-anchor="middle" x="510" y="-1705.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="172,-2626 172,-3187 848,-3187 848,-2626 172,-2626"/>
<text text-anchor="middle" x="510" y="-3171.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="872.5,-1875 872.5,-2058 1395,-2058 1395,-1875 872.5,-1875"/>
<text text-anchor="middle" x="1133.75" y="-2042.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1314.5,-938 1314.5,-1013 1894,-1013 1894,-938 1314.5,-938"/>
<text text-anchor="middle" x="1604.25" y="-997.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1708,-1021 1708,-1258 2525.5,-1258 2525.5,-1021 1708,-1021"/>
<text text-anchor="middle" x="2116.75" y="-1242.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="909,-855 909,-930 1027,-930 1027,-855 909,-855"/>
<text text-anchor="middle" x="968" y="-914.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1207,-855 1207,-930 1513,-930 1513,-855 1207,-855"/>
<text text-anchor="middle" x="1360" y="-914.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="1655,-678 1655,-915 1973,-915 1973,-678 1655,-678"/>
<text text-anchor="middle" x="1814" y="-899.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1653,-130 1653,-313 1975,-313 1975,-130 1653,-130"/>
<text text-anchor="middle" x="1814" y="-297.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="2599,-542 2599,-671 2825,-671 2825,-542 2599,-542"/>
<text text-anchor="middle" x="2712" y="-655.8" font-family="Helvetica,sans-Serif" font-size="14.00">simple_types.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="2254,-199 2254,-328 2572,-328 2572,-199 2254,-199"/>
<text text-anchor="middle" x="2413" y="-312.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="2072,-116 2072,-245 2150,-245 2150,-116 2072,-116"/>
<text text-anchor="middle" x="2111" y="-229.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="2003,-253 2003,-328 2219,-328 2219,-253 2003,-253"/>
<text text-anchor="middle" x="2111" y="-312.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="1223.5,-664 1223.5,-847 1496.5,-847 1496.5,-664 1223.5,-664"/>
<text text-anchor="middle" x="1360" y="-831.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="1266,-8 1266,-137 1454,-137 1454,-8 1266,-8"/>
<text text-anchor="middle" x="1360" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order(bytes: [u8; 32]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Temporarily allow s_unreduced.bytes &gt; 2^255 ... &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s_unreduced = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Then reduce mod the grou...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="3028,-1092 2853,-1092 2853,-1056 3028,-1056 3028,-1092"/>
<text text-anchor="middle" x="2940.5" y="-1070.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node2"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="583.5,-2205 436.5,-2205 436.5,-2169 583.5,-2169 583.5,-2205"/>
<text text-anchor="middle" x="510" y="-2183.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2175,-1822 2047,-1822 2047,-1786 2175,-1786 2175,-1822"/>
<text text-anchor="middle" x="2111" y="-1800.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M583.55,-2176.46C655.26,-2169.64 765.87,-2169.06 848,-2214 861.22,-2221.23 856.38,-2232.05 868.5,-2241 951.68,-2302.44 985.17,-2302.94 1087,-2321 1475.61,-2389.9 1688.08,-2591.99 1975,-2321 2014.65,-2283.56 1968.27,-1873.05 2003,-1831 2011.79,-1820.36 2024.1,-1813.57 2037.26,-1809.31"/>
<polygon fill="blue" stroke="blue" points="2038.24,-1812.67 2046.95,-1806.63 2036.38,-1805.92 2038.24,-1812.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node3"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="595,-1881 425,-1881 425,-1845 595,-1845 595,-1881"/>
<text text-anchor="middle" x="510" y="-1859.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="994.5,-1591 940.5,-1591 940.5,-1555 994.5,-1555 994.5,-1591"/>
<text text-anchor="middle" x="967.5" y="-1569.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M595.05,-1868.11C683.18,-1871.48 813.59,-1870.18 848,-1836 885.35,-1798.9 834.82,-1640.46 868.5,-1600 883.35,-1582.17 908.79,-1575.53 930.04,-1573.29"/>
<polygon fill="blue" stroke="blue" points="930.36,-1576.78 940.06,-1572.52 929.82,-1569.8 930.36,-1576.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node4"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="597,-1935 423,-1935 423,-1899 597,-1899 597,-1935"/>
<text text-anchor="middle" x="510" y="-1913.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="994.5,-1645 940.5,-1645 940.5,-1609 994.5,-1609 994.5,-1645"/>
<text text-anchor="middle" x="967.5" y="-1623.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M597.06,-1922.19C685.15,-1925.46 813.85,-1923.92 848,-1890 885.35,-1852.9 834.82,-1694.46 868.5,-1654 883.35,-1636.17 908.79,-1629.53 930.04,-1627.29"/>
<polygon fill="blue" stroke="blue" points="930.36,-1630.78 940.06,-1626.52 929.82,-1623.8 930.36,-1630.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node5"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="647,-2259 373,-2259 373,-2223 647,-2223 647,-2259"/>
<text text-anchor="middle" x="510" y="-2237.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node52"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="1056.5,-2562 878.5,-2562 878.5,-2526 1056.5,-2526 1056.5,-2562"/>
<text text-anchor="middle" x="967.5" y="-2540.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.3,-2226.04C717.1,-2226.35 797.73,-2240.46 848,-2294 881.61,-2329.8 837.5,-2475.92 868.5,-2514 870.01,-2515.85 871.62,-2517.59 873.34,-2519.22"/>
<polygon fill="blue" stroke="blue" points="871.42,-2522.18 881.4,-2525.73 875.82,-2516.73 871.42,-2522.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node6"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="609.5,-1989 410.5,-1989 410.5,-1953 609.5,-1953 609.5,-1989"/>
<text text-anchor="middle" x="510" y="-1967.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="1395.5,-1655 1324.5,-1655 1324.5,-1619 1395.5,-1619 1395.5,-1655"/>
<text text-anchor="middle" x="1360" y="-1633.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M609.9,-1976.3C696.94,-1978.67 814.82,-1975.54 848,-1944 898.69,-1895.82 823.37,-1841.42 868.5,-1788 898.18,-1752.86 1199.18,-1676.15 1314.43,-1647.81"/>
<polygon fill="blue" stroke="blue" points="1315.47,-1651.15 1324.35,-1645.37 1313.8,-1644.36 1315.47,-1651.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node7"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="642,-2097 378,-2097 378,-2061 642,-2061 642,-2097"/>
<text text-anchor="middle" x="510" y="-2075.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="1424,-2178 1296,-2178 1296,-2142 1424,-2142 1424,-2178"/>
<text text-anchor="middle" x="1360" y="-2156.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M642.3,-2088.74C704.66,-2093.57 780.21,-2099.7 848,-2106 1003.92,-2120.48 1186.28,-2140.49 1285.5,-2151.64"/>
<polygon fill="blue" stroke="blue" points="1285.39,-2155.15 1295.72,-2152.79 1286.17,-2148.2 1285.39,-2155.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node8"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="647,-1827 373,-1827 373,-1791 647,-1791 647,-1827"/>
<text text-anchor="middle" x="510" y="-1805.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="1054,-1121 881,-1121 881,-1085 1054,-1085 1054,-1121"/>
<text text-anchor="middle" x="967.5" y="-1099.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.01,-1815.48C727.93,-1816.12 820.13,-1810.16 848,-1782 870.96,-1758.81 863.33,-1521.22 868.5,-1489 890.41,-1352.56 937.85,-1193.87 957.59,-1130.85"/>
<polygon fill="blue" stroke="blue" points="960.96,-1131.83 960.62,-1121.24 954.28,-1129.72 960.96,-1131.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node9"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="583,-2043 437,-2043 437,-2007 583,-2007 583,-2043"/>
<text text-anchor="middle" x="510" y="-2021.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="2186,-1876 2036,-1876 2036,-1840 2186,-1840 2186,-1876"/>
<text text-anchor="middle" x="2111" y="-1854.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M583.01,-2023.09C652.16,-2023.03 758.97,-2027.66 848,-2052 857.78,-2054.67 858.62,-2059.72 868.5,-2062 1199.57,-2138.44 1293.35,-2071.43 1633,-2062 1785.18,-2057.78 1841.25,-2115.71 1975,-2043 2039.19,-2008.1 2080.79,-1927.98 2099.15,-1885.54"/>
<polygon fill="blue" stroke="blue" points="2102.47,-1886.68 2103.12,-1876.1 2096.02,-1883.96 2102.47,-1886.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node10"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="638.5,-1773 381.5,-1773 381.5,-1737 638.5,-1737 638.5,-1773"/>
<text text-anchor="middle" x="510" y="-1751.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="1059,-1067 876,-1067 876,-1031 1059,-1031 1059,-1067"/>
<text text-anchor="middle" x="967.5" y="-1045.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M638.93,-1760.52C721.98,-1761.04 819.82,-1754.84 848,-1725 897.54,-1672.55 823.88,-1132.7 868.5,-1076 868.99,-1075.38 869.5,-1074.77 870.01,-1074.17"/>
<polygon fill="blue" stroke="blue" points="872.56,-1076.57 877.38,-1067.13 867.73,-1071.51 872.56,-1076.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node11"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="604,-2151 416,-2151 416,-2115 604,-2115 604,-2151"/>
<text text-anchor="middle" x="510" y="-2129.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1841,-2286 1787,-2286 1787,-2250 1841,-2250 1841,-2286"/>
<text text-anchor="middle" x="1814" y="-2264.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.19,-2129.78C673,-2129.94 768.16,-2135.56 848,-2160 964.65,-2195.71 969.01,-2263.98 1087,-2295 1321.69,-2356.7 1391.01,-2313.05 1633,-2295 1683.19,-2291.26 1740.61,-2281.72 1776.83,-2275.05"/>
<polygon fill="blue" stroke="blue" points="1777.72,-2278.44 1786.91,-2273.16 1776.43,-2271.56 1777.72,-2278.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node12"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="1528,-355 1192,-355 1192,-319 1528,-319 1528,-355"/>
<text text-anchor="middle" x="1360" y="-333.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="1911.5,-174 1716.5,-174 1716.5,-138 1911.5,-138 1911.5,-174"/>
<text text-anchor="middle" x="1814" y="-152.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1528.04,-351.47C1566.72,-346.58 1604.77,-333.85 1633,-307 1673.45,-268.53 1613.67,-222.62 1653,-183 1667.41,-168.48 1686.52,-160.03 1706.51,-155.37"/>
<polygon fill="blue" stroke="blue" points="1707.26,-158.78 1716.37,-153.37 1705.87,-151.92 1707.26,-158.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node13"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1621,-517 1099,-517 1099,-481 1621,-481 1621,-517"/>
<text text-anchor="middle" x="1360" y="-495.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="1907.5,-722 1720.5,-722 1720.5,-686 1907.5,-686 1907.5,-722"/>
<text text-anchor="middle" x="1814" y="-700.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.49,-517.06C1618.83,-519.75 1626.02,-522.72 1633,-526 1706,-560.31 1766.85,-636.91 1795.44,-677.53"/>
<polygon fill="blue" stroke="blue" points="1792.64,-679.63 1801.21,-685.86 1798.4,-675.65 1792.64,-679.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node14"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="1558,-625 1162,-625 1162,-589 1558,-589 1558,-625"/>
<text text-anchor="middle" x="1360" y="-603.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="1841,-830 1787,-830 1787,-794 1841,-794 1841,-830"/>
<text text-anchor="middle" x="1814" y="-808.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1558.18,-615.57C1586.27,-624.73 1612.52,-638.81 1633,-660 1672.11,-700.45 1613.39,-745.05 1653,-785 1684.95,-817.23 1740.05,-819.59 1776.51,-816.91"/>
<polygon fill="blue" stroke="blue" points="1777.08,-820.37 1786.72,-815.99 1776.45,-813.4 1777.08,-820.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node15"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="1617,-571 1103,-571 1103,-535 1617,-535 1617,-571"/>
<text text-anchor="middle" x="1360" y="-549.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="1906.5,-776 1721.5,-776 1721.5,-740 1906.5,-740 1906.5,-776"/>
<text text-anchor="middle" x="1814" y="-754.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1461.93,-534.98C1519.49,-530.83 1588.76,-537.18 1633,-580 1681.65,-627.08 1605.99,-682.29 1653,-731 1668.44,-747 1689.56,-755.7 1711.4,-760.08"/>
<polygon fill="blue" stroke="blue" points="1711.02,-763.56 1721.46,-761.8 1712.2,-756.66 1711.02,-763.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node16"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1565,-409 1155,-409 1155,-373 1565,-373 1565,-409"/>
<text text-anchor="middle" x="1360" y="-387.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="1953,-228 1675,-228 1675,-192 1953,-192 1953,-228"/>
<text text-anchor="middle" x="1814" y="-206.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1565.29,-400.44C1590.43,-393.49 1613.94,-382 1633,-364 1674.54,-324.77 1612.82,-277.63 1653,-237 1657.02,-232.93 1661.42,-229.34 1666.09,-226.17"/>
<polygon fill="blue" stroke="blue" points="1668.05,-229.08 1674.8,-220.92 1664.43,-223.09 1668.05,-229.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().</title>
<g id="a_node17"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_serial: &amp;[u8; RECEIPT_SERIAL...">
<polygon fill="white" stroke="black" points="1625,-463 1095,-463 1095,-427 1625,-427 1625,-463"/>
<text text-anchor="middle" x="1360" y="-441.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="1967,-282 1661,-282 1661,-246 1967,-246 1967,-282"/>
<text text-anchor="middle" x="1814" y="-260.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1609.13,-426.96C1617.27,-424.28 1625.25,-421.31 1633,-418 1700.24,-389.31 1760.88,-326.22 1791.67,-290.33"/>
<polygon fill="blue" stroke="blue" points="1794.72,-292.15 1798.49,-282.25 1789.37,-287.63 1794.72,-292.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node18"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1005,-1836 930,-1836 930,-1800 1005,-1800 1005,-1836"/>
<text text-anchor="middle" x="967.5" y="-1814.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node19"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="1404.5,-1836 1315.5,-1836 1315.5,-1800 1404.5,-1800 1404.5,-1836"/>
<text text-anchor="middle" x="1360" y="-1814.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1005.24,-1818C1074.38,-1818 1224.12,-1818 1304.83,-1818"/>
<polygon fill="blue" stroke="blue" points="1305.28,-1821.5 1315.28,-1818 1305.28,-1814.5 1305.28,-1821.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1404.56,-1827.95C1506.15,-1849.42 1766.01,-1894.34 1975,-1845 1988.54,-1841.8 1989.96,-1835.84 2003,-1831 2013.77,-1827 2025.36,-1823.4 2036.8,-1820.22"/>
<polygon fill="blue" stroke="blue" points="2038.03,-1823.51 2046.78,-1817.54 2036.22,-1816.75 2038.03,-1823.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="1889,-1836 1739,-1836 1739,-1800 1889,-1800 1889,-1836"/>
<text text-anchor="middle" x="1814" y="-1814.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1404.75,-1818C1479.35,-1818 1632.41,-1818 1728.46,-1818"/>
<polygon fill="blue" stroke="blue" points="1728.72,-1821.5 1738.72,-1818 1728.72,-1814.5 1728.72,-1821.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node20"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="1841,-1454 1787,-1454 1787,-1418 1841,-1418 1841,-1454"/>
<text text-anchor="middle" x="1814" y="-1432.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1841.29,-1438.12C1876.02,-1442.24 1937.18,-1454.26 1975,-1489 2062.02,-1568.92 2095.27,-1714.39 2105.8,-1775.63"/>
<polygon fill="blue" stroke="blue" points="2102.39,-1776.41 2107.46,-1785.71 2109.29,-1775.28 2102.39,-1776.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1841.24,-1436.34C1877.66,-1438.37 1942.72,-1447.94 1975,-1489 2022.13,-1548.94 1953.72,-1772.81 2003,-1831 2009.34,-1838.49 2017.43,-1844.06 2026.3,-1848.18"/>
<polygon fill="blue" stroke="blue" points="2025.22,-1851.52 2035.8,-1851.98 2027.82,-1845.02 2025.22,-1851.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="2559.5,-1802 2266.5,-1802 2266.5,-1766 2559.5,-1766 2559.5,-1802"/>
<text text-anchor="middle" x="2413" y="-1780.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2175.26,-1799.78C2199.17,-1798.19 2227.56,-1796.3 2256.24,-1794.38"/>
<polygon fill="blue" stroke="blue" points="2256.64,-1797.87 2266.38,-1793.71 2256.17,-1790.88 2256.64,-1797.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="1896,-1782 1732,-1782 1732,-1746 1896,-1746 1896,-1782"/>
<text text-anchor="middle" x="1814" y="-1760.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1896,-1774.98C1940.06,-1780.96 1994.13,-1788.29 2036.89,-1794.09"/>
<polygon fill="blue" stroke="blue" points="2036.57,-1797.58 2046.95,-1795.45 2037.51,-1790.64 2036.57,-1797.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1896.35,-1765.36C1923.04,-1768.91 1951.78,-1776.33 1975,-1791 1993.34,-1802.59 1985.13,-1818.68 2003,-1831 2010.16,-1835.94 2018.15,-1839.97 2026.45,-1843.27"/>
<polygon fill="blue" stroke="blue" points="2025.32,-1846.59 2035.92,-1846.69 2027.7,-1840 2025.32,-1846.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="2571,-1866 2255,-1866 2255,-1830 2571,-1830 2571,-1866"/>
<text text-anchor="middle" x="2413" y="-1844.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1896.19,-1763.49C2005.65,-1763.27 2190.22,-1764.78 2219,-1777 2238.96,-1785.48 2234.97,-1800.59 2254,-1811 2265.42,-1817.25 2277.87,-1822.45 2290.6,-1826.77"/>
<polygon fill="blue" stroke="blue" points="2289.79,-1830.18 2300.38,-1829.91 2291.93,-1823.52 2289.79,-1830.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1896.43,-1762.94C1929.5,-1762.57 1968.07,-1762.19 2003,-1762 2099,-1761.49 2123.15,-1756.55 2219,-1762 2232.41,-1762.76 2246.32,-1763.82 2260.25,-1765.06"/>
<polygon fill="blue" stroke="blue" points="2260.11,-1768.56 2270.39,-1766 2260.75,-1761.59 2260.11,-1768.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1889.06,-1828.04C1930.7,-1833.69 1982.83,-1840.76 2026,-1846.61"/>
<polygon fill="blue" stroke="blue" points="2025.53,-1850.08 2035.91,-1847.95 2026.47,-1843.14 2025.53,-1850.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.16,-1855.53C2204.2,-1854.93 2224.23,-1854.26 2244.69,-1853.58"/>
<polygon fill="blue" stroke="blue" points="2244.89,-1857.07 2254.77,-1853.24 2244.66,-1850.08 2244.89,-1857.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="2787,-2013 2637,-2013 2637,-1977 2787,-1977 2787,-2013"/>
<text text-anchor="middle" x="2712" y="-1991.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2501.88,-1866.05C2529.54,-1875.48 2558.26,-1889.68 2579,-1911 2597.72,-1930.24 2579.08,-1950 2599,-1968 2607.12,-1975.34 2616.89,-1980.78 2627.23,-1984.79"/>
<polygon fill="blue" stroke="blue" points="2626.27,-1988.16 2636.86,-1988.08 2628.53,-1981.53 2626.27,-1988.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="2776,-1959 2648,-1959 2648,-1923 2776,-1923 2776,-1959"/>
<text text-anchor="middle" x="2712" y="-1937.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2530.31,-1802.07C2547.16,-1806.96 2563.89,-1813.15 2579,-1821 2624.27,-1844.52 2665.94,-1887.46 2689.9,-1915.09"/>
<polygon fill="blue" stroke="blue" points="2687.31,-1917.45 2696.46,-1922.79 2692.64,-1912.91 2687.31,-1917.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M2717.73,-1922.89C2746.43,-1813.03 2897.14,-1236.14 2932.21,-1101.92"/>
<polygon fill="blue" stroke="blue" points="2935.65,-1102.57 2934.8,-1092.01 2928.88,-1100.8 2935.65,-1102.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M2787.07,-1990.26C2801.41,-1986.02 2815.05,-1979.1 2825,-1968 2943.09,-1836.26 2941.9,-1239.73 2940.01,-1102.3"/>
<polygon fill="blue" stroke="blue" points="2943.51,-1102.11 2939.86,-1092.16 2936.51,-1102.21 2943.51,-1102.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="2470.5,-1959 2355.5,-1959 2355.5,-1923 2470.5,-1923 2470.5,-1959"/>
<text text-anchor="middle" x="2413" y="-1937.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2470.56,-1941C2518.06,-1941 2586.23,-1941 2637.87,-1941"/>
<polygon fill="blue" stroke="blue" points="2637.96,-1944.5 2647.96,-1941 2637.96,-1937.5 2637.96,-1944.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2504.5,-2013 2321.5,-2013 2321.5,-1977 2504.5,-1977 2504.5,-2013"/>
<text text-anchor="middle" x="2413" y="-1991.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2504.89,-1980.79C2529.01,-1976.84 2555.02,-1972.41 2579,-1968 2598.2,-1964.47 2618.91,-1960.37 2638.1,-1956.45"/>
<polygon fill="blue" stroke="blue" points="2638.89,-1959.86 2647.99,-1954.42 2637.49,-1953 2638.89,-1959.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2504.72,-1995C2543.56,-1995 2588.64,-1995 2626.74,-1995"/>
<polygon fill="blue" stroke="blue" points="2626.77,-1998.5 2636.77,-1995 2626.77,-1991.5 2626.77,-1998.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="1447,-272 1273,-272 1273,-236 1447,-236 1447,-272"/>
<text text-anchor="middle" x="1360" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1447.24,-264.82C1504.81,-267.49 1579.49,-261.67 1633,-224 1649.58,-212.33 1636.76,-195.14 1653,-183 1668.47,-171.44 1687.12,-164.13 1706.15,-159.63"/>
<polygon fill="blue" stroke="blue" points="1707.06,-163.01 1716.12,-157.52 1705.61,-156.16 1707.06,-163.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1447.08,-255.9C1504.58,-257.18 1581.99,-258.89 1650.8,-260.41"/>
<polygon fill="blue" stroke="blue" points="1650.81,-263.91 1660.89,-260.63 1650.97,-256.91 1650.81,-263.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="1391,-189 1329,-189 1329,-153 1391,-153 1391,-189"/>
<text text-anchor="middle" x="1360" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.01,-170C1454.07,-167.91 1603.03,-162.97 1705.95,-159.55"/>
<polygon fill="blue" stroke="blue" points="1706.2,-163.05 1716.08,-159.22 1705.96,-156.05 1706.2,-163.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1391.04,-173.09C1442.34,-177.47 1549.38,-190.17 1633,-224 1642.83,-227.98 1643.12,-233.15 1653,-237 1658.55,-239.16 1664.27,-241.15 1670.1,-242.98"/>
<polygon fill="blue" stroke="blue" points="1669.42,-246.43 1680.01,-245.92 1671.41,-239.72 1669.42,-246.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node33"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="537,-2396 483,-2396 483,-2360 537,-2360 537,-2396"/>
<text text-anchor="middle" x="510" y="-2374.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.33,-2385.99C601.33,-2403.6 765.79,-2437.65 848,-2351 905.45,-2290.44 817.02,-1665.71 868.5,-1600 882.9,-1581.62 908.61,-1575.02 930.08,-1572.94"/>
<polygon fill="blue" stroke="blue" points="930.47,-1576.43 940.21,-1572.25 929.99,-1569.44 930.47,-1576.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.32,-2385.98C601.29,-2403.57 765.7,-2437.57 848,-2351 901.38,-2294.85 820.65,-1714.94 868.5,-1654 882.92,-1635.63 908.63,-1629.04 930.09,-1626.96"/>
<polygon fill="blue" stroke="blue" points="930.48,-1630.44 940.22,-1626.26 930,-1623.45 930.48,-1630.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.42,-2373.35C600.2,-2363.95 759.62,-2349.93 848,-2431 876,-2456.69 842.38,-2486.4 868.5,-2514 870.56,-2516.18 872.78,-2518.2 875.12,-2520.08"/>
<polygon fill="blue" stroke="blue" points="873.32,-2523.09 883.52,-2525.92 877.31,-2517.34 873.32,-2523.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node77"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="1054.5,-1919 880.5,-1919 880.5,-1883 1054.5,-1883 1054.5,-1919"/>
<text text-anchor="middle" x="967.5" y="-1897.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.22,-2385.88C600.96,-2403.24 764.88,-2436.78 848,-2351 880.74,-2317.21 839.09,-1964.73 868.5,-1928 869.78,-1926.4 871.15,-1924.89 872.59,-1923.46"/>
<polygon fill="blue" stroke="blue" points="874.91,-1926.08 880.39,-1917.01 870.45,-1920.69 874.91,-1926.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node34"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="537,-2342 483,-2342 483,-2306 537,-2306 537,-2342"/>
<text text-anchor="middle" x="510" y="-2320.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.16,-2325.89C608.87,-2330.44 806,-2338.56 848,-2294 900.91,-2237.86 820.85,-1660.67 868.5,-1600 882.93,-1581.63 908.63,-1575.04 930.09,-1572.96"/>
<polygon fill="blue" stroke="blue" points="930.48,-1576.44 940.22,-1572.26 930,-1569.45 930.48,-1576.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.16,-2325.88C608.85,-2330.42 805.95,-2338.51 848,-2294 896.86,-2242.28 824.49,-1709.9 868.5,-1654 882.95,-1635.65 908.65,-1629.06 930.11,-1626.97"/>
<polygon fill="blue" stroke="blue" points="930.49,-1630.45 940.23,-1626.27 930.02,-1623.47 930.49,-1630.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.28,-2316.41C600.43,-2299.93 761.87,-2268.67 848,-2351 900.78,-2401.45 821.49,-2458.13 868.5,-2514 870.2,-2516.03 872.04,-2517.92 873.99,-2519.68"/>
<polygon fill="blue" stroke="blue" points="871.96,-2522.54 882.01,-2525.89 876.25,-2517 871.96,-2522.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.1,-2325.83C608.65,-2330.23 805.42,-2338 848,-2294 904.65,-2235.46 817.34,-1991.4 868.5,-1928 869.79,-1926.4 871.16,-1924.9 872.61,-1923.47"/>
<polygon fill="blue" stroke="blue" points="874.93,-1926.1 880.42,-1917.04 870.48,-1920.69 874.93,-1926.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node35"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="144,-3239 16,-3239 16,-3203 144,-3203 144,-3239"/>
<text text-anchor="middle" x="80" y="-3217.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node36"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="597,-3239 423,-3239 423,-3203 597,-3203 597,-3239"/>
<text text-anchor="middle" x="510" y="-3217.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M144.15,-3221C214.91,-3221 330.44,-3221 412.53,-3221"/>
<polygon fill="blue" stroke="blue" points="412.62,-3224.5 422.62,-3221 412.62,-3217.5 412.62,-3224.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M597.07,-3225.38C666.79,-3226.12 766.46,-3220.72 848,-3191 1422.24,-2981.72 1629.04,-2906.84 1975,-2403 2091.68,-2233.08 2107.71,-1972.03 2109.76,-1886.33"/>
<polygon fill="blue" stroke="blue" points="2113.26,-1886.38 2109.95,-1876.31 2106.26,-1886.24 2113.26,-1886.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M585.55,-3239.04C662.63,-3252.79 780.91,-3259.31 848,-3191 870.56,-3168.03 863.09,-2933.73 868.5,-2902 889.91,-2776.5 936.65,-2631.48 956.86,-2571.82"/>
<polygon fill="blue" stroke="blue" points="960.18,-2572.94 960.09,-2562.35 953.55,-2570.68 960.18,-2572.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node37"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="1026,-2479 909,-2479 909,-2443 1026,-2443 1026,-2479"/>
<text text-anchor="middle" x="967.5" y="-2457.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1026.38,-2451.91C1142.47,-2433.12 1411.55,-2386.83 1633,-2328 1683.78,-2314.51 1741.16,-2294.54 1777.2,-2281.4"/>
<polygon fill="blue" stroke="blue" points="1778.59,-2284.61 1786.78,-2277.88 1776.18,-2278.04 1778.59,-2284.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node38"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="1026,-2425 909,-2425 909,-2389 1026,-2389 1026,-2425"/>
<text text-anchor="middle" x="967.5" y="-2403.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M972.21,-2388.9C982.14,-2345.56 1013.72,-2235.84 1087,-2187 1145.39,-2148.09 1227.08,-2145.12 1285.67,-2149.55"/>
<polygon fill="blue" stroke="blue" points="1285.7,-2153.07 1295.96,-2150.43 1286.29,-2146.09 1285.7,-2153.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1035.63,-1067.02C1046.15,-1069.95 1056.88,-1073.01 1067,-1076 1329.04,-1153.47 1384.52,-1211.15 1653,-1262 1714.93,-1273.73 2168.04,-1262.91 2219,-1300 2374.01,-1412.83 2404.64,-1670.56 2410.59,-1755.95"/>
<polygon fill="blue" stroke="blue" points="2407.1,-1756.17 2411.23,-1765.93 2414.08,-1755.73 2407.1,-1756.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="624,-1094 396,-1094 396,-1058 624,-1058 624,-1094"/>
<text text-anchor="middle" x="510" y="-1072.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M624.18,-1069.29C698.14,-1064.91 793.89,-1059.23 865.31,-1055"/>
<polygon fill="blue" stroke="blue" points="865.89,-1058.47 875.67,-1054.38 865.48,-1051.48 865.89,-1058.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M624.18,-1082.71C699.9,-1087.2 798.46,-1093.04 870.36,-1097.3"/>
<polygon fill="blue" stroke="blue" points="870.58,-1100.82 880.77,-1097.92 871,-1093.83 870.58,-1100.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M989.15,-1121.27C1011.6,-1140.09 1049.35,-1168.76 1087,-1184 1323.57,-1279.77 1400.93,-1241.01 1653,-1281 1795.84,-1303.66 1855.3,-1246.82 1975,-1328 2000.65,-1345.39 2229.12,-1792.53 2254,-1811 2261.89,-1816.86 2270.56,-1821.8 2279.66,-1825.98"/>
<polygon fill="blue" stroke="blue" points="2278.31,-1829.21 2288.88,-1829.91 2281.05,-1822.77 2278.31,-1829.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1841.02,-2256.54C1875.71,-2240.09 1937.14,-2206.79 1975,-2162 2048.18,-2075.44 2088.5,-1942.9 2103.34,-1885.78"/>
<polygon fill="blue" stroke="blue" points="2106.74,-1886.57 2105.81,-1876.02 2099.96,-1884.85 2106.74,-1886.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1424.04,-2160.29C1565.25,-2159.53 1900.45,-2149.3 1975,-2071 2049.05,-1993.23 1932.2,-1911.74 2003,-1831 2011.91,-1820.84 2024.03,-1814.23 2036.91,-1809.98"/>
<polygon fill="blue" stroke="blue" points="2038.2,-1813.26 2046.88,-1807.18 2036.3,-1806.52 2038.2,-1813.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="1476.5,-2286 1243.5,-2286 1243.5,-2250 1476.5,-2250 1476.5,-2286"/>
<text text-anchor="middle" x="1360" y="-2264.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1476.52,-2268C1575.63,-2268 1712.33,-2268 1776.7,-2268"/>
<polygon fill="blue" stroke="blue" points="1776.76,-2271.5 1786.76,-2268 1776.76,-2264.5 1776.76,-2271.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="1531,-2232 1189,-2232 1189,-2196 1531,-2196 1531,-2232"/>
<text text-anchor="middle" x="1360" y="-2210.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1531.27,-2229.58C1565.02,-2233.04 1600.15,-2236.91 1633,-2241 1682.95,-2247.22 1740.42,-2256.15 1776.72,-2262.01"/>
<polygon fill="blue" stroke="blue" points="1776.39,-2265.51 1786.82,-2263.65 1777.51,-2258.6 1776.39,-2265.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M994.84,-1573.33C1017.46,-1572.09 1049.15,-1566.43 1067,-1546 1111.24,-1495.34 1037.59,-1441.63 1087,-1396 1159.53,-1329.03 1903.13,-1298.32 1975,-1366 2050.37,-1436.97 1936.96,-1751.28 2003,-1831 2009.3,-1838.61 2017.41,-1844.25 2026.34,-1848.4"/>
<polygon fill="blue" stroke="blue" points="2025.32,-1851.76 2035.9,-1852.22 2027.91,-1845.26 2025.32,-1851.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="1849.5,-1613 1778.5,-1613 1778.5,-1577 1849.5,-1577 1849.5,-1613"/>
<text text-anchor="middle" x="1814" y="-1591.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1849.76,-1605.81C1883.58,-1617.31 1935.51,-1637.62 1975,-1665 2021.5,-1697.24 2065.17,-1747.11 2089.66,-1777.53"/>
<polygon fill="blue" stroke="blue" points="2087.08,-1779.92 2096.04,-1785.57 2092.56,-1775.56 2087.08,-1779.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M994.53,-1620.26C1014.45,-1615.01 1042.56,-1607.39 1067,-1600 1264.5,-1540.28 1824.38,-1264.98 1975,-1406 2044.09,-1470.69 1942.41,-1758.29 2003,-1831 2009.33,-1838.59 2017.45,-1844.22 2026.38,-1848.37"/>
<polygon fill="blue" stroke="blue" points="2025.36,-1851.73 2035.95,-1852.18 2027.95,-1845.23 2025.36,-1851.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node49"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="1058.5,-1699 876.5,-1699 876.5,-1663 1058.5,-1663 1058.5,-1699"/>
<text text-anchor="middle" x="967.5" y="-1677.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1058.58,-1670.85C1138.43,-1661.85 1251.72,-1649.09 1313.87,-1642.09"/>
<polygon fill="blue" stroke="blue" points="1314.58,-1645.53 1324.13,-1640.93 1313.8,-1638.57 1314.58,-1645.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node50"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="1055.5,-1537 879.5,-1537 879.5,-1501 1055.5,-1501 1055.5,-1537"/>
<text text-anchor="middle" x="967.5" y="-1515.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1035.61,-1537.06C1046.14,-1539.99 1056.87,-1543.04 1067,-1546 1154.97,-1571.76 1257.09,-1604.16 1314.26,-1622.53"/>
<polygon fill="blue" stroke="blue" points="1313.47,-1625.95 1324.06,-1625.68 1315.61,-1619.29 1313.47,-1625.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1395.79,-1639.02C1490.77,-1645.31 1761.65,-1668.41 1975,-1737 2008.98,-1747.92 2045.08,-1766.23 2071.39,-1780.95"/>
<polygon fill="blue" stroke="blue" points="2069.85,-1784.1 2080.27,-1785.99 2073.3,-1778.01 2069.85,-1784.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1395.72,-1633.77C1476.75,-1626.24 1678.29,-1607.52 1768.32,-1599.15"/>
<polygon fill="blue" stroke="blue" points="1768.84,-1602.62 1778.47,-1598.21 1768.19,-1595.65 1768.84,-1602.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1054.24,-2525.95C1059.03,-2522.59 1063.37,-2518.65 1067,-2514 1093.32,-2480.34 1057.58,-2160.98 1087,-2130 1174.07,-2038.29 1527.11,-2083.03 1653,-2071 1688.75,-2067.58 1949.05,-2067.82 1975,-2043 2043.68,-1977.31 1939.8,-1901.98 2003,-1831 2011.93,-1820.97 2024,-1814.4 2036.82,-1810.16"/>
<polygon fill="blue" stroke="blue" points="2038.06,-1813.45 2046.72,-1807.35 2036.15,-1806.71 2038.06,-1813.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="1853.5,-2008 1774.5,-2008 1774.5,-1972 1853.5,-1972 1853.5,-2008"/>
<text text-anchor="middle" x="1814" y="-1986.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1853.61,-1987.06C1886.94,-1983.41 1935.77,-1975.4 1975,-1958 2016.8,-1939.46 2058.04,-1906.12 2083.72,-1883.07"/>
<polygon fill="blue" stroke="blue" points="2086.14,-1885.59 2091.18,-1876.27 2081.43,-1880.42 2086.14,-1885.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node54"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="592,-2533 428,-2533 428,-2497 592,-2497 592,-2533"/>
<text text-anchor="middle" x="510" y="-2511.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M592.07,-2511.78C660.57,-2508.29 761.12,-2501.31 848,-2488 864.58,-2485.46 882.29,-2481.89 898.83,-2478.18"/>
<polygon fill="blue" stroke="blue" points="899.99,-2481.51 908.96,-2475.86 898.43,-2474.69 899.99,-2481.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M592.29,-2531.12C666.35,-2540.98 775.01,-2542.8 848,-2488 868.53,-2472.59 849.52,-2451.28 868.5,-2434 877.13,-2426.14 887.84,-2420.55 898.98,-2416.56"/>
<polygon fill="blue" stroke="blue" points="900.35,-2419.8 908.84,-2413.46 898.25,-2413.12 900.35,-2419.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M592.27,-2520.38C680.79,-2524.26 814.29,-2523.68 848,-2488 881.89,-2452.13 838.15,-1638.91 868.5,-1600 882.87,-1581.59 908.57,-1574.99 930.05,-1572.92"/>
<polygon fill="blue" stroke="blue" points="930.44,-1576.4 940.19,-1572.24 929.97,-1569.42 930.44,-1576.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M592.26,-2520.37C680.77,-2524.25 814.27,-2523.65 848,-2488 879.85,-2454.33 839.96,-1690.52 868.5,-1654 882.88,-1635.6 908.58,-1629 930.06,-1626.93"/>
<polygon fill="blue" stroke="blue" points="930.45,-1630.41 940.19,-1626.24 929.98,-1623.43 930.45,-1630.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M592.17,-2520.17C669.39,-2525.08 785.7,-2532.49 868.15,-2537.74"/>
<polygon fill="blue" stroke="blue" points="868.08,-2541.24 878.28,-2538.38 868.52,-2534.26 868.08,-2541.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M592.19,-2520.3C680.62,-2524.1 814.05,-2523.45 848,-2488 891.06,-2443.03 829.87,-1976.83 868.5,-1928 869.77,-1926.39 871.13,-1924.87 872.57,-1923.44"/>
<polygon fill="blue" stroke="blue" points="874.89,-1926.06 880.33,-1916.96 870.41,-1920.68 874.89,-1926.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node55"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="653,-2479 367,-2479 367,-2443 653,-2443 653,-2479"/>
<text text-anchor="middle" x="510" y="-2457.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.25,-2461C735.14,-2461 834.28,-2461 898.79,-2461"/>
<polygon fill="blue" stroke="blue" points="898.84,-2464.5 908.84,-2461 898.84,-2457.5 898.84,-2464.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.24,-2451.86C713.49,-2447.08 784.35,-2440.25 848,-2431 864.51,-2428.6 882.2,-2425.38 898.74,-2422.07"/>
<polygon fill="blue" stroke="blue" points="899.76,-2425.43 908.86,-2420.01 898.37,-2418.58 899.76,-2425.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.39,-2466.6C733.05,-2466.34 821.53,-2459.22 848,-2431 879.59,-2397.32 840.07,-1636.39 868.5,-1600 882.88,-1581.6 908.58,-1575.01 930.06,-1572.93"/>
<polygon fill="blue" stroke="blue" points="930.45,-1576.41 940.19,-1572.24 929.98,-1569.43 930.45,-1576.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.37,-2466.59C733.02,-2466.32 821.51,-2459.2 848,-2431 877.57,-2399.53 841.88,-1688 868.5,-1654 882.9,-1635.61 908.6,-1629.02 930.07,-1626.94"/>
<polygon fill="blue" stroke="blue" points="930.46,-1630.42 940.2,-1626.25 929.99,-1623.44 930.46,-1630.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653,-2447.56C716.05,-2447.65 789.14,-2456.49 848,-2488 860.97,-2494.95 856.36,-2505.69 868.5,-2514 872.55,-2516.77 876.87,-2519.3 881.35,-2521.6"/>
<polygon fill="blue" stroke="blue" points="880.2,-2524.92 890.74,-2526 883.18,-2518.58 880.2,-2524.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M653.23,-2466.45C732.83,-2466.14 821.3,-2459.01 848,-2431 886.59,-2390.51 833.71,-1971.8 868.5,-1928 869.78,-1926.39 871.14,-1924.88 872.58,-1923.45"/>
<polygon fill="blue" stroke="blue" points="874.9,-1926.07 880.35,-1916.98 870.42,-1920.69 874.9,-1926.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node56"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="741.5,-2587 278.5,-2587 278.5,-2551 741.5,-2551 741.5,-2587"/>
<text text-anchor="middle" x="510" y="-2565.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.77,-2576.85C778.91,-2570.82 815.72,-2560.03 848,-2542 861.47,-2534.48 856.88,-2524.14 868.5,-2514 882.03,-2502.2 898.62,-2491.99 914.28,-2483.77"/>
<polygon fill="blue" stroke="blue" points="916.03,-2486.81 923.37,-2479.16 912.87,-2480.57 916.03,-2486.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M588.86,-2587.04C664.66,-2599.63 778.34,-2604.54 848,-2542 884.36,-2509.36 835.38,-2469.92 868.5,-2434 876.72,-2425.08 887.6,-2419 899.11,-2414.89"/>
<polygon fill="blue" stroke="blue" points="900.36,-2418.16 908.88,-2411.87 898.29,-2411.47 900.36,-2418.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M579.1,-2587.05C656.34,-2602.94 780.33,-2613.72 848,-2542 883.92,-2503.92 836.33,-1641.29 868.5,-1600 882.85,-1581.58 908.56,-1574.99 930.04,-1572.92"/>
<polygon fill="blue" stroke="blue" points="930.44,-1576.4 940.18,-1572.23 929.97,-1569.41 930.44,-1576.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M579.08,-2587.03C656.31,-2602.91 780.29,-2613.68 848,-2542 881.89,-2506.13 838.15,-1692.91 868.5,-1654 882.87,-1635.59 908.57,-1628.99 930.05,-1626.92"/>
<polygon fill="blue" stroke="blue" points="930.44,-1630.4 940.19,-1626.24 929.97,-1623.42 930.44,-1630.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.75,-2556.34C786.28,-2553.89 830.66,-2551.46 868.07,-2549.4"/>
<polygon fill="blue" stroke="blue" points="868.64,-2552.88 878.44,-2548.83 868.26,-2545.89 868.64,-2552.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M579.64,-2587.05C656.8,-2602.73 780.12,-2613.12 848,-2542 895.13,-2492.62 826.24,-1981.6 868.5,-1928 869.77,-1926.39 871.13,-1924.87 872.56,-1923.43"/>
<polygon fill="blue" stroke="blue" points="874.89,-1926.05 880.31,-1916.95 870.4,-1920.68 874.89,-1926.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node57"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="655,-1582 365,-1582 365,-1546 655,-1546 655,-1582"/>
<text text-anchor="middle" x="510" y="-1560.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M655.12,-1566.85C751.55,-1568.75 871.21,-1571.12 930.17,-1572.28"/>
<polygon fill="blue" stroke="blue" points="930.39,-1575.79 940.46,-1572.49 930.53,-1568.79 930.39,-1575.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M655.38,-1565.02C715.66,-1568.15 785.96,-1575.37 848,-1591 857.65,-1593.43 859.12,-1596.67 868.5,-1600 888.71,-1607.18 911.81,-1613.62 930.5,-1618.42"/>
<polygon fill="blue" stroke="blue" points="929.84,-1621.86 940.39,-1620.9 931.55,-1615.07 929.84,-1621.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M655.16,-1557.03C734.32,-1556.65 821.66,-1563.1 848,-1591 883.21,-1628.3 837.54,-2473.11 868.5,-2514 869.9,-2515.84 871.4,-2517.58 873.01,-2519.21"/>
<polygon fill="blue" stroke="blue" points="870.73,-2521.87 880.6,-2525.72 875.29,-2516.55 870.73,-2521.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M655.11,-1557.51C733.97,-1557.34 821.01,-1563.83 848,-1591 891.96,-1635.27 829.59,-1822.23 868.5,-1871 869.99,-1872.86 871.59,-1874.62 873.29,-1876.26"/>
<polygon fill="blue" stroke="blue" points="871.34,-1879.2 881.3,-1882.82 875.78,-1873.78 871.34,-1879.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node58"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="733.5,-1528 286.5,-1528 286.5,-1492 733.5,-1492 733.5,-1528"/>
<text text-anchor="middle" x="510" y="-1506.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M733.87,-1517.29C772.3,-1521.55 811.57,-1527.82 848,-1537 857.65,-1539.43 859.12,-1542.67 868.5,-1546 888.71,-1553.18 911.81,-1559.62 930.5,-1564.42"/>
<polygon fill="blue" stroke="blue" points="929.84,-1567.86 940.39,-1566.9 931.55,-1561.07 929.84,-1567.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M601.31,-1491.95C675.41,-1482.56 779,-1482.55 848,-1537 871.11,-1555.24 847.21,-1579.66 868.5,-1600 884.98,-1615.75 909.78,-1622.48 930.31,-1625.28"/>
<polygon fill="blue" stroke="blue" points="929.96,-1628.76 940.29,-1626.39 930.74,-1621.81 929.96,-1628.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M733.91,-1505.41C785.44,-1509.25 830.39,-1518.31 848,-1537 885.24,-1576.5 835.76,-2470.69 868.5,-2514 869.89,-2515.85 871.4,-2517.58 873,-2519.21"/>
<polygon fill="blue" stroke="blue" points="870.73,-2521.87 880.6,-2525.72 875.28,-2516.56 870.73,-2521.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M733.87,-1505.91C785.21,-1509.77 830.06,-1518.73 848,-1537 900.09,-1590.07 822.47,-1812.6 868.5,-1871 869.98,-1872.87 871.57,-1874.63 873.26,-1876.29"/>
<polygon fill="blue" stroke="blue" points="871.3,-1879.21 881.24,-1882.86 875.75,-1873.8 871.3,-1879.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node59"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="637,-1690 383,-1690 383,-1654 637,-1654 637,-1690"/>
<text text-anchor="middle" x="510" y="-1668.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M637.32,-1655.91C710.02,-1654.3 796.83,-1666.88 848,-1725 900.08,-1784.15 819.84,-2372 868.5,-2434 876.28,-2443.91 887.35,-2450.4 899.26,-2454.59"/>
<polygon fill="blue" stroke="blue" points="898.36,-2457.98 908.95,-2457.49 900.37,-2451.27 898.36,-2457.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M637.08,-1656.49C709.45,-1655.15 796.01,-1667.81 848,-1725 873.23,-1752.76 862.2,-2025.02 868.5,-2062 889.07,-2182.73 935.88,-2321.6 956.47,-2379.47"/>
<polygon fill="blue" stroke="blue" points="953.21,-2380.76 959.88,-2388.99 959.8,-2378.4 953.21,-2380.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M621.04,-1690.01C691.96,-1695.57 782.77,-1690.75 848,-1645 865.99,-1632.38 851.78,-1614.26 868.5,-1600 885.65,-1585.37 910.09,-1578.62 930.27,-1575.53"/>
<polygon fill="blue" stroke="blue" points="930.9,-1578.97 940.37,-1574.22 930,-1572.03 930.9,-1578.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M637.23,-1664.01C700.59,-1659.46 778.47,-1653.06 848,-1645 875.6,-1641.8 906.66,-1637.04 930.05,-1633.22"/>
<polygon fill="blue" stroke="blue" points="930.92,-1636.62 940.22,-1631.54 929.78,-1629.72 930.92,-1636.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M637.39,-1655.85C710.1,-1654.23 796.92,-1666.8 848,-1725 905.85,-1790.91 815.44,-2444.18 868.5,-2514 869.9,-2515.84 871.41,-2517.57 873.02,-2519.2"/>
<polygon fill="blue" stroke="blue" points="870.75,-2521.87 880.62,-2525.7 875.29,-2516.55 870.75,-2521.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M637.14,-1657.98C708.61,-1657.4 794.22,-1670.32 848,-1725 893.95,-1771.71 825.96,-1821.16 868.5,-1871 870.22,-1873.01 872.07,-1874.89 874.03,-1876.65"/>
<polygon fill="blue" stroke="blue" points="872.02,-1879.52 882.09,-1882.83 876.28,-1873.97 872.02,-1879.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node60"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="604.5,-1258 415.5,-1258 415.5,-1222 604.5,-1222 604.5,-1258"/>
<text text-anchor="middle" x="510" y="-1236.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.91,-1234.45C692.69,-1231.49 815.06,-1233.84 848,-1267 891.81,-1311.1 829.04,-1497.96 868.5,-1546 883.32,-1564.05 909.01,-1570.65 930.37,-1572.82"/>
<polygon fill="blue" stroke="blue" points="930.21,-1576.32 940.44,-1573.56 930.72,-1569.34 930.21,-1576.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M586.18,-1221.94C662.37,-1208.51 778.61,-1202.21 848,-1267 893,-1309.02 825.86,-1359.59 868.5,-1404 930.71,-1468.79 978.89,-1424.53 1067,-1442 1333.56,-1494.85 1653,-1561.47 1768.55,-1585.67"/>
<polygon fill="blue" stroke="blue" points="1767.95,-1589.12 1778.45,-1587.75 1769.38,-1582.27 1767.95,-1589.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node61"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="756.5,-1636 263.5,-1636 263.5,-1600 756.5,-1600 756.5,-1636"/>
<text text-anchor="middle" x="510" y="-1614.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.91,-1600.33C787.62,-1597.53 818.56,-1594.41 848,-1591 875.6,-1587.8 906.66,-1583.04 930.05,-1579.22"/>
<polygon fill="blue" stroke="blue" points="930.92,-1582.62 940.22,-1577.54 929.78,-1575.72 930.92,-1582.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.75,-1622.86C825.07,-1624.21 891.22,-1625.51 930.39,-1626.29"/>
<polygon fill="blue" stroke="blue" points="930.4,-1629.79 940.47,-1626.49 930.54,-1622.79 930.4,-1629.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.76,-1615.56C798.4,-1620.24 833.03,-1629.16 848,-1645 881.17,-1680.1 839.33,-2475.52 868.5,-2514 869.9,-2515.84 871.41,-2517.58 873.01,-2519.21"/>
<polygon fill="blue" stroke="blue" points="870.74,-2521.87 880.61,-2525.71 875.29,-2516.55 870.74,-2521.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.82,-1616.42C798.13,-1621.08 832.62,-1629.78 848,-1645 883.85,-1680.47 836.71,-1831.85 868.5,-1871 870,-1872.85 871.62,-1874.59 873.33,-1876.23"/>
<polygon fill="blue" stroke="blue" points="871.41,-1879.18 881.39,-1882.74 875.81,-1873.73 871.41,-1879.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node62"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="639,-1366 381,-1366 381,-1330 639,-1330 639,-1366"/>
<text text-anchor="middle" x="510" y="-1344.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M639.41,-1342.05C721.77,-1341.2 818.59,-1346.73 848,-1375 903.18,-1428.05 818.57,-1487.98 868.5,-1546 883.64,-1563.59 909.08,-1570.23 930.24,-1572.53"/>
<polygon fill="blue" stroke="blue" points="929.98,-1576.02 940.23,-1573.34 930.54,-1569.05 929.98,-1576.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M639.21,-1341.79C721.79,-1340.8 818.95,-1346.26 848,-1375 883.69,-1410.31 836.29,-1561.48 868.5,-1600 883.38,-1617.8 908.83,-1624.44 930.06,-1626.68"/>
<polygon fill="blue" stroke="blue" points="929.84,-1630.18 940.08,-1627.46 930.39,-1623.2 929.84,-1630.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M588.86,-1329.96C664.66,-1317.37 778.34,-1312.46 848,-1375 884.36,-1407.64 836.91,-1445.73 868.5,-1483 872.48,-1487.69 877.13,-1491.78 882.2,-1495.33"/>
<polygon fill="blue" stroke="blue" points="880.73,-1498.54 891.08,-1500.81 884.41,-1492.58 880.73,-1498.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M639.43,-1341.15C722.41,-1339.83 819.96,-1345.17 848,-1375 891.34,-1421.12 830.41,-2463.46 868.5,-2514 869.89,-2515.85 871.4,-2517.58 873,-2519.22"/>
<polygon fill="blue" stroke="blue" points="870.72,-2521.87 880.58,-2525.73 875.28,-2516.56 870.72,-2521.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M639.22,-1341.36C722.1,-1340.13 819.62,-1345.5 848,-1375 886.24,-1414.75 834.79,-1827.34 868.5,-1871 869.96,-1872.89 871.53,-1874.66 873.21,-1876.32"/>
<polygon fill="blue" stroke="blue" points="871.22,-1879.22 881.13,-1882.95 875.7,-1873.85 871.22,-1879.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node63"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="575.5,-1312 444.5,-1312 444.5,-1276 575.5,-1276 575.5,-1312"/>
<text text-anchor="middle" x="510" y="-1290.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M575.81,-1289.74C662.86,-1285.56 810.91,-1284.32 848,-1321 883.69,-1356.31 836.29,-1507.48 868.5,-1546 883.38,-1563.8 908.83,-1570.44 930.06,-1572.68"/>
<polygon fill="blue" stroke="blue" points="929.84,-1576.18 940.08,-1573.46 930.39,-1569.2 929.84,-1576.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M575.54,-1289.67C662.64,-1285.36 811.18,-1283.94 848,-1321 891.81,-1365.1 829.04,-1551.96 868.5,-1600 883.32,-1618.05 909.01,-1624.65 930.37,-1626.82"/>
<polygon fill="blue" stroke="blue" points="930.21,-1630.32 940.44,-1627.56 930.72,-1623.34 930.21,-1630.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M575.63,-1278.09C651.05,-1263.73 774.74,-1253.91 848,-1321 888.23,-1357.84 831.48,-1401.94 868.5,-1442 930.24,-1508.82 981.66,-1460.48 1067,-1492 1160.8,-1526.65 1264.2,-1582.53 1319.28,-1613.84"/>
<polygon fill="blue" stroke="blue" points="1317.6,-1616.91 1328.02,-1618.83 1321.07,-1610.83 1317.6,-1616.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node64"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="574,-1204 446,-1204 446,-1168 574,-1168 574,-1204"/>
<text text-anchor="middle" x="510" y="-1182.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M574.2,-1169.33C650.57,-1153.43 777.58,-1141.27 848,-1213 899.94,-1265.91 821.78,-1488.43 868.5,-1546 883.22,-1564.14 908.91,-1570.74 930.29,-1572.88"/>
<polygon fill="blue" stroke="blue" points="930.15,-1576.38 940.38,-1573.61 930.66,-1569.4 930.15,-1576.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M574.29,-1184.22C642.91,-1183.85 755.08,-1187.86 848,-1213 961.79,-1243.78 975.41,-1290.02 1087,-1328 1321.77,-1407.9 1440.81,-1286.27 1633,-1443 1650.28,-1457.09 1638.67,-1471.92 1653,-1489 1684.94,-1527.08 1733.98,-1556.78 1769.35,-1574.92"/>
<polygon fill="blue" stroke="blue" points="1767.98,-1578.15 1778.49,-1579.51 1771.12,-1571.9 1767.98,-1578.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node65"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="749.5,-1474 270.5,-1474 270.5,-1438 749.5,-1438 749.5,-1474"/>
<text text-anchor="middle" x="510" y="-1452.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M601.31,-1437.95C675.41,-1428.56 779,-1428.55 848,-1483 871.11,-1501.24 847.21,-1525.66 868.5,-1546 884.98,-1561.75 909.78,-1568.48 930.31,-1571.28"/>
<polygon fill="blue" stroke="blue" points="929.96,-1574.76 940.29,-1572.39 930.74,-1567.81 929.96,-1574.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M587.62,-1437.99C663.57,-1425.06 778.35,-1419.57 848,-1483 887.03,-1518.54 832.99,-1560.93 868.5,-1600 884.04,-1617.09 909.3,-1623.77 930.29,-1626.2"/>
<polygon fill="blue" stroke="blue" points="930.22,-1629.71 940.49,-1627.11 930.84,-1622.74 930.22,-1629.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M749.59,-1452.75C794.41,-1457.2 832.21,-1466.23 848,-1483 887.27,-1524.71 833.98,-2468.28 868.5,-2514 869.89,-2515.85 871.4,-2517.58 873,-2519.21"/>
<polygon fill="blue" stroke="blue" points="870.72,-2521.87 880.59,-2525.73 875.28,-2516.56 870.72,-2521.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M749.63,-1453.17C794.27,-1457.62 831.98,-1466.54 848,-1483 878.11,-1513.94 841.92,-1836.98 868.5,-1871 869.97,-1872.88 871.55,-1874.64 873.23,-1876.3"/>
<polygon fill="blue" stroke="blue" points="871.26,-1879.21 881.2,-1882.9 875.73,-1873.82 871.26,-1879.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node66"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="584.5,-1420 435.5,-1420 435.5,-1384 584.5,-1384 584.5,-1420"/>
<text text-anchor="middle" x="510" y="-1398.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M584.8,-1384.48C660.7,-1371.21 777.48,-1364.78 848,-1429 887.03,-1464.54 832.99,-1506.93 868.5,-1546 884.04,-1563.09 909.3,-1569.77 930.29,-1572.2"/>
<polygon fill="blue" stroke="blue" points="930.22,-1575.71 940.49,-1573.11 930.84,-1568.74 930.22,-1575.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M584.67,-1397.5C672.4,-1393.85 811.66,-1394.07 848,-1429 903.18,-1482.05 818.57,-1541.98 868.5,-1600 883.64,-1617.59 909.08,-1624.23 930.24,-1626.53"/>
<polygon fill="blue" stroke="blue" points="929.98,-1630.02 940.23,-1627.34 930.54,-1623.05 929.98,-1630.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M584.56,-1386.96C658.62,-1376.21 772.43,-1372.27 848,-1429 868.53,-1444.41 850.25,-1464.95 868.5,-1483 873.64,-1488.08 879.55,-1492.46 885.88,-1496.22"/>
<polygon fill="blue" stroke="blue" points="884.26,-1499.32 894.72,-1500.97 887.58,-1493.16 884.26,-1499.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M584.87,-1396.94C673.18,-1392.68 813.41,-1392.23 848,-1429 889.31,-1472.91 832.19,-2465.87 868.5,-2514 869.89,-2515.85 871.4,-2517.58 873,-2519.22"/>
<polygon fill="blue" stroke="blue" points="870.72,-2521.87 880.59,-2525.73 875.28,-2516.56 870.72,-2521.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M584.71,-1397.09C672.85,-1393 812.91,-1392.71 848,-1429 882.18,-1464.34 838.36,-1832.16 868.5,-1871 869.96,-1872.88 871.54,-1874.65 873.22,-1876.31"/>
<polygon fill="blue" stroke="blue" points="871.24,-1879.22 881.16,-1882.93 875.71,-1873.84 871.24,-1879.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node67"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="654,-2832 366,-2832 366,-2796 654,-2796 654,-2832"/>
<text text-anchor="middle" x="510" y="-2810.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M628.94,-2832.01C698.38,-2836.33 784.72,-2830.16 848,-2787 922.55,-2736.16 951.96,-2624.63 961.98,-2572.24"/>
<polygon fill="blue" stroke="blue" points="965.45,-2572.76 963.79,-2562.29 958.56,-2571.51 965.45,-2572.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="1042,-1973 893,-1973 893,-1937 1042,-1937 1042,-1973"/>
<text text-anchor="middle" x="967.5" y="-1951.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M654.22,-2820.94C733.61,-2821.36 821.52,-2814.97 848,-2787 878.76,-2754.52 840.94,-2017.24 868.5,-1982 872.74,-1976.58 877.95,-1972.19 883.76,-1968.63"/>
<polygon fill="blue" stroke="blue" points="885.38,-1971.73 892.63,-1964 882.14,-1965.53 885.38,-1971.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="1045.5,-2027 889.5,-2027 889.5,-1991 1045.5,-1991 1045.5,-2027"/>
<text text-anchor="middle" x="967.5" y="-2005.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M654.43,-2820.71C733.61,-2821.01 821.23,-2814.59 848,-2787 879.77,-2754.27 861.45,-2422.06 868.5,-2377 888.78,-2247.33 936.54,-2097.48 956.96,-2036.72"/>
<polygon fill="blue" stroke="blue" points="960.33,-2037.68 960.22,-2027.09 953.7,-2035.44 960.33,-2037.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node68"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="707.5,-2778 312.5,-2778 312.5,-2742 707.5,-2742 707.5,-2778"/>
<text text-anchor="middle" x="510" y="-2756.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M707.63,-2774.3C756.28,-2769.99 806.35,-2758.27 848,-2733 908.85,-2696.08 943.4,-2614.78 958.05,-2571.83"/>
<polygon fill="blue" stroke="blue" points="961.39,-2572.88 961.2,-2562.29 954.75,-2570.69 961.39,-2572.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M707.77,-2766.02C769.71,-2763.41 827.4,-2754.72 848,-2733 905.45,-2672.44 817.02,-2047.71 868.5,-1982 872.74,-1976.59 877.96,-1972.2 883.77,-1968.64"/>
<polygon fill="blue" stroke="blue" points="885.39,-1971.74 892.64,-1964.01 882.16,-1965.53 885.39,-1971.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M707.87,-2765.66C769.6,-2762.99 827.12,-2754.35 848,-2733 875.7,-2704.67 862.23,-2416.12 868.5,-2377 889.27,-2247.4 936.76,-2097.51 957.04,-2036.73"/>
<polygon fill="blue" stroke="blue" points="960.41,-2037.69 960.27,-2027.1 953.77,-2035.46 960.41,-2037.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node69"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="622,-3048 398,-3048 398,-3012 622,-3012 622,-3048"/>
<text text-anchor="middle" x="510" y="-3026.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M589.76,-3048.03C665.43,-3060.34 778.27,-3064.81 848,-3003 882.28,-2972.62 857.89,-2946.56 868.5,-2902 898,-2778.11 940.36,-2632.14 958.14,-2572.02"/>
<polygon fill="blue" stroke="blue" points="961.58,-2572.73 961.07,-2562.14 954.87,-2570.74 961.58,-2572.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node70"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="691,-2994 329,-2994 329,-2958 691,-2958 691,-2994"/>
<text text-anchor="middle" x="510" y="-2972.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M597.67,-2994.03C672.27,-3004.26 778.57,-3005.49 848,-2949 863.22,-2936.62 935.98,-2661.25 959.29,-2571.79"/>
<polygon fill="blue" stroke="blue" points="962.69,-2572.63 961.82,-2562.07 955.92,-2570.87 962.69,-2572.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node71"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="648.5,-2940 371.5,-2940 371.5,-2904 648.5,-2904 648.5,-2940"/>
<text text-anchor="middle" x="510" y="-2918.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M602.64,-2940.03C676.54,-2949.12 779.17,-2948.71 848,-2895 951,-2814.63 965.15,-2640.81 966.6,-2572.44"/>
<polygon fill="blue" stroke="blue" points="970.1,-2572.45 966.74,-2562.41 963.11,-2572.36 970.1,-2572.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="537,-2670 483,-2670 483,-2634 537,-2634 537,-2670"/>
<text text-anchor="middle" x="510" y="-2648.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.27,-2653.92C595.21,-2657.26 737.63,-2660.48 848,-2622 881.76,-2610.23 915.34,-2586.73 938.08,-2568.58"/>
<polygon fill="blue" stroke="blue" points="940.41,-2571.2 945.95,-2562.17 935.99,-2565.77 940.41,-2571.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.16,-2653.88C608.85,-2658.42 805.95,-2666.51 848,-2622 896.86,-2570.28 824.49,-2037.9 868.5,-1982 872.75,-1976.6 877.98,-1972.21 883.79,-1968.66"/>
<polygon fill="blue" stroke="blue" points="885.42,-1971.76 892.68,-1964.04 882.19,-1965.55 885.42,-1971.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M537.07,-2659.42C600.47,-2675.72 763.7,-2706.75 848,-2622 867.26,-2602.63 863.83,-2403.91 868.5,-2377 890.95,-2247.68 937.51,-2097.64 957.29,-2036.77"/>
<polygon fill="blue" stroke="blue" points="960.66,-2037.72 960.44,-2027.12 954.01,-2035.54 960.66,-2037.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node73"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="729.5,-2724 290.5,-2724 290.5,-2688 729.5,-2688 729.5,-2724"/>
<text text-anchor="middle" x="510" y="-2702.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M729.81,-2712.91C770.64,-2707.5 811.8,-2697.17 848,-2679 895.44,-2655.19 932.18,-2603.37 951.48,-2571.31"/>
<polygon fill="blue" stroke="blue" points="954.64,-2572.83 956.67,-2562.43 948.6,-2569.29 954.64,-2572.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M729.82,-2710.78C783.01,-2707.11 829.85,-2698.09 848,-2679 901.38,-2622.85 820.65,-2042.94 868.5,-1982 872.75,-1976.59 877.97,-1972.2 883.78,-1968.65"/>
<polygon fill="blue" stroke="blue" points="885.41,-1971.75 892.66,-1964.02 882.17,-1965.54 885.41,-1971.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M729.8,-2710.31C782.8,-2706.61 829.54,-2697.69 848,-2679 871.64,-2655.07 863.01,-2410.18 868.5,-2377 889.93,-2247.51 937.05,-2097.56 957.14,-2036.75"/>
<polygon fill="blue" stroke="blue" points="960.51,-2037.7 960.34,-2027.11 953.86,-2035.49 960.51,-2037.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node74"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="640.5,-2886 379.5,-2886 379.5,-2850 640.5,-2850 640.5,-2886"/>
<text text-anchor="middle" x="510" y="-2864.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M610.92,-2886.02C683.56,-2893.4 780.57,-2890.74 848,-2841 936.72,-2775.56 959.1,-2632.94 964.68,-2572.25"/>
<polygon fill="blue" stroke="blue" points="968.17,-2572.49 965.51,-2562.24 961.19,-2571.91 968.17,-2572.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node75"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="840,-3156 180,-3156 180,-3120 840,-3120 840,-3156"/>
<text text-anchor="middle" x="510" y="-3134.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M582.98,-3156.05C659.61,-3170.52 779.12,-3178.66 848,-3111 881.29,-3078.3 860.03,-2947.89 868.5,-2902 891.61,-2776.76 937.45,-2631.53 957.14,-2571.81"/>
<polygon fill="blue" stroke="blue" points="960.57,-2572.6 960.4,-2562 953.93,-2570.39 960.57,-2572.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node76"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="725.5,-3102 294.5,-3102 294.5,-3066 725.5,-3066 725.5,-3102"/>
<text text-anchor="middle" x="510" y="-3080.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M725.5,-3087.79C779.93,-3084.21 828.53,-3075.49 848,-3057 873.19,-3033.07 861.62,-2936.06 868.5,-2902 893.72,-2777.17 938.41,-2631.71 957.47,-2571.88"/>
<polygon fill="blue" stroke="blue" points="960.9,-2572.64 960.62,-2562.05 954.24,-2570.5 960.9,-2572.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1035.73,-1919.06C1052.36,-1922.77 1070.23,-1926.11 1087,-1928 1479.5,-1972.15 1586.26,-1962.87 1975,-1893 1995.89,-1889.25 2018.3,-1883.96 2038.74,-1878.63"/>
<polygon fill="blue" stroke="blue" points="2039.84,-1881.96 2048.61,-1876.02 2038.04,-1875.19 2039.84,-1881.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="1387,-1919 1333,-1919 1333,-1883 1387,-1883 1387,-1919"/>
<text text-anchor="middle" x="1360" y="-1897.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1042.41,-1944.78C1126.19,-1933.19 1259.36,-1914.78 1322.93,-1905.99"/>
<polygon fill="blue" stroke="blue" points="1323.45,-1909.45 1332.88,-1904.61 1322.49,-1902.52 1323.45,-1909.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1387.05,-1900.04C1471.82,-1896.85 1747.41,-1885.85 1975,-1870 1991.33,-1868.86 2008.75,-1867.46 2025.47,-1866.01"/>
<polygon fill="blue" stroke="blue" points="2026.11,-1869.47 2035.77,-1865.11 2025.5,-1862.5 2026.11,-1869.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1034.47,-1990.95C1045.34,-1987.96 1056.49,-1984.9 1067,-1982 1159.39,-1956.52 1268.14,-1926.29 1323.19,-1910.97"/>
<polygon fill="blue" stroke="blue" points="1324.14,-1914.34 1332.83,-1908.29 1322.26,-1907.6 1324.14,-1914.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node81"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1886,-982 1742,-982 1742,-946 1886,-946 1886,-982"/>
<text text-anchor="middle" x="1814" y="-960.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="2138,-1119 2084,-1119 2084,-1083 2138,-1083 2138,-1119"/>
<text text-anchor="middle" x="2111" y="-1097.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1886.07,-974.9C1916.28,-982.51 1950.19,-995.37 1975,-1017 1996.27,-1035.55 1981.07,-1056.24 2003,-1074 2022.92,-1090.13 2051.25,-1096.78 2073.76,-1099.45"/>
<polygon fill="blue" stroke="blue" points="2073.66,-1102.95 2083.95,-1100.43 2074.34,-1095.99 2073.66,-1102.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="2144,-1065 2078,-1065 2078,-1029 2144,-1029 2144,-1065"/>
<text text-anchor="middle" x="2111" y="-1043.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1879.01,-982.01C1936.4,-998.16 2018.93,-1021.38 2068.24,-1035.25"/>
<polygon fill="blue" stroke="blue" points="2067.36,-1038.64 2077.93,-1037.98 2069.26,-1031.9 2067.36,-1038.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node82"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1397.5,-982 1322.5,-982 1322.5,-946 1397.5,-946 1397.5,-982"/>
<text text-anchor="middle" x="1360" y="-960.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1397.61,-964C1469.87,-964 1632.41,-964 1731.39,-964"/>
<polygon fill="blue" stroke="blue" points="1731.65,-967.5 1741.65,-964 1731.65,-960.5 1731.65,-967.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="2517.5,-1092 2308.5,-1092 2308.5,-1056 2517.5,-1056 2517.5,-1092"/>
<text text-anchor="middle" x="2413" y="-1070.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2138.1,-1098.65C2173.74,-1095.44 2239.89,-1089.49 2298.26,-1084.24"/>
<polygon fill="blue" stroke="blue" points="2298.65,-1087.72 2308.3,-1083.33 2298.03,-1080.74 2298.65,-1087.72"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="1864.5,-1119 1763.5,-1119 1763.5,-1083 1864.5,-1083 1864.5,-1119"/>
<text text-anchor="middle" x="1814" y="-1097.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1864.71,-1101C1923.85,-1101 2021.18,-1101 2073.69,-1101"/>
<polygon fill="blue" stroke="blue" points="2073.88,-1104.5 2083.88,-1101 2073.88,-1097.5 2073.88,-1104.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1864.8,-1092.99C1896.41,-1087.81 1938.15,-1080.79 1975,-1074 2006.13,-1068.26 2041.17,-1061.24 2067.76,-1055.79"/>
<polygon fill="blue" stroke="blue" points="2068.78,-1059.15 2077.87,-1053.71 2067.37,-1052.3 2068.78,-1059.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2144.11,-1049.89C2180.82,-1053.19 2242.99,-1058.79 2298.2,-1063.76"/>
<polygon fill="blue" stroke="blue" points="2298.14,-1067.27 2308.42,-1064.68 2298.77,-1060.3 2298.14,-1067.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1912,-1065 1716,-1065 1716,-1029 1912,-1029 1912,-1065"/>
<text text-anchor="middle" x="1814" y="-1043.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1912.39,-1062.95C1933.08,-1066.47 1954.78,-1070.27 1975,-1074 2008.66,-1080.2 2046.91,-1087.92 2074.08,-1093.51"/>
<polygon fill="blue" stroke="blue" points="2073.41,-1096.94 2083.91,-1095.54 2074.83,-1090.09 2073.41,-1096.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1912,-1047C1964.68,-1047 2027.13,-1047 2067.61,-1047"/>
<polygon fill="blue" stroke="blue" points="2067.66,-1050.5 2077.66,-1047 2067.66,-1043.5 2067.66,-1050.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="1858,-1227 1770,-1227 1770,-1191 1858,-1191 1858,-1227"/>
<text text-anchor="middle" x="1814" y="-1205.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1858.23,-1206.09C1891.08,-1202.84 1936.95,-1196.05 1975,-1182 2012.55,-1168.13 2051.32,-1143.62 2077.62,-1125.19"/>
<polygon fill="blue" stroke="blue" points="2079.92,-1127.84 2086.04,-1119.19 2075.87,-1122.14 2079.92,-1127.84"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1858.2,-1213.62C1893.95,-1214.95 1943.75,-1210.65 1975,-1182 2011.55,-1148.49 1967.82,-1108.95 2003,-1074 2019.9,-1057.21 2045.61,-1050.36 2067.6,-1047.76"/>
<polygon fill="blue" stroke="blue" points="2068.08,-1051.23 2077.72,-1046.82 2067.44,-1044.26 2068.08,-1051.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1885.5,-1173 1742.5,-1173 1742.5,-1137 1885.5,-1137 1885.5,-1173"/>
<text text-anchor="middle" x="1814" y="-1151.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1885.57,-1143.56C1913.46,-1138.92 1945.77,-1133.39 1975,-1128 2008.66,-1121.8 2046.91,-1114.08 2074.08,-1108.49"/>
<polygon fill="blue" stroke="blue" points="2074.83,-1111.91 2083.91,-1106.46 2073.41,-1105.06 2074.83,-1111.91"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1885.72,-1156.62C1915.69,-1154.07 1949.5,-1146.58 1975,-1128 1996.85,-1112.08 1981.81,-1090.78 2003,-1074 2021.33,-1059.49 2046.5,-1052.67 2067.82,-1049.52"/>
<polygon fill="blue" stroke="blue" points="2068.45,-1052.97 2077.93,-1048.25 2067.57,-1046.02 2068.45,-1052.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M2517.51,-1074C2611.9,-1074 2750.3,-1074 2842.57,-1074"/>
<polygon fill="blue" stroke="blue" points="2842.75,-1077.5 2852.75,-1074 2842.75,-1070.5 2842.75,-1077.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node90"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1005,-899 930,-899 930,-863 1005,-863 1005,-899"/>
<text text-anchor="middle" x="967.5" y="-877.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node91"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="1505,-899 1215,-899 1215,-863 1505,-863 1505,-899"/>
<text text-anchor="middle" x="1360" y="-877.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1005.24,-881C1050.93,-881 1131.84,-881 1204.76,-881"/>
<polygon fill="blue" stroke="blue" points="1204.99,-884.5 1214.99,-881 1204.99,-877.5 1204.99,-884.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1505.12,-894.69C1550.41,-891.77 1597.74,-880.3 1633,-851 1656.58,-831.41 1629.99,-805.25 1653,-785 1669.15,-770.78 1689.92,-762.64 1711.1,-758.22"/>
<polygon fill="blue" stroke="blue" points="1711.96,-761.62 1721.18,-756.39 1710.71,-754.73 1711.96,-761.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="1965,-884 1663,-884 1663,-848 1965,-848 1965,-884"/>
<text text-anchor="middle" x="1814" y="-862.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1505.26,-876.21C1552.17,-874.66 1604.52,-872.92 1652.54,-871.32"/>
<polygon fill="blue" stroke="blue" points="1652.84,-874.82 1662.72,-870.99 1652.61,-867.82 1652.84,-874.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1505.29,-897.39C1551.39,-894.9 1599.18,-883 1633,-851 1672.27,-813.84 1614.81,-769.27 1653,-731 1668.29,-715.68 1688.81,-707.12 1710.05,-702.65"/>
<polygon fill="blue" stroke="blue" points="1710.96,-706.04 1720.18,-700.82 1709.72,-699.16 1710.96,-706.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1505.03,-876.71C1547.09,-872.38 1592.6,-864.62 1633,-851 1642.82,-847.69 1643.28,-842.59 1653,-839 1693.78,-823.94 1743.52,-817.23 1776.62,-814.27"/>
<polygon fill="blue" stroke="blue" points="1777.06,-817.74 1786.74,-813.43 1776.49,-810.77 1777.06,-817.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1906.67,-758.93C1930.68,-762.88 1955.33,-770.62 1975,-785 2055.17,-843.59 2091.37,-963.91 2104.2,-1018.7"/>
<polygon fill="blue" stroke="blue" points="2100.85,-1019.76 2106.45,-1028.75 2107.68,-1018.22 2100.85,-1019.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1868.07,-884.04C1900.17,-896.03 1941.28,-913.35 1975,-934 2016.34,-959.31 2058.27,-996.63 2084.19,-1021.36"/>
<polygon fill="blue" stroke="blue" points="2082.08,-1024.19 2091.71,-1028.61 2086.94,-1019.15 2082.08,-1024.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1907.78,-704.08C1931.67,-708.04 1955.97,-716.01 1975,-731 2068.7,-804.8 2098.39,-956.07 2106.89,-1018.79"/>
<polygon fill="blue" stroke="blue" points="2103.43,-1019.28 2108.17,-1028.75 2110.37,-1018.39 2103.43,-1019.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1841.18,-807.85C1876.93,-803.82 1940.51,-802.79 1975,-839 2047.55,-915.16 1933.56,-995 2003,-1074 2020.41,-1093.8 2050.03,-1100.12 2073.69,-1101.72"/>
<polygon fill="blue" stroke="blue" points="2073.61,-1105.22 2083.75,-1102.15 2073.91,-1098.23 2073.61,-1105.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="2139,-214 2083,-214 2083,-178 2139,-178 2139,-214"/>
<text text-anchor="middle" x="2111" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1953.43,-203.43C1997.35,-201.35 2042.35,-199.21 2072.77,-197.77"/>
<polygon fill="blue" stroke="blue" points="2073.07,-201.26 2082.9,-197.29 2072.74,-194.26 2073.07,-201.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="2139,-160 2083,-160 2083,-124 2139,-124 2139,-160"/>
<text text-anchor="middle" x="2111" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1911.59,-151.42C1966.66,-148.8 2032.52,-145.68 2072.79,-143.77"/>
<polygon fill="blue" stroke="blue" points="2073.13,-147.25 2082.95,-143.28 2072.8,-140.26 2073.13,-147.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="2146,-297 2076,-297 2076,-261 2146,-261 2146,-297"/>
<text text-anchor="middle" x="2111" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1967.25,-271.74C2003.32,-273.58 2039.01,-275.39 2065.68,-276.75"/>
<polygon fill="blue" stroke="blue" points="2065.64,-280.25 2075.81,-277.26 2066,-273.26 2065.64,-280.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<g id="a_node99"><a xlink:title="pub fn encode_receipt_serial_bytes(receipt_serial_bytes: ReceiptSerialBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..16].copy_from_slice(&amp;receipt_seria...">
<polygon fill="white" stroke="black" points="2817,-640 2607,-640 2607,-604 2817,-604 2817,-640"/>
<text text-anchor="middle" x="2712" y="-618.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M2722.16,-640.28C2757.35,-710.5 2883.97,-963.18 2925.9,-1046.87"/>
<polygon fill="blue" stroke="blue" points="2922.87,-1048.62 2930.47,-1055.99 2929.12,-1045.48 2922.87,-1048.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().</title>
<g id="a_node100"><a xlink:title="pub fn encode_redemption_time(redemption_time: u32) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..4].copy_from_slice(&amp;redemption_time.to_be_bytes()); &#160;&#160;&#160;&#160;Sca...">
<polygon fill="white" stroke="black" points="2807.5,-586 2616.5,-586 2616.5,-550 2807.5,-550 2807.5,-586"/>
<text text-anchor="middle" x="2712" y="-564.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_redemption_time</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M2807.71,-582.26C2814.04,-585.71 2819.91,-589.9 2825,-595 2889.86,-659.98 2926.47,-953.01 2936.59,-1045.76"/>
<polygon fill="blue" stroke="blue" points="2933.12,-1046.23 2937.67,-1055.8 2940.08,-1045.49 2933.12,-1046.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<g id="a_node101"><a xlink:title="pub(crate) fn convert_to_point_M2_receipt_serial_bytes( &#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, ) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let receipt_serial_scala...">
<polygon fill="white" stroke="black" points="2564,-297 2262,-297 2262,-261 2564,-261 2564,-297"/>
<text text-anchor="middle" x="2413" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_point_M2_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2419.04,-297.06C2435.2,-351.44 2491.06,-514.83 2599,-595 2600.86,-596.38 2602.78,-597.69 2604.75,-598.94"/>
<polygon fill="blue" stroke="blue" points="2603.27,-602.12 2613.7,-603.98 2606.71,-596.02 2603.27,-602.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<g id="a_node102"><a xlink:title="pub(crate) fn convert_to_points_receipt_struct( &#160;&#160;&#160;&#160;receipt: receipt_struct::ReceiptStruct, ) &#45;&gt; Vec&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let m1 = receipt.calc_m1(); &#160;...">
<polygon fill="white" stroke="black" points="2533,-243 2293,-243 2293,-207 2533,-207 2533,-243"/>
<text text-anchor="middle" x="2413" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_points_receipt_struct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2533.07,-224.73C2550.55,-229.88 2566.76,-238.41 2579,-252 2630.11,-308.72 2550.03,-536.42 2599,-595 2599.51,-595.6 2600.02,-596.2 2600.55,-596.78"/>
<polygon fill="blue" stroke="blue" points="2598.24,-599.41 2607.95,-603.66 2603.01,-594.29 2598.24,-599.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2139.15,-198.62C2171.88,-201.79 2229.17,-207.33 2282.84,-212.51"/>
<polygon fill="blue" stroke="blue" points="2282.52,-216 2292.81,-213.48 2283.2,-209.03 2282.52,-216"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2139.34,-148.62C2161,-153.93 2192,-161.68 2219,-169 2259.78,-180.06 2305.17,-193.19 2341.69,-203.95"/>
<polygon fill="blue" stroke="blue" points="2341.16,-207.45 2351.74,-206.92 2343.14,-200.73 2341.16,-207.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2146.12,-279C2172.67,-279 2211.59,-279 2251.51,-279"/>
<polygon fill="blue" stroke="blue" points="2251.68,-282.5 2261.68,-279 2251.68,-275.5 2251.68,-282.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node106"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="1431,-708 1289,-708 1289,-672 1431,-672 1431,-708"/>
<text text-anchor="middle" x="1360" y="-686.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.08,-687.33C1487.34,-687.44 1567.48,-692.72 1633,-717 1643.17,-720.77 1642.96,-726.89 1653,-731 1671.29,-738.49 1691.56,-743.91 1711.37,-747.82"/>
<polygon fill="blue" stroke="blue" points="1710.88,-751.29 1721.35,-749.68 1712.16,-744.41 1710.88,-751.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.13,-692.17C1505.83,-694.49 1624.83,-698.17 1710.13,-700.81"/>
<polygon fill="blue" stroke="blue" points="1710.26,-704.32 1720.37,-701.13 1710.48,-697.32 1710.26,-704.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1431.1,-677.03C1491.42,-670.09 1577.27,-670.83 1633,-717 1657.26,-737.1 1629.44,-764.09 1653,-785 1686.75,-814.96 1740.91,-818 1776.72,-816.07"/>
<polygon fill="blue" stroke="blue" points="1777.02,-819.56 1786.75,-815.38 1776.54,-812.58 1777.02,-819.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node107"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="1488.5,-816 1231.5,-816 1231.5,-780 1488.5,-780 1488.5,-816"/>
<text text-anchor="middle" x="1360" y="-794.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1488.71,-786.7C1559.23,-780.46 1645.61,-772.81 1711.48,-766.98"/>
<polygon fill="blue" stroke="blue" points="1711.81,-770.47 1721.46,-766.1 1711.19,-763.5 1711.81,-770.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1488.71,-801.96C1586.68,-804.99 1715.26,-808.97 1776.94,-810.88"/>
<polygon fill="blue" stroke="blue" points="1776.85,-814.38 1786.95,-811.19 1777.07,-807.39 1776.85,-814.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node108"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="1461.5,-762 1258.5,-762 1258.5,-726 1461.5,-726 1461.5,-762"/>
<text text-anchor="middle" x="1360" y="-740.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1461.59,-747.12C1535.76,-749.41 1636.28,-752.53 1710.82,-754.84"/>
<polygon fill="blue" stroke="blue" points="1711.05,-758.34 1721.16,-755.16 1711.27,-751.35 1711.05,-758.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1461.61,-741.9C1514.13,-743.78 1578.6,-750.84 1633,-771 1643.17,-774.77 1642.96,-780.89 1653,-785 1693.34,-801.53 1743.37,-807.94 1776.64,-810.43"/>
<polygon fill="blue" stroke="blue" points="1776.61,-813.93 1786.82,-811.11 1777.08,-806.95 1776.61,-813.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node109"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="1395.5,-106 1324.5,-106 1324.5,-70 1395.5,-70 1395.5,-106"/>
<text text-anchor="middle" x="1360" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1395.93,-85.39C1451.93,-83.08 1562.66,-86.47 1633,-141 1649.34,-153.67 1636.5,-170.54 1653,-183 1657,-186.02 1661.23,-188.76 1665.62,-191.23"/>
<polygon fill="blue" stroke="blue" points="1664.35,-194.51 1674.85,-195.93 1667.53,-188.27 1664.35,-194.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1395.72,-93.22C1461.27,-103.08 1605.69,-124.81 1706.14,-139.92"/>
<polygon fill="blue" stroke="blue" points="1705.92,-143.43 1716.33,-141.46 1706.96,-136.51 1705.92,-143.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1395.67,-83.7C1453.35,-78.65 1568.97,-77.8 1633,-141 1664.02,-171.62 1621.6,-206.78 1653,-237 1653.84,-237.81 1654.69,-238.59 1655.55,-239.36"/>
<polygon fill="blue" stroke="blue" points="1653.68,-242.34 1663.7,-245.79 1658.02,-236.85 1653.68,-242.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node110"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="1446,-52 1274,-52 1274,-16 1446,-16 1446,-52"/>
<text text-anchor="middle" x="1360" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1446.07,-40.23C1609.75,-52.53 1954.29,-80.15 1975,-96 2002.59,-117.12 1977.01,-145.93 2003,-169 2021.93,-185.8 2049.81,-192.45 2072.36,-194.95"/>
<polygon fill="blue" stroke="blue" points="2072.35,-198.47 2082.62,-195.85 2072.97,-191.49 2072.35,-198.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1446.2,-23.86C1566.9,-12.47 1793.22,-2.2 1975,-58 2015,-70.28 2054.97,-97.47 2080.91,-117.61"/>
<polygon fill="blue" stroke="blue" points="2078.81,-120.41 2088.83,-123.87 2083.16,-114.92 2078.81,-120.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1446.24,-24.39C1503.02,-22.13 1577.17,-27.47 1633,-61 1646.74,-69.25 1639.3,-82.69 1653,-91 1714.53,-128.35 1921.25,-78.13 1975,-126 2016.87,-163.29 1964.35,-208.39 2003,-249 2019.19,-266.01 2044.17,-273.63 2065.93,-276.94"/>
<polygon fill="blue" stroke="blue" points="2065.62,-280.43 2075.98,-278.21 2066.49,-273.48 2065.62,-280.43"/>
</g>
</g>
</svg>
