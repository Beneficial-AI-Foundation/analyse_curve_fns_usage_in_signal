digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "mod.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." [label="vartime_double_base_mul", tooltip="pub fn vartime_double_base_mul(a: &Scalar, A: &EdwardsPoint, b: &Scalar) -> EdwardsPoint {     match get_selected_backend() {         #[cfg(curve25519_dalek_backend = ' simd' )]         BackendKind::A...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "vartime_double_base.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul()." [label="mul", tooltip="pub fn mul(a: &Scalar, A: &EdwardsPoint, b: &Scalar) -> EdwardsPoint {     let a_naf = a.non_adjacent_form(5);      #[cfg(feature = ' precomputed-tables' )]     let b_naf = b.non_adjacent_form(8);    ...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "vartime_double_base.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/scalar_mul/vartime_double_base/spec_avx2/mul()." [label="mul", tooltip="    pub fn mul(a: &Scalar, A: &EdwardsPoint, b: &Scalar) -> EdwardsPoint {         let a_naf = a.non_adjacent_form(5);          #[cfg(feature = ' precomputed-tables' )]         let b_naf = b.non_adjac...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_3 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [label="vartime_double_scalar_mul_basepoint", tooltip="    pub fn vartime_double_scalar_mul_basepoint(         a: &Scalar,         A: &EdwardsPoint,         b: &Scalar,     ) -> EdwardsPoint {         crate::backend::vartime_double_base_mul(a, A, b)     }", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_4 {
    label = "scalar.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]non_adjacent_form()." [label="non_adjacent_form", tooltip="    pub(crate) fn non_adjacent_form(&self, w: usize) -> [i8; 256] {         // required by the NAF definition         debug_assert!(w >= 2);         // required so that the NAF digits fit in i8       ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/read_le_u64_into()." [label="read_le_u64_into", tooltip="fn read_le_u64_into(src: &[u8], dst: &mut [u64]) {     assert!(         src.len() == 8 * dst.len(),         ' src.len() = {}, dst.len() = {}' ,         src.len(),         dst.len()     );     for (byt...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_5 {
    label = "curve25519.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/scalar_mul/vartime_double_base/spec_avx2/mul()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]non_adjacent_form()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/read_le_u64_into()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/scalar_mul/vartime_double_base/spec_avx2/mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]non_adjacent_form()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 scalar/impl#[Scalar]non_adjacent_form()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [color=blue]
}
