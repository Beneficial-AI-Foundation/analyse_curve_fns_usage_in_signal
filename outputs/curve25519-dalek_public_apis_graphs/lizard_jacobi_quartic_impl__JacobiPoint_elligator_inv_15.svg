<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="1388pt" height="618pt"
 viewBox="0.00 0.00 1388.00 618.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 614)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-614 1384,-614 1384,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1248,-307 1248,-382 1379,-382 1379,-307 1248,-307"/>
<text text-anchor="middle" x="1313.5" y="-366.8" font-family="Helvetica,sans-Serif" font-size="14.00">jacobi_quartic.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="804,-280 804,-409 1228,-409 1228,-280 804,-280"/>
<text text-anchor="middle" x="1016" y="-393.8" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_ristretto.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="138.5,-145 138.5,-328 436.5,-328 436.5,-145 138.5,-145"/>
<text text-anchor="middle" x="287.5" y="-312.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="0,-500 0,-575 118,-575 118,-500 0,-500"/>
<text text-anchor="middle" x="59" y="-559.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="165.5,-473 165.5,-602 409.5,-602 409.5,-473 165.5,-473"/>
<text text-anchor="middle" x="287.5" y="-586.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="510.5,-101 510.5,-176 624.5,-176 624.5,-101 510.5,-101"/>
<text text-anchor="middle" x="567.5" y="-160.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="484,-390 484,-519 651,-519 651,-390 484,-390"/>
<text text-anchor="middle" x="567.5" y="-503.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="457,-527 457,-602 784,-602 784,-527 457,-527"/>
<text text-anchor="middle" x="620.5" y="-586.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="483.5,-253 483.5,-382 784,-382 784,-253 483.5,-253"/>
<text text-anchor="middle" x="633.75" y="-366.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="138,-8 138,-137 437,-137 437,-8 138,-8"/>
<text text-anchor="middle" x="287.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="160,-336 160,-465 415,-465 415,-336 160,-336"/>
<text text-anchor="middle" x="287.5" y="-449.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn elligator_inv(&amp;self) &#45;&gt; (Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut out = FieldElement::ZERO; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Special case: s = 0. &#160;If s is zero, either t = 1 or t = &#45;1. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// If t=1, ...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1364,-351 1263,-351 1263,-315 1364,-315 1364,-351"/>
<text text-anchor="middle" x="1313.5" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_inv</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn lizard_decode&lt;D: Digest&gt;(&amp;self) &#45;&gt; Option&lt;[u8; 16]&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U32&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut result: [u8; 16] = Default::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut h: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="934,-324 823,-324 823,-288 934,-288 934,-324"/>
<text text-anchor="middle" x="878.5" y="-302.3" font-family="Helvetica,sans-Serif" font-size="14.00">lizard_decode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub fn elligator_ristretto_flavor_inverse(&amp;self) &#45;&gt; (u8, [FieldElement; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Elligator2 computes a Point from a FieldElement in two steps: first &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// it computes a (s,t) on the J...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1220,-351 981,-351 981,-315 1220,-315 1220,-351"/>
<text text-anchor="middle" x="1100.5" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">elligator_ristretto_flavor_inverse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M934.16,-312.71C945.51,-314.1 957.92,-315.62 970.68,-317.19"/>
<polygon fill="gray" stroke="gray" points="970.62,-320.71 980.97,-318.45 971.47,-313.76 970.62,-320.71"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn decode_253_bits(&amp;self) &#45;&gt; (u8, [[u8; 32]; 8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut ret = [[0u8; 32]; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (mask, fes) = self.elligator_ristretto_flavor_inverse(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="945,-378 812,-378 812,-342 945,-342 945,-378"/>
<text text-anchor="middle" x="878.5" y="-356.3" font-family="Helvetica,sans-Serif" font-size="14.00">decode_253_bits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M945.21,-351.94C953.4,-350.93 961.98,-349.88 970.72,-348.8"/>
<polygon fill="gray" stroke="gray" points="971.15,-352.28 980.65,-347.59 970.3,-345.33 971.15,-352.28"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]elligator_ristretto_flavor_inverse().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/jacobi_quartic/impl#[JacobiPoint]elligator_inv().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1220.26,-333C1231.5,-333 1242.55,-333 1252.86,-333"/>
<polygon fill="gray" stroke="gray" points="1252.91,-336.5 1262.91,-333 1252.91,-329.5 1252.91,-336.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node5"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="428.5,-243 146.5,-243 146.5,-207 428.5,-207 428.5,-243"/>
<text text-anchor="middle" x="287.5" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="643,-434 492,-434 492,-398 643,-398 643,-434"/>
<text text-anchor="middle" x="567.5" y="-412.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M426.7,-243.06C430.36,-245.74 433.81,-248.71 437,-252 478.9,-295.25 417.03,-340.96 457,-386 463.99,-393.88 472.83,-399.77 482.45,-404.17"/>
<polygon fill="blue" stroke="blue" points="481.28,-407.48 491.87,-407.95 483.89,-400.98 481.28,-407.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node6"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="427,-297 148,-297 148,-261 427,-261 427,-297"/>
<text text-anchor="middle" x="287.5" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="640.5,-488 494.5,-488 494.5,-452 640.5,-452 640.5,-488"/>
<text text-anchor="middle" x="567.5" y="-466.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M385.17,-297.07C404.75,-304.87 423.46,-316.03 437,-332 469.41,-370.24 422.7,-406.45 457,-443 464.64,-451.14 474.32,-457 484.73,-461.18"/>
<polygon fill="blue" stroke="blue" points="483.88,-464.59 494.48,-464.57 486.18,-457.98 483.88,-464.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node7"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="423.5,-189 151.5,-189 151.5,-153 423.5,-153 423.5,-189"/>
<text text-anchor="middle" x="287.5" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="616.5,-145 518.5,-145 518.5,-109 616.5,-109 616.5,-145"/>
<text text-anchor="middle" x="567.5" y="-123.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M402.38,-152.98C438.75,-147.22 477.5,-141.09 508.21,-136.23"/>
<polygon fill="blue" stroke="blue" points="508.97,-139.65 518.3,-134.63 507.87,-132.74 508.97,-139.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node8"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="96,-544 21,-544 21,-508 96,-508 96,-544"/>
<text text-anchor="middle" x="58.5" y="-522.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node9"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="395.5,-571 179.5,-571 179.5,-535 395.5,-535 395.5,-571"/>
<text text-anchor="middle" x="287.5" y="-549.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M96.22,-530.37C116.36,-532.76 142.57,-535.88 169.07,-539.03"/>
<polygon fill="blue" stroke="blue" points="168.88,-542.53 179.23,-540.24 169.71,-535.58 168.88,-542.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node10"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="401.5,-517 173.5,-517 173.5,-481 401.5,-481 401.5,-517"/>
<text text-anchor="middle" x="287.5" y="-495.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M96.22,-521.63C114.86,-519.42 138.7,-516.58 163.15,-513.67"/>
<polygon fill="blue" stroke="blue" points="163.77,-517.12 173.28,-512.47 162.94,-510.17 163.77,-517.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M395.86,-536.5C409.82,-533.47 423.83,-529.99 437,-526 466,-517.22 497.21,-503.85 521.72,-492.38"/>
<polygon fill="blue" stroke="blue" points="523.24,-495.53 530.77,-488.08 520.24,-489.21 523.24,-495.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M401.69,-485.12C414.12,-481.01 426.17,-475.75 437,-469 449.37,-461.29 444.79,-450.97 457,-443 464.71,-437.97 473.27,-433.88 482.12,-430.54"/>
<polygon fill="blue" stroke="blue" points="483.49,-433.78 491.82,-427.22 481.22,-427.15 483.49,-433.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M401.57,-487.2C429.18,-484.33 458.19,-481.3 484.06,-478.6"/>
<polygon fill="blue" stroke="blue" points="484.6,-482.06 494.18,-477.54 483.88,-475.1 484.6,-482.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="776,-324 706,-324 706,-288 776,-288 776,-324"/>
<text text-anchor="middle" x="741" y="-302.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M585.89,-145.15C616.58,-177.18 680.41,-243.81 715.53,-280.46"/>
<polygon fill="blue" stroke="blue" points="713.12,-283 722.57,-287.8 718.17,-278.16 713.12,-283"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="776,-571 706,-571 706,-535 776,-535 776,-571"/>
<text text-anchor="middle" x="741" y="-549.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M643.26,-428.94C652.78,-432.53 661.98,-437.13 670,-443 698.54,-463.9 718.32,-500.27 729.4,-525.43"/>
<polygon fill="blue" stroke="blue" points="726.24,-526.95 733.35,-534.8 732.69,-524.23 726.24,-526.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M640.66,-458.94C651.22,-455.09 661.42,-449.93 670,-443 704.73,-414.96 723.95,-365.15 733.1,-333.94"/>
<polygon fill="blue" stroke="blue" points="736.52,-334.7 735.83,-324.13 729.78,-332.83 736.52,-334.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]decode_253_bits().</title>
<path fill="none" stroke="blue" d="M754.75,-534.84C778.76,-500.65 830.78,-426.55 858.77,-386.68"/>
<polygon fill="blue" stroke="blue" points="861.81,-388.44 864.69,-378.25 856.08,-384.42 861.81,-388.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="670,-571 465,-571 465,-535 670,-535 670,-571"/>
<text text-anchor="middle" x="567.5" y="-549.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M670.24,-553C679.07,-553 687.66,-553 695.63,-553"/>
<polygon fill="blue" stroke="blue" points="695.71,-556.5 705.71,-553 695.71,-549.5 695.71,-556.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="643.5,-351 491.5,-351 491.5,-315 643.5,-315 643.5,-351"/>
<text text-anchor="middle" x="567.5" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M643.72,-321.16C661.44,-318.37 679.77,-315.48 695.62,-312.99"/>
<polygon fill="blue" stroke="blue" points="696.31,-316.42 705.64,-311.41 695.22,-309.51 696.31,-316.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M776.19,-306C787.33,-306 800.08,-306 812.7,-306"/>
<polygon fill="blue" stroke="blue" points="812.75,-309.5 822.75,-306 812.75,-302.5 812.75,-309.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="643.5,-297 491.5,-297 491.5,-261 643.5,-261 643.5,-297"/>
<text text-anchor="middle" x="567.5" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M643.72,-290.84C661.44,-293.63 679.77,-296.52 695.62,-299.01"/>
<polygon fill="blue" stroke="blue" points="695.22,-302.49 705.64,-300.59 696.31,-295.58 695.22,-302.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node19"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="429,-106 146,-106 146,-70 429,-70 429,-106"/>
<text text-anchor="middle" x="287.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M416.92,-106.02C448.96,-110.51 481.76,-115.11 508.45,-118.86"/>
<polygon fill="blue" stroke="blue" points="507.97,-122.32 518.36,-120.25 508.94,-115.39 507.97,-122.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node20"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="365.5,-52 209.5,-52 209.5,-16 365.5,-16 365.5,-52"/>
<text text-anchor="middle" x="287.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M365.51,-43.62C388.83,-47.69 414.28,-53.33 437,-61 469.15,-71.86 503.26,-89.52 528.4,-103.84"/>
<polygon fill="blue" stroke="blue" points="526.83,-106.98 537.23,-108.95 530.33,-100.92 526.83,-106.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node21"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="407,-434 168,-434 168,-398 407,-398 407,-434"/>
<text text-anchor="middle" x="287.5" y="-412.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M407.2,-416C432.14,-416 457.97,-416 481.39,-416"/>
<polygon fill="blue" stroke="blue" points="481.62,-419.5 491.62,-416 481.62,-412.5 481.62,-419.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M381.46,-434.06C414.79,-440.53 452.1,-447.78 484.44,-454.06"/>
<polygon fill="blue" stroke="blue" points="483.82,-457.51 494.31,-455.98 485.16,-450.63 483.82,-457.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().</title>
<g id="a_node22"><a xlink:title="fn test_lizard() { &#160;&#160;&#160;&#160;let p = RistrettoPoint::lizard_encode::&lt;Sha256&gt;(&amp;zkgroup::common::constants::TEST_ARRAY_16); &#160;&#160;&#160;&#160;let data_out = p.lizard_decode::&lt;Sha256&gt;(); &#160;&#160;&#160;&#160;assert_hex_eq!(data_out.unwrap()...">
<polygon fill="white" stroke="black" points="331,-380 244,-380 244,-344 331,-344 331,-380"/>
<text text-anchor="middle" x="287.5" y="-358.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lizard</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_lizard().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 lizard/lizard_ristretto/impl#[RistrettoPoint]lizard_decode().</title>
<path fill="none" stroke="blue" d="M331.2,-364.91C364.33,-364.74 409.16,-358.83 437,-332 464.32,-305.67 427.19,-272.48 457,-249 571.17,-159.07 644.08,-209.71 784,-249 807.12,-255.49 830.19,-269.46 847.63,-281.94"/>
<polygon fill="blue" stroke="blue" points="845.59,-284.78 855.72,-287.91 849.75,-279.15 845.59,-284.78"/>
</g>
</g>
</svg>
