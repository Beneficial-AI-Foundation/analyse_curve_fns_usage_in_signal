<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="1761pt" height="897pt"
 viewBox="0.00 0.00 1761.00 897.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 893)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-893 1757,-893 1757,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1309,-204 1309,-279 1440,-279 1440,-204 1309,-204"/>
<text text-anchor="middle" x="1374.5" y="-263.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1537,-395 1537,-470 1745,-470 1745,-395 1537,-395"/>
<text text-anchor="middle" x="1641" y="-454.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="674,-698 674,-881 1212,-881 1212,-698 674,-698"/>
<text text-anchor="middle" x="943" y="-865.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="299,-204 299,-279 642,-279 642,-204 299,-204"/>
<text text-anchor="middle" x="470.5" y="-263.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-121 8,-196 635.5,-196 635.5,-121 8,-121"/>
<text text-anchor="middle" x="321.75" y="-180.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="456,-287 456,-524 1517,-524 1517,-287 456,-287"/>
<text text-anchor="middle" x="986.5" y="-508.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="520,-8 520,-83 590,-83 590,-8 520,-8"/>
<text text-anchor="middle" x="555" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">env.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="1295,-739 1295,-814 1629,-814 1629,-739 1295,-739"/>
<text text-anchor="middle" x="1462" y="-798.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="496.5,-615 496.5,-690 614.5,-690 614.5,-615 496.5,-615"/>
<text text-anchor="middle" x="555.5" y="-674.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="790,-615 790,-690 1096,-690 1096,-615 790,-615"/>
<text text-anchor="middle" x="943" y="-674.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="1267.5,-656 1267.5,-731 1482.5,-731 1482.5,-656 1267.5,-656"/>
<text text-anchor="middle" x="1375" y="-715.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="832,-532 832,-607 1054,-607 1054,-532 832,-532"/>
<text text-anchor="middle" x="943" y="-591.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn is_small_order(&amp;self) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.mul_by_cofactor().is_identity() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1432,-248 1317,-248 1317,-212 1432,-212 1432,-248"/>
<text text-anchor="middle" x="1374.5" y="-226.3" font-family="Helvetica,sans-Serif" font-size="14.00">is_small_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;fn is_identity(&amp;self) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(&amp;T::identity()).into() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1632,-439 1545,-439 1545,-403 1632,-403 1632,-439"/>
<text text-anchor="middle" x="1588.5" y="-417.3" font-family="Helvetica,sans-Serif" font-size="14.00">is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1432.29,-241.04C1460.41,-248.87 1493.31,-261.87 1517,-283 1550.37,-312.77 1570.13,-362.05 1579.88,-392.97"/>
<polygon fill="gray" stroke="gray" points="1576.57,-394.12 1582.81,-402.69 1583.28,-392.1 1576.57,-394.12"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/Identity#identity(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/Identity#identity().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;fn identity() &#45;&gt; Self; } &#160;/// Trait for testing if a curve point is equivalent to the identity point. pub trait IsIdentity { &#160;&#160;&#160;&#160;/// Return true if this element is the identity element of the curv...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1737,-439 1668,-439 1668,-403 1737,-403 1737,-439"/>
<text text-anchor="middle" x="1702.5" y="-417.3" font-family="Helvetica,sans-Serif" font-size="14.00">identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/Identity#identity(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/Identity#identity().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1632.16,-421C1640.42,-421 1649.09,-421 1657.39,-421"/>
<polygon fill="gray" stroke="gray" points="1657.66,-424.5 1667.66,-421 1657.66,-417.5 1657.66,-424.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node4"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="1200,-850 686,-850 686,-814 1200,-814 1200,-850"/>
<text text-anchor="middle" x="943" y="-828.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;pub fn combine( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;endorsements: impl IntoIterator&lt;Item = GroupSendEndorsement&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; GroupSendEndorsement { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut endorsements = endorsements.into_iter(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Some(mut ...">
<polygon fill="white" stroke="black" points="1412.5,-700 1336.5,-700 1336.5,-664 1412.5,-664 1412.5,-700"/>
<text text-anchor="middle" x="1374.5" y="-678.3" font-family="Helvetica,sans-Serif" font-size="14.00">combine</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1198.97,-813.83C1203.45,-811.1 1207.8,-808.16 1212,-805 1238.77,-784.85 1216.28,-758.66 1240,-735 1263.27,-711.79 1297.97,-698.43 1326.16,-690.93"/>
<polygon fill="blue" stroke="blue" points="1327.36,-694.24 1336.22,-688.42 1325.67,-687.44 1327.36,-694.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_Combine(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_Combine().</title>
<g id="a_node5"><a xlink:title="fn GroupSendEndorsement_Combine(endorsements: Vec&lt;&amp;[u8]&gt;) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let combined = GroupSendEndorsement::combine( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;endorsements &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.into_iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|next| zkgroup::...">
<polygon fill="white" stroke="black" points="1070.5,-796 815.5,-796 815.5,-760 1070.5,-760 1070.5,-796"/>
<text text-anchor="middle" x="943" y="-774.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_Combine</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_Combine().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_Combine().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1070.64,-776.1C1116.07,-772.6 1167.13,-765.36 1212,-751 1225.65,-746.63 1227.08,-741.22 1240,-735 1268.19,-721.43 1300.82,-708.43 1326.76,-698.7"/>
<polygon fill="blue" stroke="blue" points="1328.2,-701.9 1336.35,-695.14 1325.76,-695.34 1328.2,-701.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node6"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1204,-742 682,-742 682,-706 1204,-706 1204,-742"/>
<text text-anchor="middle" x="943" y="-720.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1128.33,-705.97C1200.82,-698.89 1278.03,-691.34 1326.02,-686.64"/>
<polygon fill="blue" stroke="blue" points="1326.49,-690.11 1336.1,-685.66 1325.8,-683.15 1326.49,-690.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node7"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="382,-248 307,-248 307,-212 382,-212 382,-248"/>
<text text-anchor="middle" x="344.5" y="-226.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node8"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="634,-248 476,-248 476,-212 634,-212 634,-248"/>
<text text-anchor="middle" x="555" y="-226.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M382.3,-230C405.41,-230 436.27,-230 465.45,-230"/>
<polygon fill="blue" stroke="blue" points="465.69,-233.5 475.69,-230 465.69,-226.5 465.69,-233.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn try_from(public_key: [u8; 32]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match CompressedEdwardsY(public_key).decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Error::InvalidCurvePoint), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(pt) if pt.is_sma...">
<polygon fill="white" stroke="black" points="980.5,-331 905.5,-331 905.5,-295 980.5,-295 980.5,-331"/>
<text text-anchor="middle" x="943" y="-309.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M634.11,-246.8C712.53,-263.66 830.73,-289.07 895.49,-303"/>
<polygon fill="blue" stroke="blue" points="894.9,-306.45 905.41,-305.13 896.37,-299.61 894.9,-306.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node9"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="428,-165 261,-165 261,-129 428,-129 428,-165"/>
<text text-anchor="middle" x="344.5" y="-143.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node11"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="627.5,-165 482.5,-165 482.5,-129 627.5,-129 627.5,-165"/>
<text text-anchor="middle" x="555" y="-143.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M428.2,-147C442.57,-147 457.5,-147 471.85,-147"/>
<polygon fill="blue" stroke="blue" points="472.18,-150.5 482.18,-147 472.18,-143.5 472.18,-150.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="225,-165 16,-165 16,-129 225,-129 225,-165"/>
<text text-anchor="middle" x="120.5" y="-143.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M225.03,-147C233.54,-147 242.12,-147 250.56,-147"/>
<polygon fill="blue" stroke="blue" points="250.76,-150.5 260.76,-147 250.76,-143.5 250.76,-150.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M191.14,-128.91C293.29,-105.59 488.68,-73.24 646,-120 757.97,-153.28 867.12,-243.82 915.71,-288.03"/>
<polygon fill="blue" stroke="blue" points="913.52,-290.77 923.25,-294.97 918.26,-285.62 913.52,-290.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="999.5,-493 886.5,-493 886.5,-457 999.5,-457 999.5,-493"/>
<text text-anchor="middle" x="943" y="-471.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M604.54,-165.11C620.24,-173.37 636.13,-184.79 646,-200 676.19,-246.53 634.55,-409.02 674,-448 726.31,-499.68 815.47,-498.06 876.48,-489.12"/>
<polygon fill="blue" stroke="blue" points="877.06,-492.57 886.39,-487.57 875.97,-485.66 877.06,-492.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<g id="a_node16"><a xlink:title="fn encode_to_curve_try_and_increment(salt: &amp;[u8], data: &amp;[u8]) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;&#160;for i in 0u8..=u8::MAX { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...">
<polygon fill="white" stroke="black" points="1509,-439 1240,-439 1240,-403 1509,-403 1509,-439"/>
<text text-anchor="middle" x="1374.5" y="-417.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.56,-470.47C1053.84,-465.79 1138.77,-457.8 1212,-448 1228.1,-445.85 1245.06,-443.31 1261.69,-440.66"/>
<polygon fill="blue" stroke="blue" points="1262.68,-444.05 1271.99,-439.01 1261.57,-437.14 1262.68,-444.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="646,-466 464,-466 464,-430 646,-430 646,-466"/>
<text text-anchor="middle" x="555" y="-444.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M646.01,-454.3C716.39,-459.22 812.6,-465.95 875.98,-470.38"/>
<polygon fill="blue" stroke="blue" points="876.03,-473.89 886.25,-471.1 876.52,-466.91 876.03,-473.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M576.56,-429.86C594.92,-413.57 622.47,-388.92 646,-367 658.65,-355.22 658.31,-347.27 674,-340 745.75,-306.76 839.65,-305.65 895.13,-308.73"/>
<polygon fill="blue" stroke="blue" points="895.16,-312.24 905.36,-309.37 895.6,-305.25 895.16,-312.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn try_and_increment_terminates() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(data: [u8; 34])| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _ = encode_to_curve_try_and_increment(&amp;data[..32], &amp;data[32..]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1056.5,-385 829.5,-385 829.5,-349 1056.5,-349 1056.5,-385"/>
<text text-anchor="middle" x="943" y="-363.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_and_increment_terminates</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1056.66,-376.7C1104.62,-381.26 1161.13,-387.19 1212,-394 1228.1,-396.15 1245.06,-398.69 1261.69,-401.34"/>
<polygon fill="blue" stroke="blue" points="1261.57,-404.86 1271.99,-402.99 1262.68,-397.95 1261.57,-404.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().</title>
<path fill="none" stroke="blue" d="M980.62,-305.92C1052.97,-291.94 1215.14,-260.6 1306.91,-242.87"/>
<polygon fill="blue" stroke="blue" points="1307.77,-246.27 1316.92,-240.93 1306.44,-239.39 1307.77,-246.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/impl#[T][IsIdentity]is_identity().</title>
<path fill="none" stroke="blue" d="M1509.16,-421C1518.01,-421 1526.59,-421 1534.62,-421"/>
<polygon fill="blue" stroke="blue" points="1534.84,-424.5 1544.84,-421 1534.84,-417.5 1534.84,-424.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="628,-358 482,-358 482,-322 628,-322 628,-358"/>
<text text-anchor="middle" x="555" y="-336.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M576.56,-358.14C594.92,-374.43 622.47,-399.08 646,-421 658.65,-432.78 658.31,-440.73 674,-448 738.11,-477.7 819.9,-481.75 876.17,-480.08"/>
<polygon fill="blue" stroke="blue" points="876.51,-483.57 886.37,-479.7 876.25,-476.57 876.51,-483.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M628.15,-334.95C706.34,-329.48 828.81,-320.92 895.29,-316.27"/>
<polygon fill="blue" stroke="blue" points="895.73,-319.75 905.46,-315.56 895.24,-312.76 895.73,-319.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn test_encode_to_curve_try_and_increment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let got = encode_to_curve_try_and_increment(&amp;v.pk, v.alpha) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.compress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.0...">
<polygon fill="white" stroke="black" points="1094,-439 792,-439 792,-403 1094,-403 1094,-439"/>
<text text-anchor="middle" x="943" y="-417.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1094.22,-421C1138.21,-421 1186.17,-421 1229.75,-421"/>
<polygon fill="blue" stroke="blue" points="1229.85,-424.5 1239.85,-421 1229.85,-417.5 1229.85,-424.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn from(src: KeyTransConfig) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let KeyTransConfig { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;vrf_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auditor_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = src; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s...">
<polygon fill="white" stroke="black" points="582,-52 528,-52 528,-16 582,-16 582,-52"/>
<text text-anchor="middle" x="555" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M582.11,-48.28C600.35,-58.52 625.09,-72.93 646,-87 747.08,-155 859.72,-245.33 912.14,-288.28"/>
<polygon fill="blue" stroke="blue" points="910.08,-291.12 920.03,-294.76 914.52,-285.71 910.08,-291.12"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1446,-783 1303,-783 1303,-747 1446,-747 1446,-783"/>
<text text-anchor="middle" x="1374.5" y="-761.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn default() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This could actually just be a synthesized Default, because the Default for both &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// RistrettoPoint and CompressedRistretto is the identity point. But havin...">
<polygon fill="white" stroke="black" points="1621,-783 1556,-783 1556,-747 1621,-747 1621,-783"/>
<text text-anchor="middle" x="1588.5" y="-761.3" font-family="Helvetica,sans-Serif" font-size="14.00">default</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1446.09,-765C1479.1,-765 1517.27,-765 1545.63,-765"/>
<polygon fill="blue" stroke="blue" points="1545.99,-768.5 1555.99,-765 1545.99,-761.5 1545.99,-768.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/Identity#identity(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 traits/Identity#identity().</title>
<path fill="none" stroke="blue" d="M1595.36,-746.99C1613.73,-690.58 1670.24,-517.02 1692.42,-448.88"/>
<polygon fill="blue" stroke="blue" points="1695.79,-449.84 1695.56,-439.25 1689.14,-447.67 1695.79,-449.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node22"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="592.5,-659 517.5,-659 517.5,-623 592.5,-623 592.5,-659"/>
<text text-anchor="middle" x="555" y="-637.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node23"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="1088,-659 798,-659 798,-623 1088,-623 1088,-659"/>
<text text-anchor="middle" x="943" y="-637.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M592.66,-641C637.51,-641 716.28,-641 787.68,-641"/>
<polygon fill="blue" stroke="blue" points="787.71,-644.5 797.71,-641 787.71,-637.5 787.71,-644.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1088.21,-654.77C1170.8,-662.65 1269.05,-672.03 1326.05,-677.47"/>
<polygon fill="blue" stroke="blue" points="1325.91,-680.97 1336.19,-678.44 1326.57,-674 1325.91,-680.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;Storage&gt;`][Default]default().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1412.61,-695.4C1441.26,-705.86 1481.8,-720.93 1517,-735 1526.54,-738.81 1536.74,-743.06 1546.34,-747.13"/>
<polygon fill="blue" stroke="blue" points="1545.11,-750.41 1555.69,-751.11 1547.86,-743.97 1545.11,-750.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node25"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="1014,-576 872,-576 872,-540 1014,-540 1014,-576"/>
<text text-anchor="middle" x="943" y="-554.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]combine().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1014.18,-567.57C1068.86,-576.05 1146.28,-590.33 1212,-611 1252.95,-623.88 1297.47,-643.94 1329.38,-659.46"/>
<polygon fill="blue" stroke="blue" points="1327.93,-662.64 1338.44,-663.91 1331.01,-656.36 1327.93,-662.64"/>
</g>
</g>
</svg>
