<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="6347pt" height="12570pt"
 viewBox="0.00 0.00 6347.00 12570.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 12566)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-12566 6343,-12566 6343,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5869,-11860 5869,-11989 6331,-11989 6331,-11860 5869,-11860"/>
<text text-anchor="middle" x="6100" y="-11973.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5206,-11730 5206,-11967 5849,-11967 5849,-11730 5206,-11730"/>
<text text-anchor="middle" x="5527.5" y="-11951.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4183.5,-12117 4183.5,-12192 5080.5,-12192 5080.5,-12117 4183.5,-12117"/>
<text text-anchor="middle" x="4632" y="-12176.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3222,-12200 3222,-12275 4740.5,-12275 4740.5,-12200 3222,-12200"/>
<text text-anchor="middle" x="3981.25" y="-12259.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="1185.5,-4159 1185.5,-4234 1451.5,-4234 1451.5,-4159 1185.5,-4159"/>
<text text-anchor="middle" x="1318.5" y="-4218.8" font-family="Helvetica,sans-Serif" font-size="14.00">message_backup.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="32.5,-12425 32.5,-12554 284.5,-12554 284.5,-12425 32.5,-12425"/>
<text text-anchor="middle" x="158.5" y="-12538.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="2457,-3019 2457,-3742 2747,-3742 2747,-3019 2457,-3019"/>
<text text-anchor="middle" x="2602" y="-3726.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="3670.5,-4545 3670.5,-4782 3883.5,-4782 3883.5,-4545 3670.5,-4545"/>
<text text-anchor="middle" x="3777" y="-4766.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="2960,-9091 2960,-11542 3556,-11542 3556,-9091 2960,-9091"/>
<text text-anchor="middle" x="3258" y="-11526.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="3212.5,-2965 3212.5,-3040 3829.5,-3040 3829.5,-2965 3212.5,-2965"/>
<text text-anchor="middle" x="3521" y="-3024.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="4177,-1413 4177,-1488 4281,-1488 4281,-1413 4177,-1413"/>
<text text-anchor="middle" x="4229" y="-1472.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="4139,-2915 4139,-3084 5186,-3084 5186,-2915 4139,-2915"/>
<text text-anchor="middle" x="4662.5" y="-3068.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="4920.5,-3092 4920.5,-3221 5380,-3221 5380,-3092 4920.5,-3092"/>
<text text-anchor="middle" x="5150.25" y="-3205.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="729,-12371 729,-12446 1118,-12446 1118,-12371 729,-12371"/>
<text text-anchor="middle" x="923.5" y="-12430.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1252.5,-12115 1252.5,-12244 1384.5,-12244 1384.5,-12115 1252.5,-12115"/>
<text text-anchor="middle" x="1318.5" y="-12228.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="1485,-12138 1485,-12267 2711.5,-12267 2711.5,-12138 1485,-12138"/>
<text text-anchor="middle" x="2098.25" y="-12251.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="4558,-12283 4558,-12412 5084.5,-12412 5084.5,-12283 4558,-12283"/>
<text text-anchor="middle" x="4821.25" y="-12396.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="1235.5,-4022 1235.5,-4151 1401.5,-4151 1401.5,-4022 1235.5,-4022"/>
<text text-anchor="middle" x="1318.5" y="-4135.8" font-family="Helvetica,sans-Serif" font-size="14.00">validation.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="1234.5,-4408 1234.5,-4827 2665,-4827 2665,-4408 1234.5,-4408"/>
<text text-anchor="middle" x="1949.75" y="-4811.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="3175.5,-4408 3175.5,-4537 3866,-4537 3866,-4408 3175.5,-4408"/>
<text text-anchor="middle" x="3520.75" y="-4521.8" font-family="Helvetica,sans-Serif" font-size="14.00">account_data.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="2044.5,-8301 2044.5,-8430 3353,-8430 3353,-8301 2044.5,-8301"/>
<text text-anchor="middle" x="2698.75" y="-8414.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="2490.5,-3947 2490.5,-4400 3837.5,-4400 3837.5,-3947 2490.5,-3947"/>
<text text-anchor="middle" x="3164" y="-4384.8" font-family="Helvetica,sans-Serif" font-size="14.00">recipient.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1172,-4835 1172,-5018 1686,-5018 1686,-4835 1172,-4835"/>
<text text-anchor="middle" x="1429" y="-5002.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialize.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1283.5,-4325 1283.5,-4400 1353.5,-4400 1353.5,-4325 1283.5,-4325"/>
<text text-anchor="middle" x="1318.5" y="-4384.8" font-family="Helvetica,sans-Serif" font-size="14.00">main.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1248,-4242 1248,-4317 1690.5,-4317 1690.5,-4242 1248,-4242"/>
<text text-anchor="middle" x="1469.25" y="-4301.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="2078,-8218 2078,-8293 3297,-8293 3297,-8218 2078,-8218"/>
<text text-anchor="middle" x="2687.5" y="-8277.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="3145,-7998 3145,-8073 3371,-8073 3371,-7998 3145,-7998"/>
<text text-anchor="middle" x="3258" y="-8057.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="329,-12072 329,-12363 1152,-12363 1152,-12072 329,-12072"/>
<text text-anchor="middle" x="740.5" y="-12347.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-12072 8,-12417 309,-12417 309,-12072 8,-12072"/>
<text text-anchor="middle" x="158.5" y="-12401.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="3146.5,-8081 3146.5,-8210 3369.5,-8210 3369.5,-8081 3146.5,-8081"/>
<text text-anchor="middle" x="3258" y="-8194.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="3117,-3198 3117,-3327 3832,-3327 3832,-3198 3117,-3198"/>
<text text-anchor="middle" x="3474.5" y="-3311.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="3215,-3061 3215,-3190 3301,-3190 3301,-3061 3215,-3061"/>
<text text-anchor="middle" x="3258" y="-3174.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="4969,-11784 4969,-11859 5071,-11859 5071,-11784 4969,-11784"/>
<text text-anchor="middle" x="5020" y="-11843.8" font-family="Helvetica,sans-Serif" font-size="14.00">proof.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="4909,-4587 4909,-4716 5131,-4716 5131,-4587 4909,-4587"/>
<text text-anchor="middle" x="5020" y="-4700.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="4163.5,-11490 4163.5,-11619 4729,-11619 4729,-11490 4163.5,-11490"/>
<text text-anchor="middle" x="4446.25" y="-11603.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="4556.5,-11627 4556.5,-11722 5354,-11722 5354,-11627 4556.5,-11627"/>
<text text-anchor="middle" x="4955.25" y="-11706.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="1804.5,-62 1804.5,-137 1895.5,-137 1895.5,-62 1804.5,-62"/>
<text text-anchor="middle" x="1850" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="1809,-1553 1809,-1628 2696,-1628 2696,-1553 1809,-1553"/>
<text text-anchor="middle" x="2252.5" y="-1612.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="2536,-8 2536,-137 2669,-137 2669,-8 2536,-8"/>
<text text-anchor="middle" x="2602.5" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="2045,-145 2045,-220 2697,-220 2697,-145 2045,-145"/>
<text text-anchor="middle" x="2371" y="-204.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="3191.5,-1960 3191.5,-2089 3324.5,-2089 3324.5,-1960 3191.5,-1960"/>
<text text-anchor="middle" x="3258" y="-2073.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="2480,-2313 2480,-2442 3357.5,-2442 3357.5,-2313 2480,-2313"/>
<text text-anchor="middle" x="2918.75" y="-2426.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="3598,-2166 3598,-2349 4264,-2349 4264,-2166 3598,-2166"/>
<text text-anchor="middle" x="3931" y="-2333.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="3159,-2670 3159,-2907 4272.5,-2907 4272.5,-2670 3159,-2670"/>
<text text-anchor="middle" x="3715.75" y="-2891.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="3161,-1774 3161,-1849 3355,-1849 3355,-1774 3161,-1774"/>
<text text-anchor="middle" x="3258" y="-1833.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="4166.5,-1330 4166.5,-1405 4291.5,-1405 4291.5,-1330 4166.5,-1330"/>
<text text-anchor="middle" x="4229" y="-1389.8" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="2362.5,-1636 2362.5,-2305 2841.5,-2305 2841.5,-1636 2362.5,-1636"/>
<text text-anchor="middle" x="2602" y="-2289.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="2347.5,-2450 2347.5,-3011 2856.5,-3011 2856.5,-2450 2347.5,-2450"/>
<text text-anchor="middle" x="2602" y="-2995.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="2264,-228 2264,-1545 3293,-1545 3293,-228 2264,-228"/>
<text text-anchor="middle" x="2778.5" y="-1529.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="3163,-1583 3163,-1766 4264,-1766 4264,-1583 3163,-1583"/>
<text text-anchor="middle" x="3713.5" y="-1750.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="3697.5,-3335 3697.5,-3666 5098,-3666 5098,-3335 3697.5,-3335"/>
<text text-anchor="middle" x="4397.75" y="-3650.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightblue" stroke="lightblue" points="2556.5,-3780 2556.5,-3909 3849,-3909 3849,-3780 2556.5,-3780"/>
<text text-anchor="middle" x="3202.75" y="-3893.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightblue" stroke="lightblue" points="3623.5,-4790 3623.5,-5189 5387.5,-5189 5387.5,-4790 3623.5,-4790"/>
<text text-anchor="middle" x="4505.5" y="-5173.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightblue" stroke="lightblue" points="3731.5,-7081 3731.5,-7210 4309,-7210 4309,-7081 3731.5,-7081"/>
<text text-anchor="middle" x="4020.25" y="-7194.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightblue" stroke="lightblue" points="4551,-5645 4551,-5720 4763,-5720 4763,-5645 4551,-5645"/>
<text text-anchor="middle" x="4657" y="-5704.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_benchmarks.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightblue" stroke="lightblue" points="4962.5,-6960 4962.5,-7089 5077.5,-7089 5077.5,-6960 4962.5,-6960"/>
<text text-anchor="middle" x="5020" y="-7073.8" font-family="Helvetica,sans-Serif" font-size="14.00">attributes.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightblue" stroke="lightblue" points="4936,-6823 4936,-6952 5551,-6952 5551,-6823 4936,-6823"/>
<text text-anchor="middle" x="5243.5" y="-6936.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightblue" stroke="lightblue" points="4121,-7436 4121,-7781 5132.5,-7781 5132.5,-7436 4121,-7436"/>
<text text-anchor="middle" x="4626.75" y="-7765.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightblue" stroke="lightblue" points="4610,-6419 4610,-6548 4705,-6548 4705,-6419 4610,-6419"/>
<text text-anchor="middle" x="4657.5" y="-6532.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightblue" stroke="lightblue" points="4573,-7125 4573,-7362 5344.5,-7362 5344.5,-7125 4573,-7125"/>
<text text-anchor="middle" x="4958.75" y="-7346.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightblue" stroke="lightblue" points="4596.5,-6282 4596.5,-6411 4718.5,-6411 4718.5,-6282 4596.5,-6282"/>
<text text-anchor="middle" x="4657.5" y="-6395.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightblue" stroke="lightblue" points="5452,-6740 5452,-6815 5555,-6815 5555,-6740 5452,-6740"/>
<text text-anchor="middle" x="5503.5" y="-6799.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightblue" stroke="lightblue" points="2556.5,-12040 2556.5,-12115 3392,-12115 3392,-12040 2556.5,-12040"/>
<text text-anchor="middle" x="2974.25" y="-12099.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightblue" stroke="lightblue" points="3105,-8438 3105,-8621 3411,-8621 3411,-8438 3105,-8438"/>
<text text-anchor="middle" x="3258" y="-8605.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightblue" stroke="lightblue" points="3674.5,-9100 3674.5,-9229 3880.5,-9229 3880.5,-9100 3674.5,-9100"/>
<text text-anchor="middle" x="3777.5" y="-9213.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightblue" stroke="lightblue" points="3685,-8413 3685,-8704 4329.5,-8704 4329.5,-8413 3685,-8413"/>
<text text-anchor="middle" x="4007.25" y="-8688.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightblue" stroke="lightblue" points="3109,-8712 3109,-9083 4321.5,-9083 4321.5,-8712 3109,-8712"/>
<text text-anchor="middle" x="3715.25" y="-9067.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust68" class="cluster">
<title>cluster_67</title>
<polygon fill="lightblue" stroke="lightblue" points="4157,-6836 4157,-7073 4301,-7073 4301,-6836 4157,-6836"/>
<text text-anchor="middle" x="4229" y="-7057.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust69" class="cluster">
<title>cluster_68</title>
<polygon fill="lightblue" stroke="lightblue" points="4153.5,-6537 4153.5,-6828 4305.5,-6828 4305.5,-6537 4153.5,-6537"/>
<text text-anchor="middle" x="4229.5" y="-6812.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust70" class="cluster">
<title>cluster_69</title>
<polygon fill="lightblue" stroke="lightblue" points="4139,-6400 4139,-6529 4319,-6529 4319,-6400 4139,-6400"/>
<text text-anchor="middle" x="4229" y="-6513.8" font-family="Helvetica,sans-Serif" font-size="14.00">params.rs</text>
</g>
<g id="clust71" class="cluster">
<title>cluster_70</title>
<polygon fill="lightblue" stroke="lightblue" points="4558.5,-6556 4558.5,-6631 4755.5,-6631 4755.5,-6556 4558.5,-6556"/>
<text text-anchor="middle" x="4657" y="-6615.8" font-family="Helvetica,sans-Serif" font-size="14.00">generic_server_params.rs</text>
</g>
<g id="clust72" class="cluster">
<title>cluster_71</title>
<polygon fill="lightblue" stroke="lightblue" points="3667.5,-9810 3667.5,-10101 4757.5,-10101 4757.5,-9810 3667.5,-9810"/>
<text text-anchor="middle" x="4212.5" y="-10085.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_params.rs</text>
</g>
<g id="clust73" class="cluster">
<title>cluster_72</title>
<polygon fill="lightblue" stroke="lightblue" points="3618,-9457 3618,-9802 4393.5,-9802 4393.5,-9457 3618,-9457"/>
<text text-anchor="middle" x="4005.75" y="-9786.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust74" class="cluster">
<title>cluster_73</title>
<polygon fill="lightblue" stroke="lightblue" points="3702,-7997 3702,-8072 3852,-8072 3852,-7997 3702,-7997"/>
<text text-anchor="middle" x="3777" y="-8056.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key.rs</text>
</g>
<g id="clust75" class="cluster">
<title>cluster_74</title>
<polygon fill="lightblue" stroke="lightblue" points="3582.5,-10264 3582.5,-11041 4421.5,-11041 4421.5,-10264 3582.5,-10264"/>
<text text-anchor="middle" x="4002" y="-11025.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust76" class="cluster">
<title>cluster_75</title>
<polygon fill="lightblue" stroke="lightblue" points="3125,-8629 3125,-8704 3391,-8704 3391,-8629 3125,-8629"/>
<text text-anchor="middle" x="3258" y="-8688.8" font-family="Helvetica,sans-Serif" font-size="14.00">generate_generic_server_params.rs</text>
</g>
<g id="clust77" class="cluster">
<title>cluster_76</title>
<polygon fill="lightblue" stroke="lightblue" points="5245.5,-10838 5245.5,-10913 5348.5,-10913 5348.5,-10838 5245.5,-10838"/>
<text text-anchor="middle" x="5297" y="-10897.8" font-family="Helvetica,sans-Serif" font-size="14.00">sho.rs</text>
</g>
<g id="clust78" class="cluster">
<title>cluster_77</title>
<polygon fill="lightblue" stroke="lightblue" points="4544,-10260 4544,-10389 4770,-10389 4770,-10260 4544,-10260"/>
<text text-anchor="middle" x="4657" y="-10373.8" font-family="Helvetica,sans-Serif" font-size="14.00">simple_types.rs</text>
</g>
<g id="clust79" class="cluster">
<title>cluster_78</title>
<polygon fill="lightblue" stroke="lightblue" points="4070,-11186 4070,-11369 5088.5,-11369 5088.5,-11186 4070,-11186"/>
<text text-anchor="middle" x="4579.25" y="-11353.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust80" class="cluster">
<title>cluster_79</title>
<polygon fill="lightblue" stroke="lightblue" points="4152.5,-10177 4152.5,-10252 5059.5,-10252 5059.5,-10177 4152.5,-10177"/>
<text text-anchor="middle" x="4606" y="-10236.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_commitment.rs</text>
</g>
<g id="clust81" class="cluster">
<title>cluster_80</title>
<polygon fill="lightblue" stroke="lightblue" points="4135,-11049 4135,-11178 4704.5,-11178 4704.5,-11049 4135,-11049"/>
<text text-anchor="middle" x="4419.75" y="-11162.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_credential_request.rs</text>
</g>
<g id="clust82" class="cluster">
<title>cluster_81</title>
<polygon fill="lightblue" stroke="lightblue" points="4546.5,-6199 4546.5,-6274 5063,-6274 5063,-6199 4546.5,-6199"/>
<text text-anchor="middle" x="4804.75" y="-6258.8" font-family="Helvetica,sans-Serif" font-size="14.00">profile_key_encryption.rs</text>
</g>
<g id="clust83" class="cluster">
<title>cluster_82</title>
<polygon fill="lightblue" stroke="lightblue" points="4618,-10480 4618,-11041 4696,-11041 4696,-10480 4618,-10480"/>
<text text-anchor="middle" x="4657" y="-11025.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust84" class="cluster">
<title>cluster_83</title>
<polygon fill="lightblue" stroke="lightblue" points="4121.5,-8085 4121.5,-8214 4337.5,-8214 4337.5,-8085 4121.5,-8085"/>
<text text-anchor="middle" x="4229.5" y="-8198.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_credential_request.rs</text>
</g>
<g id="clust85" class="cluster">
<title>cluster_84</title>
<polygon fill="lightblue" stroke="lightblue" points="4612.5,-10397 4612.5,-10472 5084,-10472 5084,-10397 4612.5,-10397"/>
<text text-anchor="middle" x="4848.25" y="-10456.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_struct.rs</text>
</g>
<g id="clust86" class="cluster">
<title>cluster_85</title>
<polygon fill="lightblue" stroke="lightblue" points="3711.5,-8222 3711.5,-8405 4276.5,-8405 4276.5,-8222 3711.5,-8222"/>
<text text-anchor="middle" x="3994" y="-8389.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust87" class="cluster">
<title>cluster_86</title>
<polygon fill="lightblue" stroke="lightblue" points="4617,-11377 4617,-11452 5079.5,-11452 5079.5,-11377 4617,-11377"/>
<text text-anchor="middle" x="4848.25" y="-11436.8" font-family="Helvetica,sans-Serif" font-size="14.00">timestamp_struct.rs</text>
</g>
<g id="clust88" class="cluster">
<title>cluster_87</title>
<polygon fill="lightblue" stroke="lightblue" points="4573,-6062 4573,-6191 5063,-6191 5063,-6062 4573,-6062"/>
<text text-anchor="middle" x="4818" y="-6175.8" font-family="Helvetica,sans-Serif" font-size="14.00">uid_encryption.rs</text>
</g>
<g id="clust89" class="cluster">
<title>cluster_88</title>
<polygon fill="lightblue" stroke="lightblue" points="3998,-5241 3998,-5640 4460,-5640 4460,-5241 3998,-5241"/>
<text text-anchor="middle" x="4229" y="-5624.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust90" class="cluster">
<title>cluster_89</title>
<polygon fill="lightblue" stroke="lightblue" points="3116.5,-6904 3116.5,-6979 3399.5,-6979 3399.5,-6904 3116.5,-6904"/>
<text text-anchor="middle" x="3258" y="-6963.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust91" class="cluster">
<title>cluster_90</title>
<polygon fill="lightblue" stroke="lightblue" points="3576,-6580 3576,-6817 3978,-6817 3978,-6580 3576,-6580"/>
<text text-anchor="middle" x="3777" y="-6801.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust92" class="cluster">
<title>cluster_91</title>
<polygon fill="lightblue" stroke="lightblue" points="3121.5,-11550 3121.5,-11733 3394.5,-11733 3394.5,-11550 3121.5,-11550"/>
<text text-anchor="middle" x="3258" y="-11717.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust93" class="cluster">
<title>cluster_92</title>
<polygon fill="lightblue" stroke="lightblue" points="3034.5,-11741 3034.5,-12032 3481.5,-12032 3481.5,-11741 3034.5,-11741"/>
<text text-anchor="middle" x="3258" y="-12016.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust94" class="cluster">
<title>cluster_93</title>
<polygon fill="lightblue" stroke="lightblue" points="3164,-6126 3164,-6255 3352,-6255 3352,-6126 3164,-6126"/>
<text text-anchor="middle" x="3258" y="-6239.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn as_montgomery(&amp;self) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_mul(self, &amp;constants::RR) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="6007.5,-11958 5879.5,-11958 5879.5,-11922 6007.5,-11922 6007.5,-11958"/>
<text text-anchor="middle" x="5943.5" y="-11936.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_montgomery</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_mul(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar52::montgomery_reduce(&amp;Scalar52::mul_internal(a, b)) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="6185,-11904 6046,-11904 6046,-11868 6185,-11868 6185,-11904"/>
<text text-anchor="middle" x="6115.5" y="-11882.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M6001.58,-11921.87C6016.38,-11917.17 6032.44,-11912.07 6047.69,-11907.22"/>
<polygon fill="gray" stroke="gray" points="6049.1,-11910.45 6057.57,-11904.08 6046.98,-11903.78 6049.1,-11910.45"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_wide(bytes: &amp;[u8; 64]) &#45;&gt; Scalar52 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut words = [0u64; 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j in 0..8 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;words[i] |= (bytes[(i * 8) + j] as u64...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="6010,-11904 5877,-11904 5877,-11868 6010,-11868 6010,-11904"/>
<text text-anchor="middle" x="5943.5" y="-11882.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge507" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M6010.23,-11886C6018.62,-11886 6027.28,-11886 6035.85,-11886"/>
<polygon fill="gray" stroke="gray" points="6035.86,-11889.5 6045.86,-11886 6035.85,-11882.5 6035.86,-11889.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;pub (crate) fn mul_internal(a: &amp;Scalar52, b: &amp;Scalar52) &#45;&gt; [u128; 9] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut z = [0u128; 9]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z[0] = m(a[0], b[0]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z[1] = m(a[0], b[1]) + m(a[1], b[0]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z[2] = m...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="6323,-11904 6221,-11904 6221,-11868 6323,-11868 6323,-11904"/>
<text text-anchor="middle" x="6272" y="-11882.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge712" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M6185.17,-11886C6193.65,-11886 6202.26,-11886 6210.61,-11886"/>
<polygon fill="gray" stroke="gray" points="6210.62,-11889.5 6220.62,-11886 6210.62,-11882.5 6210.62,-11889.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<g id="a_node5"><a xlink:title=" &#160;&#160;&#160;pub fn montgomery_invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Uses the addition chain from &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://briansmith.org/ecc&#45;inversion&#45;addition&#45;chains&#45;01#curve25519_scalar_inversion &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5810.5,-11901 5657.5,-11901 5657.5,-11865 5810.5,-11865 5810.5,-11901"/>
<text text-anchor="middle" x="5734" y="-11879.3" font-family="Helvetica,sans-Serif" font-size="14.00">montgomery_invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]montgomery_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5810.51,-11867.06C5829.51,-11863.72 5849.93,-11860.69 5869,-11859 5931.42,-11853.45 5947.83,-11851.1 6010,-11859 6021.62,-11860.48 6033.79,-11862.84 6045.56,-11865.57"/>
<polygon fill="gray" stroke="gray" points="6044.78,-11868.99 6055.32,-11867.94 6046.43,-11862.18 6044.78,-11868.99"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub fn hash_from_bytes&lt;D&gt;(input: &amp;[u8]) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt; + Default, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut hash = D::default(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hash.update(input); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::fr...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5364,-11774 5230,-11774 5230,-11738 5364,-11738 5364,-11774"/>
<text text-anchor="middle" x="5297" y="-11752.3" font-family="Helvetica,sans-Serif" font-size="14.00">hash_from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub fn from_hash&lt;D&gt;(hash: D) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: Digest&lt;OutputSize = U64&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut output = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;output.copy_from_slice(hash.finalize().as_slice()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5548,-11828 5459,-11828 5459,-11792 5548,-11792 5548,-11828"/>
<text text-anchor="middle" x="5503.5" y="-11806.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5364.11,-11773.46C5391.64,-11780.73 5423.17,-11789.05 5449.18,-11795.92"/>
<polygon fill="gray" stroke="gray" points="5448.29,-11799.31 5458.86,-11798.48 5450.08,-11792.54 5448.29,-11799.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;pub fn from_canonical_bytes(bytes: [u8; 32]) &#45;&gt; CtOption&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let high_bit_unset = (bytes[31] &gt;&gt; 7).ct_eq(&amp;0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let candidate = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtOption::new(candidat...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5380,-11882 5214,-11882 5214,-11846 5380,-11846 5380,-11882"/>
<text text-anchor="middle" x="5297" y="-11860.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_canonical_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn is_canonical(&amp;self) &#45;&gt; Choice { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.ct_eq(&amp;self.reduce()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5553.5,-11882 5453.5,-11882 5453.5,-11846 5553.5,-11846 5553.5,-11882"/>
<text text-anchor="middle" x="5503.5" y="-11860.3" font-family="Helvetica,sans-Serif" font-size="14.00">is_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5380.29,-11864C5401.37,-11864 5423.62,-11864 5443.28,-11864"/>
<polygon fill="gray" stroke="gray" points="5443.3,-11867.5 5453.3,-11864 5443.3,-11860.5 5443.3,-11867.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order_wide(input: &amp;[u8; 64]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UnpackedScalar::from_bytes_wide(input).pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5841,-11774 5627,-11774 5627,-11738 5841,-11738 5841,-11774"/>
<text text-anchor="middle" x="5734" y="-11752.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]from_bytes_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5830.65,-11774C5837.04,-11776.61 5843.22,-11779.59 5849,-11783 5881.09,-11801.94 5908.46,-11835.46 5925.15,-11859.11"/>
<polygon fill="gray" stroke="gray" points="5922.46,-11861.38 5931.01,-11867.64 5928.23,-11857.42 5922.46,-11861.38"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes_mod_order(bytes: [u8; 32]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Temporarily allow s_unreduced.bytes &gt; 2^255 ... &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s_unreduced = Scalar { bytes }; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Then reduce mod the grou...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5591,-11774 5416,-11774 5416,-11738 5591,-11738 5591,-11774"/>
<text text-anchor="middle" x="5503.5" y="-11752.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes_mod_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn reduce(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x = self.unpack(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let xR = UnpackedScalar::mul_internal(&amp;x, &amp;constants::R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let x_mod_l = UnpackedScalar::montgomery_reduce(&amp;xR); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5766,-11828 5702,-11828 5702,-11792 5766,-11792 5766,-11828"/>
<text text-anchor="middle" x="5734" y="-11806.3" font-family="Helvetica,sans-Serif" font-size="14.00">reduce</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5580.9,-11774.06C5617.97,-11782.82 5661.03,-11792.99 5691.85,-11800.28"/>
<polygon fill="gray" stroke="gray" points="5691.27,-11803.73 5701.81,-11802.63 5692.88,-11796.92 5691.27,-11803.73"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.unpack().invert().pack() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5325.5,-11828 5268.5,-11828 5268.5,-11792 5325.5,-11792 5325.5,-11828"/>
<text text-anchor="middle" x="5297" y="-11806.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub fn invert(&amp;self) &#45;&gt; UnpackedScalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_montgomery().montgomery_invert().from_montgomery() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5532,-11936 5475,-11936 5475,-11900 5532,-11900 5532,-11936"/>
<text text-anchor="middle" x="5503.5" y="-11914.3" font-family="Helvetica,sans-Serif" font-size="14.00">invert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5325.67,-11812.71C5344.84,-11815.83 5369.96,-11822.55 5387.5,-11837 5408.45,-11854.25 5395.14,-11873.65 5416,-11891 5429.82,-11902.5 5448.54,-11909.11 5465.03,-11912.91"/>
<polygon fill="gray" stroke="gray" points="5464.45,-11916.36 5474.95,-11914.93 5465.85,-11909.5 5464.45,-11916.36"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]mul_internal().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5766.15,-11811.29C5839.74,-11814.8 6029.81,-11826.52 6185,-11859 6193.57,-11860.79 6202.5,-11863.09 6211.23,-11865.59"/>
<polygon fill="gray" stroke="gray" points="6210.38,-11868.99 6220.96,-11868.48 6212.37,-11862.28 6210.38,-11868.99"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge622" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5548.02,-11799.72C5575.95,-11793.12 5613.18,-11784.32 5646.91,-11776.34"/>
<polygon fill="gray" stroke="gray" points="5647.86,-11779.72 5656.79,-11774.01 5646.25,-11772.9 5647.86,-11779.72"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce(). -->
<g id="edge636" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]is_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]reduce().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5553.52,-11852.42C5594.81,-11842.66 5653.19,-11828.86 5692.03,-11819.68"/>
<polygon fill="gray" stroke="gray" points="5693.02,-11823.04 5701.95,-11817.34 5691.41,-11816.23 5693.02,-11823.04"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery(). -->
<g id="edge640" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/scalar/impl#[Scalar52]as_montgomery().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5532.23,-11919.39C5598.98,-11922.75 5770.35,-11931.35 5869.21,-11936.32"/>
<polygon fill="gray" stroke="gray" points="5869.26,-11939.83 5879.42,-11936.83 5869.61,-11932.83 5869.26,-11939.83"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert(). -->
<g id="edge641" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]invert().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[`backend::serial::u64::scalar::Scalar52`]montgomery_invert().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5532.06,-11913.78C5560.57,-11909.41 5606.56,-11902.37 5647.34,-11896.12"/>
<polygon fill="gray" stroke="gray" points="5647.96,-11899.57 5657.31,-11894.59 5646.9,-11892.65 5647.96,-11899.57"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn try_from(sig: &amp;ed25519::Signature) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;InternalSignature::from_bytes(&amp;sig.to_bytes()) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4266.5,-12161 4191.5,-12161 4191.5,-12125 4266.5,-12125 4266.5,-12161"/>
<text text-anchor="middle" x="4229" y="-12139.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;pub fn from_bytes(bytes: &amp;[u8; SIGNATURE_LENGTH]) &#45;&gt; Result&lt;InternalSignature, SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO: Use bytes.split_array_ref once it’s in MSRV. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut R_bytes: [u8; 32] =...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4704,-12161 4610,-12161 4610,-12125 4704,-12125 4704,-12161"/>
<text text-anchor="middle" x="4657" y="-12139.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4266.69,-12143C4341.24,-12143 4510.85,-12143 4599.56,-12143"/>
<polygon fill="gray" stroke="gray" points="4599.7,-12146.5 4609.7,-12143 4599.7,-12139.5 4599.7,-12146.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<g id="a_node16"><a xlink:title="fn check_scalar(bytes: [u8; 32]) &#45;&gt; Result&lt;Scalar, SignatureError&gt; { &#160;&#160;&#160;&#160;match Scalar::from_canonical_bytes(bytes).into() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(InternalError::ScalarFormat.into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(x) =&gt; ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5072.5,-12161 4967.5,-12161 4967.5,-12125 5072.5,-12125 5072.5,-12161"/>
<text text-anchor="middle" x="5020" y="-12139.3" font-family="Helvetica,sans-Serif" font-size="14.00">check_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5039.04,-12124.69C5086.75,-12076.3 5216.28,-11944.88 5271.03,-11889.33"/>
<polygon fill="gray" stroke="gray" points="5273.72,-11891.59 5278.25,-11882.01 5268.74,-11886.68 5273.72,-11891.59"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar(). -->
<g id="edge483" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature]from_bytes().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/check_scalar().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4704.09,-12143C4768.4,-12143 4885.24,-12143 4957.1,-12143"/>
<polygon fill="gray" stroke="gray" points="4957.36,-12146.5 4967.36,-12143 4957.36,-12139.5 4957.36,-12146.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3821,-12244 3733,-12244 3733,-12208 3821,-12208 3821,-12244"/>
<text text-anchor="middle" x="3777" y="-12222.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 signature/impl#[InternalSignature][`TryFrom&lt;&amp;ed25519::Signature&gt;`]try_from().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3821.15,-12218.04C3906,-12202.39 4093.92,-12167.73 4181.45,-12151.59"/>
<polygon fill="gray" stroke="gray" points="4182.16,-12155.01 4191.36,-12149.76 4180.89,-12148.13 4182.16,-12155.01"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4282.5,-12244 4175.5,-12244 4175.5,-12208 4282.5,-12208 4282.5,-12244"/>
<text text-anchor="middle" x="4229" y="-12222.3" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3821.15,-12226C3901.08,-12226 4072.49,-12226 4165.26,-12226"/>
<polygon fill="gray" stroke="gray" points="4165.36,-12229.5 4175.36,-12226 4165.36,-12222.5 4165.36,-12229.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3286,-12244 3230,-12244 3230,-12208 3286,-12208 3286,-12244"/>
<text text-anchor="middle" x="3258" y="-12222.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3286.07,-12226C3367.89,-12226 3613.67,-12226 3722.8,-12226"/>
<polygon fill="gray" stroke="gray" points="3722.93,-12229.5 3732.93,-12226 3722.93,-12222.5 3722.93,-12229.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;fn compute_challenge&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;CompressedEdwardsY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Scalar &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Dige...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4732.5,-12244 4581.5,-12244 4581.5,-12208 4732.5,-12208 4732.5,-12244"/>
<text text-anchor="middle" x="4657" y="-12222.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_challenge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge592" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4732.54,-12241.5C4840.46,-12259.8 5042.93,-12278.27 5186,-12196 5326.84,-12115.01 5304.71,-12030.79 5387.5,-11891 5401.33,-11867.65 5395.14,-11854.35 5416,-11837 5425.45,-11829.14 5437.19,-11823.56 5448.94,-11819.61"/>
<polygon fill="gray" stroke="gray" points="5450.19,-11822.88 5458.76,-11816.65 5448.17,-11816.18 5450.19,-11822.88"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge(). -->
<g id="edge846" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]compute_challenge().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4282.66,-12226C4354.75,-12226 4485,-12226 4571,-12226"/>
<polygon fill="gray" stroke="gray" points="4571.26,-12229.5 4581.26,-12226 4571.26,-12222.5 4571.26,-12229.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().</title>
<g id="a_node22"><a xlink:title="fn OnlineBackupValidator_AddFrame( &#160;&#160;&#160;&#160;backup: &amp;mut OnlineBackupValidator, &#160;&#160;&#160;&#160;frame: &amp;[u8], ) &#45;&gt; Result&lt;(), ReadError&gt; { &#160;&#160;&#160;&#160;let unknown_fields = backup &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_mut() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_and_add_fram...">
<polygon fill="white" stroke="black" points="1443.5,-4203 1193.5,-4203 1193.5,-4167 1443.5,-4167 1443.5,-4203"/>
<text text-anchor="middle" x="1318.5" y="-4181.3" font-family="Helvetica,sans-Serif" font-size="14.00">OnlineBackupValidator_AddFrame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<g id="a_node156"><a xlink:title=" &#160;&#160;&#160;pub fn parse_and_add_frame( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;raw_frame: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut visitor: impl FnMut(&amp;proto::backup::Frame) + Send, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;(Vec&lt;PathPart&gt;, UnknownValue)&gt;, crate::E...">
<polygon fill="white" stroke="black" points="1682.5,-4286 1512.5,-4286 1512.5,-4250 1682.5,-4250 1682.5,-4286"/>
<text text-anchor="middle" x="1597.5" y="-4264.3" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge518" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 message_backup/OnlineBackupValidator_AddFrame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1379.6,-4203.01C1422.74,-4215.94 1481.01,-4233.39 1526.29,-4246.96"/>
<polygon fill="blue" stroke="blue" points="1525.45,-4250.36 1536.03,-4249.88 1527.46,-4243.66 1525.45,-4250.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().</title>
<g id="a_node23"><a xlink:title="async fn KeyTransparency_Distinguished( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedCha...">
<polygon fill="white" stroke="black" points="276.5,-12469 40.5,-12469 40.5,-12433 276.5,-12433 276.5,-12469"/>
<text text-anchor="middle" x="158.5" y="-12447.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<g id="a_node165"><a xlink:title=" &#160;&#160;&#160;async fn distinguished( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished: Option&lt;LastTreeHead&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;SearchStateUpdate, RequestError&lt;Error&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ChatDistinguishedResponse { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="539,-12170 429,-12170 429,-12134 539,-12134 539,-12170"/>
<text text-anchor="middle" x="484" y="-12148.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M276.65,-12443.34C288.91,-12438.2 300.11,-12430.98 309,-12421 344.89,-12380.7 292.62,-12218.85 329,-12179 351.29,-12154.58 387.24,-12147.29 418.8,-12146.35"/>
<polygon fill="blue" stroke="blue" points="418.9,-12149.85 428.87,-12146.25 418.84,-12142.85 418.9,-12149.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().</title>
<g id="a_node24"><a xlink:title="async fn KeyTransparency_Search( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedChatConnec...">
<polygon fill="white" stroke="black" points="252.5,-12523 64.5,-12523 64.5,-12487 252.5,-12487 252.5,-12523"/>
<text text-anchor="middle" x="158.5" y="-12501.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<g id="a_node162"><a xlink:title=" &#160;&#160;&#160;async fn search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_identity_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;(E164, Vec&lt;u8&gt;)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored_acco...">
<polygon fill="white" stroke="black" points="515,-12332 453,-12332 453,-12296 515,-12296 515,-12332"/>
<text text-anchor="middle" x="484" y="-12310.3" font-family="Helvetica,sans-Serif" font-size="14.00">search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge548" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M252.72,-12496.71C272,-12492.68 291.69,-12486.73 309,-12478 375.39,-12444.5 434.07,-12377.58 463.32,-12340.42"/>
<polygon fill="blue" stroke="blue" points="466.42,-12342.13 469.77,-12332.08 460.88,-12337.84 466.42,-12342.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node25"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="2719.5,-3657 2484.5,-3657 2484.5,-3621 2719.5,-3621 2719.5,-3657"/>
<text text-anchor="middle" x="2602" y="-3635.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node210"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="3346,-2876 3170,-2876 3170,-2840 3346,-2840 3346,-2876"/>
<text text-anchor="middle" x="3258" y="-2854.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2719.56,-3645.11C2802.22,-3646.64 2903.35,-3641.89 2932,-3612 2986.48,-3555.16 2907.6,-2962.75 2960,-2904 3008.73,-2849.37 3093.25,-2840.8 3159.7,-2844.22"/>
<polygon fill="blue" stroke="blue" points="3159.58,-2847.72 3169.78,-2844.83 3160.01,-2840.73 3159.58,-2847.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node26"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="2687,-3603 2517,-3603 2517,-3567 2687,-3567 2687,-3603"/>
<text text-anchor="middle" x="2602" y="-3581.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node208"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="3285,-2768 3231,-2768 3231,-2732 3285,-2732 3285,-2768"/>
<text text-anchor="middle" x="3258" y="-2746.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2687.36,-3590.21C2773.65,-3593.51 2899.54,-3591.99 2932,-3558 2991.97,-3495.2 2900.31,-2840.06 2960,-2777 3027.43,-2705.77 3157.72,-2725.18 3220.9,-2740.08"/>
<polygon fill="blue" stroke="blue" points="3220.26,-2743.53 3230.8,-2742.52 3221.92,-2736.73 3220.26,-2743.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node27"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="2675,-3441 2529,-3441 2529,-3405 2675,-3405 2675,-3441"/>
<text text-anchor="middle" x="2602" y="-3419.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node94"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="4732,-2959 4582,-2959 4582,-2923 4732,-2923 4732,-2959"/>
<text text-anchor="middle" x="4657" y="-2937.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.02,-3427.69C2761.13,-3431.57 2897.94,-3431.63 2932,-3396 2990.39,-3334.92 2900.41,-2695.91 2960,-2636 3018.77,-2576.91 4387.66,-2572.62 4460,-2614 4576.43,-2680.6 4631.35,-2846.68 4649.18,-2913"/>
<polygon fill="blue" stroke="blue" points="4645.82,-2913.96 4651.73,-2922.76 4652.59,-2912.2 4645.82,-2913.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node28"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="2675.5,-3495 2528.5,-3495 2528.5,-3459 2675.5,-3459 2675.5,-3495"/>
<text text-anchor="middle" x="2602" y="-3473.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4721,-3013 4593,-3013 4593,-2977 4721,-2977 4721,-3013"/>
<text text-anchor="middle" x="4657" y="-2991.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.78,-3481.73C2761.94,-3485.58 2898.06,-3485.54 2932,-3450 2992.2,-3386.96 2897.27,-2726.53 2960,-2666 2989.98,-2637.07 4429.21,-2637.93 4460,-2666 4509.81,-2711.41 4441.96,-2918.77 4488,-2968 4511.68,-2993.32 4548.96,-3001.1 4582.39,-3002.1"/>
<polygon fill="blue" stroke="blue" points="4582.58,-3005.6 4592.62,-3002.2 4582.65,-2998.6 4582.58,-3005.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node29"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="2739,-3225 2465,-3225 2465,-3189 2739,-3189 2739,-3225"/>
<text text-anchor="middle" x="2602" y="-3203.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node203"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="3344.5,-2357 3171.5,-2357 3171.5,-2321 3344.5,-2321 3344.5,-2357"/>
<text text-anchor="middle" x="3258" y="-2335.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2739.21,-3213.39C2817.59,-3213.81 2905.65,-3207.63 2932,-3180 2994.45,-3114.51 2897.83,-2431.77 2960,-2366 3012.27,-2310.71 3102.4,-2310 3169.7,-2319.43"/>
<polygon fill="blue" stroke="blue" points="3169.46,-2322.93 3179.87,-2320.95 3170.5,-2316.01 3169.46,-2322.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node30"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="2715,-3171 2489,-3171 2489,-3135 2715,-3135 2715,-3171"/>
<text text-anchor="middle" x="2602" y="-3149.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node200"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="3316.5,-2058 3199.5,-2058 3199.5,-2022 3316.5,-2022 3316.5,-2058"/>
<text text-anchor="middle" x="3258" y="-2036.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2715.33,-3159.06C2798.77,-3160.86 2902.93,-3156.49 2932,-3126 2994.68,-3060.26 2921.76,-2391.39 2960,-2309 3014.38,-2191.84 3146.1,-2103.13 3214.37,-2063.23"/>
<polygon fill="blue" stroke="blue" points="3216.26,-2066.18 3223.17,-2058.15 3212.76,-2060.12 3216.26,-2066.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node31"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="2734,-3333 2470,-3333 2470,-3297 2734,-3297 2734,-3333"/>
<text text-anchor="middle" x="2602" y="-3311.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node205"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="3841,-2210 3713,-2210 3713,-2174 3841,-2174 3841,-2210"/>
<text text-anchor="middle" x="3777" y="-2188.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2734.33,-3321.32C2813.88,-3322.01 2905.05,-3316.15 2932,-3288 2987.98,-3229.53 2907.23,-2621.38 2960,-2560 3135.82,-2355.5 3375.18,-2646.09 3556,-2446 3589.95,-2408.43 3541.03,-2255.63 3576,-2219 3607.81,-2185.69 3659.69,-2179.47 3702.64,-2181.3"/>
<polygon fill="blue" stroke="blue" points="3702.59,-2184.8 3712.78,-2181.89 3703,-2177.81 3702.59,-2184.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node32"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2696,-3387 2508,-3387 2508,-3351 2696,-3351 2696,-3387"/>
<text text-anchor="middle" x="2602" y="-3365.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node207"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-2318 4202,-2318 4202,-2282 4256,-2282 4256,-2318"/>
<text text-anchor="middle" x="4229" y="-2296.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge482" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.15,-3374.52C2781.97,-3377.35 2900.6,-3374.82 2932,-3342 2989.19,-3282.22 2904.42,-2659.28 2960,-2598 3049.8,-2498.99 3425.67,-2546.65 3556,-2517 3804.77,-2460.4 4093.15,-2352.42 4192.36,-2314"/>
<polygon fill="blue" stroke="blue" points="4193.85,-2317.18 4201.9,-2310.29 4191.31,-2310.65 4193.85,-2317.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node33"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="2715.5,-3117 2488.5,-3117 2488.5,-3081 2715.5,-3081 2715.5,-3117"/>
<text text-anchor="middle" x="2602" y="-3095.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node199"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="3316.5,-2004 3199.5,-2004 3199.5,-1968 3316.5,-1968 3316.5,-2004"/>
<text text-anchor="middle" x="3258" y="-1982.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge559" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2715.82,-3105.14C2799.22,-3106.95 2903.1,-3102.55 2932,-3072 3012.89,-2986.49 2879.48,-2098.86 2960,-2013 3017.39,-1951.81 3121.11,-1957.26 3189.52,-1969.51"/>
<polygon fill="blue" stroke="blue" points="3188.88,-1972.95 3199.35,-1971.36 3190.17,-1966.07 3188.88,-1972.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node34"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2730.5,-3279 2473.5,-3279 2473.5,-3243 2730.5,-3243 2730.5,-3279"/>
<text text-anchor="middle" x="2602" y="-3257.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node201"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="3349.5,-2411 3166.5,-2411 3166.5,-2375 3349.5,-2375 3349.5,-2411"/>
<text text-anchor="middle" x="3258" y="-2389.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge739" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2730.82,-3267.28C2811.17,-3268.17 2904.64,-3262.55 2932,-3234 2986.78,-3176.84 2915.28,-2587.34 2960,-2522 3004.41,-2457.11 3088.95,-2424.62 3156.51,-2408.49"/>
<polygon fill="blue" stroke="blue" points="3157.39,-2411.88 3166.35,-2406.23 3155.82,-2405.06 3157.39,-2411.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node35"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="2739,-3063 2465,-3063 2465,-3027 2739,-3027 2739,-3063"/>
<text text-anchor="middle" x="2602" y="-3041.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node214"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="3347,-1818 3169,-1818 3169,-1782 3347,-1782 3347,-1818"/>
<text text-anchor="middle" x="3258" y="-1796.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge792" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.4,-3063C2752.16,-3076.72 2868.06,-3083.2 2932,-3015 2972.25,-2972.06 2928.9,-2005.96 2960,-1956 3005.42,-1883.04 3097.15,-1842.36 3166.72,-1820.99"/>
<polygon fill="blue" stroke="blue" points="3167.81,-1824.31 3176.38,-1818.1 3165.8,-1817.61 3167.81,-1824.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node36"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="2701.5,-3711 2502.5,-3711 2502.5,-3675 2701.5,-3675 2701.5,-3711"/>
<text text-anchor="middle" x="2602" y="-3689.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node213"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="3812.5,-2849 3741.5,-2849 3741.5,-2813 3812.5,-2813 3812.5,-2849"/>
<text text-anchor="middle" x="3777" y="-2827.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge793" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2673.35,-3711.07C2748.8,-3725.75 2866.56,-3734.26 2932,-3666 2986.25,-3609.41 2907.03,-3018.8 2960,-2961 3050.21,-2862.57 3424.73,-2909.4 3556,-2885 3617.34,-2873.6 3687.14,-2855.59 3731.36,-2843.54"/>
<polygon fill="blue" stroke="blue" points="3732.49,-2846.86 3741.21,-2840.84 3730.64,-2840.11 3732.49,-2846.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node37"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="2689,-3549 2515,-3549 2515,-3513 2689,-3513 2689,-3549"/>
<text text-anchor="middle" x="2602" y="-3527.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node212"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-2714 3231,-2714 3231,-2678 3285,-2678 3285,-2714"/>
<text text-anchor="middle" x="3258" y="-2692.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge874" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.34,-3536.29C2775.56,-3539.48 2899.79,-3537.73 2932,-3504 2991.97,-3441.2 2900.31,-2786.06 2960,-2723 3027.43,-2651.77 3157.72,-2671.18 3220.9,-2686.08"/>
<polygon fill="blue" stroke="blue" points="3220.26,-2689.53 3230.8,-2688.52 3221.92,-2682.73 3220.26,-2689.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node38"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="3843.5,-4589 3710.5,-4589 3710.5,-4553 3843.5,-4553 3843.5,-4589"/>
<text text-anchor="middle" x="3777" y="-4567.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node285"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="4278,-4834 4180,-4834 4180,-4798 4278,-4798 4278,-4834"/>
<text text-anchor="middle" x="4229" y="-4812.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.67,-4570.43C3884.02,-4572.32 3935.88,-4578.9 3978,-4598 4078.19,-4643.42 4168.06,-4742.45 4207.23,-4789.78"/>
<polygon fill="blue" stroke="blue" points="4204.68,-4792.2 4213.72,-4797.73 4210.1,-4787.77 4204.68,-4792.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().</title>
<g id="a_node39"><a xlink:title="pub fn Username_HashFromParts( &#160;&#160;&#160;&#160;nickname: String, &#160;&#160;&#160;&#160;discriminator: String, &#160;&#160;&#160;&#160;min_len: u32, &#160;&#160;&#160;&#160;max_len: u32, ) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;let limits = NicknameLimits::new(min_len ...">
<polygon fill="white" stroke="black" points="3875.5,-4751 3678.5,-4751 3678.5,-4715 3875.5,-4715 3875.5,-4751"/>
<text text-anchor="middle" x="3777" y="-4729.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_HashFromParts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="node298" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<g id="a_node298"><a xlink:title=" &#160;&#160;&#160;pub fn from_parts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;limits: NicknameLimits, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This should perform the same set of checks...">
<polygon fill="white" stroke="black" points="4275,-5057 4183,-5057 4183,-5021 4275,-5021 4275,-5057"/>
<text text-anchor="middle" x="4229" y="-5035.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_HashFromParts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3875.71,-4736.32C3912.96,-4742.73 3952.53,-4756.74 3978,-4786 4026.5,-4841.72 3952.53,-4892.78 3998,-4951 4040.03,-5004.82 4119.13,-5025.73 4172.69,-5033.86"/>
<polygon fill="blue" stroke="blue" points="4172.32,-5037.34 4182.72,-5035.27 4173.3,-5030.41 4172.32,-5037.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().</title>
<g id="a_node40"><a xlink:title="pub fn Username_Hash(username: String) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3841.5,-4697 3712.5,-4697 3712.5,-4661 3841.5,-4661 3841.5,-4697"/>
<text text-anchor="middle" x="3777" y="-4675.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="node291" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<g id="a_node291"><a xlink:title=" &#160;&#160;&#160;pub fn new(s: &amp;str) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (nickname, discriminator) = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;s.rsplit_once(&#39;.&#39;).ok_or(UsernameError::MissingSeparator)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_parts_withou...">
<polygon fill="white" stroke="black" points="4256,-4942 4202,-4942 4202,-4906 4256,-4906 4256,-4942"/>
<text text-anchor="middle" x="4229" y="-4920.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.52,-4669.02C3886.01,-4665.93 3943.47,-4670.42 3978,-4706 4007.72,-4736.62 3968.01,-4866.63 3998,-4897 4048.61,-4948.25 4141.03,-4940.99 4191.95,-4932.02"/>
<polygon fill="blue" stroke="blue" points="4192.68,-4935.44 4201.86,-4930.15 4191.38,-4928.56 4192.68,-4935.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node41"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3841.5,-4643 3712.5,-4643 3712.5,-4607 3841.5,-4607 3841.5,-4643"/>
<text text-anchor="middle" x="3777" y="-4621.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node290" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node290"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="4256,-4888 4202,-4888 4202,-4852 4256,-4852 4256,-4888"/>
<text text-anchor="middle" x="4229" y="-4866.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge624" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.52,-4615.02C3886.01,-4611.93 3943.47,-4616.42 3978,-4652 4007.72,-4682.62 3968.01,-4812.63 3998,-4843 4048.61,-4894.25 4141.03,-4886.99 4191.95,-4878.02"/>
<polygon fill="blue" stroke="blue" points="4192.68,-4881.44 4201.86,-4876.15 4191.38,-4874.56 4192.68,-4881.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge623" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.76,-4614.79C3886.38,-4611.58 3943.88,-4616.03 3978,-4652 4015.59,-4691.63 3960.06,-4857.7 3998,-4897 4048.02,-4948.83 4140.68,-4941.34 4191.79,-4932.17"/>
<polygon fill="blue" stroke="blue" points="4192.57,-4935.59 4201.74,-4930.27 4191.26,-4928.71 4192.57,-4935.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().</title>
<g id="a_node42"><a xlink:title="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3471.5,-11511 3044.5,-11511 3044.5,-11475 3471.5,-11475 3471.5,-11511"/>
<text text-anchor="middle" x="3258" y="-11489.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyProfileKeyCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node401" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node401"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="3929.5,-11010 3624.5,-11010 3624.5,-10974 3929.5,-10974 3929.5,-11010"/>
<text text-anchor="middle" x="3777" y="-10988.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3471.57,-11500.88C3501.78,-11494.5 3531.02,-11483.59 3556,-11466 3712.7,-11355.67 3760.59,-11104.68 3772.55,-11020.28"/>
<polygon fill="blue" stroke="blue" points="3776.04,-11020.55 3773.92,-11010.17 3769.11,-11019.61 3776.04,-11020.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().</title>
<g id="a_node43"><a xlink:title="fn GroupSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::generate(*randomness).into() }">
<polygon fill="white" stroke="black" points="3415.5,-10755 3100.5,-10755 3100.5,-10719 3415.5,-10719 3415.5,-10755"/>
<text text-anchor="middle" x="3258" y="-10733.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="node379" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<g id="a_node379"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_GroupSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4268.5,-10070 4189.5,-10070 4189.5,-10034 4268.5,-10034 4268.5,-10070"/>
<text text-anchor="middle" x="4229" y="-10048.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.11,-10755.03C3404.23,-10765.91 3501.02,-10768.1 3556,-10710 3599.1,-10664.45 3534.11,-10192.66 3576,-10146 3596.26,-10123.43 4030.74,-10073.71 4178.96,-10057.34"/>
<polygon fill="blue" stroke="blue" points="4179.58,-10060.79 4189.13,-10056.22 4178.81,-10053.84 4179.58,-10060.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().</title>
<g id="a_node44"><a xlink:title="fn ServerPublicParams_VerifySignature( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;notary_signature: &amp;[u8; SIGNATURE_LEN], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3391.5,-11403 3124.5,-11403 3124.5,-11367 3391.5,-11367 3391.5,-11403"/>
<text text-anchor="middle" x="3258" y="-11381.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node390" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node390"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="3841,-10902 3713,-10902 3713,-10866 3841,-10866 3841,-10902"/>
<text text-anchor="middle" x="3777" y="-10880.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11403.02C3404.64,-11413.72 3500.93,-11415.66 3556,-11358 3590.34,-11322.05 3542.45,-10947.69 3576,-10911 3607.19,-10876.89 3659.35,-10870.76 3702.58,-10872.84"/>
<polygon fill="blue" stroke="blue" points="3702.59,-10876.35 3712.79,-10873.49 3703.03,-10869.36 3702.59,-10876.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node45"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="3420,-10107 3096,-10107 3096,-10071 3420,-10071 3420,-10107"/>
<text text-anchor="middle" x="3258" y="-10085.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node365" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node365"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="4263.5,-6934 4194.5,-6934 4194.5,-6898 4263.5,-6898 4263.5,-6934"/>
<text text-anchor="middle" x="4229" y="-6912.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.56,-10107.03C3403.78,-10118.06 3501.07,-10120.51 3556,-10062 3611.16,-10003.25 3520.95,-9395.85 3576,-9337 3637.3,-9271.47 3917.33,-9365.11 3978,-9299 4022.25,-9250.78 3954.3,-6991.72 3998,-6943 4043.93,-6891.8 4131.2,-6896.98 4184.04,-6906.04"/>
<polygon fill="blue" stroke="blue" points="4183.66,-6909.53 4194.13,-6907.89 4184.92,-6902.65 4183.66,-6909.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().</title>
<g id="a_node46"><a xlink:title="fn GroupSecretParams_DecryptServiceId( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;ciphertext: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;params.decrypt_se...">
<polygon fill="white" stroke="black" points="3397.5,-10647 3118.5,-10647 3118.5,-10611 3397.5,-10611 3397.5,-10647"/>
<text text-anchor="middle" x="3258" y="-10625.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="node377" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<g id="a_node377"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_service_id( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypto::uid_encryption::...">
<polygon fill="white" stroke="black" points="3850,-9854 3704,-9854 3704,-9818 3850,-9818 3850,-9854"/>
<text text-anchor="middle" x="3777" y="-9832.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_service_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.57,-10647.04C3403.79,-10658.08 3501.09,-10660.52 3556,-10602 3612.21,-10542.1 3521.11,-9924.11 3576,-9863 3604.88,-9830.85 3652.35,-9823.41 3693.8,-9824.34"/>
<polygon fill="blue" stroke="blue" points="3693.78,-9827.84 3703.91,-9824.73 3694.05,-9820.84 3693.78,-9827.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().</title>
<g id="a_node47"><a xlink:title="fn ServerSecretParams_SignDeterministic( &#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; [u8; SIGNATURE_LEN] { &#160;&#160;&#160;&#160;params.sign(*randomness, message) }">
<polygon fill="white" stroke="black" points="3401,-11457 3115,-11457 3115,-11421 3401,-11421 3401,-11457"/>
<text text-anchor="middle" x="3258" y="-11435.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_SignDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node400" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node400"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="3804,-10956 3750,-10956 3750,-10920 3804,-10920 3804,-10956"/>
<text text-anchor="middle" x="3777" y="-10934.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11457.02C3404.64,-11467.72 3500.93,-11469.66 3556,-11412 3590.34,-11376.05 3542.45,-11001.69 3576,-10965 3617.02,-10920.14 3694.29,-10923.68 3739.84,-10930.63"/>
<polygon fill="blue" stroke="blue" points="3739.44,-10934.11 3749.88,-10932.29 3740.59,-10927.2 3739.44,-10934.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().</title>
<g id="a_node48"><a xlink:title="fn GroupSendEndorsement_CallLinkParams_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;call_link_secret_params_serialized: &amp;[u8], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let call_link_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3437.5,-10323 3078.5,-10323 3078.5,-10287 3437.5,-10287 3437.5,-10323"/>
<text text-anchor="middle" x="3258" y="-10301.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_CallLinkParams_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="node385" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<g id="a_node385"><a xlink:title=" &#160;&#160;&#160;pub fn to_token&lt;T: AsRef&lt;uid_encryption::KeyPair&gt;&gt;(&amp;self, key_pair: T) &#45;&gt; GroupSendToken { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkcredential::endorsements::ClientDecryptionKey::for_first_point_of_...">
<polygon fill="white" stroke="black" points="3814.5,-9555 3739.5,-9555 3739.5,-9519 3814.5,-9519 3814.5,-9555"/>
<text text-anchor="middle" x="3777" y="-9533.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_token</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_CallLinkParams_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.56,-10323.02C3403.77,-10334.05 3501.06,-10336.5 3556,-10278 3610.33,-10220.15 3522.94,-9623.02 3576,-9564 3613.68,-9522.09 3682.95,-9522.19 3729.25,-9528.05"/>
<polygon fill="blue" stroke="blue" points="3728.95,-9531.54 3739.34,-9529.46 3729.92,-9524.61 3728.95,-9531.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node49"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="3426,-10917 3090,-10917 3090,-10881 3426,-10881 3426,-10917"/>
<text text-anchor="middle" x="3258" y="-10895.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node399" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node399"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="3874.5,-10416 3679.5,-10416 3679.5,-10380 3874.5,-10380 3874.5,-10416"/>
<text text-anchor="middle" x="3777" y="-10394.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-10917.02C3404.64,-10927.72 3500.93,-10929.66 3556,-10872 3590.34,-10836.05 3542.45,-10461.69 3576,-10425 3599.45,-10399.35 3634.77,-10389.52 3669.22,-10387.11"/>
<polygon fill="blue" stroke="blue" points="3669.58,-10390.6 3679.39,-10386.6 3669.23,-10383.6 3669.58,-10390.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node50"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="3502,-11241 3014,-11241 3014,-11205 3502,-11205 3502,-11241"/>
<text text-anchor="middle" x="3258" y="-11219.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node391" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node391"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3913,-10740 3641,-10740 3641,-10704 3913,-10704 3913,-10740"/>
<text text-anchor="middle" x="3777" y="-10718.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11241.02C3404.64,-11251.72 3500.93,-11253.66 3556,-11196 3590.34,-11160.05 3542.45,-10785.69 3576,-10749 3590.76,-10732.85 3610.22,-10722.98 3631.21,-10717.27"/>
<polygon fill="blue" stroke="blue" points="3632.04,-10720.68 3640.94,-10714.94 3630.4,-10713.87 3632.04,-10720.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node51"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="3462,-10215 3054,-10215 3054,-10179 3462,-10179 3462,-10215"/>
<text text-anchor="middle" x="3258" y="-10193.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node358" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node358"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="4262,-8995 4196,-8995 4196,-8959 4262,-8959 4262,-8995"/>
<text text-anchor="middle" x="4229" y="-8973.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.57,-10215.04C3403.8,-10226.08 3501.1,-10228.53 3556,-10170 3612.81,-10109.44 3520.05,-9484.35 3576,-9423 3697.24,-9290.05 3854.97,-9506.3 3978,-9375 4034.45,-9314.75 3941.49,-9064.19 3998,-9004 4045.47,-8953.44 4133.4,-8958.76 4185.71,-8967.61"/>
<polygon fill="blue" stroke="blue" points="4185.21,-8971.07 4195.67,-8969.41 4186.45,-8964.18 4185.21,-8971.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node52"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3408.5,-10161 3107.5,-10161 3107.5,-10125 3408.5,-10125 3408.5,-10161"/>
<text text-anchor="middle" x="3258" y="-10139.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node363" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node363"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="4262,-7042 4196,-7042 4196,-7006 4262,-7006 4262,-7042"/>
<text text-anchor="middle" x="4229" y="-7020.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.57,-10161.04C3403.79,-10172.08 3501.09,-10174.52 3556,-10116 3612.36,-10055.94 3519.75,-9435.17 3576,-9375 3637.28,-9309.45 3917.32,-9403.1 3978,-9337 4020.46,-9290.75 3958.69,-7125.95 3998,-7077 4042.5,-7021.59 4132.27,-7016.93 4185.55,-7019.69"/>
<polygon fill="blue" stroke="blue" points="4185.49,-7023.19 4195.69,-7020.33 4185.93,-7016.21 4185.49,-7023.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().</title>
<g id="a_node53"><a xlink:title="fn BackupAuthCredentialRequestContext_New(backup_key: &amp;[u8; 32], uuid: Uuid) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let backup_key: libsignal_account_keys::BackupKey = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libsignal_account_keys::BackupKey(*backup_key)...">
<polygon fill="white" stroke="black" points="3417,-10269 3099,-10269 3099,-10233 3417,-10233 3417,-10269"/>
<text text-anchor="middle" x="3258" y="-10247.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="node362" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<g id="a_node362"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;const VERSION: u8&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_key: &amp;libsignal_account_keys::BackupKey&lt;VERSION&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// derive the backup&#45;id (blinded in the is...">
<polygon fill="white" stroke="black" points="4256,-9049 4202,-9049 4202,-9013 4256,-9013 4256,-9049"/>
<text text-anchor="middle" x="4229" y="-9027.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_New().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.58,-10269.05C3403.82,-10280.1 3501.12,-10282.55 3556,-10224 3614.6,-10161.48 3517.66,-9515.77 3576,-9453 3637.11,-9387.24 3901.24,-9459.56 3978,-9413 4117.84,-9328.18 4194.67,-9131.9 4219.22,-9058.96"/>
<polygon fill="blue" stroke="blue" points="4222.65,-9059.71 4222.46,-9049.12 4216.01,-9057.52 4222.65,-9059.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node54"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="3426,-9999 3090,-9999 3090,-9963 3426,-9963 3426,-9999"/>
<text text-anchor="middle" x="3258" y="-9977.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node371" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node371"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4263.5,-6635 4194.5,-6635 4194.5,-6599 4263.5,-6599 4263.5,-6635"/>
<text text-anchor="middle" x="4229" y="-6613.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.54,-9999.01C3403.75,-10010.04 3501.03,-10012.47 3556,-9954 3608.76,-9897.87 3522.65,-9316.57 3576,-9261 3638.02,-9196.4 3916.67,-9298.25 3978,-9233 4027.26,-9180.6 3949.99,-6697.55 3998,-6644 4043.92,-6592.78 4131.19,-6597.96 4184.03,-6607.04"/>
<polygon fill="blue" stroke="blue" points="4183.65,-6610.53 4194.12,-6608.89 4184.92,-6603.64 4183.65,-6610.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().</title>
<g id="a_node55"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_serial: &amp;[u8; RECEIPT_SERIAL...">
<polygon fill="white" stroke="black" points="3523,-10809 2993,-10809 2993,-10773 3523,-10773 3523,-10809"/>
<text text-anchor="middle" x="3258" y="-10787.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="node402" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<g id="a_node402"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCredentialReq...">
<polygon fill="white" stroke="black" points="3930,-10308 3624,-10308 3624,-10272 3930,-10272 3930,-10308"/>
<text text-anchor="middle" x="3777" y="-10286.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-10809.02C3404.64,-10819.72 3500.93,-10821.66 3556,-10764 3590.34,-10728.05 3542.45,-10353.69 3576,-10317 3586.67,-10305.33 3599.79,-10296.94 3614.16,-10291.03"/>
<polygon fill="blue" stroke="blue" points="3615.6,-10294.23 3623.78,-10287.49 3613.18,-10287.66 3615.6,-10294.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node56"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="3446.5,-10053 3069.5,-10053 3069.5,-10017 3446.5,-10017 3446.5,-10053"/>
<text text-anchor="middle" x="3258" y="-10031.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node368" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node368"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="4256,-6743 4202,-6743 4202,-6707 4256,-6707 4256,-6743"/>
<text text-anchor="middle" x="4229" y="-6721.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.55,-10053.02C3403.77,-10064.05 3501.05,-10066.49 3556,-10008 3609.96,-9950.56 3522.14,-9356.54 3576,-9299 3637.32,-9233.49 3917.35,-9327.13 3978,-9261 4025.11,-9209.64 3951.47,-6803.89 3998,-6752 4046.21,-6698.23 4140,-6706.62 4191.67,-6716.42"/>
<polygon fill="blue" stroke="blue" points="4191.23,-6719.9 4201.72,-6718.44 4192.61,-6713.04 4191.23,-6719.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node57"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="3409.5,-9729 3106.5,-9729 3106.5,-9693 3409.5,-9693 3409.5,-9729"/>
<text text-anchor="middle" x="3258" y="-9707.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node357" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node357"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="3805,-8776 3749,-8776 3749,-8740 3805,-8740 3805,-8776"/>
<text text-anchor="middle" x="3777" y="-8754.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.3,-9729.04C3403.58,-9740.16 3501.12,-9742.73 3556,-9684 3589.35,-9648.31 3545.23,-8842.94 3576,-8805 3614.77,-8757.19 3692.14,-8752.48 3738.46,-8754.49"/>
<polygon fill="blue" stroke="blue" points="3738.51,-8758 3748.69,-8755.06 3738.9,-8751.01 3738.51,-8758"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node58"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="3454,-11349 3062,-11349 3062,-11313 3454,-11313 3454,-11349"/>
<text text-anchor="middle" x="3258" y="-11327.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node403" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node403"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="3908.5,-10848 3645.5,-10848 3645.5,-10812 3908.5,-10812 3908.5,-10848"/>
<text text-anchor="middle" x="3777" y="-10826.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11349.02C3404.64,-11359.72 3500.93,-11361.66 3556,-11304 3590.34,-11268.05 3542.45,-10893.69 3576,-10857 3591.7,-10839.82 3612.72,-10829.74 3635.24,-10824.23"/>
<polygon fill="blue" stroke="blue" points="3636.27,-10827.59 3645.32,-10822.08 3634.81,-10820.75 3636.27,-10827.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node59"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="3484,-9891 3032,-9891 3032,-9855 3484,-9855 3484,-9891"/>
<text text-anchor="middle" x="3258" y="-9869.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node340" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node340"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="3810,-9144 3744,-9144 3744,-9108 3810,-9108 3810,-9144"/>
<text text-anchor="middle" x="3777" y="-9122.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.54,-9891.01C3403.75,-9902.04 3501.03,-9904.47 3556,-9846 3608.76,-9789.87 3524.47,-9210.26 3576,-9153 3615,-9109.66 3687.81,-9111.26 3733.99,-9117.68"/>
<polygon fill="blue" stroke="blue" points="3733.58,-9121.16 3743.99,-9119.21 3734.63,-9114.24 3733.58,-9121.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node60"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="3439,-9837 3077,-9837 3077,-9801 3439,-9801 3439,-9837"/>
<text text-anchor="middle" x="3258" y="-9815.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node361" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node361"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-8941 4202,-8941 4202,-8905 4256,-8905 4256,-8941"/>
<text text-anchor="middle" x="4229" y="-8919.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.55,-9837.01C3403.75,-9848.04 3501.04,-9850.48 3556,-9792 3608.99,-9735.63 3522.91,-9152.27 3576,-9096 3637.54,-9030.78 3911.76,-9121.44 3978,-9061 4015.03,-9027.21 3961.48,-8984.34 3998,-8950 4050.23,-8900.89 4141.29,-8907.09 4191.74,-8915.38"/>
<polygon fill="blue" stroke="blue" points="4191.41,-8918.88 4201.87,-8917.16 4192.62,-8911.98 4191.41,-8918.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().</title>
<g id="a_node61"><a xlink:title="fn CallLinkSecretParams_DeriveFromRootKey(root_key: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = CallLinkSecretParams::derive_from_root_key(root_key); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3411,-9513 3105,-9513 3105,-9477 3411,-9477 3411,-9513"/>
<text text-anchor="middle" x="3258" y="-9491.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DeriveFromRootKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="node373" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<g id="a_node373"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_root_key(root_key: &amp;[u8]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20230419_CallLinkSecretParams_DeriveFromRootKey&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_key, &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4311,-6498 4147,-6498 4147,-6462 4311,-6462 4311,-6498"/>
<text text-anchor="middle" x="4229" y="-6476.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_root_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DeriveFromRootKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-9513.03C3403.13,-9524.31 3501.17,-9527.13 3556,-9468 3606.09,-9413.97 3526.01,-8196.12 3576,-8142 3636.89,-8076.09 3917.19,-8169.98 3978,-8104 4007.58,-8071.91 3970.61,-6566.98 3998,-6533 4030.72,-6492.41 4087.73,-6479.08 4136.81,-6475.93"/>
<polygon fill="blue" stroke="blue" points="4137.02,-6479.43 4146.82,-6475.42 4136.66,-6472.43 4137.02,-6479.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node62"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="3511,-10863 3005,-10863 3005,-10827 3511,-10827 3511,-10863"/>
<text text-anchor="middle" x="3258" y="-10841.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node395" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node395"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="3918,-10362 3636,-10362 3636,-10326 3918,-10326 3918,-10362"/>
<text text-anchor="middle" x="3777" y="-10340.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-10863.02C3404.64,-10873.72 3500.93,-10875.66 3556,-10818 3590.34,-10782.05 3542.45,-10407.69 3576,-10371 3589.55,-10356.18 3607.06,-10346.64 3626.07,-10340.76"/>
<polygon fill="blue" stroke="blue" points="3627.11,-10344.11 3635.83,-10338.09 3625.26,-10337.36 3627.11,-10344.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node63"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="3494.5,-9675 3021.5,-9675 3021.5,-9639 3494.5,-9639 3494.5,-9675"/>
<text text-anchor="middle" x="3258" y="-9653.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node347" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node347"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="3841,-8673 3713,-8673 3713,-8637 3841,-8637 3841,-8673"/>
<text text-anchor="middle" x="3777" y="-8651.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.31,-9675.05C3403.6,-9686.18 3501.16,-9688.76 3556,-9630 3590.96,-9592.54 3544.32,-8748.26 3576,-8708 3605.57,-8670.42 3658.48,-8657.59 3702.45,-8653.94"/>
<polygon fill="blue" stroke="blue" points="3702.81,-8657.42 3712.54,-8653.24 3702.33,-8650.44 3702.81,-8657.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().</title>
<g id="a_node64"><a xlink:title="fn GroupSecretParams_DecryptProfileKey( &#160;&#160;&#160;&#160;params: Serialized&lt;GroupSecretParams&gt;, &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKeyCiphertext&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Result&lt;Serialized&lt;ProfileKey&gt;, ZkGroupVerif...">
<polygon fill="white" stroke="black" points="3399,-10701 3117,-10701 3117,-10665 3399,-10665 3399,-10701"/>
<text text-anchor="middle" x="3258" y="-10679.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DecryptProfileKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="node375" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<g id="a_node375"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_profile_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::ProfileKeyCiphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api::profiles::ProfileKey, ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3852.5,-9908 3701.5,-9908 3701.5,-9872 3852.5,-9872 3852.5,-9908"/>
<text text-anchor="middle" x="3777" y="-9886.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_profile_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DecryptProfileKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.57,-10701.04C3403.79,-10712.08 3501.09,-10714.52 3556,-10656 3612.21,-10596.1 3521.11,-9978.11 3576,-9917 3604.27,-9885.52 3650.38,-9877.73 3691.2,-9878.29"/>
<polygon fill="blue" stroke="blue" points="3691.35,-9881.8 3701.45,-9878.6 3691.56,-9874.8 3691.35,-9881.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().</title>
<g id="a_node65"><a xlink:title="fn CallLinkSecretParams_DecryptUserId( &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Serialized&lt;UuidCiphertext&gt;, ) &#45;&gt; Result&lt;Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let params = zkgroup::deserialize::&lt;CallLink...">
<polygon fill="white" stroke="black" points="3394,-9459 3122,-9459 3122,-9423 3394,-9423 3394,-9459"/>
<text text-anchor="middle" x="3258" y="-9437.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkSecretParams_DecryptUserId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="node372" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<g id="a_node372"><a xlink:title=" &#160;&#160;&#160;pub fn decrypt_uid( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: api::groups::UuidCiphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::Aci, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid = crypto::uid_encryption::Uid...">
<polygon fill="white" stroke="black" points="4278,-6444 4180,-6444 4180,-6408 4278,-6408 4278,-6444"/>
<text text-anchor="middle" x="4229" y="-6422.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_uid</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkSecretParams_DecryptUserId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-9459.02C3403.12,-9470.3 3501.17,-9473.13 3556,-9414 3605.49,-9360.63 3525.95,-8156.85 3576,-8104 3637.58,-8038.98 3916.52,-8141.11 3978,-8076 4008.96,-8043.22 3967.83,-6486.5 3998,-6453 4040.08,-6406.27 4116.61,-6406.56 4169.77,-6413.87"/>
<polygon fill="blue" stroke="blue" points="4169.34,-6417.34 4179.75,-6415.35 4170.37,-6410.42 4169.34,-6417.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().</title>
<g id="a_node66"><a xlink:title="fn ProfileKey_GetCommitment( &#160;&#160;&#160;&#160;profile_key: Serialized&lt;ProfileKey&gt;, &#160;&#160;&#160;&#160;user_id: Aci, ) &#45;&gt; Serialized&lt;ProfileKeyCommitment&gt; { &#160;&#160;&#160;&#160;profile_key.get_commitment(user_id).into() }">
<polygon fill="white" stroke="black" points="3360.5,-9405 3155.5,-9405 3155.5,-9369 3360.5,-9369 3360.5,-9405"/>
<text text-anchor="middle" x="3258" y="-9383.3" font-family="Helvetica,sans-Serif" font-size="14.00">ProfileKey_GetCommitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="node389" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<g id="a_node389"><a xlink:title=" &#160;&#160;&#160;pub fn get_commitment( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;) &#45;&gt; api::profiles::ProfileKeyCommitment { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let uid_bytes = uuid::Uuid::from(user_id).into_bytes(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="3844,-8041 3710,-8041 3710,-8005 3844,-8005 3844,-8041"/>
<text text-anchor="middle" x="3777" y="-8019.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ProfileKey_GetCommitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-9405.02C3403.11,-9416.3 3501.16,-9419.12 3556,-9360 3604.52,-9307.7 3532.05,-8132.2 3576,-8076 3604.84,-8039.12 3656.16,-8026.05 3699.6,-8022.11"/>
<polygon fill="blue" stroke="blue" points="3699.88,-8025.6 3709.59,-8021.35 3699.35,-8018.62 3699.88,-8025.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().</title>
<g id="a_node67"><a xlink:title="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serialized&lt;Gr...">
<polygon fill="white" stroke="black" points="3528,-9945 2988,-9945 2988,-9909 3528,-9909 3528,-9945"/>
<text text-anchor="middle" x="3258" y="-9923.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="node339" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<g id="a_node339"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AnyAuthCredentialPresentat...">
<polygon fill="white" stroke="black" points="3811.5,-9198 3742.5,-9198 3742.5,-9162 3811.5,-9162 3811.5,-9198"/>
<text text-anchor="middle" x="3777" y="-9176.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.86,-9945.05C3404.04,-9956.02 3501.09,-9958.35 3556,-9900 3606.81,-9846.01 3529.91,-9291.08 3576,-9233 3612.85,-9186.57 3685.3,-9177.98 3732.14,-9177.73"/>
<polygon fill="blue" stroke="blue" points="3732.27,-9181.23 3742.3,-9177.81 3732.32,-9174.23 3732.27,-9181.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node68"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="3548,-11295 2968,-11295 2968,-11259 3548,-11259 3548,-11295"/>
<text text-anchor="middle" x="3258" y="-11273.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node394" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node394"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="3963.5,-10794 3590.5,-10794 3590.5,-10758 3963.5,-10758 3963.5,-10794"/>
<text text-anchor="middle" x="3777" y="-10772.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11295.02C3404.64,-11305.72 3500.93,-11307.66 3556,-11250 3590.34,-11214.05 3542.45,-10839.69 3576,-10803 3578.05,-10800.76 3580.19,-10798.64 3582.41,-10796.63"/>
<polygon fill="blue" stroke="blue" points="3584.72,-10799.27 3590.28,-10790.25 3580.31,-10793.83 3584.72,-10799.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().</title>
<g id="a_node69"><a xlink:title="fn GenericServerSecretParams_GenerateDeterministic(randomness: &amp;[u8; RANDOMNESS_LEN]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = GenericServerSecretParams::generate(*randomness); &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;params) }">
<polygon fill="white" stroke="black" points="3444,-9297 3072,-9297 3072,-9261 3444,-9261 3444,-9297"/>
<text text-anchor="middle" x="3258" y="-9275.3" font-family="Helvetica,sans-Serif" font-size="14.00">GenericServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="node374" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<g id="a_node374"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: Default::default(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: zkcredential::credentials::CredentialKeyPair::generate(ra...">
<polygon fill="white" stroke="black" points="4696.5,-6600 4617.5,-6600 4617.5,-6564 4696.5,-6564 4696.5,-6600"/>
<text text-anchor="middle" x="4657" y="-6578.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GenericServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-9297.03C3402.92,-9308.4 3501.22,-9311.36 3556,-9252 3592.04,-9212.95 3540.96,-7378.95 3576,-7339 3706.82,-7189.84 4325.41,-7359.76 4460,-7214 4495.11,-7175.97 4466.69,-6796.17 4488,-6749 4516.29,-6686.37 4579.24,-6634.34 4619.54,-6605.77"/>
<polygon fill="blue" stroke="blue" points="4621.57,-6608.62 4627.77,-6600.03 4617.57,-6602.87 4621.57,-6608.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node70"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="3463,-10971 3053,-10971 3053,-10935 3463,-10935 3463,-10971"/>
<text text-anchor="middle" x="3258" y="-10949.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node397" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node397"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="3916,-10470 3638,-10470 3638,-10434 3916,-10434 3916,-10470"/>
<text text-anchor="middle" x="3777" y="-10448.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge493" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-10971.02C3404.64,-10981.72 3500.93,-10983.66 3556,-10926 3590.34,-10890.05 3542.45,-10515.69 3576,-10479 3590.02,-10463.67 3608.27,-10453.99 3628.05,-10448.17"/>
<polygon fill="blue" stroke="blue" points="3629.07,-10451.52 3637.87,-10445.61 3627.31,-10444.74 3629.07,-10451.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node71"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="3446,-9621 3070,-9621 3070,-9585 3446,-9585 3446,-9621"/>
<text text-anchor="middle" x="3258" y="-9599.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node364" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node364"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="4293,-6988 4165,-6988 4165,-6952 4293,-6952 4293,-6988"/>
<text text-anchor="middle" x="4229" y="-6966.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge506" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-9621.03C3403.13,-9632.32 3501.18,-9635.14 3556,-9576 3607.29,-9520.66 3524.81,-8273.43 3576,-8218 3636.88,-8152.08 3917.05,-8245.86 3978,-8180 4022.65,-8131.76 3953.9,-7045.74 3998,-6997 4036.31,-6954.66 4102.91,-6950.99 4154.61,-6956.11"/>
<polygon fill="blue" stroke="blue" points="4154.41,-6959.61 4164.74,-6957.25 4155.19,-6952.65 4154.41,-6959.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node72"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3464.5,-11025 3051.5,-11025 3051.5,-10989 3464.5,-10989 3464.5,-11025"/>
<text text-anchor="middle" x="3258" y="-11003.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node398" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node398"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3868,-10524 3686,-10524 3686,-10488 3868,-10488 3868,-10524"/>
<text text-anchor="middle" x="3777" y="-10502.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge509" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11025.02C3404.64,-11035.72 3500.93,-11037.66 3556,-10980 3590.34,-10944.05 3542.45,-10569.69 3576,-10533 3600.91,-10505.76 3639.18,-10496.37 3675.61,-10494.74"/>
<polygon fill="blue" stroke="blue" points="3675.91,-10498.24 3685.82,-10494.48 3675.73,-10491.24 3675.91,-10498.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node73"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="3519,-10431 2997,-10431 2997,-10395 3519,-10395 3519,-10431"/>
<text text-anchor="middle" x="3258" y="-10409.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node382" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node382"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="3870.5,-9609 3683.5,-9609 3683.5,-9573 3870.5,-9573 3870.5,-9609"/>
<text text-anchor="middle" x="3777" y="-9587.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge557" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.58,-10431.05C3403.82,-10442.1 3501.12,-10444.55 3556,-10386 3614.38,-10323.72 3518.99,-9681.53 3576,-9618 3600.17,-9591.06 3637.39,-9581.47 3673.2,-9579.61"/>
<polygon fill="blue" stroke="blue" points="3673.37,-9583.1 3683.25,-9579.28 3673.14,-9576.11 3673.37,-9583.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().</title>
<g id="a_node74"><a xlink:title="fn GroupSecretParams_DeriveFromMasterKey( &#160;&#160;&#160;&#160;master_key: Serialized&lt;GroupMasterKey&gt;, ) &#45;&gt; Serialized&lt;GroupSecretParams&gt; { &#160;&#160;&#160;&#160;GroupSecretParams::derive_from_master_key(master_key.into_inner()).into()...">
<polygon fill="white" stroke="black" points="3413.5,-9351 3102.5,-9351 3102.5,-9315 3413.5,-9315 3413.5,-9351"/>
<text text-anchor="middle" x="3258" y="-9329.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSecretParams_DeriveFromMasterKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="node378" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<g id="a_node378"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from_master_key(master_key: GroupMasterKey) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_GroupMasterKey_GroupSecretParams_DeriveFromMasterKey&#39; , &#160;...">
<polygon fill="white" stroke="black" points="4749.5,-9854 4564.5,-9854 4564.5,-9818 4749.5,-9818 4749.5,-9854"/>
<text text-anchor="middle" x="4657" y="-9832.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from_master_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge558" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSecretParams_DeriveFromMasterKey().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-9351.02C3403.12,-9362.31 3501.17,-9365.13 3556,-9306 3580.8,-9279.25 3565.55,-8027.95 3576,-7993 3676.22,-7658 3691.53,-7497.35 3998,-7329 4087.98,-7279.57 4385.21,-7258.66 4460,-7329 4496.98,-7363.78 4484.37,-7734.37 4488,-7785 4547.3,-8612.65 4637.28,-9626.71 4653.46,-9807.7"/>
<polygon fill="blue" stroke="blue" points="4649.98,-9808.09 4654.36,-9817.74 4656.96,-9807.47 4649.98,-9808.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().</title>
<g id="a_node75"><a xlink:title="fn GroupSendEndorsement_ToToken( &#160;&#160;&#160;&#160;endorsement: &amp;[u8], &#160;&#160;&#160;&#160;group_params: Serialized&lt;GroupSecretParams&gt;, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let endorsement = zkgroup::deserialize::&lt;GroupSendEndorsement&gt;(endorsement)...">
<polygon fill="white" stroke="black" points="3381.5,-10377 3134.5,-10377 3134.5,-10341 3381.5,-10341 3381.5,-10377"/>
<text text-anchor="middle" x="3258" y="-10355.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsement_ToToken</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge580" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsement_ToToken().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.58,-10377.05C3403.82,-10388.1 3501.12,-10390.55 3556,-10332 3614.38,-10269.72 3518.99,-9627.53 3576,-9564 3613.64,-9522.06 3682.92,-9522.16 3729.24,-9528.03"/>
<polygon fill="blue" stroke="blue" points="3728.94,-9531.52 3739.33,-9529.45 3729.91,-9524.59 3728.94,-9531.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node76"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="3406.5,-10485 3109.5,-10485 3109.5,-10449 3406.5,-10449 3406.5,-10485"/>
<text text-anchor="middle" x="3258" y="-10463.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node387" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node387"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="3833.5,-9663 3720.5,-9663 3720.5,-9627 3833.5,-9627 3833.5,-9663"/>
<text text-anchor="middle" x="3777" y="-9641.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge589" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.58,-10485.05C3403.82,-10496.1 3501.12,-10498.55 3556,-10440 3614.38,-10377.72 3518.99,-9735.53 3576,-9672 3608.78,-9635.47 3665.57,-9630.83 3710.28,-9634.12"/>
<polygon fill="blue" stroke="blue" points="3710.23,-9637.63 3720.5,-9635.03 3710.84,-9630.66 3710.23,-9637.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node77"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3469.5,-9243 3046.5,-9243 3046.5,-9207 3469.5,-9207 3469.5,-9243"/>
<text text-anchor="middle" x="3258" y="-9221.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node367" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node367"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="4262,-6797 4196,-6797 4196,-6761 4262,-6761 4262,-6797"/>
<text text-anchor="middle" x="4229" y="-6775.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge713" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-9243.04C3402.94,-9254.42 3501.25,-9257.38 3556,-9198 3595.94,-9154.68 3536.14,-7120.39 3576,-7077 3636.7,-7010.92 3914.48,-7102.38 3978,-7039 4010.71,-7006.36 3967.52,-6866.73 3998,-6832 4044.75,-6778.73 4133.33,-6773.25 4185.86,-6775.3"/>
<polygon fill="blue" stroke="blue" points="4185.71,-6778.79 4195.87,-6775.8 4186.05,-6771.8 4185.71,-6778.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().</title>
<g id="a_node78"><a xlink:title="fn ServerSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; ServerSecretParams { &#160;&#160;&#160;&#160;ServerSecretParams::generate(*randomness) }">
<polygon fill="white" stroke="black" points="3417.5,-11187 3098.5,-11187 3098.5,-11151 3417.5,-11151 3417.5,-11187"/>
<text text-anchor="middle" x="3258" y="-11165.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node404" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node404"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3816.5,-10686 3737.5,-10686 3737.5,-10650 3816.5,-10650 3816.5,-10686"/>
<text text-anchor="middle" x="3777" y="-10664.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge740" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11187.02C3404.64,-11197.72 3500.93,-11199.66 3556,-11142 3590.34,-11106.05 3542.45,-10731.69 3576,-10695 3613.48,-10654.01 3681.22,-10653.43 3727.38,-10658.93"/>
<polygon fill="blue" stroke="blue" points="3727.09,-10662.42 3737.46,-10660.27 3728.01,-10655.48 3727.09,-10662.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node79"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3418.5,-9783 3097.5,-9783 3097.5,-9747 3418.5,-9747 3418.5,-9783"/>
<text text-anchor="middle" x="3258" y="-9761.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node353" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node353"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="3811.5,-8850 3742.5,-8850 3742.5,-8814 3811.5,-8814 3811.5,-8850"/>
<text text-anchor="middle" x="3777" y="-8828.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge742" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.28,-9783.02C3403.55,-9794.14 3501.09,-9796.7 3556,-9738 3587.85,-9703.95 3548.32,-8936.52 3576,-8899 3611.98,-8850.24 3685.02,-8836.52 3732.17,-8832.92"/>
<polygon fill="blue" stroke="blue" points="3732.64,-8836.39 3742.39,-8832.26 3732.19,-8829.41 3732.64,-8836.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node80"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="3531,-11133 2985,-11133 2985,-11097 3531,-11097 3531,-11133"/>
<text text-anchor="middle" x="3258" y="-11111.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node396" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node396"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="3943.5,-10632 3610.5,-10632 3610.5,-10596 3943.5,-10596 3943.5,-10632"/>
<text text-anchor="middle" x="3777" y="-10610.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge769" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11133.02C3404.64,-11143.72 3500.93,-11145.66 3556,-11088 3590.34,-11052.05 3542.45,-10677.69 3576,-10641 3583.35,-10632.97 3591.85,-10626.48 3601.14,-10621.3"/>
<polygon fill="blue" stroke="blue" points="3602.9,-10624.33 3610.26,-10616.71 3599.75,-10618.07 3602.9,-10624.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node81"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="3515,-10593 3001,-10593 3001,-10557 3515,-10557 3515,-10593"/>
<text text-anchor="middle" x="3258" y="-10571.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node383" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node383"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="3869.5,-9771 3684.5,-9771 3684.5,-9735 3869.5,-9735 3869.5,-9771"/>
<text text-anchor="middle" x="3777" y="-9749.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge774" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.57,-10593.04C3403.79,-10604.08 3501.09,-10606.52 3556,-10548 3612.43,-10487.85 3524.83,-9870.68 3576,-9806 3599.48,-9776.32 3637.5,-9762.1 3674.12,-9755.63"/>
<polygon fill="blue" stroke="blue" points="3675.07,-9759.02 3684.4,-9754 3673.98,-9752.11 3675.07,-9759.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node82"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="3417,-9135 3099,-9135 3099,-9099 3417,-9099 3417,-9135"/>
<text text-anchor="middle" x="3258" y="-9113.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node369" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node369"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="4257,-6581 4201,-6581 4201,-6545 4257,-6545 4257,-6581"/>
<text text-anchor="middle" x="4229" y="-6559.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge775" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.27,-9135.02C3408.46,-9144.85 3502.98,-9145.08 3556,-9087 3595.07,-9044.2 3542.83,-7048.51 3576,-7001 3685.34,-6844.38 3863.44,-7001.85 3978,-6849 4012.62,-6802.81 3958,-6631.62 3998,-6590 4047.65,-6538.34 4139.64,-6545.52 4190.96,-6554.66"/>
<polygon fill="blue" stroke="blue" points="4190.48,-6558.13 4200.96,-6556.55 4191.78,-6551.25 4190.48,-6558.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().</title>
<g id="a_node83"><a xlink:title="fn CreateCallLinkCredentialRequestContext_NewDeterministic( &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let context = CreateCallLinkCredentialRequestContext::new(room...">
<polygon fill="white" stroke="black" points="3470.5,-9189 3045.5,-9189 3045.5,-9153 3470.5,-9153 3470.5,-9189"/>
<text text-anchor="middle" x="3258" y="-9167.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_NewDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="node370" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<g id="a_node370"><a xlink:title=" &#160;&#160;&#160;pub fn new(room_id: &amp;[u8], randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;poksho::ShoHmacSha256::new(b&#39; 20230413_Signal_CreateCallLinkCredentialRequest&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.ab...">
<polygon fill="white" stroke="black" points="4256,-6689 4202,-6689 4202,-6653 4256,-6653 4256,-6689"/>
<text text-anchor="middle" x="4229" y="-6667.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge802" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_NewDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-9189.04C3402.94,-9200.42 3501.25,-9203.38 3556,-9144 3595.64,-9101.01 3536.44,-7082.06 3576,-7039 3636.71,-6972.92 3915.46,-7065.34 3978,-7001 4025.03,-6952.61 3951.52,-6746.92 3998,-6698 4047.62,-6645.79 4140.43,-6653.43 4191.68,-6662.72"/>
<polygon fill="blue" stroke="blue" points="4191.17,-6666.19 4201.66,-6664.65 4192.5,-6659.32 4191.17,-6666.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node84"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="3411,-9567 3105,-9567 3105,-9531 3411,-9531 3411,-9567"/>
<text text-anchor="middle" x="3258" y="-9545.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node366" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node366"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="4257,-6880 4201,-6880 4201,-6844 4257,-6844 4257,-6880"/>
<text text-anchor="middle" x="4229" y="-6858.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge810" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-9567.03C3403.13,-9578.31 3501.18,-9581.14 3556,-9522 3606.69,-9467.32 3525.41,-8234.77 3576,-8180 3636.88,-8114.08 3917.08,-8207.88 3978,-8142 4025.26,-8090.88 3951.32,-6940.65 3998,-6889 4046.05,-6835.84 4138.67,-6843.61 4190.51,-6853.24"/>
<polygon fill="blue" stroke="blue" points="4190.13,-6856.73 4200.62,-6855.24 4191.49,-6849.87 4190.13,-6856.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node85"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="3463,-11079 3053,-11079 3053,-11043 3463,-11043 3463,-11079"/>
<text text-anchor="middle" x="3258" y="-11057.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node392" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node392"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="3920,-10578 3634,-10578 3634,-10542 3920,-10542 3920,-10578"/>
<text text-anchor="middle" x="3777" y="-10556.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge822" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.65,-11079.02C3404.64,-11089.72 3500.93,-11091.66 3556,-11034 3590.34,-10998.05 3542.45,-10623.69 3576,-10587 3589.09,-10572.69 3605.86,-10563.3 3624.12,-10557.38"/>
<polygon fill="blue" stroke="blue" points="3625.16,-10560.73 3633.8,-10554.59 3623.22,-10554 3625.16,-10560.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node86"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="3456,-10539 3060,-10539 3060,-10503 3456,-10503 3456,-10539"/>
<text text-anchor="middle" x="3258" y="-10517.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node384" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node384"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="3804,-9717 3750,-9717 3750,-9681 3804,-9681 3804,-9717"/>
<text text-anchor="middle" x="3777" y="-9695.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge872" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.58,-10539.05C3403.82,-10550.1 3501.12,-10552.55 3556,-10494 3614.38,-10431.72 3518.99,-9789.53 3576,-9726 3616.6,-9680.76 3694.02,-9684.44 3739.71,-9691.51"/>
<polygon fill="blue" stroke="blue" points="3739.34,-9694.99 3749.78,-9693.2 3740.5,-9688.09 3739.34,-9694.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node87"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="3821.5,-3009 3732.5,-3009 3732.5,-2973 3821.5,-2973 3821.5,-3009"/>
<text text-anchor="middle" x="3777" y="-2987.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge504" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.64,-2998.99C3865.89,-3006.65 3936.44,-3017.68 3998,-3022 4202.83,-3036.36 4255.15,-3036.04 4460,-3022 4500.72,-3019.21 4545.87,-3013.19 4582.56,-3007.54"/>
<polygon fill="blue" stroke="blue" points="4583.33,-3010.97 4592.67,-3005.96 4582.25,-3004.05 4583.33,-3010.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="4304,-2959 4154,-2959 4154,-2923 4304,-2923 4304,-2959"/>
<text text-anchor="middle" x="4229" y="-2937.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge503" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.56,-2986.16C3895.72,-2977.92 4047.77,-2961.03 4143.42,-2950.4"/>
<polygon fill="blue" stroke="blue" points="4144.09,-2953.84 4153.65,-2949.26 4143.32,-2946.89 4144.09,-2953.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node88"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3295.5,-3009 3220.5,-3009 3220.5,-2973 3295.5,-2973 3295.5,-3009"/>
<text text-anchor="middle" x="3258" y="-2987.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge536" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3295.77,-2991C3385.63,-2991 3616.72,-2991 3722.14,-2991"/>
<polygon fill="blue" stroke="blue" points="3722.24,-2994.5 3732.24,-2991 3722.24,-2987.5 3722.24,-2994.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node89"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="4256,-1457 4202,-1457 4202,-1421 4256,-1421 4256,-1457"/>
<text text-anchor="middle" x="4229" y="-1435.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.37,-1445.94C4306.57,-1460.73 4414.89,-1500.6 4460,-1579 4498.49,-1645.9 4437.35,-2909.76 4488,-2968 4510.93,-2994.36 4548.52,-3002.13 4582.35,-3002.86"/>
<polygon fill="blue" stroke="blue" points="4582.7,-3006.36 4592.7,-3002.87 4582.7,-2999.36 4582.7,-3006.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.37,-1436.36C4304.65,-1433.13 4407.12,-1434.02 4460,-1492 4659.06,-1710.28 4658.17,-2729.36 4656.37,-2912.71"/>
<polygon fill="blue" stroke="blue" points="4652.87,-2912.84 4656.26,-2922.88 4659.87,-2912.92 4652.87,-2912.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="5178,-2979 4862,-2979 4862,-2943 5178,-2943 5178,-2979"/>
<text text-anchor="middle" x="5020" y="-2957.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;) &#45;&gt; [u8; SIGNATURE_LENGTH] &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut random_...">
<polygon fill="white" stroke="black" points="5372,-3136 5222,-3136 5222,-3100 5372,-3100 5372,-3136"/>
<text text-anchor="middle" x="5297" y="-3114.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5141.88,-2979.06C5157.29,-2983.94 5172.41,-2990.13 5186,-2998 5225.95,-3021.12 5259.7,-3063.59 5278.9,-3091.3"/>
<polygon fill="blue" stroke="blue" points="5276.1,-3093.42 5284.61,-3099.73 5281.9,-3089.49 5276.1,-3093.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="5166.5,-3043 4873.5,-3043 4873.5,-3007 5166.5,-3007 5166.5,-3043"/>
<text text-anchor="middle" x="5020" y="-3021.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4721.29,-3000.26C4760.64,-3003.53 4813.09,-3007.89 4862.99,-3012.03"/>
<polygon fill="blue" stroke="blue" points="4863,-3015.55 4873.26,-3012.89 4863.58,-3008.57 4863,-3015.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4304.2,-2941C4378.81,-2941 4493.64,-2941 4571.65,-2941"/>
<polygon fill="blue" stroke="blue" points="4571.93,-2944.5 4581.93,-2941 4571.93,-2937.5 4571.93,-2944.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="5361,-3190 5233,-3190 5233,-3154 5361,-3154 5361,-3190"/>
<text text-anchor="middle" x="5297" y="-3168.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge550" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5108.88,-3043.05C5136.54,-3052.48 5165.26,-3066.68 5186,-3088 5204.72,-3107.24 5186.58,-3126.46 5206,-3145 5211.07,-3149.84 5216.98,-3153.82 5223.3,-3157.09"/>
<polygon fill="blue" stroke="blue" points="5222.25,-3160.46 5232.8,-3161.39 5225.13,-3154.08 5222.25,-3160.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge648" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4732.36,-2945.12C4767.04,-2947.04 4809.83,-2949.41 4851.67,-2951.73"/>
<polygon fill="blue" stroke="blue" points="4851.54,-2955.23 4861.71,-2952.29 4851.92,-2948.24 4851.54,-2955.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="4311,-3013 4147,-3013 4147,-2977 4311,-2977 4311,-3013"/>
<text text-anchor="middle" x="4229" y="-2991.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge849" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.02,-3005.31C4451,-3022.02 4732.13,-3050.42 4826,-3022 4844.4,-3016.43 4844.36,-3005.66 4862,-2998 4876.68,-2991.63 4892.62,-2986.25 4908.54,-2981.75"/>
<polygon fill="blue" stroke="blue" points="4909.71,-2985.06 4918.44,-2979.06 4907.87,-2978.31 4909.71,-2985.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge847" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.13,-2995C4389.41,-2995 4506.85,-2995 4582.46,-2995"/>
<polygon fill="blue" stroke="blue" points="4582.85,-2998.5 4592.85,-2995 4582.85,-2991.5 4582.85,-2998.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge848" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.22,-3011.67C4361.82,-3021.2 4428.4,-3032.18 4488,-3037 4637.73,-3049.11 4675.85,-3041.66 4826,-3037 4838.11,-3036.62 4850.65,-3036.12 4863.24,-3035.52"/>
<polygon fill="blue" stroke="blue" points="4863.54,-3039.01 4873.35,-3035.02 4863.19,-3032.02 4863.54,-3039.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge850" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.21,-2985.87C4355.26,-2980.81 4410.65,-2974.3 4460,-2968 4496.59,-2963.33 4536.98,-2957.83 4571.54,-2953.01"/>
<polygon fill="blue" stroke="blue" points="4572.17,-2956.46 4581.59,-2951.61 4571.2,-2949.53 4572.17,-2956.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5372.09,-3131.37C5378.01,-3134.94 5383.32,-3139.41 5387.5,-3145 5419.22,-3187.37 5415.33,-6903.07 5416,-6956 5441.56,-8960.6 5495.45,-11435.72 5501.87,-11727.5"/>
<polygon fill="blue" stroke="blue" points="5498.38,-11727.75 5502.09,-11737.67 5505.37,-11727.59 5498.38,-11727.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5372.11,-3131.35C5378.03,-3134.93 5383.33,-3139.4 5387.5,-3145 5459.2,-3241.19 5344.76,-11686.47 5416,-11783 5423.97,-11793.79 5436.22,-11800.39 5449.02,-11804.39"/>
<polygon fill="blue" stroke="blue" points="5448.3,-11807.82 5458.86,-11806.97 5450.08,-11801.05 5448.3,-11807.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5324.79,-3190.09C5346.25,-3206.32 5374.79,-3232.29 5387.5,-3263 5407.12,-3310.39 5415.34,-6904.71 5416,-6956 5441.8,-8960.59 5495.48,-11435.72 5501.87,-11727.5"/>
<polygon fill="blue" stroke="blue" points="5498.38,-11727.75 5502.1,-11737.67 5505.38,-11727.59 5498.38,-11727.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5324.82,-3190.07C5346.3,-3206.3 5374.86,-3232.26 5387.5,-3263 5410.01,-3317.72 5380.87,-11735.39 5416,-11783 5423.97,-11793.79 5436.22,-11800.39 5449.02,-11804.39"/>
<polygon fill="blue" stroke="blue" points="5448.3,-11807.82 5458.86,-11806.97 5450.08,-11801.05 5448.3,-11807.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5111.5,-3136 4928.5,-3136 4928.5,-3100 5111.5,-3100 5111.5,-3136"/>
<text text-anchor="middle" x="5020" y="-3114.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5111.81,-3118C5143.99,-3118 5180.05,-3118 5211.68,-3118"/>
<polygon fill="blue" stroke="blue" points="5211.78,-3121.5 5221.78,-3118 5211.78,-3114.5 5211.78,-3121.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5111.58,-3131.51C5135.82,-3135.48 5161.97,-3140.09 5186,-3145 5198.01,-3147.45 5210.69,-3150.31 5223.01,-3153.23"/>
<polygon fill="blue" stroke="blue" points="5222.25,-3156.65 5232.79,-3155.58 5223.88,-3149.84 5222.25,-3156.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="5077.5,-3190 4962.5,-3190 4962.5,-3154 5077.5,-3154 5077.5,-3190"/>
<text text-anchor="middle" x="5020" y="-3168.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge708" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5077.65,-3172C5119.6,-3172 5177.13,-3172 5222.6,-3172"/>
<polygon fill="blue" stroke="blue" points="5222.7,-3175.5 5232.7,-3172 5222.7,-3168.5 5222.7,-3175.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node100"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1110,-12415 952,-12415 952,-12379 1110,-12379 1110,-12415"/>
<text text-anchor="middle" x="1031" y="-12393.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;pub fn verify_search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: SlimSearchRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: FullSearchResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime,...">
<polygon fill="white" stroke="black" points="1372.5,-12213 1264.5,-12213 1264.5,-12177 1372.5,-12177 1372.5,-12213"/>
<text text-anchor="middle" x="1318.5" y="-12191.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1110.02,-12384.25C1124.55,-12380.03 1139.18,-12374.42 1152,-12367 1216.58,-12329.61 1272.19,-12259.72 1299.5,-12221.55"/>
<polygon fill="blue" stroke="blue" points="1302.61,-12223.21 1305.51,-12213.02 1296.89,-12219.18 1302.61,-12223.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node101"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="812,-12415 737,-12415 737,-12379 812,-12379 812,-12415"/>
<text text-anchor="middle" x="774.5" y="-12393.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge764" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.23,-12397C845.95,-12397 897.24,-12397 941.58,-12397"/>
<polygon fill="blue" stroke="blue" points="941.8,-12400.5 951.8,-12397 941.8,-12393.5 941.8,-12400.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node107"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="1651.5,-12236 1543.5,-12236 1543.5,-12200 1651.5,-12200 1651.5,-12236"/>
<text text-anchor="middle" x="1597.5" y="-12214.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="edge519" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1372.58,-12199.41C1418.34,-12203.21 1484.51,-12208.7 1533.05,-12212.73"/>
<polygon fill="blue" stroke="blue" points="1532.87,-12216.23 1543.13,-12213.57 1533.45,-12209.25 1532.87,-12216.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;a self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;M...">
<polygon fill="white" stroke="black" points="1376.5,-12159 1260.5,-12159 1260.5,-12123 1376.5,-12123 1376.5,-12159"/>
<text text-anchor="middle" x="1318.5" y="-12137.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<g id="a_node105"><a xlink:title="pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;config: &amp;&#39;a PublicConfig, &#160;&#160;&#160;&#160;req: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;res: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;MonitorStateUpdate&gt; { ...">
<polygon fill="white" stroke="black" points="1908,-12182 1792,-12182 1792,-12146 1908,-12146 1908,-12182"/>
<text text-anchor="middle" x="1850" y="-12160.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="edge528" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1376.67,-12136.81C1451.57,-12132.13 1586.92,-12126.52 1702,-12137 1728.23,-12139.39 1756.77,-12144.13 1781.67,-12148.98"/>
<polygon fill="blue" stroke="blue" points="1781.25,-12152.46 1791.74,-12150.99 1782.61,-12145.6 1781.25,-12152.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node104"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2196.5,-12236 2037.5,-12236 2037.5,-12200 2196.5,-12200 2196.5,-12236"/>
<text text-anchor="middle" x="2117" y="-12214.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node108"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="2703.5,-12236 2500.5,-12236 2500.5,-12200 2703.5,-12200 2703.5,-12236"/>
<text text-anchor="middle" x="2602" y="-12214.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.68,-12218C2276.34,-12218 2400.25,-12218 2489.9,-12218"/>
<polygon fill="blue" stroke="blue" points="2490.11,-12221.5 2500.11,-12218 2490.11,-12214.5 2490.11,-12221.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1908.17,-12175.65C1942.96,-12182.74 1988.12,-12191.94 2027.45,-12199.96"/>
<polygon fill="blue" stroke="blue" points="2026.82,-12203.4 2037.32,-12201.97 2028.22,-12196.54 2026.82,-12203.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node106"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="1933.5,-12236 1766.5,-12236 1766.5,-12200 1933.5,-12200 1933.5,-12236"/>
<text text-anchor="middle" x="1850" y="-12214.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge515" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1933.76,-12218C1963.5,-12218 1997.16,-12218 2027.38,-12218"/>
<polygon fill="blue" stroke="blue" points="2027.49,-12221.5 2037.49,-12218 2027.49,-12214.5 2027.49,-12221.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node109"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="2189.5,-12182 2044.5,-12182 2044.5,-12146 2189.5,-12146 2189.5,-12182"/>
<text text-anchor="middle" x="2117" y="-12160.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge514" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1933.76,-12201.14C1965.69,-12194.63 2002.12,-12187.21 2033.98,-12180.71"/>
<polygon fill="blue" stroke="blue" points="2035.05,-12184.07 2044.15,-12178.64 2033.66,-12177.21 2035.05,-12184.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge602" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.62,-12218C1681.95,-12218 1720.83,-12218 1756.06,-12218"/>
<polygon fill="blue" stroke="blue" points="1756.37,-12221.5 1766.37,-12218 1756.37,-12214.5 1756.37,-12221.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge666" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M2703.75,-12219.23C2851.89,-12221.04 3121.53,-12224.34 3219.85,-12225.55"/>
<polygon fill="blue" stroke="blue" points="3219.86,-12229.05 3229.91,-12225.67 3219.95,-12222.05 3219.86,-12229.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="5076.5,-12327 4963.5,-12327 4963.5,-12291 5076.5,-12291 5076.5,-12327"/>
<text text-anchor="middle" x="5020" y="-12305.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge729" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2189.84,-12161.54C2613.5,-12147.13 4769.29,-12075.78 4826,-12113 4859.62,-12135.06 4836.78,-12164.69 4862,-12196 4892.94,-12234.41 4940.06,-12265.94 4974.6,-12285.85"/>
<polygon fill="blue" stroke="blue" points="4973.12,-12289.03 4983.54,-12290.9 4976.56,-12282.93 4973.12,-12289.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="1702,-12182 1493,-12182 1493,-12146 1702,-12146 1702,-12182"/>
<text text-anchor="middle" x="1597.5" y="-12160.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge811" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1682.26,-12182.06C1706.01,-12187.18 1732.01,-12192.78 1756.26,-12198.01"/>
<polygon fill="blue" stroke="blue" points="1755.66,-12201.46 1766.17,-12200.14 1757.13,-12194.62 1755.66,-12201.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5061.24,-12290.91C5098.59,-12272.19 5153.22,-12239.55 5186,-12196 5258.5,-12099.66 5284.71,-11953.02 5292.82,-11892.08"/>
<polygon fill="blue" stroke="blue" points="5296.31,-11892.42 5294.09,-11882.06 5289.36,-11891.54 5296.31,-11892.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="4730,-12381 4584,-12381 4584,-12345 4730,-12345 4730,-12381"/>
<text text-anchor="middle" x="4657" y="-12359.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4730.19,-12352.2C4795.29,-12342.46 4890.21,-12328.26 4953.25,-12318.84"/>
<polygon fill="blue" stroke="blue" points="4954.1,-12322.25 4963.47,-12317.31 4953.06,-12315.32 4954.1,-12322.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4748,-12327 4566,-12327 4566,-12291 4748,-12291 4748,-12327"/>
<text text-anchor="middle" x="4657" y="-12305.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4748.16,-12309C4811.9,-12309 4895.88,-12309 4953.32,-12309"/>
<polygon fill="blue" stroke="blue" points="4953.37,-12312.5 4963.37,-12309 4953.37,-12305.5 4953.37,-12312.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().</title>
<g id="a_node114"><a xlink:title="fn parse_and_validate(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; PartialBackup&#39; ); &#160;&#160;&#160;&#160;benchmark_multiple_backup_sizes(|size, _backup, _key| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if size == 0 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;retu...">
<polygon fill="white" stroke="black" points="1393.5,-4120 1243.5,-4120 1243.5,-4084 1393.5,-4084 1393.5,-4120"/>
<text text-anchor="middle" x="1318.5" y="-4098.3" font-family="Helvetica,sans-Serif" font-size="14.00">parse_and_validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 parse_and_validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1378.21,-4120.06C1403.3,-4128.93 1432.42,-4140.78 1457,-4155 1500.22,-4180 1543.97,-4217.95 1570.67,-4242.87"/>
<polygon fill="blue" stroke="blue" points="1568.38,-4245.52 1578.06,-4249.84 1573.18,-4240.43 1568.38,-4245.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn process&lt;R: ReaderFactory&lt;Reader: Unpin&gt;&gt;(input: R, key: &amp;MessageBackupKey) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;futures::executor::block_on(async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupReader::new_encrypted_compressed( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key,...">
<polygon fill="white" stroke="black" points="1353.5,-4066 1283.5,-4066 1283.5,-4030 1353.5,-4030 1353.5,-4066"/>
<text text-anchor="middle" x="1318.5" y="-4044.3" font-family="Helvetica,sans-Serif" font-size="14.00">process</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge563" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 process().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1353.72,-4047.88C1383.22,-4049.28 1425.86,-4055.06 1457,-4075 1521.12,-4116.05 1565.18,-4197.91 1584.86,-4240.63"/>
<polygon fill="blue" stroke="blue" points="1581.71,-4242.18 1589.01,-4249.86 1588.1,-4239.3 1581.71,-4242.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake() &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::fake_with([ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Recipient::test_data_contact().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::Chat::test_data().into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1624.5,-4580 1570.5,-4580 1570.5,-4544 1624.5,-4544 1624.5,-4580"/>
<text text-anchor="middle" x="1597.5" y="-4558.3" font-family="Helvetica,sans-Serif" font-size="14.00">fake</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn fake_with(frames: impl IntoIterator&lt;Item = proto::frame::Item&gt;) &#45;&gt; PartialBackup&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut backup = Self::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for frame in frames { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backu...">
<polygon fill="white" stroke="black" points="1891,-4580 1809,-4580 1809,-4544 1891,-4544 1891,-4580"/>
<text text-anchor="middle" x="1850" y="-4558.3" font-family="Helvetica,sans-Serif" font-size="14.00">fake_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.83,-4557.66C1665.93,-4554.92 1746.05,-4554.51 1798.53,-4556.46"/>
<polygon fill="blue" stroke="blue" points="1798.5,-4559.96 1808.64,-4556.88 1798.79,-4552.97 1798.5,-4559.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;fn pni_matching_aci_is_okay&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid...">
<polygon fill="white" stroke="black" points="2214,-4580 2020,-4580 2020,-4544 2214,-4544 2214,-4580"/>
<text text-anchor="middle" x="2117" y="-4558.3" font-family="Helvetica,sans-Serif" font-size="14.00">pni_matching_aci_is_okay</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;fn add_recipient(&amp;mut self, recipient: proto::Recipient) &#45;&gt; Result&lt;(), RecipientFrameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = recipient.id(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err_with_id = |e| RecipientFrameError(id, e); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2657,-4580 2547,-4580 2547,-4544 2657,-4544 2657,-4580"/>
<text text-anchor="middle" x="2602" y="-4558.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/pni_matching_aci_is_okay().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2214,-4562C2309.74,-4562 2454.11,-4562 2536.78,-4562"/>
<polygon fill="blue" stroke="blue" points="2536.79,-4565.5 2546.79,-4562 2536.79,-4558.5 2536.79,-4565.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;pub fn add_frame(&amp;mut self, frame: proto::Frame) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_frame_item(frame.item.ok_or(ValidationError::EmptyFrame)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1895.5,-4526 1804.5,-4526 1804.5,-4490 1895.5,-4490 1895.5,-4526"/>
<text text-anchor="middle" x="1850" y="-4504.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn add_frame_item(&amp;mut self, item: FrameItem) &#45;&gt; Result&lt;(), ValidationError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;FrameItem::Account(account_data) =&gt; self.add_account_data(account_data), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2181,-4634 2053,-4634 2053,-4598 2181,-4598 2181,-4634"/>
<text text-anchor="middle" x="2117" y="-4612.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_frame_item</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1895.73,-4511.29C1917.32,-4514.68 1942.67,-4521.47 1962,-4535 1985.63,-4551.54 1974.26,-4572.62 1998,-4589 2011.32,-4598.19 2027.31,-4604.29 2043.15,-4608.34"/>
<polygon fill="blue" stroke="blue" points="2042.44,-4611.77 2052.97,-4610.6 2044.01,-4604.94 2042.44,-4611.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1808.64,-4567.12C1760.64,-4569.35 1681.24,-4569.29 1635,-4566.93"/>
<polygon fill="blue" stroke="blue" points="1635.02,-4563.43 1624.83,-4566.34 1634.61,-4570.42 1635.02,-4563.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1891.25,-4570.2C1931.41,-4578.39 1994.03,-4591.14 2042.97,-4601.12"/>
<polygon fill="blue" stroke="blue" points="2042.39,-4604.57 2052.88,-4603.14 2043.79,-4597.71 2042.39,-4604.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;fn allows_lone_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; ac...">
<polygon fill="white" stroke="black" points="1932.5,-4472 1767.5,-4472 1767.5,-4436 1932.5,-4436 1932.5,-4472"/>
<text text-anchor="middle" x="1850" y="-4450.3" font-family="Helvetica,sans-Serif" font-size="14.00">allows_lone_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1932.57,-4468.64C1942.79,-4471.96 1952.85,-4476.03 1962,-4481 1981.34,-4491.51 1977.88,-4506.08 1998,-4515 2004.11,-4517.71 2382.26,-4545.86 2536.53,-4557.25"/>
<polygon fill="blue" stroke="blue" points="2536.58,-4560.77 2546.81,-4558.01 2537.09,-4553.79 2536.58,-4560.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/allows_lone_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1932.58,-4463.6C1943.39,-4467.66 1953.61,-4473.28 1962,-4481 1999.23,-4515.26 1960.53,-4555 1998,-4589 2010.37,-4600.23 2026.44,-4607.09 2042.71,-4611.21"/>
<polygon fill="blue" stroke="blue" points="2042.32,-4614.7 2052.84,-4613.43 2043.83,-4607.87 2042.32,-4614.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;fn zero_recipient_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid accoun...">
<polygon fill="white" stroke="black" points="2183,-4506 2051,-4506 2051,-4470 2183,-4470 2183,-4506"/>
<text text-anchor="middle" x="2117" y="-4484.3" font-family="Helvetica,sans-Serif" font-size="14.00">zero_recipient_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_recipient_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.14,-4497.98C2275.84,-4512.18 2444.77,-4538.06 2536.9,-4552.18"/>
<polygon fill="blue" stroke="blue" points="2536.51,-4555.66 2546.92,-4553.72 2537.57,-4548.74 2536.51,-4555.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;fn chat_item_order() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut partial = Store::empty(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account data&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2181,-4452 2053,-4452 2053,-4416 2181,-4416 2181,-4452"/>
<text text-anchor="middle" x="2117" y="-4430.3" font-family="Helvetica,sans-Serif" font-size="14.00">chat_item_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/chat_item_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.2,-4447.91C2198.97,-4451.97 2218.27,-4456.52 2236,-4461 2341.94,-4487.76 2464.15,-4522.34 2536.86,-4543.31"/>
<polygon fill="blue" stroke="blue" points="2536.21,-4546.76 2546.78,-4546.18 2538.15,-4540.04 2536.21,-4546.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;fn duplicate_non_contact_recipient&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, destination): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; Co...">
<polygon fill="white" stroke="black" points="2236,-4796 1998,-4796 1998,-4760 2236,-4760 2236,-4796"/>
<text text-anchor="middle" x="2117" y="-4774.3" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_non_contact_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_non_contact_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2207.93,-4759.93C2217.51,-4757.27 2227.02,-4754.29 2236,-4751 2361.74,-4704.91 2499.28,-4624.82 2563.75,-4585.35"/>
<polygon fill="blue" stroke="blue" points="2565.67,-4588.28 2572.35,-4580.06 2562,-4582.32 2565.67,-4588.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn duplicate_contact_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(expected_error, fill_in_field): ( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;impl Fn(RecipientId, RecipientId) &#45;&gt; CompletionE...">
<polygon fill="white" stroke="black" points="2196,-4742 2038,-4742 2038,-4706 2196,-4706 2196,-4742"/>
<text text-anchor="middle" x="2117" y="-4720.3" font-family="Helvetica,sans-Serif" font-size="14.00">duplicate_contact_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/duplicate_contact_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.13,-4707.62C2209.51,-4704.39 2223.21,-4700.81 2236,-4697 2349.17,-4663.28 2477.95,-4612.68 2548.27,-4583.96"/>
<polygon fill="blue" stroke="blue" points="2549.87,-4587.09 2557.79,-4580.06 2547.21,-4580.61 2549.87,-4587.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;fn rejects_multiple_account_data&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expe...">
<polygon fill="white" stroke="black" points="1962,-4688 1738,-4688 1738,-4652 1962,-4652 1962,-4688"/>
<text text-anchor="middle" x="1850" y="-4666.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_multiple_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_multiple_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1939.61,-4651.94C1973.01,-4645.14 2010.6,-4637.48 2042.48,-4630.98"/>
<polygon fill="blue" stroke="blue" points="2043.51,-4634.34 2052.61,-4628.92 2042.11,-4627.48 2043.51,-4634.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;fn zero_chat_id&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_account_data(proto::AccountData::test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid account dat...">
<polygon fill="white" stroke="black" points="2168,-4688 2066,-4688 2066,-4652 2168,-4652 2168,-4688"/>
<text text-anchor="middle" x="2117" y="-4666.3" font-family="Helvetica,sans-Serif" font-size="14.00">zero_chat_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/zero_chat_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2168.32,-4658.75C2256.65,-4639 2439.42,-4598.13 2536.74,-4576.37"/>
<polygon fill="blue" stroke="blue" points="2537.75,-4579.73 2546.74,-4574.13 2536.22,-4572.9 2537.75,-4579.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<g id="a_node144"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;Destination&lt;R&gt;, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3310.5,-4234 3205.5,-4234 3205.5,-4198 3310.5,-4198 3310.5,-4234"/>
<text text-anchor="middle" x="3258" y="-4212.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2642.99,-4544C2705.41,-4515.63 2829.48,-4458.17 2932,-4404 3037.53,-4348.24 3158.36,-4276.07 3218.62,-4239.49"/>
<polygon fill="blue" stroke="blue" points="3220.68,-4242.33 3227.41,-4234.14 3217.05,-4236.35 3220.68,-4242.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_recipient().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.14,-4608.94C2273.32,-4598.63 2443.83,-4579.57 2536.68,-4569.19"/>
<polygon fill="blue" stroke="blue" points="2537.23,-4572.65 2546.78,-4568.06 2536.45,-4565.69 2537.23,-4572.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(...">
<polygon fill="white" stroke="black" points="1946.5,-4634 1753.5,-4634 1753.5,-4598 1946.5,-4598 1946.5,-4634"/>
<text text-anchor="middle" x="1850" y="-4612.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge491" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1946.67,-4616C1978.23,-4616 2012.83,-4616 2042.47,-4616"/>
<polygon fill="blue" stroke="blue" points="2042.74,-4619.5 2052.74,-4616 2042.74,-4612.5 2042.74,-4619.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_id&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let err = partial.add_frame_item(item.into()).unwra...">
<polygon fill="white" stroke="black" points="1394.5,-4617 1242.5,-4617 1242.5,-4581 1394.5,-4581 1394.5,-4617"/>
<text text-anchor="middle" x="1318.5" y="-4595.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake(). -->
<g id="edge502" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.83,-4588.94C1448.58,-4581.76 1518.5,-4572.42 1560.31,-4566.83"/>
<polygon fill="blue" stroke="blue" points="1560.86,-4570.29 1570.31,-4565.5 1559.93,-4563.35 1560.86,-4570.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with(). -->
<g id="edge501" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/TestPartialBackupMethod#fake_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1394.84,-4600.48C1472.15,-4601.18 1595.79,-4600.07 1702,-4589 1734.41,-4585.62 1770.39,-4579.06 1798.65,-4573.25"/>
<polygon fill="blue" stroke="blue" points="1799.62,-4576.63 1808.69,-4571.15 1798.18,-4569.77 1799.62,-4576.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge500" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1355.81,-4617.12C1426.97,-4651.5 1590.69,-4725.08 1738,-4751 1836.05,-4768.25 1881.24,-4809.21 1962,-4751 2003.05,-4721.42 1960.53,-4677 1998,-4643 2010.37,-4631.77 2026.44,-4624.91 2042.71,-4620.79"/>
<polygon fill="blue" stroke="blue" points="2043.83,-4624.13 2052.84,-4618.57 2042.32,-4617.3 2043.83,-4624.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;fn rejects_missing_foreign_key&lt;M: Method + ReferencedTypes&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut partial: PartialBackup&lt;M&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: impl Into&lt;FrameItem&gt;, &#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let frame = proto::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item:...">
<polygon fill="white" stroke="black" points="1702,-4526 1493,-4526 1493,-4490 1702,-4490 1702,-4526"/>
<text text-anchor="middle" x="1597.5" y="-4504.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_missing_foreign_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge512" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_missing_foreign_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1702.2,-4508C1733.82,-4508 1767.34,-4508 1794.35,-4508"/>
<polygon fill="blue" stroke="blue" points="1794.37,-4511.5 1804.37,-4508 1794.37,-4504.5 1794.37,-4511.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;fn rejects_duplicate_all_folder&lt;M: Method + ReferencedTypes&gt;(mut partial: PartialBackup&lt;M&gt;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;partial &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.add_frame_item(proto::AccountData::test_data().into()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expec...">
<polygon fill="white" stroke="black" points="1951.5,-4742 1748.5,-4742 1748.5,-4706 1951.5,-4706 1951.5,-4742"/>
<text text-anchor="middle" x="1850" y="-4720.3" font-family="Helvetica,sans-Serif" font-size="14.00">rejects_duplicate_all_folder</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item(). -->
<g id="edge597" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/test/rejects_duplicate_all_folder().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame_item().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1946.66,-4705.87C1952.04,-4703.3 1957.21,-4700.36 1962,-4697 1985.63,-4680.46 1974.26,-4659.38 1998,-4643 2011.32,-4633.81 2027.31,-4627.71 2043.15,-4623.66"/>
<polygon fill="blue" stroke="blue" points="2044.01,-4627.06 2052.97,-4621.4 2042.44,-4620.23 2044.01,-4627.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;fn valid_account_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::AccountData::test_data().try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(AccountData::from_proto_test_data()) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3332.5,-4452 3183.5,-4452 3183.5,-4416 3332.5,-4416 3332.5,-4452"/>
<text text-anchor="middle" x="3258" y="-4430.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_account_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(crate) fn from_proto_test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: FAKE_PROFILE_KEY, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Some(UsernameData { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username: Use...">
<polygon fill="white" stroke="black" points="3858,-4452 3696,-4452 3696,-4416 3858,-4416 3858,-4452"/>
<text text-anchor="middle" x="3777" y="-4430.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_proto_test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/valid_account_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3332.52,-4434C3425.51,-4434 3585.55,-4434 3685.82,-4434"/>
<polygon fill="blue" stroke="blue" points="3685.93,-4437.5 3695.93,-4434 3685.93,-4430.5 3685.93,-4437.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;fn try_from( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(username, username_link): (String, Option&lt;proto::account_data::UsernameLink&gt;), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;username)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3295.5,-4506 3220.5,-4506 3220.5,-4470 3295.5,-4470 3295.5,-4506"/>
<text text-anchor="middle" x="3258" y="-4484.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/impl#[UsernameData][`TryFrom&lt;(String, Option&lt;proto::account_data::UsernameLink&gt;)&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3295.5,-4484.72C3428.22,-4473.68 3882.38,-4443.69 3978,-4541 4033.54,-4597.52 3943.7,-4839.3 3998,-4897 4047.49,-4949.59 4140.77,-4941.67 4192.02,-4932.27"/>
<polygon fill="blue" stroke="blue" points="4192.84,-4935.67 4201.98,-4930.32 4191.5,-4928.8 4192.84,-4935.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge776" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.24,-4436C3900.67,-4441.6 3949.69,-4456.19 3978,-4492 4005.94,-4527.34 3967.23,-4864.08 3998,-4897 4047.31,-4949.76 4140.66,-4941.77 4191.97,-4932.31"/>
<polygon fill="blue" stroke="blue" points="4192.81,-4935.71 4201.95,-4930.36 4191.46,-4928.85 4192.81,-4935.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node136"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="2642,-8399 2562,-8399 2562,-8363 2642,-8363 2642,-8399"/>
<text text-anchor="middle" x="2602" y="-8377.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node137"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="3345,-8399 3171,-8399 3171,-8363 3345,-8363 3345,-8399"/>
<text text-anchor="middle" x="3258" y="-8377.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2642.44,-8381C2743.57,-8381 3014.44,-8381 3160.49,-8381"/>
<polygon fill="blue" stroke="blue" points="3160.79,-8384.5 3170.79,-8381 3160.79,-8377.5 3160.79,-8384.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.2,-8369.8C3413.55,-8366.28 3505.66,-8374.53 3556,-8434 3589.79,-8473.93 3541.37,-10277.8 3576,-10317 3589.4,-10332.16 3606.92,-10341.86 3626.04,-10347.78"/>
<polygon fill="blue" stroke="blue" points="3625.28,-10351.2 3635.85,-10350.47 3627.13,-10344.45 3625.28,-10351.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.22,-8369.79C3413.57,-8366.26 3505.69,-8374.51 3556,-8434 3592.68,-8477.38 3538.41,-10436.41 3576,-10479 3600.53,-10506.79 3638.95,-10516.22 3675.58,-10517.72"/>
<polygon fill="blue" stroke="blue" points="3675.78,-10521.23 3685.85,-10517.94 3675.93,-10514.23 3675.78,-10521.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.21,-8369.8C3413.56,-8366.27 3505.67,-8374.52 3556,-8434 3590.76,-8475.08 3540.38,-10330.67 3576,-10371 3599.12,-10397.17 3634.55,-10407.06 3669.2,-10409.37"/>
<polygon fill="blue" stroke="blue" points="3669.27,-10412.88 3679.42,-10409.85 3669.6,-10405.89 3669.27,-10412.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.18,-8369.82C3413.52,-8366.31 3505.62,-8374.57 3556,-8434 3586.01,-8469.41 3557.15,-10062.58 3576,-10105 3608.73,-10178.65 3686.49,-10236.22 3734.84,-10266.48"/>
<polygon fill="blue" stroke="blue" points="3733.16,-10269.56 3743.51,-10271.81 3736.83,-10263.59 3733.16,-10269.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.23,-8369.78C3413.59,-8366.25 3505.71,-8374.49 3556,-8434 3595.57,-8480.83 3535.44,-10595.02 3576,-10641 3612.74,-10682.65 3680.66,-10683.07 3727.06,-10677.36"/>
<polygon fill="blue" stroke="blue" points="3727.77,-10680.79 3737.2,-10675.97 3726.82,-10673.86 3727.77,-10680.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node138"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="2161.5,-8399 2072.5,-8399 2072.5,-8363 2161.5,-8363 2161.5,-8399"/>
<text text-anchor="middle" x="2117" y="-8377.3" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge646" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2161.71,-8381C2251.69,-8381 2457.07,-8381 2551.65,-8381"/>
<polygon fill="blue" stroke="blue" points="2551.81,-8384.5 2561.81,-8381 2551.81,-8377.5 2551.81,-8384.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node139"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="2181.5,-8345 2052.5,-8345 2052.5,-8309 2181.5,-8309 2181.5,-8345"/>
<text text-anchor="middle" x="2117" y="-8323.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge801" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.64,-8334.12C2279.22,-8345.02 2463.72,-8365.65 2551.8,-8375.5"/>
<polygon fill="blue" stroke="blue" points="2551.47,-8378.98 2561.8,-8376.62 2552.25,-8372.03 2551.47,-8378.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge800" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.64,-8328.03C2318.84,-8330.5 2652.68,-8337.78 2932,-8354 3008.99,-8358.47 3096.06,-8365.83 3160.69,-8371.74"/>
<polygon fill="blue" stroke="blue" points="3160.59,-8375.24 3170.86,-8372.67 3161.23,-8368.27 3160.59,-8375.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().</title>
<g id="a_node140"><a xlink:title=" &#160;&#160;&#160;fn valid_distribution_list() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::DistributionListItem::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data(...">
<polygon fill="white" stroke="black" points="2683.5,-4261 2520.5,-4261 2520.5,-4225 2683.5,-4225 2683.5,-4261"/>
<text text-anchor="middle" x="2602" y="-4239.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2683.52,-4239.68C2815.89,-4234.21 3076.62,-4223.45 3195.42,-4218.54"/>
<polygon fill="blue" stroke="blue" points="3195.59,-4222.04 3205.43,-4218.13 3195.3,-4215.04 3195.59,-4222.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().</title>
<g id="a_node141"><a xlink:title=" &#160;&#160;&#160;fn destination_distribution_list( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier: fn(&amp;mut proto::DistributionListItem), &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut distribution_list = proto::DistributionListItem::tes...">
<polygon fill="white" stroke="black" points="2705.5,-4207 2498.5,-4207 2498.5,-4171 2705.5,-4171 2705.5,-4207"/>
<text text-anchor="middle" x="2602" y="-4185.3" font-family="Helvetica,sans-Serif" font-size="14.00">destination_distribution_list</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_distribution_list().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2705.55,-4193.23C2842.9,-4198.9 3082.34,-4208.79 3195.02,-4213.44"/>
<polygon fill="blue" stroke="blue" points="3195.06,-4216.95 3205.2,-4213.86 3195.35,-4209.95 3195.06,-4216.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().</title>
<g id="a_node142"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_self() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;recipient.try_into_with(&amp;TestContext::default()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Destination::...">
<polygon fill="white" stroke="black" points="2684.5,-4153 2519.5,-4153 2519.5,-4117 2684.5,-4117 2684.5,-4153"/>
<text text-anchor="middle" x="2602" y="-4131.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.65,-4139.82C2751.34,-4144.2 2847.97,-4151.59 2932,-4162 3024.14,-4173.42 3130.09,-4192.06 3195.3,-4204.18"/>
<polygon fill="blue" stroke="blue" points="3194.93,-4207.68 3205.41,-4206.07 3196.22,-4200.8 3194.93,-4207.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().</title>
<g id="a_node143"><a xlink:title=" &#160;&#160;&#160;fn requires_destination() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: None, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;r...">
<polygon fill="white" stroke="black" points="2680.5,-4099 2523.5,-4099 2523.5,-4063 2680.5,-4063 2680.5,-4099"/>
<text text-anchor="middle" x="2602" y="-4077.3" font-family="Helvetica,sans-Serif" font-size="14.00">requires_destination</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/requires_destination().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.51,-4082.15C2747.65,-4084.39 2847.07,-4090.66 2932,-4108 3030.63,-4128.13 3140.96,-4168.87 3204.37,-4194.16"/>
<polygon fill="blue" stroke="blue" points="3203.17,-4197.45 3213.75,-4197.93 3205.77,-4190.95 3203.17,-4197.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<g id="a_node149"><a xlink:title=" &#160;&#160;&#160;fn try_into_with(self, context: &amp;C) &#45;&gt; Result&lt;ContactData, Self::Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profileKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3829.5,-4315 3724.5,-4315 3724.5,-4279 3829.5,-4279 3829.5,-4315"/>
<text text-anchor="middle" x="3777" y="-4293.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_into_with</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3310.94,-4224.14C3406.97,-4239.18 3611.82,-4271.28 3714.56,-4287.37"/>
<polygon fill="blue" stroke="blue" points="3714.06,-4290.84 3724.48,-4288.93 3715.14,-4283.92 3714.06,-4290.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().</title>
<g id="a_node145"><a xlink:title=" &#160;&#160;&#160;fn destination_group(modifier: fn(&amp;mut proto::Group)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut group = proto::Group::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut group); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = prot...">
<polygon fill="white" stroke="black" points="2672.5,-4045 2531.5,-4045 2531.5,-4009 2672.5,-4009 2672.5,-4045"/>
<text text-anchor="middle" x="2602" y="-4023.3" font-family="Helvetica,sans-Serif" font-size="14.00">destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2672.7,-4025.14C2740.23,-4025.09 2844.92,-4029.7 2932,-4054 3044.05,-4085.27 3163.43,-4155.63 3221.35,-4192.48"/>
<polygon fill="blue" stroke="blue" points="3219.47,-4195.43 3229.77,-4197.88 3223.24,-4189.54 3219.47,-4195.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().</title>
<g id="a_node146"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_contact() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Contact::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}...">
<polygon fill="white" stroke="black" points="2697.5,-3991 2506.5,-3991 2506.5,-3955 2697.5,-3955 2697.5,-3991"/>
<text text-anchor="middle" x="2602" y="-3969.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2697.75,-3968.39C2764.92,-3968.07 2856.21,-3973.68 2932,-4000 3055.58,-4042.91 3177.63,-4143.97 3230.15,-4191.05"/>
<polygon fill="blue" stroke="blue" points="3227.92,-4193.75 3237.68,-4197.86 3232.61,-4188.56 3227.92,-4193.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().</title>
<g id="a_node147"><a xlink:title=" &#160;&#160;&#160;fn valid_destination_group() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipient = proto::Recipient { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination: Some(proto::Group::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;..proto::Recipient::test_data() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2692.5,-4369 2511.5,-4369 2511.5,-4333 2692.5,-4333 2692.5,-4369"/>
<text text-anchor="middle" x="2602" y="-4347.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_destination_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge521" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/valid_destination_group().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.83,-4349.4C2759.43,-4346.83 2852.12,-4340.3 2932,-4324 3030.63,-4303.87 3140.96,-4263.13 3204.37,-4237.84"/>
<polygon fill="blue" stroke="blue" points="3205.77,-4241.05 3213.75,-4234.07 3203.17,-4234.55 3205.77,-4241.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().</title>
<g id="a_node148"><a xlink:title=" &#160;&#160;&#160;fn destination_contact(modifier: fn(&amp;mut proto::Contact)) &#45;&gt; Result&lt;(), RecipientError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut contact = proto::Contact::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut contact); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let recipi...">
<polygon fill="white" stroke="black" points="2678,-4315 2526,-4315 2526,-4279 2678,-4279 2678,-4315"/>
<text text-anchor="middle" x="2602" y="-4293.3" font-family="Helvetica,sans-Serif" font-size="14.00">destination_contact</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with(). -->
<g id="edge816" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/test/destination_contact().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Recipient`][`TryIntoWith&lt;Destination&lt;R&gt;, C&gt;`]try_into_with().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.32,-4292.6C2745.12,-4288.27 2845.27,-4280.75 2932,-4270 3024.14,-4258.58 3130.09,-4239.94 3195.3,-4227.82"/>
<polygon fill="blue" stroke="blue" points="3196.22,-4231.2 3205.41,-4225.93 3194.93,-4224.32 3196.22,-4231.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge864" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/recipient/impl#[`proto::Contact`][`TryIntoWith&lt;ContactData, C&gt;`]try_into_with().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3829.86,-4309.13C3877.38,-4323.24 3945.16,-4351.62 3978,-4404 4007.12,-4450.45 3960.74,-4856.78 3998,-4897 4047.08,-4949.98 4140.52,-4941.9 4191.91,-4932.37"/>
<polygon fill="blue" stroke="blue" points="4192.77,-4935.77 4201.9,-4930.4 4191.41,-4928.9 4192.77,-4935.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().</title>
<g id="a_node150"><a xlink:title=" &#160;&#160;&#160;fn can_serialize() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = Backup { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;meta: BackupMeta { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;version: 1, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_time: Timestamp::test_value(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;purpose: crate::...">
<polygon fill="white" stroke="black" points="1371,-4987 1266,-4987 1266,-4951 1371,-4951 1371,-4987"/>
<text text-anchor="middle" x="1318.5" y="-4965.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_serialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/can_serialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/account_data/test/impl#[`AccountData&lt;Store&gt;`]from_proto_test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1371.09,-4976.11C1494.82,-4989.92 1809.41,-5005.23 1962,-4831 2024.74,-4759.36 1969.52,-4494.87 1998,-4404 2068.75,-4178.28 2059.16,-4061.3 2264,-3943 2295.08,-3925.05 3530.08,-3918.18 3556,-3943 3593.03,-3978.46 3541.71,-4365.88 3576,-4404 3603.06,-4434.07 3646.27,-4443.15 3685.62,-4444.05"/>
<polygon fill="blue" stroke="blue" points="3685.78,-4447.55 3695.8,-4444.1 3685.81,-4440.55 3685.78,-4447.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().</title>
<g id="a_node151"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chats_and_recipient_ids() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base = vec![crate::proto::backup::Frame { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item: Some(proto::AccountData::test_data().into()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: Default::d...">
<polygon fill="white" stroke="black" points="1440.5,-4933 1196.5,-4933 1196.5,-4897 1440.5,-4897 1440.5,-4933"/>
<text text-anchor="middle" x="1318.5" y="-4911.3" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chats_and_recipient_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<g id="a_node152"><a xlink:title=" &#160;&#160;&#160;fn backup_from_frames( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;frames: impl IntoIterator&lt;Item = proto::Frame&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; crate::CompletedBackup&lt;Store&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut reader = crate::backup::PartialBackup::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prot...">
<polygon fill="white" stroke="black" points="1678,-4879 1517,-4879 1517,-4843 1678,-4843 1678,-4879"/>
<text text-anchor="middle" x="1597.5" y="-4857.3" font-family="Helvetica,sans-Serif" font-size="14.00">backup_from_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chats_and_recipient_ids().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1412.12,-4896.94C1442.64,-4890.99 1476.52,-4884.39 1506.82,-4878.48"/>
<polygon fill="blue" stroke="blue" points="1507.8,-4881.86 1516.94,-4876.51 1506.46,-4874.99 1507.8,-4881.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge719" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1678.16,-4848.69C1687.22,-4844.37 1695.51,-4838.62 1702,-4831 1787.87,-4730.05 1649.96,-4634.05 1738,-4535 1752.15,-4519.08 1773.97,-4511.76 1794.53,-4508.64"/>
<polygon fill="blue" stroke="blue" points="1794.99,-4512.11 1804.49,-4507.42 1794.14,-4505.16 1794.99,-4512.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().</title>
<g id="a_node153"><a xlink:title=" &#160;&#160;&#160;fn shuffled_chat_item_frames_not_equal() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let first_contact = make_contact(&#39; first&#39; , 1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let second_contact = make_contact(&#39; second&#39; , 2); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let constant_frames = vec![ &#160;&#160;...">
<polygon fill="white" stroke="black" points="1457,-4879 1180,-4879 1180,-4843 1457,-4843 1457,-4879"/>
<text text-anchor="middle" x="1318.5" y="-4857.3" font-family="Helvetica,sans-Serif" font-size="14.00">shuffled_chat_item_frames_not_equal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames(). -->
<g id="edge795" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/shuffled_chat_item_frames_not_equal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/serialize/test/backup_from_frames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1457.19,-4861C1474.01,-4861 1490.84,-4861 1506.7,-4861"/>
<polygon fill="blue" stroke="blue" points="1506.97,-4864.5 1516.97,-4861 1506.97,-4857.5 1506.97,-4864.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().</title>
<g id="a_node154"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;futures::executor::block_on(async_main()) }">
<polygon fill="white" stroke="black" points="1345.5,-4369 1291.5,-4369 1291.5,-4333 1345.5,-4333 1345.5,-4369"/>
<text text-anchor="middle" x="1318.5" y="-4347.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1345.77,-4359.79C1411.48,-4381.64 1588.41,-4439.62 1738,-4481 1756.31,-4486.06 1776.45,-4491.12 1794.49,-4495.46"/>
<polygon fill="blue" stroke="blue" points="1793.74,-4498.88 1804.28,-4497.79 1795.36,-4492.07 1793.74,-4498.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1345.64,-4346.49C1373.52,-4341.41 1418.83,-4332.35 1457,-4321 1486.53,-4312.22 1518.72,-4300.17 1544.73,-4289.77"/>
<polygon fill="blue" stroke="blue" points="1546.05,-4293.01 1554.02,-4286.02 1543.43,-4286.52 1546.05,-4293.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().</title>
<g id="a_node155"><a xlink:title="async fn read_all_frames&lt;M: backup::method::Method + backup::ReferencedTypes&gt;( &#160;&#160;&#160;&#160;purpose: Purpose, &#160;&#160;&#160;&#160;mut reader: VarintDelimitedReader&lt;impl AsyncRead + Unpin + VerifyHmac&gt;, &#160;&#160;&#160;&#160;mut visitor: impl F...">
<polygon fill="white" stroke="black" points="1381,-4286 1256,-4286 1256,-4250 1381,-4250 1381,-4286"/>
<text text-anchor="middle" x="1318.5" y="-4264.3" font-family="Helvetica,sans-Serif" font-size="14.00">read_all_frames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 read_all_frames().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1381.32,-4268C1416.89,-4268 1462.32,-4268 1502.26,-4268"/>
<polygon fill="blue" stroke="blue" points="1502.28,-4271.5 1512.28,-4268 1502.28,-4264.5 1502.28,-4271.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 impl#[`backup::PartialBackup&lt;M&gt;`]parse_and_add_frame().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/impl#[`PartialBackup&lt;M&gt;`]add_frame().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1617,-4286.33C1639.45,-4309.36 1677.35,-4350.87 1702,-4392 1723.94,-4428.6 1705.71,-4453.11 1738,-4481 1753.53,-4494.41 1774.64,-4501.4 1794.28,-4504.95"/>
<polygon fill="blue" stroke="blue" points="1793.96,-4508.45 1804.38,-4506.52 1795.03,-4501.53 1793.96,-4508.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node157"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="3289,-8262 3227,-8262 3227,-8226 3289,-8226 3289,-8262"/>
<text text-anchor="middle" x="3258" y="-8240.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.37,-8238.45C3350.83,-8229.19 3489.7,-8218.62 3556,-8297 3592.24,-8339.84 3538.86,-10274.93 3576,-10317 3589.39,-10332.17 3606.92,-10341.87 3626.03,-10347.79"/>
<polygon fill="blue" stroke="blue" points="3625.27,-10351.21 3635.84,-10350.48 3627.12,-10344.46 3625.27,-10351.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.38,-8238.45C3350.84,-8229.18 3489.73,-8218.59 3556,-8297 3595.13,-8343.29 3535.9,-10433.55 3576,-10479 3600.52,-10506.8 3638.94,-10516.23 3675.57,-10517.73"/>
<polygon fill="blue" stroke="blue" points="3675.77,-10521.24 3685.85,-10517.95 3675.92,-10514.24 3675.77,-10521.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.37,-8238.45C3350.83,-8229.19 3489.71,-8218.61 3556,-8297 3593.2,-8340.99 3537.88,-10327.8 3576,-10371 3599.11,-10397.18 3634.53,-10407.07 3669.19,-10409.38"/>
<polygon fill="blue" stroke="blue" points="3669.26,-10412.89 3679.41,-10409.85 3669.59,-10405.9 3669.26,-10412.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.36,-8238.46C3350.81,-8229.21 3489.66,-8218.66 3556,-8297 3588.46,-8335.33 3555.63,-10059.09 3576,-10105 3608.69,-10178.67 3686.47,-10236.23 3734.83,-10266.49"/>
<polygon fill="blue" stroke="blue" points="3733.15,-10269.56 3743.5,-10271.82 3736.82,-10263.6 3733.15,-10269.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3289.38,-8238.44C3350.85,-8229.17 3489.76,-8218.57 3556,-8297 3598.02,-8346.74 3532.94,-10592.16 3576,-10641 3612.73,-10682.66 3680.65,-10683.08 3727.06,-10677.36"/>
<polygon fill="blue" stroke="blue" points="3727.76,-10680.8 3737.19,-10675.97 3726.81,-10673.86 3727.76,-10680.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node158"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="2148,-8262 2086,-8262 2086,-8226 2148,-8226 2148,-8262"/>
<text text-anchor="middle" x="2117" y="-8240.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node159"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="2633,-8262 2571,-8262 2571,-8226 2633,-8226 2633,-8262"/>
<text text-anchor="middle" x="2602" y="-8240.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge717" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2148.21,-8244C2231.82,-8244 2466.28,-8244 2560.78,-8244"/>
<polygon fill="blue" stroke="blue" points="2560.8,-8247.5 2570.8,-8244 2560.8,-8240.5 2560.8,-8247.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge818" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2633.23,-8244C2739.43,-8244 3095.5,-8244 3216.42,-8244"/>
<polygon fill="blue" stroke="blue" points="3216.71,-8247.5 3226.71,-8244 3216.71,-8240.5 3216.71,-8247.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node160"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-8042 3231,-8042 3231,-8006 3285,-8006 3285,-8042"/>
<text text-anchor="middle" x="3258" y="-8020.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge667" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3266.06,-8005.9C3304.71,-7905.75 3491.35,-7408.5 3556,-6983 3584.22,-6797.3 3537.2,-6321.78 3576,-6138 3672.5,-5681 3857.73,-5618.33 3978,-5167 3986.94,-5133.44 3976.52,-5039.29 3998,-5012 4045.62,-4951.5 4140.07,-4932.57 4191.89,-4926.66"/>
<polygon fill="blue" stroke="blue" points="4192.38,-4930.13 4201.96,-4925.62 4191.65,-4923.17 4192.38,-4930.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge668" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.27,-8019.08C3344.44,-8009.7 3488.25,-7996.76 3556,-8077 3600.01,-8129.13 3530.89,-10481.82 3576,-10533 3588.92,-10547.66 3605.71,-10557.22 3624.06,-10563.19"/>
<polygon fill="blue" stroke="blue" points="3623.21,-10566.59 3633.79,-10566 3625.15,-10559.86 3623.21,-10566.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge669" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.27,-8019.08C3344.45,-8009.69 3488.26,-7996.75 3556,-8077 3600.98,-8130.28 3529.9,-10534.69 3576,-10587 3583.28,-10595.27 3591.8,-10601.91 3601.13,-10607.21"/>
<polygon fill="blue" stroke="blue" points="3599.81,-10610.46 3610.31,-10611.88 3602.98,-10604.22 3599.81,-10610.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<g id="a_node161"><a xlink:title="fn verify_chat_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&gt;, &#160;&#160;&#160;&#160;stored_account_data: Option&lt;AccountData&gt;, &#160;&#160;&#160;&#160;chat_search_...">
<polygon fill="white" stroke="black" points="882,-12266 667,-12266 667,-12230 882,-12230 882,-12266"/>
<text text-anchor="middle" x="774.5" y="-12244.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_chat_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<g id="a_node167"><a xlink:title="fn verify_single_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;search_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;response: CondensedTreeSearchResponse, &#160;&#160;&#160;&#160;monitoring_data: Option&lt;MonitoringData&gt;, &#160;&#160;&#160;&#160;full_tree_head: &amp;FullTr...">
<polygon fill="white" stroke="black" points="1144,-12251 918,-12251 918,-12215 1144,-12215 1144,-12251"/>
<text text-anchor="middle" x="1031" y="-12229.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_single_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M882.32,-12241.7C890.64,-12241.21 899.08,-12240.72 907.49,-12240.22"/>
<polygon fill="blue" stroke="blue" points="907.94,-12243.7 917.72,-12239.62 907.53,-12236.71 907.94,-12243.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge488" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M515.07,-12309.2C544.7,-12304.29 591.17,-12296.12 631,-12287 654.3,-12281.67 679.53,-12275.05 702.19,-12268.78"/>
<polygon fill="blue" stroke="blue" points="703.37,-12272.09 712.06,-12266.03 701.49,-12265.35 703.37,-12272.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<g id="a_node163"><a xlink:title=" &#160;&#160;&#160;async fn monitor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;account_data: AccountData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished_tree_...">
<polygon fill="white" stroke="black" points="519.5,-12116 448.5,-12116 448.5,-12080 519.5,-12080 519.5,-12116"/>
<text text-anchor="middle" x="484" y="-12094.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="edge625" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.71,-12099.79C645.85,-12106.31 1081.39,-12128.8 1250.05,-12137.52"/>
<polygon fill="blue" stroke="blue" points="1250.12,-12141.02 1260.29,-12138.04 1250.48,-12134.03 1250.12,-12141.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().</title>
<g id="a_node164"><a xlink:title=" &#160;&#160;&#160;fn search_does_not_return_requested_data(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="631,-12224 337,-12224 337,-12188 631,-12188 631,-12224"/>
<text text-anchor="middle" x="484" y="-12202.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_does_not_return_requested_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge634" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M609.02,-12224.06C624.81,-12226.35 640.92,-12228.7 656.59,-12230.98"/>
<polygon fill="blue" stroke="blue" points="656.42,-12234.49 666.82,-12232.47 657.42,-12227.56 656.42,-12234.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge756" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M539.3,-12154.8C687.14,-12162.44 1096.32,-12183.58 1254.21,-12191.73"/>
<polygon fill="blue" stroke="blue" points="1254.07,-12195.23 1264.24,-12192.25 1254.43,-12188.24 1254.07,-12195.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().</title>
<g id="a_node166"><a xlink:title=" &#160;&#160;&#160;fn search_returns_data_not_requested(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="615,-12278 353,-12278 353,-12242 615,-12242 615,-12278"/>
<text text-anchor="middle" x="484" y="-12256.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_returns_data_not_requested</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge773" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M615.32,-12254.58C629.01,-12254.01 642.86,-12253.43 656.38,-12252.87"/>
<polygon fill="blue" stroke="blue" points="656.81,-12256.36 666.65,-12252.44 656.52,-12249.36 656.81,-12256.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge778" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1144.02,-12218.09C1181.37,-12213.12 1221.68,-12207.75 1254.03,-12203.45"/>
<polygon fill="blue" stroke="blue" points="1254.78,-12206.88 1264.24,-12202.09 1253.86,-12199.94 1254.78,-12206.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().</title>
<g id="a_node168"><a xlink:title=" &#160;&#160;&#160;async fn search_for_account_that_isnt() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39;...">
<polygon fill="white" stroke="black" points="267,-12278 50,-12278 50,-12242 267,-12242 267,-12278"/>
<text text-anchor="middle" x="158.5" y="-12256.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_account_that_isnt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.22,-12277.98C327.63,-12288.06 399.39,-12300.04 443.04,-12307.33"/>
<polygon fill="blue" stroke="blue" points="442.54,-12310.79 452.98,-12308.99 443.69,-12303.89 442.54,-12310.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().</title>
<g id="a_node169"><a xlink:title=" &#160;&#160;&#160;async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKI...">
<polygon fill="white" stroke="black" points="297,-12386 20,-12386 20,-12350 297,-12350 297,-12386"/>
<text text-anchor="middle" x="158.5" y="-12364.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-12349.94C327.87,-12339.9 399.23,-12327.98 442.79,-12320.71"/>
<polygon fill="blue" stroke="blue" points="443.43,-12324.15 452.71,-12319.06 442.27,-12317.25 443.43,-12324.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().</title>
<g id="a_node170"><a xlink:title=" &#160;&#160;&#160;async fn search_for_deleted_account() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39; )...">
<polygon fill="white" stroke="black" points="263,-12332 54,-12332 54,-12296 263,-12296 263,-12332"/>
<text text-anchor="middle" x="158.5" y="-12310.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_deleted_account</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M263.19,-12314C324.27,-12314 398.09,-12314 442.75,-12314"/>
<polygon fill="blue" stroke="blue" points="442.9,-12317.5 452.9,-12314 442.9,-12310.5 442.9,-12317.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().</title>
<g id="a_node171"><a xlink:title=" &#160;&#160;&#160;async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SK...">
<polygon fill="white" stroke="black" points="301,-12116 16,-12116 16,-12080 301,-12080 301,-12116"/>
<text text-anchor="middle" x="158.5" y="-12094.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="edge537" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M301.39,-12098C350.84,-12098 402.79,-12098 438.41,-12098"/>
<polygon fill="blue" stroke="blue" points="438.46,-12101.5 448.46,-12098 438.46,-12094.5 438.46,-12101.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().</title>
<g id="a_node172"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn prompt(text: &amp;str) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; {} &gt;&#39; , text); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_line(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="192,-12224 125,-12224 125,-12188 192,-12188 192,-12224"/>
<text text-anchor="middle" x="158.5" y="-12202.3" font-family="Helvetica,sans-Serif" font-size="14.00">prompt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge780" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.23,-12203.14C225.4,-12202.06 276.35,-12205.64 309,-12233 328.62,-12249.44 309.34,-12270.61 329,-12287 360.56,-12313.3 408.62,-12317.94 442.65,-12317.34"/>
<polygon fill="blue" stroke="blue" points="442.85,-12320.83 452.73,-12317 442.62,-12313.84 442.85,-12320.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge779" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-12200.53C245.24,-12191.69 350.48,-12174.12 418.75,-12162.72"/>
<polygon fill="blue" stroke="blue" points="419.67,-12166.12 428.96,-12161.02 418.52,-12159.21 419.67,-12166.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().</title>
<g id="a_node173"><a xlink:title=" &#160;&#160;&#160;async fn distinguished_integration_test(have_last_distinguished: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running in...">
<polygon fill="white" stroke="black" points="271.5,-12170 45.5,-12170 45.5,-12134 271.5,-12134 271.5,-12170"/>
<text text-anchor="middle" x="158.5" y="-12148.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge873" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M271.74,-12152C320.8,-12152 376.58,-12152 418.5,-12152"/>
<polygon fill="blue" stroke="blue" points="418.58,-12155.5 428.58,-12152 418.58,-12148.5 418.58,-12155.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node174"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="3361.5,-8179 3154.5,-8179 3154.5,-8143 3361.5,-8143 3361.5,-8179"/>
<text text-anchor="middle" x="3258" y="-8157.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3361.85,-8149.17C3427.9,-8147.85 3509.7,-8159.18 3556,-8214 3598.53,-8264.36 3532.41,-10537.55 3576,-10587 3583.29,-10595.27 3591.8,-10601.91 3601.13,-10607.2"/>
<polygon fill="blue" stroke="blue" points="3599.81,-10610.46 3610.32,-10611.87 3602.99,-10604.22 3599.81,-10610.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3361.85,-8149.17C3427.9,-8147.85 3509.71,-8159.17 3556,-8214 3599.5,-8265.51 3531.42,-10590.42 3576,-10641 3612.72,-10682.66 3680.65,-10683.08 3727.05,-10677.36"/>
<polygon fill="blue" stroke="blue" points="3727.76,-10680.8 3737.19,-10675.97 3726.81,-10673.86 3727.76,-10680.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node175"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="3349,-8125 3167,-8125 3167,-8089 3349,-8089 3349,-8125"/>
<text text-anchor="middle" x="3258" y="-8103.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.12,-8101.19C3408.23,-8096.58 3487.05,-8088.88 3556,-8077 3605.44,-8068.48 3660.23,-8055.04 3702.77,-8043.7"/>
<polygon fill="blue" stroke="blue" points="3703.73,-8047.07 3712.48,-8041.1 3701.91,-8040.31 3703.73,-8047.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-8088.99C3402.66,-8077.55 3501.21,-8074.48 3556,-8134 3604.18,-8186.34 3528.97,-10641.62 3576,-10695 3590.56,-10711.53 3610.03,-10721.57 3631.13,-10727.31"/>
<polygon fill="blue" stroke="blue" points="3630.38,-10730.73 3640.92,-10729.65 3632.01,-10723.92 3630.38,-10730.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-8089C3402.65,-8077.57 3501.2,-8074.49 3556,-8134 3601.14,-8183.02 3531.93,-10483.01 3576,-10533 3588.92,-10547.66 3605.71,-10557.21 3624.06,-10563.19"/>
<polygon fill="blue" stroke="blue" points="3623.21,-10566.59 3633.79,-10566 3625.15,-10559.86 3623.21,-10566.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-8089C3402.66,-8077.56 3501.2,-8074.49 3556,-8134 3602.15,-8184.13 3530.95,-10535.88 3576,-10587 3583.29,-10595.27 3591.8,-10601.91 3601.13,-10607.2"/>
<polygon fill="blue" stroke="blue" points="3599.81,-10610.46 3610.31,-10611.87 3602.99,-10604.22 3599.81,-10610.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-8088.99C3402.66,-8077.56 3501.21,-8074.48 3556,-8134 3603.17,-8185.24 3529.96,-10588.75 3576,-10641 3612.72,-10682.67 3680.64,-10683.09 3727.05,-10677.36"/>
<polygon fill="blue" stroke="blue" points="3727.76,-10680.8 3737.19,-10675.98 3726.81,-10673.87 3727.76,-10680.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node176"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="3821.5,-3242 3732.5,-3242 3732.5,-3206 3821.5,-3206 3821.5,-3242"/>
<text text-anchor="middle" x="3777" y="-3220.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node273"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="4266,-3433 4192,-3433 4192,-3397 4266,-3397 4266,-3433"/>
<text text-anchor="middle" x="4229" y="-3411.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.51,-3216.25C3866.99,-3210.87 3937.28,-3210.71 3978,-3251 4021.75,-3294.28 3953.88,-3345.1 3998,-3388 4046.24,-3434.9 4129.69,-3432.02 4181.71,-3424.4"/>
<polygon fill="blue" stroke="blue" points="4182.34,-3427.85 4191.67,-3422.83 4181.25,-3420.93 4182.34,-3427.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<g id="a_node278"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;(server_ids: &amp;&#39;a [u64], password: &amp;[u8], rng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind = random_scalar(rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let input = password_to_uniform_input(password); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4684,-3379 4630,-3379 4630,-3343 4684,-3343 4684,-3379"/>
<text text-anchor="middle" x="4657" y="-3357.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3821.74,-3229.56C3862.29,-3234.8 3924.28,-3243.02 3978,-3251 4223.78,-3287.52 4518.65,-3337.47 4619.86,-3354.79"/>
<polygon fill="blue" stroke="blue" points="4619.41,-3358.26 4629.86,-3356.5 4620.6,-3351.36 4619.41,-3358.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node177"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="3389.5,-3242 3126.5,-3242 3126.5,-3206 3389.5,-3206 3389.5,-3242"/>
<text text-anchor="middle" x="3258" y="-3220.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3389.79,-3224C3497.3,-3224 3644.15,-3224 3722.16,-3224"/>
<polygon fill="blue" stroke="blue" points="3722.24,-3227.5 3732.24,-3224 3722.24,-3220.5 3722.24,-3227.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<g id="a_node178"><a xlink:title="pub fn do_prepare&lt;Env: PpssSetup&gt;(password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;let server_ids = Env::server_ids(); &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Backup4::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids.as_ref(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pas...">
<polygon fill="white" stroke="black" points="3824,-3296 3730,-3296 3730,-3260 3824,-3260 3824,-3296"/>
<text text-anchor="middle" x="3777" y="-3274.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<g id="a_node276"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;password: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;max_tries: NonZeroU32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(!server_ids.is_empty()); &#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-3507 4202,-3507 4202,-3471 4256,-3471 4256,-3507"/>
<text text-anchor="middle" x="4229" y="-3485.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge522" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3824.41,-3276.93C3870.22,-3278.55 3938.91,-3288.62 3978,-3331 4011.99,-3367.85 3962.97,-3406.14 3998,-3442 4048.92,-3494.12 4140.89,-3496.36 4191.75,-3492.98"/>
<polygon fill="blue" stroke="blue" points="4192.24,-3496.45 4201.94,-3492.18 4191.7,-3489.47 4192.24,-3496.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().</title>
<g id="a_node179"><a xlink:title=" &#160;&#160;&#160;async fn do_backup_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let backup = do_prepare::&lt;TestEnv&gt;(b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_backup::&lt;TestEnv&gt;(NotConnectedResults, &amp;backup).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_m...">
<polygon fill="white" stroke="black" points="3391,-3296 3125,-3296 3125,-3260 3391,-3260 3391,-3296"/>
<text text-anchor="middle" x="3258" y="-3274.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_backup_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge609" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_backup_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.13,-3278C3497.36,-3278 3641.34,-3278 3719.63,-3278"/>
<polygon fill="blue" stroke="blue" points="3719.76,-3281.5 3729.76,-3278 3719.76,-3274.5 3719.76,-3281.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;fn prepare(&amp;self, password: &amp;[u8]) &#45;&gt; Backup4 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_prepare::&lt;T::Env&gt;(password) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3293,-3159 3223,-3159 3223,-3123 3293,-3123 3293,-3159"/>
<text text-anchor="middle" x="3258" y="-3137.3" font-family="Helvetica,sans-Serif" font-size="14.00">prepare</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare(). -->
<g id="edge520" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Backup]prepare().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_prepare().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3293.41,-3136.85C3353.99,-3131.54 3480.4,-3129.68 3556,-3194 3576.45,-3211.4 3555.19,-3234.04 3576,-3251 3615.85,-3283.48 3675.73,-3287.59 3719.58,-3285.19"/>
<polygon fill="blue" stroke="blue" points="3720.06,-3288.67 3729.8,-3284.5 3719.59,-3281.68 3720.06,-3288.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node181"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3290.5,-3105 3225.5,-3105 3225.5,-3069 3290.5,-3069 3290.5,-3105"/>
<text text-anchor="middle" x="3258" y="-3083.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge819" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3290.92,-3086.07C3346.09,-3085.29 3462.38,-3087.37 3556,-3114 3624.64,-3133.53 3697.41,-3174.43 3739.67,-3200.49"/>
<polygon fill="blue" stroke="blue" points="3737.88,-3203.49 3748.22,-3205.81 3741.58,-3197.55 3737.88,-3203.49"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<g id="a_node182"><a xlink:title=" &#160;&#160;&#160;pub fn from_slice(bytes: &amp;[u8]) &#45;&gt; Option&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO use Iterator::array_chunks once that&#39;s stabilized. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// See https://github.com/rust&#45;lang/rust/issues/100450. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chu...">
<polygon fill="white" stroke="black" points="5063,-11828 4977,-11828 4977,-11792 5063,-11792 5063,-11828"/>
<text text-anchor="middle" x="5020" y="-11806.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_slice</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge647" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5063.07,-11818.26C5100.36,-11825.58 5156.14,-11836.54 5203.76,-11845.89"/>
<polygon fill="blue" stroke="blue" points="5203.3,-11849.36 5213.79,-11847.86 5204.65,-11842.5 5203.3,-11849.36"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().</title>
<g id="a_node183"><a xlink:title="pub fn scalar_from_slice_wide(bytes: &amp;[u8]) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="5106.5,-4631 4933.5,-4631 4933.5,-4595 5106.5,-4595 5106.5,-4631"/>
<text text-anchor="middle" x="5020" y="-4609.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_wide</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge539" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_wide().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5106.61,-4619.34C5132.8,-4623.29 5161.21,-4629.68 5186,-4640 5288.09,-4682.52 5332.18,-4690.24 5387.5,-4786 5823.4,-5540.51 5533.42,-5866.53 5591,-6736 5729.8,-8831.78 5733.12,-11428.55 5733.02,-11727.55"/>
<polygon fill="blue" stroke="blue" points="5729.52,-11727.93 5733.02,-11737.94 5736.52,-11727.94 5729.52,-11727.93"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().</title>
<g id="a_node184"><a xlink:title="pub fn scalar_from_slice_canonical(bytes: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 32]; &#160;&#160;&#160;&#160;scalar_bytes.copy_from_slice(bytes); &#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(scalar_bytes).into(...">
<polygon fill="white" stroke="black" points="5123,-4685 4917,-4685 4917,-4649 5123,-4649 5123,-4685"/>
<text text-anchor="middle" x="5020" y="-4663.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalar_from_slice_canonical</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge711" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 scalar/scalar_from_slice_canonical().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5065.72,-4685.03C5105.42,-4703.73 5160.91,-4737.14 5186,-4786 5208.37,-4829.56 5176.72,-11797.76 5206,-11837 5206.38,-11837.51 5206.77,-11838.01 5207.17,-11838.5"/>
<polygon fill="blue" stroke="blue" points="5204.82,-11841.1 5214.37,-11845.71 5209.77,-11836.16 5204.82,-11841.1"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node185"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="4721,-11534 4593,-11534 4593,-11498 4721,-11498 4721,-11534"/>
<text text-anchor="middle" x="4657" y="-11512.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="5346,-11671 5248,-11671 5248,-11635 5346,-11635 5346,-11671"/>
<text text-anchor="middle" x="5297" y="-11649.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4721.2,-11525.13C4752.77,-11529.95 4791.5,-11536.26 4826,-11543 4987.15,-11574.49 5026.26,-11587.98 5186,-11626 5202.79,-11630 5221,-11634.43 5237.68,-11638.52"/>
<polygon fill="blue" stroke="blue" points="5237.3,-11642.03 5247.85,-11641.02 5238.97,-11635.24 5237.3,-11642.03"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="4286.5,-11534 4171.5,-11534 4171.5,-11498 4286.5,-11498 4286.5,-11534"/>
<text text-anchor="middle" x="4229" y="-11512.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge553" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4286.52,-11508.96C4338.73,-11502.72 4418.48,-11493.88 4488,-11489 4723.57,-11472.48 4782.85,-11470 5019,-11470 5019,-11470 5019,-11470 5298,-11470 5440.11,-11470 5475.78,-11514.82 5591,-11598 5643.02,-11635.55 5689.91,-11695.02 5714.62,-11729.29"/>
<polygon fill="blue" stroke="blue" points="5712.05,-11731.72 5720.7,-11737.84 5717.76,-11727.66 5712.05,-11731.72"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge552" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4286.57,-11516C4362.83,-11516 4498.71,-11516 4582.72,-11516"/>
<polygon fill="blue" stroke="blue" points="4582.95,-11519.5 4592.95,-11516 4582.95,-11512.5 4582.95,-11519.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node187"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="4684,-11588 4630,-11588 4630,-11552 4684,-11552 4684,-11588"/>
<text text-anchor="middle" x="4657" y="-11566.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge551" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4286.57,-11523.17C4375.45,-11534.44 4545.31,-11555.97 4619.64,-11565.39"/>
<polygon fill="blue" stroke="blue" points="4619.54,-11568.91 4629.9,-11566.69 4620.42,-11561.96 4619.54,-11568.91"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node190"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="5048,-11671 4992,-11671 4992,-11635 5048,-11635 5048,-11671"/>
<text text-anchor="middle" x="5020" y="-11649.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge714" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.32,-11576.97C4723.1,-11587.16 4797.92,-11606.47 4862,-11621 4902.83,-11630.26 4949.91,-11639.69 4981.78,-11645.89"/>
<polygon fill="blue" stroke="blue" points="4981.49,-11649.4 4991.98,-11647.87 4982.82,-11642.53 4981.49,-11649.4"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5346.11,-11654.53C5404.92,-11657.43 5506.99,-11665.81 5591,-11690 5626.79,-11700.31 5664.95,-11718.49 5692.68,-11733.16"/>
<polygon fill="blue" stroke="blue" points="5691.21,-11736.34 5701.67,-11737.98 5694.52,-11730.17 5691.21,-11736.34"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 proof/impl#[Proof]from_slice().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5270.31,-11671.27C5248.35,-11686.58 5215.69,-11708.67 5186,-11726 5147.43,-11748.52 5102.13,-11771.33 5068.76,-11787.49"/>
<polygon fill="blue" stroke="blue" points="5067.17,-11784.38 5059.68,-11791.87 5070.2,-11790.68 5067.17,-11784.38"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="4749.5,-11671 4564.5,-11671 4564.5,-11635 4749.5,-11635 4749.5,-11671"/>
<text text-anchor="middle" x="4657" y="-11649.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4749.65,-11638.26C4784.7,-11633.31 4825.1,-11628.43 4862,-11626 5185.55,-11604.68 5289.86,-11534.76 5591,-11655 5635.56,-11672.79 5679.41,-11707.3 5706.32,-11730.99"/>
<polygon fill="blue" stroke="blue" points="5704.33,-11733.9 5714.11,-11737.96 5709,-11728.68 5704.33,-11733.9"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4749.65,-11667.74C4784.7,-11672.69 4825.1,-11677.57 4862,-11680 5005.69,-11689.47 5043.04,-11697.29 5186,-11680 5202.97,-11677.95 5221.11,-11674.17 5237.66,-11670.09"/>
<polygon fill="blue" stroke="blue" points="5238.91,-11673.38 5247.73,-11667.51 5237.17,-11666.6 5238.91,-11673.38"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4749.56,-11653C4824.76,-11653 4927.42,-11653 4981.74,-11653"/>
<polygon fill="blue" stroke="blue" points="4981.94,-11656.5 4991.94,-11653 4981.94,-11649.5 4981.94,-11656.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge807" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5048.25,-11657.14C5084.31,-11662.57 5149.88,-11672.33 5206,-11680 5376.9,-11703.35 5420.64,-11701.99 5591,-11729 5604.46,-11731.13 5618.6,-11733.58 5632.53,-11736.11"/>
<polygon fill="blue" stroke="blue" points="5632.15,-11739.59 5642.62,-11737.96 5633.42,-11732.71 5632.15,-11739.59"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge806" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5048.12,-11653C5091.97,-11653 5179.39,-11653 5237.81,-11653"/>
<polygon fill="blue" stroke="blue" points="5238,-11656.5 5248,-11653 5238,-11649.5 5238,-11656.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node191"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1887.5,-106 1812.5,-106 1812.5,-70 1887.5,-70 1887.5,-106"/>
<text text-anchor="middle" x="1850" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node195"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2629,-106 2575,-106 2575,-70 2629,-70 2629,-106"/>
<text text-anchor="middle" x="2602" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1887.68,-88C2014.99,-88 2436.93,-88 2564.29,-88"/>
<polygon fill="blue" stroke="blue" points="2564.66,-91.5 2574.66,-88 2564.66,-84.5 2564.66,-91.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node196"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2629,-52 2575,-52 2575,-16 2629,-16 2629,-52"/>
<text text-anchor="middle" x="2602" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1887.68,-85.36C2015.12,-76.18 2437.78,-45.75 2564.67,-36.62"/>
<polygon fill="blue" stroke="blue" points="2564.93,-40.11 2574.66,-35.9 2564.43,-33.12 2564.93,-40.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node198"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="2181,-189 2053,-189 2053,-153 2181,-153 2181,-189"/>
<text text-anchor="middle" x="2117" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1887.57,-99.45C1929.05,-112.45 1997.58,-133.91 2048.77,-149.94"/>
<polygon fill="blue" stroke="blue" points="2047.85,-153.32 2058.44,-152.97 2049.95,-146.64 2047.85,-153.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node192"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="1883,-1597 1817,-1597 1817,-1561 1883,-1561 1883,-1597"/>
<text text-anchor="middle" x="1850" y="-1575.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node193"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="2180,-1597 2054,-1597 2054,-1561 2180,-1561 2180,-1597"/>
<text text-anchor="middle" x="2117" y="-1575.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1883.23,-1579C1922.8,-1579 1991.1,-1579 2043.52,-1579"/>
<polygon fill="blue" stroke="blue" points="2043.78,-1582.5 2053.78,-1579 2043.78,-1575.5 2043.78,-1582.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node194"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="2688,-1597 2516,-1597 2516,-1561 2688,-1561 2688,-1597"/>
<text text-anchor="middle" x="2602" y="-1575.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge492" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.16,-1579C2262.71,-1579 2409.34,-1579 2505.87,-1579"/>
<polygon fill="blue" stroke="blue" points="2505.92,-1582.5 2515.92,-1579 2505.92,-1575.5 2505.92,-1582.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge681" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.21,-1567.06C2763.25,-1561.76 2869.97,-1567.84 2932,-1632 3000.82,-1703.18 2901.04,-1773.46 2960,-1853 3014.75,-1926.86 3119.92,-1960.57 3189.28,-1975.32"/>
<polygon fill="blue" stroke="blue" points="3188.74,-1978.78 3199.24,-1977.36 3190.15,-1971.92 3188.74,-1978.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge680" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.29,-1566.35C2763.91,-1560.44 2871.48,-1566.02 2932,-1632 2989.38,-1694.57 2900.49,-1952.45 2960,-2013 3018.51,-2072.53 3121.12,-2067.79 3189.08,-2056.12"/>
<polygon fill="blue" stroke="blue" points="3190.04,-2059.5 3199.26,-2054.27 3188.8,-2052.61 3190.04,-2059.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.14,-82.52C2692.59,-70.92 2855.17,-51.79 2932,-141 2978.81,-195.35 2911.35,-2670.3 2960,-2723 3026.54,-2795.07 3157.25,-2775.26 3220.71,-2760.09"/>
<polygon fill="blue" stroke="blue" points="3221.81,-2763.42 3230.67,-2757.61 3220.12,-2756.63 3221.81,-2763.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.13,-82.52C2692.57,-70.94 2855.11,-51.84 2932,-141 2973.82,-189.49 2932.63,-2388.11 2960,-2446 3015.46,-2563.31 3155.49,-2645.57 3221.51,-2679.15"/>
<polygon fill="blue" stroke="blue" points="3220.19,-2682.4 3230.7,-2683.75 3223.32,-2676.14 3220.19,-2682.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.11,-82.55C2692.48,-71.02 2854.89,-52.03 2932,-141 2991.28,-209.4 2898.72,-1703.38 2960,-1770 3010.47,-1824.87 3098.01,-1827.55 3165.02,-1819.36"/>
<polygon fill="blue" stroke="blue" points="3165.71,-1822.8 3175.17,-1818.02 3164.8,-1815.86 3165.71,-1822.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node264"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="3345,-1735 3171,-1735 3171,-1699 3345,-1699 3345,-1735"/>
<text text-anchor="middle" x="3258" y="-1713.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.1,-82.55C2692.46,-71.03 2854.85,-52.07 2932,-141 2988.4,-206.01 2901.39,-1626.97 2960,-1690 3012.15,-1746.08 3103.18,-1746.37 3170.76,-1736.62"/>
<polygon fill="blue" stroke="blue" points="3171.62,-1740.03 3180.97,-1735.04 3170.55,-1733.11 3171.62,-1740.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.27,-26.04C2692.3,-8.77 2852.72,24.15 2932,-61 2982.39,-115.12 2909.85,-2668.66 2960,-2723 3026.53,-2795.08 3157.25,-2775.26 3220.71,-2760.09"/>
<polygon fill="blue" stroke="blue" points="3221.8,-2763.42 3230.66,-2757.61 3220.11,-2756.63 3221.8,-2763.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.27,-26.05C2692.28,-8.79 2852.67,24.1 2932,-61 2977.18,-109.46 2931.69,-2386.1 2960,-2446 3015.44,-2563.32 3155.48,-2645.58 3221.51,-2679.15"/>
<polygon fill="blue" stroke="blue" points="3220.19,-2682.41 3230.69,-2683.75 3223.32,-2676.15 3220.19,-2682.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.24,-26.07C2692.2,-8.86 2852.47,23.91 2932,-61 2996.91,-130.31 2895.74,-1700.09 2960,-1770 3010.45,-1824.89 3098,-1827.57 3165.01,-1819.37"/>
<polygon fill="blue" stroke="blue" points="3165.7,-1822.81 3175.16,-1818.03 3164.79,-1815.87 3165.7,-1822.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.24,-26.08C2692.18,-8.88 2852.44,23.88 2932,-61 2993.9,-127.04 2898.39,-1623.69 2960,-1690 3012.12,-1746.1 3103.16,-1746.39 3170.74,-1736.63"/>
<polygon fill="blue" stroke="blue" points="3171.61,-1740.04 3180.96,-1735.05 3170.54,-1733.12 3171.61,-1740.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node197"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="2689,-189 2515,-189 2515,-153 2689,-153 2689,-189"/>
<text text-anchor="middle" x="2602" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge605" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.04,-164.03C2897.27,-148.97 3421.15,-122.45 3556,-224 4032.74,-583.03 3545.7,-1102.63 3998,-1492 4156.35,-1628.32 4315.48,-1428.1 4460,-1579 4651.79,-1779.26 4656.92,-2736.27 4656.21,-2912.93"/>
<polygon fill="blue" stroke="blue" points="4652.71,-2912.97 4656.16,-2922.98 4659.71,-2913 4652.71,-2912.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge604" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.15,-157.58C2765.37,-151.14 2873.33,-156.37 2932,-224 2988.29,-288.89 2901.82,-1706.8 2960,-1770 3010.5,-1824.85 3098.04,-1827.53 3165.03,-1819.35"/>
<polygon fill="blue" stroke="blue" points="3165.73,-1822.79 3175.18,-1818.01 3164.81,-1815.85 3165.73,-1822.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge782" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2181.14,-171C2263.51,-171 2408.41,-171 2504.56,-171"/>
<polygon fill="blue" stroke="blue" points="2504.58,-174.5 2514.58,-171 2504.58,-167.5 2504.58,-174.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3316.6,-1981.52C3378.2,-1978.91 3477.6,-1981.06 3556,-2013 3640.43,-2047.39 3717.82,-2125.67 3754.18,-2166.36"/>
<polygon fill="blue" stroke="blue" points="3751.65,-2168.79 3760.89,-2173.98 3756.9,-2164.16 3751.65,-2168.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge588" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3279.27,-2058.37C3349.1,-2121.66 3575.41,-2326.77 3576,-2327 3796.75,-2412.09 4091.21,-2340.39 4192.23,-2311.08"/>
<polygon fill="blue" stroke="blue" points="4193.34,-2314.4 4201.94,-2308.22 4191.36,-2307.69 4193.34,-2314.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge566" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.64,-2390.18C3557.09,-2387.26 4077.92,-2400.29 4460,-2583 4657.86,-2677.62 4694.29,-2738.63 4826,-2914 4847.96,-2943.24 4833.44,-2965.15 4862,-2988 4869.15,-2993.72 4877.03,-2998.58 4885.34,-3002.71"/>
<polygon fill="blue" stroke="blue" points="4883.96,-3005.92 4894.51,-3006.91 4886.87,-2999.56 4883.96,-3005.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node202"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="2716,-2384 2488,-2384 2488,-2348 2716,-2348 2716,-2384"/>
<text text-anchor="middle" x="2602" y="-2362.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge738" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.17,-2370.67C2840.15,-2375.79 3037.15,-2383.92 3156.06,-2388.83"/>
<polygon fill="blue" stroke="blue" points="3156.12,-2392.34 3166.25,-2389.25 3156.41,-2385.34 3156.12,-2392.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge737" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.17,-2361.33C2841.93,-2356.14 3042.81,-2347.84 3161.12,-2342.96"/>
<polygon fill="blue" stroke="blue" points="3161.4,-2346.45 3171.25,-2342.54 3161.12,-2339.46 3161.4,-2346.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge832" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3344.77,-2342.79C3408.55,-2345.61 3497.71,-2349.55 3576,-2353 3645.44,-2356.06 4770.22,-2366.52 4826,-2408 5001.22,-2538.32 5018.28,-2839.14 5019.23,-2932.7"/>
<polygon fill="blue" stroke="blue" points="5015.73,-2932.83 5019.28,-2942.82 5022.73,-2932.8 5015.73,-2932.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node204"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="3948,-2318 3606,-2318 3606,-2282 3948,-2282 3948,-2318"/>
<text text-anchor="middle" x="3777" y="-2296.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3948.13,-2300C4037.31,-2300 4138.74,-2300 4191.59,-2300"/>
<polygon fill="blue" stroke="blue" points="4191.81,-2303.5 4201.81,-2300 4191.81,-2296.5 4191.81,-2303.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.18,-2176.18C3977.36,-2146.31 4299.19,-2099.14 4460,-2273 4512.48,-2329.74 4436.7,-2910.2 4488,-2968 4511.19,-2994.13 4548.81,-3001.88 4582.57,-3002.65"/>
<polygon fill="blue" stroke="blue" points="4582.9,-3006.16 4592.91,-3002.68 4582.92,-2999.16 4582.9,-3006.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node206"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="3893.5,-2264 3660.5,-2264 3660.5,-2228 3893.5,-2228 3893.5,-2264"/>
<text text-anchor="middle" x="3777" y="-2242.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3893.59,-2259.87C3992.27,-2271.71 4128.04,-2288 4191.96,-2295.68"/>
<polygon fill="blue" stroke="blue" points="4191.6,-2299.16 4201.95,-2296.87 4192.44,-2292.21 4191.6,-2299.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge828" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4248.72,-2318.08C4290.27,-2358.86 4391.93,-2462.26 4460,-2562 4544.03,-2685.13 4617.06,-2848.87 4644.46,-2913.29"/>
<polygon fill="blue" stroke="blue" points="4641.35,-2914.91 4648.47,-2922.76 4647.8,-2912.18 4641.35,-2914.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.18,-2748.2C3439.84,-2737.89 4234.96,-2689.84 4460,-2775 4536.12,-2803.81 4603.33,-2875.92 4635.64,-2914.94"/>
<polygon fill="blue" stroke="blue" points="4632.96,-2917.2 4642,-2922.74 4638.39,-2912.78 4632.96,-2917.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node209"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="4264.5,-2820 4193.5,-2820 4193.5,-2784 4264.5,-2784 4264.5,-2820"/>
<text text-anchor="middle" x="4229" y="-2798.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4264.87,-2800.12C4315.07,-2799.42 4407.42,-2805.97 4460,-2858 4495.86,-2893.49 4450.76,-2933.97 4488,-2968 4513.3,-2991.12 4550.16,-2998.83 4582.92,-3000.35"/>
<polygon fill="blue" stroke="blue" points="4582.84,-3003.85 4592.93,-3000.63 4583.04,-2996.85 4582.84,-3003.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3346.12,-2853.45C3457.31,-2847.64 3645.5,-2837.82 3731.15,-2833.34"/>
<polygon fill="blue" stroke="blue" points="3731.51,-2836.83 3741.32,-2832.81 3731.15,-2829.84 3731.51,-2836.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node211"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="3349,-2822 3167,-2822 3167,-2786 3349,-2786 3349,-2822"/>
<text text-anchor="middle" x="3258" y="-2800.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge511" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3349.05,-2808.7C3460.7,-2814.53 3646.59,-2824.24 3731.38,-2828.67"/>
<polygon fill="blue" stroke="blue" points="3731.28,-2832.17 3741.45,-2829.2 3731.65,-2825.18 3731.28,-2832.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge637" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.19,-2689.26C3418.28,-2656.44 4030.06,-2522.82 4460,-2721 4549.03,-2762.04 4614.61,-2864.93 4641.95,-2914.06"/>
<polygon fill="blue" stroke="blue" points="4638.89,-2915.76 4646.76,-2922.86 4645.03,-2912.41 4638.89,-2915.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge715" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3812.83,-2831.05C3936.62,-2831.86 4353.56,-2840.12 4460,-2914 4482.21,-2929.42 4466.09,-2952.16 4488,-2968 4515.11,-2987.6 4551.11,-2995.14 4582.83,-2997.46"/>
<polygon fill="blue" stroke="blue" points="4582.78,-3000.96 4592.96,-2998.04 4583.18,-2993.97 4582.78,-3000.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge716" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3812.56,-2828.77C3893.14,-2823.58 4093.39,-2810.67 4183.19,-2804.89"/>
<polygon fill="blue" stroke="blue" points="4183.56,-2808.37 4193.32,-2804.24 4183.11,-2801.39 4183.56,-2808.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge781" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3347.22,-1795.36C3575.39,-1788.77 4186.23,-1806.61 4460,-2162 4514.68,-2232.99 4428.71,-2900.81 4488,-2968 4511.12,-2994.19 4548.73,-3001.95 4582.51,-3002.71"/>
<polygon fill="blue" stroke="blue" points="4582.84,-3006.21 4592.85,-3002.74 4582.86,-2999.21 4582.84,-3006.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node215"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="4268.5,-1374 4189.5,-1374 4189.5,-1338 4268.5,-1338 4268.5,-1374"/>
<text text-anchor="middle" x="4229" y="-1352.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge649" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.72,-1352.65C4320.52,-1350.51 4411.46,-1355.39 4460,-1409 4565.48,-1525.5 4642.14,-2713.47 4654.31,-2912.72"/>
<polygon fill="blue" stroke="blue" points="4650.83,-2913.17 4654.93,-2922.94 4657.82,-2912.75 4650.83,-2913.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node216"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="2689.5,-1950 2514.5,-1950 2514.5,-1914 2689.5,-1914 2689.5,-1950"/>
<text text-anchor="middle" x="2602" y="-1928.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.59,-1939.08C2755.94,-1944.51 2849.75,-1952.21 2932,-1959 3020.91,-1966.34 3123.5,-1974.87 3189.24,-1980.35"/>
<polygon fill="blue" stroke="blue" points="3189.21,-1983.86 3199.47,-1981.2 3189.79,-1976.88 3189.21,-1983.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.77,-1917.45C2760.79,-1910.3 2860.79,-1911.61 2932,-1959 2954.51,-1973.98 2937.56,-1997.92 2960,-2013 3027.82,-2058.56 3124.89,-2058.21 3189.37,-2051.24"/>
<polygon fill="blue" stroke="blue" points="3189.9,-2054.7 3199.43,-2050.07 3189.09,-2047.75 3189.9,-2054.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node217"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="2677,-1896 2527,-1896 2527,-1860 2677,-1860 2677,-1896"/>
<text text-anchor="middle" x="2602" y="-1874.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.25,-1880.65C2744.2,-1883.86 2845.2,-1890.72 2932,-1905 3022.32,-1919.86 3124.45,-1947.07 3189.72,-1965.83"/>
<polygon fill="blue" stroke="blue" points="3188.89,-1969.23 3199.47,-1968.65 3190.84,-1962.51 3188.89,-1969.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.15,-1861.69C2750.52,-1850.19 2861.73,-1845.87 2932,-1905 2969.94,-1936.93 2922.2,-1980.91 2960,-2013 3023.07,-2066.55 3123.12,-2063.76 3189.42,-2054.11"/>
<polygon fill="blue" stroke="blue" points="3190,-2057.56 3199.35,-2052.58 3188.93,-2050.65 3190,-2057.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node218"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="2684,-1788 2520,-1788 2520,-1752 2684,-1752 2684,-1788"/>
<text text-anchor="middle" x="2602" y="-1766.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.29,-1755.78C2755.69,-1747.84 2859.24,-1747.81 2932,-1797 2955.05,-1812.59 2939.91,-1833.75 2960,-1853 3024.89,-1915.18 3123.82,-1951.44 3189.43,-1969.98"/>
<polygon fill="blue" stroke="blue" points="3188.69,-1973.41 3199.26,-1972.7 3190.56,-1966.66 3188.69,-1973.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.41,-1751.96C2753.03,-1739.01 2865.45,-1733.51 2932,-1797 3002.04,-1863.82 2890.25,-1945.87 2960,-2013 3019.97,-2070.71 3121.73,-2066.59 3189.15,-2055.54"/>
<polygon fill="blue" stroke="blue" points="3190,-2058.94 3199.25,-2053.79 3188.8,-2052.05 3190,-2058.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.25,-1764.88C2770.63,-1761.39 2899.24,-1762.51 2932,-1797 3002.88,-1871.64 2889.45,-2648.05 2960,-2723 3027.23,-2794.42 3157.61,-2774.92 3220.86,-2759.95"/>
<polygon fill="blue" stroke="blue" points="3221.9,-2763.3 3230.77,-2757.51 3220.22,-2756.51 3221.9,-2763.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.17,-1764.95C2770.48,-1761.54 2899.02,-1762.72 2932,-1797 2982.04,-1849.02 2928.14,-2381.23 2960,-2446 3017.27,-2562.44 3156.39,-2645.14 3221.85,-2678.99"/>
<polygon fill="blue" stroke="blue" points="3220.45,-2682.21 3230.95,-2683.63 3223.63,-2675.97 3220.45,-2682.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.18,-1773.72C2804.33,-1779.24 3029.21,-1789.55 3158.58,-1795.49"/>
<polygon fill="blue" stroke="blue" points="3158.73,-1799 3168.88,-1795.96 3159.05,-1792 3158.73,-1799"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.18,-1763.42C2805,-1753.63 3031.71,-1735.26 3160.72,-1724.8"/>
<polygon fill="blue" stroke="blue" points="3161.3,-1728.27 3170.99,-1723.97 3160.74,-1721.29 3161.3,-1728.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node219"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="2699,-1680 2505,-1680 2505,-1644 2699,-1644 2699,-1680"/>
<text text-anchor="middle" x="2602" y="-1658.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.38,-1643.95C2755.56,-1631.88 2865.24,-1627.82 2932,-1689 2986.52,-1738.96 2914.7,-1794.56 2960,-1853 3016.25,-1925.56 3120.77,-1959.59 3189.6,-1974.77"/>
<polygon fill="blue" stroke="blue" points="3188.98,-1978.22 3199.49,-1976.88 3190.44,-1971.37 3188.98,-1978.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2675.85,-1643.94C2750.88,-1630.14 2865.9,-1623.19 2932,-1689 2983.21,-1739.99 2909.01,-1961.78 2960,-2013 3018.89,-2072.16 3121.4,-2067.51 3189.23,-2055.96"/>
<polygon fill="blue" stroke="blue" points="3190.17,-2059.35 3199.4,-2054.14 3188.93,-2052.46 3190.17,-2059.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node220"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2712,-2220 2492,-2220 2492,-2184 2712,-2184 2712,-2220"/>
<text text-anchor="middle" x="2602" y="-2198.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.35,-2220.02C2755.52,-2232.07 2865.18,-2236.11 2932,-2175 2985.92,-2125.69 2906.3,-2062.55 2960,-2013 3021.08,-1956.65 3122.32,-1960.35 3189.35,-1970.95"/>
<polygon fill="blue" stroke="blue" points="3188.96,-1974.43 3199.4,-1972.63 3190.11,-1967.52 3188.96,-1974.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.15,-2201.53C2776.85,-2199.16 2860.01,-2192.45 2932,-2175 3037.9,-2149.33 3153.98,-2093.91 3214.66,-2062.64"/>
<polygon fill="blue" stroke="blue" points="3216.29,-2065.74 3223.56,-2058.03 3213.07,-2059.53 3216.29,-2065.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node221"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="2692,-2274 2512,-2274 2512,-2238 2692,-2238 2692,-2274"/>
<text text-anchor="middle" x="2602" y="-2252.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.31,-2259.22C2759.66,-2259.14 2853.54,-2253.64 2932,-2229 3049.87,-2191.98 3171.11,-2106.38 3226.3,-2064.28"/>
<polygon fill="blue" stroke="blue" points="3228.48,-2067.02 3234.27,-2058.15 3224.21,-2061.47 3228.48,-2067.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node222"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="2680,-2166 2524,-2166 2524,-2130 2680,-2130 2680,-2166"/>
<text text-anchor="middle" x="2602" y="-2144.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.27,-2164.79C2753.63,-2175.92 2862.71,-2179.3 2932,-2121 2969.94,-2089.07 2922.2,-2045.09 2960,-2013 3023.07,-1959.45 3123.12,-1962.24 3189.42,-1971.89"/>
<polygon fill="blue" stroke="blue" points="3188.93,-1975.35 3199.35,-1973.42 3190,-1968.44 3188.93,-1975.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.21,-2145.21C2747.16,-2141.94 2846.47,-2135.07 2932,-2121 3022.32,-2106.14 3124.45,-2078.93 3189.72,-2060.17"/>
<polygon fill="blue" stroke="blue" points="3190.84,-2063.49 3199.47,-2057.35 3188.89,-2056.77 3190.84,-2063.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node223"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="2833.5,-1842 2370.5,-1842 2370.5,-1806 2833.5,-1806 2833.5,-1842"/>
<text text-anchor="middle" x="2602" y="-1820.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge654" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.66,-1833.74C2866.93,-1837.8 2900.53,-1843.37 2932,-1851 3037.9,-1876.67 3153.98,-1932.09 3214.66,-1963.36"/>
<polygon fill="blue" stroke="blue" points="3213.07,-1966.47 3223.56,-1967.97 3216.29,-1960.26 3213.07,-1966.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge656" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.35,-1805.98C2755.52,-1793.93 2865.18,-1789.89 2932,-1851 2985.92,-1900.31 2906.3,-1963.45 2960,-2013 3021.08,-2069.35 3122.32,-2065.65 3189.35,-2055.05"/>
<polygon fill="blue" stroke="blue" points="3190.11,-2058.48 3199.4,-2053.37 3188.96,-2051.57 3190.11,-2058.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge653" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.71,-1821.23C2878.38,-1825.58 2916.25,-1834.44 2932,-1851 2998.82,-1921.23 2893.49,-2652.48 2960,-2723 3027.3,-2794.36 3157.65,-2774.89 3220.87,-2759.94"/>
<polygon fill="blue" stroke="blue" points="3221.91,-2763.29 3230.78,-2757.5 3220.23,-2756.49 3221.91,-2763.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge655" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.53,-1821.4C2878.21,-1825.75 2916.13,-1834.56 2932,-1851 2977.98,-1898.61 2930.67,-2386.67 2960,-2446 3017.5,-2562.33 3156.5,-2645.09 3221.89,-2678.97"/>
<polygon fill="blue" stroke="blue" points="3220.49,-2682.18 3230.98,-2683.61 3223.67,-2675.95 3220.49,-2682.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge652" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.58,-1815.54C2944.89,-1811.45 3072.58,-1806.77 3158.38,-1803.62"/>
<polygon fill="blue" stroke="blue" points="3158.77,-1807.11 3168.63,-1803.24 3158.51,-1800.11 3158.77,-1807.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge651" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2833.76,-1825.24C2867.68,-1819.72 2901.45,-1810.81 2932,-1797 2947.75,-1789.88 2944.6,-1777.86 2960,-1770 3022.18,-1738.26 3100.13,-1725.21 3160.56,-1719.98"/>
<polygon fill="blue" stroke="blue" points="3161.18,-1723.44 3170.87,-1719.15 3160.62,-1716.47 3161.18,-1723.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node224"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2745,-1734 2459,-1734 2459,-1698 2745,-1698 2745,-1734"/>
<text text-anchor="middle" x="2602" y="-1712.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge700" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2688.48,-1697.96C2761.62,-1687.8 2865.36,-1686.67 2932,-1743 2970.53,-1775.57 2927.52,-1814.4 2960,-1853 3018.77,-1922.84 3121.64,-1957.5 3189.55,-1973.57"/>
<polygon fill="blue" stroke="blue" points="3188.78,-1976.98 3199.31,-1975.8 3190.34,-1970.16 3188.78,-1976.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge699" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.66,-1697.98C2751.53,-1684.5 2865.65,-1678.06 2932,-1743 2975.11,-1785.19 2917.08,-1970.62 2960,-2013 3019.31,-2071.56 3121.48,-2067.15 3189.14,-2055.8"/>
<polygon fill="blue" stroke="blue" points="3190.04,-2059.2 3199.28,-2054.01 3188.82,-2052.31 3190.04,-2059.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge697" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.02,-1709.54C2821.93,-1709.43 2906.37,-1715.97 2932,-1743 3006.95,-1822.05 2885.4,-2643.62 2960,-2723 3027.17,-2794.48 3157.58,-2774.95 3220.84,-2759.97"/>
<polygon fill="blue" stroke="blue" points="3221.89,-2763.31 3230.76,-2757.52 3220.21,-2756.52 3221.89,-2763.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge695" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.35,-1709.64C2822.11,-1709.59 2906.27,-1716.16 2932,-1743 2986.1,-1799.43 2925.61,-2375.8 2960,-2446 3017.08,-2562.53 3156.29,-2645.19 3221.81,-2679.01"/>
<polygon fill="blue" stroke="blue" points="3220.42,-2682.23 3230.92,-2683.64 3223.6,-2675.99 3220.42,-2682.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge698" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.1,-1706.97C2805.11,-1708.32 2874.29,-1716.91 2932,-1743 2947.75,-1750.12 2944.31,-1762.73 2960,-1770 3021.9,-1798.68 3098.67,-1805.8 3158.65,-1805.95"/>
<polygon fill="blue" stroke="blue" points="3158.9,-1809.45 3168.88,-1805.9 3158.87,-1802.45 3158.9,-1809.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge696" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2745.31,-1716.22C2871.02,-1716.41 3050.92,-1716.68 3160.52,-1716.85"/>
<polygon fill="blue" stroke="blue" points="3160.57,-1720.35 3170.58,-1716.87 3160.58,-1713.35 3160.57,-1720.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node225"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="2662.5,-2112 2541.5,-2112 2541.5,-2076 2662.5,-2076 2662.5,-2112"/>
<text text-anchor="middle" x="2602" y="-2090.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge746" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.6,-2105.27C2733.12,-2115.2 2851.13,-2120.82 2932,-2067 2954.51,-2052.02 2937.56,-2028.08 2960,-2013 3027.82,-1967.44 3124.89,-1967.79 3189.37,-1974.76"/>
<polygon fill="blue" stroke="blue" points="3189.09,-1978.25 3199.43,-1975.93 3189.9,-1971.3 3189.09,-1978.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge747" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.74,-2089.12C2728.66,-2083.72 2837.9,-2074.77 2932,-2067 3020.91,-2059.66 3123.5,-2051.13 3189.24,-2045.65"/>
<polygon fill="blue" stroke="blue" points="3189.79,-2049.12 3199.47,-2044.8 3189.21,-2042.14 3189.79,-2049.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node226"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="2690,-2058 2514,-2058 2514,-2022 2690,-2022 2690,-2058"/>
<text text-anchor="middle" x="2602" y="-2036.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge804" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2690.28,-2032.86C2756.59,-2027.43 2850.04,-2019.77 2932,-2013 3020.91,-2005.66 3123.5,-1997.13 3189.24,-1991.65"/>
<polygon fill="blue" stroke="blue" points="3189.79,-1995.12 3199.47,-1990.8 3189.21,-1988.14 3189.79,-1995.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge805" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2690.18,-2040C2822.14,-2040 3069.82,-2040 3189.23,-2040"/>
<polygon fill="blue" stroke="blue" points="3189.33,-2043.5 3199.33,-2040 3189.33,-2036.5 3189.33,-2043.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node227"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2706.5,-2004 2497.5,-2004 2497.5,-1968 2706.5,-1968 2706.5,-2004"/>
<text text-anchor="middle" x="2602" y="-1982.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge855" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2706.63,-1986C2841.76,-1986 3074.37,-1986 3189.05,-1986"/>
<polygon fill="blue" stroke="blue" points="3189.1,-1989.5 3199.1,-1986 3189.1,-1982.5 3189.1,-1989.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge856" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2706.73,-1994.49C2771.49,-1999.79 2856.61,-2006.77 2932,-2013 3020.91,-2020.34 3123.5,-2028.87 3189.24,-2034.35"/>
<polygon fill="blue" stroke="blue" points="3189.21,-2037.86 3199.47,-2035.2 3189.79,-2030.88 3189.21,-2037.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node228"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2666,-2926 2538,-2926 2538,-2890 2666,-2890 2666,-2926"/>
<text text-anchor="middle" x="2602" y="-2904.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.03,-2922.36C2738.76,-2934.96 2857.82,-2942.83 2932,-2881 2968.77,-2850.35 2923.36,-2807.81 2960,-2777 3034.35,-2714.47 3159.28,-2729.1 3220.69,-2741.37"/>
<polygon fill="blue" stroke="blue" points="3220.18,-2744.84 3230.68,-2743.46 3221.61,-2737.99 3220.18,-2744.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2666.3,-2912.04C2751.3,-2915.97 2895.87,-2916.9 2932,-2881 2982.16,-2831.15 2907.84,-2611.76 2960,-2564 3155.37,-2385.13 3294.94,-2519.14 3556,-2564 3802.88,-2606.43 4079.42,-2730.53 4184.41,-2780.64"/>
<polygon fill="blue" stroke="blue" points="4182.92,-2783.81 4193.45,-2784.97 4185.94,-2777.49 4182.92,-2783.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node229"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="2841.5,-2710 2362.5,-2710 2362.5,-2674 2841.5,-2674 2841.5,-2710"/>
<text text-anchor="middle" x="2602" y="-2688.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.71,-2709.89C2872.13,-2712.67 2902.81,-2715.72 2932,-2719 2944.49,-2720.4 2947.51,-2721.54 2960,-2723 3053.72,-2733.95 3164.53,-2742.99 3220.59,-2747.29"/>
<polygon fill="blue" stroke="blue" points="3220.49,-2750.8 3230.73,-2748.07 3221.03,-2743.82 3220.49,-2750.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.89,-2693.46C2983.14,-2694.33 3148.11,-2695.33 3220.17,-2695.77"/>
<polygon fill="blue" stroke="blue" points="3220.5,-2699.28 3230.52,-2695.84 3220.54,-2692.28 3220.5,-2699.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.53,-2693.86C2882.73,-2689.26 2917.13,-2680.52 2932,-2665 2986.55,-2608.08 2917.9,-2022.66 2960,-1956 3006.04,-1883.1 3098.15,-1842.35 3167.65,-1820.94"/>
<polygon fill="blue" stroke="blue" points="3168.73,-1824.27 3177.3,-1818.04 3166.72,-1817.56 3168.73,-1824.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.62,-2693.95C2882.82,-2689.34 2917.19,-2680.58 2932,-2665 3000.55,-2592.89 2894.94,-1845.27 2960,-1770 3008.38,-1714.03 3093.79,-1703.69 3160.63,-1705.66"/>
<polygon fill="blue" stroke="blue" points="3160.65,-1709.16 3170.78,-1706.06 3160.92,-1702.17 3160.65,-1709.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node230"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="2696.5,-2494 2507.5,-2494 2507.5,-2458 2696.5,-2458 2696.5,-2494"/>
<text text-anchor="middle" x="2602" y="-2472.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.09,-2457.99C2752.73,-2444.97 2865.42,-2439.33 2932,-2503 3003.24,-2571.12 2889.06,-2654.57 2960,-2723 3030.42,-2790.93 3158.72,-2773.28 3221.07,-2759.39"/>
<polygon fill="blue" stroke="blue" points="3221.9,-2762.79 3230.85,-2757.11 3220.32,-2755.97 3221.9,-2762.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.01,-2494.05C2752.73,-2507.62 2868.06,-2513.81 2932,-2446 2998.13,-2375.88 2890.76,-1646.04 2960,-1579 3000.63,-1539.66 3937.5,-1539.53 3978,-1579 4008.81,-1609.02 3987.37,-2311.32 3998,-2353 4042.21,-2526.41 4162.37,-2709.04 4209.07,-2775.7"/>
<polygon fill="blue" stroke="blue" points="4206.28,-2777.81 4214.91,-2783.97 4212,-2773.78 4206.28,-2777.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node231"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="2848.5,-2656 2355.5,-2656 2355.5,-2620 2848.5,-2620 2848.5,-2656"/>
<text text-anchor="middle" x="2602" y="-2634.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge585" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.71,-2629.68C2878.45,-2636.69 2907.07,-2647.89 2932,-2665 2955.6,-2681.2 2936.47,-2706.7 2960,-2723 3039.3,-2777.93 3160.48,-2767.21 3220.59,-2757.3"/>
<polygon fill="blue" stroke="blue" points="3221.48,-2760.7 3230.73,-2755.54 3220.28,-2753.8 3221.48,-2760.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge584" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2827.35,-2656.01C2862.39,-2658.94 2898.18,-2662 2932,-2665 3036.92,-2674.31 3160.78,-2686.44 3220.79,-2692.39"/>
<polygon fill="blue" stroke="blue" points="3220.6,-2695.89 3230.89,-2693.39 3221.29,-2688.92 3220.6,-2695.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge586" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.83,-2638.95C2886.76,-2634.15 2918,-2625.56 2932,-2611 2982.49,-2558.49 2921,-2017.53 2960,-1956 3006.16,-1883.18 3098.25,-1842.41 3167.71,-1820.98"/>
<polygon fill="blue" stroke="blue" points="3168.79,-1824.31 3177.36,-1818.08 3166.77,-1817.61 3168.79,-1824.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge587" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.54,-2639.11C2886.63,-2634.31 2918.02,-2625.68 2932,-2611 2996.49,-2543.3 2898.79,-1840.68 2960,-1770 3008.43,-1714.08 3093.84,-1703.73 3160.67,-1705.69"/>
<polygon fill="blue" stroke="blue" points="3160.68,-1709.19 3170.81,-1706.09 3160.95,-1702.2 3160.68,-1709.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node232"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2676.5,-2872 2527.5,-2872 2527.5,-2836 2676.5,-2836 2676.5,-2872"/>
<text text-anchor="middle" x="2602" y="-2850.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge627" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.56,-2866.6C2747.67,-2874.75 2855.58,-2876.1 2932,-2827 2953.43,-2813.23 2938.63,-2790.86 2960,-2777 3040.93,-2724.5 3161.37,-2734.12 3220.95,-2743.24"/>
<polygon fill="blue" stroke="blue" points="3220.57,-2746.73 3231,-2744.87 3221.69,-2739.82 3220.57,-2746.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge630" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.75,-2854.45C2795.18,-2855.18 3027.8,-2856.6 3159.69,-2857.4"/>
<polygon fill="blue" stroke="blue" points="3159.77,-2860.91 3169.79,-2857.47 3159.81,-2853.91 3159.77,-2860.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge626" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.7,-2870.12C2749.96,-2881.55 2861.34,-2885.89 2932,-2827 2968.77,-2796.35 2923.36,-2753.81 2960,-2723 3034.35,-2660.47 3159.28,-2675.1 3220.69,-2687.37"/>
<polygon fill="blue" stroke="blue" points="3220.18,-2690.84 3230.68,-2689.46 3221.61,-2683.99 3220.18,-2690.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge629" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.55,-2858.79C2762.78,-2862.62 2898.22,-2862.5 2932,-2827 2998.74,-2756.85 2908.6,-2038.06 2960,-1956 3005.7,-1883.05 3097.63,-1842.34 3167.17,-1820.95"/>
<polygon fill="blue" stroke="blue" points="3168.25,-1824.28 3176.83,-1818.06 3166.24,-1817.58 3168.25,-1824.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge628" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.59,-2858.82C2762.84,-2862.68 2898.32,-2862.59 2932,-2827 3012.74,-2741.66 2883.39,-1859.07 2960,-1770 3008.24,-1713.91 3093.67,-1703.58 3160.55,-1705.59"/>
<polygon fill="blue" stroke="blue" points="3160.57,-1709.09 3170.7,-1705.99 3160.85,-1702.1 3160.57,-1709.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node233"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="2731,-2818 2473,-2818 2473,-2782 2731,-2782 2731,-2818"/>
<text text-anchor="middle" x="2602" y="-2796.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge751" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.04,-2790.21C2883.42,-2778.56 3128.79,-2759.8 3220.7,-2752.78"/>
<polygon fill="blue" stroke="blue" points="3221.17,-2756.25 3230.88,-2752 3220.64,-2749.27 3221.17,-2756.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge748" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.29,-2808.73C2792.19,-2813.34 2865.94,-2819.58 2932,-2827 2944.49,-2828.4 2947.51,-2829.54 2960,-2831 3026.46,-2838.76 3101.51,-2845.57 3159.54,-2850.41"/>
<polygon fill="blue" stroke="blue" points="3159.55,-2853.92 3169.81,-2851.26 3160.13,-2846.94 3159.55,-2853.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge752" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.11,-2816.63C2796.02,-2818.67 2873.3,-2810.72 2932,-2773 2953.43,-2759.23 2938.63,-2736.86 2960,-2723 3040.93,-2670.5 3161.37,-2680.12 3220.95,-2689.24"/>
<polygon fill="blue" stroke="blue" points="3220.57,-2692.73 3231,-2690.87 3221.69,-2685.82 3220.57,-2692.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge749" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.31,-2806.33C2811.58,-2807.21 2904.76,-2801.57 2932,-2773 2994.68,-2707.26 2911.7,-2032.92 2960,-1956 3005.78,-1883.1 3097.69,-1842.38 3167.21,-1820.98"/>
<polygon fill="blue" stroke="blue" points="3168.29,-1824.31 3176.87,-1818.08 3166.28,-1817.6 3168.29,-1824.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge750" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2731.36,-2806.38C2811.66,-2807.29 2904.85,-2801.65 2932,-2773 3008.68,-2692.07 2887.24,-1854.47 2960,-1770 3008.28,-1713.95 3093.7,-1703.61 3160.58,-1705.61"/>
<polygon fill="blue" stroke="blue" points="3160.59,-1709.12 3170.72,-1706.01 3160.87,-1702.12 3160.59,-1709.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node234"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2667.5,-2980 2536.5,-2980 2536.5,-2944 2667.5,-2944 2667.5,-2980"/>
<text text-anchor="middle" x="2602" y="-2958.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge753" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.66,-2977.6C2741.37,-2991.19 2860.81,-2999.82 2932,-2935 2984.73,-2886.98 2907.48,-2825.25 2960,-2777 3031.73,-2711.11 3158.41,-2727.48 3220.56,-2740.79"/>
<polygon fill="blue" stroke="blue" points="3220.15,-2744.28 3230.67,-2743.05 3221.68,-2737.45 3220.15,-2744.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge755" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.52,-2978.03C2741.65,-2992.21 2862.05,-3001.58 2932,-2935 3000.84,-2869.48 2891.44,-2788.82 2960,-2723 3030.58,-2655.23 3158.8,-2672.8 3221.1,-2686.65"/>
<polygon fill="blue" stroke="blue" points="3220.34,-2690.07 3230.87,-2688.91 3221.92,-2683.25 3220.34,-2690.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge754" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.83,-2978.35C2742.26,-2992.84 2862.94,-3002.49 2932,-2935 2974.51,-2893.46 2915.83,-2708.77 2960,-2669 3156.86,-2491.77 3304.34,-2586.34 3556,-2669 3638.25,-2696.02 3715.05,-2766.86 3752.36,-2805.3"/>
<polygon fill="blue" stroke="blue" points="3750.27,-2808.17 3759.71,-2812.98 3755.32,-2803.34 3750.27,-2808.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node235"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2729,-2548 2475,-2548 2475,-2512 2729,-2512 2729,-2548"/>
<text text-anchor="middle" x="2602" y="-2526.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge759" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.35,-2536.11C2809.92,-2537 2904.24,-2531.46 2932,-2503 3008.16,-2424.93 2884.18,-2091.41 2960,-2013 3018.11,-1952.9 3121.06,-1957.87 3189.18,-1969.74"/>
<polygon fill="blue" stroke="blue" points="3188.92,-1973.25 3199.38,-1971.61 3190.18,-1966.37 3188.92,-1973.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge761" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.27,-2548.02C2753.73,-2560.68 2865.3,-2565.72 2932,-2503 2995.46,-2443.32 2919.07,-2385.9 2960,-2309 3020.87,-2194.63 3150.36,-2104.3 3216.42,-2063.56"/>
<polygon fill="blue" stroke="blue" points="3218.59,-2066.34 3225.3,-2058.14 3214.94,-2060.36 3218.59,-2066.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge762" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.05,-2511.97C2755.26,-2499.84 2865.2,-2495.66 2932,-2557 2987.11,-2607.6 2905.11,-2672.15 2960,-2723 3031.45,-2789.19 3158.27,-2772.68 3220.5,-2759.27"/>
<polygon fill="blue" stroke="blue" points="3221.64,-2762.6 3230.63,-2756.99 3220.1,-2755.77 3221.64,-2762.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge757" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.12,-2530.87C2791.01,-2533.69 2866.22,-2540.69 2932,-2557 3042.53,-2584.4 3163.6,-2645.12 3221.84,-2676.45"/>
<polygon fill="blue" stroke="blue" points="3220.18,-2679.53 3230.64,-2681.22 3223.51,-2673.38 3220.18,-2679.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge760" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.41,-2536.16C2810,-2537.08 2904.32,-2531.54 2932,-2503 2974.37,-2459.31 2927.2,-2007.26 2960,-1956 3006.54,-1883.25 3098.8,-1842.44 3168.21,-1820.98"/>
<polygon fill="blue" stroke="blue" points="3169.28,-1824.31 3177.85,-1818.08 3167.26,-1817.61 3169.28,-1824.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge758" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2729.09,-2536.27C2809.83,-2537.26 2904.46,-2531.77 2932,-2503 2988.36,-2444.12 2906.49,-1831.48 2960,-1770 3008.57,-1714.19 3093.96,-1703.84 3160.75,-1705.76"/>
<polygon fill="blue" stroke="blue" points="3160.76,-1709.26 3170.88,-1706.15 3161.02,-1702.27 3160.76,-1709.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node236"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2747,-2764 2457,-2764 2457,-2728 2747,-2728 2747,-2764"/>
<text text-anchor="middle" x="2602" y="-2742.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge767" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.33,-2746.88C2900.42,-2747.82 3132.14,-2749.24 3220.78,-2749.78"/>
<polygon fill="blue" stroke="blue" points="3220.84,-2753.28 3230.86,-2749.84 3220.88,-2746.28 3220.84,-2753.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge765" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.33,-2734.97C2900.42,-2723.26 3132.14,-2705.55 3220.78,-2698.77"/>
<polygon fill="blue" stroke="blue" points="3221.16,-2702.25 3230.86,-2698 3220.62,-2695.27 3221.16,-2702.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge768" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.16,-2752.39C2823.44,-2752.34 2906.51,-2745.67 2932,-2719 2990.62,-2657.67 2914.8,-2027.79 2960,-1956 3005.94,-1883.04 3098.06,-1842.29 3167.6,-1820.9"/>
<polygon fill="blue" stroke="blue" points="3168.67,-1824.23 3177.25,-1818.01 3166.67,-1817.53 3168.67,-1824.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge766" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2747.23,-2752.46C2823.54,-2752.43 2906.6,-2745.76 2932,-2719 3004.61,-2642.48 2891.09,-1849.87 2960,-1770 3008.33,-1713.98 3093.74,-1703.65 3160.6,-1705.64"/>
<polygon fill="blue" stroke="blue" points="3160.62,-1709.14 3170.75,-1706.03 3160.89,-1702.14 3160.62,-1709.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node237"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="2825.5,-2602 2378.5,-2602 2378.5,-2566 2825.5,-2566 2825.5,-2602"/>
<text text-anchor="middle" x="2602" y="-2580.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge787" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2687.82,-2565.99C2761.03,-2555.69 2865.26,-2554.35 2932,-2611 2971.12,-2644.21 2921.03,-2689.62 2960,-2723 3033.79,-2786.2 3158.97,-2771.26 3220.57,-2758.77"/>
<polygon fill="blue" stroke="blue" points="3221.54,-2762.14 3230.59,-2756.64 3220.09,-2755.29 3221.54,-2762.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge788" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.76,-2596.99C2861.42,-2600.59 2897.82,-2605.17 2932,-2611 3038.79,-2629.21 3161.72,-2665.74 3221.14,-2684.42"/>
<polygon fill="blue" stroke="blue" points="3220.21,-2687.8 3230.8,-2687.48 3222.32,-2681.13 3220.21,-2687.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge786" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.91,-2587.3C2873.87,-2583.23 2915.23,-2574.37 2932,-2557 2978.43,-2508.9 2924.1,-2012.39 2960,-1956 3006.37,-1883.15 3098.66,-1842.35 3168.12,-1820.92"/>
<polygon fill="blue" stroke="blue" points="3169.2,-1824.25 3177.77,-1818.02 3167.18,-1817.55 3169.2,-1824.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge789" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.62,-2587.46C2873.75,-2583.41 2915.28,-2574.51 2932,-2557 2992.42,-2493.71 2902.64,-1836.08 2960,-1770 3008.5,-1714.13 3093.89,-1703.78 3160.71,-1705.72"/>
<polygon fill="blue" stroke="blue" points="3160.71,-1709.23 3170.84,-1706.12 3160.98,-1702.23 3160.71,-1709.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node238"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="2737.5,-1028 2466.5,-1028 2466.5,-992 2737.5,-992 2737.5,-1028"/>
<text text-anchor="middle" x="2602" y="-1006.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node244"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="3285,-893 3231,-893 3231,-857 3285,-857 3285,-893"/>
<text text-anchor="middle" x="3258" y="-871.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2737.69,-1006.21C2797.64,-1002.67 2868.83,-995.89 2932,-983 3040.16,-960.92 3162.38,-914.06 3221.38,-889.98"/>
<polygon fill="blue" stroke="blue" points="3222.71,-893.21 3230.63,-886.18 3220.05,-886.74 3222.71,-893.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3334,-1681 3182,-1681 3182,-1645 3334,-1645 3334,-1681"/>
<text text-anchor="middle" x="3258" y="-1659.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2737.77,-1003.73C2816.44,-1003.27 2905.33,-1009.38 2932,-1037 2978.28,-1084.93 2913.93,-1587.86 2960,-1636 3013.03,-1691.42 3104.15,-1691.74 3171.51,-1682.17"/>
<polygon fill="blue" stroke="blue" points="3172.32,-1685.59 3181.68,-1680.62 3171.27,-1678.67 3172.32,-1685.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node268"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3337.5,-1627 3178.5,-1627 3178.5,-1591 3337.5,-1591 3337.5,-1627"/>
<text text-anchor="middle" x="3258" y="-1605.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2737.7,-1003.8C2816.33,-1003.37 2905.22,-1009.48 2932,-1037 3011.47,-1118.66 2885.46,-1462.81 2960,-1549 3010.4,-1607.28 3100.37,-1618.51 3168.11,-1617.45"/>
<polygon fill="blue" stroke="blue" points="3168.45,-1620.95 3178.36,-1617.2 3168.28,-1613.95 3168.45,-1620.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node239"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2746,-488 2458,-488 2458,-452 2746,-452 2746,-488"/>
<text text-anchor="middle" x="2602" y="-466.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2746.42,-463.47C2822.99,-463.42 2906.61,-470.04 2932,-497 2980.5,-548.5 2911.99,-1718.05 2960,-1770 3010.52,-1824.66 3097.84,-1827.43 3164.76,-1819.33"/>
<polygon fill="blue" stroke="blue" points="3165.44,-1822.77 3174.9,-1818 3164.53,-1815.83 3165.44,-1822.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node263"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="3851.5,-1681 3702.5,-1681 3702.5,-1645 3851.5,-1645 3851.5,-1681"/>
<text text-anchor="middle" x="3777" y="-1659.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2685.02,-451.96C2758.67,-440.91 2865.19,-438.46 2932,-497 2976.13,-535.66 2916.65,-586.46 2960,-626 3157.17,-805.84 3377.02,-501.05 3556,-699 3590.92,-737.62 3541.32,-1597.17 3576,-1636 3604.46,-1667.87 3651.19,-1675.5 3692.32,-1674.76"/>
<polygon fill="blue" stroke="blue" points="3692.5,-1678.25 3702.37,-1674.41 3692.26,-1671.26 3692.5,-1678.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="3855,-1627 3699,-1627 3699,-1591 3855,-1591 3855,-1627"/>
<text text-anchor="middle" x="3777" y="-1605.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2707.71,-451.98C2777.75,-445.84 2868.38,-450.02 2932,-497 2958.95,-516.91 2933.72,-546.21 2960,-567 3170.05,-733.16 3371.6,-461.77 3556,-656 3587.82,-689.52 3567.77,-817.53 3576,-863 3627.63,-1148.16 3734.63,-1483.54 3766.71,-1581.1"/>
<polygon fill="blue" stroke="blue" points="3763.46,-1582.4 3769.91,-1590.8 3770.1,-1580.21 3763.46,-1582.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node240"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="2740.5,-1514 2463.5,-1514 2463.5,-1478 2740.5,-1478 2740.5,-1514"/>
<text text-anchor="middle" x="2602" y="-1492.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2740.8,-1482.69C2807.49,-1484.14 2883.44,-1498.78 2932,-1549 3000.82,-1620.18 2889.11,-1700.88 2960,-1770 3011.25,-1819.97 3093.65,-1824.75 3158.66,-1818.56"/>
<polygon fill="blue" stroke="blue" points="3159.36,-1822.01 3168.94,-1817.48 3158.63,-1815.05 3159.36,-1822.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2740.77,-1486.79C2805.64,-1489.66 2879.99,-1504.33 2932,-1549 2962.82,-1575.46 2928.29,-1610.62 2960,-1636 3018.8,-1683.07 3106.67,-1685.36 3171.59,-1678.57"/>
<polygon fill="blue" stroke="blue" points="3172.27,-1682.02 3181.81,-1677.41 3171.48,-1675.06 3172.27,-1682.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2719.21,-1514.06C2782.23,-1524.02 2861.45,-1536.81 2932,-1549 3012.13,-1562.85 3103.15,-1579.75 3168.44,-1592.09"/>
<polygon fill="blue" stroke="blue" points="3167.81,-1595.53 3178.28,-1593.95 3169.11,-1588.65 3167.81,-1595.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node241"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="2671.5,-272 2532.5,-272 2532.5,-236 2671.5,-236 2671.5,-272"/>
<text text-anchor="middle" x="2602" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.73,-241.3C2743.08,-232.02 2854.85,-228.84 2932,-281 2955.05,-296.59 2947.05,-312.37 2960,-337 3064.01,-534.83 3196.67,-769.14 3241.45,-847.76"/>
<polygon fill="blue" stroke="blue" points="3238.47,-849.61 3246.47,-856.56 3244.55,-846.14 3238.47,-849.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.75,-252.12C2739.25,-252.01 2844.52,-256.53 2932,-281 2945.4,-284.75 2946.66,-291.05 2960,-295 3087.8,-332.83 3466.4,-263.33 3556,-362 3603.59,-414.4 3529,-1583.07 3576,-1636 3604.37,-1667.95 3651.09,-1675.59 3692.25,-1674.82"/>
<polygon fill="blue" stroke="blue" points="3692.43,-1678.32 3702.3,-1674.47 3692.18,-1671.32 3692.43,-1678.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2671.6,-252.76C2879.88,-249.71 3494.49,-246.15 3556,-309 3577.54,-331.01 3571.43,-832.54 3576,-863 3619.02,-1149.59 3731.95,-1483.98 3766.09,-1581.2"/>
<polygon fill="blue" stroke="blue" points="3762.87,-1582.6 3769.5,-1590.87 3769.47,-1580.27 3762.87,-1582.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node242"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="2716,-974 2488,-974 2488,-938 2716,-938 2716,-974"/>
<text text-anchor="middle" x="2602" y="-952.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.29,-949.03C2779.84,-944.53 2860.48,-937.86 2932,-929 3037.49,-915.93 3161.09,-893.38 3220.92,-882"/>
<polygon fill="blue" stroke="blue" points="3221.82,-885.39 3230.99,-880.08 3220.51,-878.51 3221.82,-885.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.11,-949.99C2799.36,-948.27 2902.9,-952.74 2932,-983 2982.34,-1035.34 2909.89,-1583.44 2960,-1636 3013.01,-1691.61 3104.35,-1691.82 3171.77,-1682.18"/>
<polygon fill="blue" stroke="blue" points="3172.6,-1685.59 3181.96,-1680.62 3171.55,-1678.67 3172.6,-1685.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.06,-950.04C2799.28,-948.36 2902.8,-952.84 2932,-983 2975.8,-1028.24 2918.94,-1501.27 2960,-1549 3010.25,-1607.41 3100.24,-1618.62 3168.03,-1617.52"/>
<polygon fill="blue" stroke="blue" points="3168.38,-1621.02 3178.29,-1617.26 3168.2,-1614.02 3168.38,-1621.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node243"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="2725.5,-704 2478.5,-704 2478.5,-668 2725.5,-668 2725.5,-704"/>
<text text-anchor="middle" x="2602" y="-682.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.69,-667.99C2758.36,-656.88 2865.12,-654.31 2932,-713 2976.42,-751.98 2916.08,-803.45 2960,-843 3032.5,-908.28 3158.83,-894.9 3220.72,-883.21"/>
<polygon fill="blue" stroke="blue" points="3221.66,-886.59 3230.79,-881.22 3220.3,-879.73 3221.66,-886.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3246.7,-893.05C3198.23,-971.66 3007.63,-1293.4 2946,-1588 2938.13,-1625.63 2927.58,-1727.26 2946,-1761 2987.93,-1837.81 3099.69,-1833.71 3177.38,-1819.92"/>
<polygon fill="blue" stroke="blue" points="3178.44,-1823.29 3187.63,-1818.01 3177.16,-1816.4 3178.44,-1823.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3267.1,-893.05C3302.85,-972.91 3449.37,-1302.71 3556,-1579 3565.67,-1604.05 3555.19,-1619.04 3576,-1636 3607.91,-1662.01 3652.67,-1669.83 3691.75,-1670.68"/>
<polygon fill="blue" stroke="blue" points="3692.05,-1674.18 3702.07,-1670.75 3692.1,-1667.18 3692.05,-1674.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3271.78,-893.14C3341.34,-991.9 3674.26,-1464.56 3757.24,-1582.36"/>
<polygon fill="blue" stroke="blue" points="3754.58,-1584.67 3763.2,-1590.83 3760.31,-1580.64 3754.58,-1584.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node245"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="2823,-434 2381,-434 2381,-398 2823,-398 2823,-434"/>
<text text-anchor="middle" x="2602" y="-412.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.38,-397.95C2755.56,-385.88 2865.24,-381.82 2932,-443 2986.52,-492.96 2924.36,-542.21 2960,-607 3023.97,-723.29 3157.94,-815.3 3221.75,-854.48"/>
<polygon fill="blue" stroke="blue" points="3220.27,-857.68 3230.64,-859.88 3223.9,-851.7 3220.27,-857.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2691.69,-397.96C2764.35,-388.57 2865.66,-388.56 2932,-443 2967.02,-471.74 2925.76,-511.34 2960,-541 3162.07,-716.02 3378.18,-422.39 3556,-622 3593.48,-664.07 3538.5,-1593.94 3576,-1636 3604.43,-1667.89 3651.16,-1675.53 3692.3,-1674.78"/>
<polygon fill="blue" stroke="blue" points="3692.48,-1678.27 3702.35,-1674.43 3692.23,-1671.28 3692.48,-1678.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2823.37,-411.1C2860.96,-416.63 2898.6,-426.49 2932,-443 2948.64,-451.23 2943.75,-465.01 2960,-474 3195.36,-604.2 3375.96,-379.18 3556,-579 3577.17,-602.5 3570.77,-831.8 3576,-863 3623.92,-1148.81 3733.48,-1483.74 3766.44,-1581.14"/>
<polygon fill="blue" stroke="blue" points="3763.2,-1582.49 3769.73,-1590.83 3769.83,-1580.24 3763.2,-1582.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node246"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2932,-1460 2272,-1460 2272,-1424 2932,-1424 2932,-1460"/>
<text text-anchor="middle" x="2602" y="-1438.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2919.71,-1460.2C2924.6,-1462.85 2928.74,-1465.78 2932,-1469 2979.76,-1516.24 2912.69,-1722.31 2960,-1770 3010.5,-1820.9 3093.16,-1825.55 3158.47,-1819.07"/>
<polygon fill="blue" stroke="blue" points="3159.23,-1822.5 3168.79,-1817.94 3158.47,-1815.55 3159.23,-1822.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2681.07,-1423.96C2755.29,-1411.81 2865.23,-1407.63 2932,-1469 2987.41,-1519.93 2904.81,-1584.83 2960,-1636 3015.88,-1687.82 3105.69,-1688.97 3171.94,-1680.6"/>
<polygon fill="blue" stroke="blue" points="3172.51,-1684.05 3181.94,-1679.24 3171.56,-1677.11 3172.51,-1684.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2699.69,-1423.96C2771.1,-1416.31 2866.82,-1418.62 2932,-1469 2961.81,-1492.04 2931.6,-1524.25 2960,-1549 3016.85,-1598.53 3103.14,-1611.41 3168.09,-1613.15"/>
<polygon fill="blue" stroke="blue" points="3168.26,-1616.65 3178.32,-1613.33 3168.39,-1609.65 3168.26,-1616.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node247"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="2695.5,-650 2508.5,-650 2508.5,-614 2695.5,-614 2695.5,-650"/>
<text text-anchor="middle" x="2602" y="-628.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.86,-613.97C2754.25,-601.49 2865.27,-596.73 2932,-659 2992.48,-715.43 2900.25,-785.8 2960,-843 3030.65,-910.63 3158.39,-895.98 3220.76,-883.58"/>
<polygon fill="blue" stroke="blue" points="3221.83,-886.93 3230.91,-881.47 3220.4,-880.08 3221.83,-886.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node248"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2702,-920 2502,-920 2502,-884 2702,-884 2702,-920"/>
<text text-anchor="middle" x="2602" y="-898.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.33,-897.9C2850.58,-891.78 3122.78,-880.54 3220.7,-876.5"/>
<polygon fill="blue" stroke="blue" points="3220.85,-880 3230.7,-876.09 3220.56,-873 3220.85,-880"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.28,-896.31C2787.51,-893.81 2901.31,-896.99 2932,-929 2986.4,-985.75 2905.85,-1579.01 2960,-1636 3012.92,-1691.69 3104.27,-1691.9 3171.73,-1682.22"/>
<polygon fill="blue" stroke="blue" points="3172.56,-1685.64 3181.92,-1680.66 3171.5,-1678.72 3172.56,-1685.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.24,-896.35C2787.44,-893.88 2901.23,-897.07 2932,-929 2979.86,-978.65 2915.14,-1496.63 2960,-1549 3010.13,-1607.52 3100.13,-1618.72 3167.96,-1617.58"/>
<polygon fill="blue" stroke="blue" points="3168.32,-1621.08 3178.22,-1617.32 3168.14,-1614.08 3168.32,-1621.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node249"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2750.5,-866 2453.5,-866 2453.5,-830 2750.5,-830 2750.5,-866"/>
<text text-anchor="middle" x="2602" y="-844.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2750.59,-854.09C2903.72,-860.42 3132.89,-869.88 3220.85,-873.51"/>
<polygon fill="blue" stroke="blue" points="3220.72,-877.01 3230.86,-873.92 3221.01,-870.01 3220.72,-877.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2750.72,-841.62C2826.01,-841.87 2906.9,-848.75 2932,-875 2990.47,-936.16 2901.8,-1574.58 2960,-1636 3012.84,-1691.77 3104.21,-1691.96 3171.68,-1682.26"/>
<polygon fill="blue" stroke="blue" points="3172.53,-1685.67 3181.88,-1680.7 3171.46,-1678.76 3172.53,-1685.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2750.67,-841.67C2825.94,-841.93 2906.84,-848.8 2932,-875 2983.92,-929.06 2911.34,-1491.99 2960,-1549 3010.02,-1607.61 3100.04,-1618.79 3167.9,-1617.63"/>
<polygon fill="blue" stroke="blue" points="3168.27,-1621.13 3178.17,-1617.36 3168.08,-1614.13 3168.27,-1621.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node250"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="2714,-1406 2490,-1406 2490,-1370 2714,-1370 2714,-1406"/>
<text text-anchor="middle" x="2602" y="-1384.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2714.12,-1382.31C2797.49,-1380.66 2902.16,-1385.07 2932,-1415 2987.87,-1471.04 2904.66,-1713.43 2960,-1770 3010.5,-1821.62 3094.02,-1825.93 3159.65,-1819.15"/>
<polygon fill="blue" stroke="blue" points="3160.07,-1822.62 3169.61,-1818.02 3159.28,-1815.67 3160.07,-1822.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2678.1,-1369.98C2752.74,-1356.96 2865.44,-1351.31 2932,-1415 3003.54,-1483.45 2888.76,-1567.24 2960,-1636 3014.92,-1689.01 3105.09,-1689.92 3171.69,-1681.15"/>
<polygon fill="blue" stroke="blue" points="3172.34,-1684.6 3181.75,-1679.73 3171.36,-1677.67 3172.34,-1684.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.06,-1370C2757.82,-1358.73 2865.09,-1355.92 2932,-1415 2977.61,-1455.27 2916.84,-1506.12 2960,-1549 3014.05,-1602.69 3101.99,-1614.83 3168.18,-1615.26"/>
<polygon fill="blue" stroke="blue" points="3168.2,-1618.76 3178.19,-1615.24 3168.19,-1611.76 3168.2,-1618.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node251"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="2783,-1352 2421,-1352 2421,-1316 2783,-1316 2783,-1352"/>
<text text-anchor="middle" x="2602" y="-1330.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2783.05,-1328.52C2847.74,-1330.65 2910.16,-1338.87 2932,-1361 2995.98,-1425.85 2896.63,-1704.55 2960,-1770 3010.49,-1822.15 3094.63,-1826.22 3160.49,-1819.2"/>
<polygon fill="blue" stroke="blue" points="3160.96,-1822.67 3170.48,-1818.04 3160.15,-1815.72 3160.96,-1822.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2676.69,-1315.96C2751.57,-1302.45 2865.71,-1296 2932,-1361 2975.86,-1404.01 2916.33,-1592.8 2960,-1636 3014.35,-1689.77 3104.82,-1690.49 3171.66,-1681.47"/>
<polygon fill="blue" stroke="blue" points="3172.36,-1684.91 3181.76,-1680.01 3171.36,-1677.98 3172.36,-1684.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2679.56,-1315.99C2753.98,-1303.42 2865.27,-1298.53 2932,-1361 2993.67,-1418.73 2901.82,-1487.75 2960,-1549 3012.72,-1604.51 3101.48,-1616.3 3168.27,-1616.13"/>
<polygon fill="blue" stroke="blue" points="3168.41,-1619.63 3178.37,-1616.02 3168.33,-1612.63 3168.41,-1619.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node252"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="2712,-380 2492,-380 2492,-344 2712,-344 2712,-380"/>
<text text-anchor="middle" x="2602" y="-358.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2685.31,-343.98C2758.9,-333.03 2865.15,-330.72 2932,-389 2975.24,-426.7 2934.83,-463.45 2960,-515 3030.26,-658.89 3169.04,-795.16 3228.68,-849.83"/>
<polygon fill="blue" stroke="blue" points="3226.46,-852.55 3236.22,-856.69 3231.18,-847.37 3226.46,-852.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.29,-344.11C2781.44,-338.84 2869.28,-343.94 2932,-389 2957.55,-407.35 2934.98,-434.93 2960,-454 3172.71,-616.11 3378.59,-336.87 3556,-537 3596.51,-582.7 3535.4,-1590.39 3576,-1636 3604.41,-1667.91 3651.14,-1675.55 3692.28,-1674.79"/>
<polygon fill="blue" stroke="blue" points="3692.46,-1678.29 3702.33,-1674.45 3692.22,-1671.3 3692.46,-1678.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2712.12,-368.92C2776.27,-373.5 2858.88,-380.27 2932,-389 3071.38,-405.64 3461.97,-382.79 3556,-487 3584.03,-518.06 3569.44,-821.68 3576,-863 3621.47,-1149.21 3732.71,-1483.86 3766.26,-1581.17"/>
<polygon fill="blue" stroke="blue" points="3763.04,-1582.55 3769.62,-1590.85 3769.65,-1580.26 3763.04,-1582.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node253"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="2799.5,-596 2404.5,-596 2404.5,-560 2799.5,-560 2799.5,-596"/>
<text text-anchor="middle" x="2602" y="-574.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2799.59,-572.69C2858.37,-575.57 2912.43,-584.26 2932,-605 2976.44,-652.08 2916.01,-1722.5 2960,-1770 3010.49,-1824.52 3097.6,-1827.38 3164.46,-1819.34"/>
<polygon fill="blue" stroke="blue" points="3165.13,-1822.78 3174.59,-1818.02 3164.23,-1815.84 3165.13,-1822.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2680.15,-559.99C2754.48,-547.6 2865.22,-543 2932,-605 2990.69,-659.49 2902.05,-727.73 2960,-783 3056.41,-874.95 3465.79,-749.95 3556,-848 3615.3,-912.45 3517.53,-1570.79 3576,-1636 3604.52,-1667.81 3651.26,-1675.44 3692.38,-1674.71"/>
<polygon fill="blue" stroke="blue" points="3692.54,-1678.21 3702.42,-1674.37 3692.31,-1671.21 3692.54,-1678.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2686.88,-559.98C2760.24,-549.43 2865.22,-547.73 2932,-605 2972.59,-639.81 2920.71,-685.74 2960,-722 3157.01,-903.83 3355.8,-636.69 3556,-815 3571.14,-828.49 3732.19,-1441.49 3768.68,-1580.97"/>
<polygon fill="blue" stroke="blue" points="3765.35,-1582.1 3771.27,-1590.88 3772.13,-1580.32 3765.35,-1582.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node254"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="2732.5,-1298 2471.5,-1298 2471.5,-1262 2732.5,-1262 2732.5,-1298"/>
<text text-anchor="middle" x="2602" y="-1276.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2732.82,-1273.89C2812.58,-1273.21 2904.59,-1279 2932,-1307 3004.1,-1380.66 2888.6,-1695.66 2960,-1770 3010.54,-1822.62 3095.3,-1826.44 3161.37,-1819.22"/>
<polygon fill="blue" stroke="blue" points="3161.88,-1822.68 3171.39,-1818.02 3161.05,-1815.73 3161.88,-1822.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2732.59,-1274.11C2812.27,-1273.52 2904.25,-1279.33 2932,-1307 2983.96,-1358.81 2908.27,-1583.97 2960,-1636 3013.99,-1690.31 3104.74,-1690.87 3171.74,-1681.67"/>
<polygon fill="blue" stroke="blue" points="3172.48,-1685.1 3181.87,-1680.18 3171.46,-1678.17 3172.48,-1685.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2677.55,-1261.95C2752.3,-1248.73 2865.58,-1242.75 2932,-1307 3009.82,-1382.28 2886.73,-1469.29 2960,-1549 3011.89,-1605.45 3100.98,-1617.07 3168.08,-1616.61"/>
<polygon fill="blue" stroke="blue" points="3168.29,-1620.1 3178.24,-1616.45 3168.18,-1613.11 3168.29,-1620.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node255"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="2772.5,-812 2431.5,-812 2431.5,-776 2772.5,-776 2772.5,-812"/>
<text text-anchor="middle" x="2602" y="-790.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2772.52,-789.19C2825.09,-792.6 2882.25,-801.48 2932,-821 2946.73,-826.78 2945.34,-837.03 2960,-843 3048.4,-878.99 3163.2,-879.77 3220.75,-877.37"/>
<polygon fill="blue" stroke="blue" points="3220.99,-880.86 3230.81,-876.89 3220.66,-873.87 3220.99,-880.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2772.68,-787.86C2841.15,-789.35 2909.36,-797.25 2932,-821 2994.53,-886.57 2897.76,-1570.15 2960,-1636 3012.77,-1691.83 3104.15,-1692.01 3171.65,-1682.3"/>
<polygon fill="blue" stroke="blue" points="3172.5,-1685.71 3181.85,-1680.73 3171.43,-1678.79 3172.5,-1685.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2772.63,-787.91C2841.1,-789.4 2909.31,-797.3 2932,-821 2987.98,-879.47 2907.55,-1487.35 2960,-1549 3010.01,-1607.78 3100.25,-1618.9 3168.18,-1617.67"/>
<polygon fill="blue" stroke="blue" points="3168.56,-1621.16 3178.46,-1617.39 3168.37,-1614.16 3168.56,-1621.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node256"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2821.5,-542 2382.5,-542 2382.5,-506 2821.5,-506 2821.5,-542"/>
<text text-anchor="middle" x="2602" y="-520.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge745" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2821.91,-520.08C2871.67,-523.98 2914.95,-532.91 2932,-551 2978.47,-600.29 2914,-1720.28 2960,-1770 3010.47,-1824.55 3097.58,-1827.4 3164.45,-1819.36"/>
<polygon fill="blue" stroke="blue" points="3165.11,-1822.8 3174.58,-1818.04 3164.21,-1815.86 3165.11,-1822.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge744" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.26,-505.97C2756.3,-494.18 2865.16,-490.55 2932,-551 2982.95,-597.08 2910.1,-655.79 2960,-703 3153.97,-886.53 3377.2,-580.66 3556,-779 3587.89,-814.37 3544.24,-1600.51 3576,-1636 3604.49,-1667.84 3651.22,-1675.47 3692.35,-1674.73"/>
<polygon fill="blue" stroke="blue" points="3692.52,-1678.23 3702.39,-1674.39 3692.28,-1671.24 3692.52,-1678.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge743" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.67,-505.96C2765.18,-496.8 2865.76,-497.11 2932,-551 2966.14,-578.78 2926.73,-617.18 2960,-646 3162.31,-821.21 3365.98,-543.53 3556,-732 3576.91,-752.74 3569.96,-834.18 3576,-863 3635.48,-1146.63 3737.08,-1483.06 3767.28,-1580.98"/>
<polygon fill="blue" stroke="blue" points="3764,-1582.21 3770.3,-1590.72 3770.69,-1580.14 3764,-1582.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node257"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="2748,-758 2456,-758 2456,-722 2748,-722 2748,-758"/>
<text text-anchor="middle" x="2602" y="-736.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge771" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2702.45,-721.96C2773.4,-714.85 2867.32,-717.85 2932,-767 2960.66,-788.78 2931.62,-820.86 2960,-843 3036.53,-902.71 3159.92,-892.21 3220.73,-882.25"/>
<polygon fill="blue" stroke="blue" points="3221.38,-885.69 3230.64,-880.54 3220.19,-878.8 3221.38,-885.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge772" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748.09,-733.57C2824.15,-733.65 2906.67,-740.38 2932,-767 2998.59,-836.99 2893.71,-1565.72 2960,-1636 3012.71,-1691.89 3104.1,-1692.06 3171.62,-1682.33"/>
<polygon fill="blue" stroke="blue" points="3172.47,-1685.74 3181.82,-1680.76 3171.4,-1678.82 3172.47,-1685.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge770" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2748.06,-733.6C2824.1,-733.7 2906.62,-740.42 2932,-767 2992.05,-829.88 2903.75,-1482.7 2960,-1549 3009.93,-1607.85 3100.19,-1618.95 3168.14,-1617.71"/>
<polygon fill="blue" stroke="blue" points="3168.52,-1621.2 3178.42,-1617.42 3168.33,-1614.2 3168.52,-1621.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node258"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="2682,-326 2522,-326 2522,-290 2682,-290 2682,-326"/>
<text text-anchor="middle" x="2602" y="-304.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge783" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.05,-291.28C2755.15,-280.68 2862.67,-278.1 2932,-335 2967.02,-363.74 2940.91,-391.92 2960,-433 3039.58,-604.26 3181.25,-783.62 3235.26,-849.12"/>
<polygon fill="blue" stroke="blue" points="3232.63,-851.43 3241.7,-856.89 3238.02,-846.96 3232.63,-851.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge784" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.09,-298.7C2751.56,-294.1 2853.52,-296.21 2932,-335 2948.64,-343.23 2943.6,-357.29 2960,-366 3196.27,-491.45 3378.84,-249.56 3556,-450 3599.64,-499.38 3532.22,-1586.75 3576,-1636 3604.39,-1667.93 3651.11,-1675.57 3692.26,-1674.81"/>
<polygon fill="blue" stroke="blue" points="3692.44,-1678.31 3702.32,-1674.46 3692.2,-1671.31 3692.44,-1678.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge785" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2682.21,-303.44C2889.25,-293.39 3438.64,-279.37 3556,-405 3573.39,-423.61 3572.12,-837.83 3576,-863 3620.11,-1149.42 3732.29,-1483.93 3766.16,-1581.19"/>
<polygon fill="blue" stroke="blue" points="3762.94,-1582.58 3769.55,-1590.86 3769.55,-1580.27 3762.94,-1582.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node259"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="2703.5,-1190 2500.5,-1190 2500.5,-1154 2703.5,-1154 2703.5,-1190"/>
<text text-anchor="middle" x="2602" y="-1168.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge813" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.79,-1179.17C2770.85,-1180.28 2859.57,-1174.56 2932,-1145 3067.29,-1089.78 3188.82,-957.01 3236.08,-900.82"/>
<polygon fill="blue" stroke="blue" points="3238.8,-903.03 3242.51,-893.1 3233.42,-898.55 3238.8,-903.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge814" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.75,-1166.44C2788.67,-1164.15 2901.13,-1167.57 2932,-1199 3000.19,-1268.42 2892.12,-1566.28 2960,-1636 3013.51,-1690.96 3104.55,-1691.35 3171.76,-1681.92"/>
<polygon fill="blue" stroke="blue" points="3172.55,-1685.35 3181.92,-1680.4 3171.51,-1678.42 3172.55,-1685.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge812" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2703.64,-1166.56C2788.47,-1164.35 2900.88,-1167.81 2932,-1199 2987.12,-1254.23 2908.22,-1490.63 2960,-1549 3011.05,-1606.55 3100.7,-1617.93 3168.18,-1617.11"/>
<polygon fill="blue" stroke="blue" points="3168.47,-1620.6 3178.39,-1616.89 3168.32,-1613.6 3168.47,-1620.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node260"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="2817.5,-1244 2386.5,-1244 2386.5,-1208 2817.5,-1208 2817.5,-1244"/>
<text text-anchor="middle" x="2602" y="-1222.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge825" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.65,-1222.14C2869.04,-1225.88 2914.22,-1234.72 2932,-1253 3012.22,-1335.48 2880.56,-1686.77 2960,-1770 3010.54,-1822.95 3095.73,-1826.6 3161.94,-1819.24"/>
<polygon fill="blue" stroke="blue" points="3162.47,-1822.7 3171.98,-1818.02 3161.63,-1815.75 3162.47,-1822.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge823" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.87,-1222.39C2869.07,-1226.15 2914.1,-1234.94 2932,-1253 2992.07,-1313.61 2900.19,-1575.13 2960,-1636 3013.67,-1690.63 3104.46,-1691.14 3171.57,-1681.84"/>
<polygon fill="blue" stroke="blue" points="3172.33,-1685.27 3181.71,-1680.34 3171.3,-1678.34 3172.33,-1685.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge824" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.62,-1222.63C2868.82,-1226.4 2913.91,-1235.13 2932,-1253 2979.01,-1299.43 2915.8,-1499.89 2960,-1549 3011.38,-1606.08 3100.76,-1617.57 3168.08,-1616.9"/>
<polygon fill="blue" stroke="blue" points="3168.34,-1620.4 3178.27,-1616.71 3168.2,-1613.4 3168.34,-1620.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node261"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="2721.5,-1136 2482.5,-1136 2482.5,-1100 2721.5,-1100 2721.5,-1136"/>
<text text-anchor="middle" x="2602" y="-1114.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge831" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.66,-1122.46C2785.58,-1121.38 2864.87,-1114.31 2932,-1091 3055.58,-1048.09 3177.63,-947.03 3230.15,-899.95"/>
<polygon fill="blue" stroke="blue" points="3232.61,-902.44 3237.68,-893.14 3227.92,-897.25 3232.61,-902.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge830" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.56,-1112C2803.74,-1110.66 2903.34,-1115.62 2932,-1145 3008.31,-1223.24 2884.03,-1557.43 2960,-1636 3013.32,-1691.14 3104.38,-1691.51 3171.66,-1682.02"/>
<polygon fill="blue" stroke="blue" points="3172.46,-1685.44 3181.82,-1680.49 3171.41,-1678.52 3172.46,-1685.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge829" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2721.89,-1112.09C2803.93,-1110.83 2903.21,-1115.84 2932,-1145 2995.23,-1209.04 2900.64,-1481.36 2960,-1549 3010.75,-1606.82 3100.44,-1618.16 3168.02,-1617.25"/>
<polygon fill="blue" stroke="blue" points="3168.32,-1620.75 3178.24,-1617.02 3168.16,-1613.75 3168.32,-1620.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node262"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="2711,-1082 2493,-1082 2493,-1046 2711,-1046 2711,-1082"/>
<text text-anchor="middle" x="2602" y="-1060.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge835" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.12,-1065.38C2776.2,-1063.7 2860.1,-1057.07 2932,-1037 3044.4,-1005.63 3164.17,-934.93 3221.88,-898.18"/>
<polygon fill="blue" stroke="blue" points="3224.08,-900.93 3230.61,-892.58 3220.3,-895.04 3224.08,-900.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge834" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.38,-1058.15C2795.34,-1056.22 2902.22,-1060.3 2932,-1091 2974.22,-1134.53 2917.98,-1592.29 2960,-1636 3013.16,-1691.29 3104.25,-1691.63 3171.58,-1682.1"/>
<polygon fill="blue" stroke="blue" points="3172.38,-1685.52 3181.75,-1680.56 3171.34,-1678.6 3172.38,-1685.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge833" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.3,-1058.23C2795.22,-1056.34 2902.08,-1060.45 2932,-1091 3003.35,-1163.85 2893.05,-1472.09 2960,-1549 3010.59,-1607.12 3100.53,-1618.37 3168.22,-1617.36"/>
<polygon fill="blue" stroke="blue" points="3168.54,-1620.86 3178.46,-1617.12 3168.37,-1613.86 3168.54,-1620.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node267"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="4256,-1681 4202,-1681 4202,-1645 4256,-1645 4256,-1681"/>
<text text-anchor="middle" x="4229" y="-1659.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3851.55,-1663C3949.17,-1663 4117.78,-1663 4191.6,-1663"/>
<polygon fill="blue" stroke="blue" points="4191.79,-1666.5 4201.79,-1663 4191.79,-1659.5 4191.79,-1666.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.1,-1734.49C3411.09,-1742.55 3500.04,-1741.01 3556,-1690 3592.08,-1657.11 3538.47,-1613.22 3576,-1582 3651.65,-1519.07 4389.12,-1567.73 4460,-1636 4651.03,-1819.99 4656.84,-2738.65 4656.21,-2912.56"/>
<polygon fill="blue" stroke="blue" points="4652.71,-2912.69 4656.16,-2922.71 4659.71,-2912.73 4652.71,-2912.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.1,-1618.25C3953.25,-1630.03 4118.81,-1649.9 4191.7,-1658.64"/>
<polygon fill="blue" stroke="blue" points="4191.41,-1662.13 4201.76,-1659.85 4192.25,-1655.18 4191.41,-1662.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.18,-1663C3429.39,-1663 3592.96,-1663 3692.13,-1663"/>
<polygon fill="blue" stroke="blue" points="3692.41,-1666.5 3702.41,-1663 3692.41,-1659.5 3692.41,-1666.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge600" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4249.42,-1681.32C4294.29,-1724.84 4405.48,-1839.74 4460,-1959 4620.69,-2310.49 4650.1,-2792.06 4655.06,-2912.72"/>
<polygon fill="blue" stroke="blue" points="4651.57,-2913.09 4655.45,-2922.95 4658.57,-2912.82 4651.57,-2913.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge826" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.52,-1609C3432.05,-1609 3590.34,-1609 3688.65,-1609"/>
<polygon fill="blue" stroke="blue" points="3688.86,-1612.5 3698.86,-1609 3688.86,-1605.5 3688.86,-1612.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;fn scalars_summing_to_works() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(n in 1usize..10)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut seed = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng.try_fill_bytes(&amp;mut seed...">
<polygon fill="white" stroke="black" points="4332,-3379 4126,-3379 4126,-3343 4332,-3343 4332,-3379"/>
<text text-anchor="middle" x="4229" y="-3357.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to_works</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M4277.72,-3342.98C4328.91,-3324.45 4413,-3296.34 4488,-3282 4720.56,-3237.52 4782.23,-3239 5019,-3239 5019,-3239 5019,-3239 5298,-3239 5521.63,-3239 5437.52,-3048.22 5591,-4028 5718.92,-4844.56 5732.14,-11247.09 5732.96,-11727.5"/>
<polygon fill="blue" stroke="blue" points="5729.46,-11727.74 5732.97,-11737.74 5736.46,-11727.73 5729.46,-11727.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<g id="a_node275"><a xlink:title="fn scalars_summing_to&lt;R: Rng + CryptoRng&gt;(n: NonZeroUsize, s: &amp;Scalar, rng: &amp;mut R) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;let mut v: Vec&lt;Scalar&gt; = repeat_with(|| random_scalar(rng)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.take(n.get() &#45; 1) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4736,-3453 4578,-3453 4578,-3417 4736,-3417 4736,-3453"/>
<text text-anchor="middle" x="4657" y="-3431.3" font-family="Helvetica,sans-Serif" font-size="14.00">scalars_summing_to</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/scalars_summing_to_works().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4332.28,-3370.38C4372.28,-3374.73 4418.44,-3380.6 4460,-3388 4499.68,-3395.06 4543.33,-3405.28 4579.34,-3414.39"/>
<polygon fill="blue" stroke="blue" points="4578.73,-3417.85 4589.29,-3416.93 4580.46,-3411.06 4578.73,-3417.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<g id="a_node270"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create(&amp;mut self, req_bytes: &amp;[u8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.versions.clear(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4258.5,-3571 4199.5,-3571 4199.5,-3535 4258.5,-3535 4258.5,-3571"/>
<text text-anchor="middle" x="4229" y="-3549.3" font-family="Helvetica,sans-Serif" font-size="14.00">create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node271"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="4684,-3581 4630,-3581 4630,-3545 4684,-3545 4684,-3581"/>
<text text-anchor="middle" x="4657" y="-3559.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4258.61,-3553.67C4333.76,-3555.44 4536.66,-3560.2 4619.76,-3562.15"/>
<polygon fill="blue" stroke="blue" points="4619.9,-3565.65 4629.98,-3562.39 4620.06,-3558.66 4619.9,-3565.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<g id="a_node279"><a xlink:title=" &#160;&#160;&#160;fn to_ristretto_scalar(b: &amp;[u8]) &#45;&gt; Option&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_canonical_bytes(b.try_into().ok()?).into_option() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5090,-3635 4950,-3635 4950,-3599 5090,-3599 5090,-3635"/>
<text text-anchor="middle" x="5020" y="-3613.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-3566.93C4737.16,-3574.84 4858.43,-3592.98 4939.55,-3605.12"/>
<polygon fill="blue" stroke="blue" points="4939.32,-3608.62 4949.73,-3606.64 4940.35,-3601.7 4939.32,-3608.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node272"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4694,-3635 4620,-3635 4620,-3599 4694,-3599 4694,-3635"/>
<text text-anchor="middle" x="4657" y="-3613.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M4658.44,-3635.34C4662.07,-3768.6 4691.19,-4587.42 4862,-4748 4967.63,-4847.31 5089.48,-4677.81 5186,-4786 5218.08,-4821.96 5177.76,-11686.94 5206,-11726 5210.02,-11731.56 5215.11,-11736.1 5220.83,-11739.82"/>
<polygon fill="blue" stroke="blue" points="5219.15,-11742.89 5229.59,-11744.68 5222.54,-11736.77 5219.15,-11742.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4694.27,-3617C4751.33,-3617 4863.44,-3617 4939.8,-3617"/>
<polygon fill="blue" stroke="blue" points="4939.85,-3620.5 4949.85,-3617 4939.85,-3613.5 4939.85,-3620.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4266.29,-3420.52C4314.9,-3425.9 4401.79,-3428.23 4460,-3388 4482.24,-3372.63 4464.9,-3348.04 4488,-3334 4554.64,-3293.49 5136.64,-3347.61 5186,-3408 5222.81,-3453.03 5171.23,-11736.38 5206,-11783 5218.01,-11799.11 5239.31,-11805.97 5258.16,-11808.75"/>
<polygon fill="blue" stroke="blue" points="5257.98,-11812.25 5268.32,-11809.9 5258.78,-11805.29 5257.98,-11812.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M4266.14,-3421.35C4315.37,-3427.86 4403.81,-3431.67 4460,-3388 4487.44,-3366.68 4459.36,-3334.69 4488,-3315 4551.93,-3271.05 5128.72,-3279.68 5186,-3332 5426.86,-3551.99 5364.4,-4460.62 5387.5,-4786 5390.94,-4834.47 5387.13,-11743.91 5416,-11783 5423.97,-11793.79 5436.23,-11800.39 5449.03,-11804.39"/>
<polygon fill="blue" stroke="blue" points="5448.3,-11807.82 5458.87,-11806.97 5450.08,-11801.05 5448.3,-11807.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<g id="a_node277"><a xlink:title="fn random_scalar&lt;R: Rng + CryptoRng&gt;(r: &amp;mut R) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;r.fill_bytes(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) }">
<polygon fill="white" stroke="black" points="5079.5,-3453 4960.5,-3453 4960.5,-3417 5079.5,-3417 5079.5,-3453"/>
<text text-anchor="middle" x="5020" y="-3431.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266,-3412.54C4358.88,-3406.65 4614.12,-3393.25 4826,-3408 4867.34,-3410.88 4913.3,-3417.18 4950,-3422.98"/>
<polygon fill="blue" stroke="blue" points="4949.67,-3426.47 4960.1,-3424.59 4950.77,-3419.56 4949.67,-3426.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<g id="a_node280"><a xlink:title="fn auth_commitments( &#160;&#160;&#160;&#160;server_ids: &amp;[u64], &#160;&#160;&#160;&#160;input: &amp;[u8; 64], &#160;&#160;&#160;&#160;auth_pt: &amp;RistrettoPoint, ) &#45;&gt; Vec&lt;(Scalar, RistrettoPoint)&gt; { &#160;&#160;&#160;&#160;let k_auth = auth_secret(input, auth_pt); &#160;&#160;&#160;&#160;server_ids &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4732,-3507 4582,-3507 4582,-3471 4732,-3471 4732,-3507"/>
<text text-anchor="middle" x="4657" y="-3485.3" font-family="Helvetica,sans-Serif" font-size="14.00">auth_commitments</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.28,-3421.85C4316.17,-3431.23 4408.8,-3448.42 4488,-3462 4515.24,-3466.67 4545,-3471.53 4571.81,-3475.82"/>
<polygon fill="blue" stroke="blue" points="4571.5,-3479.32 4581.93,-3477.44 4572.61,-3472.4 4571.5,-3479.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node274"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="3848.5,-3507 3705.5,-3507 3705.5,-3471 3848.5,-3471 3848.5,-3507"/>
<text text-anchor="middle" x="3777" y="-3485.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="edge523" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.81,-3499.07C3945.02,-3512.75 4113.71,-3536.75 4189.37,-3547.51"/>
<polygon fill="blue" stroke="blue" points="4189.01,-3550.99 4199.41,-3548.93 4190,-3544.06 4189.01,-3550.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge524" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.49,-3507.05C3853.64,-3528.76 3928.89,-3564.24 3998,-3580 4222.55,-3631.2 4500.8,-3624.76 4609.47,-3619.67"/>
<polygon fill="blue" stroke="blue" points="4609.93,-3623.15 4619.75,-3619.17 4609.59,-3616.16 4609.93,-3623.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge527" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.68,-3474.57C3891.74,-3466.01 3947.93,-3455.26 3998,-3447 4061.42,-3436.54 4135.06,-3426.7 4181.59,-3420.76"/>
<polygon fill="blue" stroke="blue" points="4182.18,-3424.21 4191.66,-3419.48 4181.3,-3417.27 4182.18,-3424.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new(). -->
<g id="edge525" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.81,-3489C3946,-3489 4117.16,-3489 4191.66,-3489"/>
<polygon fill="blue" stroke="blue" points="4191.93,-3492.5 4201.93,-3489 4191.93,-3485.5 4191.93,-3492.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new(). -->
<g id="edge526" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.7,-3478.89C3891.76,-3473.08 3947.95,-3466.15 3998,-3462 4049.21,-3457.76 4414.02,-3464.93 4460,-3442 4477.52,-3433.26 4471.6,-3418.68 4488,-3408 4528.54,-3381.6 4583.89,-3369.84 4619.79,-3364.74"/>
<polygon fill="blue" stroke="blue" points="4620.37,-3368.19 4629.82,-3363.41 4619.45,-3361.25 4620.37,-3368.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge531" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4736.33,-3435C4800.04,-3435 4889.07,-3435 4950.09,-3435"/>
<polygon fill="blue" stroke="blue" points="4950.39,-3438.5 4960.39,-3435 4950.39,-3431.5 4950.39,-3438.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to(). -->
<g id="edge595" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 scalars_summing_to().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-3485.7C4316.61,-3478.02 4469.52,-3458.64 4567.76,-3446.19"/>
<polygon fill="blue" stroke="blue" points="4568.2,-3449.66 4577.68,-3444.93 4567.32,-3442.71 4568.2,-3449.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge594" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.19,-3494.65C4340.11,-3511.83 4609.46,-3559.6 4826,-3516 4881.01,-3504.92 4939.87,-3477.74 4977.93,-3457.91"/>
<polygon fill="blue" stroke="blue" points="4979.94,-3460.81 4987.14,-3453.04 4976.67,-3454.62 4979.94,-3460.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments(). -->
<g id="edge593" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[Backup4]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-3489C4317.42,-3489 4473.63,-3489 4571.67,-3489"/>
<polygon fill="blue" stroke="blue" points="4571.86,-3492.5 4581.86,-3489 4571.86,-3485.5 4571.86,-3492.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge694" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5047.5,-3453.16C5083.79,-3479.34 5148.68,-3531.06 5186,-3590 5499.51,-4085.2 5493.95,-4266.99 5591,-4845 5713.12,-5572.32 5731.64,-11275.01 5732.92,-11727.52"/>
<polygon fill="blue" stroke="blue" points="5729.42,-11727.78 5732.95,-11737.77 5736.42,-11727.76 5729.42,-11727.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar(). -->
<g id="edge803" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 random_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.23,-3365.78C4717.32,-3371.86 4775.96,-3382.79 4826,-3393 4867.31,-3401.43 4913.45,-3411.45 4950.26,-3419.59"/>
<polygon fill="blue" stroke="blue" points="4949.86,-3423.08 4960.38,-3421.83 4951.38,-3416.25 4949.86,-3423.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes(). -->
<g id="edge817" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/to_ristretto_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_canonical_bytes().</title>
<path fill="none" stroke="blue" d="M5025.29,-3635.27C5047.83,-3732.21 5152.69,-4196.52 5186,-4583 5190.33,-4633.19 5175.87,-11796.63 5206,-11837 5206.38,-11837.51 5206.77,-11838.01 5207.17,-11838.5"/>
<polygon fill="blue" stroke="blue" points="5204.82,-11841.1 5214.36,-11845.71 5209.77,-11836.16 5204.82,-11841.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes(). -->
<g id="edge853" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 auth_commitments().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]hash_from_bytes().</title>
<path fill="none" stroke="blue" d="M4732.19,-3490.65C4766.24,-3495.57 4803.88,-3507.74 4826,-3536 4907.13,-3639.64 4771.57,-4624.37 4862,-4720 4911.66,-4772.51 5137.07,-4694.81 5186,-4748 5218.81,-4783.66 5177.61,-11686.73 5206,-11726 5210.02,-11731.56 5215.11,-11736.11 5220.83,-11739.82"/>
<polygon fill="blue" stroke="blue" points="5219.15,-11742.89 5229.59,-11744.68 5222.54,-11736.77 5219.15,-11742.89"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node281"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2639.5,-3824 2564.5,-3824 2564.5,-3788 2639.5,-3788 2639.5,-3824"/>
<text text-anchor="middle" x="2602" y="-3802.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node283"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="3329.5,-3824 3186.5,-3824 3186.5,-3788 3329.5,-3788 3329.5,-3824"/>
<text text-anchor="middle" x="3258" y="-3802.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.56,-3806C2742.01,-3806 3033.7,-3806 3176.39,-3806"/>
<polygon fill="blue" stroke="blue" points="3176.41,-3809.5 3186.41,-3806 3176.41,-3802.5 3176.41,-3809.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<g id="a_node282"><a xlink:title="pub fn username_hash(username: &amp;str) &#45;&gt; Result&lt;[u8; 32], UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username).map(|un| un.hash()) }">
<polygon fill="white" stroke="black" points="3840,-3878 3714,-3878 3714,-3842 3840,-3842 3840,-3878"/>
<text text-anchor="middle" x="3777" y="-3856.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_hash().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3840.38,-3867.8C3886.76,-3877.19 3947.15,-3897.83 3978,-3943 4007.9,-3986.78 3962.35,-4857.76 3998,-4897 4046.56,-4950.45 4140.21,-4942.19 4191.77,-4932.5"/>
<polygon fill="blue" stroke="blue" points="4192.67,-4935.89 4201.79,-4930.49 4191.3,-4929.02 4192.67,-4935.89"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.53,-3813.37C3427.61,-3823.61 3604.27,-3842.06 3703.42,-3852.42"/>
<polygon fill="blue" stroke="blue" points="3703.34,-3855.93 3713.65,-3853.49 3704.07,-3848.97 3703.34,-3855.93"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node284"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="3841,-3824 3713,-3824 3713,-3788 3841,-3788 3841,-3824"/>
<text text-anchor="middle" x="3777" y="-3802.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.53,-3806C3427.34,-3806 3603.31,-3806 3702.61,-3806"/>
<polygon fill="blue" stroke="blue" points="3702.86,-3809.5 3712.86,-3806 3702.86,-3802.5 3702.86,-3809.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3302.64,-3787.91C3362.88,-3764.02 3475.47,-3723.19 3576,-3708 3664.33,-3694.66 3908.23,-3652.21 3978,-3708 4154.73,-3849.3 4215.51,-4627.68 4226.2,-4787.37"/>
<polygon fill="blue" stroke="blue" points="4222.73,-4788.03 4226.88,-4797.78 4229.72,-4787.57 4222.73,-4788.03"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3326.73,-3787.97C3487.84,-3746.95 3887.23,-3656.87 3978,-3746 4021.49,-3788.71 3957.08,-4797.83 3998,-4843 4046.49,-4896.52 4140.17,-4888.23 4191.75,-4878.52"/>
<polygon fill="blue" stroke="blue" points="4192.66,-4881.9 4201.78,-4876.51 4191.29,-4875.04 4192.66,-4881.9"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.69,-3797.66C3501.91,-3778.12 3932.5,-3734.3 3978,-3779 4022.32,-3822.53 3956.3,-4850.95 3998,-4897 4046.48,-4950.53 4140.16,-4942.23 4191.74,-4932.52"/>
<polygon fill="blue" stroke="blue" points="4192.66,-4935.9 4201.78,-4930.51 4191.29,-4929.04 4192.66,-4935.9"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge820" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.01,-3795.28C3886.16,-3791.56 3944.65,-3795.6 3978,-3833 4015.35,-3874.89 3960.29,-4801.44 3998,-4843 4046.53,-4896.48 4140.19,-4888.2 4191.76,-4878.51"/>
<polygon fill="blue" stroke="blue" points="4192.67,-4881.89 4201.79,-4876.5 4191.3,-4875.03 4192.67,-4881.89"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge821" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.02,-3795.27C3886.17,-3791.55 3944.67,-3795.59 3978,-3833 4017.32,-3877.15 3958.29,-4853.2 3998,-4897 4046.5,-4950.51 4140.18,-4942.22 4191.75,-4932.51"/>
<polygon fill="blue" stroke="blue" points="4192.66,-4935.9 4201.78,-4930.51 4191.29,-4929.03 4192.66,-4935.9"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4278.25,-4809.01C4439.57,-4788.7 4962.59,-4748.3 5186,-5039 5210.87,-5071.37 5203.45,-10876.26 5206,-10917 5223.37,-11194.39 5275.46,-11527.4 5291.35,-11624.91"/>
<polygon fill="blue" stroke="blue" points="5287.91,-11625.56 5292.98,-11634.87 5294.82,-11624.43 5287.91,-11625.56"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits(). -->
<g id="node286" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().</title>
<g id="a_node286"><a xlink:title=" &#160;&#160;&#160;fn nicknames_exceeding_soft_limits() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39; 42&#39; , NicknameLimits::default()).expect(&#39; valid&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::from_parts(&#39; abcd&#39; , &#39;...">
<polygon fill="white" stroke="black" points="3900,-5158 3654,-5158 3654,-5122 3900,-5122 3900,-5158"/>
<text text-anchor="middle" x="3777" y="-5136.3" font-family="Helvetica,sans-Serif" font-size="14.00">nicknames_exceeding_soft_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/nicknames_exceeding_soft_limits().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3900.15,-5126.55C3925.98,-5122.85 3952.99,-5118.36 3978,-5113 4046.26,-5098.38 4123,-5074.52 4173.24,-5057.86"/>
<polygon fill="blue" stroke="blue" points="4174.54,-5061.11 4182.92,-5054.63 4172.33,-5054.47 4174.54,-5061.11"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="node287" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<g id="a_node287"><a xlink:title="fn make_scalars(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Vec&lt;Scalar&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Ok(vec![ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(nickname, discriminator)?, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname_scalar(nickname)?, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5075,-5084 4965,-5084 4965,-5048 5075,-5048 5075,-5084"/>
<text text-anchor="middle" x="5020" y="-5062.3" font-family="Helvetica,sans-Serif" font-size="14.00">make_scalars</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="node294" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<g id="a_node294"><a xlink:title="fn username_sha_scalar(nickname: &amp;str, discriminator: u64) &#45;&gt; Result&lt;Scalar, UsernameError&gt; { &#160;&#160;&#160;&#160;let mut hash = Sha512::new(); &#160;&#160;&#160;&#160;hash.update(nickname.as_bytes()); &#160;&#160;&#160;&#160;hash.update([0x00]); &#160;&#160;&#160;&#160;hash....">
<polygon fill="white" stroke="black" points="5379.5,-5151 5214.5,-5151 5214.5,-5115 5379.5,-5115 5379.5,-5151"/>
<text text-anchor="middle" x="5297" y="-5129.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_sha_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5075.26,-5079.11C5107.45,-5086.9 5149.06,-5096.99 5186,-5106 5194.7,-5108.12 5203.78,-5110.34 5212.84,-5112.56"/>
<polygon fill="blue" stroke="blue" points="5212.09,-5115.98 5222.64,-5114.96 5213.76,-5109.18 5212.09,-5115.98"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node288" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node288"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3922.5,-4888 3631.5,-4888 3631.5,-4852 3922.5,-4852 3922.5,-4888"/>
<text text-anchor="middle" x="3777" y="-4866.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.66,-4852.14C3947.77,-4849.07 3973.64,-4845.92 3998,-4843 4056.45,-4835.98 4123.28,-4828.16 4169.79,-4822.75"/>
<polygon fill="blue" stroke="blue" points="4170.45,-4826.2 4179.98,-4821.56 4169.64,-4819.24 4170.45,-4826.2"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.55,-4870C4017.15,-4870 4133.6,-4870 4191.59,-4870"/>
<polygon fill="blue" stroke="blue" points="4191.72,-4873.5 4201.72,-4870 4191.72,-4866.5 4191.72,-4873.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3922.66,-4887.86C3947.77,-4890.93 3973.64,-4894.08 3998,-4897 4066.51,-4905.23 4146.54,-4914.56 4191.85,-4919.82"/>
<polygon fill="blue" stroke="blue" points="4191.44,-4923.29 4201.78,-4920.97 4192.25,-4916.34 4191.44,-4923.29"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator(). -->
<g id="node289" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().</title>
<g id="a_node289"><a xlink:title=" &#160;&#160;&#160;fn no_discriminator() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::new(&#39; no_discriminator&#39; ).expect_err(&#39; not a valid username&#39; ), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;UsernameError::MissingSeparator &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3843,-4996 3711,-4996 3711,-4960 3843,-4960 3843,-4996"/>
<text text-anchor="middle" x="3777" y="-4974.3" font-family="Helvetica,sans-Serif" font-size="14.00">no_discriminator</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/no_discriminator().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.43,-4970.15C3939.7,-4958.6 4116.26,-4937.41 4191.97,-4928.32"/>
<polygon fill="blue" stroke="blue" points="4192.46,-4931.79 4201.97,-4927.12 4191.62,-4924.84 4192.46,-4931.79"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.21,-4864.09C4303.75,-4855.06 4404.43,-4844 4460,-4897 4515.09,-4949.55 4462.05,-4994.42 4488,-5066 4589.04,-5344.69 4747.27,-5355.21 4826,-5641 4868.9,-5796.73 4808.2,-11303.69 4862,-11456 4887.5,-11528.19 4951.53,-11593.76 4989.48,-11628.02"/>
<polygon fill="blue" stroke="blue" points="4987.36,-11630.81 4997.16,-11634.84 4992.01,-11625.58 4987.36,-11630.81"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="node293" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<g id="a_node293"><a xlink:title=" &#160;&#160;&#160;fn from_parts_without_soft_limit( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;nickname: &amp;str, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;discriminator: &amp;str, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;validate_prefix(nickname)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let discriminator = valida...">
<polygon fill="white" stroke="black" points="4766.5,-5057 4547.5,-5057 4547.5,-5021 4766.5,-5021 4766.5,-5057"/>
<text text-anchor="middle" x="4657" y="-5035.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_parts_without_soft_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.01,-4931.02C4319.05,-4948.04 4482.01,-4992.03 4579.37,-5018.31"/>
<polygon fill="blue" stroke="blue" points="4578.6,-5021.73 4589.16,-5020.96 4580.42,-5014.97 4578.6,-5021.73"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames(). -->
<g id="node292" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().</title>
<g id="a_node292"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for username in [&#39; He110.01&#39; , &#39; usr.999999999&#39; , &#39; _identifier.42&#39; , &#39; LOUD.700&#39; ] { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let parsed = Username::new(username).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_ = pars...">
<polygon fill="white" stroke="black" points="3843.5,-4942 3710.5,-4942 3710.5,-4906 3843.5,-4906 3843.5,-4942"/>
<text text-anchor="middle" x="3777" y="-4920.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3843.92,-4924C3940.01,-4924 4115.38,-4924 4191.32,-4924"/>
<polygon fill="blue" stroke="blue" points="4191.78,-4927.5 4201.78,-4924 4191.78,-4920.5 4191.78,-4927.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/make_scalars().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4766.8,-5047.14C4828.11,-5051.72 4902.6,-5057.29 4954.66,-5061.19"/>
<polygon fill="blue" stroke="blue" points="4954.53,-5064.69 4964.77,-5061.94 4955.06,-5057.71 4954.53,-5064.69"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash(). -->
<g id="edge508" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_hash().</title>
<path fill="none" stroke="blue" d="M5299.3,-5151.27C5308.76,-5285.3 5367.26,-6130.46 5387.5,-6819 5388.51,-6853.46 5395.5,-11755.29 5416,-11783 5423.98,-11793.78 5436.24,-11800.38 5449.04,-11804.38"/>
<polygon fill="blue" stroke="blue" points="5448.32,-11807.81 5458.88,-11806.96 5450.09,-11801.04 5448.32,-11807.81"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators(). -->
<g id="node295" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().</title>
<g id="a_node295"><a xlink:title=" &#160;&#160;&#160;fn invalid_discriminators() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (discriminator, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::DiscriminatorCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; 0&#39; , UsernameError::DiscriminatorCannot...">
<polygon fill="white" stroke="black" points="3861,-5104 3693,-5104 3693,-5068 3861,-5068 3861,-5104"/>
<text text-anchor="middle" x="3777" y="-5082.3" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_discriminators</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge565" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.03,-5092.77C3900.06,-5091.76 3945.12,-5084.06 3978,-5059 3996.05,-5045.24 3981.65,-5027.75 3998,-5012 4052.61,-4959.37 4141.96,-4937.43 4191.7,-4928.91"/>
<polygon fill="blue" stroke="blue" points="4192.37,-4932.35 4201.68,-4927.29 4191.25,-4925.44 4192.37,-4932.35"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge564" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_discriminators().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-5077.32C3951.84,-5067.84 4094.71,-5052.92 4172.7,-5044.78"/>
<polygon fill="blue" stroke="blue" points="4173.21,-5048.24 4182.8,-5043.72 4172.49,-5041.28 4173.21,-5048.24"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar(). -->
<g id="node296" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().</title>
<g id="a_node296"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_should_produce_scalar() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_sha_scalar(&amp;nickname, discriminator).u...">
<polygon fill="white" stroke="black" points="5168.5,-5151 4871.5,-5151 4871.5,-5115 5168.5,-5115 5168.5,-5151"/>
<text text-anchor="middle" x="5020" y="-5129.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_should_produce_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar(). -->
<g id="edge603" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_should_produce_scalar().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/username_sha_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5168.56,-5133C5180.68,-5133 5192.7,-5133 5204.23,-5133"/>
<polygon fill="blue" stroke="blue" points="5204.23,-5136.5 5214.23,-5133 5204.23,-5129.5 5204.23,-5136.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node297" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node297"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="3904,-4834 3650,-4834 3650,-4798 3904,-4798 3904,-4834"/>
<text text-anchor="middle" x="3777" y="-4812.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge610" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.25,-4816C3991.24,-4816 4102.8,-4816 4169.66,-4816"/>
<polygon fill="blue" stroke="blue" points="4170,-4819.5 4180,-4816 4170,-4812.5 4170,-4819.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge611" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.21,-4831.61C3934.9,-4835.37 3967.63,-4839.35 3998,-4843 4066.51,-4851.23 4146.54,-4860.56 4191.85,-4865.82"/>
<polygon fill="blue" stroke="blue" points="4191.44,-4869.29 4201.78,-4866.97 4192.25,-4862.34 4191.44,-4869.29"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge612" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3904.23,-4812.5C3930.8,-4817.1 3957.08,-4826.25 3978,-4843 3997.98,-4859 3977.88,-4881.18 3998,-4897 4053.94,-4941 4142.48,-4937.06 4191.8,-4930.44"/>
<polygon fill="blue" stroke="blue" points="4192.6,-4933.86 4201.99,-4928.96 4191.59,-4926.93 4192.6,-4933.86"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit(). -->
<g id="edge720" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts_without_soft_limit().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4275.19,-5039C4336.98,-5039 4450.09,-5039 4537.04,-5039"/>
<polygon fill="blue" stroke="blue" points="4537.24,-5042.5 4547.24,-5039 4537.24,-5035.5 4537.24,-5042.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames(). -->
<g id="node299" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().</title>
<g id="a_node299"><a xlink:title=" &#160;&#160;&#160;fn invalid_nicknames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (nickname, expected_error) in [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; &#39; , UsernameError::NicknameCannotBeEmpty), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(&#39; ab🦀d&#39; , UsernameError::BadNicknameCharacter), &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3849,-5050 3705,-5050 3705,-5014 3849,-5014 3849,-5050"/>
<text text-anchor="middle" x="3777" y="-5028.3" font-family="Helvetica,sans-Serif" font-size="14.00">invalid_nicknames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new(). -->
<g id="edge852" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3849.36,-5025.5C3887.78,-5021.22 3935.81,-5014.6 3978,-5005 4055.87,-4987.28 4144.14,-4955.92 4192.18,-4937.86"/>
<polygon fill="blue" stroke="blue" points="4193.68,-4941.03 4201.8,-4934.22 4191.21,-4934.48 4193.68,-4941.03"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts(). -->
<g id="edge851" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/invalid_nicknames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]from_parts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3849.3,-5033.11C3939.02,-5034.5 4091.19,-5036.87 4172.65,-5038.14"/>
<polygon fill="blue" stroke="blue" points="4172.65,-5041.64 4182.7,-5038.3 4172.75,-5034.64 4172.65,-5041.64"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node300" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node300"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="4287.5,-7125 4170.5,-7125 4170.5,-7089 4287.5,-7089 4287.5,-7125"/>
<text text-anchor="middle" x="4229" y="-7103.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node310" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node310"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4702.5,-7480 4611.5,-7480 4611.5,-7444 4702.5,-7444 4702.5,-7480"/>
<text text-anchor="middle" x="4657" y="-7458.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.53,-7095.87C4339.89,-7089.38 4415.58,-7089.72 4460,-7134 4533.56,-7207.32 4430.57,-7279.46 4488,-7366 4514.46,-7405.87 4563.48,-7431.09 4601.76,-7445.62"/>
<polygon fill="blue" stroke="blue" points="4600.65,-7448.94 4611.25,-7449.09 4603.06,-7442.37 4600.65,-7448.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node313" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node313"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="4696.5,-7534 4617.5,-7534 4617.5,-7498 4696.5,-7498 4696.5,-7534"/>
<text text-anchor="middle" x="4657" y="-7512.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.7,-7095.49C4340.37,-7088.67 4416.43,-7088.74 4460,-7134 4514.88,-7191.01 4434.34,-7430.83 4488,-7489 4517.57,-7521.05 4568.9,-7525.12 4607.06,-7522.81"/>
<polygon fill="blue" stroke="blue" points="4607.75,-7526.27 4617.45,-7522.01 4607.21,-7519.29 4607.75,-7526.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node314" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node314"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="4702.5,-7588 4611.5,-7588 4611.5,-7552 4702.5,-7552 4702.5,-7588"/>
<text text-anchor="middle" x="4657" y="-7566.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4287.56,-7095.42C4340.31,-7088.5 4416.6,-7088.44 4460,-7134 4522.84,-7199.96 4426.58,-7475.72 4488,-7543 4515.95,-7573.61 4563.72,-7578.78 4601.2,-7577.2"/>
<polygon fill="blue" stroke="blue" points="4601.7,-7580.67 4611.47,-7576.59 4601.28,-7573.69 4601.7,-7580.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node301" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node301"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="4301,-7179 4157,-7179 4157,-7143 4301,-7143 4301,-7179"/>
<text text-anchor="middle" x="4229" y="-7157.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge659" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4301.13,-7174.57C4353.07,-7179.95 4420.96,-7176.75 4460,-7134 4500.32,-7089.84 4445.17,-6099.73 4488,-6058 4543.55,-6003.88 5131.06,-6003.26 5186,-6058 5214.16,-6086.06 5182.21,-11751.14 5206,-11783 5218.02,-11799.1 5239.32,-11805.96 5258.17,-11808.74"/>
<polygon fill="blue" stroke="blue" points="5257.99,-11812.24 5268.32,-11809.9 5258.78,-11805.29 5257.99,-11812.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge660" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.01,-7171.43C4352.36,-7182.68 4419.56,-7205.65 4460,-7252 4494.3,-7291.31 4456.58,-7324.35 4488,-7366 4516.41,-7403.67 4564.22,-7428.9 4601.58,-7444"/>
<polygon fill="blue" stroke="blue" points="4600.74,-7447.43 4611.33,-7447.81 4603.29,-7440.91 4600.74,-7447.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node311" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node311"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="4690,-7750 4624,-7750 4624,-7714 4690,-7714 4690,-7750"/>
<text text-anchor="middle" x="4657" y="-7728.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge658" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.05,-7168.96C4354.02,-7178.95 4423.3,-7201.44 4460,-7252 4519.25,-7333.62 4420.25,-7630.29 4488,-7705 4519.02,-7739.2 4574.79,-7741.71 4613.52,-7738.47"/>
<polygon fill="blue" stroke="blue" points="4614.36,-7741.9 4623.96,-7737.42 4613.66,-7734.94 4614.36,-7741.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge663" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.08,-7169.71C4353.52,-7180.09 4422.09,-7202.74 4460,-7252 4524.68,-7336.06 4414.58,-7412.45 4488,-7489 4518.09,-7520.38 4569.1,-7524.6 4607.04,-7522.52"/>
<polygon fill="blue" stroke="blue" points="4607.64,-7525.99 4617.37,-7521.79 4607.14,-7519.01 4607.64,-7525.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge661" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.11,-7169.42C4353.75,-7179.66 4422.57,-7202.24 4460,-7252 4499.06,-7303.91 4443.54,-7495.63 4488,-7543 4516.27,-7573.12 4563.79,-7578.39 4601.09,-7576.97"/>
<polygon fill="blue" stroke="blue" points="4601.52,-7580.45 4611.32,-7576.41 4601.14,-7573.47 4601.52,-7580.45"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node317" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node317"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="4684,-7642 4630,-7642 4630,-7606 4684,-7606 4684,-7642"/>
<text text-anchor="middle" x="4657" y="-7620.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge665" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.05,-7169.22C4353.84,-7179.34 4422.88,-7201.88 4460,-7252 4505.78,-7313.81 4435.78,-7540.52 4488,-7597 4521,-7632.69 4580.97,-7633.66 4619.62,-7629.79"/>
<polygon fill="blue" stroke="blue" points="4620.39,-7633.23 4629.92,-7628.6 4619.58,-7626.27 4620.39,-7633.23"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="node320" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<g id="a_node320"><a xlink:title=" &#160;&#160;&#160;pub fn from_blinding_scalar(scalar: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_inv: scalar.invert(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4737,-7696 4577,-7696 4577,-7660 4737,-7660 4737,-7696"/>
<text text-anchor="middle" x="4657" y="-7674.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_blinding_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge662" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.2,-7169.1C4354.07,-7179.16 4423.15,-7201.68 4460,-7252 4512.51,-7323.71 4428.02,-7585.41 4488,-7651 4507.79,-7672.65 4537.51,-7681.56 4566.47,-7684.37"/>
<polygon fill="blue" stroke="blue" points="4566.43,-7687.87 4576.66,-7685.12 4566.94,-7680.89 4566.43,-7687.87"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="node333" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<g id="a_node333"><a xlink:title=" &#160;&#160;&#160;fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut scalar_bytes = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.squeeze_and_ratchet_into(&amp;mut scalar_bytes); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;scalar_bytes) &#160;&#160;...">
<polygon fill="white" stroke="black" points="5547,-6784 5460,-6784 5460,-6748 5547,-6748 5547,-6784"/>
<text text-anchor="middle" x="5503.5" y="-6762.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge664" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4301.15,-7174.58C4353.09,-7179.97 4420.99,-7176.77 4460,-7134 4501.98,-7087.97 4449.39,-6061.89 4488,-6013 4682.2,-5767.12 4924.48,-5741.43 5186,-5914 5480.36,-6108.24 5501.98,-6612.74 5502.72,-6737.69"/>
<polygon fill="blue" stroke="blue" points="5499.23,-6737.95 5502.74,-6747.95 5506.23,-6737.94 5499.23,-6737.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node302" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node302"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3814.5,-7127 3739.5,-7127 3739.5,-7091 3814.5,-7091 3814.5,-7127"/>
<text text-anchor="middle" x="3777" y="-7105.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge857" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.83,-7108.84C3890.37,-7108.5 4063.85,-7107.73 4160.27,-7107.3"/>
<polygon fill="blue" stroke="blue" points="4160.5,-7110.8 4170.49,-7107.26 4160.47,-7103.8 4160.5,-7110.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge859" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.83,-7113.26C3886.9,-7121.58 4048.11,-7140.21 4146.5,-7151.58"/>
<polygon fill="blue" stroke="blue" points="4146.37,-7155.09 4156.71,-7152.76 4147.17,-7148.14 4146.37,-7155.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="node303" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<g id="a_node303"><a xlink:title="fn attribute_key_inversion(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let key_pair = KeyPair::&lt;ExampleDomain&gt;::derive_from(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; KeyPair...">
<polygon fill="white" stroke="black" points="4746,-5689 4568,-5689 4568,-5653 4746,-5653 4746,-5689"/>
<text text-anchor="middle" x="4657" y="-5667.3" font-family="Helvetica,sans-Serif" font-size="14.00">attribute_key_inversion</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion(). -->
<g id="edge858" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3796.29,-7090.88C3837.82,-7048.33 3938.7,-6936.87 3978,-6821 4008.37,-6731.46 3961.88,-6483.38 3998,-6396 4137.4,-6058.81 4505.66,-5777.35 4620.97,-5695.23"/>
<polygon fill="blue" stroke="blue" points="4623.32,-5697.86 4629.46,-5689.23 4619.27,-5692.15 4623.32,-5697.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="node304" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<g id="a_node304"><a xlink:title=" &#160;&#160;&#160;pub fn inverse_of&lt;D2: Domain&gt;(other: &amp;KeyPair&lt;D2&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_ne!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D2::ID, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; You must provide a new domain for an inverse key&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="5064,-7004 4976,-7004 4976,-6968 5064,-6968 5064,-7004"/>
<text text-anchor="middle" x="5020" y="-6982.3" font-family="Helvetica,sans-Serif" font-size="14.00">inverse_of</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4746.38,-5678.34C4776.4,-5685.51 4807.1,-5698.99 4826,-5724 4908.57,-5833.25 4773.19,-6851.75 4862,-6956 4886.9,-6985.22 4930.73,-6991.62 4965.77,-6991.33"/>
<polygon fill="blue" stroke="blue" points="4965.96,-6994.83 4975.86,-6991.07 4965.77,-6987.83 4965.96,-6994.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="node305" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<g id="a_node305"><a xlink:title=" &#160;&#160;&#160;pub fn derive_from(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a1 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a2 = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_scalars(a1, a2) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5069.5,-7058 4970.5,-7058 4970.5,-7022 5069.5,-7022 5069.5,-7058"/>
<text text-anchor="middle" x="5020" y="-7036.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attribute_key_inversion().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4746.4,-5678.33C4776.42,-5685.5 4807.11,-5698.98 4826,-5724 4912.32,-5838.36 4768.15,-6904.74 4862,-7013 4885.72,-7040.37 4926.26,-7046.8 4960.2,-7046.56"/>
<polygon fill="blue" stroke="blue" points="4960.59,-7050.05 4970.49,-7046.28 4960.4,-7043.05 4960.59,-7050.05"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge473" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5064.15,-6979.31C5102.47,-6976.1 5156.8,-6978.77 5186,-7013 5229,-7063.4 5166.34,-11729.93 5206,-11783 5218.03,-11799.1 5239.32,-11805.95 5258.18,-11808.74"/>
<polygon fill="blue" stroke="blue" points="5257.99,-11812.24 5268.33,-11809.9 5258.79,-11805.28 5257.99,-11812.24"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge517" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5069.66,-7044.52C5148.76,-7048.92 5304.73,-7044.83 5387.5,-6956 5429.9,-6910.5 5380.21,-6869.87 5416,-6819 5424.81,-6806.48 5437.61,-6796.35 5450.68,-6788.43"/>
<polygon fill="blue" stroke="blue" points="5452.75,-6791.28 5459.72,-6783.3 5449.3,-6785.19 5452.75,-6791.28"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="node306" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<g id="a_node306"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn credential_core(&amp;self, M: &amp;[RistrettoPoint], sho: &amp;mut dyn ShoApi) &#45;&gt; Credential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; more than {NUM_SUPPORTED...">
<polygon fill="white" stroke="black" points="5080.5,-6867 4959.5,-6867 4959.5,-6831 5080.5,-6831 5080.5,-6867"/>
<text text-anchor="middle" x="5020" y="-6845.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5080.52,-6838.74C5175.38,-6822.39 5359.31,-6790.68 5449.72,-6775.1"/>
<polygon fill="blue" stroke="blue" points="5450.49,-6778.52 5459.75,-6773.37 5449.3,-6771.62 5450.49,-6778.52"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="node307" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<g id="a_node307"><a xlink:title=" &#160;&#160;&#160;fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ShoHmacSha256::new(b&#39; Signal_ZKCredential_CredentialPrivateKey_generate_20230410&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho.absorb_an...">
<polygon fill="white" stroke="black" points="5543,-6867 5464,-6867 5464,-6831 5543,-6831 5543,-6867"/>
<text text-anchor="middle" x="5503.5" y="-6845.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5503.5,-6830.76C5503.5,-6818.63 5503.5,-6806.49 5503.5,-6794.35"/>
<polygon fill="blue" stroke="blue" points="5507,-6794.16 5503.5,-6784.16 5500,-6794.16 5507,-6794.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="node308" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<g id="a_node308"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CredentialPrivateKey::generate(randomness).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5336.5,-6867 5257.5,-6867 5257.5,-6831 5336.5,-6831 5336.5,-6867"/>
<text text-anchor="middle" x="5297" y="-6845.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate(). -->
<g id="edge632" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5336.95,-6849C5370.07,-6849 5417.79,-6849 5453.5,-6849"/>
<polygon fill="blue" stroke="blue" points="5453.7,-6852.5 5463.7,-6849 5453.7,-6845.5 5453.7,-6852.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair(). -->
<g id="node309" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().</title>
<g id="a_node309"><a xlink:title=" &#160;&#160;&#160;fn round_trip_key_pair() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = CredentialKeyPair::generate([0x42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deserialized: Cr...">
<polygon fill="white" stroke="black" points="5096,-6921 4944,-6921 4944,-6885 5096,-6885 5096,-6921"/>
<text text-anchor="middle" x="5020" y="-6899.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge718" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 credentials/tests/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5096.39,-6891.94C5124.59,-6887.47 5156.85,-6881.95 5186,-6876 5206.34,-6871.85 5228.62,-6866.52 5247.77,-6861.71"/>
<polygon fill="blue" stroke="blue" points="5248.65,-6865.1 5257.48,-6859.24 5246.92,-6858.31 5248.65,-6865.1"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4702.72,-7463.2C4846.77,-7466.02 5294.68,-7466.44 5387.5,-7366 5428.81,-7321.3 5384.89,-6871.31 5416,-6819 5424.12,-6805.34 5437.27,-6794.73 5450.88,-6786.71"/>
<polygon fill="blue" stroke="blue" points="5452.75,-6789.67 5459.85,-6781.81 5449.4,-6783.53 5452.75,-6789.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4663.26,-7750.01C4710.43,-7912.67 5062.19,-9145.79 5186,-10173 5225.58,-10501.41 5181.45,-10587.13 5206,-10917 5226.63,-11194.17 5276.48,-11527.33 5291.59,-11624.89"/>
<polygon fill="blue" stroke="blue" points="5288.14,-11625.51 5293.14,-11634.85 5295.06,-11624.44 5288.14,-11625.51"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="node319" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<g id="a_node319"><a xlink:title=" &#160;&#160;&#160;fn generate_weights_for_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;E: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: &amp;[CompressedRistretto], &#160;&#160;&#160;&#160;) &#45;&gt; Vec&lt;Scalar&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert_eq!(E.len()...">
<polygon fill="white" stroke="black" points="5124.5,-7750 4915.5,-7750 4915.5,-7714 5124.5,-7714 5124.5,-7750"/>
<text text-anchor="middle" x="5020" y="-7728.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_weights_for_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4690.04,-7732C4737.83,-7732 4830.18,-7732 4904.9,-7732"/>
<polygon fill="blue" stroke="blue" points="4905.32,-7735.5 4915.32,-7732 4905.32,-7728.5 4905.32,-7735.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="node312" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<g id="a_node312"><a xlink:title=" &#160;&#160;&#160;pub fn for_first_point_of_attribute&lt;D&gt;(key_pair: &amp;crate::attributes::KeyPair&lt;D&gt;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::from_blinding_scalar(key_pair.a1) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4329,-7724 4129,-7724 4129,-7688 4329,-7688 4329,-7724"/>
<text text-anchor="middle" x="4229" y="-7702.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_first_point_of_attribute</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4329.07,-7699.49C4400.89,-7694.77 4497.18,-7688.44 4566.64,-7683.87"/>
<polygon fill="blue" stroke="blue" points="4566.94,-7687.36 4576.69,-7683.21 4566.48,-7680.38 4566.94,-7687.36"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.56,-7517.08C4834.44,-7520.01 5299.47,-7521.67 5387.5,-7414 5429.39,-7362.76 5382.29,-6875.96 5416,-6819 5424.1,-6805.32 5437.23,-6794.7 5450.85,-6786.69"/>
<polygon fill="blue" stroke="blue" points="5452.72,-6789.65 5459.82,-6781.79 5449.36,-6783.51 5452.72,-6789.65"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4702.85,-7564.48C4740.57,-7562.49 4793.43,-7566.31 4826,-7597 4879.68,-7647.58 4844.26,-7687.41 4862,-7759 4993.21,-8288.56 5111.45,-8402.55 5186,-8943 5191.39,-8982.08 5182.34,-11751.44 5206,-11783 5218.05,-11799.08 5239.35,-11805.94 5258.2,-11808.72"/>
<polygon fill="blue" stroke="blue" points="5258.01,-11812.22 5268.34,-11809.88 5258.8,-11805.27 5258.01,-11812.22"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4702.52,-7570.98C4847.48,-7573.12 5301.56,-7571.02 5387.5,-7464 5432.42,-7408.06 5379.57,-6880.8 5416,-6819 5424.07,-6805.31 5437.2,-6794.69 5450.82,-6786.67"/>
<polygon fill="blue" stroke="blue" points="5452.69,-6789.63 5459.79,-6781.77 5449.33,-6783.49 5452.69,-6789.63"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node315" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node315"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="4300.5,-7482 4157.5,-7482 4157.5,-7446 4300.5,-7446 4300.5,-7482"/>
<text text-anchor="middle" x="4229" y="-7460.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge498" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.82,-7463.67C4385.22,-7463.27 4524.43,-7462.62 4601.1,-7462.26"/>
<polygon fill="blue" stroke="blue" points="4601.51,-7465.76 4611.49,-7462.21 4601.47,-7458.76 4601.51,-7465.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge495" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.69,-7451.56C4351.87,-7446.91 4419.01,-7450.55 4460,-7491 4528.27,-7558.38 4421.17,-7636.19 4488,-7705 4519.98,-7737.93 4575.04,-7740.83 4613.37,-7738.03"/>
<polygon fill="blue" stroke="blue" points="4614.06,-7741.48 4623.71,-7737.1 4613.43,-7734.51 4614.06,-7741.48"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge499" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.74,-7472.12C4346.24,-7477.39 4406.62,-7484.46 4460,-7491 4510.27,-7497.16 4567.75,-7504.53 4607.4,-7509.66"/>
<polygon fill="blue" stroke="blue" points="4606.97,-7513.14 4617.34,-7510.95 4607.87,-7506.2 4606.97,-7513.14"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge494" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.72,-7456.1C4349.48,-7454.29 4413.61,-7459.48 4460,-7491 4481.71,-7505.75 4466.61,-7527.79 4488,-7543 4520.65,-7566.22 4565.85,-7572.41 4601.15,-7573.1"/>
<polygon fill="blue" stroke="blue" points="4601.27,-7576.61 4611.29,-7573.16 4601.31,-7569.61 4601.27,-7576.61"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge496" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.56,-7453.03C4350.83,-7449.37 4416.88,-7453.58 4460,-7491 4496.8,-7522.94 4451.88,-7564.29 4488,-7597 4523.72,-7629.36 4582.15,-7631.44 4619.84,-7628.69"/>
<polygon fill="blue" stroke="blue" points="4620.22,-7632.17 4629.88,-7627.81 4619.61,-7625.2 4620.22,-7632.17"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge497" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4300.6,-7467.51C4353.14,-7465.91 4422.07,-7454.09 4460,-7408 4503.89,-7354.66 4449.19,-6844.14 4488,-6787 4580.54,-6650.74 4720.92,-6761.84 4826,-6635 4869.74,-6582.21 4808.16,-6527.45 4862,-6485 4953.7,-6412.7 5290.54,-6419.92 5387.5,-6485 5473.82,-6542.94 5495.39,-6678.39 5500.75,-6737.53"/>
<polygon fill="blue" stroke="blue" points="5497.27,-6737.96 5501.57,-6747.65 5504.25,-6737.4 5497.27,-6737.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node316" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node316"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="4273,-7590 4185,-7590 4185,-7554 4273,-7554 4273,-7590"/>
<text text-anchor="middle" x="4229" y="-7568.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge615" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.25,-7578.38C4322.94,-7583.31 4404.72,-7583.8 4460,-7545 4482.78,-7529.01 4465.57,-7505.47 4488,-7489 4520.4,-7465.21 4565.82,-7459.08 4601.27,-7458.56"/>
<polygon fill="blue" stroke="blue" points="4601.45,-7462.06 4611.45,-7458.56 4601.45,-7455.06 4601.45,-7462.06"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge618" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.4,-7563.87C4324.39,-7556.98 4408.53,-7554.34 4460,-7599 4496.8,-7630.94 4451.88,-7672.29 4488,-7705 4521.82,-7735.63 4576,-7739.13 4613.65,-7737.08"/>
<polygon fill="blue" stroke="blue" points="4614.07,-7740.56 4623.8,-7736.38 4613.58,-7733.58 4614.07,-7740.56"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge614" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.29,-7567.31C4319.55,-7562.21 4395.04,-7553.62 4460,-7545 4510.35,-7538.32 4567.82,-7529.7 4607.44,-7523.6"/>
<polygon fill="blue" stroke="blue" points="4608.02,-7527.05 4617.37,-7522.07 4606.95,-7520.13 4608.02,-7527.05"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge613" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.19,-7571.8C4351.24,-7571.43 4515.63,-7570.66 4601.36,-7570.26"/>
<polygon fill="blue" stroke="blue" points="4601.43,-7573.76 4611.42,-7570.21 4601.4,-7566.76 4601.43,-7573.76"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge616" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.25,-7576.95C4319.49,-7582.27 4394.95,-7591.03 4460,-7599 4515.67,-7605.82 4580.19,-7614.13 4619.54,-7619.24"/>
<polygon fill="blue" stroke="blue" points="4619.33,-7622.74 4629.7,-7620.56 4620.23,-7615.8 4619.33,-7622.74"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge617" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.04,-7565.92C4322.54,-7561.27 4404.13,-7561.04 4460,-7599 4481.71,-7613.75 4466.61,-7635.79 4488,-7651 4510.73,-7667.16 4539.54,-7675.07 4566.86,-7678.63"/>
<polygon fill="blue" stroke="blue" points="4566.51,-7682.11 4576.84,-7679.74 4567.29,-7675.15 4566.51,-7682.11"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge619" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4273.31,-7581.65C4325.83,-7590.5 4413.13,-7595.57 4460,-7545 4511.56,-7489.38 4439.25,-6921.1 4488,-6863 4586.85,-6745.2 4720.51,-6900.9 4826,-6789 4896.37,-6714.35 4784.01,-6627.64 4862,-6561 4906.39,-6523.07 5337.12,-6531.49 5387.5,-6561 5453.47,-6599.63 5484.47,-6691.5 5496.36,-6738"/>
<polygon fill="blue" stroke="blue" points="5492.96,-6738.85 5498.73,-6747.73 5499.76,-6737.19 5492.96,-6738.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge684" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.14,-7619.11C4721.97,-7613.74 4791.23,-7610.58 4826,-7651 4894.93,-7731.13 4826.63,-11356.39 4862,-11456 4887.61,-11528.14 4951.61,-11593.74 4989.52,-11628"/>
<polygon fill="blue" stroke="blue" points="4987.39,-11630.8 4997.19,-11634.83 4992.04,-11625.57 4987.39,-11630.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof(). -->
<g id="edge685" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.03,-7626.25C4717.41,-7629.56 4776.86,-7636.96 4826,-7651 4878.34,-7665.96 4935.51,-7691.15 4973.94,-7709.47"/>
<polygon fill="blue" stroke="blue" points="4972.76,-7712.79 4983.29,-7713.97 4975.8,-7706.48 4972.76,-7712.79"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node318" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node318"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="4327,-7536 4131,-7536 4131,-7500 4327,-7500 4327,-7536"/>
<text text-anchor="middle" x="4229" y="-7514.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge722" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.16,-7507.25C4368.19,-7502.54 4416.46,-7496.78 4460,-7491 4507.84,-7484.65 4562.1,-7476.55 4601.39,-7470.53"/>
<polygon fill="blue" stroke="blue" points="4601.94,-7473.99 4611.29,-7469.01 4600.88,-7467.07 4601.94,-7473.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge728" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.23,-7504.69C4373.09,-7503.99 4425.23,-7512.14 4460,-7545 4512.47,-7594.59 4436.6,-7654.31 4488,-7705 4520.68,-7737.23 4575.59,-7740.28 4613.7,-7737.7"/>
<polygon fill="blue" stroke="blue" points="4614.29,-7741.16 4623.97,-7736.84 4613.71,-7734.19 4614.29,-7741.16"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge723" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.2,-7517.54C4414.49,-7517.13 4539.07,-7516.55 4607.08,-7516.23"/>
<polygon fill="blue" stroke="blue" points="4607.51,-7519.73 4617.49,-7516.18 4607.48,-7512.73 4607.51,-7519.73"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge726" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.11,-7529.18C4368.13,-7533.96 4416.4,-7539.66 4460,-7545 4507.67,-7550.84 4561.81,-7557.77 4601.09,-7562.85"/>
<polygon fill="blue" stroke="blue" points="4600.89,-7566.35 4611.26,-7564.16 4601.79,-7559.41 4600.89,-7566.35"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge725" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.09,-7509.89C4371.02,-7510.86 4421.59,-7518.9 4460,-7545 4481.71,-7559.75 4466.61,-7581.79 4488,-7597 4526.68,-7624.5 4582.97,-7628.12 4619.53,-7627"/>
<polygon fill="blue" stroke="blue" points="4619.92,-7630.49 4629.75,-7626.55 4619.61,-7623.49 4619.92,-7630.49"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge727" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.21,-7505.97C4372.5,-7505.74 4424.17,-7513.91 4460,-7545 4496.8,-7576.94 4451.88,-7618.29 4488,-7651 4509.16,-7670.16 4538.28,-7678.71 4566.34,-7681.92"/>
<polygon fill="blue" stroke="blue" points="4566.33,-7685.43 4576.61,-7682.87 4566.98,-7678.46 4566.33,-7685.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge724" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4327.11,-7533.15C4373.94,-7534.61 4426.98,-7526.59 4460,-7491 4510.38,-7436.71 4442.44,-6883.39 4488,-6825 4584.37,-6701.49 4721.56,-6841.76 4826,-6725 4886.8,-6657.03 4792.09,-6581.55 4862,-6523 4906.76,-6485.51 5338.17,-6491.77 5387.5,-6523 5463.5,-6571.11 5490.25,-6684.5 5498.83,-6737.62"/>
<polygon fill="blue" stroke="blue" points="5495.39,-6738.33 5500.35,-6747.7 5502.31,-6737.29 5495.39,-6738.33"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge815" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]generate_weights_for_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M5024.07,-7750.24C5052.39,-7918.84 5269.52,-9223.69 5387.5,-10289 5451.56,-10867.42 5492.67,-11578.03 5500.95,-11727.57"/>
<polygon fill="blue" stroke="blue" points="5497.47,-11727.94 5501.51,-11737.74 5504.46,-11727.56 5497.47,-11727.94"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge827" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M4737.39,-7670.43C4769.6,-7671.93 4804.27,-7680.24 4826,-7705 4871.38,-7756.72 4852.17,-8874.9 4862,-8943 4942.74,-9502.52 5109.92,-9612.83 5186,-10173 5192.02,-10217.32 5179.08,-11747.28 5206,-11783 5218.1,-11799.05 5239.39,-11805.9 5258.23,-11808.7"/>
<polygon fill="blue" stroke="blue" points="5258.04,-11812.2 5268.37,-11809.86 5258.84,-11805.24 5258.04,-11812.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node321" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node321"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="4279.5,-7644 4178.5,-7644 4178.5,-7608 4279.5,-7608 4279.5,-7644"/>
<text text-anchor="middle" x="4229" y="-7622.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge865" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.96,-7635.05C4331.42,-7641.32 4410.85,-7642.04 4460,-7599 4497.95,-7565.77 4450.76,-7523.03 4488,-7489 4518.2,-7461.4 4564.88,-7455.76 4601.38,-7456.4"/>
<polygon fill="blue" stroke="blue" points="4601.28,-7459.9 4611.39,-7456.73 4601.51,-7452.9 4601.28,-7459.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge867" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.7,-7629.97C4328.12,-7635.51 4402.62,-7648.58 4460,-7679 4475,-7686.95 4472.74,-7697.55 4488,-7705 4527.58,-7724.31 4578.03,-7730.29 4613.27,-7731.91"/>
<polygon fill="blue" stroke="blue" points="4613.58,-7735.42 4623.69,-7732.28 4613.83,-7728.43 4613.58,-7735.42"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge866" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.62,-7632.97C4329.71,-7637.28 4407.02,-7636.19 4460,-7599 4482.78,-7583.01 4465.57,-7559.47 4488,-7543 4522.14,-7517.94 4570.72,-7512.48 4606.87,-7512.53"/>
<polygon fill="blue" stroke="blue" points="4607.13,-7516.03 4617.18,-7512.69 4607.24,-7509.03 4607.13,-7516.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge869" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.86,-7620.58C4326.48,-7615.42 4398.02,-7607.22 4460,-7599 4507.84,-7592.65 4562.1,-7584.55 4601.39,-7578.53"/>
<polygon fill="blue" stroke="blue" points="4601.94,-7581.99 4611.29,-7577.01 4600.88,-7575.07 4601.94,-7581.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge871" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.7,-7625.77C4366.48,-7625.36 4543.65,-7624.53 4619.84,-7624.17"/>
<polygon fill="blue" stroke="blue" points="4619.92,-7627.67 4629.91,-7624.12 4619.89,-7620.67 4619.92,-7627.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar(). -->
<g id="edge870" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]from_blinding_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.7,-7632.07C4350,-7640.65 4479.63,-7656.47 4566.83,-7667.11"/>
<polygon fill="blue" stroke="blue" points="4566.63,-7670.62 4576.98,-7668.35 4567.48,-7663.67 4566.63,-7670.62"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge868" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4279.88,-7636.67C4332.82,-7644.76 4414.94,-7647.42 4460,-7599 4507.13,-7548.36 4448.07,-7033.49 4488,-6977 4581.57,-6844.64 4725.72,-6967.35 4826,-6840 4893,-6754.91 4779.96,-6669.7 4862,-6599 4916.54,-6552 5116.11,-6581.69 5186,-6599 5298.48,-6626.86 5415.07,-6702.77 5470.07,-6741.93"/>
<polygon fill="blue" stroke="blue" points="5468.2,-6744.89 5478.36,-6747.89 5472.28,-6739.21 5468.2,-6744.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node322" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node322"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="4684,-6517 4630,-6517 4630,-6481 4684,-6481 4684,-6517"/>
<text text-anchor="middle" x="4657" y="-6495.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.02,-6498.51C4722.36,-6499.37 4793.02,-6507.35 4826,-6552 4906.95,-6661.57 4816.56,-11327.58 4862,-11456 4887.54,-11528.17 4951.56,-11593.75 4989.49,-11628.01"/>
<polygon fill="blue" stroke="blue" points="4987.37,-11630.81 4997.17,-11634.84 4992.02,-11625.58 4987.37,-11630.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-6499.11C4721.88,-6500.8 4790.53,-6509.9 4826,-6552 4902.58,-6642.9 4780.77,-6730.22 4862,-6817 4883.95,-6840.45 4918.03,-6849.25 4948.84,-6851.86"/>
<polygon fill="blue" stroke="blue" points="4948.94,-6855.37 4959.14,-6852.51 4949.38,-6848.38 4948.94,-6855.37"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node323" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node323"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="4685,-6463 4629,-6463 4629,-6427 4685,-6427 4685,-6463"/>
<text text-anchor="middle" x="4657" y="-6441.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.11,-6444.47C4719.63,-6444.86 4780.28,-6449.17 4826,-6472 5024.81,-6571.29 5098.58,-6614.69 5186,-6819 5208.39,-6871.33 5202.4,-10860.2 5206,-10917 5223.58,-11194.38 5275.52,-11527.4 5291.36,-11624.91"/>
<polygon fill="blue" stroke="blue" points="5287.92,-11625.56 5292.99,-11634.86 5294.83,-11624.43 5287.92,-11625.56"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node324" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node324"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="4685,-7331 4629,-7331 4629,-7295 4685,-7295 4685,-7331"/>
<text text-anchor="middle" x="4657" y="-7309.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.17,-7308.99C4774.35,-7297.54 5059.67,-7274.95 5186,-7432 5201.17,-7450.86 5204.46,-10892.85 5206,-10917 5223.69,-11194.37 5275.56,-11527.4 5291.37,-11624.91"/>
<polygon fill="blue" stroke="blue" points="5287.93,-11625.56 5292.99,-11634.86 5294.84,-11624.43 5287.93,-11625.56"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node325" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node325"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="4684,-7223 4630,-7223 4630,-7187 4684,-7187 4684,-7223"/>
<text text-anchor="middle" x="4657" y="-7201.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.15,-7200.11C4721.98,-7194.73 4791.24,-7191.56 4826,-7232 4902.48,-7320.99 4822.79,-11345.41 4862,-11456 4887.58,-11528.16 4951.59,-11593.74 4989.51,-11628.01"/>
<polygon fill="blue" stroke="blue" points="4987.38,-11630.8 4997.18,-11634.83 4992.03,-11625.57 4987.38,-11630.8"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialPrivateKey]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.2,-7209.45C4721.46,-7214.13 4789.28,-7216.25 4826,-7178 4919.62,-7080.49 4768.92,-6974.02 4862,-6876 4883.99,-6852.85 4918.07,-6845.09 4948.87,-6843.54"/>
<polygon fill="blue" stroke="blue" points="4949.28,-6847.03 4959.17,-6843.24 4949.07,-6840.03 4949.28,-6847.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.3,-7209.55C4721.67,-7214.34 4789.64,-7216.59 4826,-7178 4880.99,-7119.65 4805.51,-6875.9 4862,-6819 5020.66,-6659.19 5327.25,-6718.42 5449.91,-6750.65"/>
<polygon fill="blue" stroke="blue" points="5449.24,-6754.09 5459.81,-6753.29 5451.05,-6747.33 5449.24,-6754.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="node326" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<g id="a_node326"><a xlink:title=" &#160;&#160;&#160;fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;y: sho.get_scalar(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5336.5,-7170 5257.5,-7170 5257.5,-7134 5336.5,-7134 5336.5,-7170"/>
<text text-anchor="middle" x="5297" y="-7148.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge554" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5336.7,-7134.46C5355.22,-7123.98 5375.85,-7108.82 5387.5,-7089 5448.64,-6984.97 5351.58,-6921.03 5416,-6819 5424.41,-6805.68 5437.49,-6795.2 5450.96,-6787.2"/>
<polygon fill="blue" stroke="blue" points="5452.77,-6790.2 5459.83,-6782.3 5449.38,-6784.08 5452.77,-6790.2"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="node327" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<g id="a_node327"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut dyn ShoApi) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BlindingPrivateKey::generate(sho).into() &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5059.5,-7171 4980.5,-7171 4980.5,-7135 5059.5,-7135 5059.5,-7171"/>
<text text-anchor="middle" x="5020" y="-7149.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate(). -->
<g id="edge556" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingPrivateKey]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5059.53,-7152.86C5108.58,-7152.68 5193.4,-7152.37 5247.01,-7152.18"/>
<polygon fill="blue" stroke="blue" points="5247.3,-7155.68 5257.29,-7152.14 5247.28,-7148.68 5247.3,-7155.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="node328" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<g id="a_node328"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn Attribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedAttribute&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The points in a regular verifiably encrypted attribute ...">
<polygon fill="white" stroke="black" points="4692,-7169 4622,-7169 4622,-7133 4692,-7133 4692,-7169"/>
<text text-anchor="middle" x="4657" y="-7147.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="node330" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<g id="a_node330"><a xlink:title=" &#160;&#160;&#160;pub fn blind( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;attr: &amp;dyn RevealedAttribute, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut dyn ShoApi, &#160;&#160;&#160;&#160;) &#45;&gt; BlindedPoint&lt;WithNonce&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is technically something you can do with just th...">
<polygon fill="white" stroke="black" points="5047,-7225 4993,-7225 4993,-7189 5047,-7189 5047,-7225"/>
<text text-anchor="middle" x="5020" y="-7203.3" font-family="Helvetica,sans-Serif" font-size="14.00">blind</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge581" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4692.29,-7156.32C4760.59,-7166.91 4913.05,-7190.56 4982.85,-7201.39"/>
<polygon fill="blue" stroke="blue" points="4982.51,-7204.88 4992.92,-7202.96 4983.58,-7197.96 4982.51,-7204.88"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair(). -->
<g id="node329" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().</title>
<g id="a_node329"><a xlink:title="fn round_trip_key_pair() { &#160;&#160;&#160;&#160;let key_pair = BlindingKeyPair::generate(&amp;mut poksho::ShoSha256::new(b&#39; test&#39; )); &#160;&#160;&#160;&#160;let serialized = bincode::serialize(&amp;key_pair).unwrap(); &#160;&#160;&#160;&#160;let deserialized: Blin...">
<polygon fill="white" stroke="black" points="4733,-7277 4581,-7277 4581,-7241 4733,-7241 4733,-7277"/>
<text text-anchor="middle" x="4657" y="-7255.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge763" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/round_trip_key_pair().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.2,-7259.54C4763.94,-7256.68 4798.63,-7249.25 4826,-7232 4849.78,-7217.01 4838.3,-7195.12 4862,-7180 4894.09,-7159.53 4937.04,-7153.27 4969.91,-7151.85"/>
<polygon fill="blue" stroke="blue" points="4970.31,-7155.34 4980.2,-7151.55 4970.1,-7148.34 4970.31,-7155.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge863" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5047.14,-7210.24C5082.71,-7213.14 5146.44,-7212.79 5186,-7180 5206.03,-7163.4 5189.66,-7145.24 5206,-7125 5265.85,-7050.89 5335.4,-7090.75 5387.5,-7011 5434.68,-6938.78 5368.42,-6890.96 5416,-6819 5424.61,-6805.98 5437.61,-6795.63 5450.95,-6787.65"/>
<polygon fill="blue" stroke="blue" points="5452.7,-6790.69 5459.72,-6782.75 5449.28,-6784.58 5452.7,-6790.69"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node331" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node331"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4685,-6326 4629,-6326 4629,-6290 4685,-6290 4685,-6326"/>
<text text-anchor="middle" x="4657" y="-6304.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.12,-6307.13C4776.06,-6305.91 5070.86,-6315.93 5186,-6490 5202.96,-6515.64 5204.06,-10886.32 5206,-10917 5223.53,-11194.38 5275.51,-11527.4 5291.36,-11624.91"/>
<polygon fill="blue" stroke="blue" points="5287.92,-11625.56 5292.99,-11634.86 5294.83,-11624.43 5287.92,-11625.56"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node332" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node332"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="4691.5,-6380 4622.5,-6380 4622.5,-6344 4691.5,-6344 4691.5,-6380"/>
<text text-anchor="middle" x="4657" y="-6358.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge791" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4691.68,-6361.77C4731.16,-6363.53 4795.11,-6373.18 4826,-6415 4909.2,-6527.64 4815.3,-11323.99 4862,-11456 4887.53,-11528.17 4951.55,-11593.75 4989.49,-11628.01"/>
<polygon fill="blue" stroke="blue" points="4987.37,-11630.81 4997.17,-11634.84 4992.02,-11625.58 4987.37,-11630.81"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar(). -->
<g id="edge790" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4691.57,-6361.39C4819.92,-6359.72 5277.85,-6360.06 5387.5,-6447 5479.95,-6520.3 5498.13,-6674.33 5501.66,-6737.77"/>
<polygon fill="blue" stroke="blue" points="5498.17,-6738.02 5502.14,-6747.84 5505.16,-6737.69 5498.17,-6738.02"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge860" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 sho/ShoExt#get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5547.34,-6781.69C5563.96,-6790.09 5581.29,-6802.23 5591,-6819 5722.21,-7045.58 5732.31,-11334.94 5732.96,-11727.31"/>
<polygon fill="blue" stroke="blue" points="5729.46,-11727.55 5732.98,-11737.54 5736.46,-11727.54 5729.46,-11727.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node334" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node334"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="2639.5,-12084 2564.5,-12084 2564.5,-12048 2639.5,-12048 2639.5,-12084"/>
<text text-anchor="middle" x="2602" y="-12062.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="node335" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<g id="a_node335"><a xlink:title="fn bench_server_param_serialization(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;&#160;let serialized_secret_params = zkgroup::seri...">
<polygon fill="white" stroke="black" points="3384,-12084 3132,-12084 3132,-12048 3384,-12048 3384,-12084"/>
<text text-anchor="middle" x="3258" y="-12062.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_server_param_serialization</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2639.56,-12066C2730.15,-12066 2968.69,-12066 3121.36,-12066"/>
<polygon fill="blue" stroke="blue" points="3121.75,-12069.5 3131.75,-12066 3121.75,-12062.5 3121.75,-12069.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node336" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node336"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="3372,-8590 3144,-8590 3144,-8554 3372,-8554 3372,-8590"/>
<text text-anchor="middle" x="3258" y="-8568.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2603.57,-12047.82C2611.8,-11790.91 2709.96,-8894.06 2960,-8625 3003.49,-8578.21 3072.95,-8563.97 3133.76,-8561.89"/>
<polygon fill="blue" stroke="blue" points="3133.92,-8565.39 3143.83,-8561.65 3133.75,-8558.39 3133.92,-8565.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node337" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node337"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="3366,-8482 3150,-8482 3150,-8446 3366,-8446 3366,-8482"/>
<text text-anchor="middle" x="3258" y="-8460.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2603.43,-12047.86C2609.78,-11785.4 2688.8,-8759.81 2960,-8491 3012.55,-8438.91 3098.99,-8436.57 3165.1,-8444.66"/>
<polygon fill="blue" stroke="blue" points="3164.74,-8448.14 3175.11,-8445.98 3165.66,-8441.2 3164.74,-8448.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node338" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node338"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="3403,-8536 3113,-8536 3113,-8500 3403,-8500 3403,-8536"/>
<text text-anchor="middle" x="3258" y="-8514.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2603.46,-12047.73C2610.2,-11786.58 2692.79,-8809.45 2960,-8545 3012.5,-8493.04 3098.74,-8490.61 3164.79,-8498.64"/>
<polygon fill="blue" stroke="blue" points="3164.43,-8502.12 3174.8,-8499.96 3165.34,-8495.18 3164.43,-8502.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge635" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.53,-12084C3408.64,-12093.73 3502.91,-12093.85 3556,-12036 3606.38,-11981.1 3526.55,-10750.73 3576,-10695 3612.86,-10653.46 3680.75,-10653.01 3727.12,-10658.69"/>
<polygon fill="blue" stroke="blue" points="3726.86,-10662.19 3737.24,-10660.07 3727.81,-10655.25 3726.86,-10662.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.32,-8560.2C3436.26,-8560.34 3511.95,-8573.25 3556,-8625 3600.59,-8677.38 3530.31,-9811.58 3576,-9863 3604.16,-9894.7 3650.39,-9902.46 3691.32,-9901.83"/>
<polygon fill="blue" stroke="blue" points="3691.44,-9905.33 3701.32,-9901.52 3691.21,-9898.34 3691.44,-9905.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.3,-8560.21C3436.24,-8560.36 3511.93,-8573.27 3556,-8625 3598.55,-8674.95 3532.76,-9756.64 3576,-9806 3604.53,-9838.57 3651.99,-9846.72 3693.52,-9846.42"/>
<polygon fill="blue" stroke="blue" points="3693.74,-9849.92 3703.66,-9846.19 3693.58,-9842.92 3693.74,-9849.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.5,-8590.05C3402.96,-8601.43 3501.27,-8604.4 3556,-8545 3598.45,-8498.93 3533.53,-6336.05 3576,-6290 3642.65,-6217.73 4389.85,-6183.12 4460,-6252 4490.39,-6281.84 4485.87,-7742.46 4488,-7785 4529.47,-8613.74 4633.97,-9626.91 4653,-9807.73"/>
<polygon fill="blue" stroke="blue" points="4649.53,-9808.18 4654.06,-9817.76 4656.49,-9807.45 4649.53,-9808.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3336.68,-8590.05C3404.69,-8600.76 3500.99,-8602.72 3556,-8545 3591.99,-8507.24 3543.32,-8116.65 3576,-8076 3605.28,-8039.59 3656.43,-8026.49 3699.68,-8022.42"/>
<polygon fill="blue" stroke="blue" points="3700.22,-8025.89 3709.91,-8021.61 3699.67,-8018.91 3700.22,-8025.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.07,-8560.09C3436.13,-8560.15 3512.03,-8573.01 3556,-8625 3593.13,-8668.91 3537.95,-10651.89 3576,-10695 3590.58,-10711.52 3610.06,-10721.55 3631.15,-10727.28"/>
<polygon fill="blue" stroke="blue" points="3630.41,-10730.7 3640.95,-10729.63 3632.03,-10723.9 3630.41,-10730.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.05,-8560.11C3436.11,-8560.17 3512.01,-8573.02 3556,-8625 3590.24,-8665.46 3540.91,-10493.28 3576,-10533 3588.94,-10547.65 3605.73,-10557.19 3624.09,-10563.17"/>
<polygon fill="blue" stroke="blue" points="3623.24,-10566.56 3633.82,-10565.97 3625.18,-10559.84 3623.24,-10566.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node393" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node393"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="4413.5,-10440 4044.5,-10440 4044.5,-10404 4413.5,-10404 4413.5,-10440"/>
<text text-anchor="middle" x="4229" y="-10418.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-8590.03C3402.93,-8601.4 3501.23,-8604.36 3556,-8545 3593.09,-8504.8 3537.13,-6614.48 3576,-6576 3702.98,-6450.31 3851.32,-6450.01 3978,-6576 4014.24,-6612.04 3974.6,-10210.56 3998,-10256 4034.34,-10326.56 4116.09,-10374.07 4171.66,-10399.59"/>
<polygon fill="blue" stroke="blue" points="4170.48,-10402.89 4181.03,-10403.8 4173.35,-10396.51 4170.48,-10402.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.07,-8560.09C3436.14,-8560.15 3512.04,-8573 3556,-8625 3594.09,-8670.06 3536.96,-10704.76 3576,-10749 3578.06,-10751.34 3580.23,-10753.55 3582.48,-10755.64"/>
<polygon fill="blue" stroke="blue" points="3580.53,-10758.57 3590.47,-10762.26 3585,-10753.18 3580.53,-10758.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.06,-8560.1C3436.12,-8560.16 3512.02,-8573.02 3556,-8625 3591.2,-8666.61 3539.92,-10546.15 3576,-10587 3583.29,-10595.26 3591.81,-10601.9 3601.15,-10607.19"/>
<polygon fill="blue" stroke="blue" points="3599.83,-10610.44 3610.34,-10611.85 3603.01,-10604.2 3599.83,-10610.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3372.06,-8560.1C3436.13,-8560.16 3512.03,-8573.01 3556,-8625 3592.17,-8667.76 3538.94,-10599.02 3576,-10641 3612.76,-10682.63 3680.67,-10683.06 3727.07,-10677.35"/>
<polygon fill="blue" stroke="blue" points="3727.77,-10680.79 3737.2,-10675.96 3726.82,-10673.85 3727.77,-10680.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node346" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node346"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="3811.5,-8511 3742.5,-8511 3742.5,-8475 3811.5,-8475 3811.5,-8511"/>
<text text-anchor="middle" x="3777" y="-8489.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.12,-8470.01C3479.2,-8476.35 3651.96,-8486.04 3732.21,-8490.54"/>
<polygon fill="blue" stroke="blue" points="3732.26,-8494.05 3742.44,-8491.12 3732.66,-8487.06 3732.26,-8494.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3345.3,-8445.97C3411.62,-8437.54 3500.93,-8438.84 3556,-8491 3600.68,-8533.31 3532.25,-8584.72 3576,-8628 3608.63,-8660.28 3660.23,-8666.59 3702.85,-8665.06"/>
<polygon fill="blue" stroke="blue" points="3703.1,-8668.55 3712.91,-8664.55 3702.75,-8661.56 3703.1,-8668.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node348" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node348"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="3805,-8457 3749,-8457 3749,-8421 3805,-8421 3805,-8457"/>
<text text-anchor="middle" x="3777" y="-8435.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.12,-8458.82C3482.36,-8453.2 3661.66,-8444.53 3738.71,-8440.8"/>
<polygon fill="blue" stroke="blue" points="3739.07,-8444.29 3748.89,-8440.31 3738.73,-8437.3 3739.07,-8444.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node349" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node349"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="3810,-8619 3744,-8619 3744,-8583 3810,-8583 3810,-8619"/>
<text text-anchor="middle" x="3777" y="-8597.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3357.42,-8445.99C3421.34,-8440.17 3502.42,-8444.71 3556,-8491 3584.71,-8515.81 3547.83,-8548.58 3576,-8574 3618.71,-8612.55 3688.92,-8612.75 3733.77,-8607.94"/>
<polygon fill="blue" stroke="blue" points="3734.26,-8611.41 3743.77,-8606.74 3733.42,-8604.46 3734.26,-8611.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.74,-8445.98C3403.12,-8434.69 3501.17,-8431.87 3556,-8491 3605.68,-8544.58 3527.9,-9751 3576,-9806 3604.51,-9838.6 3651.96,-9846.75 3693.5,-9846.44"/>
<polygon fill="blue" stroke="blue" points="3693.72,-9849.94 3703.64,-9846.2 3693.56,-9842.94 3693.72,-9849.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3340.28,-8482.03C3408.47,-8491.86 3503,-8492.1 3556,-8434 3597.9,-8388.07 3531.9,-6239.82 3576,-6196 3593.83,-6178.28 4442.29,-6177.6 4460,-6195 4491.51,-6225.96 4485.81,-7740.88 4488,-7785 4529.2,-8613.75 4633.92,-9626.91 4653,-9807.73"/>
<polygon fill="blue" stroke="blue" points="4649.52,-9808.18 4654.06,-9817.76 4656.49,-9807.45 4649.52,-9808.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-8445.96C3402.95,-8434.58 3501.26,-8431.61 3556,-8491 3596.48,-8534.91 3536.49,-10596.22 3576,-10641 3612.74,-10682.65 3680.66,-10683.07 3727.06,-10677.35"/>
<polygon fill="blue" stroke="blue" points="3727.77,-10680.79 3737.2,-10675.97 3726.82,-10673.85 3727.77,-10680.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge543" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.5,-8536.05C3402.96,-8547.43 3501.27,-8550.4 3556,-8491 3598.82,-8444.52 3531.43,-6260.81 3576,-6216 3598.25,-6193.63 4447.24,-6197.47 4460,-6210 4491.21,-6240.66 4485.82,-7741.3 4488,-7785 4529.27,-8613.75 4633.94,-9626.91 4653,-9807.73"/>
<polygon fill="blue" stroke="blue" points="4649.53,-9808.18 4654.06,-9817.76 4656.49,-9807.45 4649.53,-9808.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge541" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.01,-8499.98C3403.34,-8488.78 3501.13,-8486.08 3556,-8545 3594.59,-8586.43 3538.32,-9521.74 3576,-9564 3600.14,-9591.07 3637.45,-9600.67 3673.35,-9602.49"/>
<polygon fill="blue" stroke="blue" points="3673.32,-9605.99 3683.42,-9602.8 3673.54,-9598.99 3673.32,-9605.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge540" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.72,-8500C3403.08,-8488.73 3501.12,-8485.92 3556,-8545 3600.66,-8593.08 3532.4,-9676.96 3576,-9726 3600.31,-9753.34 3638.07,-9762.87 3674.26,-9764.57"/>
<polygon fill="blue" stroke="blue" points="3674.32,-9768.07 3684.41,-9764.85 3674.51,-9761.08 3674.32,-9768.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge544" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.04,-8499.95C3403.38,-8488.74 3501.18,-8486.03 3556,-8545 3598.64,-8590.86 3534.37,-9625.22 3576,-9672 3616.41,-9717.41 3693.9,-9713.67 3739.65,-9706.55"/>
<polygon fill="blue" stroke="blue" points="3740.46,-9709.96 3749.74,-9704.84 3739.29,-9703.06 3740.46,-9709.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node386" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node386"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="3928,-9501 3626,-9501 3626,-9465 3928,-9465 3928,-9501"/>
<text text-anchor="middle" x="3777" y="-9479.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge546" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.54,-8499.99C3403.75,-8488.97 3501.03,-8486.53 3556,-8545 3582.19,-8572.86 3562.82,-9197.1 3576,-9233 3611.41,-9329.43 3699.92,-9416.92 3746.42,-9458.12"/>
<polygon fill="blue" stroke="blue" points="3744.22,-9460.85 3754.04,-9464.8 3748.83,-9455.58 3744.22,-9460.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge545" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.02,-8499.96C3403.36,-8488.76 3501.16,-8486.06 3556,-8545 3596.61,-8588.65 3536.35,-9573.48 3576,-9618 3608.64,-9654.65 3665.45,-9659.28 3710.2,-9655.95"/>
<polygon fill="blue" stroke="blue" points="3710.77,-9659.41 3720.42,-9655.04 3710.15,-9652.44 3710.77,-9659.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge542" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.49,-8499.96C3402.94,-8488.58 3501.25,-8485.62 3556,-8545 3595.47,-8587.81 3537.47,-10597.34 3576,-10641 3612.75,-10682.64 3680.67,-10683.07 3727.07,-10677.35"/>
<polygon fill="blue" stroke="blue" points="3727.77,-10680.79 3737.2,-10675.97 3726.82,-10673.85 3727.77,-10680.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3742.49,-9187.96C3690.12,-9197.78 3593.74,-9206.29 3566,-9144 3559.05,-9128.39 3559.05,-8544.61 3566,-8529 3592.06,-8470.48 3678.71,-8474.45 3732.52,-8483.28"/>
<polygon fill="blue" stroke="blue" points="3732.04,-8486.75 3742.49,-8485.04 3733.25,-8479.86 3732.04,-8486.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3743.84,-9131.62C3691.88,-9138.28 3594.28,-9141.49 3566,-9078 3556.03,-9055.62 3556.03,-8659.38 3566,-8637 3592.28,-8578 3680.13,-8582.52 3733.83,-8591.5"/>
<polygon fill="blue" stroke="blue" points="3733.31,-8594.96 3743.77,-8593.28 3734.54,-8588.07 3733.31,-8594.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node341" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node341"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="4285.5,-8457 4172.5,-8457 4172.5,-8421 4285.5,-8421 4285.5,-8457"/>
<text text-anchor="middle" x="4229" y="-8435.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4285.7,-8449.94C4339.02,-8456.82 4417.43,-8456.83 4460,-8409 4536.61,-8322.92 4412.67,-6422.2 4488,-6335 4519.73,-6298.27 4579.94,-6297.57 4619,-6301.77"/>
<polygon fill="blue" stroke="blue" points="4618.58,-6305.25 4628.93,-6303 4619.43,-6298.3 4618.58,-6305.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node342" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node342"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="4290.5,-8565 4167.5,-8565 4167.5,-8529 4290.5,-8529 4290.5,-8565"/>
<text text-anchor="middle" x="4229" y="-8543.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4290.69,-8559.46C4343.73,-8566.41 4418.54,-8565.98 4460,-8520 4536.2,-8435.5 4413.61,-6558.1 4488,-6472 4519.73,-6435.27 4579.94,-6434.57 4619,-6438.78"/>
<polygon fill="blue" stroke="blue" points="4618.58,-6442.25 4628.93,-6440 4619.43,-6435.3 4618.58,-6442.25"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node343" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node343"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4321.5,-8619 4136.5,-8619 4136.5,-8583 4321.5,-8583 4321.5,-8619"/>
<text text-anchor="middle" x="4229" y="-8597.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4321.73,-8616.3C4370.05,-8618.72 4426.14,-8611.54 4460,-8574 4535.24,-8490.58 4420.95,-6642.14 4488,-6552 4518.33,-6511.23 4580.06,-6501.05 4619.65,-6498.94"/>
<polygon fill="blue" stroke="blue" points="4619.84,-6502.43 4629.7,-6498.54 4619.57,-6495.44 4619.84,-6502.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node344" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node344"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="3861,-8565 3693,-8565 3693,-8529 3861,-8529 3861,-8565"/>
<text text-anchor="middle" x="3777" y="-8543.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.18,-8558.8C3902.47,-8559.64 3949.49,-8552.08 3978,-8520 4022.37,-8470.08 3955.85,-7369.81 3998,-7318 4130.83,-7154.74 4326.55,-7376.75 4460,-7214 4500.73,-7164.32 4442.03,-6102.87 4488,-6058 4599,-5949.66 5069.01,-5956.15 5186,-6058 5244.99,-6109.36 5285.45,-6684.77 5294.22,-6820.46"/>
<polygon fill="blue" stroke="blue" points="5290.75,-6821.08 5294.88,-6830.84 5297.73,-6820.64 5290.75,-6821.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-8554.46C3900.33,-8553.66 3945.59,-8545.95 3978,-8520 3997.98,-8504 3977.88,-8481.82 3998,-8466 4043.97,-8429.84 4111.97,-8426.06 4162.11,-8429.53"/>
<polygon fill="blue" stroke="blue" points="4161.96,-8433.03 4172.21,-8430.35 4162.52,-8426.05 4161.96,-8433.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.06,-8547C3946.18,-8547 4077.1,-8547 4157.38,-8547"/>
<polygon fill="blue" stroke="blue" points="4157.4,-8550.5 4167.4,-8547 4157.4,-8543.5 4157.4,-8550.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.04,-8557.3C3902.23,-8562.38 3952.73,-8568.56 3998,-8574 4040.04,-8579.05 4086.42,-8584.51 4126.45,-8589.2"/>
<polygon fill="blue" stroke="blue" points="4126.15,-8592.68 4136.49,-8590.37 4126.96,-8585.73 4126.15,-8592.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node345" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node345"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="4292,-8511 4166,-8511 4166,-8475 4292,-8475 4292,-8511"/>
<text text-anchor="middle" x="4229" y="-8489.3" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.04,-8536.7C3902.23,-8531.62 3952.73,-8525.44 3998,-8520 4050.7,-8513.67 4110.21,-8506.69 4155.49,-8501.41"/>
<polygon fill="blue" stroke="blue" points="4155.99,-8504.88 4165.51,-8500.25 4155.18,-8497.93 4155.99,-8504.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.18,-8535.19C3902.47,-8534.35 3949.49,-8541.91 3978,-8574 4023.47,-8625.17 3972.35,-9742.53 3998,-9806 4038.23,-9905.57 4139.13,-9988.89 4192.93,-10028.03"/>
<polygon fill="blue" stroke="blue" points="4190.98,-10030.94 4201.15,-10033.93 4195.06,-10025.25 4190.98,-10030.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4292.25,-8505.66C4345.18,-8512.4 4418.94,-8511.53 4460,-8466 4536.31,-8381.37 4420,-6506.44 4488,-6415 4516.48,-6376.7 4572.67,-6365.4 4612.2,-6362.41"/>
<polygon fill="blue" stroke="blue" points="4612.59,-6365.9 4622.36,-6361.8 4612.17,-6358.91 4612.59,-6365.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge510" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.82,-8493C3884.57,-8493 4057.28,-8493 4155.82,-8493"/>
<polygon fill="blue" stroke="blue" points="4156,-8496.5 4166,-8493 4156,-8489.5 4156,-8496.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge657" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.04,-8647.43C3914.99,-8638.56 4038.59,-8623.73 4126.19,-8613.22"/>
<polygon fill="blue" stroke="blue" points="4126.64,-8616.69 4136.15,-8612.02 4125.8,-8609.74 4126.64,-8616.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge683" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.14,-8439C3874.85,-8439 4061.8,-8439 4162.16,-8439"/>
<polygon fill="blue" stroke="blue" points="4162.19,-8442.5 4172.19,-8439 4162.19,-8435.5 4162.19,-8442.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge721" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3810.06,-8597.01C3852.88,-8591.7 3931.14,-8582.03 3998,-8574 4051.44,-8567.58 4111.89,-8560.49 4157.4,-8555.19"/>
<polygon fill="blue" stroke="blue" points="4157.93,-8558.65 4167.46,-8554.02 4157.12,-8551.7 4157.93,-8558.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node350" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node350"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3894,-8998 3660,-8998 3660,-8962 3894,-8962 3894,-8998"/>
<text text-anchor="middle" x="3777" y="-8976.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="node356" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<g id="a_node356"><a xlink:title=" &#160;&#160;&#160;fn server_secret_params() &#45;&gt; GenericServerSecretParams { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GenericServerSecretParams::generate(SERVER_SECRET_RAND) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4313.5,-8887 4144.5,-8887 4144.5,-8851 4313.5,-8851 4313.5,-8887"/>
<text text-anchor="middle" x="4229" y="-8865.3" font-family="Helvetica,sans-Serif" font-size="14.00">server_secret_params</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.03,-8985.34C3924.05,-8981.44 3954.51,-8972.15 3978,-8953 3998.81,-8936.04 3977.04,-8912.78 3998,-8896 4035.64,-8865.87 4088.49,-8858.04 4134.04,-8858.23"/>
<polygon fill="blue" stroke="blue" points="4134.18,-8861.74 4144.24,-8858.41 4134.3,-8854.74 4134.18,-8861.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.18,-8979.23C3989.59,-8978.59 4119.4,-8977.72 4185.51,-8977.28"/>
<polygon fill="blue" stroke="blue" points="4185.59,-8980.78 4195.56,-8977.22 4185.54,-8973.78 4185.59,-8980.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.11,-8964.62C3921.62,-8960.89 3950.86,-8956.87 3978,-8953 3986.9,-8951.73 3989.09,-8951.19 3998,-8950 4066.4,-8940.86 4146.46,-8931.84 4191.81,-8926.89"/>
<polygon fill="blue" stroke="blue" points="4192.19,-8930.37 4201.75,-8925.8 4191.43,-8923.41 4192.19,-8930.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3894.18,-8993.17C3992.61,-9004.32 4127.63,-9019.62 4191.58,-9026.87"/>
<polygon fill="blue" stroke="blue" points="4191.25,-9030.36 4201.58,-9028.01 4192.04,-9023.4 4191.25,-9030.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node351" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node351"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="3854,-8944 3700,-8944 3700,-8908 3854,-8908 3854,-8944"/>
<text text-anchor="middle" x="3777" y="-8922.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.06,-8915.27C3896.41,-8909.39 3950.1,-8902.08 3998,-8896 4042.77,-8890.32 4092.5,-8884.43 4134.23,-8879.61"/>
<polygon fill="blue" stroke="blue" points="4134.84,-8883.06 4144.38,-8878.44 4134.04,-8876.1 4134.84,-8883.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.08,-8934.62C3949.47,-8945.43 4109.66,-8963.59 4185.6,-8972.2"/>
<polygon fill="blue" stroke="blue" points="4185.41,-8975.7 4195.75,-8973.34 4186.2,-8968.74 4185.41,-8975.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.08,-8925.49C3952.02,-8924.84 4118.28,-8923.73 4191.52,-8923.24"/>
<polygon fill="blue" stroke="blue" points="4191.65,-8926.74 4201.63,-8923.18 4191.6,-8919.74 4191.65,-8926.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3854.45,-8918.73C3895.06,-8918.88 3943.55,-8925.95 3978,-8953 3997.15,-8968.04 3978.72,-8989.13 3998,-9004 4054.21,-9047.35 4142.28,-9043.75 4191.53,-9037.34"/>
<polygon fill="blue" stroke="blue" points="4192.3,-9040.76 4201.72,-9035.9 4191.32,-9033.83 4192.3,-9040.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node352" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node352"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="3935.5,-9052 3618.5,-9052 3618.5,-9016 3935.5,-9016 3935.5,-9052"/>
<text text-anchor="middle" x="3777" y="-9030.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.97,-9032.34C3951.53,-9026.67 3965.98,-9018.51 3978,-9007 4014.22,-8972.34 3961.48,-8930.34 3998,-8896 4033.75,-8862.39 4087.68,-8854.68 4134.34,-8855.83"/>
<polygon fill="blue" stroke="blue" points="4134.36,-8859.33 4144.49,-8856.22 4134.63,-8852.34 4134.36,-8859.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.59,-9015.97C3935.15,-9013.02 3957.19,-9009.97 3978,-9007 3986.9,-9005.73 3989.09,-9005.19 3998,-9004 4063.44,-8995.25 4139.56,-8986.62 4185.73,-8981.55"/>
<polygon fill="blue" stroke="blue" points="4186.4,-8985 4195.96,-8980.43 4185.64,-8978.04 4186.4,-8985"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.73,-9029.86C3951.04,-9024.58 3965.51,-9017.18 3978,-9007 3998.81,-8990.04 3977.04,-8966.78 3998,-8950 4053.67,-8905.43 4142.62,-8909.66 4192,-8916.46"/>
<polygon fill="blue" stroke="blue" points="4191.5,-8919.93 4201.91,-8917.94 4192.53,-8913.01 4191.5,-8919.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3935.7,-9032.95C4027.81,-9032.33 4136.5,-9031.61 4191.77,-9031.24"/>
<polygon fill="blue" stroke="blue" points="4191.8,-9034.74 4201.77,-9031.17 4191.75,-9027.74 4191.8,-9034.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3811.69,-8835.37C3857.52,-8837.85 3938.32,-8834.33 3978,-8785 4025.12,-8726.42 3948.93,-7488.95 3998,-7432 4133.84,-7274.36 4322.98,-7512.62 4460,-7356 4528.87,-7277.27 4424.91,-6498.43 4488,-6415 4516.79,-6376.93 4572.91,-6365.58 4612.34,-6362.52"/>
<polygon fill="blue" stroke="blue" points="4612.72,-6366 4622.48,-6361.89 4612.28,-6359.02 4612.72,-6366"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node354" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node354"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="3399,-8929 3117,-8929 3117,-8893 3399,-8893 3399,-8929"/>
<text text-anchor="middle" x="3258" y="-8907.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.25,-8915.07C3491.83,-8917.76 3610.2,-8921.19 3689.32,-8923.49"/>
<polygon fill="blue" stroke="blue" points="3689.64,-8927 3699.74,-8923.79 3689.84,-8920 3689.64,-8927"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.27,-8902.35C3448.97,-8898.2 3505.15,-8892.28 3556,-8884 3617.99,-8873.91 3688.45,-8856.11 3732.57,-8844.19"/>
<polygon fill="blue" stroke="blue" points="3733.65,-8847.52 3742.38,-8841.52 3731.81,-8840.77 3733.65,-8847.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3399.12,-8904.93C3599.64,-8896.24 3963.06,-8880.48 4134.15,-8873.07"/>
<polygon fill="blue" stroke="blue" points="4134.55,-8876.55 4144.39,-8872.62 4134.25,-8869.56 4134.55,-8876.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3359.71,-8929.03C3423.16,-8934.41 3502.85,-8929.39 3556,-8884 3583.54,-8860.48 3550.17,-8830.39 3576,-8805 3619.45,-8762.29 3693.95,-8755.65 3738.73,-8755.96"/>
<polygon fill="blue" stroke="blue" points="3738.83,-8759.46 3748.89,-8756.16 3738.96,-8752.47 3738.83,-8759.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node355" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node355"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="3395.5,-8767 3120.5,-8767 3120.5,-8731 3395.5,-8731 3395.5,-8767"/>
<text text-anchor="middle" x="3258" y="-8745.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3357.42,-8730.99C3421.34,-8725.17 3502.42,-8729.71 3556,-8776 3584.71,-8800.81 3550.36,-8831.03 3576,-8859 3605.2,-8890.85 3649.97,-8907.57 3689.76,-8916.35"/>
<polygon fill="blue" stroke="blue" points="3689.25,-8919.82 3699.76,-8918.41 3690.67,-8912.96 3689.25,-8919.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3395.55,-8751.92C3446.55,-8755.48 3504.54,-8762.49 3556,-8776 3565.43,-8778.48 3566.77,-8781.87 3576,-8785 3628.63,-8802.84 3691.27,-8816.37 3732.25,-8824.23"/>
<polygon fill="blue" stroke="blue" points="3731.71,-8827.69 3742.18,-8826.11 3733.01,-8820.82 3731.71,-8827.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3395.72,-8736.7C3572.93,-8722.29 3871.82,-8703.64 3978,-8731 4063.69,-8753.08 4151.43,-8811.46 4196.69,-8844.78"/>
<polygon fill="blue" stroke="blue" points="4194.8,-8847.73 4204.91,-8850.9 4198.98,-8842.12 4194.8,-8847.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3395.51,-8751.38C3510.76,-8753.38 3667.98,-8756.12 3738.77,-8757.35"/>
<polygon fill="blue" stroke="blue" points="3738.91,-8760.85 3748.97,-8757.53 3739.03,-8753.86 3738.91,-8760.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge513" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4278.72,-8850.84C4333.99,-8827.32 4421.43,-8780.51 4460,-8708 4501.41,-8630.15 4473.96,-7208.06 4488,-7121 4520.56,-6919.11 4611.63,-6688.3 4644.22,-6609.8"/>
<polygon fill="blue" stroke="blue" points="4647.62,-6610.74 4648.24,-6600.16 4641.16,-6608.04 4647.62,-6610.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge639" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3805.05,-8760.51C3849.34,-8762.94 3936.53,-8760.31 3978,-8708 4024.32,-8649.57 3947.66,-7421.01 3998,-7366 4067.68,-7289.85 4389.8,-7393.67 4460,-7318 4534.31,-7237.89 4415.95,-6417.15 4488,-6335 4519.78,-6298.76 4579.29,-6297.75 4618.28,-6301.78"/>
<polygon fill="blue" stroke="blue" points="4618.35,-6305.31 4628.69,-6303.03 4619.18,-6298.36 4618.35,-6305.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge682" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.15,-8984.72C4312.71,-8994.73 4410.19,-9004.97 4460,-8950 4516.64,-8887.5 4448.57,-7506.56 4488,-7432 4516,-7379.06 4579.32,-7344.44 4619.73,-7326.84"/>
<polygon fill="blue" stroke="blue" points="4621.13,-7330.05 4628.98,-7322.93 4618.4,-7323.6 4621.13,-7330.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node359" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node359"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="3391,-8875 3125,-8875 3125,-8839 3391,-8839 3391,-8875"/>
<text text-anchor="middle" x="3258" y="-8853.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge686" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.27,-8866.23C3442.81,-8870.56 3502.29,-8876.45 3556,-8884 3600.47,-8890.25 3649.58,-8899.41 3690.1,-8907.58"/>
<polygon fill="blue" stroke="blue" points="3689.45,-8911.02 3699.94,-8909.58 3690.84,-8904.16 3689.45,-8911.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge688" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.13,-8850.61C3503.2,-8845.19 3657.28,-8837.74 3731.93,-8834.13"/>
<polygon fill="blue" stroke="blue" points="3732.53,-8837.61 3742.35,-8833.63 3732.19,-8830.61 3732.53,-8837.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge689" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.2,-8858.64C3589.99,-8861.1 3961.05,-8865.69 4134.34,-8867.84"/>
<polygon fill="blue" stroke="blue" points="4134.41,-8871.34 4144.46,-8867.97 4134.5,-8864.34 4134.41,-8871.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge687" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.15,-8866.95C3445.07,-8865.59 3506.3,-8856.73 3556,-8830 3568.53,-8823.26 3563.97,-8812.6 3576,-8805 3626.46,-8773.13 3696.39,-8762.84 3738.79,-8759.54"/>
<polygon fill="blue" stroke="blue" points="3739.21,-8763.02 3748.95,-8758.84 3738.73,-8756.03 3739.21,-8763.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node360" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node360"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="3366,-8821 3150,-8821 3150,-8785 3366,-8785 3366,-8821"/>
<text text-anchor="middle" x="3258" y="-8799.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge690" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.35,-8791.38C3425.98,-8789.95 3499.34,-8796.89 3556,-8830 3569.52,-8837.9 3563.49,-8849.59 3576,-8859 3609.17,-8883.96 3652.18,-8899.96 3689.82,-8910.03"/>
<polygon fill="blue" stroke="blue" points="3689.21,-8913.49 3699.77,-8912.59 3690.96,-8906.71 3689.21,-8913.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge693" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.12,-8809.01C3479.2,-8815.35 3651.96,-8825.04 3732.21,-8829.54"/>
<polygon fill="blue" stroke="blue" points="3732.26,-8833.05 3742.44,-8830.12 3732.66,-8826.06 3732.26,-8833.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params(). -->
<g id="edge692" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/server_secret_params().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.12,-8795.07C3507.08,-8786.52 3762.23,-8777.52 3978,-8805 4042.37,-8813.2 4113.93,-8832.61 4163.94,-8847.92"/>
<polygon fill="blue" stroke="blue" points="4163.06,-8851.31 4173.65,-8850.92 4165.13,-8844.62 4163.06,-8851.31"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge691" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3366.12,-8793.68C3482.36,-8783.56 3661.66,-8767.95 3738.71,-8761.25"/>
<polygon fill="blue" stroke="blue" points="3739.23,-8764.71 3748.89,-8760.36 3738.62,-8757.74 3739.23,-8764.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge794" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.23,-8929.51C4304.73,-8939.81 4408.21,-8953.24 4460,-8896 4522.03,-8827.44 4427.44,-7301.87 4488,-7232 4519.92,-7195.17 4580.48,-7194.6 4619.5,-7198.85"/>
<polygon fill="blue" stroke="blue" points="4619.54,-7202.38 4629.89,-7200.15 4620.41,-7195.43 4619.54,-7202.38"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge796" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.07,-9037.37C4304.3,-9047.41 4407.35,-9060.45 4460,-9004 4505.06,-8955.68 4470.29,-8473.65 4488,-8410 4572.67,-8105.77 4739.46,-8088.71 4826,-7785 4844.45,-7720.24 4817.09,-7230.18 4862,-7180 4888.52,-7150.36 4934.79,-7145.5 4970.25,-7146.93"/>
<polygon fill="blue" stroke="blue" points="4970.22,-7150.44 4980.4,-7147.52 4970.62,-7143.45 4970.22,-7150.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge797" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.21,-9034.86C4301.6,-9040.13 4396.1,-9044.75 4460,-9004 4721.45,-8837.26 4735.99,-8706.74 4826,-8410 4889.13,-8201.88 4792.97,-7638.23 4862,-7432 4889.43,-7350.06 4956.82,-7271.27 4993.76,-7232.31"/>
<polygon fill="blue" stroke="blue" points="4996.33,-7234.69 5000.73,-7225.06 4991.28,-7229.84 4996.33,-7234.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.33,-7031.6C4312.71,-7041.29 4409.38,-7050.95 4460,-6997 4539.95,-6911.8 4409.88,-6558.88 4488,-6472 4520.23,-6436.16 4579.62,-6435.04 4618.46,-6438.94"/>
<polygon fill="blue" stroke="blue" points="4618.49,-6442.46 4628.83,-6440.14 4619.3,-6435.51 4618.49,-6442.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4293.17,-6982.25C4345.57,-6988.4 4418.06,-6986.89 4460,-6943 4520.18,-6880.02 4434.02,-6620.37 4488,-6552 4519.34,-6512.31 4580.27,-6501.78 4619.5,-6499.3"/>
<polygon fill="blue" stroke="blue" points="4619.89,-6502.79 4629.71,-6498.81 4619.55,-6495.79 4619.89,-6502.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4263.54,-6923.8C4314.19,-6933.36 4409.64,-6942.36 4460,-6889 4532.42,-6812.26 4423.13,-6498.22 4488,-6415 4517.26,-6377.47 4573.01,-6365.98 4612.24,-6362.74"/>
<polygon fill="blue" stroke="blue" points="4612.6,-6366.23 4622.34,-6362.06 4612.12,-6359.24 4612.6,-6366.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.21,-6868.15C4305.92,-6877.37 4407.78,-6888.2 4460,-6832 4535.3,-6750.96 4413.91,-6417.15 4488,-6335 4520.28,-6299.21 4579.66,-6298.07 4618.48,-6301.96"/>
<polygon fill="blue" stroke="blue" points="4618.5,-6305.48 4628.84,-6303.16 4619.31,-6298.53 4618.5,-6305.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4262.36,-6775.6C4313.23,-6772.25 4411.12,-6774.32 4460,-6832 4525.35,-6909.12 4420.1,-7211.12 4488,-7286 4520.38,-7321.71 4579.73,-7322.87 4618.51,-7319.01"/>
<polygon fill="blue" stroke="blue" points="4619.34,-7322.44 4628.87,-7317.81 4618.53,-7315.49 4619.34,-7322.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge484" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.35,-6718.65C4304.58,-6708.76 4406.97,-6696.18 4460,-6752 4525.34,-6820.78 4424.13,-7107.85 4488,-7178 4520.72,-7213.94 4580.78,-7214.84 4619.52,-7210.89"/>
<polygon fill="blue" stroke="blue" points="4620.32,-7214.32 4629.84,-7209.67 4619.5,-7207.37 4620.32,-7214.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge505" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.13,-6568.78C4305.26,-6577.27 4405.61,-6586.81 4460,-6533 4523.18,-6470.5 4425.75,-6398.43 4488,-6335 4521.66,-6300.69 4580.4,-6299.09 4618.74,-6302.48"/>
<polygon fill="blue" stroke="blue" points="4618.66,-6305.99 4628.97,-6303.54 4619.39,-6299.02 4618.66,-6305.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge582" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.2,-6670.8C4365.93,-6670.23 4784.81,-6670.7 4826,-6711 4890.43,-6774.03 4803.17,-7046.71 4862,-7115 4888.32,-7145.55 4934.61,-7153.77 4970.13,-7155.11"/>
<polygon fill="blue" stroke="blue" points="4970.24,-7158.61 4980.31,-7155.32 4970.38,-7151.61 4970.24,-7158.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge583" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.3,-6668.16C4301,-6664.57 4393.45,-6662.59 4460,-6698 4680.37,-6815.24 4676.82,-6923.87 4826,-7124 4843.68,-7147.72 4837.33,-7163.66 4862,-7180 4898,-7203.84 4948.47,-7208.64 4982.38,-7208.76"/>
<polygon fill="blue" stroke="blue" points="4982.81,-7212.26 4992.77,-7208.66 4982.74,-7205.26 4982.81,-7212.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge596" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4263.72,-6624.3C4313.74,-6632.97 4407.33,-6640.51 4460,-6590 4516.85,-6535.48 4436.54,-6474.63 4488,-6415 4518.77,-6379.34 4573.33,-6367.4 4611.91,-6363.55"/>
<polygon fill="blue" stroke="blue" points="4612.67,-6367 4622.34,-6362.67 4612.08,-6360.03 4612.67,-6367"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="node444" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<g id="a_node444"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;libsignal_core::ServiceId, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = key_pair &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="5055,-6160 4985,-6160 4985,-6124 5055,-6124 5055,-6160"/>
<text text-anchor="middle" x="5020" y="-6138.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4236.03,-6407.7C4257.81,-6344.93 4339.15,-6138.07 4488,-6061 4653.13,-5975.5 4883.18,-6072.34 4976.83,-6119.34"/>
<polygon fill="blue" stroke="blue" points="4975.48,-6122.58 4985.98,-6123.99 4978.66,-6116.34 4975.48,-6122.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge777" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4311.03,-6478.82C4360.13,-6482.44 4420.67,-6495.27 4460,-6533 4493.92,-6565.55 4452.09,-6604.66 4488,-6635 4545.66,-6683.72 4772.51,-6615.73 4826,-6669 4880.46,-6723.24 4809.47,-6956.89 4862,-7013 4886.58,-7039.26 4926.7,-7045.81 4960.23,-7045.89"/>
<polygon fill="blue" stroke="blue" points="4960.46,-7049.39 4970.4,-7045.73 4960.35,-7042.39 4960.46,-7049.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.68,-6591.4C4736.36,-6603.25 4796.37,-6627.77 4826,-6673 4877.33,-6751.36 4792.99,-7029.65 4862,-7093 4888.52,-7117.34 5155.76,-7112.54 5186,-7093 5195.84,-7086.64 5258.46,-6938.82 5284.58,-6876.41"/>
<polygon fill="blue" stroke="blue" points="5287.82,-6877.74 5288.45,-6867.16 5281.36,-6875.04 5287.82,-6877.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="node423" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<g id="a_node423"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn decrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: &amp;Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;profile_key_struct::ProfileKeyStruct, ZkGroupVerificationFailure&gt; {...">
<polygon fill="white" stroke="black" points="5055,-6243 4985,-6243 4985,-6207 5055,-6207 5055,-6243"/>
<text text-anchor="middle" x="5020" y="-6221.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3852.74,-9901.57C3895.94,-9903.66 3947.6,-9897.39 3978,-9863 4011.34,-9825.28 3971.56,-8093.83 3998,-8051 4119.33,-7854.46 4336.47,-8008.17 4460,-7813 4509.71,-7734.47 4425.91,-7046.16 4488,-6977 4589.36,-6864.1 4720.46,-7038.01 4826,-6929 4877.31,-6876 4843.53,-6670.42 4862,-6599 4897.14,-6463.1 4972.75,-6312.08 5004.49,-6251.88"/>
<polygon fill="blue" stroke="blue" points="5007.6,-6253.49 5009.2,-6243.02 5001.42,-6250.21 5007.6,-6253.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1(). -->
<g id="node376" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().</title>
<g id="a_node376"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec1() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3858.5,-9962 3695.5,-9962 3695.5,-9926 3858.5,-9926 3858.5,-9962"/>
<text text-anchor="middle" x="3777" y="-9940.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.88,-9951.58C3895.52,-9955.87 3939.22,-9962.18 3978,-9971 4049.53,-9987.28 4129.82,-10015.06 4179.66,-10033.47"/>
<polygon fill="blue" stroke="blue" points="4178.61,-10036.82 4189.2,-10037.03 4181.05,-10030.26 4178.61,-10036.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3850.43,-9846.26C3894.17,-9848 3947.24,-9841.36 3978,-9806 4014.34,-9764.23 3959.85,-7853.12 3998,-7813 4068.87,-7738.46 4388.29,-7858.73 4460,-7785 4526.35,-7716.78 4447.14,-7014.94 4488,-6929 4573.49,-6749.19 4736.14,-6812.67 4826,-6635 4870.28,-6547.46 4801.58,-6272.29 4862,-6195 4888.61,-6160.96 4938.02,-6148.62 4974.33,-6144.23"/>
<polygon fill="blue" stroke="blue" points="4975.09,-6147.67 4984.67,-6143.15 4974.36,-6140.71 4975.09,-6147.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4659.69,-9817.74C4673.48,-9668.25 4768.51,-8629.77 4826,-7785 4831.02,-7711.28 4821.86,-7183.03 4862,-7121 4884.24,-7086.64 4925.95,-7066.09 4960.8,-7054.29"/>
<polygon fill="blue" stroke="blue" points="4961.98,-7057.59 4970.42,-7051.19 4959.83,-7050.92 4961.98,-7057.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge601" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4265.59,-10033.96C4342.88,-9994.77 4525.96,-9901.93 4611.07,-9858.78"/>
<polygon fill="blue" stroke="blue" points="4612.88,-9861.79 4620.21,-9854.15 4609.71,-9855.55 4612.88,-9861.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding(). -->
<g id="node380" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().</title>
<g id="a_node380"><a xlink:title=" &#160;&#160;&#160;fn test_encrypt_with_padding() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext = b&#39; secret team&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let expected...">
<polygon fill="white" stroke="black" points="3878.5,-10070 3675.5,-10070 3675.5,-10034 3878.5,-10034 3878.5,-10070"/>
<text text-anchor="middle" x="3777" y="-10048.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encrypt_with_padding</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge638" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_encrypt_with_padding().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3878.71,-10052C3972.3,-10052 4107.7,-10052 4179.32,-10052"/>
<polygon fill="blue" stroke="blue" points="4179.41,-10055.5 4189.41,-10052 4179.41,-10048.5 4179.41,-10055.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2(). -->
<g id="node381" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().</title>
<g id="a_node381"><a xlink:title=" &#160;&#160;&#160;fn test_aesgcmsiv_vec2() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// https://tools.ietf.org/html/rfc8452#appendix&#45;C &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_secret_params = GroupSecretParams::generate([0u8; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let plaintext_v...">
<polygon fill="white" stroke="black" points="3858.5,-10016 3695.5,-10016 3695.5,-9980 3858.5,-9980 3858.5,-10016"/>
<text text-anchor="middle" x="3777" y="-9994.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_aesgcmsiv_vec2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge642" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/tests/test_aesgcmsiv_vec2().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3858.71,-10007.69C3951.83,-10018.86 4101.99,-10036.88 4179,-10046.12"/>
<polygon fill="blue" stroke="blue" points="4179.02,-10049.65 4189.37,-10047.36 4179.85,-10042.7 4179.02,-10049.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3870.67,-9602.89C3909.53,-9602.42 3951.7,-9593.71 3978,-9564 4007.26,-9530.95 3972.14,-8010.77 3998,-7975 4125.23,-7799.02 4257.4,-7894.16 4460,-7816 4513.81,-7795.24 4574.72,-7768.64 4614.15,-7750.99"/>
<polygon fill="blue" stroke="blue" points="4616.01,-7754 4623.7,-7746.71 4613.14,-7747.61 4616.01,-7754"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node388" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node388"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="4385.5,-9555 4072.5,-9555 4072.5,-9519 4385.5,-9519 4385.5,-9555"/>
<text text-anchor="middle" x="4229" y="-9533.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3870.69,-9579.88C3927.47,-9573.06 4001.68,-9564.16 4067.75,-9556.23"/>
<polygon fill="blue" stroke="blue" points="4068.34,-9559.68 4077.85,-9555.02 4067.51,-9552.73 4068.34,-9559.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3869.65,-9764.91C3908.79,-9764.58 3951.47,-9755.98 3978,-9726 4008.28,-9691.78 3969.68,-8116.86 3998,-8081 4129.21,-7914.86 4317.58,-8121.64 4460,-7965 4515.65,-7903.8 4433.52,-7843.24 4488,-7781 4519.19,-7745.37 4574.66,-7734.96 4613.3,-7732.27"/>
<polygon fill="blue" stroke="blue" points="4613.92,-7735.74 4623.72,-7731.7 4613.54,-7728.75 4613.92,-7735.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3869.66,-9750.48C3904.6,-9747.01 3944.15,-9739.95 3978,-9726 4072.01,-9687.27 4161.98,-9604.38 4203.72,-9562.43"/>
<polygon fill="blue" stroke="blue" points="4206.42,-9564.68 4210.94,-9555.1 4201.43,-9559.77 4206.42,-9564.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3804.3,-9704.87C3847.88,-9712.86 3934.59,-9721.08 3978,-9672 4009.42,-9636.48 3965.67,-7999.69 3998,-7965 4068.23,-7889.64 4386.47,-7999.14 4460,-7927 4504,-7883.83 4445.7,-7695.84 4488,-7651 4521.26,-7615.74 4580.9,-7614.59 4619.44,-7618.31"/>
<polygon fill="blue" stroke="blue" points="4619.38,-7621.82 4629.71,-7619.46 4620.16,-7614.87 4619.38,-7621.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ClientDecryptionKey]for_first_point_of_attribute().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3814.78,-9544.64C3860.63,-9551.77 3937.85,-9555.41 3978,-9510 4009.75,-9474.1 3969.93,-7823.84 3998,-7785 4025.93,-7746.34 4074,-7726.42 4118.99,-7716.22"/>
<polygon fill="blue" stroke="blue" points="4119.78,-7719.64 4128.83,-7714.13 4118.33,-7712.79 4119.78,-7719.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3848.82,-9464.84C3894.29,-9449.13 3949.9,-9421.41 3978,-9375 4021.57,-9303.04 3944.12,-7925.6 3998,-7861 4077.5,-7765.69 4481.05,-7739.66 4613.69,-7733.62"/>
<polygon fill="blue" stroke="blue" points="4614.02,-7737.11 4623.85,-7733.17 4613.71,-7730.11 4614.02,-7737.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3928.16,-9501.02C3973.04,-9506.4 4022.41,-9512.33 4067.91,-9517.79"/>
<polygon fill="blue" stroke="blue" points="4067.51,-9521.27 4077.86,-9518.98 4068.35,-9514.32 4067.51,-9521.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3833.65,-9655.1C3879.66,-9659.9 3942.95,-9657.63 3978,-9618 4009.12,-9582.81 3971.77,-7965.97 3998,-7927 4122.37,-7742.26 4318.56,-7905.02 4460,-7733 4499.19,-7685.33 4443.42,-7639.67 4488,-7597 4517.65,-7568.62 4564.6,-7563.09 4601.34,-7563.97"/>
<polygon fill="blue" stroke="blue" points="4601.28,-7567.47 4611.41,-7564.37 4601.56,-7560.48 4601.28,-7567.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4243.16,-9518.94C4284.94,-9460.33 4414.56,-9268.73 4460,-9087 4470.77,-9043.93 4458.91,-7522.54 4488,-7489 4515.25,-7457.59 4563.32,-7452.56 4601.09,-7454.39"/>
<polygon fill="blue" stroke="blue" points="4601.23,-7457.91 4611.44,-7455.08 4601.69,-7450.92 4601.23,-7457.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="node416" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<g id="a_node416"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_bytes: UidBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CommitmentWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let commitment_system = SystemParams::get_hardcoded...">
<polygon fill="white" stroke="black" points="4684,-10221 4630,-10221 4630,-10185 4684,-10185 4684,-10221"/>
<text text-anchor="middle" x="4657" y="-10199.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge547" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3778,-8004.73C3779.14,-7921.02 3796.15,-7572.24 3998,-7432 4166.63,-7314.84 4314.05,-7287.57 4460,-7432 4512.78,-7484.23 4450.68,-10040.81 4488,-10105 4516.47,-10153.98 4579.79,-10180.85 4620.04,-10193.56"/>
<polygon fill="blue" stroke="blue" points="4619.16,-10196.95 4629.75,-10196.49 4621.18,-10190.24 4619.16,-10196.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node439" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node439"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="4257,-8320 4201,-8320 4201,-8284 4257,-8284 4257,-8320"/>
<text text-anchor="middle" x="4229" y="-8298.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3841.14,-10894.84C3886.35,-10898.61 3944.88,-10894.59 3978,-10857 4024.42,-10804.31 3951.12,-8381.29 3998,-8329 4045.96,-8275.51 4139.03,-8283.54 4190.86,-8293.26"/>
<polygon fill="blue" stroke="blue" points="4190.47,-8296.76 4200.96,-8295.28 4191.84,-8289.89 4190.47,-8296.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="node410" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<g id="a_node410"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid: uid_struct::UidStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile...">
<polygon fill="white" stroke="black" points="4826,-11338 4488,-11338 4488,-11302 4826,-11302 4826,-11338"/>
<text text-anchor="middle" x="4657" y="-11316.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.01,-10714.69C3937.75,-10719.85 3961.06,-10730.19 3978,-10749 4027.77,-10804.25 3944.64,-11366.21 3998,-11418 4071.67,-11489.5 4370.25,-11467.86 4460,-11418 4480.59,-11406.56 4469.39,-11387.44 4488,-11373 4505.89,-11359.12 4527.49,-11348.83 4549.15,-11341.22"/>
<polygon fill="blue" stroke="blue" points="4550.38,-11344.5 4558.76,-11338.02 4548.16,-11337.86 4550.38,-11344.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node429" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node429"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="4685,-10632 4629,-10632 4629,-10596 4685,-10596 4685,-10632"/>
<text text-anchor="middle" x="4657" y="-10610.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.26,-10705.36C4118.95,-10680.06 4499.11,-10633.3 4618.87,-10618.57"/>
<polygon fill="blue" stroke="blue" points="4619.49,-10622.02 4628.99,-10617.32 4618.64,-10615.07 4619.49,-10622.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node432" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node432"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="4684,-11010 4630,-11010 4630,-10974 4684,-10974 4684,-11010"/>
<text text-anchor="middle" x="4657" y="-10988.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3913.22,-10716.28C3937.48,-10721.45 3960.56,-10731.39 3978,-10749 4028.42,-10799.92 3947.35,-10858.3 3998,-10909 4170.63,-11081.83 4509.05,-11025.2 4619.9,-11000.74"/>
<polygon fill="blue" stroke="blue" points="4620.92,-11004.1 4629.91,-10998.48 4619.38,-10997.27 4620.92,-11004.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node428" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node428"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="4685,-10848 4629,-10848 4629,-10812 4685,-10812 4685,-10848"/>
<text text-anchor="middle" x="4657" y="-10826.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3920.15,-10558.94C3941.27,-10564.25 3961.47,-10573.04 3978,-10587 4000.77,-10606.22 3976.91,-10629.95 3998,-10651 4159.4,-10812.06 4265.99,-10751 4488,-10803 4532.44,-10813.41 4584.44,-10821.09 4618.68,-10825.54"/>
<polygon fill="blue" stroke="blue" points="4618.35,-10829.03 4628.71,-10826.82 4619.23,-10822.08 4618.35,-10829.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node424" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node424"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="4685,-10686 4629,-10686 4629,-10650 4685,-10650 4685,-10686"/>
<text text-anchor="middle" x="4657" y="-10664.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4291.82,-10440.04C4343.92,-10458.32 4416.7,-10491.64 4460,-10545 4488.01,-10579.51 4454.68,-10611.59 4488,-10641 4523.73,-10672.54 4581.15,-10675.05 4618.73,-10672.59"/>
<polygon fill="blue" stroke="blue" points="4619.08,-10676.08 4628.77,-10671.79 4618.52,-10669.1 4619.08,-10676.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node425" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node425"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="4684,-10902 4630,-10902 4630,-10866 4684,-10866 4684,-10902"/>
<text text-anchor="middle" x="4657" y="-10880.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3924.46,-10794.02C4132.88,-10819.65 4502.73,-10865.15 4619.57,-10879.52"/>
<polygon fill="blue" stroke="blue" points="4619.41,-10883.03 4629.76,-10880.77 4620.26,-10876.08 4619.41,-10883.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node426" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node426"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="4684,-10578 4630,-10578 4630,-10542 4684,-10542 4684,-10578"/>
<text text-anchor="middle" x="4657" y="-10556.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.22,-10341.57C3940.2,-10346.89 3961.18,-10356.04 3978,-10371 4004.74,-10394.79 3971.69,-10424.74 3998,-10449 4160.45,-10598.77 4270.03,-10496.8 4488,-10533 4533.42,-10540.54 4585.82,-10548.91 4619.85,-10554.3"/>
<polygon fill="blue" stroke="blue" points="4619.37,-10557.77 4629.8,-10555.88 4620.47,-10550.86 4619.37,-10557.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.7,-10611.25C3956.55,-10605.47 3968.29,-10597.58 3978,-10587 4008.92,-10553.32 3964.89,-10207.53 3998,-10176 4087.58,-10090.67 4495.95,-10168.91 4620.09,-10195.14"/>
<polygon fill="blue" stroke="blue" points="4619.37,-10198.57 4629.88,-10197.23 4620.83,-10191.72 4619.37,-10198.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="node419" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node419"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4696.5,-11093 4617.5,-11093 4617.5,-11057 4696.5,-11057 4696.5,-11093"/>
<text text-anchor="middle" x="4657" y="-11071.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.76,-10616.7C3956.6,-10622.49 3968.31,-10630.39 3978,-10641 4012.57,-10678.86 3960.97,-11066.54 3998,-11102 4072.15,-11173.01 4357.57,-11109.02 4460,-11102 4510.6,-11098.53 4568.03,-11090.08 4607.58,-11083.55"/>
<polygon fill="blue" stroke="blue" points="4608.2,-11087 4617.48,-11081.89 4607.04,-11080.09 4608.2,-11087"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node421" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node421"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_struct: profile_key_struct::ProfileKeyStruct, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let r1 = sho.get_scalar(); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4692,-11147 4622,-11147 4622,-11111 4692,-11111 4692,-11147"/>
<text text-anchor="middle" x="4657" y="-11125.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.79,-10616.67C3956.62,-10622.47 3968.33,-10630.38 3978,-10641 4014.76,-10681.37 3958.61,-11094.19 3998,-11132 4085.25,-11215.77 4478.4,-11158.9 4611.67,-11136.74"/>
<polygon fill="blue" stroke="blue" points="4612.63,-11140.13 4621.91,-11135.02 4611.47,-11133.23 4612.63,-11140.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node430" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node430"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="4684,-10956 4630,-10956 4630,-10920 4684,-10920 4684,-10956"/>
<text text-anchor="middle" x="4657" y="-10934.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3943.91,-10619.26C3956.39,-10624.6 3967.99,-10631.7 3978,-10641 4009.61,-10670.37 3969.63,-10703.49 3998,-10736 4150.07,-10910.22 4264.01,-10853.52 4488,-10911 4532.73,-10922.48 4585.48,-10930.01 4619.77,-10934.13"/>
<polygon fill="blue" stroke="blue" points="4619.45,-10937.62 4629.79,-10935.3 4620.27,-10930.66 4619.45,-10937.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node427" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node427"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="4685,-10794 4629,-10794 4629,-10758 4685,-10758 4685,-10794"/>
<text text-anchor="middle" x="4657" y="-10772.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge555" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3916.18,-10448.38C3939.05,-10453.65 3960.85,-10463.1 3978,-10479 4009.32,-10508.04 3967.16,-10543.44 3998,-10573 4148.33,-10717.09 4304.81,-10512.15 4460,-10651 4493.76,-10681.2 4454.12,-10718.93 4488,-10749 4523.64,-10780.64 4581.08,-10783.12 4618.69,-10780.63"/>
<polygon fill="blue" stroke="blue" points="4619.05,-10784.12 4628.74,-10779.82 4618.49,-10777.14 4619.05,-10784.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="node415" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<g id="a_node415"><a xlink:title=" &#160;&#160;&#160;pub fn create_blinded_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: receipt_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expi...">
<polygon fill="white" stroke="black" points="4780.5,-11230 4533.5,-11230 4533.5,-11194 4780.5,-11194 4780.5,-11230"/>
<text text-anchor="middle" x="4657" y="-11208.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_blinded_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge569" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3868.2,-10494.24C3907.65,-10494.42 3951,-10502.86 3978,-10533 4008.19,-10566.69 3965.62,-11315.41 3998,-11347 4034.74,-11382.85 4419.4,-11378.41 4460,-11347 4499.22,-11316.65 4451.32,-11272.37 4488,-11239 4498.29,-11229.64 4510.47,-11222.81 4523.51,-11217.9"/>
<polygon fill="blue" stroke="blue" points="4524.78,-11221.16 4533.13,-11214.65 4522.54,-11214.53 4524.78,-11221.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node433" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node433"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="4684,-10524 4630,-10524 4630,-10488 4684,-10488 4684,-10524"/>
<text text-anchor="middle" x="4657" y="-10502.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge568" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3868.24,-10506C4058.08,-10506 4491.74,-10506 4619.77,-10506"/>
<polygon fill="blue" stroke="blue" points="4619.83,-10509.5 4629.83,-10506 4619.83,-10502.5 4619.83,-10509.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node431" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node431"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="4685,-10740 4629,-10740 4629,-10704 4685,-10704 4685,-10740"/>
<text text-anchor="middle" x="4657" y="-10718.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge598" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3874.51,-10389.41C3910.91,-10391.26 3950.19,-10400.12 3978,-10425 4005.31,-10449.44 3970.84,-10480.4 3998,-10505 4151.83,-10644.33 4307.53,-10432.19 4460,-10573 4500.87,-10610.74 4447.38,-10656.99 4488,-10695 4522.9,-10727.66 4580.79,-10729.82 4618.67,-10726.99"/>
<polygon fill="blue" stroke="blue" points="4619.14,-10730.46 4628.79,-10726.08 4618.51,-10723.49 4619.14,-10730.46"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node441" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node441"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4256,-8374 4202,-8374 4202,-8338 4256,-8338 4256,-8374"/>
<text text-anchor="middle" x="4229" y="-8352.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge599" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3804.32,-10943.89C3847.93,-10951.91 3934.68,-10960.16 3978,-10911 4023.95,-10858.85 3954.51,-8463.21 3998,-8409 4044.18,-8351.44 4139.21,-8348.64 4191.51,-8352.03"/>
<polygon fill="blue" stroke="blue" points="4191.44,-8355.54 4201.68,-8352.81 4191.97,-8348.56 4191.44,-8355.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge608" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3929.71,-10988.23C3947.05,-10983.09 3963.63,-10975.62 3978,-10965 4156.61,-10832.91 4211.32,-10542.09 4224.45,-10450.32"/>
<polygon fill="blue" stroke="blue" points="4227.95,-10450.53 4225.85,-10440.14 4221.02,-10449.57 4227.95,-10450.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="node434" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<g id="a_node434"><a xlink:title=" &#160;&#160;&#160;pub fn encrypt( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; CiphertextWithSecretNonce { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let M2 = credentials::convert_to_point_M2_recei...">
<polygon fill="white" stroke="black" points="4264,-8129 4194,-8129 4194,-8093 4264,-8093 4264,-8129"/>
<text text-anchor="middle" x="4229" y="-8107.3" font-family="Helvetica,sans-Serif" font-size="14.00">encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge621" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3810.51,-10271.82C3857.69,-10243.34 3943.31,-10183.27 3978,-10105 4000.14,-10055.05 3961.48,-8178.64 3998,-8138 4043.85,-8086.98 4130.76,-8091.97 4183.62,-8100.98"/>
<polygon fill="blue" stroke="blue" points="4183.25,-8104.47 4193.72,-8102.82 4184.51,-8097.58 4183.25,-8104.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="node435" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<g id="a_node435"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let y = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Y = y * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { y, Y } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4268.5,-8183 4189.5,-8183 4189.5,-8147 4268.5,-8147 4268.5,-8183"/>
<text text-anchor="middle" x="4229" y="-8161.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge620" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3810.5,-10271.82C3857.68,-10243.34 3943.29,-10183.26 3978,-10105 3999.25,-10057.08 3965.14,-8258.84 3998,-8218 4040.83,-8164.76 4125.45,-8158.39 4179.25,-8160.42"/>
<polygon fill="blue" stroke="blue" points="4179.09,-8163.92 4189.24,-8160.91 4179.43,-8156.93 4179.09,-8163.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge741" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3645.29,-10843.06C3611.07,-10838.66 3579.91,-10825.23 3566,-10794 3552.9,-10764.58 3552.9,-8504.42 3566,-8475 3593.07,-8414.21 3685.5,-8420.85 3738.62,-8430.33"/>
<polygon fill="blue" stroke="blue" points="3738.21,-8433.81 3748.68,-8432.24 3739.51,-8426.94 3738.21,-8433.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge843" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.81,-10675.98C3862.91,-10682.92 3938.51,-10685.82 3978,-10641 4025.01,-10587.64 3955.12,-8137.73 3998,-8081 4126.98,-7910.33 4329.16,-8115.24 4460,-7946 4523.98,-7863.25 4417.14,-7081.94 4488,-7005 4590.41,-6893.81 4719.45,-7074.24 4826,-6967 4879.55,-6913.1 4805.52,-6677.82 4862,-6627 4888.76,-6602.92 5155.41,-6608.02 5186,-6627 5195.07,-6632.63 5256.22,-6763.02 5283.22,-6821.3"/>
<polygon fill="blue" stroke="blue" points="5280.17,-6823.04 5287.55,-6830.65 5286.53,-6820.1 5280.17,-6823.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge844" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.55,-10675.74C3862.39,-10682.45 3937.73,-10685.13 3978,-10641 4013.08,-10602.55 3963.15,-10211.66 3998,-10173 4136.97,-10018.85 4323.49,-10261.34 4460,-10105 4506.81,-10051.39 4441.54,-7596.92 4488,-7543 4516.67,-7509.72 4568.73,-7505.99 4607.32,-7508.72"/>
<polygon fill="blue" stroke="blue" points="4607.05,-7512.2 4617.32,-7509.58 4607.66,-7505.23 4607.05,-7512.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="node412" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<g id="a_node412"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(S::NUM_ATTRS &gt;= 1, &#39; at least one attribute required&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S::NUM_ATTRS &lt;= NUM_SUPPORTED_ATTRS, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; mo...">
<polygon fill="white" stroke="black" points="4696.5,-11284 4617.5,-11284 4617.5,-11248 4696.5,-11248 4696.5,-11284"/>
<text text-anchor="middle" x="4657" y="-11262.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge842" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.65,-10660.17C3862.59,-10653.37 3938.03,-10650.6 3978,-10695 4028.94,-10751.59 3943.38,-11326.95 3998,-11380 4034.82,-11415.76 4418.51,-11410.23 4460,-11380 4492.83,-11356.08 4457.18,-11319.46 4488,-11293 4520.58,-11265.03 4570.31,-11260.12 4607.22,-11261.1"/>
<polygon fill="blue" stroke="blue" points="4607.13,-11264.6 4617.27,-11261.51 4607.42,-11257.6 4607.13,-11264.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="node440" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<g id="a_node440"><a xlink:title=" &#160;&#160;&#160;pub fn generate(sho: &amp;mut Sho) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signing_key = sho.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = signing_key * RISTRETTO_BASEPOINT_POINT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key, &#160;&#160;...">
<polygon fill="white" stroke="black" points="4268.5,-8266 4189.5,-8266 4189.5,-8230 4268.5,-8230 4268.5,-8266"/>
<text text-anchor="middle" x="4229" y="-8244.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge845" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3816.81,-10675.97C3862.9,-10682.91 3938.5,-10685.81 3978,-10641 4021.46,-10591.7 3954.11,-8323.92 3998,-8275 4042.64,-8225.24 4126.33,-8228.73 4179.5,-8237.29"/>
<polygon fill="blue" stroke="blue" points="4178.94,-8240.74 4189.39,-8238.99 4180.13,-8233.84 4178.94,-8240.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main(). -->
<g id="node405" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().</title>
<g id="a_node405"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;let mut randomness = [0u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut randomness); &#160;&#160;&#160;&#160;&#160;let secret_params = GenericServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3285,-8673 3231,-8673 3231,-8637 3285,-8637 3285,-8673"/>
<text text-anchor="middle" x="3258" y="-8651.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.38,-8662.3C3344.13,-8676.78 3486.06,-8701.49 3556,-8625 3589.29,-8588.59 3542.15,-6884.89 3576,-6849 3637.45,-6783.86 3915.4,-6885.03 3978,-6821 4011.05,-6787.2 3963.8,-6428.63 3998,-6396 4146.57,-6254.26 4302.5,-6264.26 4460,-6396 4514.03,-6441.2 4438.17,-6502.21 4488,-6552 4518.75,-6582.72 4569.43,-6588.08 4607.1,-6587.06"/>
<polygon fill="blue" stroke="blue" points="4607.51,-6590.55 4617.35,-6586.62 4607.21,-6583.56 4607.51,-6590.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3285.26,-8650.09C3344.4,-8640.73 3488.16,-8627.83 3556,-8708 3590.69,-8748.99 3540.45,-10600.75 3576,-10641 3612.77,-10682.63 3680.68,-10683.06 3727.07,-10677.35"/>
<polygon fill="blue" stroke="blue" points="3727.77,-10680.78 3737.21,-10675.96 3726.83,-10673.85 3727.77,-10680.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="node406" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<g id="a_node406"><a xlink:title=" &#160;&#160;&#160;pub fn get_scalar(&amp;mut self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Scalar::from_bytes_mod_order_wide(&amp;self.internal_sho.squeeze_and_ratchet_as_array()) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="5340.5,-10882 5253.5,-10882 5253.5,-10846 5340.5,-10846 5340.5,-10882"/>
<text text-anchor="middle" x="5297" y="-10860.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order_wide().</title>
<path fill="none" stroke="blue" d="M5307.23,-10882.36C5343.7,-10954.93 5481.07,-11228.92 5591,-11456 5639.45,-11556.09 5695.55,-11675.77 5720.23,-11728.61"/>
<polygon fill="blue" stroke="blue" points="5717.07,-11730.1 5724.47,-11737.68 5723.41,-11727.14 5717.07,-11730.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="node407" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<g id="a_node407"><a xlink:title="pub fn encode_receipt_serial_bytes(receipt_serial_bytes: ReceiptSerialBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..16].copy_from_slice(&amp;receipt_seria...">
<polygon fill="white" stroke="black" points="4762,-10358 4552,-10358 4552,-10322 4762,-10322 4762,-10358"/>
<text text-anchor="middle" x="4657" y="-10336.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M4762,-10338.47C4896.19,-10338.49 5120.21,-10345.92 5186,-10393 5361.24,-10518.4 5328.71,-10626.68 5387.5,-10834 5484.6,-11176.4 5499.75,-11613.45 5502.08,-11727.68"/>
<polygon fill="blue" stroke="blue" points="5498.58,-11727.77 5502.27,-11737.71 5505.58,-11727.64 5498.58,-11727.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time(). -->
<g id="node408" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().</title>
<g id="a_node408"><a xlink:title="pub fn encode_redemption_time(redemption_time: u32) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;let mut scalar_bytes: [u8; 32] = Default::default(); &#160;&#160;&#160;&#160;scalar_bytes[0..4].copy_from_slice(&amp;redemption_time.to_be_bytes()); &#160;&#160;&#160;&#160;Sca...">
<polygon fill="white" stroke="black" points="4752.5,-10304 4561.5,-10304 4561.5,-10268 4752.5,-10268 4752.5,-10304"/>
<text text-anchor="middle" x="4657" y="-10282.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_redemption_time</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order(). -->
<g id="edge516" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_redemption_time().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]from_bytes_mod_order().</title>
<path fill="none" stroke="blue" d="M4752.51,-10286.3C4931.95,-10289.16 5310.95,-10306.95 5387.5,-10405 5471.83,-10513.01 5497.9,-11542.34 5501.92,-11727.53"/>
<polygon fill="blue" stroke="blue" points="5498.42,-11727.66 5502.13,-11737.58 5505.42,-11727.51 5498.42,-11727.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="node409" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<g id="a_node409"><a xlink:title=" &#160;&#160;&#160;fn credential_core( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; (Scalar, RistrettoPoint, RistrettoPoint) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M.len() &lt;= S::NUM_ATTRS, &#160;&#160;...">
<polygon fill="white" stroke="black" points="5080.5,-11232 4959.5,-11232 4959.5,-11196 5080.5,-11196 5080.5,-11232"/>
<text text-anchor="middle" x="5020" y="-11210.3" font-family="Helvetica,sans-Serif" font-size="14.00">credential_core</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5038.8,-11195.97C5070.1,-11163.87 5136.4,-11094.16 5186,-11030 5222.34,-10983 5259.46,-10924.3 5279.93,-10890.78"/>
<polygon fill="blue" stroke="blue" points="5283.05,-10892.39 5285.25,-10882.03 5277.07,-10888.76 5283.05,-10892.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4813.84,-11301.81C4818.1,-11299.17 4822.16,-11296.24 4826,-11293 4864.01,-11260.9 4830.78,-11225.74 4862,-11187 4967.45,-11056.13 5057.6,-11100.44 5186,-10992 5222.36,-10961.29 5256.86,-10918.03 5277.23,-10890.5"/>
<polygon fill="blue" stroke="blue" points="5280.25,-10892.29 5283.33,-10882.15 5274.6,-10888.16 5280.25,-10892.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4788.88,-11301.98C4801.51,-11299.34 4814.06,-11296.36 4826,-11293 4877.73,-11278.46 4934.35,-11254.23 4972.8,-11236.43"/>
<polygon fill="blue" stroke="blue" points="4974.6,-11239.45 4982.18,-11232.05 4971.63,-11233.11 4974.6,-11239.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="node442" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<g id="a_node442"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m_from(timestamp: Timestamp) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20220524_Timestamp_Calc_m&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;timestamp.to_be_bytes(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="5071.5,-11421 4968.5,-11421 4968.5,-11385 5071.5,-11385 5071.5,-11421"/>
<text text-anchor="middle" x="5020" y="-11399.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4722.97,-11338.04C4762.91,-11348.84 4815.23,-11362.47 4862,-11373 4893.6,-11380.12 4929.03,-11386.98 4958.22,-11392.34"/>
<polygon fill="blue" stroke="blue" points="4957.81,-11395.83 4968.27,-11394.18 4959.06,-11388.94 4957.81,-11395.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node411" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node411"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="4268.5,-11338 4189.5,-11338 4189.5,-11302 4268.5,-11302 4268.5,-11338"/>
<text text-anchor="middle" x="4229" y="-11316.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ExpiringProfileKeyCredential&gt;`]create_blinded_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.56,-11320C4315.99,-11320 4399.79,-11320 4477.35,-11320"/>
<polygon fill="blue" stroke="blue" points="4477.75,-11323.5 4487.75,-11320 4477.75,-11316.5 4477.75,-11323.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.69,-11315.7C4314.42,-11310.56 4392.8,-11301.57 4460,-11293 4510.31,-11286.58 4567.78,-11278.59 4607.42,-11272.97"/>
<polygon fill="blue" stroke="blue" points="4607.95,-11276.43 4617.35,-11271.56 4606.96,-11269.5 4607.95,-11276.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.91,-11328.26C4320.08,-11336.61 4409.4,-11342.17 4460,-11293 4521.53,-11233.21 4427.75,-11163.08 4488,-11102 4518.43,-11071.14 4569.16,-11066.79 4606.92,-11068.69"/>
<polygon fill="blue" stroke="blue" points="4606.99,-11072.2 4617.2,-11069.38 4607.46,-11065.22 4606.99,-11072.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.62,-11327.54C4319.06,-11334.98 4407.12,-11339.41 4460,-11293 4498.24,-11259.44 4453.09,-11219.01 4488,-11182 4520.03,-11148.04 4573.6,-11135.73 4611.63,-11131.33"/>
<polygon fill="blue" stroke="blue" points="4612.31,-11134.78 4621.91,-11130.29 4611.61,-11127.82 4612.31,-11134.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.64,-11328.7C4320.34,-11337.81 4411.16,-11344.48 4460,-11293 4526.82,-11222.56 4422.69,-10928.84 4488,-10857 4520.42,-10821.33 4579.76,-10820.16 4618.53,-10824.01"/>
<polygon fill="blue" stroke="blue" points="4618.55,-10827.53 4628.88,-10825.2 4619.35,-10820.58 4618.55,-10827.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.72,-11328.43C4320.09,-11337.1 4410.08,-11343.15 4460,-11293 4538.26,-11214.39 4417.5,-11130.63 4488,-11045 4520.07,-11006.05 4580.59,-10995.29 4619.56,-10992.56"/>
<polygon fill="blue" stroke="blue" points="4620.15,-10996.04 4629.94,-10991.99 4619.76,-10989.05 4620.15,-10996.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.76,-11271.59C4735.06,-11274.73 4792.62,-11272.67 4826,-11239 4901.01,-11163.34 4786.41,-11077.08 4862,-11002 4965.23,-10899.46 5053,-11014.01 5186,-10955 5220.3,-10939.78 5252.51,-10910.73 5273.1,-10889.54"/>
<polygon fill="blue" stroke="blue" points="5275.79,-10891.78 5280.14,-10882.12 5270.71,-10886.96 5275.79,-10891.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="node413" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<g id="a_node413"><a xlink:title="pub(crate) fn convert_to_points_receipt_struct( &#160;&#160;&#160;&#160;receipt: receipt_struct::ReceiptStruct, ) &#45;&gt; Vec&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let m1 = receipt.calc_m1(); &#160;...">
<polygon fill="white" stroke="black" points="4349,-11284 4109,-11284 4109,-11248 4349,-11248 4349,-11284"/>
<text text-anchor="middle" x="4229" y="-11262.3" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_points_receipt_struct</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge530" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4349.12,-11281.23C4389.88,-11279.66 4432.17,-11269.26 4460,-11239 4523.66,-11169.77 4431.15,-10467.92 4488,-10393 4501.61,-10375.07 4521.28,-10363.06 4542.4,-10355.07"/>
<polygon fill="blue" stroke="blue" points="4543.57,-10358.37 4551.86,-10351.77 4541.27,-10351.76 4543.57,-10358.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="node436" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<g id="a_node436"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m1_from(self.receipt_expiration_time, self.receipt_level) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4693.5,-10441 4620.5,-10441 4620.5,-10405 4693.5,-10405 4693.5,-10441"/>
<text text-anchor="middle" x="4657" y="-10419.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1(). -->
<g id="edge529" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4349.06,-11281.17C4389.82,-11279.6 4432.12,-11269.21 4460,-11239 4517.53,-11176.66 4436.6,-10543.49 4488,-10476 4516.41,-10438.7 4571.04,-10427.07 4610.3,-10423.74"/>
<polygon fill="blue" stroke="blue" points="4610.69,-10427.22 4620.42,-10423.03 4610.2,-10420.24 4610.69,-10427.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="node414" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<g id="a_node414"><a xlink:title="pub(crate) fn convert_to_point_M2_receipt_serial_bytes( &#160;&#160;&#160;&#160;receipt_serial_bytes: ReceiptSerialBytes, ) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;let system = SystemParams::get_hardcoded(); &#160;&#160;&#160;&#160;let receipt_serial_scala...">
<polygon fill="white" stroke="black" points="4380,-11230 4078,-11230 4078,-11194 4380,-11194 4380,-11230"/>
<text text-anchor="middle" x="4229" y="-11208.3" font-family="Helvetica,sans-Serif" font-size="14.00">convert_to_point_M2_receipt_serial_bytes</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes(). -->
<g id="edge633" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/simple_types/encode_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4380.08,-11222.04C4410.39,-11216.63 4439.27,-11204.78 4460,-11182 4519.04,-11117.12 4434.89,-10462.82 4488,-10393 4501.63,-10375.08 4521.31,-10363.09 4542.44,-10355.09"/>
<polygon fill="blue" stroke="blue" points="4543.6,-10358.39 4551.89,-10351.8 4541.3,-10351.78 4543.6,-10358.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge644" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4780.68,-11208.42C4797.65,-11203.02 4813.51,-11194.65 4826,-11182 4894.98,-11112.11 4791.68,-11032.54 4862,-10964 4914.06,-10913.26 5116.57,-10940.54 5186,-10919 5210.87,-10911.28 5237.01,-10898.44 5257.56,-10887.1"/>
<polygon fill="blue" stroke="blue" points="5259.3,-10890.14 5266.3,-10882.19 5255.87,-10884.04 5259.3,-10890.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core(). -->
<g id="edge645" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]credential_core().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4780.72,-11212.68C4836.9,-11212.99 4901.42,-11213.35 4949.15,-11213.61"/>
<polygon fill="blue" stroke="blue" points="4949.35,-11217.11 4959.37,-11213.67 4949.39,-11210.11 4949.35,-11217.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="node437" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<g id="a_node437"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m1_from(receipt_expiration_time: Timestamp, receipt_level: ReceiptLevel) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;[0u8; std::mem::size_of::&lt;Timestamp&gt;() + std::mem::size_of::&lt;Re...">
<polygon fill="white" stroke="black" points="5076,-10441 4964,-10441 4964,-10405 5076,-10405 5076,-10441"/>
<text text-anchor="middle" x="5020" y="-10419.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m1_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge643" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4780.52,-11208.82C4797.62,-11203.39 4813.56,-11194.91 4826,-11182 4865.86,-11140.63 4849.4,-10982.05 4862,-10926 4903.49,-10741.45 4980.38,-10526.87 5008.42,-10451.17"/>
<polygon fill="blue" stroke="blue" points="5011.84,-10452.02 5012.04,-10441.43 5005.28,-10449.58 5011.84,-10452.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="node418" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<g id="a_node418"><a xlink:title=" &#160;&#160;&#160;pub fn calc_j3(profile_key_bytes: ProfileKeyBytes, uid_bytes: UidBytes) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut combined_array = [0u8; PROFILE_KEY_LEN + UUID_LEN]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;combined_array[..PROFILE_KEY_LEN].co...">
<polygon fill="white" stroke="black" points="5051.5,-10221 4988.5,-10221 4988.5,-10185 5051.5,-10185 5051.5,-10221"/>
<text text-anchor="middle" x="5020" y="-10199.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_j3</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.25,-10203C4746.42,-10203 4903.01,-10203 4977.88,-10203"/>
<polygon fill="blue" stroke="blue" points="4978.32,-10206.5 4988.32,-10203 4978.32,-10199.5 4978.32,-10206.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment(). -->
<g id="node417" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().</title>
<g id="a_node417"><a xlink:title=" &#160;&#160;&#160;fn test_commitment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let profile_key = profile_key_struct::ProfileKeyStruct::new(TEST_ARRAY_32, TEST_ARRAY_16); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let c1 = CommitmentWithSecretNonce::new(profile_key, TEST_ARRAY_16...">
<polygon fill="white" stroke="black" points="4297.5,-10221 4160.5,-10221 4160.5,-10185 4297.5,-10185 4297.5,-10221"/>
<text text-anchor="middle" x="4229" y="-10199.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_commitment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge532" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/tests/test_commitment().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.5,-10203C4388.77,-10203 4548.32,-10203 4619.69,-10203"/>
<polygon fill="blue" stroke="blue" points="4619.96,-10206.5 4629.96,-10203 4619.96,-10199.5 4619.96,-10206.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge854" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]calc_j3().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5042.4,-10221.11C5077.92,-10252.4 5148.84,-10320.25 5186,-10393 5265.01,-10547.67 5288.15,-10759.86 5294.13,-10835.66"/>
<polygon fill="blue" stroke="blue" points="5290.65,-10836.12 5294.89,-10845.84 5297.63,-10835.6 5290.65,-10836.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4696.67,-11079.3C4734.63,-11081.24 4791.67,-11077.69 4826,-11045 4877.84,-10995.63 4807.26,-10934.14 4862,-10888 4918.2,-10840.63 5140.19,-10851.46 5243.1,-10859.34"/>
<polygon fill="blue" stroke="blue" points="5243.03,-10862.84 5253.27,-10860.14 5243.57,-10855.87 5243.03,-10862.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response(). -->
<g id="node420" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().</title>
<g id="a_node420"><a xlink:title=" &#160;&#160;&#160;fn test_request_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let blind_key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4315,-11093 4143,-11093 4143,-11057 4315,-11057 4315,-11093"/>
<text text-anchor="middle" x="4229" y="-11071.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new(). -->
<g id="edge533" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_commitment/impl#[CommitmentWithSecretNonce]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.28,-11088.42C4364.88,-11090.98 4424.43,-11084.09 4460,-11045 4519.04,-10980.12 4434.89,-10325.82 4488,-10256 4518.77,-10215.56 4580.36,-10205.29 4619.81,-10203.06"/>
<polygon fill="blue" stroke="blue" points="4619.98,-10206.55 4629.82,-10202.64 4619.68,-10199.56 4619.98,-10206.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate(). -->
<g id="edge535" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.18,-11075C4402.78,-11075 4536.14,-11075 4607.28,-11075"/>
<polygon fill="blue" stroke="blue" points="4607.32,-11078.5 4617.31,-11075 4607.31,-11071.5 4607.32,-11078.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge534" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/tests/test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4315.18,-11085.8C4404.56,-11097.13 4541.59,-11114.5 4611.55,-11123.37"/>
<polygon fill="blue" stroke="blue" points="4611.42,-11126.88 4621.78,-11124.66 4612.3,-11119.93 4611.42,-11126.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge538" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4692.22,-11133.89C4730.11,-11137.22 4790.49,-11136.03 4826,-11102 4883.64,-11046.75 4803.52,-10980.36 4862,-10926 4915.17,-10876.57 5114.26,-10895.16 5186,-10884 5204.68,-10881.09 5225.08,-10877.5 5243.18,-10874.17"/>
<polygon fill="blue" stroke="blue" points="5244.06,-10877.56 5253.25,-10872.3 5242.78,-10870.68 5244.06,-10877.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption(). -->
<g id="node422" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().</title>
<g id="a_node422"><a xlink:title=" &#160;&#160;&#160;fn test_profile_key_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32_1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Profile_Key_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::ge...">
<polygon fill="white" stroke="black" points="4759.5,-6243 4554.5,-6243 4554.5,-6207 4759.5,-6207 4759.5,-6243"/>
<text text-anchor="middle" x="4657" y="-6221.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge489" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4759.73,-6236.25C4785.14,-6244.06 4809.75,-6256.93 4826,-6278 4875.94,-6342.74 4807.8,-6951.78 4862,-7013 4885.93,-7040.02 4926.26,-7046.51 4960.05,-7046.38"/>
<polygon fill="blue" stroke="blue" points="4960.39,-7049.87 4970.3,-7046.14 4960.22,-7042.87 4960.39,-7049.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt(). -->
<g id="edge490" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/tests/test_profile_key_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4759.52,-6225C4830.29,-6225 4921.25,-6225 4974.54,-6225"/>
<polygon fill="blue" stroke="blue" points="4974.67,-6228.5 4984.67,-6225 4974.67,-6221.5 4974.67,-6228.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge591" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/profile_key_encryption/impl#[ProfileKeyEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5027.96,-6243.1C5055.07,-6314.72 5153.73,-6585.76 5186,-6819 5190.72,-6853.15 5185.37,-11755.38 5206,-11783 5218.03,-11799.1 5239.32,-11805.96 5258.18,-11808.74"/>
<polygon fill="blue" stroke="blue" points="5257.99,-11812.24 5268.33,-11809.9 5258.79,-11805.28 5257.99,-11812.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.26,-10665.68C4720.76,-10664.06 4783.31,-10666.11 4826,-10695 4851.76,-10712.43 4842.65,-10730.65 4862,-10755 4986.58,-10911.74 5091.02,-10891.74 5186,-11068 5290.13,-11261.24 5297.19,-11536.56 5296.58,-11624.71"/>
<polygon fill="blue" stroke="blue" points="5293.07,-11624.93 5296.46,-11634.97 5300.07,-11625.01 5293.07,-11624.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.18,-10663.14C4722.98,-10658.13 4790.75,-10655.79 4826,-10695 4926.87,-10807.2 4762.79,-11259.32 4862,-11373 4885.4,-11399.81 4924.75,-11407.29 4958.2,-11408.08"/>
<polygon fill="blue" stroke="blue" points="4958.35,-11411.58 4968.37,-11408.12 4958.38,-11404.58 4958.35,-11411.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.16,-10879.33C4721.69,-10874.31 4790.2,-10871.69 4826,-10911 4907.73,-11000.74 4818.17,-11342.81 4862,-11456 4889.72,-11527.58 4953.23,-11593.61 4990.42,-11628.05"/>
<polygon fill="blue" stroke="blue" points="4988.19,-11630.76 4997.94,-11634.91 4992.91,-11625.59 4988.19,-11630.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.23,-10880.06C4717.33,-10875.02 4775.97,-10865.88 4826,-10857 4842.05,-10854.15 4845.78,-10851.56 4862,-10850 5005.34,-10836.19 5042.29,-10840.89 5186,-10850 5204.72,-10851.19 5225.12,-10853.5 5243.21,-10855.9"/>
<polygon fill="blue" stroke="blue" points="5242.9,-10859.39 5253.28,-10857.29 5243.85,-10852.46 5242.9,-10859.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.29,-10555.22C4721.97,-10550.05 4790.68,-10547.25 4826,-10587 4890.19,-10659.24 4828.22,-11365.46 4862,-11456 4888.84,-11527.92 4952.67,-11593.82 4990.16,-11628.15"/>
<polygon fill="blue" stroke="blue" points="4987.97,-11630.89 4997.74,-11634.99 4992.66,-11625.69 4987.97,-11630.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.28,-10562.36C4766.2,-10570.88 5021.23,-10606.21 5186,-10727 5227.24,-10757.24 5261.65,-10806.63 5280.48,-10837.12"/>
<polygon fill="blue" stroke="blue" points="5277.64,-10839.19 5285.81,-10845.93 5283.63,-10835.56 5277.64,-10839.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.14,-10771.43C4722.59,-10766.83 4789.59,-10765.06 4826,-10803 4919.9,-10900.84 4766.03,-11010.18 4862,-11106 4964.6,-11208.44 5078.67,-11046.52 5186,-11144 5258.34,-11209.7 5286.94,-11527.38 5294.09,-11624.64"/>
<polygon fill="blue" stroke="blue" points="5290.62,-11625.15 5294.83,-11634.88 5297.6,-11624.65 5290.62,-11625.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4628.88,-10771.2C4591.15,-10766.25 4523.47,-10763.98 4488,-10803 4422.69,-10874.84 4526.82,-11168.56 4460,-11239 4434.16,-11266.24 4396.55,-11277.2 4359.21,-11280.13"/>
<polygon fill="blue" stroke="blue" points="4358.99,-11276.64 4349.22,-11280.73 4359.41,-11283.63 4358.99,-11276.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.11,-10825.46C4722.52,-10820.9 4789.47,-10819.18 4826,-10857 4915.32,-10949.46 4770.73,-11053.46 4862,-11144 4964.93,-11246.11 5077.87,-11085.41 5186,-11182 5253.24,-11242.06 5285.08,-11532.79 5293.59,-11624.93"/>
<polygon fill="blue" stroke="blue" points="5290.11,-11625.27 5294.49,-11634.91 5297.08,-11624.64 5290.11,-11625.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.09,-10825.22C4722.78,-10820.31 4790.42,-10818.08 4826,-10857 4903.55,-10941.84 4785.7,-11287.03 4862,-11373 4885.54,-11399.52 4924.69,-11407.04 4958.01,-11407.92"/>
<polygon fill="blue" stroke="blue" points="4958.12,-11411.42 4968.14,-11407.99 4958.17,-11404.42 4958.12,-11411.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge549" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.02,-10613.65C4719.45,-10614.24 4780,-10618.74 4826,-10641 4845.54,-10650.45 4842.88,-10663.72 4862,-10674 4992.72,-10744.31 5087.7,-10643.79 5186,-10755 5186,-10755 5273.84,-11472.06 5292.53,-11624.66"/>
<polygon fill="blue" stroke="blue" points="5289.06,-11625.15 5293.75,-11634.66 5296.01,-11624.3 5289.06,-11625.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge590" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.12,-10933.37C4721.6,-10928.39 4790.05,-10925.82 4826,-10965 4899.96,-11045.62 4822.13,-11354.12 4862,-11456 4889.97,-11527.48 4953.39,-11593.55 4990.5,-11628.02"/>
<polygon fill="blue" stroke="blue" points="4988.26,-11630.72 4998,-11634.89 4992.99,-11625.56 4988.26,-11630.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge678" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4685.18,-10717.4C4722.66,-10712.76 4789.7,-10710.96 4826,-10749 4924.49,-10852.23 4761.33,-10966.89 4862,-11068 4964.3,-11170.75 5079.38,-11007.75 5186,-11106 5263.58,-11177.49 5288.78,-11523.31 5294.57,-11624.89"/>
<polygon fill="blue" stroke="blue" points="5291.08,-11625.2 5295.12,-11635 5298.07,-11624.82 5291.08,-11625.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct(). -->
<g id="edge679" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_points_receipt_struct().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4628.85,-10717.16C4591.07,-10712.17 4523.33,-10709.86 4488,-10749 4414.92,-10829.96 4534.78,-11159.61 4460,-11239 4434.19,-11266.4 4396.49,-11277.37 4359.05,-11280.26"/>
<polygon fill="blue" stroke="blue" points="4358.81,-11276.77 4349.03,-11280.85 4359.22,-11283.76 4358.81,-11276.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge709" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.2,-10991.88C4722.1,-10993.26 4791.45,-11001.95 4826,-11045 4883.38,-11116.5 4827.98,-11370.86 4862,-11456 4890.48,-11527.28 4953.71,-11593.42 4990.65,-11627.96"/>
<polygon fill="blue" stroke="blue" points="4988.39,-11630.64 4998.11,-11634.85 4993.13,-11625.49 4988.39,-11630.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge710" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.08,-10991.98C4721.82,-10993.48 4790.98,-11002.33 4826,-11045 4919.04,-11158.36 4762.5,-11265.26 4862,-11373 4886.06,-11399.05 4925.21,-11406.57 4958.4,-11407.57"/>
<polygon fill="blue" stroke="blue" points="4958.45,-11411.07 4968.49,-11407.68 4958.53,-11404.07 4958.45,-11411.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge861" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.3,-10501.2C4722,-10496.02 4790.73,-10493.21 4826,-10533 4894.08,-10609.81 4826.24,-11359.8 4862,-11456 4888.75,-11527.95 4952.62,-11593.84 4990.13,-11628.16"/>
<polygon fill="blue" stroke="blue" points="4987.95,-11630.9 4997.72,-11635 4992.63,-11625.7 4987.95,-11630.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge862" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4684.05,-10502.1C4717.2,-10496.97 4776.15,-10487.27 4826,-10476 4868.93,-10466.29 4916.64,-10453.21 4953.88,-10442.48"/>
<polygon fill="blue" stroke="blue" points="4954.97,-10445.81 4963.6,-10439.66 4953.02,-10439.08 4954.97,-10445.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4264.28,-8118.23C4315.47,-8126.79 4411.08,-8133.69 4460,-8079 4536.77,-7993.17 4410.1,-7127.81 4488,-7043 4590.26,-6931.67 4718.75,-7111.53 4826,-7005 4921.9,-6909.74 4760.92,-6792.75 4862,-6703 4969.68,-6607.39 5082.84,-6602.53 5186,-6703 5190.93,-6707.8 5286.08,-10471.17 5295.29,-10835.7"/>
<polygon fill="blue" stroke="blue" points="5291.79,-10836.02 5295.54,-10845.92 5298.79,-10835.84 5291.79,-10836.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/convert_to_point_M2_receipt_serial_bytes().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4193.87,-8101.89C4135.16,-8088.99 4020.36,-8074.35 3988,-8147 3979.45,-8166.2 3979.45,-11153.8 3988,-11173 4002.42,-11205.38 4033.14,-11220.77 4067.98,-11226.81"/>
<polygon fill="blue" stroke="blue" points="4067.5,-11230.27 4077.9,-11228.27 4068.52,-11223.35 4067.5,-11230.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.92,-8173.96C4320.95,-8183.38 4412.14,-8190.39 4460,-8138 4539.24,-8051.26 4408.55,-7167.55 4488,-7081 4590.23,-6969.64 4718.75,-7149.53 4826,-7043 4921.9,-6947.74 4760.92,-6830.75 4862,-6741 4915.84,-6693.2 5134.41,-6690.77 5186,-6741 5190.88,-6745.75 5285.98,-10470.97 5295.27,-10835.4"/>
<polygon fill="blue" stroke="blue" points="5291.78,-10835.73 5295.53,-10845.64 5298.78,-10835.55 5291.78,-10835.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4693.6,-10423C4753.91,-10423 4877.04,-10423 4953.34,-10423"/>
<polygon fill="blue" stroke="blue" points="4953.79,-10426.5 4963.79,-10423 4953.79,-10419.5 4953.79,-10426.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_struct/impl#[ReceiptStruct]calc_m1_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5043.27,-10441.11C5077.83,-10470.21 5144.69,-10530.56 5186,-10594 5238.71,-10674.95 5273.97,-10785.27 5288.5,-10836.17"/>
<polygon fill="blue" stroke="blue" points="5285.13,-10837.13 5291.2,-10845.82 5291.87,-10835.24 5285.13,-10837.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node438" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node438"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="3834.5,-8320 3719.5,-8320 3719.5,-8284 3834.5,-8284 3834.5,-8320"/>
<text text-anchor="middle" x="3777" y="-8298.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.54,-8302C3927.76,-8302 4111.27,-8302 4190.31,-8302"/>
<polygon fill="blue" stroke="blue" points="4190.75,-8305.5 4200.75,-8302 4190.75,-8298.5 4190.75,-8305.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.51,-8294.98C3878.94,-8289.48 3942.41,-8281.67 3998,-8275 4060.53,-8267.49 4132.66,-8259.06 4179.22,-8253.65"/>
<polygon fill="blue" stroke="blue" points="4179.8,-8257.11 4189.33,-8252.48 4179,-8250.15 4179.8,-8257.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3834.51,-8309.02C3878.94,-8314.52 3942.41,-8322.33 3998,-8329 4066.51,-8337.23 4146.54,-8346.56 4191.85,-8351.82"/>
<polygon fill="blue" stroke="blue" points="4191.44,-8355.29 4201.78,-8352.97 4192.25,-8348.34 4191.44,-8355.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4257.03,-8295.29C4305.92,-8284.95 4408.71,-8271.85 4460,-8329 4518.02,-8393.65 4437.64,-11385.22 4488,-11456 4509.57,-11486.32 4547.9,-11501.39 4582.5,-11508.86"/>
<polygon fill="blue" stroke="blue" points="4582.13,-11512.35 4592.62,-11510.85 4583.48,-11505.48 4582.13,-11512.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge567" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4268.56,-8256.32C4320.61,-8265.02 4412.29,-8270.96 4460,-8218 4541.61,-8127.41 4405.85,-7211.1 4488,-7121 4589.92,-7009.22 4718.04,-7186.96 4826,-7081 4909.89,-6998.67 4773.41,-6896.25 4862,-6819 4970.53,-6724.36 5082.8,-6718.57 5186,-6819 5195.57,-6828.32 5286.35,-10475.15 5295.29,-10835.43"/>
<polygon fill="blue" stroke="blue" points="5291.8,-10835.65 5295.54,-10845.56 5298.79,-10835.48 5291.8,-10835.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge631" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4256.32,-8352.81C4305.45,-8348.52 4410.61,-8347.5 4460,-8409 4514.51,-8476.88 4431.24,-11476.99 4488,-11543 4519.78,-11579.96 4580.37,-11580.49 4619.45,-11576.2"/>
<polygon fill="blue" stroke="blue" points="4620.37,-11579.61 4629.85,-11574.89 4619.49,-11572.67 4620.37,-11579.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 common/sho/impl#[Sho]get_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M5071.57,-11407.55C5108.1,-11407.92 5156.08,-11401.95 5186,-11373 5256.23,-11305.05 5286.29,-10988.92 5293.94,-10892.2"/>
<polygon fill="blue" stroke="blue" points="5297.45,-10892.26 5294.73,-10882.02 5290.47,-10891.72 5297.45,-10892.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m(). -->
<g id="node443" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().</title>
<g id="a_node443"><a xlink:title=" &#160;&#160;&#160;pub fn calc_m(&amp;self) &#45;&gt; Scalar { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::calc_m_from(self.timestamp) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4689,-11421 4625,-11421 4625,-11385 4689,-11385 4689,-11421"/>
<text text-anchor="middle" x="4657" y="-11399.3" font-family="Helvetica,sans-Serif" font-size="14.00">calc_m</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/timestamp_struct/impl#[TimestampStruct]calc_m_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4689.09,-11403C4748.83,-11403 4880.62,-11403 4958.34,-11403"/>
<polygon fill="blue" stroke="blue" points="4958.47,-11406.5 4968.47,-11403 4958.47,-11399.5 4958.47,-11406.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert(). -->
<g id="edge650" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/impl#[Scalar]invert().</title>
<path fill="none" stroke="blue" d="M5055.16,-6142C5094.05,-6144.07 5156.06,-6154.09 5186,-6195 5231.84,-6257.63 5159.56,-11720.82 5206,-11783 5218.02,-11799.1 5239.32,-11805.96 5258.17,-11808.74"/>
<polygon fill="blue" stroke="blue" points="5257.99,-11812.24 5268.32,-11809.9 5258.78,-11805.29 5257.99,-11812.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption(). -->
<g id="node445" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().</title>
<g id="a_node445"><a xlink:title=" &#160;&#160;&#160;fn test_pni_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Pni_Encryption&#39; , &amp;[]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::derive_from(sho.as_mut()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pni = libsignal_core::Pni::from_uu...">
<polygon fill="white" stroke="black" points="4733,-6160 4581,-6160 4581,-6124 4733,-6124 4733,-6160"/>
<text text-anchor="middle" x="4657" y="-6138.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pni_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge799" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.1,-6146.72C4766.93,-6152.99 4804.12,-6166.49 4826,-6195 4881.39,-6267.17 4801.86,-6944.74 4862,-7013 4885.86,-7040.08 4926.19,-7046.57 4960,-7046.42"/>
<polygon fill="blue" stroke="blue" points="4960.35,-7049.91 4970.26,-7046.18 4960.18,-7042.92 4960.35,-7049.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge798" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_pni_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.24,-6142C4806.14,-6142 4914.27,-6142 4974.45,-6142"/>
<polygon fill="blue" stroke="blue" points="4974.75,-6145.5 4984.75,-6142 4974.75,-6138.5 4974.75,-6145.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption(). -->
<g id="node446" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().</title>
<g id="a_node446"><a xlink:title=" &#160;&#160;&#160;fn test_uid_encryption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let master_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Uid_Encryption&#39; , &amp;master_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;//let system = SystemParams::generate(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4733,-6106 4581,-6106 4581,-6070 4733,-6070 4733,-6106"/>
<text text-anchor="middle" x="4657" y="-6084.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_uid_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge808" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.37,-6080.4C4766.63,-6081.42 4803.26,-6089.37 4826,-6115 4892.28,-6189.69 4796.13,-6937.94 4862,-7013 4885.81,-7040.13 4926.14,-7046.61 4959.96,-7046.45"/>
<polygon fill="blue" stroke="blue" points="4960.31,-7049.95 4970.23,-7046.21 4960.14,-7042.95 4960.31,-7049.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt(). -->
<g id="edge809" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/tests/test_uid_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/uid_encryption/impl#[UidEncryptionDomain]decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4733.24,-6099.25C4806.29,-6110.18 4914.71,-6126.4 4974.82,-6135.39"/>
<polygon fill="blue" stroke="blue" points="4974.35,-6138.86 4984.75,-6136.88 4975.38,-6131.94 4974.35,-6138.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node447" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node447"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="4297.5,-5447 4160.5,-5447 4160.5,-5411 4297.5,-5411 4297.5,-5447"/>
<text text-anchor="middle" x="4229" y="-5425.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.75,-5426.27C4438.78,-5422.21 4756.58,-5421.92 4826,-5498 4882.75,-5560.19 4806.99,-6949.27 4862,-7013 4885.67,-7040.42 4926.2,-7046.85 4960.16,-7046.59"/>
<polygon fill="blue" stroke="blue" points="4960.55,-7050.08 4970.46,-7046.31 4960.37,-7043.08 4960.55,-7050.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.85,-5420.89C4495.86,-5398.89 5066.52,-5347.99 5186,-5476 5281.09,-5577.88 5294.21,-6632.63 5295.8,-6820.47"/>
<polygon fill="blue" stroke="blue" points="5292.3,-6820.67 5295.88,-6830.65 5299.3,-6820.62 5292.3,-6820.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.62,-5415.83C4349.96,-5409.95 4420.05,-5412.31 4460,-5456 4536.21,-5539.34 4413.58,-6387.06 4488,-6472 4520.12,-6508.66 4580.62,-6509.28 4619.58,-6505.09"/>
<polygon fill="blue" stroke="blue" points="4620.46,-6508.51 4629.95,-6503.8 4619.6,-6501.56 4620.46,-6508.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.61,-5415.84C4349.93,-5409.98 4420.01,-5412.34 4460,-5456 4532,-5534.61 4418.38,-6334.27 4488,-6415 4519.66,-6451.71 4579.48,-6453.75 4618.52,-6450.44"/>
<polygon fill="blue" stroke="blue" points="4619.35,-6453.88 4628.95,-6449.39 4618.65,-6446.91 4619.35,-6453.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.55,-5415.9C4349.84,-5410.06 4419.91,-5412.44 4460,-5456 4521.89,-5523.24 4428.15,-6208.94 4488,-6278 4519.75,-6314.63 4579.54,-6316.69 4618.56,-6313.41"/>
<polygon fill="blue" stroke="blue" points="4619.37,-6316.85 4628.97,-6312.37 4618.67,-6309.88 4619.37,-6316.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4297.57,-5415.87C4349.88,-5410.02 4419.95,-5412.4 4460,-5456 4526.1,-5527.97 4423.45,-6261.64 4488,-6335 4518.28,-6369.4 4573.55,-6372.03 4612.41,-6368.75"/>
<polygon fill="blue" stroke="blue" points="4612.8,-6372.23 4622.41,-6367.75 4612.11,-6365.26 4612.8,-6372.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key(). -->
<g id="node448" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().</title>
<g id="a_node448"><a xlink:title="fn test_inverse_key() { &#160;&#160;&#160;&#160;let aci = libsignal_core::Aci::from_uuid_bytes(TEST_ARRAY_16); &#160;&#160;&#160;&#160;let uid = UidStruct::from_service_id(aci.into()); &#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; test_inverse_key&#39; , b&#39; &#39;...">
<polygon fill="white" stroke="black" points="4294.5,-5339 4163.5,-5339 4163.5,-5303 4294.5,-5303 4294.5,-5339"/>
<text text-anchor="middle" x="4229" y="-5317.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_inverse_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]inverse_of().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4294.73,-5323.65C4342.41,-5323.21 4407.75,-5317.51 4460,-5294 4475.21,-5287.15 4472.41,-5274.95 4488,-5269 4558.18,-5242.23 4772.32,-5216.46 4826,-5269 4892.99,-5334.58 4801.49,-6884.4 4862,-6956 4886.78,-6985.32 4930.63,-6991.71 4965.7,-6991.39"/>
<polygon fill="blue" stroke="blue" points="4965.9,-6994.89 4975.8,-6991.12 4965.71,-6987.89 4965.9,-6994.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_inverse_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4294.59,-5314.64C4433.64,-5302.54 4754.5,-5283.56 4826,-5358 4889.71,-5424.33 4801.98,-6943.32 4862,-7013 4885.64,-7040.44 4926.18,-7046.87 4960.14,-7046.61"/>
<polygon fill="blue" stroke="blue" points="4960.54,-7050.1 4970.44,-7046.33 4960.35,-7043.1 4960.54,-7050.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node449" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node449"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="4416.5,-5393 4041.5,-5393 4041.5,-5357 4416.5,-5357 4416.5,-5393"/>
<text text-anchor="middle" x="4229" y="-5371.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.82,-5363.63C4570.54,-5358.82 4771.63,-5364.49 4826,-5422 4886.74,-5486.24 4804.27,-6946.04 4862,-7013 4885.65,-7040.43 4926.19,-7046.86 4960.15,-7046.6"/>
<polygon fill="blue" stroke="blue" points="4960.55,-7050.09 4970.45,-7046.32 4960.36,-7043.09 4960.55,-7050.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.64,-5361.24C4440.64,-5359.9 4464.89,-5358.76 4488,-5358 4798.4,-5347.78 4968.17,-5169.63 5186,-5391 5290.08,-5496.77 5295.8,-6625.78 5296.01,-6820.48"/>
<polygon fill="blue" stroke="blue" points="5292.51,-6820.75 5296.02,-6830.75 5299.51,-6820.75 5292.51,-6820.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.59,-5372.67C4432.95,-5379.25 4447.87,-5388.71 4460,-5402 4540.2,-5489.82 4409.69,-6382.49 4488,-6472 4520.09,-6508.68 4580.6,-6509.3 4619.57,-6505.1"/>
<polygon fill="blue" stroke="blue" points="4620.45,-6508.51 4629.94,-6503.81 4619.59,-6501.57 4620.45,-6508.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.57,-5372.69C4432.93,-5379.26 4447.86,-5388.72 4460,-5402 4535.99,-5485.09 4414.53,-6329.67 4488,-6415 4519.63,-6451.74 4579.45,-6453.77 4618.51,-6450.45"/>
<polygon fill="blue" stroke="blue" points="4619.34,-6453.89 4628.94,-6449.4 4618.64,-6446.92 4619.34,-6453.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.51,-5372.74C4432.89,-5379.31 4447.83,-5388.75 4460,-5402 4525.88,-5473.72 4424.3,-6204.34 4488,-6278 4519.71,-6314.67 4579.51,-6316.72 4618.54,-6313.42"/>
<polygon fill="blue" stroke="blue" points="4619.36,-6316.86 4628.96,-6312.38 4618.66,-6309.9 4619.36,-6316.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4416.54,-5372.72C4432.91,-5379.29 4447.84,-5388.74 4460,-5402 4530.08,-5478.45 4419.56,-6257.08 4488,-6335 4518.24,-6369.43 4573.53,-6372.05 4612.4,-6368.76"/>
<polygon fill="blue" stroke="blue" points="4612.79,-6372.24 4622.39,-6367.76 4612.09,-6365.28 4612.79,-6372.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node450" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node450"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="4328.5,-5555 4129.5,-5555 4129.5,-5519 4328.5,-5519 4328.5,-5555"/>
<text text-anchor="middle" x="4229" y="-5533.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.73,-5547.27C4489.82,-5565.02 4794.5,-5603.2 4826,-5641 4923.64,-5758.14 4762.21,-6897.69 4862,-7013 4885.7,-7040.39 4926.24,-7046.82 4960.18,-7046.57"/>
<polygon fill="blue" stroke="blue" points="4960.58,-7050.06 4970.48,-7046.29 4960.39,-7043.06 4960.58,-7050.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.62,-5532.89C4474.39,-5528.23 4739.43,-5525.56 4826,-5563 5031.11,-5651.7 5087.28,-5713.53 5186,-5914 5267.64,-6079.79 5290.88,-6682.21 5295.19,-6820.55"/>
<polygon fill="blue" stroke="blue" points="5291.7,-6820.86 5295.5,-6830.75 5298.7,-6820.65 5291.7,-6820.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.66,-5521.46C4375.3,-5520.08 4427.71,-5528.29 4460,-5564 4524.17,-5634.97 4425.35,-7213.68 4488,-7286 4519.65,-7322.53 4579.47,-7323.4 4618.52,-7319.26"/>
<polygon fill="blue" stroke="blue" points="4619.44,-7322.68 4628.94,-7317.99 4618.59,-7315.73 4619.44,-7322.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.65,-5521.47C4375.28,-5520.1 4427.69,-5528.31 4460,-5564 4520.18,-5630.49 4429.25,-7110.25 4488,-7178 4519.93,-7214.82 4580.49,-7215.4 4619.5,-7211.15"/>
<polygon fill="blue" stroke="blue" points="4620.41,-7214.56 4629.9,-7209.85 4619.54,-7207.62 4620.41,-7214.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.53,-5522.94C4374.41,-5522.14 4426.2,-5530.42 4460,-5564 4531.8,-5635.34 4417.07,-5717.8 4488,-5790 4594.33,-5898.24 4724.91,-5724.85 4826,-5838 4918.95,-5942.03 4781.26,-6979.24 4862,-7093 4886.62,-7127.69 4934.12,-7142.33 4970.45,-7148.5"/>
<polygon fill="blue" stroke="blue" points="4969.96,-7151.97 4980.38,-7150.03 4971.02,-7145.05 4969.96,-7151.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.51,-5521.59C4375.12,-5520.25 4427.53,-5528.45 4460,-5564 4500.14,-5607.95 4477.9,-6576.34 4488,-6635 4521.19,-6827.82 4611.09,-7047.38 4643.85,-7123.39"/>
<polygon fill="blue" stroke="blue" points="4640.72,-7124.97 4647.91,-7132.75 4647.14,-7122.18 4640.72,-7124.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.61,-5521.76C4375.09,-5520.51 4427.37,-5528.73 4460,-5564 4513.92,-5622.28 4435.85,-6218.14 4488,-6278 4519.75,-6314.45 4579.27,-6316.62 4618.27,-6313.41"/>
<polygon fill="blue" stroke="blue" points="4619.07,-6316.84 4628.68,-6312.38 4618.39,-6309.88 4619.07,-6316.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4328.65,-5521.72C4375.14,-5520.46 4427.42,-5528.69 4460,-5564 4518.13,-5627.01 4431.23,-6270.77 4488,-6335 4518.35,-6369.34 4573.61,-6371.97 4612.45,-6368.72"/>
<polygon fill="blue" stroke="blue" points="4612.83,-6372.2 4622.44,-6367.72 4612.14,-6365.23 4612.83,-6372.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node451" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node451"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="4452,-5501 4006,-5501 4006,-5465 4452,-5465 4452,-5501"/>
<text text-anchor="middle" x="4229" y="-5479.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 attributes/impl#[`KeyPair&lt;D&gt;`]derive_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4452.36,-5498.9C4611.06,-5512.56 4800.75,-5534.55 4826,-5563 4932.98,-5683.53 4756.63,-6891.06 4862,-7013 4885.68,-7040.4 4926.22,-7046.84 4960.17,-7046.58"/>
<polygon fill="blue" stroke="blue" points="4960.56,-7050.07 4970.47,-7046.3 4960.37,-7043.08 4960.56,-7050.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4452.02,-5471.56C4704.17,-5464.02 5092.78,-5470.83 5186,-5577 5270.87,-5673.67 5292.27,-6640.96 5295.52,-6820.43"/>
<polygon fill="blue" stroke="blue" points="5292.03,-6820.71 5295.7,-6830.65 5299.03,-6820.59 5292.03,-6820.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.06,-5501.23C4454.18,-5503.95 4457.17,-5506.87 4460,-5510 4526.16,-5583.21 4423.41,-7211.4 4488,-7286 4519.64,-7322.54 4579.46,-7323.4 4618.52,-7319.27"/>
<polygon fill="blue" stroke="blue" points="4619.44,-7322.68 4628.94,-7317.99 4618.59,-7315.73 4619.44,-7322.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.06,-5501.23C4454.18,-5503.95 4457.17,-5506.87 4460,-5510 4522.17,-5578.73 4427.3,-7107.96 4488,-7178 4519.92,-7214.83 4580.48,-7215.4 4619.5,-7211.15"/>
<polygon fill="blue" stroke="blue" points="4620.41,-7214.57 4629.89,-7209.85 4619.54,-7207.62 4620.41,-7214.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.18,-5501.25C4453.59,-5503.96 4456.88,-5506.87 4460,-5510 4536.5,-5586.62 4411.32,-5675.56 4488,-5752 4595.07,-5858.72 4723.71,-5678.7 4826,-5790 4924,-5896.64 4778.24,-6974.85 4862,-7093 4886.6,-7127.71 4934.1,-7142.34 4970.44,-7148.51"/>
<polygon fill="blue" stroke="blue" points="4969.95,-7151.98 4980.37,-7150.04 4971.01,-7145.06 4969.95,-7151.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4451.02,-5501.26C4454.16,-5503.97 4457.16,-5506.88 4460,-5510 4502.13,-5556.19 4477.43,-6573.38 4488,-6635 4521.07,-6827.84 4611.04,-7047.38 4643.84,-7123.4"/>
<polygon fill="blue" stroke="blue" points="4640.7,-7124.97 4647.9,-7132.75 4647.13,-7122.18 4640.7,-7124.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.97,-5501.31C4454.12,-5504 4457.14,-5506.9 4460,-5510 4517.9,-5572.76 4432,-6213.54 4488,-6278 4519.79,-6314.6 4579.57,-6316.67 4618.58,-6313.4"/>
<polygon fill="blue" stroke="blue" points="4619.38,-6316.83 4628.99,-6312.36 4618.69,-6309.87 4619.38,-6316.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4450.98,-5501.3C4454.13,-5504 4457.14,-5506.89 4460,-5510 4522.11,-5577.49 4427.34,-6266.21 4488,-6335 4518.31,-6369.37 4573.58,-6372 4612.43,-6368.74"/>
<polygon fill="blue" stroke="blue" points="4612.82,-6372.22 4622.42,-6367.74 4612.12,-6365.25 4612.82,-6372.22"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential(). -->
<g id="node452" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().</title>
<g id="a_node452"><a xlink:title="fn test_room_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; RoomCredential&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair = Blindin...">
<polygon fill="white" stroke="black" points="4309,-5285 4149,-5285 4149,-5249 4309,-5249 4309,-5285"/>
<text text-anchor="middle" x="4229" y="-5263.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_room_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate(). -->
<g id="edge606" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 credentials/impl#[CredentialKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4309,-5254.15C4516.2,-5222.46 5067.44,-5151.82 5186,-5276 5296.97,-5392.23 5296.91,-6618.56 5296.14,-6820.83"/>
<polygon fill="blue" stroke="blue" points="5292.64,-6820.92 5296.1,-6830.94 5299.64,-6820.95 5292.64,-6820.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate(). -->
<g id="edge607" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_room_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4309.14,-5253.12C4359.56,-5249.19 4422.28,-5254.27 4460,-5294 4525.93,-5363.44 4420.89,-5655.69 4488,-5724 4540.82,-5777.76 4774.21,-5697.24 4826,-5752 4877.21,-5806.15 4818.92,-7032.18 4862,-7093 4886.59,-7127.72 4934.09,-7142.35 4970.43,-7148.52"/>
<polygon fill="blue" stroke="blue" points="4969.94,-7151.98 4980.36,-7150.04 4971.01,-7145.06 4969.94,-7151.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node453" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node453"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4266,-5609 4192,-5609 4192,-5573 4266,-5573 4266,-5609"/>
<text text-anchor="middle" x="4229" y="-5587.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge705" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.3,-5588.92C4382.05,-5583.07 4739.82,-5571.09 4826,-5641 4869.24,-5676.08 4830.53,-5715.06 4862,-5761 4965.1,-5911.5 5105.52,-5849.29 5186,-6013 5216.05,-6074.12 5201.72,-10849.02 5206,-10917 5223.46,-11194.39 5275.49,-11527.4 5291.35,-11624.91"/>
<polygon fill="blue" stroke="blue" points="5287.91,-11625.56 5292.98,-11634.86 5294.82,-11624.43 5287.91,-11625.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge706" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.13,-5587.75C4317.45,-5585.33 4410.68,-5589.43 4460,-5644 4526.68,-5717.78 4432.68,-5783.36 4488,-5866 4584.1,-6009.58 4738.6,-5908.97 4826,-6058 4901.86,-6187.34 4812.03,-11314.62 4862,-11456 4887.51,-11528.18 4951.54,-11593.76 4989.49,-11628.01"/>
<polygon fill="blue" stroke="blue" points="4987.36,-11630.81 4997.16,-11634.84 4992.02,-11625.58 4987.36,-11630.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge704" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.26,-5593.4C4319.09,-5599.07 4415.74,-5618.1 4460,-5682 4510.75,-5755.27 4429.61,-7218.67 4488,-7286 4519.67,-7322.51 4579.48,-7323.38 4618.53,-7319.25"/>
<polygon fill="blue" stroke="blue" points="4619.45,-7322.67 4628.95,-7317.98 4618.6,-7315.72 4619.45,-7322.67"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge701" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.25,-5593.41C4319.07,-5599.09 4415.7,-5618.13 4460,-5682 4507.37,-5750.31 4433.5,-7115.24 4488,-7178 4519.96,-7214.8 4580.5,-7215.38 4619.51,-7211.14"/>
<polygon fill="blue" stroke="blue" points="4620.42,-7214.56 4629.9,-7209.85 4619.55,-7207.61 4620.42,-7214.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind(). -->
<g id="edge707" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[BlindingKeyPair]blind().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.37,-5587.9C4317.55,-5585.73 4410.13,-5590.21 4460,-5644 4516.24,-5704.66 4429.22,-5769.8 4488,-5828 4595.82,-5934.75 4724.97,-5762.8 4826,-5876 4922.51,-5984.14 4767.08,-7070.46 4862,-7180 4891.26,-7213.77 4946.12,-7215.67 4982.61,-7212.47"/>
<polygon fill="blue" stroke="blue" points="4983.25,-7215.93 4992.84,-7211.41 4982.53,-7208.96 4983.25,-7215.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge703" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.3,-5587.25C4318.27,-5584.14 4412.81,-5587.31 4460,-5644 4505.11,-5698.19 4441.55,-6224.95 4488,-6278 4519.84,-6314.37 4579.34,-6316.57 4618.3,-6313.38"/>
<polygon fill="blue" stroke="blue" points="4619.1,-6316.81 4628.71,-6312.36 4618.42,-6309.85 4619.1,-6316.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge702" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4266.33,-5587.23C4318.33,-5584.09 4412.91,-5587.23 4460,-5644 4509.05,-5703.15 4436.99,-6277.53 4488,-6335 4518.42,-6369.27 4573.67,-6371.92 4612.48,-6368.69"/>
<polygon fill="blue" stroke="blue" points="4612.86,-6372.17 4622.46,-6367.7 4612.17,-6365.2 4612.86,-6372.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node454" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node454"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="3391.5,-6948 3124.5,-6948 3124.5,-6912 3391.5,-6912 3391.5,-6948"/>
<text text-anchor="middle" x="3258" y="-6926.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge837" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3265.92,-6948.18C3304.21,-7049.87 3490.84,-7559.19 3556,-7994 3562.51,-8037.47 3548.27,-8750.89 3576,-8785 3613.13,-8830.67 3685.5,-8836.99 3732.24,-8835.72"/>
<polygon fill="blue" stroke="blue" points="3732.53,-8839.21 3742.38,-8835.31 3732.25,-8832.21 3732.53,-8839.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge840" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3265.9,-6948.18C3304.09,-7049.89 3490.25,-7559.28 3556,-7994 3561.93,-8033.24 3551.14,-8677.07 3576,-8708 3614.69,-8756.14 3692.09,-8762.1 3738.44,-8760.87"/>
<polygon fill="blue" stroke="blue" points="3738.82,-8764.36 3748.67,-8760.47 3738.54,-8757.36 3738.82,-8764.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge841" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.59,-6921.13C3588,-6909.43 3937.59,-6894.71 3978,-6935 4017.64,-6974.52 3960.59,-8908.36 3998,-8950 4044.48,-9001.73 4133.15,-8995.88 4185.78,-8986.65"/>
<polygon fill="blue" stroke="blue" points="4186.61,-8990.05 4195.8,-8984.77 4185.33,-8983.17 4186.61,-8990.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge836" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3341.06,-6911.95C3510.46,-6876.88 3890.37,-6810.24 3978,-6897 4017.46,-6936.07 3960.89,-8854.69 3998,-8896 4046.27,-8949.72 4140.03,-8941.35 4191.69,-8931.57"/>
<polygon fill="blue" stroke="blue" points="4192.62,-8934.95 4201.74,-8929.55 4191.24,-8928.09 4192.62,-8934.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new(). -->
<g id="edge838" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3391.8,-6937.76C3578.76,-6951.75 3904.98,-6988.48 3978,-7077 4012.06,-7118.29 3962.22,-8964.19 3998,-9004 4046.28,-9057.71 4140.04,-9049.34 4191.69,-9039.57"/>
<polygon fill="blue" stroke="blue" points="4192.62,-9042.95 4201.74,-9037.55 4191.24,-9036.09 4192.62,-9042.95"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge839" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3269.04,-6911.98C3311.15,-6835.58 3475.06,-6529.99 3556,-6259 3571.6,-6206.77 3552.03,-6186.96 3576,-6138 3697.41,-5889.99 3744.98,-5792.59 3998,-5682 4045.04,-5661.44 4423.12,-5646.29 4460,-5682 4529.48,-5749.28 4424.73,-6478.85 4488,-6552 4516.82,-6585.32 4568.85,-6590.06 4607.4,-6588.17"/>
<polygon fill="blue" stroke="blue" points="4607.63,-6591.66 4617.38,-6587.52 4607.18,-6584.68 4607.63,-6591.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node455" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node455"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="3969,-6678 3585,-6678 3585,-6642 3969,-6642 3969,-6678"/>
<text text-anchor="middle" x="3777" y="-6656.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3966.24,-6678.26C3970.33,-6680.92 3974.26,-6683.83 3978,-6687 4001.05,-6706.55 3974.78,-6732.65 3998,-6752 4050.74,-6795.94 4135.44,-6793.28 4186.01,-6786.63"/>
<polygon fill="blue" stroke="blue" points="4186.54,-6790.09 4195.95,-6785.21 4185.56,-6783.16 4186.54,-6790.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3946.01,-6678.03C3956.94,-6680.63 3967.68,-6683.6 3978,-6687 3987.63,-6690.18 3988.34,-6694.91 3998,-6698 4064.07,-6719.15 4145.57,-6724.06 4191.68,-6725.01"/>
<polygon fill="blue" stroke="blue" points="4191.74,-6728.51 4201.79,-6725.16 4191.84,-6721.51 4191.74,-6728.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3969.17,-6664.67C4053.02,-6666.72 4143.29,-6668.93 4191.95,-6670.12"/>
<polygon fill="blue" stroke="blue" points="4191.88,-6673.62 4201.97,-6670.36 4192.06,-6666.62 4191.88,-6673.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3968.61,-6641.98C3971.91,-6639.23 3975.05,-6636.24 3978,-6633 4015.05,-6592.3 3958.3,-6176.13 3998,-6138 4072.05,-6066.88 4384.99,-6067.9 4460,-6138 4527.37,-6200.96 4426.45,-6483.34 4488,-6552 4517.19,-6584.57 4568.58,-6589.55 4606.86,-6587.93"/>
<polygon fill="blue" stroke="blue" points="4607.5,-6591.4 4617.28,-6587.32 4607.09,-6584.41 4607.5,-6591.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node456" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node456"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="3918.5,-6624 3635.5,-6624 3635.5,-6588 3918.5,-6588 3918.5,-6624"/>
<text text-anchor="middle" x="3777" y="-6602.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge478" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.54,-6602.21C3940.69,-6607.62 3961.64,-6617.16 3978,-6633 4016.53,-6670.3 3959.15,-6715.03 3998,-6752 4048,-6799.58 4134.37,-6795.49 4185.85,-6787.63"/>
<polygon fill="blue" stroke="blue" points="4186.67,-6791.04 4195.97,-6785.97 4185.53,-6784.13 4186.67,-6791.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge479" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.66,-6604.5C3940.34,-6609.77 3961.1,-6618.67 3978,-6633 4001.05,-6652.55 3974.78,-6678.65 3998,-6698 4052.79,-6743.65 4142.08,-6739 4191.75,-6731.84"/>
<polygon fill="blue" stroke="blue" points="4192.38,-6735.28 4201.72,-6730.29 4191.3,-6728.37 4192.38,-6735.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge475" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.53,-6592.57C4013.41,-6583.51 4131.73,-6572.2 4190.81,-6566.55"/>
<polygon fill="blue" stroke="blue" points="4191.17,-6570.04 4200.79,-6565.6 4190.5,-6563.07 4191.17,-6570.04"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new(). -->
<g id="edge477" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.55,-6618.29C3938.78,-6621.98 3959.12,-6626.77 3978,-6633 3987.63,-6636.18 3988.34,-6640.91 3998,-6644 4064.07,-6665.15 4145.57,-6670.06 4191.68,-6671.01"/>
<polygon fill="blue" stroke="blue" points="4191.74,-6674.51 4201.79,-6671.16 4191.84,-6667.51 4191.74,-6674.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge481" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3918.53,-6609.44C4009.95,-6611.67 4123.13,-6614.44 4184.11,-6615.93"/>
<polygon fill="blue" stroke="blue" points="4184.07,-6619.43 4194.16,-6616.17 4184.25,-6612.43 4184.07,-6619.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge474" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3796.99,-6587.77C3832.91,-6554.52 3914.69,-6484.57 3998,-6453 4053.69,-6431.89 4121.94,-6426.17 4169.57,-6425.1"/>
<polygon fill="blue" stroke="blue" points="4169.77,-6428.6 4179.71,-6424.93 4169.65,-6421.6 4169.77,-6428.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge480" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3827.83,-6587.98C3872.15,-6572.31 3938.91,-6549.57 3998,-6533 4043.38,-6520.27 4094.42,-6508.28 4136.87,-6498.94"/>
<polygon fill="blue" stroke="blue" points="4137.88,-6502.3 4146.9,-6496.74 4136.38,-6495.46 4137.88,-6502.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge476" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3785.19,-6587.98C3820.55,-6499.53 3975.32,-6114.87 3998,-6100 4169.72,-5987.41 4310.39,-5959.37 4460,-6100 4533.33,-6168.93 4421.04,-6476.87 4488,-6552 4517.1,-6584.65 4568.5,-6589.62 4606.81,-6587.98"/>
<polygon fill="blue" stroke="blue" points="4607.46,-6591.45 4617.24,-6587.36 4607.05,-6584.46 4607.46,-6591.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node457" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node457"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="3970,-6786 3584,-6786 3584,-6750 3970,-6750 3970,-6786"/>
<text text-anchor="middle" x="3777" y="-6764.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge486" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3861.81,-6786.02C3903.14,-6799.27 3950.01,-6821.7 3978,-6859 4015.2,-6908.57 3953.59,-6953.77 3998,-6997 4047.46,-7045.14 4134.02,-7040.86 4185.67,-7032.81"/>
<polygon fill="blue" stroke="blue" points="4186.54,-7036.21 4195.83,-7031.11 4185.39,-7029.31 4186.54,-7036.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge487" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3857.21,-6786.02C3898.91,-6799.45 3947.57,-6822.04 3978,-6859 4002.39,-6888.63 3969.32,-6917.49 3998,-6943 4039.95,-6980.31 4104.56,-6984.95 4154.63,-6981.46"/>
<polygon fill="blue" stroke="blue" points="4155.08,-6984.94 4164.76,-6980.63 4154.51,-6977.96 4155.08,-6984.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge485" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3968.62,-6749.99C3971.92,-6747.23 3975.06,-6744.24 3978,-6741 4017.39,-6697.62 3955.79,-6254.64 3998,-6214 4034.98,-6178.4 4422.23,-6179.23 4460,-6214 4515.45,-6265.05 4437.27,-6496.26 4488,-6552 4517.44,-6584.35 4568.79,-6589.36 4606.99,-6587.81"/>
<polygon fill="blue" stroke="blue" points="4607.61,-6591.29 4617.39,-6587.22 4607.21,-6584.3 4607.61,-6591.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node458" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node458"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="3855,-6732 3699,-6732 3699,-6696 3855,-6696 3855,-6732"/>
<text text-anchor="middle" x="3777" y="-6710.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge730" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.39,-6703.04C3897.58,-6701.71 3947.31,-6708.54 3978,-6741 4017.2,-6782.47 3958.44,-6955.87 3998,-6997 4046.08,-7046.98 4133.79,-7041.87 4185.9,-7033.21"/>
<polygon fill="blue" stroke="blue" points="4186.59,-7036.64 4195.82,-7031.45 4185.37,-7029.75 4186.59,-7036.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge733" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.14,-6703.28C3897.25,-6702.03 3946.98,-6708.86 3978,-6741 4009.33,-6773.46 3966.39,-6910.82 3998,-6943 4037.81,-6983.54 4103.76,-6987.55 4154.86,-6983"/>
<polygon fill="blue" stroke="blue" points="4155.27,-6986.48 4164.87,-6981.99 4154.57,-6979.52 4155.27,-6986.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge734" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.2,-6703.69C3897.07,-6702.65 3946.53,-6709.54 3978,-6741 4024.94,-6787.93 3950.66,-6842.48 3998,-6889 4046.79,-6936.95 4132.34,-6933.09 4184.22,-6925.1"/>
<polygon fill="blue" stroke="blue" points="4184.83,-6928.55 4194.12,-6923.47 4183.69,-6921.64 4184.83,-6928.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge732" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.22,-6704.68C3896.57,-6704.08 3945.53,-6711.09 3978,-6741 4008.46,-6769.05 3967.48,-6804.01 3998,-6832 4050.51,-6880.15 4140.29,-6876.07 4190.75,-6868.96"/>
<polygon fill="blue" stroke="blue" points="4191.53,-6872.39 4200.89,-6867.42 4190.48,-6865.47 4191.53,-6872.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid(). -->
<g id="edge736" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]decrypt_uid().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.3,-6724.87C3897.46,-6726.18 3947.19,-6719.35 3978,-6687 4013.99,-6649.2 3961.68,-6490.48 3998,-6453 4041.54,-6408.06 4117.14,-6407.78 4169.73,-6414.47"/>
<polygon fill="blue" stroke="blue" points="4169.54,-6417.98 4179.93,-6415.89 4170.5,-6411.05 4169.54,-6417.98"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key(). -->
<g id="edge735" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/params/impl#[CallLinkSecretParams]derive_from_root_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.26,-6724.37C3897.15,-6725.43 3946.62,-6718.54 3978,-6687 4026.68,-6638.07 3951.63,-6584.12 3998,-6533 4032.57,-6494.89 4088.56,-6481.41 4136.65,-6477.58"/>
<polygon fill="blue" stroke="blue" points="4137.03,-6481.06 4146.78,-6476.9 4136.56,-6474.07 4137.03,-6481.06"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate(). -->
<g id="edge731" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/generic_server_params/impl#[GenericServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3855.37,-6725.39C3897.83,-6726.93 3947.83,-6720.18 3978,-6687 4016.22,-6644.96 3957.04,-6215.39 3998,-6176 4035,-6140.42 4422.38,-6141.08 4460,-6176 4521.41,-6233 4431.86,-6489.8 4488,-6552 4517.3,-6584.47 4568.68,-6589.47 4606.92,-6587.88"/>
<polygon fill="blue" stroke="blue" points="4607.55,-6591.35 4617.33,-6587.28 4607.14,-6584.36 4607.55,-6591.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node459" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node459"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="3386.5,-11702 3129.5,-11702 3129.5,-11666 3386.5,-11666 3386.5,-11702"/>
<text text-anchor="middle" x="3258" y="-11680.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-11702.04C3403.14,-11713.32 3501.2,-11716.16 3556,-11657 3608.75,-11600.06 3523.99,-10317.61 3576,-10260 3696.54,-10126.48 3846.63,-10335.88 3978,-10213 4013.65,-10179.65 3964.24,-10140.26 3998,-10105 4044.76,-10056.17 4126.79,-10048.26 4179.2,-10048.82"/>
<polygon fill="blue" stroke="blue" points="4179.2,-10052.32 4189.27,-10049.03 4179.34,-10045.32 4179.2,-10052.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.47,-11702.03C3402.91,-11713.39 3501.21,-11716.35 3556,-11657 3590.88,-11619.22 3544.42,-9846.58 3576,-9806 3599.29,-9776.07 3637.38,-9761.81 3674.11,-9755.39"/>
<polygon fill="blue" stroke="blue" points="3675.08,-9758.78 3684.42,-9753.78 3674,-9751.87 3675.08,-9758.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-11702.03C3402.92,-11713.4 3501.23,-11716.36 3556,-11657 3592.38,-11617.58 3540.49,-9766.2 3576,-9726 3616.24,-9680.44 3693.79,-9684.23 3739.6,-9691.41"/>
<polygon fill="blue" stroke="blue" points="3739.25,-9694.9 3749.7,-9693.12 3740.43,-9688 3739.25,-9694.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-11702.03C3402.93,-11713.41 3501.23,-11716.37 3556,-11657 3593.39,-11616.47 3539.5,-9713.33 3576,-9672 3608.49,-9635.21 3665.31,-9630.6 3710.1,-9633.96"/>
<polygon fill="blue" stroke="blue" points="3710.06,-9637.48 3720.34,-9634.89 3710.69,-9630.5 3710.06,-9637.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.99,-11702.01C3403.31,-11713.19 3501.09,-11715.88 3556,-11657 3592.46,-11617.9 3540.4,-10734.88 3576,-10695 3612.98,-10653.57 3680.85,-10653.09 3727.17,-10658.74"/>
<polygon fill="blue" stroke="blue" points="3726.91,-10662.23 3737.29,-10660.11 3727.85,-10655.3 3726.91,-10662.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node460" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node460"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="3329,-11594 3187,-11594 3187,-11558 3329,-11558 3329,-11594"/>
<text text-anchor="middle" x="3258" y="-11572.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329,-11592.23C3397.62,-11603.53 3499.85,-11607.19 3556,-11546 3607.01,-11490.4 3526.39,-10244.85 3576,-10188 3694.81,-10051.84 3818.7,-10212.33 3978,-10127 3989.65,-10120.76 3986.6,-10111.68 3998,-10105 4054.62,-10071.85 4130.38,-10059.43 4179.2,-10054.78"/>
<polygon fill="blue" stroke="blue" points="4179.53,-10058.27 4189.19,-10053.9 4178.92,-10051.29 4179.53,-10058.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.06,-11592.28C3397.72,-11603.62 3499.99,-11607.32 3556,-11546 3592.12,-11506.46 3540.54,-9658.14 3576,-9618 3600.01,-9590.82 3637.31,-9581.2 3673.22,-9579.39"/>
<polygon fill="blue" stroke="blue" points="3673.41,-9582.89 3683.29,-9579.08 3673.19,-9575.89 3673.41,-9582.89"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.04,-11592.27C3397.69,-11603.6 3499.95,-11607.28 3556,-11546 3588.62,-11510.33 3546.3,-9844.14 3576,-9806 3599.3,-9776.08 3637.4,-9761.82 3674.12,-9755.4"/>
<polygon fill="blue" stroke="blue" points="3675.09,-9758.79 3684.43,-9753.79 3674.01,-9751.88 3675.09,-9758.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.05,-11592.27C3397.71,-11603.61 3499.97,-11607.3 3556,-11546 3590.11,-11508.68 3542.52,-9763.88 3576,-9726 3616.25,-9680.45 3693.8,-9684.24 3739.61,-9691.41"/>
<polygon fill="blue" stroke="blue" points="3739.26,-9694.9 3749.7,-9693.13 3740.43,-9688 3739.26,-9694.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsement]to_token().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.06,-11592.29C3397.73,-11603.63 3499.99,-11607.32 3556,-11546 3593.13,-11505.35 3539.56,-9605.27 3576,-9564 3613.3,-9521.76 3682.67,-9521.94 3729.1,-9527.91"/>
<polygon fill="blue" stroke="blue" points="3728.82,-9531.4 3739.21,-9529.35 3729.81,-9524.47 3728.82,-9531.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.05,-11592.28C3397.71,-11603.62 3499.98,-11607.31 3556,-11546 3591.12,-11507.57 3541.53,-9711.01 3576,-9672 3608.5,-9635.22 3665.32,-9630.61 3710.11,-9633.97"/>
<polygon fill="blue" stroke="blue" points="3710.07,-9637.48 3720.34,-9634.89 3710.7,-9630.51 3710.07,-9637.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3329.21,-11592.18C3397.74,-11603.36 3499.67,-11606.85 3556,-11546 3588.12,-11511.3 3544.46,-10730.24 3576,-10695 3613.04,-10653.62 3680.89,-10653.13 3727.19,-10658.76"/>
<polygon fill="blue" stroke="blue" points="3726.93,-10662.26 3737.31,-10660.13 3727.87,-10655.32 3726.93,-10662.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node461" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node461"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="3359.5,-11648 3156.5,-11648 3156.5,-11612 3359.5,-11612 3359.5,-11648"/>
<text text-anchor="middle" x="3258" y="-11626.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.75,-11648.03C3403.14,-11659.32 3501.19,-11662.15 3556,-11603 3607.93,-11546.96 3525.5,-10285.32 3576,-10228 3695.29,-10092.6 3841,-10288.45 3978,-10171 4001.27,-10151.05 3975.61,-10125.93 3998,-10105 4047.02,-10059.2 4127.41,-10050.3 4179,-10049.84"/>
<polygon fill="blue" stroke="blue" points="4179.22,-10053.34 4189.23,-10049.86 4179.23,-10046.34 4179.22,-10053.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.47,-11648.02C3402.9,-11659.38 3501.2,-11662.34 3556,-11603 3589.87,-11566.33 3545.34,-9845.39 3576,-9806 3599.29,-9776.07 3637.39,-9761.82 3674.12,-9755.4"/>
<polygon fill="blue" stroke="blue" points="3675.09,-9758.79 3684.43,-9753.79 3674.01,-9751.87 3675.09,-9758.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.47,-11648.03C3402.91,-11659.39 3501.22,-11662.35 3556,-11603 3591.37,-11564.69 3541.48,-9765.08 3576,-9726 3616.25,-9680.45 3693.79,-9684.24 3739.6,-9691.41"/>
<polygon fill="blue" stroke="blue" points="3739.25,-9694.9 3749.7,-9693.13 3740.43,-9688 3739.25,-9694.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-11648.03C3402.92,-11659.4 3501.23,-11662.36 3556,-11603 3592.38,-11563.58 3540.49,-9712.2 3576,-9672 3608.49,-9635.21 3665.31,-9630.6 3710.11,-9633.97"/>
<polygon fill="blue" stroke="blue" points="3710.07,-9637.48 3720.34,-9634.89 3710.69,-9630.51 3710.07,-9637.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.31,-11648.05C3403.59,-11659.18 3501.15,-11661.75 3556,-11603 3590.43,-11566.12 3542.38,-10732.62 3576,-10695 3613.01,-10653.59 3680.86,-10653.11 3727.18,-10658.75"/>
<polygon fill="blue" stroke="blue" points="3726.92,-10662.24 3737.3,-10660.12 3727.86,-10655.31 3726.92,-10662.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption(). -->
<g id="node462" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().</title>
<g id="a_node462"><a xlink:title="fn test_blob_encryption() { &#160;&#160;&#160;&#160;let master_key = zkgroup::groups::GroupMasterKey::new(zkgroup::TEST_ARRAY_32_1); &#160;&#160;&#160;&#160;let group_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::groups::GroupSecretParams::derive_from_m...">
<polygon fill="white" stroke="black" points="3338.5,-11785 3177.5,-11785 3177.5,-11749 3338.5,-11749 3338.5,-11785"/>
<text text-anchor="middle" x="3258" y="-11763.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_blob_encryption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_blob_encryption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3338.67,-11784.86C3407.04,-11794.97 3502.72,-11795.72 3556,-11737 3606.48,-11681.37 3525.21,-6383.36 3576,-6328 3609.23,-6291.78 4424.92,-6255.57 4460,-6290 4489.64,-6319.09 4485.91,-7743.52 4488,-7785 4529.66,-8613.73 4634.01,-9626.91 4653.01,-9807.73"/>
<polygon fill="blue" stroke="blue" points="4649.54,-9808.18 4654.06,-9817.76 4656.5,-9807.45 4649.54,-9808.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node463" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node463"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="3322,-12001 3194,-12001 3194,-11965 3322,-11965 3322,-12001"/>
<text text-anchor="middle" x="3258" y="-11979.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.22,-11998.78C3390.59,-12011.63 3497.61,-12018.72 3556,-11956 3595.56,-11913.5 3537.37,-10954.35 3576,-10911 3606.92,-10876.3 3659.51,-10870.31 3703,-10872.6"/>
<polygon fill="blue" stroke="blue" points="3702.77,-10876.09 3712.98,-10873.27 3703.24,-10869.11 3702.77,-10876.09"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.21,-11998.77C3390.57,-12011.61 3497.58,-12018.69 3556,-11956 3593.54,-11915.71 3539.34,-11006.09 3576,-10965 3616.46,-10919.64 3693.93,-10923.36 3739.67,-10930.47"/>
<polygon fill="blue" stroke="blue" points="3739.31,-10933.96 3749.75,-10932.17 3740.47,-10927.05 3739.31,-10933.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3322.26,-11998.81C3390.66,-12011.7 3497.72,-12018.81 3556,-11956 3603.66,-11904.64 3529.47,-10747.39 3576,-10695 3612.88,-10653.48 3680.77,-10653.02 3727.12,-10658.7"/>
<polygon fill="blue" stroke="blue" points="3726.87,-10662.2 3737.25,-10660.08 3727.81,-10655.26 3726.87,-10662.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node464" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node464"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="3355,-11839 3161,-11839 3161,-11803 3355,-11803 3355,-11839"/>
<text text-anchor="middle" x="3258" y="-11817.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-11839.03C3402.7,-11850.48 3501.26,-11853.57 3556,-11794 3586.77,-11760.52 3545.97,-8554.15 3576,-8520 3614.08,-8476.71 3685.84,-8477.91 3732.25,-8484.3"/>
<polygon fill="blue" stroke="blue" points="3731.91,-8487.79 3742.32,-8485.82 3732.95,-8480.87 3731.91,-8487.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-11839.03C3402.7,-11850.47 3501.25,-11853.56 3556,-11794 3585.01,-11762.44 3549.75,-8741.88 3576,-8708 3605.39,-8670.06 3658.57,-8657.29 3702.71,-8653.74"/>
<polygon fill="blue" stroke="blue" points="3703.09,-8657.23 3712.84,-8653.08 3702.63,-8650.24 3703.09,-8657.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-11839.03C3402.71,-11850.48 3501.27,-11853.57 3556,-11794 3587.27,-11759.96 3545.48,-8500.71 3576,-8466 3615.93,-8420.6 3692.9,-8424.14 3738.83,-8431.27"/>
<polygon fill="blue" stroke="blue" points="3738.53,-8434.76 3748.97,-8432.98 3739.69,-8427.86 3738.53,-8434.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.2,-11839.03C3402.7,-11850.48 3501.26,-11853.56 3556,-11794 3585.76,-11761.62 3546.96,-8661.02 3576,-8628 3614.51,-8584.22 3687.47,-8585.95 3733.81,-8592.52"/>
<polygon fill="blue" stroke="blue" points="3733.43,-8596 3743.85,-8594.08 3734.5,-8589.09 3733.43,-8596"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-11839C3402.44,-11850.52 3501.25,-11853.73 3556,-11794 3606.94,-11738.42 3525.04,-6421.55 3576,-6366 3609.23,-6329.78 4424.91,-6293.58 4460,-6328 4488.9,-6356.35 4485.96,-7744.57 4488,-7785 4529.86,-8613.72 4634.05,-9626.91 4653.01,-9807.73"/>
<polygon fill="blue" stroke="blue" points="4649.54,-9808.18 4654.07,-9817.76 4656.5,-9807.45 4649.54,-9808.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.99,-11839C3403.3,-11850.18 3501.08,-11852.87 3556,-11794 3591.52,-11755.93 3541.32,-10895.83 3576,-10857 3591.67,-10839.45 3612.89,-10829.25 3635.66,-10823.75"/>
<polygon fill="blue" stroke="blue" points="3636.43,-10827.16 3645.5,-10821.67 3634.99,-10820.31 3636.43,-10827.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.03,-11839.04C3403.37,-11850.25 3501.17,-11852.95 3556,-11794 3597.59,-11749.28 3535.4,-10740.61 3576,-10695 3612.93,-10653.52 3680.8,-10653.05 3727.14,-10658.72"/>
<polygon fill="blue" stroke="blue" points="3726.89,-10662.21 3737.27,-10660.09 3727.83,-10655.28 3726.89,-10662.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node465" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node465"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="3473.5,-11947 3042.5,-11947 3042.5,-11911 3473.5,-11911 3473.5,-11947"/>
<text text-anchor="middle" x="3258" y="-11925.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge561" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-11947C3402.44,-11958.52 3501.25,-11961.73 3556,-11902 3605.99,-11847.47 3535.11,-6637.64 3576,-6576 3688.71,-6406.08 3798.22,-6436.83 3998,-6396 4048.29,-6385.72 4423.34,-6360.07 4460,-6396 4487.56,-6423.01 4486.03,-7746.46 4488,-7785 4530.25,-8613.7 4634.12,-9626.9 4653.02,-9807.73"/>
<polygon fill="blue" stroke="blue" points="4649.55,-9808.18 4654.07,-9817.76 4656.51,-9807.45 4649.55,-9808.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge562" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3357.76,-11947.03C3421.62,-11952.79 3502.5,-11948.18 3556,-11902 3695.41,-11781.66 3760.4,-11161.3 3773.48,-11020.46"/>
<polygon fill="blue" stroke="blue" points="3777,-11020.37 3774.43,-11010.1 3770.03,-11019.74 3777,-11020.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge560" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.72,-11947.01C3403.09,-11958.28 3501.13,-11961.09 3556,-11902 3601.63,-11852.85 3531.45,-10745.13 3576,-10695 3612.9,-10653.49 3680.78,-10653.03 3727.13,-10658.7"/>
<polygon fill="blue" stroke="blue" points="3726.87,-10662.2 3737.25,-10660.08 3727.82,-10655.27 3726.87,-10662.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node466" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node466"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="3377.5,-11893 3138.5,-11893 3138.5,-11857 3377.5,-11857 3377.5,-11893"/>
<text text-anchor="middle" x="3258" y="-11871.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key(). -->
<g id="edge576" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_profile_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-11893.03C3402.92,-11904.4 3501.23,-11907.36 3556,-11848 3592.38,-11808.58 3540.49,-9957.2 3576,-9917 3604.07,-9885.22 3650.3,-9877.45 3691.24,-9878.1"/>
<polygon fill="blue" stroke="blue" points="3691.14,-9881.6 3701.25,-9878.42 3691.37,-9874.6 3691.14,-9881.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id(). -->
<g id="edge574" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]decrypt_service_id().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.48,-11893.03C3402.93,-11904.41 3501.23,-11907.37 3556,-11848 3593.39,-11807.47 3539.5,-9904.33 3576,-9863 3604.6,-9830.61 3652.06,-9823.16 3693.58,-9824.14"/>
<polygon fill="blue" stroke="blue" points="3693.58,-9827.64 3703.71,-9824.55 3693.86,-9820.65 3693.58,-9827.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key(). -->
<g id="edge570" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_params/impl#[GroupSecretParams]derive_from_master_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3333.91,-11893C3402.44,-11904.52 3501.25,-11907.73 3556,-11848 3607.09,-11792.26 3524.89,-6459.72 3576,-6404 3609.23,-6367.78 4424.9,-6331.59 4460,-6366 4488.15,-6393.6 4486,-7745.63 4488,-7785 4530.08,-8613.71 4634.09,-9626.9 4653.02,-9807.73"/>
<polygon fill="blue" stroke="blue" points="4649.55,-9808.18 4654.07,-9817.76 4656.51,-9807.45 4649.55,-9808.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment(). -->
<g id="edge575" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/profiles/profile_key/impl#[ProfileKey]get_commitment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.21,-11893.04C3402.72,-11904.49 3501.28,-11907.59 3556,-11848 3590.1,-11810.86 3556.28,-8264.4 3576,-8218 3608.85,-8140.69 3688.81,-8078.72 3737.09,-8046.73"/>
<polygon fill="blue" stroke="blue" points="3739.25,-8049.5 3745.72,-8041.11 3735.43,-8043.64 3739.25,-8049.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge572" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.03,-11893.04C3403.37,-11904.25 3501.17,-11906.95 3556,-11848 3597.59,-11803.28 3535.4,-10794.61 3576,-10749 3590.6,-10732.6 3610.03,-10722.62 3631.05,-10716.88"/>
<polygon fill="blue" stroke="blue" points="3631.91,-10720.28 3640.82,-10714.54 3630.27,-10713.47 3631.91,-10720.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge573" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.73,-11893.02C3403.11,-11904.29 3501.15,-11907.11 3556,-11848 3603.66,-11796.64 3529.47,-10639.39 3576,-10587 3588.98,-10572.39 3605.79,-10562.86 3624.16,-10556.9"/>
<polygon fill="blue" stroke="blue" points="3625.25,-10560.23 3633.9,-10554.1 3623.32,-10553.5 3625.25,-10560.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge577" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.02,-11893.03C3403.35,-11904.23 3501.14,-11906.93 3556,-11848 3595.56,-11805.5 3537.37,-10846.35 3576,-10803 3578.02,-10800.73 3580.14,-10798.59 3582.33,-10796.56"/>
<polygon fill="blue" stroke="blue" points="3584.65,-10799.18 3590.12,-10790.1 3580.19,-10793.79 3584.65,-10799.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge571" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3334.72,-11893.01C3403.09,-11904.28 3501.13,-11907.09 3556,-11848 3601.63,-11798.85 3531.45,-10691.13 3576,-10641 3583.32,-10632.76 3591.86,-10626.14 3601.21,-10620.87"/>
<polygon fill="blue" stroke="blue" points="3603.07,-10623.85 3610.41,-10616.21 3599.91,-10617.6 3603.07,-10623.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge578" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3360.36,-11893.02C3423.67,-11898.29 3502.96,-11893.12 3556,-11848 3687.99,-11735.7 3758.34,-11155.14 3773.06,-11020.09"/>
<polygon fill="blue" stroke="blue" points="3776.55,-11020.44 3774.14,-11010.12 3769.59,-11019.69 3776.55,-11020.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge579" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3335.04,-11893.05C3403.39,-11904.27 3501.2,-11906.98 3556,-11848 3599.61,-11801.07 3533.42,-10742.87 3576,-10695 3612.91,-10653.5 3680.79,-10653.04 3727.14,-10658.71"/>
<polygon fill="blue" stroke="blue" points="3726.88,-10662.21 3737.26,-10660.09 3727.82,-10655.27 3726.88,-10662.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node467" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node467"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="3293.5,-6224 3222.5,-6224 3222.5,-6188 3293.5,-6188 3293.5,-6224"/>
<text text-anchor="middle" x="3258" y="-6202.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3270.03,-6224.14C3316.51,-6301.74 3496.67,-6614.83 3556,-6900 3565.67,-6946.46 3544.66,-10281.36 3576,-10317 3589.36,-10332.19 3606.87,-10341.91 3625.97,-10347.84"/>
<polygon fill="blue" stroke="blue" points="3625.21,-10351.26 3635.78,-10350.53 3627.06,-10344.51 3625.21,-10351.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3270.03,-6224.14C3316.51,-6301.73 3496.7,-6614.83 3556,-6900 3565.97,-6947.93 3543.68,-10388.23 3576,-10425 3589.82,-10440.72 3608.07,-10450.57 3627.94,-10456.44"/>
<polygon fill="blue" stroke="blue" points="3627.26,-10459.88 3637.82,-10459.01 3629.02,-10453.1 3627.26,-10459.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3270.03,-6224.14C3316.52,-6301.73 3496.71,-6614.83 3556,-6900 3566.12,-6948.67 3543.18,-10441.66 3576,-10479 3600.47,-10506.84 3638.88,-10516.28 3675.52,-10517.78"/>
<polygon fill="blue" stroke="blue" points="3675.72,-10521.28 3685.8,-10518 3675.87,-10514.28 3675.72,-10521.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3270.03,-6224.14C3316.51,-6301.74 3496.69,-6614.83 3556,-6900 3565.82,-6947.2 3544.17,-10334.79 3576,-10371 3599.06,-10397.22 3634.47,-10407.12 3669.13,-10409.43"/>
<polygon fill="blue" stroke="blue" points="3669.21,-10412.94 3679.36,-10409.9 3669.53,-10405.95 3669.21,-10412.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3270.03,-6224.14C3316.49,-6301.74 3496.62,-6614.85 3556,-6900 3574.15,-6987.16 3540.08,-10023.54 3576,-10105 3608.52,-10178.74 3686.35,-10236.28 3734.77,-10266.51"/>
<polygon fill="blue" stroke="blue" points="3733.1,-10269.59 3743.45,-10271.84 3736.76,-10263.63 3733.1,-10269.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3270.04,-6224.14C3316.53,-6301.73 3496.75,-6614.82 3556,-6900 3566.57,-6950.87 3541.7,-10601.97 3576,-10641 3612.66,-10682.72 3680.6,-10683.13 3727.03,-10677.39"/>
<polygon fill="blue" stroke="blue" points="3727.74,-10680.82 3737.17,-10675.99 3726.79,-10673.89 3727.74,-10680.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node468" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node468"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="3344,-6170 3172,-6170 3172,-6134 3344,-6134 3344,-6170"/>
<text text-anchor="middle" x="3258" y="-6148.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate(). -->
<g id="edge671" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;S&gt;`]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3344.06,-6135.91C3407.67,-6124.73 3496.93,-6110.83 3576,-6105 3988.51,-6074.59 4255.66,-6036.37 4460,-6396 4493.23,-6454.48 4444.23,-11187.93 4488,-11239 4516.59,-11272.35 4568.65,-11276.07 4607.27,-11273.32"/>
<polygon fill="blue" stroke="blue" points="4607.62,-11276.81 4617.28,-11272.45 4607.01,-11269.83 4607.62,-11276.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential(). -->
<g id="edge675" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/impl#[`KeyPair&lt;ReceiptCredential&gt;`]create_blinded_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3283.2,-6133.99C3334.13,-6097.36 3457.46,-6015.16 3576,-5986 3671.38,-5962.54 4390.36,-5916.73 4460,-5986 4511.17,-6036.89 4441.52,-11126.79 4488,-11182 4497.61,-11193.42 4509.95,-11201.5 4523.56,-11207.13"/>
<polygon fill="blue" stroke="blue" points="4522.58,-11210.49 4533.17,-11210.64 4524.98,-11203.92 4522.58,-11210.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge674" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3271.78,-6133.79C3310.28,-6080.76 3431.44,-5926.7 3576,-5872 3759.73,-5802.48 4320.68,-5733.51 4460,-5872 4505.91,-5917.64 4445.86,-10483.85 4488,-10533 4519.72,-10570 4580.34,-10570.52 4619.43,-10566.22"/>
<polygon fill="blue" stroke="blue" points="4620.36,-10569.63 4629.84,-10564.9 4619.48,-10562.68 4620.36,-10569.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge673" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3278.09,-6133.89C3324.51,-6091.27 3448.85,-5985.38 3576,-5948 3670.23,-5920.3 4390.34,-5878.75 4460,-5948 4507.29,-5995.01 4444.6,-10698.37 4488,-10749 4519.59,-10785.85 4579.84,-10786.52 4618.95,-10782.27"/>
<polygon fill="blue" stroke="blue" points="4619.39,-10785.74 4628.89,-10781.04 4618.53,-10778.8 4619.39,-10785.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge672" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3274.47,-6133.84C3316.76,-6085.8 3440.23,-5955.9 3576,-5910 3669.05,-5878.54 4390.34,-5840.75 4460,-5910 4507.13,-5956.86 4444.75,-10644.54 4488,-10695 4519.59,-10731.85 4579.84,-10732.52 4618.95,-10728.27"/>
<polygon fill="blue" stroke="blue" points="4619.39,-10731.74 4628.89,-10727.04 4618.53,-10724.8 4619.39,-10731.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge670" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3269.6,-6133.89C3304.48,-6076.37 3422.29,-5897.81 3576,-5834 3938.86,-5683.36 4181.35,-5557.02 4460,-5834 4505.73,-5879.45 4446.46,-10426.69 4488,-10476 4519.56,-10513.47 4580.43,-10515.05 4619.59,-10511.47"/>
<polygon fill="blue" stroke="blue" points="4620.2,-10514.93 4629.77,-10510.38 4619.46,-10507.97 4620.2,-10514.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt(). -->
<g id="edge676" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.46,-6133.97C3488.66,-6104.43 3819.42,-6066.11 3978,-6252 4005.64,-6284.4 3984.86,-7744.49 3998,-7785 4039.48,-7912.84 4150.22,-8034.17 4201.39,-8085.42"/>
<polygon fill="blue" stroke="blue" points="4199.22,-8088.19 4208.78,-8092.75 4204.15,-8083.22 4199.22,-8088.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate(). -->
<g id="edge677" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/receipt_credential_request/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3344.03,-6147.59C3404.98,-6147.29 3487.98,-6152.85 3556,-6179 3566.37,-6182.99 3567.01,-6187.47 3576,-6194 3752.75,-6322.45 3876.19,-6283.67 3978,-6477 3999.5,-6517.83 3967.13,-8103.71 3998,-8138 4042.73,-8187.68 4126.39,-8184.22 4179.54,-8175.68"/>
<polygon fill="blue" stroke="blue" points="4180.15,-8179.13 4189.41,-8173.98 4178.96,-8172.23 4180.15,-8179.13"/>
</g>
</g>
</svg>
