<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="3275pt" height="6730pt"
 viewBox="0.00 0.00 3275.00 6730.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 6726)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-6726 3271,-6726 3271,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3128,-4678 3128,-4753 3259,-4753 3259,-4678 3128,-4678"/>
<text text-anchor="middle" x="3193.5" y="-4737.8" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightblue" stroke="lightblue" points="2490,-126 2490,-201 2619,-201 2619,-126 2490,-126"/>
<text text-anchor="middle" x="2554.5" y="-185.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="1682.5,-1122 1682.5,-1197 1947.5,-1197 1947.5,-1122 1682.5,-1122"/>
<text text-anchor="middle" x="1815" y="-1181.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="1557,-1039 1557,-1114 2073,-1114 2073,-1039 1557,-1039"/>
<text text-anchor="middle" x="1815" y="-1098.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="1202.5,-454 1202.5,-529 1923.5,-529 1923.5,-454 1202.5,-454"/>
<text text-anchor="middle" x="1563" y="-513.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="2208,-8 2208,-83 2409,-83 2409,-8 2208,-8"/>
<text text-anchor="middle" x="2308.5" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">account_keys.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="531,-3478 531,-4363 831,-4363 831,-3478 531,-3478"/>
<text text-anchor="middle" x="681" y="-4347.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="2219,-4098 2219,-4173 2398,-4173 2398,-4098 2219,-4098"/>
<text text-anchor="middle" x="2308.5" y="-4157.8" font-family="Helvetica,sans-Serif" font-size="14.00">storage.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="1148,-371 1148,-446 1916.5,-446 1916.5,-371 1148,-371"/>
<text text-anchor="middle" x="1532.25" y="-430.8" font-family="Helvetica,sans-Serif" font-size="14.00">storage.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="1148,-1473 1148,-1548 1327,-1548 1327,-1473 1148,-1473"/>
<text text-anchor="middle" x="1237.5" y="-1532.8" font-family="Helvetica,sans-Serif" font-size="14.00">storage.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="1192,-6531 1192,-6714 1884,-6714 1884,-6531 1192,-6531"/>
<text text-anchor="middle" x="1538" y="-6698.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="2256.5,-1586 2256.5,-1661 2360.5,-1661 2360.5,-1586 2256.5,-1586"/>
<text text-anchor="middle" x="2308.5" y="-1645.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="2207.5,-4325 2207.5,-4670 3018,-4670 3018,-4325 2207.5,-4325"/>
<text text-anchor="middle" x="2612.75" y="-4654.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="2747.5,-4678 2747.5,-4915 3108,-4915 3108,-4678 2747.5,-4678"/>
<text text-anchor="middle" x="2927.75" y="-4899.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1198.5,-3985 1198.5,-4060 2347.5,-4060 2347.5,-3985 1198.5,-3985"/>
<text text-anchor="middle" x="1773" y="-4044.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="1585.5,-3848 1585.5,-3977 2368.5,-3977 2368.5,-3848 1585.5,-3848"/>
<text text-anchor="middle" x="1977" y="-3961.8" font-family="Helvetica,sans-Serif" font-size="14.00">request.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-3794 8,-3869 99,-3869 99,-3794 8,-3794"/>
<text text-anchor="middle" x="53.5" y="-3853.8" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="150,-3395 150,-3470 775,-3470 775,-3395 150,-3395"/>
<text text-anchor="middle" x="462.5" y="-3454.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="615,-2012 615,-2141 748,-2141 748,-2012 615,-2012"/>
<text text-anchor="middle" x="681.5" y="-2125.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="119,-4371 119,-4500 806,-4500 806,-4371 119,-4371"/>
<text text-anchor="middle" x="462.5" y="-4484.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="1669,-848 1669,-1031 1961,-1031 1961,-848 1669,-848"/>
<text text-anchor="middle" x="1815" y="-1015.8" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1079.5,-2988 1079.5,-3117 1395.5,-3117 1395.5,-2988 1079.5,-2988"/>
<text text-anchor="middle" x="1237.5" y="-3101.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1692,-1311 1692,-1548 2403,-1548 2403,-1311 1692,-1311"/>
<text text-anchor="middle" x="2047.5" y="-1532.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1624.5,-3556 1624.5,-3795 2404.5,-3795 2404.5,-3556 1624.5,-3556"/>
<text text-anchor="middle" x="2014.5" y="-3779.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="1696.5,-643 1696.5,-772 2401.5,-772 2401.5,-643 1696.5,-643"/>
<text text-anchor="middle" x="2049" y="-756.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="2494.5,-643 2494.5,-718 2614.5,-718 2614.5,-643 2494.5,-643"/>
<text text-anchor="middle" x="2554.5" y="-702.8" font-family="Helvetica,sans-Serif" font-size="14.00">keys.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1087,-2314 1087,-2659 2423,-2659 2423,-2314 1087,-2314"/>
<text text-anchor="middle" x="1755" y="-2643.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="1456,-3039 1456,-3438 2391.5,-3438 2391.5,-3039 1456,-3039"/>
<text text-anchor="middle" x="1923.75" y="-3422.8" font-family="Helvetica,sans-Serif" font-size="14.00">sender_keys.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="1140.5,-204 1140.5,-333 1903,-333 1903,-204 1140.5,-204"/>
<text text-anchor="middle" x="1521.75" y="-317.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="1117,-121 1117,-196 2409,-196 2409,-121 1117,-121"/>
<text text-anchor="middle" x="1763" y="-180.8" font-family="Helvetica,sans-Serif" font-size="14.00">session_cipher.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="2246,-2231 2246,-2306 2371,-2306 2371,-2231 2246,-2231"/>
<text text-anchor="middle" x="2308.5" y="-2290.8" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="1759,-4662 1759,-4791 1871,-4791 1871,-4662 1759,-4662"/>
<text text-anchor="middle" x="1815" y="-4775.8" font-family="Helvetica,sans-Serif" font-size="14.00">prekey.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="2443,-443 2443,-518 2666,-518 2666,-443 2443,-443"/>
<text text-anchor="middle" x="2554.5" y="-502.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="1714,-4383 1714,-4566 1916,-4566 1916,-4383 1714,-4383"/>
<text text-anchor="middle" x="1815" y="-4550.8" font-family="Helvetica,sans-Serif" font-size="14.00">signed_prekey.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="441.5,-2718 441.5,-3387 920.5,-3387 920.5,-2718 441.5,-2718"/>
<text text-anchor="middle" x="681" y="-3371.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="1039,-670 1039,-745 1436,-745 1436,-670 1039,-670"/>
<text text-anchor="middle" x="1237.5" y="-729.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="426.5,-2149 426.5,-2710 935.5,-2710 935.5,-2149 426.5,-2149"/>
<text text-anchor="middle" x="681" y="-2694.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="343,-5152 343,-6523 1335.5,-6523 1335.5,-5152 343,-5152"/>
<text text-anchor="middle" x="839.25" y="-6507.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="1114.5,-4799 1114.5,-5144 2343.5,-5144 2343.5,-4799 1114.5,-4799"/>
<text text-anchor="middle" x="1729" y="-5128.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<g id="a_node1"><a xlink:title="pub const fn clamp_integer(mut bytes: [u8; 32]) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;bytes[0] &amp;= 0b1111_1000; &#160;&#160;&#160;&#160;bytes[31] &amp;= 0b0111_1111; &#160;&#160;&#160;&#160;bytes[31] |= 0b0100_0000; &#160;&#160;&#160;&#160;bytes }">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="3251,-4722 3136,-4722 3136,-4686 3251,-4686 3251,-4722"/>
<text text-anchor="middle" x="3193.5" y="-4700.3" font-family="Helvetica,sans-Serif" font-size="14.00">clamp_integer</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn derive_ec_key(&amp;self, aci: &amp;Aci) &#45;&gt; PrivateKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const INFO: &amp;[u8] = b&#39; 20241024_SIGNAL_BACKUP_ID_KEYPAIR:&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut private_key_bytes = [0; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Hkdf::&lt;Sha256&gt;::new...">
<polygon fill="white" stroke="black" points="2611,-170 2498,-170 2498,-134 2611,-134 2611,-170"/>
<text text-anchor="middle" x="2554.5" y="-148.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_ec_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(value: &amp;[u8]) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut key: [u8; curve25519::PRIVATE_KEY_LENGTH] = value &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.try_into() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| CurveError::BadKey...">
<polygon fill="white" stroke="black" points="2897.5,-4431 2806.5,-4431 2806.5,-4395 2897.5,-4395 2897.5,-4431"/>
<text text-anchor="middle" x="2852" y="-4409.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2564.88,-170.17C2587.29,-214.61 2643.72,-332.93 2666,-439 2837.52,-1255.64 2850.07,-4071.17 2850.94,-4384.58"/>
<polygon fill="blue" stroke="blue" points="2847.44,-4384.67 2850.96,-4394.66 2854.44,-4384.66 2847.44,-4384.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize().</title>
<g id="a_node3"><a xlink:title="pub unsafe extern &#39; C&#39; &#160;fn signal_identitykeypair_deserialize( &#160;&#160;&#160;&#160;private_key: *mut MutPointer&lt;PrivateKey&gt;, &#160;&#160;&#160;&#160;public_key: *mut MutPointer&lt;PublicKey&gt;, &#160;&#160;&#160;&#160;input: BorrowedSliceOf&lt;c_uchar&gt;, ) &#45;&gt; *mut ...">
<polygon fill="white" stroke="black" points="1939.5,-1166 1690.5,-1166 1690.5,-1130 1939.5,-1130 1939.5,-1166"/>
<text text-anchor="middle" x="1815" y="-1144.3" font-family="Helvetica,sans-Serif" font-size="14.00">signal_identitykeypair_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node77"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let structure = proto::storage::IdentityKeyPairStructure::decode(value) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncoding)?;...">
<polygon fill="white" stroke="black" points="2346,-1355 2271,-1355 2271,-1319 2346,-1319 2346,-1355"/>
<text text-anchor="middle" x="2308.5" y="-1333.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1939.72,-1148.53C2009.31,-1153.18 2095.99,-1166.49 2166,-1201 2218.24,-1226.75 2263.8,-1278.74 2288.31,-1310.46"/>
<polygon fill="blue" stroke="blue" points="2285.83,-1312.97 2294.66,-1318.83 2291.41,-1308.74 2285.83,-1312.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize().</title>
<g id="a_node4"><a xlink:title="pub unsafe extern &#39; C&#39; &#160;fn Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize&lt; &#160;&#160;&#160;&#160;&#39;local, &gt;( &#160;&#160;&#160;&#160;mut env: JNIEnv&lt;&#39;local&gt;, &#160;&#160;&#160;&#160;_class: JClass, &#160;&#160;&#160;&#160;data: JByteArray, ) &#45;&gt; JLongArray...">
<polygon fill="white" stroke="black" points="2065,-1083 1565,-1083 1565,-1047 2065,-1047 2065,-1083"/>
<text text-anchor="middle" x="1815" y="-1061.3" font-family="Helvetica,sans-Serif" font-size="14.00">Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2065.15,-1076C2100.84,-1085.01 2135.68,-1098.4 2166,-1118 2237.73,-1164.35 2280.58,-1261.32 2298.17,-1309.13"/>
<polygon fill="blue" stroke="blue" points="2294.97,-1310.58 2301.63,-1318.82 2301.56,-1308.23 2294.97,-1310.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main().</title>
<g id="a_node5"><a xlink:title="fn main(mut cx: ModuleContext) &#45;&gt; NeonResult&lt;()&gt; { &#160;&#160;&#160;&#160;libsignal_bridge::node::register(&amp;mut cx)?; &#160;&#160;&#160;&#160;cx.export_function(&#39; initLogger&#39; , logging::init_logger)?; &#160;&#160;&#160;&#160;cx.export_function(&#39; IdentityKeyPa...">
<polygon fill="white" stroke="black" points="1264.5,-498 1210.5,-498 1210.5,-462 1264.5,-462 1264.5,-498"/>
<text text-anchor="middle" x="1237.5" y="-476.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().</title>
<g id="a_node6"><a xlink:title="fn identitykeypair_deserialize(mut cx: FunctionContext) &#45;&gt; JsResult&lt;JsObject&gt; { &#160;&#160;&#160;&#160;let buffer = cx.argument::&lt;JsUint8Array&gt;(0)?; &#160;&#160;&#160;&#160;let identity_keypair_or_error = IdentityKeyPair::try_from(buffer.a...">
<polygon fill="white" stroke="black" points="1915.5,-498 1714.5,-498 1714.5,-462 1915.5,-462 1915.5,-498"/>
<text text-anchor="middle" x="1815" y="-476.3" font-family="Helvetica,sans-Serif" font-size="14.00">identitykeypair_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.72,-480C1341.2,-480 1567.23,-480 1704.35,-480"/>
<polygon fill="blue" stroke="blue" points="1704.47,-483.5 1714.47,-480 1704.47,-476.5 1704.47,-483.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1910.69,-498C1990.92,-518.32 2102.73,-559.49 2166,-639 2187.58,-666.12 2279.9,-1181.17 2302.5,-1308.65"/>
<polygon fill="blue" stroke="blue" points="2299.1,-1309.55 2304.29,-1318.78 2305.99,-1308.33 2299.1,-1309.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey().</title>
<g id="a_node7"><a xlink:title="pub fn BackupKey_DeriveEcKey(backup_key: &amp;[u8; BACKUP_KEY_LEN], aci: Aci) &#45;&gt; PrivateKey { &#160;&#160;&#160;&#160;// The explicit type forces the latest version of the key derivation scheme. &#160;&#160;&#160;&#160;let backup_key: BackupKey...">
<polygon fill="white" stroke="black" points="2401,-52 2216,-52 2216,-16 2401,-16 2401,-52"/>
<text text-anchor="middle" x="2308.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupKey_DeriveEcKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2348.75,-52.03C2370.66,-62.17 2398.42,-75.14 2423,-87 2451.73,-100.86 2483.8,-116.83 2508.96,-129.47"/>
<polygon fill="blue" stroke="blue" points="2507.39,-132.59 2517.89,-133.96 2510.53,-126.34 2507.39,-132.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node8"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="818,-3900 544,-3900 544,-3864 818,-3864 818,-3900"/>
<text text-anchor="middle" x="681" y="-3878.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="2395,-1517 2222,-1517 2222,-1481 2395,-1481 2395,-1517"/>
<text text-anchor="middle" x="2308.5" y="-1495.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M818.17,-3898.83C881.33,-3899.96 954.71,-3891.17 1011,-3855 1032.43,-3841.23 1025.89,-3826.84 1039,-3805 1207.05,-3525.12 1332.46,-3496.6 1436,-3187 1454.94,-3130.36 1419.88,-2966.56 1456,-2919 1658.9,-2651.88 1968.64,-2934.24 2166,-2663 2236.71,-2565.82 2147.71,-1689.21 2202,-1582 2214.92,-1556.49 2239.69,-1536.36 2261.99,-1522.32"/>
<polygon fill="blue" stroke="blue" points="2263.96,-1525.22 2270.7,-1517.05 2260.33,-1519.23 2263.96,-1525.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc().</title>
<g id="a_node9"><a xlink:title="async fn SealedSessionCipher_DecryptToUsmc( &#160;&#160;&#160;&#160;ctext: &amp;[u8], &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, ) &#45;&gt; Result&lt;UnidentifiedSenderMessageContent&gt; { &#160;&#160;&#160;&#160;sealed_sender_decrypt_to_usmc(ctext, id...">
<polygon fill="white" stroke="black" points="819.5,-3846 542.5,-3846 542.5,-3810 819.5,-3810 819.5,-3846"/>
<text text-anchor="middle" x="681" y="-3824.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSessionCipher_DecryptToUsmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<g id="a_node97"><a xlink:title="pub async fn sealed_sender_decrypt_to_usmc( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;identity_store: &amp;dyn IdentityKeyStore, ) &#45;&gt; Result&lt;UnidentifiedSenderMessageContent&gt; { &#160;&#160;&#160;&#160;let our_identity = identity_store.get_...">
<polygon fill="white" stroke="black" points="1935.5,-2493 1694.5,-2493 1694.5,-2457 1935.5,-2457 1935.5,-2493"/>
<text text-anchor="middle" x="1815" y="-2471.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt_to_usmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.86,-3834.29C897.76,-3834.57 984.68,-3828.27 1011,-3801 1057.65,-3752.66 993.28,-3246.23 1039,-3197 1159.94,-3066.76 1316.03,-3280.13 1436,-3149 1483.58,-3097 1408.19,-2566.78 1456,-2515 1521.77,-2443.76 1639.18,-2444.14 1721.56,-2455.52"/>
<polygon fill="blue" stroke="blue" points="1721.28,-2459.01 1731.68,-2456.99 1722.29,-2452.08 1721.28,-2459.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt().</title>
<g id="a_node10"><a xlink:title="async fn SealedSessionCipher_Encrypt( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;content: &amp;UnidentifiedSenderMessageContent, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="792.5,-3792 569.5,-3792 569.5,-3756 792.5,-3756 792.5,-3792"/>
<text text-anchor="middle" x="681" y="-3770.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSessionCipher_Encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<g id="a_node91"><a xlink:title="pub async fn sealed_sender_encrypt_from_usmc&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;usmc: &amp;UnidentifiedSenderMessageContent, &#160;&#160;&#160;&#160;identity_store: &amp;dyn IdentityKeyStore, &#160;&#160;&#160;&#160;rng: &amp;m...">
<polygon fill="white" stroke="black" points="1945,-2412 1685,-2412 1685,-2376 1945,-2376 1945,-2412"/>
<text text-anchor="middle" x="1815" y="-2390.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_encrypt_from_usmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M792.53,-3779.93C876.18,-3781.77 981.54,-3777.51 1011,-3747 1057.2,-3699.15 992.52,-3196.59 1039,-3149 1100.79,-3085.73 1374.75,-3184.8 1436,-3121 1487.81,-3067.04 1406.37,-2503.98 1456,-2448 1509.28,-2387.91 1598.55,-2374.35 1674.61,-2375.84"/>
<polygon fill="blue" stroke="blue" points="1674.68,-2379.35 1684.77,-2376.13 1674.88,-2372.35 1674.68,-2379.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate().</title>
<g id="a_node11"><a xlink:title="fn ECPrivateKey_Generate() &#45;&gt; PrivateKey { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let keypair = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;keypair.private_key }">
<polygon fill="white" stroke="black" points="770.5,-4062 591.5,-4062 591.5,-4026 770.5,-4026 770.5,-4062"/>
<text text-anchor="middle" x="681" y="-4040.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;pub fn generate&lt;R: Rng + CryptoRng&gt;(csprng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let private_key = curve25519::PrivateKey::new(csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = PublicKey::from(PublicKeyData::DjbPublicKey( ...">
<polygon fill="white" stroke="black" points="2594,-4369 2515,-4369 2515,-4333 2594,-4333 2594,-4369"/>
<text text-anchor="middle" x="2554.5" y="-4347.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M770.71,-4050.8C836.95,-4056 929.68,-4063.52 1011,-4071 1089.52,-4078.23 2352.13,-4180.43 2423,-4215 2473.27,-4239.52 2514.59,-4291.93 2536.5,-4324.05"/>
<polygon fill="blue" stroke="blue" points="2533.7,-4326.15 2542.16,-4332.53 2539.52,-4322.27 2533.7,-4326.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create().</title>
<g id="a_node12"><a xlink:title="async fn SenderKeyDistributionMessage_Create( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;SenderKeyDistributionMessage&gt; { &#160;&#160;&#160;&#160;let mut csprn...">
<polygon fill="white" stroke="black" points="823,-3684 539,-3684 539,-3648 823,-3648 823,-3684"/>
<text text-anchor="middle" x="681" y="-3662.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyDistributionMessage_Create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<g id="a_node70"><a xlink:title="pub async fn create_sender_key_distribution_message&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;...">
<polygon fill="white" stroke="black" points="1387.5,-3032 1087.5,-3032 1087.5,-2996 1387.5,-2996 1387.5,-3032"/>
<text text-anchor="middle" x="1237.5" y="-3010.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_sender_key_distribution_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M823.4,-3672.29C900.36,-3672.37 985.08,-3665.85 1011,-3639 1057.2,-3591.15 994.11,-3090.08 1039,-3041 1049.73,-3029.27 1062.97,-3020.88 1077.47,-3015.01"/>
<polygon fill="blue" stroke="blue" points="1078.95,-3018.19 1087.17,-3011.5 1076.57,-3011.61 1078.95,-3018.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node13"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="775,-3954 587,-3954 587,-3918 775,-3918 775,-3954"/>
<text text-anchor="middle" x="681" y="-3932.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2335.5,-3764 2281.5,-3764 2281.5,-3728 2335.5,-3728 2335.5,-3764"/>
<text text-anchor="middle" x="2308.5" y="-3742.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M775.19,-3951.56C845.9,-3958.24 942.32,-3955.79 1011,-3909 1034.33,-3893.11 1015.42,-3867.51 1039,-3852 1143.74,-3783.09 2042.99,-3820.25 2166,-3796 2203.16,-3788.67 2243.74,-3773.55 2271.88,-3761.84"/>
<polygon fill="blue" stroke="blue" points="2273.44,-3764.98 2281.28,-3757.86 2270.71,-3758.53 2273.44,-3764.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node14"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="794,-3738 568,-3738 568,-3702 794,-3702 794,-3738"/>
<text text-anchor="middle" x="681" y="-3716.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node71"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="1296,-3086 1179,-3086 1179,-3050 1296,-3050 1296,-3086"/>
<text text-anchor="middle" x="1237.5" y="-3064.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M794.21,-3725.95C877.58,-3727.68 981.71,-3723.27 1011,-3693 1055.25,-3647.27 999.05,-3170.53 1039,-3121 1069.71,-3082.93 1124.56,-3070.49 1168.68,-3067.11"/>
<polygon fill="blue" stroke="blue" points="1169.02,-3070.6 1178.78,-3066.48 1168.58,-3063.61 1169.02,-3070.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic().</title>
<g id="a_node15"><a xlink:title="fn PreKeyBundle_GetKyberPreKeyPublic(bundle: &amp;PreKeyBundle) &#45;&gt; Result&lt;KyberPublicKey&gt; { &#160;&#160;&#160;&#160;Ok(bundle.kyber_pre_key_public()?.clone()) }">
<polygon fill="white" stroke="black" points="816,-4224 546,-4224 546,-4188 816,-4188 816,-4224"/>
<text text-anchor="middle" x="681" y="-4202.3" font-family="Helvetica,sans-Serif" font-size="14.00">PreKeyBundle_GetKyberPreKeyPublic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().</title>
<g id="a_node126"><a xlink:title=" &#160;&#160;&#160;pub fn private_key(&amp;self) &#45;&gt; Result&lt;PrivateKey&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(PrivateKey::deserialize(&amp;self.get_storage().private_key)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1863,-4535 1767,-4535 1767,-4499 1863,-4499 1863,-4535"/>
<text text-anchor="middle" x="1815" y="-4513.3" font-family="Helvetica,sans-Serif" font-size="14.00">private_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M775.3,-4187.97C847.25,-4179.62 945.25,-4181.02 1011,-4233 1042.53,-4257.93 1011.65,-4289.54 1039,-4319 1175.28,-4465.81 1261.07,-4443.9 1456,-4490 1560.06,-4514.61 1685.43,-4518.36 1756.81,-4518.16"/>
<polygon fill="blue" stroke="blue" points="1756.97,-4521.66 1766.95,-4518.1 1756.93,-4514.66 1756.97,-4521.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree().</title>
<g id="a_node16"><a xlink:title="fn ECPrivateKey_Agree(private_key: &amp;PrivateKey, public_key: &amp;PublicKey) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;Ok(private_key.calculate_agreement(public_key)?.into_vec()) }">
<polygon fill="white" stroke="black" points="758.5,-4116 603.5,-4116 603.5,-4080 758.5,-4080 758.5,-4116"/>
<text text-anchor="middle" x="681" y="-4094.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Agree</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_agreement(&amp;self, their_key: &amp;PublicKey) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match (self.key, their_key.key) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(PrivateKeyData::DjbPrivateKey(priv_key), PublicKe...">
<polygon fill="white" stroke="black" points="2634.5,-4423 2474.5,-4423 2474.5,-4387 2634.5,-4387 2634.5,-4423"/>
<text text-anchor="middle" x="2554.5" y="-4401.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.52,-4103.51C825.24,-4108.51 924.6,-4116.38 1011,-4125 1089.59,-4132.84 2364.19,-4238.27 2423,-4291 2452.54,-4317.49 2415.14,-4349.75 2443,-4378 2449.3,-4384.38 2456.84,-4389.35 2464.98,-4393.21"/>
<polygon fill="blue" stroke="blue" points="2463.82,-4396.52 2474.4,-4397.1 2466.5,-4390.05 2463.82,-4396.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node17"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="818,-3522 544,-3522 544,-3486 818,-3486 818,-3522"/>
<text text-anchor="middle" x="681" y="-3500.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node114"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="1326.5,-302 1148.5,-302 1148.5,-266 1326.5,-266 1326.5,-302"/>
<text text-anchor="middle" x="1237.5" y="-280.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M818.09,-3509.31C896.7,-3509.11 985.06,-3502.16 1011,-3474 1069.48,-3410.52 990.91,-438.67 1039,-367 1061.59,-333.33 1100.75,-313.29 1138.28,-301.37"/>
<polygon fill="blue" stroke="blue" points="1139.71,-304.59 1148.28,-298.36 1137.7,-297.89 1139.71,-304.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node18"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="754,-4170 608,-4170 608,-4134 754,-4134 754,-4170"/>
<text text-anchor="middle" x="681" y="-4148.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="2629.5,-4531 2479.5,-4531 2479.5,-4495 2629.5,-4495 2629.5,-4531"/>
<text text-anchor="middle" x="2554.5" y="-4509.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M754.24,-4157.5C820.92,-4162.68 922.69,-4170.84 1011,-4179 1050.26,-4182.63 2394.84,-4296.41 2423,-4324 2474.82,-4374.77 2394.78,-4431.79 2443,-4486 2450.29,-4494.19 2459.61,-4500.1 2469.74,-4504.33"/>
<polygon fill="blue" stroke="blue" points="2468.64,-4507.65 2479.24,-4507.76 2471.02,-4501.07 2468.64,-4507.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize().</title>
<g id="a_node19"><a xlink:title="fn PrivateKey_Deserialize(data: &amp;[u8]) &#45;&gt; Result&lt;PrivateKey&gt; { &#160;&#160;&#160;&#160;Ok(PrivateKey::deserialize(data)?) }">
<polygon fill="white" stroke="black" points="767,-4278 595,-4278 595,-4242 767,-4242 767,-4278"/>
<text text-anchor="middle" x="681" y="-4256.3" font-family="Helvetica,sans-Serif" font-size="14.00">PrivateKey_Deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764,-4241.98C837.63,-4230.95 944.14,-4228.52 1011,-4287 1054.83,-4325.34 1000.81,-4371.03 1039,-4415 1168.65,-4564.28 1263.93,-4523.08 1456,-4570 1764.89,-4645.46 1885.86,-4507.59 2166,-4658 2187.66,-4669.63 2179.66,-4689.73 2202,-4700 2295.86,-4743.17 2591.57,-4742.65 2666,-4671 2723.38,-4615.77 2647.36,-4558.56 2694,-4494 2718.63,-4459.91 2761.91,-4439.1 2796.8,-4427.13"/>
<polygon fill="blue" stroke="blue" points="2797.99,-4430.42 2806.4,-4423.98 2795.8,-4423.77 2797.99,-4430.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New().</title>
<g id="a_node20"><a xlink:title="fn KyberPreKeyRecord_New( &#160;&#160;&#160;&#160;id: u32, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;key_pair: &amp;KyberKeyPair, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; KyberPreKeyRecord { &#160;&#160;&#160;&#160;KyberPreKeyRecord::new(id.into(), timestamp, key_pair, ...">
<polygon fill="white" stroke="black" points="774.5,-4332 587.5,-4332 587.5,-4296 774.5,-4296 774.5,-4332"/>
<text text-anchor="middle" x="681" y="-4310.3" font-family="Helvetica,sans-Serif" font-size="14.00">KyberPreKeyRecord_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().</title>
<g id="a_node122"><a xlink:title=" &#160;&#160;&#160;pub fn private_key(&amp;self) &#45;&gt; Result&lt;PrivateKey&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(PrivateKey::deserialize(&amp;self.pre_key.private_key)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1863,-4760 1767,-4760 1767,-4724 1863,-4724 1863,-4760"/>
<text text-anchor="middle" x="1815" y="-4738.3" font-family="Helvetica,sans-Serif" font-size="14.00">private_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M774.71,-4301.15C849.54,-4296.46 951.8,-4303.94 1011,-4367 1055.16,-4414.04 994.39,-4609.38 1039,-4656 1230.95,-4856.58 1612.71,-4790.98 1756.99,-4756.95"/>
<polygon fill="blue" stroke="blue" points="1758.05,-4760.3 1766.96,-4754.56 1756.42,-4753.49 1758.05,-4760.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node21"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="768,-3630 594,-3630 594,-3594 768,-3594 768,-3630"/>
<text text-anchor="middle" x="681" y="-3608.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1264.5,-2574 1210.5,-2574 1210.5,-2538 1264.5,-2538 1264.5,-2574"/>
<text text-anchor="middle" x="1237.5" y="-2552.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.39,-3617.34C854.66,-3620.58 978.92,-3618.85 1011,-3585 1087.6,-3504.15 964.61,-2665.89 1039,-2583 1078.99,-2538.44 1155.14,-2541.78 1200.31,-2548.63"/>
<polygon fill="blue" stroke="blue" points="1199.83,-2552.09 1210.27,-2550.27 1200.97,-2545.19 1199.83,-2552.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node22"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="766,-3576 596,-3576 596,-3540 766,-3540 766,-3576"/>
<text text-anchor="middle" x="681" y="-3554.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="1264.5,-2520 1210.5,-2520 1210.5,-2484 1264.5,-2484 1264.5,-2520"/>
<text text-anchor="middle" x="1237.5" y="-2498.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M766.01,-3563.25C852.36,-3566.6 978.63,-3565.17 1011,-3531 1087.6,-3450.15 964.61,-2611.89 1039,-2529 1078.99,-2484.44 1155.14,-2487.78 1200.31,-2494.63"/>
<polygon fill="blue" stroke="blue" points="1199.83,-2498.09 1210.27,-2496.27 1200.97,-2491.19 1199.83,-2498.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey().</title>
<g id="a_node23"><a xlink:title="fn ECPrivateKey_GetPublicKey(k: &amp;PrivateKey) &#45;&gt; Result&lt;PublicKey&gt; { &#160;&#160;&#160;&#160;Ok(k.public_key()?) }">
<polygon fill="white" stroke="black" points="783.5,-4008 578.5,-4008 578.5,-3972 783.5,-3972 783.5,-4008"/>
<text text-anchor="middle" x="681" y="-3986.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_GetPublicKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;pub fn public_key(&amp;self) &#45;&gt; Result&lt;PublicKey, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PrivateKeyData::DjbPrivateKey(private_key) =&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2599,-4585 2510,-4585 2510,-4549 2599,-4549 2599,-4585"/>
<text text-anchor="middle" x="2554.5" y="-4563.3" font-family="Helvetica,sans-Serif" font-size="14.00">public_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M783.73,-3981.82C977.78,-3967.2 1386.06,-3941.66 1436,-3981 1465.81,-4004.48 1429.52,-4036.82 1456,-4064 1766.54,-4382.79 2136.22,-3983.68 2423,-4324 2454.06,-4360.86 2411.51,-4503.5 2443,-4540 2457.02,-4556.26 2479.06,-4563.58 2499.78,-4566.62"/>
<polygon fill="blue" stroke="blue" points="2499.47,-4570.1 2509.8,-4567.78 2500.28,-4563.15 2499.47,-4570.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;async fn get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut key = MutPointer::null(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = (self.get_identity_key_pair)(self.ctx, &amp;mut k...">
<polygon fill="white" stroke="black" points="2390,-4142 2227,-4142 2227,-4106 2390,-4106 2390,-4142"/>
<text text-anchor="middle" x="2308.5" y="-4120.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2332.7,-4142.05C2359.82,-4164.67 2403.46,-4206.2 2423,-4253 2447.64,-4312 2401.8,-4491.12 2443,-4540 2456.89,-4556.48 2479.02,-4563.82 2499.84,-4566.81"/>
<polygon fill="blue" stroke="blue" points="2499.59,-4570.3 2509.92,-4567.95 2500.37,-4563.35 2499.59,-4570.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;async fn get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.do_get_identity_key_pair()?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1319,-415 1156,-415 1156,-379 1319,-379 1319,-415"/>
<text text-anchor="middle" x="1237.5" y="-393.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn do_get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, BridgeOrProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.env &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.borrow_mut() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_local_frame(8, &#39; getIdentityKeyPair&#39; , |env| { &#160;...">
<polygon fill="white" stroke="black" points="1908.5,-415 1721.5,-415 1721.5,-379 1908.5,-379 1908.5,-415"/>
<text text-anchor="middle" x="1815" y="-393.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.13,-397C1421.57,-397 1598.52,-397 1710.74,-397"/>
<polygon fill="blue" stroke="blue" points="1711.06,-400.5 1721.06,-397 1711.06,-393.5 1711.06,-400.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1908.75,-382.9C1988.57,-376.5 2100.86,-382.19 2166,-450 2216.49,-502.57 2191.26,-703.91 2202,-776 2232.65,-981.65 2283.92,-1227.02 2301.43,-1308.88"/>
<polygon fill="blue" stroke="blue" points="2298.01,-1309.64 2303.53,-1318.68 2304.86,-1308.17 2298.01,-1309.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;async fn get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.do_get_identity_key() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.await &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|s| js_erro...">
<polygon fill="white" stroke="black" points="1319,-1517 1156,-1517 1156,-1481 1319,-1481 1319,-1517"/>
<text text-anchor="middle" x="1237.5" y="-1495.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<g id="a_node72"><a xlink:title=" &#160;&#160;&#160;fn try_from(private_key: PrivateKey) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key = IdentityKey::new(private_key.public_key()?); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::new(identity_key, private_key)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1852.5,-1517 1777.5,-1517 1777.5,-1481 1852.5,-1481 1852.5,-1517"/>
<text text-anchor="middle" x="1815" y="-1495.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.13,-1499C1441.2,-1499 1669.08,-1499 1767.14,-1499"/>
<polygon fill="blue" stroke="blue" points="1767.34,-1502.5 1777.34,-1499 1767.34,-1495.5 1767.34,-1502.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().</title>
<g id="a_node28"><a xlink:title="pub fn key_agreement(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let bob_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; key agreement&#39; , |b| {...">
<polygon fill="white" stroke="black" points="1876,-6629 1754,-6629 1754,-6593 1876,-6593 1876,-6629"/>
<text text-anchor="middle" x="1815" y="-6607.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_agreement(&amp;self, their_key: &amp;PublicKey) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_agreement(their_key) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2388.5,-4423 2228.5,-4423 2228.5,-4387 2388.5,-4387 2388.5,-4423"/>
<text text-anchor="middle" x="2308.5" y="-4401.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1876.19,-6615.59C1965.79,-6620.96 2127.83,-6624.55 2166,-6584 2247.96,-6496.94 2127.89,-4525.84 2202,-4432 2206.71,-4426.03 2212.55,-4421.27 2219.04,-4417.49"/>
<polygon fill="blue" stroke="blue" points="2220.85,-4420.5 2228.25,-4412.92 2217.74,-4414.23 2220.85,-4420.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1876.13,-6614.82C1964.83,-6619.1 2124.73,-6621.16 2166,-6584 2231.82,-6524.73 2182.46,-6474.39 2202,-6388 2285.27,-6019.85 2370.32,-5941.75 2423,-5568 2427.61,-5535.26 2422.37,-4403.83 2443,-4378 2457.59,-4359.73 2482.31,-4352.59 2504.68,-4350.18"/>
<polygon fill="blue" stroke="blue" points="2505.05,-4353.66 2514.74,-4349.39 2504.5,-4346.69 2505.05,-4353.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node29"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1275,-6629 1200,-6629 1200,-6593 1275,-6593 1275,-6629"/>
<text text-anchor="middle" x="1237.5" y="-6607.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.38,-6611C1369.6,-6611 1620.45,-6611 1743.68,-6611"/>
<polygon fill="blue" stroke="blue" points="1743.77,-6614.5 1753.77,-6611 1743.77,-6607.5 1743.77,-6614.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node30"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="1859.5,-6683 1770.5,-6683 1770.5,-6647 1859.5,-6647 1859.5,-6683"/>
<text text-anchor="middle" x="1815" y="-6661.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.38,-6616.13C1318.6,-6622.01 1392.39,-6631.66 1456,-6638 1563.66,-6648.74 1689.92,-6657.33 1760.06,-6661.75"/>
<polygon fill="blue" stroke="blue" points="1760.21,-6665.26 1770.41,-6662.39 1760.64,-6658.27 1760.21,-6665.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().</title>
<g id="a_node31"><a xlink:title="pub fn generation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;c.bench_function(&#39; generation&#39; , |b| b.iter(|| KeyPair::generate(rng))); }">
<polygon fill="white" stroke="black" points="1861,-6575 1769,-6575 1769,-6539 1861,-6539 1861,-6575"/>
<text text-anchor="middle" x="1815" y="-6553.3" font-family="Helvetica,sans-Serif" font-size="14.00">generation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1275.38,-6605.87C1318.6,-6599.99 1392.39,-6590.34 1456,-6584 1562.78,-6573.35 1687.85,-6564.81 1758.32,-6560.36"/>
<polygon fill="blue" stroke="blue" points="1758.97,-6563.83 1768.73,-6559.71 1758.53,-6556.84 1758.97,-6563.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="2383.5,-4477 2233.5,-4477 2233.5,-4441 2383.5,-4441 2383.5,-4477"/>
<text text-anchor="middle" x="2308.5" y="-4455.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1859.74,-6677.8C1934.71,-6696.75 2087.25,-6721.64 2166,-6638 2247.96,-6550.94 2127.89,-4579.84 2202,-4486 2207.85,-4478.59 2215.43,-4473.04 2223.85,-4468.92"/>
<polygon fill="blue" stroke="blue" points="2225.4,-4472.06 2233.27,-4464.97 2222.69,-4465.61 2225.4,-4472.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1859.72,-6675.12C1931.31,-6689 2074.71,-6705.2 2166,-6638 2414.84,-6454.82 2362.97,-6295.11 2423,-5992 2431.71,-5948.02 2415.09,-4413.09 2443,-4378 2457.6,-4359.64 2482.45,-4352.5 2504.89,-4350.13"/>
<polygon fill="blue" stroke="blue" points="2505.28,-4353.61 2514.98,-4349.35 2504.74,-4346.63 2505.28,-4353.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1822.13,-6538.62C1861.94,-6418.23 2084.83,-5729.01 2166,-5148 2174.11,-5089.97 2159.87,-4134.72 2202,-4094 2237.31,-4059.87 2381.14,-4068.31 2423,-4094 2506.14,-4145.03 2538.33,-4267.36 2548.96,-4322.82"/>
<polygon fill="blue" stroke="blue" points="2545.52,-4323.46 2550.75,-4332.67 2552.4,-4322.21 2545.52,-4323.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node32"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2335.5,-1630 2281.5,-1630 2281.5,-1594 2335.5,-1594 2335.5,-1630"/>
<text text-anchor="middle" x="2308.5" y="-1608.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2315.46,-1630.13C2335.57,-1692.32 2400.87,-1903.1 2423,-2083 2427.07,-2116.13 2422.28,-4459.83 2443,-4486 2449.99,-4494.83 2459.35,-4501.07 2469.68,-4505.43"/>
<polygon fill="blue" stroke="blue" points="2468.81,-4508.83 2479.4,-4508.92 2471.18,-4502.24 2468.81,-4508.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2335.71,-1617.22C2361.8,-1623.8 2401.03,-1637.74 2423,-1665 2730.05,-2046.09 2584.99,-2256.35 2666,-2739 2777.18,-3401.43 2837.79,-4222.96 2849.07,-4384.64"/>
<polygon fill="blue" stroke="blue" points="2845.58,-4385 2849.77,-4394.73 2852.57,-4384.52 2845.58,-4385"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2335.79,-1616.21C2362.73,-1622.06 2403.38,-1635.48 2423,-1665 2438.75,-1688.71 2441.72,-2148.56 2443,-2177 2482.51,-3056.14 2541.57,-4134.69 2551.92,-4322.48"/>
<polygon fill="blue" stroke="blue" points="2548.44,-4322.84 2552.48,-4332.63 2555.43,-4322.45 2548.44,-4322.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: PrivateKey) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = value.public_key()?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::new(public_key, value)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2346,-4639 2271,-4639 2271,-4603 2346,-4603 2346,-4639"/>
<text text-anchor="middle" x="2308.5" y="-4617.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2346.03,-4612.92C2386.78,-4603.9 2453.09,-4589.22 2499.76,-4578.89"/>
<polygon fill="blue" stroke="blue" points="2500.69,-4582.27 2509.7,-4576.69 2499.18,-4575.44 2500.69,-4582.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;fn test_decode_size() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized_public = key_pair.publi...">
<polygon fill="white" stroke="black" points="2375.5,-4531 2241.5,-4531 2241.5,-4495 2375.5,-4495 2375.5,-4531"/>
<text text-anchor="middle" x="2308.5" y="-4509.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decode_size</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2375.53,-4527.61C2414.49,-4536.24 2463.17,-4547.01 2499.77,-4555.11"/>
<polygon fill="blue" stroke="blue" points="2499.23,-4558.57 2509.75,-4557.32 2500.74,-4551.74 2499.23,-4558.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2375.53,-4510.2C2393.08,-4506.31 2410.58,-4499.06 2423,-4486 2456.64,-4450.62 2409.47,-4413.48 2443,-4378 2458.75,-4361.33 2482.94,-4354.23 2504.68,-4351.45"/>
<polygon fill="blue" stroke="blue" points="2505.19,-4354.91 2514.78,-4350.43 2504.48,-4347.95 2505.19,-4354.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn from(private_key: [u8; 32]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secret = StaticSecret::from(scalar::clamp_integer(private_key)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PrivateKey { secret } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3100,-4803 3046,-4803 3046,-4767 3100,-4767 3100,-4803"/>
<text text-anchor="middle" x="3073" y="-4781.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2599.13,-4582.18C2626.22,-4591.27 2661.89,-4602.65 2694,-4611 2836.23,-4647.97 2901.37,-4587.59 3018,-4677 3019.78,-4678.37 3043.35,-4726.25 3058.76,-4757.79"/>
<polygon fill="blue" stroke="blue" points="3055.71,-4759.54 3063.24,-4766.99 3062,-4756.47 3055.71,-4759.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="3010,-4539 2694,-4539 2694,-4503 3010,-4503 3010,-4539"/>
<text text-anchor="middle" x="2852" y="-4517.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2629.69,-4515.01C2646.42,-4515.46 2664.85,-4515.96 2683.71,-4516.47"/>
<polygon fill="blue" stroke="blue" points="2683.83,-4519.98 2693.92,-4516.75 2684.02,-4512.98 2683.83,-4519.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="2390.5,-4585 2226.5,-4585 2226.5,-4549 2390.5,-4549 2390.5,-4585"/>
<text text-anchor="middle" x="2308.5" y="-4563.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2390.75,-4567C2426.65,-4567 2467.87,-4567 2499.85,-4567"/>
<polygon fill="blue" stroke="blue" points="2499.88,-4570.5 2509.88,-4567 2499.88,-4563.5 2499.88,-4570.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2390.75,-4549.02C2415.96,-4543.44 2443.79,-4537.28 2469.21,-4531.65"/>
<polygon fill="blue" stroke="blue" points="2470.18,-4535.02 2479.19,-4529.45 2468.67,-4528.19 2470.18,-4535.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2385.35,-4585.07C2404.08,-4588.77 2424.18,-4592.12 2443,-4594 2541.62,-4603.87 2568.63,-4612.52 2666,-4594 2716.44,-4584.41 2770.71,-4561.33 2807.33,-4543.66"/>
<polygon fill="blue" stroke="blue" points="2809.27,-4546.61 2816.72,-4539.07 2806.19,-4540.33 2809.27,-4546.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2390.68,-4560.52C2402.94,-4556.18 2414.35,-4549.66 2423,-4540 2471.38,-4485.94 2394.78,-4432.21 2443,-4378 2458.35,-4360.74 2482.75,-4353.62 2504.71,-4350.97"/>
<polygon fill="blue" stroke="blue" points="2505.29,-4354.43 2514.92,-4350.03 2504.64,-4347.46 2505.29,-4354.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2383.7,-4475.42C2410.67,-4481.39 2441.35,-4488.18 2469.14,-4494.33"/>
<polygon fill="blue" stroke="blue" points="2468.71,-4497.82 2479.23,-4496.56 2470.22,-4490.99 2468.71,-4497.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;pub fn from_public_and_private( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = PublicKey::try_from(public_key)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pr...">
<polygon fill="white" stroke="black" points="2401.5,-4369 2215.5,-4369 2215.5,-4333 2401.5,-4333 2401.5,-4369"/>
<text text-anchor="middle" x="2308.5" y="-4347.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::deserialize(value) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2592,-4477 2517,-4477 2517,-4441 2592,-4441 2592,-4477"/>
<text text-anchor="middle" x="2554.5" y="-4455.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2401.77,-4364.36C2409.47,-4367.95 2416.71,-4372.43 2423,-4378 2442.16,-4394.97 2423.89,-4414.97 2443,-4432 2460.37,-4447.48 2485.17,-4454.43 2506.87,-4457.42"/>
<polygon fill="blue" stroke="blue" points="2506.57,-4460.91 2516.9,-4458.57 2507.36,-4453.96 2506.57,-4460.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2893.21,-4539.16C2930.81,-4558.14 2985.85,-4591.38 3018,-4636 3043.73,-4671.71 3030.18,-4689.92 3046,-4731 3049.42,-4739.89 3053.72,-4749.33 3057.84,-4757.78"/>
<polygon fill="blue" stroke="blue" points="3054.75,-4759.44 3062.34,-4766.83 3061.02,-4756.32 3054.75,-4759.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2592.03,-4453.31C2643.27,-4445.34 2736.86,-4430.77 2796.39,-4421.5"/>
<polygon fill="blue" stroke="blue" points="2797.02,-4424.95 2806.36,-4419.95 2795.94,-4418.03 2797.02,-4424.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<path fill="none" stroke="blue" d="M2897.58,-4428.91C2932.54,-4442.74 2981.27,-4465.08 3018,-4494 3087.02,-4548.34 3147.56,-4634.05 3175.72,-4677.24"/>
<polygon fill="blue" stroke="blue" points="3172.87,-4679.28 3181.23,-4685.78 3178.76,-4675.48 3172.87,-4679.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2634.5,-4411.21C2646.6,-4415.56 2657.77,-4422.15 2666,-4432 2731.8,-4510.77 2619.26,-4822.66 2694,-4893 2798.86,-4991.69 2895.51,-4968.71 3018,-4893 3046.05,-4875.66 3060.02,-4838.85 3066.62,-4813.04"/>
<polygon fill="blue" stroke="blue" points="3070.08,-4813.61 3068.95,-4803.08 3063.26,-4812.02 3070.08,-4813.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2388.72,-4405C2412.81,-4405 2439.46,-4405 2464.17,-4405"/>
<polygon fill="blue" stroke="blue" points="2464.26,-4408.5 2474.26,-4405 2464.26,-4401.5 2464.26,-4408.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R&gt;(csprng: &amp;mut R) &#45;&gt; Self &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is essentially StaticSecret::random_from_rng only with clamping &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = [0u8; 32];...">
<polygon fill="white" stroke="black" points="3100,-4722 3046,-4722 3046,-4686 3100,-4686 3100,-4722"/>
<text text-anchor="middle" x="3073" y="-4700.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2594.08,-4350.29C2618.14,-4352 2647.88,-4358.44 2666,-4378 2718.04,-4434.17 2640.64,-4493.08 2694,-4548 2796.23,-4653.21 2898.47,-4525.96 3018,-4611 3040.33,-4626.88 3054.8,-4655.12 3063.09,-4676.33"/>
<polygon fill="blue" stroke="blue" points="3059.83,-4677.62 3066.57,-4685.79 3066.4,-4675.2 3059.83,-4677.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<path fill="none" stroke="blue" d="M3100.01,-4704C3107.81,-4704 3116.75,-4704 3125.93,-4704"/>
<polygon fill="blue" stroke="blue" points="3125.95,-4707.5 3135.95,-4704 3125.95,-4700.5 3125.95,-4707.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;fn test_random_agreements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_key = PrivateKey::new(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_key = PrivateKey::...">
<polygon fill="white" stroke="black" points="2948.5,-4776 2755.5,-4776 2755.5,-4740 2948.5,-4740 2948.5,-4776"/>
<text text-anchor="middle" x="2852" y="-4754.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_agreements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2948.84,-4747.32C2971.81,-4743.4 2996.04,-4738.1 3018,-4731 3024.15,-4729.01 3030.47,-4726.41 3036.53,-4723.61"/>
<polygon fill="blue" stroke="blue" points="3038.3,-4726.64 3045.76,-4719.11 3035.23,-4720.35 3038.3,-4726.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;fn test_agreement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_public: [u8; 32] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0x1b, 0xb7, 0x59, 0x66, 0xf2, 0xe9, 0x3a, 0x36, 0x91, 0xdf, 0xff, 0x94, 0x2b, 0xb2, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xa4, 0x66, 0xa1, 0xc0, 0x8...">
<polygon fill="white" stroke="black" points="2914.5,-4884 2789.5,-4884 2789.5,-4848 2914.5,-4848 2914.5,-4884"/>
<text text-anchor="middle" x="2852" y="-4862.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2914.61,-4864.9C2946.9,-4862.16 2986.23,-4855.29 3018,-4839 3031.07,-4832.3 3042.94,-4821.29 3052.2,-4810.95"/>
<polygon fill="blue" stroke="blue" points="3054.93,-4813.14 3058.75,-4803.26 3049.6,-4808.6 3054.93,-4813.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="2909.5,-4830 2794.5,-4830 2794.5,-4794 2909.5,-4794 2909.5,-4830"/>
<text text-anchor="middle" x="2852" y="-4808.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2909.68,-4805.01C2949.54,-4800.1 3001.67,-4793.67 3035.96,-4789.44"/>
<polygon fill="blue" stroke="blue" points="3036.5,-4792.9 3045.99,-4788.21 3035.64,-4785.96 3036.5,-4792.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2943.5,-4722 2760.5,-4722 2760.5,-4686 2943.5,-4686 2943.5,-4722"/>
<text text-anchor="middle" x="2852" y="-4700.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2943.66,-4704C2975.99,-4704 3010.58,-4704 3035.69,-4704"/>
<polygon fill="blue" stroke="blue" points="3035.84,-4707.5 3045.84,-4704 3035.84,-4700.5 3035.84,-4707.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<path fill="none" stroke="blue" d="M3100.01,-4767.22C3116.94,-4755.65 3139.24,-4740.4 3157.7,-4727.79"/>
<polygon fill="blue" stroke="blue" points="3159.87,-4730.55 3166.15,-4722.01 3155.92,-4724.77 3159.87,-4730.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blocked: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;visibility: _, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2339.5,-4029 2277.5,-4029 2277.5,-3993 2339.5,-3993 2339.5,-4029"/>
<text text-anchor="middle" x="2308.5" y="-4007.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2339.71,-4018.73C2364.79,-4026.51 2399.97,-4040.74 2423,-4064 2498.07,-4139.83 2534.48,-4266.59 2547.58,-4322.75"/>
<polygon fill="blue" stroke="blue" points="2544.21,-4323.71 2549.83,-4332.69 2551.04,-4322.17 2544.21,-4323.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(dest) = destina...">
<polygon fill="white" stroke="black" points="1846,-4029 1784,-4029 1784,-3993 1846,-3993 1846,-4029"/>
<text text-anchor="middle" x="1815" y="-4007.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1846.01,-4011C1930.58,-4011 2170.98,-4011 2267.08,-4011"/>
<polygon fill="blue" stroke="blue" points="2267.26,-4014.5 2277.26,-4011 2267.26,-4007.5 2267.26,-4014.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="1268.5,-4029 1206.5,-4029 1206.5,-3993 1268.5,-3993 1268.5,-4029"/>
<text text-anchor="middle" x="1237.5" y="-4007.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1268.63,-4011C1364.76,-4011 1664.25,-4011 1773.55,-4011"/>
<polygon fill="blue" stroke="blue" points="1773.82,-4014.5 1783.82,-4011 1773.82,-4007.5 1773.82,-4014.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;fn register_account_request_fetches_messages_no_push_tokens() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request = ChatRequest::register_account( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; +18005550101&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(&amp;&#39; abc&#39; .parse().unwrap()), &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2036.5,-3946 1593.5,-3946 1593.5,-3910 2036.5,-3910 2036.5,-3946"/>
<text text-anchor="middle" x="1815" y="-3924.3" font-family="Helvetica,sans-Serif" font-size="14.00">register_account_request_fetches_messages_no_push_tokens</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_borrowed(&amp;self) &#45;&gt; AccountKeys&lt;&#39;_&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;identity_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pq_last_resort_pre_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2360.5,-3946 2256.5,-3946 2256.5,-3910 2360.5,-3910 2360.5,-3946"/>
<text text-anchor="middle" x="2308.5" y="-3924.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_borrowed</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2036.59,-3928C2113.15,-3928 2193,-3928 2246,-3928"/>
<polygon fill="blue" stroke="blue" points="2246.23,-3931.5 2256.23,-3928 2246.23,-3924.5 2246.23,-3931.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn register_account_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request = ChatRequest::register_account( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; +18005550101&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(&amp;&#39; abc&#39; .parse().unwrap()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NewMessageNotification::...">
<polygon fill="white" stroke="black" points="1910.5,-3892 1719.5,-3892 1719.5,-3856 1910.5,-3856 1910.5,-3892"/>
<text text-anchor="middle" x="1815" y="-3870.3" font-family="Helvetica,sans-Serif" font-size="14.00">register_account_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1910.63,-3878.44C1981.22,-3882.44 2079.92,-3889.5 2166,-3901 2192.47,-3904.54 2221.48,-3909.82 2246.3,-3914.78"/>
<polygon fill="blue" stroke="blue" points="2245.81,-3918.25 2256.31,-3916.8 2247.2,-3911.39 2245.81,-3918.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2360.73,-3942.1C2382.44,-3950.33 2406.49,-3962.79 2423,-3981 2515.53,-4083.05 2543.31,-4254.78 2550.89,-4322.4"/>
<polygon fill="blue" stroke="blue" points="2547.45,-4323.12 2551.98,-4332.7 2554.41,-4322.39 2547.45,-4323.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node58"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="91,-3838 16,-3838 16,-3802 91,-3802 91,-3838"/>
<text text-anchor="middle" x="53.5" y="-3816.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node61"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="708,-2056 654,-2056 654,-2020 708,-2020 708,-2056"/>
<text text-anchor="middle" x="681" y="-2034.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M54.7,-3801.76C56.24,-3670.79 67.65,-2872.11 119,-2636 176.93,-2369.62 124.09,-2227.46 343,-2065 433.15,-1998.1 576.71,-2016.09 643.55,-2029.47"/>
<polygon fill="blue" stroke="blue" points="643.09,-2032.95 653.6,-2031.57 644.52,-2026.1 643.09,-2032.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node62"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="708,-2110 654,-2110 654,-2074 708,-2074 708,-2110"/>
<text text-anchor="middle" x="681" y="-2088.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M56.53,-3801.9C63.34,-3742.6 86.72,-3548.91 119,-3391 188.42,-3051.34 261.32,-2978.5 315,-2636 323.46,-2582.01 306.32,-2185.5 343,-2145 420.14,-2059.82 573.95,-2073.32 643.89,-2084.84"/>
<polygon fill="blue" stroke="blue" points="643.52,-2088.33 653.97,-2086.59 644.72,-2081.43 643.52,-2088.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node63"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="285,-4415 157,-4415 157,-4379 285,-4379 285,-4415"/>
<text text-anchor="middle" x="221" y="-4393.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M59.73,-3838.22C83.66,-3921.66 182.87,-4267.56 211.95,-4368.95"/>
<polygon fill="blue" stroke="blue" points="208.65,-4370.13 214.77,-4378.77 215.38,-4368.2 208.65,-4370.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().</title>
<g id="a_node66"><a xlink:title="pub fn session_encrypt_decrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_decrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="315,-4469 127,-4469 127,-4433 315,-4433 315,-4469"/>
<text text-anchor="middle" x="221" y="-4447.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M55.23,-3838.14C59.24,-3933.94 79.87,-4378.29 119,-4424 119.62,-4424.72 120.26,-4425.43 120.91,-4426.12"/>
<polygon fill="blue" stroke="blue" points="118.67,-4428.81 128.48,-4432.82 123.31,-4423.57 118.67,-4428.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node59"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="767,-3439 595,-3439 595,-3403 767,-3403 767,-3439"/>
<text text-anchor="middle" x="681" y="-3417.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.87,-3439.03C834.09,-3451.66 946.47,-3456.25 1011,-3391 1065.87,-3335.52 985.39,-3097.7 1039,-3041 1049.82,-3029.55 1063.05,-3021.32 1077.47,-3015.53"/>
<polygon fill="blue" stroke="blue" points="1078.88,-3018.74 1087.11,-3012.06 1076.51,-3012.15 1078.88,-3018.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M760.32,-3439C835.27,-3451.15 946.22,-3454.98 1011,-3391 1053.92,-3348.61 999.86,-3166.9 1039,-3121 1070.62,-3083.91 1125.14,-3071.36 1168.89,-3067.69"/>
<polygon fill="blue" stroke="blue" points="1169.18,-3071.18 1178.91,-3066.99 1168.69,-3064.2 1169.18,-3071.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<g id="a_node184"><a xlink:title="pub fn test_in_memory_protocol_store() &#45;&gt; Result&lt;InMemSignalProtocolStore, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let identity_key = IdentityKeyPair::generate(&amp;mut csprng)...">
<polygon fill="white" stroke="black" points="1352.5,-4897 1122.5,-4897 1122.5,-4861 1352.5,-4861 1352.5,-4897"/>
<text text-anchor="middle" x="1237.5" y="-4875.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_in_memory_protocol_store</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.01,-3407.7C843.26,-3401.14 951.97,-3406.11 1011,-3474 1061.24,-3531.78 988.07,-4794.82 1039,-4852 1057.71,-4873 1084.44,-4883.39 1112.22,-4887.79"/>
<polygon fill="blue" stroke="blue" points="1112.11,-4891.31 1122.49,-4889.15 1113.03,-4884.37 1112.11,-4891.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node60"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="284,-3439 158,-3439 158,-3403 284,-3403 284,-3439"/>
<text text-anchor="middle" x="221" y="-3417.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M284.24,-3421C361.61,-3421 494.43,-3421 584.66,-3421"/>
<polygon fill="blue" stroke="blue" points="584.9,-3424.5 594.9,-3421 584.9,-3417.5 584.9,-3424.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M682.34,-2019.76C686.06,-1839.43 725.81,-377.35 1039,-117 1098.13,-67.85 2367.8,-63.48 2423,-117 2425.51,-119.44 2541.47,-3952.93 2552.64,-4322.46"/>
<polygon fill="blue" stroke="blue" points="2549.14,-4322.71 2552.94,-4332.6 2556.14,-4322.5 2549.14,-4322.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M702.45,-2019.97C799.12,-1936.86 1214.82,-1603.72 1436,-1817 1480.02,-1859.45 1413.61,-2322.93 1456,-2367 1527.44,-2441.28 1655.95,-2430.87 1738,-2414.18"/>
<polygon fill="blue" stroke="blue" points="1738.96,-2417.56 1748.02,-2412.07 1737.51,-2410.71 1738.96,-2417.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.25,-2029.38C816.4,-1995.66 1231.46,-1884.48 1436,-2091 1487.7,-2143.2 1406.42,-2366.79 1456,-2421 1512.23,-2482.48 1606.2,-2494.77 1683.76,-2492.33"/>
<polygon fill="blue" stroke="blue" points="1684.26,-2495.81 1694.11,-2491.91 1683.98,-2488.82 1684.26,-2495.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.42,-2030.22C771.08,-2013.57 929.5,-1982.38 1011,-2065 1075.13,-2130.02 976.65,-2408.28 1039,-2475 1079.88,-2518.75 1155.72,-2515.69 1200.59,-2509.12"/>
<polygon fill="blue" stroke="blue" points="1201.16,-2512.57 1210.48,-2507.54 1200.05,-2505.66 1201.16,-2512.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708,-2030.3C770.43,-2013.59 929.63,-1981.85 1011,-2065 1083.25,-2138.83 968.77,-2453.25 1039,-2529 1079.71,-2572.91 1155.61,-2569.8 1200.53,-2563.17"/>
<polygon fill="blue" stroke="blue" points="1201.12,-2566.62 1210.44,-2561.58 1200.01,-2559.71 1201.12,-2566.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M683.24,-2019.96C694.93,-1854.37 791.17,-598.93 1039,-337 1064.65,-309.89 1102.53,-296.11 1138.28,-289.28"/>
<polygon fill="blue" stroke="blue" points="1139.04,-292.7 1148.29,-287.53 1137.84,-285.8 1139.04,-292.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node179"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="1324.5,-4843 1150.5,-4843 1150.5,-4807 1324.5,-4807 1324.5,-4843"/>
<text text-anchor="middle" x="1237.5" y="-4821.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.25,-2030.06C771.24,-2012.82 931.57,-1979.99 1011,-2065 1048.91,-2105.58 1031.58,-4008.96 1039,-4064 1078.49,-4356.98 1192.52,-4698.92 1226.7,-4797.27"/>
<polygon fill="blue" stroke="blue" points="1223.43,-4798.5 1230.03,-4806.78 1230.03,-4796.19 1223.43,-4798.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.27,-2030.04C771.31,-2012.76 931.74,-1979.83 1011,-2065 1063.74,-2121.68 987.81,-4793.92 1039,-4852 1057.6,-4873.1 1084.29,-4883.52 1112.07,-4887.92"/>
<polygon fill="blue" stroke="blue" points="1111.96,-4891.44 1122.34,-4889.28 1112.88,-4884.5 1111.96,-4891.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.24,-2099.93C771.19,-2117.14 931.47,-2149.91 1011,-2065 1075.5,-1996.14 971.74,-433.16 1039,-367 1083.64,-323.09 2106.07,-348.88 2166,-367 2297.33,-406.7 2356.15,-418.19 2423,-538 2447.51,-581.92 2543.06,-3977.66 2552.71,-4322.78"/>
<polygon fill="blue" stroke="blue" points="2549.22,-4323.04 2553,-4332.94 2556.22,-4322.84 2549.22,-4323.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.37,-2091.08C829.76,-2087.46 1333.25,-2079.15 1436,-2186 1472.33,-2223.78 1420.16,-2382.76 1456,-2421 1512.87,-2481.68 1606.58,-2494.06 1683.87,-2491.86"/>
<polygon fill="blue" stroke="blue" points="1684.31,-2495.35 1694.17,-2491.48 1684.05,-2488.35 1684.31,-2495.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.2,-2086.8C771.05,-2076.02 931.13,-2058.9 1011,-2145 1061.05,-2198.96 988.31,-2421.64 1039,-2475 1080.04,-2518.2 1155.23,-2515.5 1200.06,-2509.1"/>
<polygon fill="blue" stroke="blue" points="1200.88,-2512.52 1210.22,-2507.52 1199.8,-2505.6 1200.88,-2512.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.26,-2086.74C771.27,-2075.83 931.64,-2058.42 1011,-2145 1068.81,-2208.07 980.44,-2466.62 1039,-2529 1079.87,-2572.54 1155.38,-2569.65 1200.26,-2563.14"/>
<polygon fill="blue" stroke="blue" points="1200.83,-2566.59 1210.16,-2561.57 1199.73,-2559.68 1200.83,-2566.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<g id="a_node104"><a xlink:title="pub async fn sealed_sender_multi_recipient_encrypt&lt; &#160;&#160;&#160;&#160;R: Rng + CryptoRng, &#160;&#160;&#160;&#160;X: IntoIterator&lt;Item = ServiceId&gt;, &gt;( &#160;&#160;&#160;&#160;destinations: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;destination_sessions: &amp;[&amp;SessionRecord]...">
<polygon fill="white" stroke="black" points="1380,-2628 1095,-2628 1095,-2592 1380,-2592 1380,-2628"/>
<text text-anchor="middle" x="1237.5" y="-2606.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_multi_recipient_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.31,-2086.7C771.43,-2075.68 932.03,-2058.07 1011,-2145 1076.58,-2217.19 972.56,-2511.6 1039,-2583 1051.63,-2596.57 1067.63,-2605.65 1085.02,-2611.51"/>
<polygon fill="blue" stroke="blue" points="1084.24,-2614.93 1094.82,-2614.45 1086.24,-2608.23 1084.24,-2614.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.24,-2099.93C771.2,-2117.14 931.48,-2149.92 1011,-2065 1076.63,-1994.92 979.95,-412.71 1039,-337 1062.5,-306.87 1101.15,-292.71 1138.06,-286.41"/>
<polygon fill="blue" stroke="blue" points="1139.05,-289.8 1148.41,-284.84 1138,-282.88 1139.05,-289.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.12,-2086.54C771.52,-2074.98 934,-2055.93 1011,-2145 1045.86,-2185.33 1031.86,-4011.17 1039,-4064 1078.57,-4356.97 1192.55,-4698.92 1226.71,-4797.27"/>
<polygon fill="blue" stroke="blue" points="1223.43,-4798.5 1230.03,-4806.78 1230.04,-4796.19 1223.43,-4798.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.14,-2086.51C771.6,-2074.91 934.19,-2055.77 1011,-2145 1060.06,-2201.99 989.27,-4795.6 1039,-4852 1057.6,-4873.1 1084.3,-4883.52 1112.07,-4887.92"/>
<polygon fill="blue" stroke="blue" points="1111.97,-4891.44 1122.34,-4889.28 1112.88,-4884.5 1111.97,-4891.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node65"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="768,-4415 594,-4415 594,-4379 768,-4379 768,-4415"/>
<text text-anchor="middle" x="681" y="-4393.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M285.2,-4397C362.35,-4397 493.61,-4397 583.44,-4397"/>
<polygon fill="blue" stroke="blue" points="583.63,-4400.5 593.63,-4397 583.63,-4393.5 583.63,-4400.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().</title>
<g id="a_node64"><a xlink:title="pub fn session_encrypt_decrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_ad...">
<polygon fill="white" stroke="black" points="798,-4469 564,-4469 564,-4433 798,-4433 798,-4469"/>
<text text-anchor="middle" x="681" y="-4447.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_decrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<g id="a_node181"><a xlink:title="pub fn initialize_sessions_v4() &#45;&gt; Result&lt;(SessionRecord, SessionRecord), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let alice_identity = IdentityKeyPair::generate(&amp;mut csprng...">
<polygon fill="white" stroke="black" points="1319.5,-4951 1155.5,-4951 1155.5,-4915 1319.5,-4915 1319.5,-4951"/>
<text text-anchor="middle" x="1237.5" y="-4929.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_sessions_v4</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M690.04,-4469.42C722.03,-4540.23 847.82,-4796.36 1039,-4906 1070.7,-4924.18 1109.84,-4931.95 1144.9,-4934.82"/>
<polygon fill="blue" stroke="blue" points="1144.93,-4938.33 1155.15,-4935.53 1145.41,-4931.34 1144.93,-4938.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M691.65,-4469.01C727.49,-4533.87 860.09,-4756.66 1039,-4852 1061.31,-4863.89 1086.97,-4871.19 1112.25,-4875.56"/>
<polygon fill="blue" stroke="blue" points="1111.87,-4879.04 1122.29,-4877.14 1112.96,-4872.13 1111.87,-4879.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.27,-4415.02C833.57,-4427.8 946.51,-4432.69 1011,-4367 1071.25,-4305.63 994,-4054.29 1039,-3981 1146.76,-3805.49 1325.4,-3915.74 1436,-3742 1458.8,-3706.19 1424.45,-3580.41 1456,-3552 1495.93,-3516.06 2384.61,-3514.42 2423,-3552 2460.09,-3588.3 2410.52,-4445.52 2443,-4486 2450,-4494.73 2459.32,-4500.91 2469.58,-4505.26"/>
<polygon fill="blue" stroke="blue" points="2468.64,-4508.64 2479.23,-4508.75 2471.02,-4502.05 2468.64,-4508.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.69,-4415.01C833.08,-4427.98 946.6,-4433.18 1011,-4367 1045.09,-4331.97 1018.65,-3972.44 1039,-3928 1147.08,-3691.97 1215.75,-3617.34 1456,-3519 1505.72,-3498.65 2382.18,-3483.08 2423,-3518 2548.36,-3625.25 2554.14,-4189.47 2553.73,-4322.76"/>
<polygon fill="blue" stroke="blue" points="2550.22,-4322.94 2553.68,-4332.96 2557.22,-4322.98 2550.22,-4322.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.18,-4401.62C854.63,-4404.16 979.36,-4401.41 1011,-4367 1086.2,-4285.2 977.18,-459.33 1039,-367 1061.56,-333.31 1100.71,-313.26 1138.24,-301.35"/>
<polygon fill="blue" stroke="blue" points="1139.68,-304.57 1148.25,-298.34 1137.67,-297.87 1139.68,-304.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.15,-4378.97C828.43,-4364.61 945.24,-4356.65 1011,-4424 1085.96,-4500.77 966.14,-4827.24 1039,-4906 1065.53,-4934.68 1107.08,-4943.32 1145.24,-4944.01"/>
<polygon fill="blue" stroke="blue" points="1145.37,-4947.51 1155.37,-4944.01 1145.37,-4940.51 1145.37,-4947.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.4,-4378.99C828.61,-4364.76 945.09,-4356.99 1011,-4424 1077.84,-4491.95 974.02,-4782.27 1039,-4852 1058.02,-4872.41 1084.64,-4882.64 1112.19,-4887.08"/>
<polygon fill="blue" stroke="blue" points="1111.99,-4890.59 1122.37,-4888.47 1112.93,-4883.65 1111.99,-4890.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M315.24,-4451C383.95,-4451 478.18,-4451 553.65,-4451"/>
<polygon fill="blue" stroke="blue" points="553.7,-4454.5 563.7,-4451 553.7,-4447.5 553.7,-4454.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_mismatching_fingerprints() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = Id...">
<polygon fill="white" stroke="black" points="1953,-1000 1677,-1000 1677,-964 1953,-964 1953,-1000"/>
<text text-anchor="middle" x="1815" y="-978.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_mismatching_fingerprints</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;pub fn generate&lt;R: CryptoRng + Rng&gt;(csprng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair = KeyPair::generate(csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;identity_key: keypair.public_key.into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;priv...">
<polygon fill="white" stroke="black" points="2348,-1409 2269,-1409 2269,-1373 2348,-1373 2348,-1409"/>
<text text-anchor="middle" x="2308.5" y="-1387.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1953.19,-965.9C2026.42,-965.36 2112.28,-979.02 2166,-1035 2267.84,-1141.14 2105.6,-1252.89 2202,-1364 2216.04,-1380.19 2238.33,-1387.33 2258.82,-1390.27"/>
<polygon fill="blue" stroke="blue" points="2258.66,-1393.78 2268.99,-1391.42 2259.45,-1386.82 2258.66,-1393.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().</title>
<g id="a_node68"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_matching_identifiers() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// testMatchingFingerprints &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = IdentityKey...">
<polygon fill="white" stroke="black" points="1934.5,-946 1695.5,-946 1695.5,-910 1934.5,-910 1934.5,-946"/>
<text text-anchor="middle" x="1815" y="-924.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_matching_identifiers</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1934.55,-921.39C2023.1,-919.26 2134.1,-923.44 2166,-955 2230.86,-1019.17 2142.94,-1294.45 2202,-1364 2215.87,-1380.34 2238.14,-1387.5 2258.65,-1390.41"/>
<polygon fill="blue" stroke="blue" points="2258.53,-1393.92 2268.85,-1391.54 2259.3,-1386.96 2258.53,-1393.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().</title>
<g id="a_node69"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_mismatching_identifiers() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = Ide...">
<polygon fill="white" stroke="black" points="1947,-892 1683,-892 1683,-856 1947,-856 1947,-892"/>
<text text-anchor="middle" x="1815" y="-870.3" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_mismatching_identifiers</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1884.9,-855.94C1964.33,-839.71 2093.26,-828.3 2166,-901 2239,-973.95 2135.6,-1285 2202,-1364 2215.79,-1380.41 2238.05,-1387.58 2258.58,-1390.47"/>
<polygon fill="blue" stroke="blue" points="2258.46,-1393.98 2268.78,-1391.6 2259.23,-1387.02 2258.46,-1393.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1387.79,-3011.54C1406.08,-3017.39 1422.9,-3026.72 1436,-3041 1466.16,-3073.87 1424.29,-3410.62 1456,-3442 1532.43,-3517.63 2342.92,-3408.24 2423,-3480 2551.75,-3595.37 2554.87,-4186.51 2553.84,-4322.9"/>
<polygon fill="blue" stroke="blue" points="2550.34,-4322.93 2553.75,-4332.96 2557.34,-4322.99 2550.34,-4322.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1241.22,-3086.24C1256.77,-3188 1338.01,-3684 1456,-3771 1519.49,-3817.82 2087.41,-3777.89 2166,-3771 2202.19,-3767.83 2242.99,-3760.18 2271.45,-3754.17"/>
<polygon fill="blue" stroke="blue" points="2272.3,-3757.56 2281.34,-3752.04 2270.83,-3750.72 2272.3,-3757.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn signing_key_private(&amp;self) &#45;&gt; Result&lt;PrivateKey, InvalidSessionError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(ref signing_key) = self.state.sender_signing_key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PrivateKey::deserialize(&amp;si...">
<polygon fill="white" stroke="black" points="1892,-3083 1738,-3083 1738,-3047 1892,-3047 1892,-3083"/>
<text text-anchor="middle" x="1815" y="-3061.3" font-family="Helvetica,sans-Serif" font-size="14.00">signing_key_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1296.05,-3067.7C1397.43,-3067.17 1608.36,-3066.07 1727.4,-3065.45"/>
<polygon fill="blue" stroke="blue" points="1727.58,-3068.95 1737.56,-3065.4 1727.55,-3061.95 1727.58,-3068.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1840.24,-1517.21C1937.18,-1591.77 2297.81,-1885.99 2423,-2227 2445.14,-2287.32 2403.11,-4489.63 2443,-4540 2456.44,-4556.96 2478.61,-4564.35 2499.59,-4567.25"/>
<polygon fill="blue" stroke="blue" points="2499.43,-4570.76 2509.74,-4568.34 2500.17,-4563.8 2499.43,-4570.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2348.04,-1407.34C2374.15,-1420.64 2406.75,-1442.12 2423,-1472 2494.91,-1604.22 2546.95,-4032.06 2552.92,-4322.63"/>
<polygon fill="blue" stroke="blue" points="2549.43,-4322.85 2553.13,-4332.77 2556.43,-4322.7 2549.43,-4322.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn test_serialize_identity_key_pair() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = IdentityKeyPair::generate(&amp;mut OsRng.unwrap_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = identity_key_pair.serialize(); &#160;&#160;...">
<polygon fill="white" stroke="black" points="1930,-1355 1700,-1355 1700,-1319 1930,-1319 1930,-1355"/>
<text text-anchor="middle" x="1815" y="-1333.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_serialize_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1930.22,-1342.59C1998.78,-1346.74 2087.62,-1353.53 2166,-1364 2197.1,-1368.15 2231.71,-1374.72 2258.91,-1380.34"/>
<polygon fill="blue" stroke="blue" points="2258.45,-1383.82 2268.95,-1382.44 2259.88,-1376.97 2258.45,-1383.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1930.3,-1337C2035.27,-1337 2185.57,-1337 2260.82,-1337"/>
<polygon fill="blue" stroke="blue" points="2260.93,-1340.5 2270.93,-1337 2260.93,-1333.5 2260.93,-1340.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn test_identity_key_from() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut OsRng.unwrap_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair_public_serialized = key_pair.public_key.serialize(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key ...">
<polygon fill="white" stroke="black" points="1901,-1463 1729,-1463 1729,-1427 1901,-1427 1901,-1463"/>
<text text-anchor="middle" x="1815" y="-1441.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_identity_key_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1901.4,-1440.13C1992.37,-1436.88 2128.36,-1438.2 2166,-1472 2230.92,-1530.3 2139.87,-1603.74 2202,-1665 2272.97,-1734.97 2357.36,-1628 2423,-1703 2442.59,-1725.38 2441.67,-2208.29 2443,-2238 2481.26,-3091.21 2541.17,-4137.52 2551.84,-4322.42"/>
<polygon fill="blue" stroke="blue" points="2548.37,-4322.89 2552.44,-4332.67 2555.35,-4322.48 2548.37,-4322.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="1929,-1409 1701,-1409 1701,-1373 1929,-1373 1929,-1409"/>
<text text-anchor="middle" x="1815" y="-1387.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1929.07,-1391C2033.03,-1391 2182.22,-1391 2258.51,-1391"/>
<polygon fill="blue" stroke="blue" points="2258.78,-1394.5 2268.78,-1391 2258.78,-1387.5 2258.78,-1394.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1929.08,-1387.22C1998.8,-1387.93 2089.26,-1394.39 2166,-1418 2206.28,-1430.39 2247.57,-1455.77 2275.07,-1474.83"/>
<polygon fill="blue" stroke="blue" points="2273.31,-1477.87 2283.49,-1480.78 2277.34,-1472.15 2273.31,-1477.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2346.16,-1339.09C2369.8,-1341.96 2400.27,-1348.62 2423,-1364 2578.05,-1468.87 2603.29,-1531.63 2666,-1708 2854.13,-2237.06 2852.28,-4129.37 2851.16,-4384.47"/>
<polygon fill="blue" stroke="blue" points="2847.66,-4384.74 2851.11,-4394.75 2854.66,-4384.77 2847.66,-4384.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2349.28,-1517.13C2374.9,-1531.04 2406.41,-1552.82 2423,-1582 2462.41,-1651.32 2649.33,-4373.94 2694,-4440 2712.83,-4467.86 2744.33,-4486.71 2774.19,-4499.16"/>
<polygon fill="blue" stroke="blue" points="2773.22,-4502.54 2783.81,-4502.98 2775.81,-4496.04 2773.22,-4502.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="1931.5,-3654 1698.5,-3654 1698.5,-3618 1931.5,-3618 1931.5,-3654"/>
<text text-anchor="middle" x="1815" y="-3632.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1931.52,-3623.15C2086.86,-3608.57 2351.84,-3594.04 2423,-3655 2526.78,-3743.91 2548.73,-4203.26 2552.71,-4322.63"/>
<polygon fill="blue" stroke="blue" points="2549.21,-4322.91 2553.03,-4332.79 2556.21,-4322.69 2549.21,-4322.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;fn create_signal_message&lt;T&gt;(csprng: &amp;mut T) &#45;&gt; Result&lt;SignalMessage&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T: Rng + CryptoRng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut mac_key = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut mac_key); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2396.5,-3710 2220.5,-3710 2220.5,-3674 2396.5,-3674 2396.5,-3710"/>
<text text-anchor="middle" x="2308.5" y="-3688.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_signal_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1931.87,-3641.29C2000.22,-3645.32 2088.3,-3652.08 2166,-3663 2183.02,-3665.39 2201.07,-3668.58 2218.38,-3671.97"/>
<polygon fill="blue" stroke="blue" points="2217.98,-3675.46 2228.47,-3673.98 2219.35,-3668.6 2217.98,-3675.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1931.74,-3619.98C2003.96,-3615.74 2096.14,-3621.29 2166,-3663 2191.4,-3678.17 2178.01,-3701.69 2202,-3719 2222.16,-3733.54 2249.44,-3740.27 2271.21,-3743.37"/>
<polygon fill="blue" stroke="blue" points="2271.05,-3746.88 2281.4,-3744.62 2271.9,-3739.93 2271.05,-3746.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2396.6,-3701.59C2406.45,-3705.73 2415.59,-3711.37 2423,-3719 2508.99,-3807.6 2543.65,-4212.13 2551.62,-4322.89"/>
<polygon fill="blue" stroke="blue" points="2548.14,-4323.23 2552.33,-4332.95 2555.12,-4322.73 2548.14,-4323.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2335.82,-3759.94C2363.21,-3776.08 2404.63,-3805.46 2423,-3844 2453.71,-3908.42 2398.06,-4430.56 2443,-4486 2450.05,-4494.69 2459.38,-4500.86 2469.66,-4505.19"/>
<polygon fill="blue" stroke="blue" points="2468.72,-4508.58 2479.31,-4508.68 2471.1,-4501.99 2468.72,-4508.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;fn test_signal_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message = create_signal_message(&amp;mut csprng)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deser_message = &#160;...">
<polygon fill="white" stroke="black" points="1967.5,-3762 1662.5,-3762 1662.5,-3726 1967.5,-3726 1967.5,-3762"/>
<text text-anchor="middle" x="1815" y="-3740.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signal_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1967.5,-3735.56C2029.21,-3731.28 2101.15,-3725.21 2166,-3717 2180.28,-3715.19 2195.3,-3712.93 2210.02,-3710.51"/>
<polygon fill="blue" stroke="blue" points="2210.86,-3713.92 2220.14,-3708.81 2209.7,-3707.01 2210.86,-3713.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;fn test_pre_key_signal_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base...">
<polygon fill="white" stroke="black" points="1997.5,-3600 1632.5,-3600 1632.5,-3564 1997.5,-3564 1997.5,-3600"/>
<text text-anchor="middle" x="1815" y="-3578.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pre_key_signal_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1871.15,-3563.97C1988.66,-3529.36 2265.8,-3468.55 2423,-3606 2533.47,-3702.59 2550.52,-4198.39 2553.07,-4322.7"/>
<polygon fill="blue" stroke="blue" points="2549.57,-4322.99 2553.26,-4332.92 2556.57,-4322.86 2549.57,-4322.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1997.91,-3580.46C2052.9,-3584.12 2112.79,-3592.32 2166,-3609 2206.71,-3621.76 2248.22,-3648 2275.66,-3667.58"/>
<polygon fill="blue" stroke="blue" points="2273.91,-3670.64 2284.06,-3673.68 2278.02,-3664.97 2273.91,-3670.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="1986,-3708 1644,-3708 1644,-3672 1986,-3672 1986,-3708"/>
<text text-anchor="middle" x="1815" y="-3686.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1986.01,-3677.46C2159.67,-3665.48 2406.27,-3651.15 2423,-3665 2526.81,-3750.92 2548.74,-4204.94 2552.71,-4322.95"/>
<polygon fill="blue" stroke="blue" points="2549.21,-4323.11 2553.03,-4333 2556.21,-4322.89 2549.21,-4323.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1986.03,-3698.82C2043.36,-3702.94 2107.61,-3708.8 2166,-3717 2202.16,-3722.08 2242.97,-3730.76 2271.43,-3737.31"/>
<polygon fill="blue" stroke="blue" points="2270.8,-3740.75 2281.33,-3739.61 2272.38,-3733.94 2270.8,-3740.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().</title>
<g id="a_node85"><a xlink:title="pub fn initialize_bob_session_record( &#160;&#160;&#160;&#160;parameters: &amp;BobSignalProtocolParameters, ) &#45;&gt; Result&lt;SessionRecord&gt; { &#160;&#160;&#160;&#160;Ok(SessionRecord::new(initialize_bob_session(parameters)?)) }">
<polygon fill="white" stroke="black" points="1922.5,-741 1707.5,-741 1707.5,-705 1922.5,-705 1922.5,-741"/>
<text text-anchor="middle" x="1815" y="-719.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_bob_session_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<g id="a_node86"><a xlink:title="pub(crate) fn initialize_bob_session( &#160;&#160;&#160;&#160;parameters: &amp;BobSignalProtocolParameters, ) &#45;&gt; Result&lt;SessionState&gt; { &#160;&#160;&#160;&#160;let local_identity = parameters.our_identity_key_pair().identity_key(); &#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="2391,-741 2226,-741 2226,-705 2391,-705 2391,-741"/>
<text text-anchor="middle" x="2308.5" y="-719.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_bob_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1922.65,-723C2010.05,-723 2132.47,-723 2215.59,-723"/>
<polygon fill="blue" stroke="blue" points="2215.78,-726.5 2225.78,-723 2215.78,-719.5 2215.78,-726.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2314.39,-741.47C2333.15,-813.33 2400.54,-1081.4 2423,-1307 2427.23,-1349.44 2416.55,-4344.54 2443,-4378 2448.89,-4385.45 2456.47,-4391.06 2464.89,-4395.25"/>
<polygon fill="blue" stroke="blue" points="2463.75,-4398.57 2474.32,-4399.26 2466.49,-4392.12 2463.75,-4398.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<g id="a_node87"><a xlink:title="pub(crate) fn initialize_alice_session&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;parameters: &amp;AliceSignalProtocolParameters, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;SessionState&gt; { &#160;&#160;&#160;&#160;let local_identity = parameters.our_...">
<polygon fill="white" stroke="black" points="2393.5,-687 2223.5,-687 2223.5,-651 2393.5,-651 2393.5,-687"/>
<text text-anchor="middle" x="2308.5" y="-665.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_alice_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2393.64,-675.4C2405.02,-679.84 2415.38,-686.41 2423,-696 2454.81,-736.04 2411.31,-4337.86 2443,-4378 2448.89,-4385.46 2456.46,-4391.06 2464.88,-4395.25"/>
<polygon fill="blue" stroke="blue" points="2463.74,-4398.57 2474.31,-4399.26 2466.48,-4392.13 2463.74,-4398.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2393.67,-675.72C2404.97,-680.12 2415.3,-686.6 2423,-696 2544.93,-844.79 2552.96,-3988.06 2553.47,-4322.29"/>
<polygon fill="blue" stroke="blue" points="2549.97,-4322.59 2553.48,-4332.59 2556.97,-4322.58 2549.97,-4322.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn create_chain( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_ratchet_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_ratchet_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(RootKey, ChainKey)&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let shared_secret = our_ratche...">
<polygon fill="white" stroke="black" points="2606.5,-687 2502.5,-687 2502.5,-651 2606.5,-651 2606.5,-687"/>
<text text-anchor="middle" x="2554.5" y="-665.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_chain</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2393.81,-669C2426.1,-669 2462.28,-669 2492.04,-669"/>
<polygon fill="blue" stroke="blue" points="2492.28,-672.5 2502.28,-669 2492.28,-665.5 2492.28,-672.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().</title>
<g id="a_node88"><a xlink:title="pub fn initialize_alice_session_record&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;parameters: &amp;AliceSignalProtocolParameters, &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; Result&lt;SessionRecord&gt; { &#160;&#160;&#160;&#160;Ok(SessionRecord::new(initialize_alice_...">
<polygon fill="white" stroke="black" points="1925.5,-687 1704.5,-687 1704.5,-651 1925.5,-651 1925.5,-687"/>
<text text-anchor="middle" x="1815" y="-665.3" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_alice_session_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1925.69,-669C2012.06,-669 2131.16,-669 2213.27,-669"/>
<polygon fill="blue" stroke="blue" points="2213.34,-672.5 2223.34,-669 2213.34,-665.5 2213.34,-672.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2553.66,-687.16C2544.28,-892.13 2458.51,-2792.03 2433,-4330 2432.71,-4347.33 2425.95,-4353.17 2433,-4369 2435.43,-4374.46 2437.71,-4375.21 2443,-4378 2449.88,-4381.62 2457.25,-4384.77 2464.8,-4387.5"/>
<polygon fill="blue" stroke="blue" points="2463.85,-4390.88 2474.44,-4390.74 2466.08,-4384.24 2463.85,-4390.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;pub(super) fn apply_agreement_xor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input: &amp;[u8; MESSAGE_KEY_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;[u8; MESSAGE_KEY_...">
<polygon fill="white" stroke="black" points="2391,-2574 2226,-2574 2226,-2538 2391,-2538 2391,-2574"/>
<text text-anchor="middle" x="2308.5" y="-2552.3" font-family="Helvetica,sans-Serif" font-size="14.00">apply_agreement_xor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2225.97,-2562.04C2208.97,-2567.55 2193.4,-2576.78 2184,-2592 2171.02,-2612.99 2171.02,-4348.01 2184,-4369 2192.05,-4382.03 2204.63,-4390.68 2218.75,-4396.35"/>
<polygon fill="blue" stroke="blue" points="2217.63,-4399.66 2228.23,-4399.66 2219.94,-4393.06 2217.63,-4399.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1888.3,-2412.01C1967.22,-2426.93 2092.17,-2435.95 2166,-2367 2246.76,-2291.58 2118.4,-2193.26 2202,-2121 2276.31,-2056.77 2351.55,-2053.61 2423,-2121 2465.09,-2160.7 2542.15,-4065.17 2552.37,-4322.37"/>
<polygon fill="blue" stroke="blue" points="2548.89,-4322.89 2552.78,-4332.74 2555.88,-4322.61 2548.89,-4322.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn calculate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_key: &amp;[u8; 32], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ctext: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2347.5,-2412 2269.5,-2412 2269.5,-2376 2347.5,-2376 2347.5,-2412"/>
<text text-anchor="middle" x="2308.5" y="-2390.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1945.14,-2394C2048.28,-2394 2187.12,-2394 2259.33,-2394"/>
<polygon fill="blue" stroke="blue" points="2259.49,-2397.5 2269.49,-2394 2259.49,-2390.5 2259.49,-2397.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn calculate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let our_pub_key = our_k...">
<polygon fill="white" stroke="black" points="2347.5,-2466 2269.5,-2466 2269.5,-2430 2347.5,-2430 2347.5,-2466"/>
<text text-anchor="middle" x="2308.5" y="-2444.3" font-family="Helvetica,sans-Serif" font-size="14.00">calculate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1945.14,-2408.19C2048.28,-2419.52 2187.12,-2434.77 2259.33,-2442.71"/>
<polygon fill="blue" stroke="blue" points="2259.16,-2446.21 2269.49,-2443.82 2259.93,-2439.25 2259.16,-2446.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().</title>
<g id="a_node92"><a xlink:title="pub async fn sealed_sender_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;sender_cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;ptext: &amp;[u8], &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity...">
<polygon fill="white" stroke="black" points="1325.5,-2358 1149.5,-2358 1149.5,-2322 1325.5,-2322 1325.5,-2358"/>
<text text-anchor="middle" x="1237.5" y="-2336.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1325.7,-2351.8C1365.4,-2356.92 1413.03,-2362.71 1456,-2367 1527.97,-2374.18 1608.25,-2380.4 1674.53,-2385.05"/>
<polygon fill="blue" stroke="blue" points="1674.4,-2388.55 1684.62,-2385.75 1674.89,-2381.57 1674.4,-2388.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn test_agreement_and_authentication() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The sender and recipient each have a long&#45;term identity key pair. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_identity = IdentityKeyPair::generate(&amp;mut ran...">
<polygon fill="white" stroke="black" points="1947,-2358 1683,-2358 1683,-2322 1947,-2322 1947,-2358"/>
<text text-anchor="middle" x="1815" y="-2336.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement_and_authentication</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1947.11,-2335.65C2021.37,-2326.15 2110.28,-2301.77 2166,-2242 2220.15,-2183.92 2140.45,-2117.17 2202,-2067 2278.13,-2004.94 2351.59,-1999.56 2423,-2067 2466.14,-2107.75 2542.51,-4064.22 2552.43,-4322.88"/>
<polygon fill="blue" stroke="blue" points="2548.93,-4323.1 2552.81,-4332.96 2555.93,-4322.83 2548.93,-4323.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1824.02,-2321.92C1879.17,-2197.63 2200.13,-1474.37 2202,-1472 2219.96,-1449.2 2245.71,-1429.27 2267.28,-1414.88"/>
<polygon fill="blue" stroke="blue" points="2269.45,-1417.64 2275.92,-1409.25 2265.63,-1411.77 2269.45,-1417.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1947.25,-2346.65C2013.09,-2350.86 2093.96,-2357.38 2166,-2367 2197.21,-2371.17 2231.95,-2377.77 2259.2,-2383.4"/>
<polygon fill="blue" stroke="blue" points="2258.75,-2386.88 2269.25,-2385.5 2260.18,-2380.03 2258.75,-2386.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1947.19,-2323.67C2016.64,-2321.27 2100.79,-2328.8 2166,-2367 2190.89,-2381.58 2178.47,-2404.32 2202,-2421 2218.67,-2432.82 2240.07,-2439.47 2259.23,-2443.21"/>
<polygon fill="blue" stroke="blue" points="2258.85,-2446.7 2269.31,-2444.96 2260.05,-2439.8 2258.85,-2446.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node94"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="1328.5,-2412 1146.5,-2412 1146.5,-2376 1328.5,-2376 1328.5,-2412"/>
<text text-anchor="middle" x="1237.5" y="-2390.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.67,-2383.45C1366.89,-2384.15 1408.79,-2392.67 1436,-2421 1468.32,-2454.65 1428.33,-2592.43 1456,-2630 1732.31,-3005.18 2162.32,-2648.79 2423,-3035 2469.78,-3104.31 2390.93,-4474.57 2443,-4540 2456.47,-4556.93 2478.66,-4564.31 2499.63,-4567.22"/>
<polygon fill="blue" stroke="blue" points="2499.46,-4570.72 2509.78,-4568.31 2500.21,-4563.76 2499.46,-4570.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1328.97,-2400.91C1365.66,-2399.15 1406.3,-2390.82 1436,-2367 1455.97,-2350.99 1442.08,-2334.48 1456,-2313 1708.5,-1923.48 1772.24,-1757.46 2202,-1582 2292.94,-1544.87 2327.46,-1559.2 2423,-1582 2540.74,-1610.1 2599.14,-1604.1 2666,-1705 2822.05,-1940.5 2848.08,-4110.94 2850.75,-4384.67"/>
<polygon fill="blue" stroke="blue" points="2847.25,-4384.99 2850.84,-4394.95 2854.25,-4384.92 2847.25,-4384.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().</title>
<g id="a_node95"><a xlink:title="async fn sealed_sender_multi_recipient_encrypt_impl&lt; &#160;&#160;&#160;&#160;R: Rng + CryptoRng, &#160;&#160;&#160;&#160;X: IntoIterator&lt;Item = ServiceId&gt;, &gt;( &#160;&#160;&#160;&#160;destinations: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;destination_sessions: &amp;[&amp;SessionRecord...">
<polygon fill="white" stroke="black" points="1976,-2621 1654,-2621 1654,-2585 1976,-2585 1976,-2621"/>
<text text-anchor="middle" x="1815" y="-2599.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_multi_recipient_encrypt_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1976.26,-2587.68C2055.53,-2580.1 2148.36,-2571.22 2215.54,-2564.79"/>
<polygon fill="blue" stroke="blue" points="2216.06,-2568.26 2225.68,-2563.82 2215.39,-2561.29 2216.06,-2568.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;pub(super) fn compute_authentication_tag( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ephemeral_pub_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encrypte...">
<polygon fill="white" stroke="black" points="2415,-2520 2202,-2520 2202,-2484 2415,-2484 2415,-2520"/>
<text text-anchor="middle" x="2308.5" y="-2498.3" font-family="Helvetica,sans-Serif" font-size="14.00">compute_authentication_tag</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1976.17,-2611.69C2038.29,-2609 2108.23,-2598.16 2166,-2569 2187.35,-2558.22 2181.54,-2541.38 2202,-2529 2204.79,-2527.31 2207.68,-2525.73 2210.65,-2524.24"/>
<polygon fill="blue" stroke="blue" points="2212.13,-2527.42 2219.76,-2520.08 2209.21,-2521.05 2212.13,-2527.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn derive_e(&amp;self) &#45;&gt; KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut r = [0; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.kdf &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expand(LABEL_R, &amp;mut r) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid output length&#39; ); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2346,-2628 2271,-2628 2271,-2592 2346,-2592 2346,-2628"/>
<text text-anchor="middle" x="2308.5" y="-2606.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_e</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1976.26,-2605.28C2075.24,-2606.69 2195.35,-2608.4 2260.3,-2609.33"/>
<polygon fill="blue" stroke="blue" points="2260.57,-2612.83 2270.62,-2609.47 2260.67,-2605.83 2260.57,-2612.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;fn test_agreement_and_authentication() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The sender and recipient each have a long&#45;term identity key pair. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_identity = IdentityKeyPair::generate(&amp;mut ran...">
<polygon fill="white" stroke="black" points="1947,-2560 1683,-2560 1683,-2524 1947,-2524 1947,-2560"/>
<text text-anchor="middle" x="1815" y="-2538.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement_and_authentication</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1901.39,-2560.05C1982.09,-2571.57 2100.31,-2573.08 2166,-2502 2243.72,-2417.9 2149.58,-1573.81 2202,-1472 2214.78,-1447.17 2239.04,-1427.72 2261.07,-1414.11"/>
<polygon fill="blue" stroke="blue" points="2262.87,-1417.11 2269.69,-1409 2259.3,-1411.09 2262.87,-1417.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1947.07,-2545.73C2031.67,-2548.14 2139.65,-2551.22 2215.27,-2553.37"/>
<polygon fill="blue" stroke="blue" points="2215.63,-2556.88 2225.72,-2553.67 2215.83,-2549.89 2215.63,-2556.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1947.07,-2531.33C2023.25,-2525.13 2118.39,-2517.39 2191.79,-2511.42"/>
<polygon fill="blue" stroke="blue" points="2192.31,-2514.89 2202,-2510.59 2191.75,-2507.91 2192.31,-2514.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1947.04,-2550.39C2013.01,-2555.71 2094.05,-2563.92 2166,-2576 2184.09,-2579.04 2227.16,-2589.56 2261.07,-2598.11"/>
<polygon fill="blue" stroke="blue" points="2260.26,-2601.51 2270.81,-2600.57 2261.97,-2594.73 2260.26,-2601.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1935.61,-2481.04C2003.87,-2486.37 2090.6,-2496.36 2166,-2515 2182.67,-2519.12 2185.65,-2523.75 2202,-2529 2208.53,-2531.1 2215.33,-2533.14 2222.19,-2535.11"/>
<polygon fill="blue" stroke="blue" points="2221.69,-2538.6 2232.26,-2537.93 2223.57,-2531.86 2221.69,-2538.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1935.61,-2481.57C2013.38,-2485.84 2114.28,-2491.39 2191.36,-2495.62"/>
<polygon fill="blue" stroke="blue" points="2191.41,-2499.13 2201.59,-2496.18 2191.8,-2492.14 2191.41,-2499.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1935.86,-2462.03C2008.35,-2460.28 2099.32,-2469.49 2166,-2515 2194.25,-2534.28 2175.14,-2561.84 2202,-2583 2218.63,-2596.1 2240.9,-2602.91 2260.69,-2606.42"/>
<polygon fill="blue" stroke="blue" points="2260.35,-2609.91 2270.77,-2607.97 2261.42,-2602.99 2260.35,-2609.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1935.64,-2457.61C2003.34,-2447.51 2089.51,-2434.19 2166,-2421 2197.14,-2415.63 2232.01,-2408.98 2259.35,-2403.63"/>
<polygon fill="blue" stroke="blue" points="2260.29,-2407.01 2269.43,-2401.64 2258.94,-2400.14 2260.29,-2407.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1935.61,-2468.43C2039.55,-2462.72 2184.79,-2454.74 2259.27,-2450.65"/>
<polygon fill="blue" stroke="blue" points="2259.51,-2454.14 2269.3,-2450.1 2259.12,-2447.15 2259.51,-2454.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2414.12,-2520.08C2417.36,-2522.72 2420.35,-2525.68 2423,-2529 2455.06,-2569.13 2411.06,-4337.77 2443,-4378 2448.91,-4385.44 2456.49,-4391.04 2464.92,-4395.22"/>
<polygon fill="blue" stroke="blue" points="2463.79,-4398.54 2474.36,-4399.23 2466.52,-4392.1 2463.79,-4398.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2301.27,-2628.21C2278.33,-2687.11 2207.3,-2878.28 2184,-3044 2178.04,-3086.39 2161.5,-4548.59 2184,-4585 2199.75,-4610.48 2232.8,-4619.2 2260.89,-4621.69"/>
<polygon fill="blue" stroke="blue" points="2260.76,-4625.19 2270.97,-4622.35 2261.22,-4618.21 2260.76,-4625.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2327.23,-2628.06C2354.03,-2656.76 2403.77,-2715.8 2423,-2777 2436.78,-2820.86 2414.39,-4396.01 2443,-4432 2457.97,-4450.84 2483.72,-4457.86 2506.6,-4460.05"/>
<polygon fill="blue" stroke="blue" points="2506.65,-4463.56 2516.86,-4460.74 2507.12,-4456.57 2506.65,-4463.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.55,-2497C1306.56,-2490.58 1389.27,-2484.98 1436,-2529 1469.31,-2560.38 1423.56,-2597.72 1456,-2630 1683.8,-2856.69 1860.63,-2666.85 2166,-2767 2286.14,-2806.4 2354.76,-2782.55 2423,-2889 2470.89,-2963.7 2387.77,-4416.55 2443,-4486 2450.01,-4494.82 2459.38,-4501.04 2469.72,-4505.4"/>
<polygon fill="blue" stroke="blue" points="2468.84,-4508.8 2479.44,-4508.89 2471.21,-4502.22 2468.84,-4508.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node101"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="1325.5,-2466 1149.5,-2466 1149.5,-2430 1325.5,-2430 1325.5,-2466"/>
<text text-anchor="middle" x="1237.5" y="-2444.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1325.59,-2452.09C1420.89,-2456.56 1574.66,-2463.77 1684.19,-2468.91"/>
<polygon fill="blue" stroke="blue" points="1684.17,-2472.41 1694.32,-2469.39 1684.49,-2465.42 1684.17,-2472.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2347.67,-2391.97C2373.25,-2392.89 2405.37,-2398.92 2423,-2421 2456.92,-2463.49 2409.21,-4335.41 2443,-4378 2448.9,-4385.44 2456.49,-4391.04 2464.92,-4395.23"/>
<polygon fill="blue" stroke="blue" points="2463.78,-4398.55 2474.36,-4399.23 2466.52,-4392.1 2463.78,-4398.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.66,-2550.6C1307.2,-2543.51 1391.12,-2536.86 1436,-2583 1493.36,-2641.96 1402.73,-2704.32 1456,-2767 1744.79,-3106.85 2150.58,-2681.89 2423,-3035 2472.24,-3098.83 2392.78,-4422.93 2443,-4486 2450.02,-4494.81 2459.39,-4501.04 2469.73,-4505.39"/>
<polygon fill="blue" stroke="blue" points="2468.85,-4508.8 2479.45,-4508.89 2471.22,-4502.21 2468.85,-4508.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1380.02,-2608.28C1459.73,-2607.31 1559.84,-2606.09 1643.81,-2605.07"/>
<polygon fill="blue" stroke="blue" points="1644.01,-2608.57 1653.97,-2604.95 1643.93,-2601.57 1644.01,-2608.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2347.67,-2445.97C2373.25,-2446.89 2405.37,-2452.92 2423,-2475 2455.99,-2516.31 2410.14,-4336.59 2443,-4378 2448.91,-4385.44 2456.49,-4391.04 2464.92,-4395.22"/>
<polygon fill="blue" stroke="blue" points="2463.79,-4398.54 2474.36,-4399.23 2466.52,-4392.1 2463.79,-4398.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;fn when_exceed_maximum_states_then_oldest_is_ejected() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consts::MAX_SENDER_KEY_STATES, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; Test written to expect this limit&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="2014,-3299 1616,-3299 1616,-3263 2014,-3263 2014,-3299"/>
<text text-anchor="middle" x="1815" y="-3277.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_exceed_maximum_states_then_oldest_is_ejected</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn random_public_key() &#45;&gt; PublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair::generate(&amp;mut OsRng.unwrap_err()).public_key &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2383.5,-3299 2233.5,-3299 2233.5,-3263 2383.5,-3263 2383.5,-3299"/>
<text text-anchor="middle" x="2308.5" y="-3277.3" font-family="Helvetica,sans-Serif" font-size="14.00">random_public_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2014.14,-3281C2087.07,-3281 2165.82,-3281 2223.35,-3281"/>
<polygon fill="blue" stroke="blue" points="2223.47,-3284.5 2233.47,-3281 2223.47,-3277.5 2223.47,-3284.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;fn add_single_state() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = random_public_key(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_key = chain_key(1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rec...">
<polygon fill="white" stroke="black" points="1881,-3245 1749,-3245 1749,-3209 1881,-3209 1881,-3245"/>
<text text-anchor="middle" x="1815" y="-3223.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_single_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1881.06,-3229.84C1951.51,-3233.43 2067.08,-3240.79 2166,-3254 2184.6,-3256.48 2204.44,-3259.83 2223.21,-3263.32"/>
<polygon fill="blue" stroke="blue" points="2222.74,-3266.79 2233.22,-3265.21 2224.04,-3259.91 2222.74,-3266.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key = (random_...">
<polygon fill="white" stroke="black" points="2131,-3191 1499,-3191 1499,-3155 2131,-3155 2131,-3191"/>
<text text-anchor="middle" x="1815" y="-3169.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2131.13,-3190.61C2142.98,-3193.39 2154.64,-3196.51 2166,-3200 2206.28,-3212.39 2247.57,-3237.77 2275.07,-3256.83"/>
<polygon fill="blue" stroke="blue" points="2273.31,-3259.87 2283.49,-3262.78 2277.34,-3254.15 2273.31,-3259.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn add_second_state() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_1 = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_2 = 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key_1 = (random_public_key(), chain_id_1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1885,-3137 1745,-3137 1745,-3101 1885,-3101 1885,-3137"/>
<text text-anchor="middle" x="1815" y="-3115.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_second_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1885.09,-3111.08C1958.19,-3105.66 2075.27,-3105.54 2166,-3146 2219.29,-3169.76 2264.79,-3222.45 2288.96,-3254.53"/>
<polygon fill="blue" stroke="blue" points="2286.44,-3257.02 2295.19,-3262.99 2292.07,-3252.86 2286.44,-3257.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key_1 =...">
<polygon fill="white" stroke="black" points="2153.5,-3407 1476.5,-3407 1476.5,-3371 2153.5,-3371 2153.5,-3407"/>
<text text-anchor="middle" x="1815" y="-3385.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2132.96,-3370.96C2144.18,-3368.29 2155.22,-3365.32 2166,-3362 2206.28,-3349.61 2247.57,-3324.23 2275.07,-3305.17"/>
<polygon fill="blue" stroke="blue" points="2277.34,-3307.85 2283.49,-3299.22 2273.31,-3302.13 2277.34,-3307.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1892.14,-3060.49C1964.46,-3058.6 2075.31,-3061.98 2166,-3092 2294.18,-3134.44 2337.99,-3149.1 2423,-3254 2728.38,-3630.83 2828.21,-4246.23 2847.35,-4384.73"/>
<polygon fill="blue" stroke="blue" points="2843.92,-4385.48 2848.73,-4394.92 2850.86,-4384.54 2843.92,-4385.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2326.71,-3299.08C2352.34,-3327.19 2400.01,-3384.16 2423,-3442 2553.07,-3769.24 2555.84,-4208.47 2554.15,-4322.84"/>
<polygon fill="blue" stroke="blue" points="2550.65,-4322.82 2553.98,-4332.88 2557.65,-4322.94 2550.65,-4322.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_1 = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_2 =...">
<polygon fill="white" stroke="black" points="2166,-3353 1464,-3353 1464,-3317 2166,-3317 2166,-3353"/>
<text text-anchor="middle" x="1815" y="-3331.3" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2088.11,-3317C2114.48,-3314.36 2140.78,-3311.37 2166,-3308 2184.6,-3305.52 2204.44,-3302.17 2223.21,-3298.68"/>
<polygon fill="blue" stroke="blue" points="2224.04,-3302.09 2233.22,-3296.79 2222.74,-3295.21 2224.04,-3302.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1326.97,-282.56C1362.14,-279.3 1402.19,-272.11 1436,-257 1446.65,-252.24 1445.05,-244.02 1456,-240 1604.09,-185.57 2010.78,-211.68 2166,-240 2286.1,-261.91 2351.94,-237.72 2423,-337 2438.43,-358.56 2542.45,-3966.35 2552.69,-4322.74"/>
<polygon fill="blue" stroke="blue" points="2549.19,-4322.87 2552.98,-4332.76 2556.19,-4322.67 2549.19,-4322.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1326.51,-289.5C1551.4,-303.88 2131.88,-343.11 2166,-367 2260.4,-433.11 2293.55,-578.99 2303.62,-640.63"/>
<polygon fill="blue" stroke="blue" points="2300.21,-641.44 2305.2,-650.78 2307.12,-640.36 2300.21,-641.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().</title>
<g id="a_node115"><a xlink:title="pub async fn process_prekey&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;message: &amp;&#39;a PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;&#39;a ProtocolAddress, &#160;&#160;&#160;&#160;session_record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;identity_store: &amp;dyn IdentityKeyStore, &#160;&#160;&#160;&#160;p...">
<polygon fill="white" stroke="black" points="1299,-248 1176,-248 1176,-212 1299,-212 1299,-248"/>
<text text-anchor="middle" x="1237.5" y="-226.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().</title>
<g id="a_node116"><a xlink:title="async fn process_prekey_impl( &#160;&#160;&#160;&#160;message: &amp;PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;signed_prekey_store: &amp;dyn SignedPreKeyStore, &#160;&#160;&#160;&#160;kybe...">
<polygon fill="white" stroke="black" points="1895,-285 1735,-285 1735,-249 1895,-249 1895,-285"/>
<text text-anchor="middle" x="1815" y="-263.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1299,-233.89C1400.65,-240.43 1606.18,-253.64 1724.55,-261.25"/>
<polygon fill="blue" stroke="blue" points="1724.47,-264.75 1734.67,-261.9 1724.92,-257.77 1724.47,-264.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1895.09,-265.85C1976.23,-269.31 2099.68,-288.38 2166,-367 2260.84,-479.43 2105.6,-584.89 2202,-696 2206.27,-700.92 2211.3,-705.01 2216.81,-708.39"/>
<polygon fill="blue" stroke="blue" points="2215.35,-711.58 2225.82,-713.15 2218.62,-705.39 2215.35,-711.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().</title>
<g id="a_node121"><a xlink:title=" &#160;&#160;&#160;pub fn key_pair(&amp;self) &#45;&gt; Result&lt;KeyPair&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(KeyPair::from_public_and_private( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.pre_key.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.pre_key.private_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1852,-4706 1778,-4706 1778,-4670 1852,-4670 1852,-4706"/>
<text text-anchor="middle" x="1815" y="-4684.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1734.93,-260.55C1641.07,-258.11 1492.4,-271.81 1446,-376 1433.93,-403.09 1433.93,-4619.91 1446,-4647 1471.69,-4704.68 1674.15,-4698.09 1767.79,-4691.82"/>
<polygon fill="blue" stroke="blue" points="1768.12,-4695.3 1777.85,-4691.12 1767.63,-4688.32 1768.12,-4695.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().</title>
<g id="a_node117"><a xlink:title="fn decrypt_message_with_state&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;current_or_previous: CurrentOrPrevious, &#160;&#160;&#160;&#160;state: &amp;mut SessionState, &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, &#160;&#160;&#160;&#160;original_message_type: CiphertextMessag...">
<polygon fill="white" stroke="black" points="1923,-165 1707,-165 1707,-129 1923,-129 1923,-165"/>
<text text-anchor="middle" x="1815" y="-143.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_message_with_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().</title>
<g id="a_node119"><a xlink:title="fn get_or_create_chain_key&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;state: &amp;mut SessionState, &#160;&#160;&#160;&#160;their_ephemeral: &amp;PublicKey, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; Result&lt;ChainKey&gt; { &#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2401,-165 2216,-165 2216,-129 2401,-129 2401,-165"/>
<text text-anchor="middle" x="2308.5" y="-143.3" font-family="Helvetica,sans-Serif" font-size="14.00">get_or_create_chain_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1923.25,-147C2007.17,-147 2123.09,-147 2205.61,-147"/>
<polygon fill="blue" stroke="blue" points="2205.75,-150.5 2215.75,-147 2205.75,-143.5 2205.75,-150.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().</title>
<g id="a_node118"><a xlink:title="fn decrypt_message_with_record&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, &#160;&#160;&#160;&#160;original_message_type: CiphertextMessageTy...">
<polygon fill="white" stroke="black" points="1350,-165 1125,-165 1125,-129 1350,-129 1350,-165"/>
<text text-anchor="middle" x="1237.5" y="-143.3" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_message_with_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1350.14,-147C1449.69,-147 1594.93,-147 1696.28,-147"/>
<polygon fill="blue" stroke="blue" points="1696.56,-150.5 1706.56,-147 1696.56,-143.5 1696.56,-150.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2370.23,-165.08C2390.5,-174.27 2410.96,-187.71 2423,-207 2430.25,-218.62 2541.81,-3958.48 2552.65,-4322.58"/>
<polygon fill="blue" stroke="blue" points="2549.16,-4322.69 2552.95,-4332.58 2556.15,-4322.48 2549.16,-4322.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2369.31,-165.02C2389.73,-174.24 2410.54,-187.72 2423,-207 2461.08,-265.9 2418.69,-456.21 2443,-522 2460.91,-570.45 2500.31,-616.37 2526.89,-643.61"/>
<polygon fill="blue" stroke="blue" points="2524.49,-646.16 2534.02,-650.79 2529.46,-641.23 2524.49,-646.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().</title>
<g id="a_node123"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn sender_ratchet_private_key(&amp;self) &#45;&gt; Result&lt;PrivateKey, InvalidSessionError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.session.sender_chain { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(InvalidSessionError(&#39; missing sender ...">
<polygon fill="white" stroke="black" points="2658,-487 2451,-487 2451,-451 2658,-451 2658,-487"/>
<text text-anchor="middle" x="2554.5" y="-465.3" font-family="Helvetica,sans-Serif" font-size="14.00">sender_ratchet_private_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2359.14,-165.12C2380.8,-174.93 2405.25,-188.82 2423,-207 2491.08,-276.74 2530.39,-389.04 2545.84,-440.98"/>
<polygon fill="blue" stroke="blue" points="2542.54,-442.19 2548.69,-450.82 2549.27,-440.24 2542.54,-442.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node120"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="2348,-2275 2269,-2275 2269,-2239 2348,-2239 2348,-2275"/>
<text text-anchor="middle" x="2308.5" y="-2253.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2348.15,-2264.01C2374.13,-2270.94 2406.53,-2284.39 2423,-2310 2455.7,-2360.84 2405.46,-4438.63 2443,-4486 2450,-4494.83 2459.36,-4501.06 2469.69,-4505.42"/>
<polygon fill="blue" stroke="blue" points="2468.81,-4508.83 2479.41,-4508.92 2471.18,-4502.24 2468.81,-4508.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1852.17,-4687.17C1923.83,-4683.44 2083.97,-4664.38 2166,-4570 2222.95,-4504.47 2142.64,-4441.36 2202,-4378 2203.58,-4376.32 2205.24,-4374.74 2206.98,-4373.25"/>
<polygon fill="blue" stroke="blue" points="2209.09,-4376.04 2215.07,-4367.3 2204.94,-4370.4 2209.09,-4376.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1863.26,-4746.5C2033.17,-4762.2 2606.26,-4810.72 2666,-4757 2709.7,-4717.7 2660.8,-4542.5 2694,-4494 2717.83,-4459.18 2761.39,-4438.4 2796.59,-4426.61"/>
<polygon fill="blue" stroke="blue" points="2797.81,-4429.9 2806.27,-4423.52 2795.68,-4423.23 2797.81,-4429.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2572.08,-487.15C2597.71,-516.51 2646.08,-577.37 2666,-639 2788.21,-1017.02 2844.79,-4059.05 2850.51,-4384.77"/>
<polygon fill="blue" stroke="blue" points="2847.01,-4384.88 2850.69,-4394.81 2854.01,-4384.75 2847.01,-4384.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize().</title>
<g id="a_node124"><a xlink:title=" &#160;&#160;&#160;fn deserialize&lt;T: AsRef&lt;[u8]&gt;&gt;(bytes: T) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::deserialize(bytes.as_ref())?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1860.5,-4481 1769.5,-4481 1769.5,-4445 1860.5,-4445 1860.5,-4481"/>
<text text-anchor="middle" x="1815" y="-4459.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1860.65,-4451.41C1933.91,-4435.3 2080.06,-4415.85 2166,-4490 2220.53,-4537.05 2145.7,-4603.08 2202,-4648 2278.78,-4709.25 2325.36,-4658.72 2423,-4648 2532.97,-4635.93 2585.67,-4670.08 2666,-4594 2699.51,-4562.26 2664.84,-4529.78 2694,-4494 2720.19,-4461.86 2762.48,-4441.08 2796.58,-4428.62"/>
<polygon fill="blue" stroke="blue" points="2798.14,-4431.79 2806.42,-4425.18 2795.82,-4425.18 2798.14,-4431.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private().</title>
<g id="a_node125"><a xlink:title=" &#160;&#160;&#160;fn from_public_and_private(public_key: &amp;[u8], private_key: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(KeyPair::from_public_and_private(public_key, private_key)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1908,-4427 1722,-4427 1722,-4391 1908,-4391 1908,-4427"/>
<text text-anchor="middle" x="1815" y="-4405.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1908.16,-4398.12C1992.74,-4388.14 2117.82,-4373.38 2205.4,-4363.05"/>
<polygon fill="blue" stroke="blue" points="2205.84,-4366.52 2215.36,-4361.87 2205.02,-4359.57 2205.84,-4366.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1863.11,-4522.63C1934.4,-4533.08 2071.39,-4560.85 2166,-4628 2187.75,-4643.43 2178.15,-4664.07 2202,-4676 2289.85,-4719.93 2325.14,-4684.4 2423,-4676 2532.2,-4666.63 2587.49,-4710.48 2666,-4634 2711.45,-4589.72 2655.8,-4544.67 2694,-4494 2719.23,-4460.53 2762.26,-4439.71 2796.9,-4427.58"/>
<polygon fill="blue" stroke="blue" points="2798.06,-4430.88 2806.42,-4424.38 2795.83,-4424.24 2798.06,-4430.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node127"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="756,-3032 606,-3032 606,-2996 756,-2996 756,-3032"/>
<text text-anchor="middle" x="681" y="-3010.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.21,-3014C837.9,-3014 971.65,-3014 1077.29,-3014"/>
<polygon fill="blue" stroke="blue" points="1077.43,-3017.5 1087.43,-3014 1077.43,-3010.5 1077.43,-3017.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.22,-3019.3C822.95,-3024.25 923.62,-3032.19 1011,-3041 1063.95,-3046.34 1123.76,-3053.56 1168.47,-3059.18"/>
<polygon fill="blue" stroke="blue" points="1168.27,-3062.69 1178.63,-3060.47 1169.15,-3055.74 1168.27,-3062.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.03,-3009.1C842.37,-3005.19 977.57,-3005.27 1011,-3041 1079.75,-3114.47 972.26,-4776.7 1039,-4852 1057.65,-4873.05 1084.37,-4883.45 1112.15,-4887.85"/>
<polygon fill="blue" stroke="blue" points="1112.04,-4891.37 1122.42,-4889.21 1112.96,-4884.43 1112.04,-4891.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node128"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="778,-2978 584,-2978 584,-2942 778,-2942 778,-2978"/>
<text text-anchor="middle" x="681" y="-2956.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M778.18,-2966.94C843.83,-2971.92 932.74,-2979.11 1011,-2987 1034.17,-2989.34 1058.65,-2992.03 1082.61,-2994.8"/>
<polygon fill="blue" stroke="blue" points="1082.5,-2998.31 1092.84,-2995.99 1083.31,-2991.36 1082.5,-2998.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M778.2,-2944.57C848.44,-2938.5 942.89,-2941.68 1011,-2987 1033.51,-3001.98 1016.91,-3025.42 1039,-3041 1076.28,-3067.29 1127.54,-3073.66 1168.49,-3073.66"/>
<polygon fill="blue" stroke="blue" points="1168.72,-3077.16 1178.67,-3073.53 1168.63,-3070.16 1168.72,-3077.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M778.17,-2954.24C863.86,-2951.44 980.32,-2954.2 1011,-2987 1081.78,-3062.68 970.29,-4774.44 1039,-4852 1057.65,-4873.05 1084.36,-4883.46 1112.14,-4887.86"/>
<polygon fill="blue" stroke="blue" points="1112.04,-4891.37 1122.41,-4889.22 1112.95,-4884.43 1112.04,-4891.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node129"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="912.5,-2762 449.5,-2762 449.5,-2726 912.5,-2726 912.5,-2762"/>
<text text-anchor="middle" x="681" y="-2740.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.7,-2738.11C1363.99,-2729.15 2328.07,-2723.66 2423,-2837 2522.24,-2955.48 2549.14,-4125.49 2552.99,-4322.81"/>
<polygon fill="blue" stroke="blue" points="2549.49,-4323.02 2553.18,-4332.95 2556.49,-4322.88 2549.49,-4323.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.6,-2741.11C946.72,-2746.82 980.59,-2756.22 1011,-2771 1111.6,-2819.88 1189.41,-2934.58 1221.06,-2987"/>
<polygon fill="blue" stroke="blue" points="1218.14,-2988.93 1226.26,-2995.74 1224.16,-2985.36 1218.14,-2988.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.66,-2725.98C830.53,-2712.5 944.65,-2706.06 1011,-2771 1054.11,-2813.19 997.05,-2997.66 1039,-3041 1071.76,-3074.84 1125.5,-3080.33 1168.66,-3078.05"/>
<polygon fill="blue" stroke="blue" points="1169.08,-3081.53 1178.82,-3077.36 1168.61,-3074.55 1169.08,-3081.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.62,-2746.3C946.91,-2740.11 980.83,-2729.95 1011,-2714 1028.31,-2704.85 1021.77,-2689.3 1039,-2680 1117.09,-2637.86 1371.56,-2698.01 1436,-2637 1475.9,-2599.22 1416.17,-2552.85 1456,-2515 1521.98,-2452.31 1628.63,-2447.97 1708.4,-2455.9"/>
<polygon fill="blue" stroke="blue" points="1708.16,-2459.39 1718.48,-2456.98 1708.91,-2452.43 1708.16,-2459.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.29,-2762.04C838.65,-2773.1 946.09,-2775.17 1011,-2714 1071.52,-2656.97 979.78,-2587.38 1039,-2529 1081.32,-2487.28 1155.74,-2489.38 1200.15,-2495.29"/>
<polygon fill="blue" stroke="blue" points="1199.82,-2498.78 1210.22,-2496.76 1200.83,-2491.85 1199.82,-2498.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.94,-2762C843.39,-2771.58 946.21,-2771.47 1011,-2714 1055.54,-2674.49 995.36,-2623.5 1039,-2583 1082.45,-2542.68 1156.16,-2544.23 1200.19,-2549.67"/>
<polygon fill="blue" stroke="blue" points="1199.8,-2553.14 1210.18,-2551.03 1200.75,-2546.21 1199.8,-2553.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.54,-2762.01C868.49,-2765.8 951.78,-2758.59 1011,-2714 1038.43,-2693.35 1012.31,-2663.6 1039,-2642 1052.54,-2631.04 1068.36,-2623.15 1085.04,-2617.54"/>
<polygon fill="blue" stroke="blue" points="1086.42,-2620.78 1094.95,-2614.5 1084.37,-2614.09 1086.42,-2620.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.62,-2744.85C957.46,-2740.1 995.43,-2730.85 1011,-2714 1055.25,-2666.11 1002.59,-421.09 1039,-367 1061.64,-333.37 1100.81,-313.33 1138.33,-301.4"/>
<polygon fill="blue" stroke="blue" points="1139.76,-304.63 1148.33,-298.4 1137.75,-297.92 1139.76,-304.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M751.22,-2725.98C826.81,-2710.94 945.79,-2701.73 1011,-2771 1035.63,-2797.16 1034.07,-4028.42 1039,-4064 1079.61,-4356.83 1192.87,-4698.88 1226.78,-4797.26"/>
<polygon fill="blue" stroke="blue" points="1223.5,-4798.47 1230.08,-4806.78 1230.11,-4796.18 1223.5,-4798.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.98,-2725.95C826.65,-2710.79 945.97,-2701.36 1011,-2771 1089.91,-2855.51 962.4,-4765.4 1039,-4852 1057.63,-4873.07 1084.34,-4883.48 1112.12,-4887.88"/>
<polygon fill="blue" stroke="blue" points="1112.01,-4891.39 1122.39,-4889.24 1112.93,-4884.46 1112.01,-4891.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node130"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="824,-2870 538,-2870 538,-2834 824,-2834 824,-2870"/>
<text text-anchor="middle" x="681" y="-2848.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.29,-2844.98C1199.42,-2829.74 2201.75,-2811.26 2423,-3035 2516.93,-3129.99 2547.93,-4140.03 2552.79,-4322.75"/>
<polygon fill="blue" stroke="blue" points="2549.3,-4322.99 2553.06,-4332.89 2556.29,-4322.81 2549.3,-4322.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.02,-2849.59C883.05,-2852.17 951.52,-2859.9 1011,-2879 1087.21,-2903.47 1164.86,-2957.79 1206.19,-2989.56"/>
<polygon fill="blue" stroke="blue" points="1204.16,-2992.42 1214.2,-2995.79 1208.45,-2986.89 1204.16,-2992.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M760.35,-2833.98C834.52,-2821.93 944.18,-2817.89 1011,-2879 1064.92,-2928.31 986.43,-2990.25 1039,-3041 1072.65,-3073.49 1125.83,-3079.2 1168.53,-3077.35"/>
<polygon fill="blue" stroke="blue" points="1168.8,-3080.84 1178.58,-3076.77 1168.39,-3073.85 1168.8,-3080.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.16,-2844.43C882.29,-2840.27 950.06,-2834.06 1011,-2825 1202.16,-2796.59 1307.9,-2877.72 1436,-2733 1468.24,-2696.57 1421.94,-2549.74 1456,-2515 1522.13,-2447.55 1634.85,-2445.77 1716.16,-2455.64"/>
<polygon fill="blue" stroke="blue" points="1716.05,-2459.16 1726.41,-2456.97 1716.94,-2452.22 1716.05,-2459.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.27,-2857.84C900.72,-2857.68 984.6,-2851.08 1011,-2825 1058.01,-2778.57 993.26,-2576.68 1039,-2529 1080.25,-2486 1155.37,-2488.63 1200.12,-2494.96"/>
<polygon fill="blue" stroke="blue" points="1199.85,-2498.46 1210.27,-2496.53 1200.92,-2491.54 1199.85,-2498.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.55,-2870.05C831.3,-2883.27 944.58,-2889.25 1011,-2825 1088.82,-2749.72 963.23,-2660.35 1039,-2583 1080.7,-2540.43 1155.66,-2542.91 1200.27,-2549.1"/>
<polygon fill="blue" stroke="blue" points="1199.97,-2552.59 1210.38,-2550.64 1201.02,-2545.67 1199.97,-2552.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.03,-2860.87C884.02,-2859.5 953.22,-2850.92 1011,-2825 1105.32,-2782.69 1184.48,-2683.73 1218.56,-2636.29"/>
<polygon fill="blue" stroke="blue" points="1221.47,-2638.23 1224.39,-2628.05 1215.75,-2634.19 1221.47,-2638.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.19,-2858.62C901.16,-2858.79 985.6,-2852.25 1011,-2825 1057.55,-2775.05 1000.89,-423.66 1039,-367 1061.63,-333.36 1100.8,-313.32 1138.32,-301.4"/>
<polygon fill="blue" stroke="blue" points="1139.75,-304.62 1148.32,-298.39 1137.74,-297.92 1139.75,-304.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.07,-2845.49C901,-2845.36 985.44,-2851.9 1011,-2879 1056.19,-2926.9 1029.89,-3998.78 1039,-4064 1079.89,-4356.79 1192.96,-4698.86 1226.8,-4797.26"/>
<polygon fill="blue" stroke="blue" points="1223.52,-4798.47 1230.09,-4806.78 1230.14,-4796.18 1223.52,-4798.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.16,-2845.4C901.12,-2845.25 985.57,-2851.78 1011,-2879 1085.85,-2959.09 966.34,-4769.92 1039,-4852 1057.64,-4873.06 1084.35,-4883.47 1112.13,-4887.87"/>
<polygon fill="blue" stroke="blue" points="1112.02,-4891.39 1122.4,-4889.23 1112.94,-4884.45 1112.02,-4891.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node131"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="741.5,-2924 620.5,-2924 620.5,-2888 741.5,-2888 741.5,-2924"/>
<text text-anchor="middle" x="681" y="-2902.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.52,-2906.21C807.96,-2907.52 918.3,-2912.92 1011,-2933 1073.44,-2946.53 1142.12,-2972.98 1187.08,-2991.97"/>
<polygon fill="blue" stroke="blue" points="1185.73,-2995.2 1196.3,-2995.91 1188.48,-2988.76 1185.73,-2995.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.61,-2892.14C814.05,-2879.08 935.9,-2869.81 1011,-2933 1048.94,-2964.93 1001.93,-3008.06 1039,-3041 1073.77,-3071.9 1126.48,-3077.79 1168.7,-3076.42"/>
<polygon fill="blue" stroke="blue" points="1169.09,-3079.91 1178.91,-3075.95 1168.76,-3072.92 1169.09,-3079.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.75,-2901.8C826.61,-2897.29 975.68,-2895.22 1011,-2933 1083.81,-3010.89 968.31,-4772.18 1039,-4852 1057.65,-4873.06 1084.36,-4883.46 1112.13,-4887.86"/>
<polygon fill="blue" stroke="blue" points="1112.03,-4891.38 1122.4,-4889.22 1112.95,-4884.44 1112.03,-4891.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node132"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="763,-2816 599,-2816 599,-2780 763,-2780 763,-2816"/>
<text text-anchor="middle" x="681" y="-2794.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.36,-2791.22C988.66,-2774.34 1638.88,-2738.47 2166,-2836 2285.15,-2858.05 2348.62,-2831.35 2423,-2927 2511.95,-3041.39 2547.2,-4131.5 2552.71,-4322.51"/>
<polygon fill="blue" stroke="blue" points="2549.22,-4322.7 2553,-4332.6 2556.21,-4322.5 2549.22,-4322.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.26,-2791.27C831.86,-2788.67 931.35,-2792.28 1011,-2825 1099.34,-2861.28 1178.91,-2945.37 1215.41,-2988.09"/>
<polygon fill="blue" stroke="blue" points="1212.8,-2990.42 1221.93,-2995.81 1218.15,-2985.91 1212.8,-2990.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.41,-2779.96C832.03,-2767.01 944.45,-2761.51 1011,-2825 1081.04,-2891.82 970.79,-2972.31 1039,-3041 1072.07,-3074.3 1125.54,-3079.9 1168.5,-3077.8"/>
<polygon fill="blue" stroke="blue" points="1168.86,-3081.28 1178.62,-3077.15 1168.42,-3074.29 1168.86,-3081.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.18,-2794.66C830.01,-2791.12 927.06,-2784.15 1011,-2771 1202.61,-2740.99 1306.04,-2815.96 1436,-2672 1483.13,-2619.79 1405.88,-2564.35 1456,-2515 1522.13,-2449.88 1631.9,-2446.82 1712.48,-2455.75"/>
<polygon fill="blue" stroke="blue" points="1712.31,-2459.25 1722.66,-2456.96 1713.14,-2452.3 1712.31,-2459.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.55,-2816.05C831.3,-2829.27 944.58,-2835.25 1011,-2771 1088.82,-2695.72 963.23,-2606.35 1039,-2529 1080.7,-2486.43 1155.66,-2488.91 1200.27,-2495.1"/>
<polygon fill="blue" stroke="blue" points="1199.97,-2498.59 1210.38,-2496.64 1201.02,-2491.67 1199.97,-2498.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.56,-2816.01C832.98,-2828.58 944.27,-2833.47 1011,-2771 1072.67,-2713.27 978.91,-2642.38 1039,-2583 1081.28,-2541.23 1155.71,-2543.35 1200.13,-2549.27"/>
<polygon fill="blue" stroke="blue" points="1199.8,-2552.76 1210.2,-2550.75 1200.82,-2545.84 1199.8,-2552.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.27,-2810.11C833.7,-2816.45 935.82,-2815.29 1011,-2771 1030.33,-2759.61 1022.78,-2744.5 1039,-2729 1082.82,-2687.14 1143.88,-2653.17 1186.47,-2632.4"/>
<polygon fill="blue" stroke="blue" points="1188.04,-2635.53 1195.53,-2628.04 1185,-2629.22 1188.04,-2635.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.37,-2803.24C849.86,-2806.82 978.57,-2805.8 1011,-2771 1056.54,-2722.15 1001.72,-422.41 1039,-367 1061.63,-333.36 1100.8,-313.32 1138.32,-301.4"/>
<polygon fill="blue" stroke="blue" points="1139.76,-304.62 1148.33,-298.39 1137.74,-297.92 1139.76,-304.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.3,-2792.83C849.73,-2789.31 978.38,-2790.38 1011,-2825 1034.61,-2850.05 1034.26,-4029.9 1039,-4064 1079.74,-4356.81 1192.91,-4698.87 1226.79,-4797.26"/>
<polygon fill="blue" stroke="blue" points="1223.51,-4798.47 1230.09,-4806.78 1230.12,-4796.18 1223.51,-4798.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.36,-2792.78C849.83,-2789.21 978.53,-2790.24 1011,-2825 1087.88,-2907.3 964.37,-4767.66 1039,-4852 1057.64,-4873.06 1084.35,-4883.47 1112.12,-4887.87"/>
<polygon fill="blue" stroke="blue" points="1112.02,-4891.39 1122.39,-4889.23 1112.94,-4884.45 1112.02,-4891.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node133"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="759,-3302 603,-3302 603,-3266 759,-3266 759,-3302"/>
<text text-anchor="middle" x="681" y="-3280.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.41,-3302.04C832.03,-3314.99 944.45,-3320.49 1011,-3257 1081.04,-3190.18 970.79,-3109.69 1039,-3041 1050,-3029.92 1063.26,-3021.91 1077.64,-3016.23"/>
<polygon fill="blue" stroke="blue" points="1078.98,-3019.46 1087.24,-3012.82 1076.64,-3012.87 1078.98,-3019.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.22,-3301.44C833.08,-3313.22 943,-3317.22 1011,-3257 1057.2,-3216.08 996.67,-3165.91 1039,-3121 1072.03,-3085.96 1125.49,-3073.17 1168.47,-3068.89"/>
<polygon fill="blue" stroke="blue" points="1168.93,-3072.37 1178.59,-3068.02 1168.33,-3065.39 1168.93,-3072.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.07,-3278.98C845.49,-3275.23 977.91,-3275.74 1011,-3311 1069.59,-3373.44 982.12,-4788 1039,-4852 1057.68,-4873.02 1084.41,-4883.42 1112.19,-4887.82"/>
<polygon fill="blue" stroke="blue" points="1112.08,-4891.33 1122.46,-4889.17 1113,-4884.39 1112.08,-4891.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node134"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="768.5,-3248 593.5,-3248 593.5,-3212 768.5,-3212 768.5,-3248"/>
<text text-anchor="middle" x="681" y="-3226.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M760.35,-3248.02C834.52,-3260.07 944.18,-3264.11 1011,-3203 1064.92,-3153.69 986.43,-3091.75 1039,-3041 1050.13,-3030.25 1063.4,-3022.44 1077.72,-3016.86"/>
<polygon fill="blue" stroke="blue" points="1078.99,-3020.12 1087.26,-3013.5 1076.67,-3013.52 1078.99,-3020.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.55,-3246.98C840.87,-3256.02 942.84,-3256.09 1011,-3203 1041.38,-3179.33 1010.87,-3147.31 1039,-3121 1073.85,-3088.4 1126.55,-3075.43 1168.75,-3070.45"/>
<polygon fill="blue" stroke="blue" points="1169.38,-3073.9 1178.96,-3069.38 1168.65,-3066.94 1169.38,-3073.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.86,-3224.58C855.17,-3221.31 979.15,-3223.03 1011,-3257 1071.62,-3321.65 980.15,-4785.74 1039,-4852 1057.68,-4873.03 1084.4,-4883.43 1112.18,-4887.82"/>
<polygon fill="blue" stroke="blue" points="1112.07,-4891.34 1122.45,-4889.18 1112.99,-4884.4 1112.07,-4891.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node135"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="771,-3356 591,-3356 591,-3320 771,-3320 771,-3356"/>
<text text-anchor="middle" x="681" y="-3334.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.58,-3356.03C833.01,-3368.62 944.32,-3373.52 1011,-3311 1073.27,-3252.62 982.24,-3184.75 1039,-3121 1071.24,-3084.79 1125.28,-3072.13 1168.69,-3068.2"/>
<polygon fill="blue" stroke="blue" points="1169.2,-3071.67 1178.91,-3067.42 1168.67,-3064.69 1169.2,-3071.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M771.11,-3324.35C847.13,-3318.31 953.05,-3324.28 1011,-3391 1064.23,-3452.29 985.04,-4791.35 1039,-4852 1057.69,-4873.01 1084.42,-4883.41 1112.2,-4887.8"/>
<polygon fill="blue" stroke="blue" points="1112.1,-4891.32 1122.47,-4889.16 1113.01,-4884.38 1112.1,-4891.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node136"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="785.5,-3140 576.5,-3140 576.5,-3104 785.5,-3104 785.5,-3140"/>
<text text-anchor="middle" x="681" y="-3118.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M785.67,-3138.03C855.03,-3143.22 945.28,-3138.74 1011,-3095 1033.51,-3080.02 1016.91,-3056.58 1039,-3041 1050.78,-3032.7 1063.95,-3026.38 1077.75,-3021.62"/>
<polygon fill="blue" stroke="blue" points="1078.91,-3024.92 1087.39,-3018.57 1076.8,-3018.25 1078.91,-3024.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M785.81,-3114.48C850.61,-3109.53 935.73,-3102.59 1011,-3095 1063.95,-3089.66 1123.76,-3082.44 1168.47,-3076.82"/>
<polygon fill="blue" stroke="blue" points="1169.15,-3080.26 1178.63,-3075.53 1168.27,-3073.31 1169.15,-3080.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M785.62,-3116.02C870.46,-3113.64 981.18,-3117.16 1011,-3149 1075.68,-3218.06 976.2,-4781.22 1039,-4852 1057.67,-4873.04 1084.38,-4883.44 1112.16,-4887.84"/>
<polygon fill="blue" stroke="blue" points="1112.06,-4891.36 1122.43,-4889.2 1112.97,-4884.42 1112.06,-4891.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node137"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="769,-3086 593,-3086 593,-3050 769,-3050 769,-3086"/>
<text text-anchor="middle" x="681" y="-3064.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.01,-3061.75C835.38,-3056.76 929.03,-3049.27 1011,-3041 1034.17,-3038.66 1058.65,-3035.97 1082.61,-3033.2"/>
<polygon fill="blue" stroke="blue" points="1083.31,-3036.64 1092.84,-3032.01 1082.5,-3029.69 1083.31,-3036.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.25,-3068C879.97,-3068 1068.59,-3068 1168.97,-3068"/>
<polygon fill="blue" stroke="blue" points="1169,-3071.5 1179,-3068 1169,-3064.5 1169,-3071.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.27,-3062.56C855.57,-3059.3 979.23,-3061.06 1011,-3095 1077.72,-3166.27 974.23,-4778.96 1039,-4852 1057.66,-4873.04 1084.38,-4883.45 1112.15,-4887.85"/>
<polygon fill="blue" stroke="blue" points="1112.05,-4891.36 1122.42,-4889.2 1112.97,-4884.42 1112.05,-4891.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node138"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="791,-3194 571,-3194 571,-3158 791,-3158 791,-3194"/>
<text text-anchor="middle" x="681" y="-3172.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.77,-3194.02C840.86,-3204.09 944.35,-3205.09 1011,-3149 1048.94,-3117.07 1001.93,-3073.94 1039,-3041 1050.24,-3031.01 1063.37,-3023.63 1077.4,-3018.27"/>
<polygon fill="blue" stroke="blue" points="1078.94,-3021.44 1087.25,-3014.87 1076.66,-3014.82 1078.94,-3021.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.23,-3185.52C857.67,-3186.92 942.61,-3180.67 1011,-3149 1026.97,-3141.61 1023.76,-3129.8 1039,-3121 1078.96,-3097.92 1129.26,-3084.61 1169.09,-3077.11"/>
<polygon fill="blue" stroke="blue" points="1169.76,-3080.54 1178.98,-3075.32 1168.52,-3073.65 1169.76,-3080.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.08,-3169.88C875.14,-3167.81 981.8,-3171.85 1011,-3203 1073.65,-3269.86 978.18,-4783.48 1039,-4852 1057.67,-4873.03 1084.39,-4883.43 1112.17,-4887.83"/>
<polygon fill="blue" stroke="blue" points="1112.07,-4891.35 1122.44,-4889.19 1112.98,-4884.41 1112.07,-4891.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().</title>
<g id="a_node139"><a xlink:title="fn test_alice_and_bob_agree_on_chain_keys_with_kyber() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_identity_key_pair = IdentityKeyPair::gen...">
<polygon fill="white" stroke="black" points="1428,-714 1047,-714 1047,-678 1428,-678 1428,-714"/>
<text text-anchor="middle" x="1237.5" y="-692.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alice_and_bob_agree_on_chain_keys_with_kyber</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1291.82,-677.93C1335.39,-664.16 1398.89,-646.36 1456,-639 1562.56,-625.27 2345.7,-564.37 2423,-639 2493.38,-706.95 2547.62,-3983.43 2553.05,-4322.7"/>
<polygon fill="blue" stroke="blue" points="2549.55,-4322.76 2553.21,-4332.7 2556.55,-4322.65 2549.55,-4322.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.76,-714.07C1319.42,-733.25 1390.98,-762.62 1456,-776 1533.38,-791.92 2109.81,-758.47 2166,-814 2253.12,-900.09 2123.77,-1269.75 2202,-1364 2215.8,-1380.63 2238.31,-1387.79 2259,-1390.62"/>
<polygon fill="blue" stroke="blue" points="2258.65,-1394.11 2268.96,-1391.69 2259.39,-1387.15 2258.65,-1394.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1428.14,-704.9C1516.84,-709.06 1619.67,-713.88 1696.86,-717.5"/>
<polygon fill="blue" stroke="blue" points="1696.95,-721.01 1707.1,-717.98 1697.28,-714.02 1696.95,-721.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1428.14,-687.1C1515.74,-682.99 1617.13,-678.24 1693.99,-674.63"/>
<polygon fill="blue" stroke="blue" points="1694.36,-678.12 1704.19,-674.15 1694.03,-671.12 1694.36,-678.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node140"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="904.5,-2679 457.5,-2679 457.5,-2643 904.5,-2643 904.5,-2679"/>
<text text-anchor="middle" x="681" y="-2657.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M754.85,-2679.06C829.88,-2692.86 944.9,-2699.81 1011,-2634 1062.21,-2583.01 990.56,-2363.63 1039,-2310 1380.77,-1931.67 1767.13,-2413.55 2166,-2096 2197.14,-2071.21 2168.68,-2035.76 2202,-2014 2284.24,-1960.29 2351.64,-1946.51 2423,-2014 2434.04,-2024.44 2538.48,-4057.62 2552.05,-4322.64"/>
<polygon fill="blue" stroke="blue" points="2548.57,-4323.14 2552.58,-4332.95 2555.56,-4322.79 2548.57,-4323.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.4,-2679.01C841.38,-2688.91 944.37,-2689.67 1011,-2634 1048.06,-2603.03 1002.79,-2560.96 1039,-2529 1083.35,-2489.87 1156.51,-2490.95 1200.24,-2495.99"/>
<polygon fill="blue" stroke="blue" points="1200.06,-2499.5 1210.43,-2497.3 1200.96,-2492.56 1200.06,-2499.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.66,-2672.4C942.31,-2666.25 979.38,-2654.5 1011,-2634 1032.7,-2619.93 1017.69,-2597.65 1039,-2583 1087.11,-2549.92 1157.58,-2548.72 1200.05,-2551.74"/>
<polygon fill="blue" stroke="blue" points="1199.96,-2555.24 1210.21,-2552.58 1200.53,-2548.27 1199.96,-2555.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.61,-2643.46C940.2,-2640.45 976.62,-2637.24 1011,-2634 1034.86,-2631.75 1060.12,-2629.22 1084.76,-2626.66"/>
<polygon fill="blue" stroke="blue" points="1085.33,-2630.12 1094.91,-2625.6 1084.6,-2623.15 1085.33,-2630.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M751,-2679.06C826.68,-2694.24 946.01,-2703.67 1011,-2634 1053.96,-2587.95 1003.82,-419.24 1039,-367 1061.65,-333.37 1100.82,-313.33 1138.33,-301.41"/>
<polygon fill="blue" stroke="blue" points="1139.77,-304.63 1148.34,-298.4 1137.75,-297.93 1139.77,-304.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.77,-2654.97C945.41,-2664.5 983.57,-2682.46 1011,-2714 1035.62,-2742.3 1033.87,-4026.85 1039,-4064 1079.47,-4356.84 1192.83,-4698.88 1226.77,-4797.26"/>
<polygon fill="blue" stroke="blue" points="1223.49,-4798.48 1230.07,-4806.78 1230.11,-4796.18 1223.49,-4798.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.54,-2654.71C945.32,-2664.23 983.59,-2682.25 1011,-2714 1088.62,-2803.92 960.32,-4763.01 1039,-4852 1057.63,-4873.07 1084.34,-4883.48 1112.11,-4887.88"/>
<polygon fill="blue" stroke="blue" points="1112.01,-4891.4 1122.38,-4889.24 1112.93,-4884.46 1112.01,-4891.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node141"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="927.5,-2463 434.5,-2463 434.5,-2427 927.5,-2427 927.5,-2463"/>
<text text-anchor="middle" x="681" y="-2441.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.89,-2445.56C965.66,-2440.78 996.83,-2432.29 1011,-2418 1070.77,-2357.71 981.02,-2099.01 1039,-2037 1144.61,-1924.05 2310.8,-1784.59 2423,-1891 2425.91,-1893.76 2537.88,-4049.87 2552.03,-4322.73"/>
<polygon fill="blue" stroke="blue" points="2548.55,-4323.18 2552.57,-4332.98 2555.54,-4322.81 2548.55,-4323.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.58,-2446.15C965.67,-2441.35 997.04,-2432.71 1011,-2418 1047.31,-2379.74 1022.96,-1519.25 1039,-1469 1140.53,-1150.88 1161.55,-1001.51 1456,-844 1525.56,-806.79 2108.32,-790.18 2166,-844 2250.69,-923.03 2127.85,-1275.01 2202,-1364 2215.83,-1380.6 2238.34,-1387.76 2259.03,-1390.6"/>
<polygon fill="blue" stroke="blue" points="2258.67,-1394.08 2268.99,-1391.67 2259.42,-1387.12 2258.67,-1394.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M918.9,-2463C949.9,-2465.78 981.23,-2468.8 1011,-2472 1077.89,-2479.19 1155.61,-2490.09 1200.12,-2496.59"/>
<polygon fill="blue" stroke="blue" points="1199.77,-2500.07 1210.17,-2498.06 1200.78,-2493.15 1199.77,-2500.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.6,-2436.85C957.36,-2443.83 986.02,-2454.98 1011,-2472 1034.33,-2487.89 1016.11,-2512.49 1039,-2529 1086.48,-2563.25 1157.45,-2564.03 1200.13,-2560.61"/>
<polygon fill="blue" stroke="blue" points="1200.71,-2564.07 1210.34,-2559.67 1200.06,-2557.1 1200.71,-2564.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.15,-2426.97C840.33,-2416.74 944.31,-2415.51 1011,-2472 1049.82,-2504.89 1001.08,-2549.08 1039,-2583 1052.21,-2594.81 1068.03,-2602.98 1084.9,-2608.49"/>
<polygon fill="blue" stroke="blue" points="1084.36,-2611.98 1094.94,-2611.43 1086.32,-2605.26 1084.36,-2611.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.76,-2446.32C965.84,-2441.51 997.16,-2432.82 1011,-2418 1049.89,-2376.36 1007.14,-414.24 1039,-367 1061.67,-333.39 1100.84,-313.35 1138.35,-301.42"/>
<polygon fill="blue" stroke="blue" points="1139.79,-304.64 1148.36,-298.41 1137.77,-297.94 1139.79,-304.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.72,-2443.72C965.8,-2448.53 997.13,-2457.21 1011,-2472 1041.25,-2504.26 1033.01,-4020.18 1039,-4064 1079.01,-4356.91 1192.69,-4698.9 1226.74,-4797.27"/>
<polygon fill="blue" stroke="blue" points="1223.46,-4798.49 1230.05,-4806.78 1230.07,-4796.19 1223.46,-4798.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.79,-2443.66C965.86,-2448.48 997.18,-2457.17 1011,-2472 1056.08,-2520.36 995.24,-4802.44 1039,-4852 1057.62,-4873.08 1084.32,-4883.5 1112.09,-4887.9"/>
<polygon fill="blue" stroke="blue" points="1111.99,-4891.42 1122.36,-4889.26 1112.91,-4884.48 1111.99,-4891.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node142"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="920.5,-2625 441.5,-2625 441.5,-2589 920.5,-2589 920.5,-2625"/>
<text text-anchor="middle" x="681" y="-2603.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.64,-2608.53C961.68,-2603.93 995.98,-2595.27 1011,-2580 1077.84,-2512.05 973.94,-2221.66 1039,-2152 1124.87,-2060.07 2062.93,-2116.12 2166,-2044 2197.95,-2021.65 2169.26,-1985.17 2202,-1964 2243.24,-1937.33 2387.34,-1930.23 2423,-1964 2434.28,-1974.68 2538.72,-4055.54 2552.09,-4322.85"/>
<polygon fill="blue" stroke="blue" points="2548.6,-4323.09 2552.6,-4332.91 2555.59,-4322.74 2548.6,-4323.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.93,-2615.37C952.91,-2608.67 983.95,-2597.54 1011,-2580 1032.7,-2565.93 1017.69,-2543.65 1039,-2529 1087.11,-2495.92 1157.58,-2494.72 1200.05,-2497.74"/>
<polygon fill="blue" stroke="blue" points="1199.96,-2501.24 1210.21,-2498.58 1200.53,-2494.27 1199.96,-2501.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M910.38,-2588.98C944.13,-2586.1 978.48,-2583.06 1011,-2580 1077.95,-2573.69 1155.95,-2565.12 1200.45,-2560.11"/>
<polygon fill="blue" stroke="blue" points="1200.93,-2563.58 1210.48,-2558.98 1200.15,-2556.62 1200.93,-2563.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.78,-2608.29C976.46,-2608.59 1034.26,-2608.91 1084.95,-2609.18"/>
<polygon fill="blue" stroke="blue" points="1084.97,-2612.68 1094.99,-2609.23 1085.01,-2605.68 1084.97,-2612.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.84,-2609.16C962.03,-2604.54 996.34,-2595.71 1011,-2580 1052.94,-2535.05 1004.65,-417.99 1039,-367 1061.65,-333.37 1100.82,-313.34 1138.34,-301.41"/>
<polygon fill="blue" stroke="blue" points="1139.77,-304.63 1148.34,-298.4 1137.76,-297.93 1139.77,-304.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.76,-2604.92C961.95,-2609.53 996.28,-2618.34 1011,-2634 1038.2,-2662.95 1033.58,-4024.64 1039,-4064 1079.3,-4356.87 1192.78,-4698.89 1226.76,-4797.26"/>
<polygon fill="blue" stroke="blue" points="1223.48,-4798.48 1230.07,-4806.78 1230.09,-4796.18 1223.48,-4798.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.84,-2604.84C962.03,-2609.46 996.34,-2618.29 1011,-2634 1053.03,-2679.05 998.2,-4805.83 1039,-4852 1057.62,-4873.07 1084.33,-4883.49 1112.1,-4887.89"/>
<polygon fill="blue" stroke="blue" points="1112,-4891.41 1122.37,-4889.25 1112.92,-4884.47 1112,-4891.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node143"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="745,-2247 617,-2247 617,-2211 745,-2211 745,-2247"/>
<text text-anchor="middle" x="681" y="-2225.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M745.03,-2233.11C830.1,-2237.17 975.16,-2238.29 1011,-2202 1073.93,-2138.29 973.96,-1861.56 1039,-1800 1094.85,-1747.14 2367.45,-1729.83 2423,-1783 2441.28,-1800.49 2441.78,-2212.73 2443,-2238 2484.05,-3091.08 2541.68,-4137.5 2551.92,-4322.42"/>
<polygon fill="blue" stroke="blue" points="2548.44,-4322.87 2552.48,-4332.66 2555.42,-4322.49 2548.44,-4322.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M745.25,-2213.18C819.31,-2198.81 940.77,-2188.88 1011,-2256 1081.94,-2323.8 969.92,-2405.31 1039,-2475 1080.95,-2517.32 1155.83,-2514.92 1200.35,-2508.82"/>
<polygon fill="blue" stroke="blue" points="1201.07,-2512.25 1210.44,-2507.3 1200.03,-2505.33 1201.07,-2512.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node144"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="826,-2355 536,-2355 536,-2319 826,-2319 826,-2355"/>
<text text-anchor="middle" x="681" y="-2333.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.32,-2343.11C902.38,-2342.95 985.18,-2336.25 1011,-2310 1077.69,-2242.21 974.66,-1953.02 1039,-1883 1159.9,-1751.43 2042.31,-1819.28 2166,-1820 2280.23,-1820.67 2340.77,-1743.71 2423,-1823 2439.62,-1839.02 2441.84,-2214.95 2443,-2238 2485.86,-3090.99 2542.01,-4137.48 2551.96,-4322.42"/>
<polygon fill="blue" stroke="blue" points="2548.48,-4322.87 2552.51,-4332.66 2555.47,-4322.49 2548.48,-4322.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M762.19,-2355.05C836.11,-2366.6 944.18,-2369.83 1011,-2310 1059.57,-2266.51 988.69,-2207.47 1039,-2166 1175.15,-2053.77 1305.2,-2047.57 1436,-2166 1469.27,-2196.13 1423.88,-2335.64 1456,-2367 1528.6,-2437.88 1653.63,-2429.54 1735.05,-2414.06"/>
<polygon fill="blue" stroke="blue" points="1736.12,-2417.42 1745.25,-2412.04 1734.76,-2410.55 1736.12,-2417.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.25,-2352.46C887.14,-2352.35 956.41,-2342.94 1011,-2310 1030.85,-2298.02 1018.68,-2277.15 1039,-2266 1193.67,-2181.09 1303.49,-2149.49 1436,-2266 1488.16,-2311.87 1407.41,-2371.36 1456,-2421 1513.96,-2480.22 1607.17,-2492.76 1683.94,-2491.01"/>
<polygon fill="blue" stroke="blue" points="1684.29,-2494.5 1694.18,-2490.68 1684.08,-2487.5 1684.29,-2494.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.15,-2318.97C840.33,-2308.74 944.31,-2307.51 1011,-2364 1049.82,-2396.89 1001.08,-2441.08 1039,-2475 1083.18,-2514.52 1156.64,-2513.24 1200.43,-2508.07"/>
<polygon fill="blue" stroke="blue" points="1200.9,-2511.54 1210.36,-2506.77 1199.99,-2504.6 1200.9,-2511.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M760.04,-2318.99C834.24,-2306.86 944.17,-2302.69 1011,-2364 1065.81,-2414.28 985.56,-2477.26 1039,-2529 1081.7,-2570.34 1155.99,-2568.37 1200.27,-2562.59"/>
<polygon fill="blue" stroke="blue" points="1200.91,-2566.03 1210.31,-2561.14 1199.91,-2559.1 1200.91,-2566.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.38,-2343.6C902.74,-2343.62 985.81,-2336.95 1011,-2310 1084.72,-2231.13 978.61,-456.48 1039,-367 1061.68,-333.39 1100.86,-313.36 1138.37,-301.43"/>
<polygon fill="blue" stroke="blue" points="1139.8,-304.65 1148.37,-298.42 1137.79,-297.95 1139.8,-304.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.36,-2330.42C902.71,-2330.4 985.78,-2337.07 1011,-2364 1043.29,-2398.47 1032.63,-4017.2 1039,-4064 1078.85,-4356.93 1192.64,-4698.91 1226.73,-4797.27"/>
<polygon fill="blue" stroke="blue" points="1223.45,-4798.49 1230.04,-4806.78 1230.06,-4796.19 1223.45,-4798.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.41,-2330.37C902.78,-2330.34 985.85,-2337.01 1011,-2364 1058.12,-2414.57 993.27,-4800.18 1039,-4852 1057.61,-4873.09 1084.31,-4883.51 1112.08,-4887.91"/>
<polygon fill="blue" stroke="blue" points="1111.98,-4891.42 1122.35,-4889.26 1112.9,-4884.48 1111.98,-4891.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node145"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="775.5,-2193 586.5,-2193 586.5,-2157 775.5,-2157 775.5,-2193"/>
<text text-anchor="middle" x="681" y="-2171.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.28,-2193.03C833.58,-2205.82 946.54,-2210.72 1011,-2145 1071.85,-2082.97 976.04,-1814.88 1039,-1755 1094.71,-1702.01 2368.15,-1698.12 2423,-1752 2442.28,-1770.94 2441.74,-2211.01 2443,-2238 2482.86,-3091.14 2541.46,-4137.51 2551.89,-4322.42"/>
<polygon fill="blue" stroke="blue" points="2548.41,-4322.88 2552.46,-4332.67 2555.39,-4322.48 2548.41,-4322.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.68,-2156.96C830.55,-2143.47 944.69,-2137.02 1011,-2202 1054.56,-2244.68 996.61,-2431.16 1039,-2475 1080.42,-2517.84 1155.48,-2515.26 1200.18,-2508.99"/>
<polygon fill="blue" stroke="blue" points="1200.96,-2512.41 1210.31,-2507.43 1199.9,-2505.49 1200.96,-2512.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node146"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="810,-2571 552,-2571 552,-2535 810,-2535 810,-2571"/>
<text text-anchor="middle" x="681" y="-2549.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.03,-2559.06C890.19,-2559.83 983.34,-2554.16 1011,-2526 1078.89,-2456.9 972.17,-2161.12 1039,-2091 1082.42,-2045.45 2109.94,-2006.58 2166,-1978 2187.6,-1966.99 2179.91,-1947 2202,-1937 2291.48,-1896.49 2351.7,-1869.45 2423,-1937 2428.71,-1942.41 2538.12,-4053.67 2552.05,-4322.88"/>
<polygon fill="blue" stroke="blue" points="2548.56,-4323.19 2552.57,-4333 2555.55,-4322.83 2548.56,-4323.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.18,-2543.2C871.06,-2538.37 944.81,-2532.24 1011,-2526 1077.95,-2519.69 1155.95,-2511.12 1200.45,-2506.11"/>
<polygon fill="blue" stroke="blue" points="1200.93,-2509.58 1210.48,-2504.98 1200.15,-2502.62 1200.93,-2509.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.24,-2569.83C875.18,-2571.92 952.46,-2563.96 1011,-2526 1032.7,-2511.93 1017.69,-2489.65 1039,-2475 1067.94,-2455.1 1104.97,-2446.74 1139.13,-2443.89"/>
<polygon fill="blue" stroke="blue" points="1139.42,-2447.38 1149.15,-2443.2 1138.94,-2440.39 1139.42,-2447.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.26,-2553.69C936.89,-2554.38 1122.53,-2555.38 1200.21,-2555.8"/>
<polygon fill="blue" stroke="blue" points="1200.42,-2559.3 1210.44,-2555.86 1200.46,-2552.3 1200.42,-2559.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.26,-2562.02C871.15,-2566.69 944.9,-2572.9 1011,-2580 1039.63,-2583.08 1070.24,-2586.83 1099.38,-2590.64"/>
<polygon fill="blue" stroke="blue" points="1099.25,-2594.15 1109.62,-2591.98 1100.16,-2587.21 1099.25,-2594.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.06,-2559.5C890.52,-2560.5 984.02,-2554.91 1011,-2526 1051.92,-2482.15 1005.48,-416.74 1039,-367 1061.66,-333.38 1100.83,-313.34 1138.34,-301.41"/>
<polygon fill="blue" stroke="blue" points="1139.78,-304.64 1148.35,-298.41 1137.76,-297.93 1139.78,-304.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.01,-2546.55C890.44,-2545.58 983.93,-2551.17 1011,-2580 1039.22,-2610.06 1033.39,-4023.15 1039,-4064 1079.2,-4356.88 1192.74,-4698.89 1226.76,-4797.26"/>
<polygon fill="blue" stroke="blue" points="1223.47,-4798.48 1230.06,-4806.78 1230.09,-4796.19 1223.47,-4798.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.07,-2546.49C890.53,-2545.5 984.03,-2551.08 1011,-2580 1054.05,-2626.15 997.21,-4804.7 1039,-4852 1057.62,-4873.08 1084.32,-4883.49 1112.1,-4887.89"/>
<polygon fill="blue" stroke="blue" points="1112,-4891.41 1122.37,-4889.25 1112.91,-4884.47 1112,-4891.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node147"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="755.5,-2409 606.5,-2409 606.5,-2373 755.5,-2373 755.5,-2409"/>
<text text-anchor="middle" x="681" y="-2387.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.75,-2395.63C841.81,-2399.27 976.73,-2398.92 1011,-2364 1080.09,-2293.6 970.39,-1991.87 1039,-1921 1100.65,-1857.33 1361.25,-1930.62 1436,-1883 1450.79,-1873.58 1440.78,-1857.7 1456,-1849 1502.63,-1822.33 2384.05,-1812 2423,-1849 2438.69,-1863.9 2441.88,-2216.39 2443,-2238 2487.23,-3090.92 2542.26,-4137.47 2552,-4322.42"/>
<polygon fill="blue" stroke="blue" points="2548.51,-4322.86 2552.53,-4332.66 2555.5,-4322.49 2548.51,-4322.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.55,-2385.48C822.25,-2380.34 923.27,-2372.27 1011,-2364 1053.1,-2360.03 1099.56,-2355.17 1139.32,-2350.86"/>
<polygon fill="blue" stroke="blue" points="1139.71,-2354.34 1149.27,-2349.78 1138.95,-2347.38 1139.71,-2354.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.81,-2377.55C827.36,-2368.7 935.81,-2366.78 1011,-2418 1034.33,-2433.89 1016.11,-2458.49 1039,-2475 1086.48,-2509.25 1157.45,-2510.03 1200.13,-2506.61"/>
<polygon fill="blue" stroke="blue" points="1200.71,-2510.07 1210.34,-2505.67 1200.06,-2503.1 1200.71,-2510.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.6,-2395.97C822.34,-2400.74 923.39,-2408.58 1011,-2418 1053.17,-2422.53 1099.65,-2428.54 1139.4,-2433.99"/>
<polygon fill="blue" stroke="blue" points="1138.96,-2437.47 1149.35,-2435.36 1139.92,-2430.53 1138.96,-2437.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.55,-2374.7C828.97,-2363.04 940.7,-2358.45 1011,-2418 1049.82,-2450.89 1001.08,-2495.08 1039,-2529 1083.18,-2568.52 1156.64,-2567.24 1200.43,-2562.07"/>
<polygon fill="blue" stroke="blue" points="1200.9,-2565.54 1210.36,-2560.77 1199.99,-2558.6 1200.9,-2565.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.66,-2395.89C841.99,-2399.82 977.55,-2399.8 1011,-2364 1086.75,-2282.93 976.95,-458.98 1039,-367 1061.67,-333.39 1100.85,-313.35 1138.36,-301.43"/>
<polygon fill="blue" stroke="blue" points="1139.79,-304.65 1148.36,-298.42 1137.78,-297.95 1139.79,-304.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.64,-2386.13C841.96,-2382.21 977.49,-2382.25 1011,-2418 1042.27,-2451.37 1032.82,-4018.69 1039,-4064 1078.93,-4356.92 1192.66,-4698.9 1226.74,-4797.27"/>
<polygon fill="blue" stroke="blue" points="1223.45,-4798.49 1230.05,-4806.78 1230.07,-4796.19 1223.45,-4798.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.68,-2386.1C842.02,-2382.15 977.59,-2382.15 1011,-2418 1057.1,-2467.46 994.25,-4801.31 1039,-4852 1057.61,-4873.08 1084.31,-4883.5 1112.09,-4887.9"/>
<polygon fill="blue" stroke="blue" points="1111.98,-4891.42 1122.36,-4889.26 1112.9,-4884.48 1111.98,-4891.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node148"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="746.5,-2301 615.5,-2301 615.5,-2265 746.5,-2265 746.5,-2301"/>
<text text-anchor="middle" x="681" y="-2279.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M746.75,-2287.45C832.32,-2291.75 976.32,-2293.01 1011,-2256 1074.67,-2188.04 974.11,-646.79 1039,-580 1062.92,-555.39 2377.44,-516.98 2423,-561 2458.93,-595.72 2544.14,-3975.56 2552.79,-4322.36"/>
<polygon fill="blue" stroke="blue" points="2549.29,-4322.66 2553.04,-4332.57 2556.29,-4322.49 2549.29,-4322.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M746.75,-2267.31C820.53,-2253.63 940.05,-2244.92 1011,-2310 1065.81,-2360.28 985.56,-2423.26 1039,-2475 1081.7,-2516.34 1155.99,-2514.37 1200.27,-2508.59"/>
<polygon fill="blue" stroke="blue" points="1200.91,-2512.03 1210.31,-2507.14 1199.91,-2505.1 1200.91,-2512.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M746.56,-2266.92C820.74,-2252.69 941.19,-2243.28 1011,-2310 1081.94,-2377.8 969.92,-2459.31 1039,-2529 1080.95,-2571.32 1155.83,-2568.92 1200.35,-2562.82"/>
<polygon fill="blue" stroke="blue" points="1201.07,-2566.25 1210.44,-2561.3 1200.03,-2559.33 1201.07,-2566.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node149"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="808,-2517 554,-2517 554,-2481 808,-2481 808,-2517"/>
<text text-anchor="middle" x="681" y="-2495.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.29,-2505.46C889.13,-2506.54 983.79,-2501.08 1011,-2472 1079.56,-2398.73 973.33,-741.87 1039,-666 1161.85,-524.08 1268.88,-613.94 1456,-599 1563.1,-590.45 2345.72,-524.36 2423,-599 2458.58,-633.37 2544.1,-3979.32 2552.79,-4322.64"/>
<polygon fill="blue" stroke="blue" points="2549.29,-4322.85 2553.04,-4332.76 2556.29,-4322.67 2549.29,-4322.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M762.77,-2480.99C836.57,-2469.63 944.11,-2466.68 1011,-2526 1057.5,-2567.24 1017.28,-2604.77 1039,-2663 1087.25,-2792.34 1178.55,-2930.96 1217.8,-2987.61"/>
<polygon fill="blue" stroke="blue" points="1215.05,-2989.78 1223.64,-2995.98 1220.79,-2985.77 1215.05,-2989.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.38,-2492.87C888.96,-2491.96 983.28,-2497.5 1011,-2526 1090.92,-2608.15 961.33,-2956.72 1039,-3041 1071.03,-3075.75 1125.08,-3081.11 1168.55,-3078.55"/>
<polygon fill="blue" stroke="blue" points="1169.07,-3082.02 1178.78,-3077.79 1168.55,-3075.04 1169.07,-3082.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.68,-2517.01C832.23,-2529.85 944.36,-2535.19 1011,-2472 1078.05,-2408.43 969.4,-2326.78 1039,-2266 1171.9,-2149.94 1299.65,-2154.01 1436,-2266 1471.36,-2295.05 1421.76,-2336.64 1456,-2367 1529.8,-2432.42 1649.14,-2427.29 1729.53,-2413.82"/>
<polygon fill="blue" stroke="blue" points="1730.38,-2417.22 1739.62,-2412.05 1729.17,-2410.33 1730.38,-2417.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M760.66,-2517.03C834.79,-2529 944.19,-2532.91 1011,-2472 1064.03,-2423.66 984.04,-2359.13 1039,-2313 1106.58,-2256.28 1368.18,-2256.58 1436,-2313 1473.53,-2344.22 1420.91,-2387.06 1456,-2421 1515.35,-2478.4 1608.04,-2491.11 1684.24,-2489.88"/>
<polygon fill="blue" stroke="blue" points="1684.49,-2493.38 1694.4,-2489.64 1684.32,-2486.38 1684.49,-2493.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.17,-2499.68C934.84,-2500.37 1122.08,-2501.38 1200.2,-2501.8"/>
<polygon fill="blue" stroke="blue" points="1200.47,-2505.31 1210.48,-2501.86 1200.5,-2498.31 1200.47,-2505.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.3,-2507.87C869.56,-2512.55 944.19,-2518.82 1011,-2526 1077.89,-2533.19 1155.61,-2544.09 1200.12,-2550.59"/>
<polygon fill="blue" stroke="blue" points="1199.77,-2554.07 1210.17,-2552.06 1200.78,-2547.15 1199.77,-2554.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.31,-2505.48C889.16,-2506.57 983.82,-2501.11 1011,-2472 1050.91,-2429.26 1006.31,-415.49 1039,-367 1061.66,-333.38 1100.83,-313.34 1138.35,-301.42"/>
<polygon fill="blue" stroke="blue" points="1139.78,-304.64 1148.35,-298.41 1137.77,-297.94 1139.78,-304.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.27,-2492.56C889.09,-2491.49 983.75,-2496.95 1011,-2526 1040.24,-2557.16 1033.2,-4021.67 1039,-4064 1079.1,-4356.9 1192.71,-4698.9 1226.75,-4797.27"/>
<polygon fill="blue" stroke="blue" points="1223.47,-4798.48 1230.06,-4806.78 1230.08,-4796.19 1223.47,-4798.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.33,-2492.51C889.18,-2491.41 983.84,-2496.87 1011,-2526 1055.07,-2573.26 996.22,-4803.57 1039,-4852 1057.62,-4873.08 1084.32,-4883.5 1112.1,-4887.9"/>
<polygon fill="blue" stroke="blue" points="1111.99,-4891.41 1122.37,-4889.25 1112.91,-4884.47 1111.99,-4891.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node150"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="902,-6330 460,-6330 460,-6294 902,-6294 902,-6330"/>
<text text-anchor="middle" x="681" y="-6308.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="1264.5,-5965 1210.5,-5965 1210.5,-5929 1264.5,-5929 1264.5,-5965"/>
<text text-anchor="middle" x="1237.5" y="-5943.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.38,-6330.03C842.23,-6339.71 944.5,-6340.15 1011,-6285 1047.19,-6254.99 1017.19,-6224.65 1039,-6183 1084.5,-6096.11 1166.3,-6012.48 1208.95,-5972.12"/>
<polygon fill="blue" stroke="blue" points="1211.54,-5974.49 1216.43,-5965.09 1206.75,-5969.38 1211.54,-5974.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node178"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="1889.5,-5113 1740.5,-5113 1740.5,-5077 1889.5,-5077 1889.5,-5113"/>
<text text-anchor="middle" x="1815" y="-5091.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M902.07,-6315.25C951.11,-6311.27 993.73,-6302.48 1011,-6285 1073.33,-6221.94 984,-5956.54 1039,-5887 1153.67,-5742.01 1319.95,-5906.88 1436,-5763 1467.24,-5724.27 1437.39,-5586.14 1456,-5540 1531.55,-5352.74 1713.45,-5181.8 1784.69,-5119.72"/>
<polygon fill="blue" stroke="blue" points="1787.15,-5122.22 1792.42,-5113.03 1782.57,-5116.93 1787.15,-5122.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<g id="a_node183"><a xlink:title=" &#160;&#160;&#160;pub fn add_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO: this requirement can be removed if store returns ids in the insertion order &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i...">
<polygon fill="white" stroke="black" points="1866.5,-5059 1763.5,-5059 1763.5,-5023 1866.5,-5023 1866.5,-5059"/>
<text text-anchor="middle" x="1815" y="-5037.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M902.26,-6315.44C951.31,-6311.46 993.87,-6302.62 1011,-6285 1091.97,-6201.7 958.59,-5846.84 1039,-5763 1100.34,-5699.04 1375.4,-5789.67 1436,-5725 1485.94,-5671.71 1405.53,-5120.79 1456,-5068 1495.45,-5026.74 1661.76,-5030.7 1753.17,-5036.3"/>
<polygon fill="blue" stroke="blue" points="1753.19,-5039.8 1763.39,-5036.95 1753.64,-5032.82 1753.19,-5039.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="1893,-5005 1737,-5005 1737,-4969 1893,-4969 1893,-5005"/>
<text text-anchor="middle" x="1815" y="-4983.3" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M902.31,-6315.48C951.35,-6311.51 993.9,-6302.65 1011,-6285 1054.34,-6240.25 1004.75,-5777.04 1039,-5725 1147.07,-5560.79 1328.85,-5694.81 1436,-5530 1467.27,-5481.9 1416.18,-5055.31 1456,-5014 1527.53,-4939.8 1656.02,-4950.19 1738.04,-4966.85"/>
<polygon fill="blue" stroke="blue" points="1737.54,-4970.32 1748.05,-4968.96 1738.99,-4963.47 1737.54,-4970.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node151"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="900.5,-5898 461.5,-5898 461.5,-5862 900.5,-5862 900.5,-5898"/>
<text text-anchor="middle" x="681" y="-5876.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.69,-5884.15C950.64,-5880.27 994.06,-5871.29 1011,-5853 1062.77,-5797.09 996.67,-430.36 1039,-367 1061.57,-333.22 1100.84,-313.15 1138.45,-301.25"/>
<polygon fill="blue" stroke="blue" points="1139.9,-304.47 1148.48,-298.25 1137.89,-297.76 1139.9,-304.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.56,-5883.59C950.33,-5879.68 993.69,-5870.84 1011,-5853 1052.54,-5810.21 1001.87,-5363.67 1039,-5317 1061.17,-5289.13 1538.21,-5165.19 1732.63,-5115.6"/>
<polygon fill="blue" stroke="blue" points="1733.68,-5118.95 1742.51,-5113.08 1731.95,-5112.16 1733.68,-5118.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<g id="a_node180"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Valid registration IDs fit in 14 bits. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let regis...">
<polygon fill="white" stroke="black" points="1264.5,-5113 1210.5,-5113 1210.5,-5077 1264.5,-5077 1264.5,-5113"/>
<text text-anchor="middle" x="1237.5" y="-5091.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.72,-5883.74C950.49,-5879.84 993.81,-5870.95 1011,-5853 1066.83,-5794.69 985.51,-5187.46 1039,-5127 1078.83,-5081.99 1155.04,-5083.2 1200.25,-5088.72"/>
<polygon fill="blue" stroke="blue" points="1199.85,-5092.2 1210.23,-5090.07 1200.78,-5085.26 1199.85,-5092.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.68,-5883.7C950.44,-5879.8 993.77,-5870.92 1011,-5853 1061.72,-5800.25 988.78,-5248.22 1039,-5195 1099.86,-5130.51 1369.49,-5213.64 1436,-5155 1465.76,-5128.76 1425.91,-5093.86 1456,-5068 1499.18,-5030.88 1663.08,-5032.99 1753.39,-5037.24"/>
<polygon fill="blue" stroke="blue" points="1753.33,-5040.75 1763.49,-5037.74 1753.68,-5033.75 1753.33,-5040.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.7,-5883.73C950.47,-5879.82 993.79,-5870.94 1011,-5853 1064.73,-5796.98 985.3,-5211.05 1039,-5155 1100.24,-5091.08 1370.35,-5181.39 1436,-5122 1472.2,-5089.25 1419.67,-5046.61 1456,-5014 1529.73,-4947.82 1649.92,-4953.42 1730.45,-4967.17"/>
<polygon fill="blue" stroke="blue" points="1730.1,-4970.66 1740.56,-4968.97 1731.33,-4963.77 1730.1,-4970.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node152"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="750.5,-6222 611.5,-6222 611.5,-6186 750.5,-6186 750.5,-6222"/>
<text text-anchor="middle" x="681" y="-6200.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.75,-6211.86C819.88,-6216.75 927.85,-6216 1011,-6177 1108.47,-6131.28 1186.87,-6024.25 1219.76,-5973.98"/>
<polygon fill="blue" stroke="blue" points="1222.89,-5975.58 1225.36,-5965.28 1217,-5971.79 1222.89,-5975.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.57,-6208.45C836.34,-6212.37 976.19,-6212.8 1011,-6177 1051.19,-6135.68 1003.61,-5704.5 1039,-5659 1152.49,-5513.09 1281.57,-5636.6 1436,-5535 1611.89,-5419.29 1752.59,-5199.13 1798.27,-5122.28"/>
<polygon fill="blue" stroke="blue" points="1801.55,-5123.62 1803.61,-5113.23 1795.52,-5120.07 1801.55,-5123.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.63,-6208.5C836.46,-6212.49 976.38,-6212.98 1011,-6177 1060.51,-6125.55 989.84,-5586.78 1039,-5535 1100.02,-5470.73 1374.88,-5561.18 1436,-5497 1468.91,-5462.44 1422.75,-5102.22 1456,-5068 1495.79,-5027.06 1661.95,-5030.88 1753.25,-5036.37"/>
<polygon fill="blue" stroke="blue" points="1753.26,-5039.88 1763.46,-5037.01 1753.7,-5032.89 1753.26,-5039.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.64,-6208.52C836.49,-6212.51 976.42,-6213.02 1011,-6177 1063.37,-6122.45 996.73,-5559.7 1039,-5497 1147.29,-5336.36 1325.73,-5476.29 1436,-5317 1474.41,-5261.52 1408.51,-5061.94 1456,-5014 1528.11,-4941.21 1655.24,-4950.77 1736.99,-4966.93"/>
<polygon fill="blue" stroke="blue" points="1736.47,-4970.4 1746.97,-4968.99 1737.88,-4963.55 1736.47,-4970.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node153"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="816.5,-5520 545.5,-5520 545.5,-5484 816.5,-5484 816.5,-5520"/>
<text text-anchor="middle" x="681" y="-5498.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.8,-5484.81C880.39,-5483.41 954.52,-5492.08 1011,-5529 1154.7,-5622.94 1213.82,-5840.57 1230.88,-5918.56"/>
<polygon fill="blue" stroke="blue" points="1227.51,-5919.55 1233.01,-5928.61 1234.36,-5918.1 1227.51,-5919.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node177"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1317,-5059 1158,-5059 1158,-5023 1317,-5023 1317,-5059"/>
<text text-anchor="middle" x="1237.5" y="-5037.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.57,-5508.07C895.15,-5508.45 984.03,-5502.33 1011,-5475 1074.68,-5410.47 977.08,-5134.22 1039,-5068 1066.23,-5038.88 1108.95,-5030.5 1147.7,-5030.09"/>
<polygon fill="blue" stroke="blue" points="1147.96,-5033.59 1157.98,-5030.16 1148.01,-5026.59 1147.96,-5033.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.9,-5507.96C895.33,-5508.27 983.92,-5502.12 1011,-5475 1065.82,-5420.1 986.39,-5184.02 1039,-5127 1079.67,-5082.92 1155.32,-5083.75 1200.26,-5088.95"/>
<polygon fill="blue" stroke="blue" points="1200.08,-5092.46 1210.45,-5090.27 1200.98,-5085.52 1200.08,-5092.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<g id="a_node182"><a xlink:title=" &#160;&#160;&#160;pub fn with_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1290.5,-5005 1184.5,-5005 1184.5,-4969 1290.5,-4969 1290.5,-5005"/>
<text text-anchor="middle" x="1237.5" y="-4983.3" font-family="Helvetica,sans-Serif" font-size="14.00">with_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.64,-5508.14C895.26,-5508.55 984.14,-5502.44 1011,-5475 1082.8,-5401.66 969.21,-5089.25 1039,-5014 1072.51,-4977.87 1129.86,-4973.58 1174.15,-4976.89"/>
<polygon fill="blue" stroke="blue" points="1173.97,-4980.39 1184.24,-4977.79 1174.59,-4973.41 1173.97,-4980.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node154"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="896.5,-5250 465.5,-5250 465.5,-5214 896.5,-5214 896.5,-5250"/>
<text text-anchor="middle" x="681" y="-5228.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M896.79,-5236.43C948.37,-5232.72 993.62,-5223.76 1011,-5205 1056.67,-5155.71 1001.65,-422.86 1039,-367 1061.58,-333.23 1100.85,-313.16 1138.46,-301.26"/>
<polygon fill="blue" stroke="blue" points="1139.91,-304.48 1148.49,-298.26 1137.91,-297.77 1139.91,-304.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M762.77,-5250.01C836.57,-5261.37 944.11,-5264.32 1011,-5205 1057.5,-5163.76 993.63,-5110.48 1039,-5068 1067.64,-5041.18 1109.65,-5032.82 1147.56,-5031.83"/>
<polygon fill="blue" stroke="blue" points="1147.65,-5035.33 1157.62,-5031.73 1147.58,-5028.33 1147.65,-5035.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M779.7,-5250.01C850.92,-5257.44 945.96,-5254.86 1011,-5205 1040.23,-5182.59 1010.67,-5150.54 1039,-5127 1084.53,-5089.16 1156.99,-5087.52 1200.33,-5090.65"/>
<polygon fill="blue" stroke="blue" points="1200.16,-5094.15 1210.42,-5091.51 1200.75,-5087.18 1200.16,-5094.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.59,-5250.04C833.03,-5262.63 944.34,-5267.55 1011,-5205 1073.57,-5146.29 978.04,-5074.37 1039,-5014 1073.72,-4979.62 1130.21,-4974.95 1173.9,-4977.67"/>
<polygon fill="blue" stroke="blue" points="1173.91,-4981.18 1184.14,-4978.46 1174.44,-4974.21 1173.91,-4981.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node155"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="811.5,-5196 550.5,-5196 550.5,-5160 811.5,-5160 811.5,-5196"/>
<text text-anchor="middle" x="681" y="-5174.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M694.73,-5159.88C746.95,-5084.26 945.12,-4784.79 1011,-4504 1024.12,-4448.06 1007.04,-414.75 1039,-367 1061.55,-333.31 1100.71,-313.26 1138.24,-301.34"/>
<polygon fill="blue" stroke="blue" points="1139.68,-304.57 1148.25,-298.34 1137.67,-297.86 1139.68,-304.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M731.56,-5159.91C799.88,-5135.62 927.23,-5092.69 1039,-5068 1074.22,-5060.22 1113.49,-5054.3 1147.68,-5050.02"/>
<polygon fill="blue" stroke="blue" points="1148.15,-5053.49 1157.65,-5048.8 1147.3,-5046.54 1148.15,-5053.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M802.32,-5159.99C929.13,-5141.01 1121.25,-5112.25 1200.44,-5100.4"/>
<polygon fill="blue" stroke="blue" points="1201.03,-5103.85 1210.41,-5098.91 1200,-5096.92 1201.03,-5103.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M713.26,-5159.78C773.88,-5125.32 912.61,-5050.79 1039,-5014 1083.32,-5001.1 1135.08,-4994.31 1174.48,-4990.77"/>
<polygon fill="blue" stroke="blue" points="1174.82,-4994.25 1184.48,-4989.92 1174.22,-4987.28 1174.82,-4994.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node156"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="790,-5844 572,-5844 572,-5808 790,-5808 790,-5844"/>
<text text-anchor="middle" x="681" y="-5822.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.03,-5826.4C854.9,-5828.72 938.6,-5835.41 1011,-5853 1081.27,-5870.08 1157.96,-5906.1 1201.35,-5928.26"/>
<polygon fill="blue" stroke="blue" points="1199.86,-5931.43 1210.35,-5932.9 1203.06,-5925.21 1199.86,-5931.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.06,-5831.94C874.15,-5833.96 981.38,-5829.95 1011,-5799 1067.21,-5740.29 984.4,-5128.21 1039,-5068 1065.78,-5038.47 1108.46,-5030.05 1147.3,-5029.72"/>
<polygon fill="blue" stroke="blue" points="1147.57,-5033.22 1157.6,-5029.81 1147.64,-5026.22 1147.57,-5033.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.04,-5831.91C874.11,-5833.91 981.32,-5829.9 1011,-5799 1062.77,-5745.1 989.39,-5182.89 1039,-5127 1078.9,-5082.05 1155.08,-5083.24 1200.28,-5088.74"/>
<polygon fill="blue" stroke="blue" points="1199.86,-5092.22 1210.24,-5090.08 1200.8,-5085.28 1199.86,-5092.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.08,-5831.96C874.18,-5833.99 981.42,-5829.98 1011,-5799 1071.27,-5735.88 980.45,-5078.73 1039,-5014 1072.17,-4977.33 1129.83,-4973.18 1174.31,-4976.68"/>
<polygon fill="blue" stroke="blue" points="1174.17,-4980.18 1184.45,-4977.62 1174.82,-4973.21 1174.17,-4980.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node157"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="862,-5466 500,-5466 500,-5430 862,-5430 862,-5466"/>
<text text-anchor="middle" x="681" y="-5444.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M862.31,-5454.17C927.27,-5452.17 989.82,-5443.86 1011,-5421 1058.71,-5369.51 999.99,-425.36 1039,-367 1061.58,-333.22 1100.85,-313.16 1138.46,-301.26"/>
<polygon fill="blue" stroke="blue" points="1139.91,-304.47 1148.48,-298.26 1137.9,-297.77 1139.91,-304.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M862.38,-5453.35C926.89,-5451.18 989.1,-5442.96 1011,-5421 1066.57,-5365.28 984.96,-5125.2 1039,-5068 1066.27,-5039.14 1108.78,-5030.72 1147.38,-5030.23"/>
<polygon fill="blue" stroke="blue" points="1147.6,-5033.73 1157.62,-5030.27 1147.63,-5026.73 1147.6,-5033.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M862.21,-5453.18C926.69,-5450.98 988.92,-5442.79 1011,-5421 1057.71,-5374.9 994.14,-5174.91 1039,-5127 1079.88,-5083.34 1155.12,-5083.94 1200.01,-5089.01"/>
<polygon fill="blue" stroke="blue" points="1199.82,-5092.51 1210.18,-5090.29 1200.7,-5085.57 1199.82,-5092.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M862.05,-5453.48C926.74,-5451.35 989.16,-5443.13 1011,-5421 1074.68,-5356.47 977.08,-5080.22 1039,-5014 1072.66,-4978 1129.99,-4973.7 1174.23,-4976.97"/>
<polygon fill="blue" stroke="blue" points="1174.05,-4980.46 1184.32,-4977.86 1174.66,-4973.49 1174.05,-4980.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node158"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="782.5,-5790 579.5,-5790 579.5,-5754 782.5,-5754 782.5,-5790"/>
<text text-anchor="middle" x="681" y="-5768.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.52,-5767.52C849.05,-5767.61 937.3,-5773.64 1011,-5799 1090.13,-5826.22 1168.66,-5887.55 1208.87,-5922.11"/>
<polygon fill="blue" stroke="blue" points="1206.78,-5924.93 1216.63,-5928.85 1211.38,-5919.65 1206.78,-5924.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.51,-5777.72C867.59,-5780.14 980.44,-5776.83 1011,-5745 1063.15,-5690.7 988.34,-5123.69 1039,-5068 1065.83,-5038.51 1108.51,-5030.09 1147.34,-5029.76"/>
<polygon fill="blue" stroke="blue" points="1147.61,-5033.26 1157.64,-5029.85 1147.67,-5026.26 1147.61,-5033.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.9,-5777.7C867.9,-5780.08 980.42,-5776.72 1011,-5745 1058.71,-5695.51 993.28,-5178.33 1039,-5127 1078.98,-5082.12 1155.13,-5083.29 1200.3,-5088.76"/>
<polygon fill="blue" stroke="blue" points="1199.89,-5092.24 1210.26,-5090.1 1200.82,-5085.3 1199.89,-5092.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.53,-5777.74C867.62,-5780.17 980.48,-5776.88 1011,-5745 1067.21,-5686.29 984.4,-5074.21 1039,-5014 1072.22,-4977.37 1129.87,-4973.22 1174.34,-4976.7"/>
<polygon fill="blue" stroke="blue" points="1174.19,-4980.2 1184.48,-4977.64 1174.84,-4973.23 1174.19,-4980.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().</title>
<g id="a_node159"><a xlink:title="fn test_basic_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let (alice_session, bob_session) = initialize_sessions_v4()?; &#160;&#160;&#160;&#160;run_session_interaction(alice_session, bob_session)?; &#160;&#160;&#160;&#160;Ok(()) }">
<polygon fill="white" stroke="black" points="753,-6438 609,-6438 609,-6402 753,-6402 753,-6438"/>
<text text-anchor="middle" x="681" y="-6416.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().</title>
<g id="a_node173"><a xlink:title="fn run_session_interaction(alice_session: SessionRecord, bob_session: SessionRecord) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::seq::SliceRandom; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAd...">
<polygon fill="white" stroke="black" points="1327.5,-6228 1147.5,-6228 1147.5,-6192 1327.5,-6192 1327.5,-6228"/>
<text text-anchor="middle" x="1237.5" y="-6206.3" font-family="Helvetica,sans-Serif" font-size="14.00">run_session_interaction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.11,-6426.01C821.68,-6429.11 927.1,-6426.69 1011,-6393 1098.03,-6358.06 1177.64,-6277.28 1214.67,-6235.72"/>
<polygon fill="blue" stroke="blue" points="1217.31,-6238.02 1221.29,-6228.2 1212.05,-6233.39 1217.31,-6238.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.37,-6424.75C839.54,-6428.76 977.15,-6429.02 1011,-6393 1065.52,-6334.97 986.06,-5019.48 1039,-4960 1065.08,-4930.69 1106.8,-4922.05 1145.18,-4921.51"/>
<polygon fill="blue" stroke="blue" points="1145.37,-4925.01 1155.38,-4921.55 1145.39,-4918.01 1145.37,-4925.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node160"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="878.5,-6006 483.5,-6006 483.5,-5970 878.5,-5970 878.5,-6006"/>
<text text-anchor="middle" x="681" y="-5984.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.81,-5993.52C937.62,-5990.66 991.63,-5981.92 1011,-5961 1063.79,-5903.99 995.84,-431.6 1039,-367 1061.57,-333.22 1100.84,-313.15 1138.45,-301.25"/>
<polygon fill="blue" stroke="blue" points="1139.9,-304.47 1148.48,-298.25 1137.89,-297.76 1139.9,-304.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.54,-5992.81C937.1,-5989.87 991.04,-5981.26 1011,-5961 1076.03,-5895 981.64,-5617.76 1039,-5545 1153.45,-5399.84 1274.42,-5510.79 1436,-5421 1589.33,-5335.8 1736.5,-5181.53 1791.4,-5120.67"/>
<polygon fill="blue" stroke="blue" points="1794.16,-5122.84 1798.23,-5113.06 1788.95,-5118.17 1794.16,-5122.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.91,-5993.18C937.51,-5990.26 991.37,-5981.58 1011,-5961 1073.38,-5895.59 982.76,-5218.76 1039,-5148 1077.32,-5099.78 1154.4,-5092.58 1200.12,-5092.94"/>
<polygon fill="blue" stroke="blue" points="1200.12,-5096.44 1210.19,-5093.15 1200.27,-5089.44 1200.12,-5096.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.71,-5992.98C937.29,-5990.05 991.19,-5981.41 1011,-5961 1094.68,-5874.77 955.91,-5507.8 1039,-5421 1100.29,-5356.98 1374.34,-5446.66 1436,-5383 1484.8,-5332.62 1406.7,-5117.89 1456,-5068 1496.08,-5027.45 1661.71,-5031.07 1752.97,-5036.43"/>
<polygon fill="blue" stroke="blue" points="1752.99,-5039.94 1763.18,-5037.06 1753.42,-5032.95 1752.99,-5039.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.75,-5993.02C937.34,-5990.09 991.23,-5981.44 1011,-5961 1055.7,-5914.78 1001.69,-5435.36 1039,-5383 1149.3,-5228.21 1322.13,-5376.18 1436,-5224 1464.09,-5186.47 1422.53,-5046.82 1456,-5014 1528.56,-4942.86 1653.89,-4951.38 1735.35,-4966.95"/>
<polygon fill="blue" stroke="blue" points="1735.06,-4970.46 1745.55,-4968.98 1736.43,-4963.59 1735.06,-4970.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node161"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="827,-5736 535,-5736 535,-5700 827,-5700 827,-5736"/>
<text text-anchor="middle" x="681" y="-5714.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.32,-5710.11C886.39,-5711.88 954.01,-5720.49 1011,-5745 1102.17,-5784.21 1181.53,-5875.48 1216.9,-5920.68"/>
<polygon fill="blue" stroke="blue" points="1214.3,-5923.04 1223.19,-5928.81 1219.85,-5918.76 1214.3,-5923.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.41,-5724.31C903.3,-5724.16 985.55,-5717.41 1011,-5691 1059.08,-5641.11 992.28,-5119.17 1039,-5068 1065.88,-5038.56 1108.57,-5030.14 1147.39,-5029.8"/>
<polygon fill="blue" stroke="blue" points="1147.66,-5033.3 1157.69,-5029.89 1147.72,-5026.3 1147.66,-5033.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.36,-5724.26C903.24,-5724.1 985.49,-5717.35 1011,-5691 1054.64,-5645.92 997.16,-5173.76 1039,-5127 1079.07,-5082.21 1155.2,-5083.35 1200.33,-5088.79"/>
<polygon fill="blue" stroke="blue" points="1199.91,-5092.26 1210.29,-5090.12 1200.84,-5085.33 1199.91,-5092.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827,-5724.34C903.02,-5724.23 985.55,-5717.51 1011,-5691 1063.15,-5636.7 988.34,-5069.69 1039,-5014 1072.16,-4977.54 1129.55,-4973.29 1173.94,-4976.7"/>
<polygon fill="blue" stroke="blue" points="1173.78,-4980.2 1184.06,-4977.62 1174.42,-4973.23 1173.78,-4980.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node162"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="804.5,-6492 557.5,-6492 557.5,-6456 804.5,-6456 804.5,-6492"/>
<text text-anchor="middle" x="681" y="-6470.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.98,-6492.05C830.82,-6505.47 944.68,-6511.76 1011,-6447 1053.21,-6405.78 1015.96,-6237.31 1039,-6183 1077.19,-6092.99 1161.71,-6011.06 1206.8,-5971.66"/>
<polygon fill="blue" stroke="blue" points="1209.2,-5974.22 1214.48,-5965.03 1204.63,-5968.92 1209.2,-5974.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node163"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="791,-6384 571,-6384 571,-6348 791,-6348 791,-6384"/>
<text text-anchor="middle" x="681" y="-6362.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M760.97,-6384.04C835.06,-6395.93 944.19,-6399.7 1011,-6339 1063.14,-6291.63 1009.17,-6246.82 1039,-6183 1080.51,-6094.19 1163.97,-6011.45 1207.93,-5971.7"/>
<polygon fill="blue" stroke="blue" points="1210.28,-5974.29 1215.4,-5965.02 1205.61,-5969.08 1210.28,-5974.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.1,-6371.74C874.86,-6373.56 981.09,-6369.37 1011,-6339 1076.48,-6272.52 974.39,-5987.33 1039,-5920 1161.89,-5791.95 1313.59,-6005.51 1436,-5877 1461.87,-5849.84 1442.49,-5574.99 1456,-5540 1528.54,-5352.06 1711.43,-5182.15 1783.82,-5120.02"/>
<polygon fill="blue" stroke="blue" points="1786.34,-5122.47 1791.69,-5113.32 1781.8,-5117.14 1786.34,-5122.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.15,-6371.79C874.94,-6373.64 981.18,-6369.46 1011,-6339 1082.95,-6265.5 967.55,-5950.99 1039,-5877 1100.56,-5813.25 1375.55,-5903.81 1436,-5839 1494.45,-5776.34 1396.92,-5130.07 1456,-5068 1495.36,-5026.65 1661.71,-5030.65 1753.15,-5036.27"/>
<polygon fill="blue" stroke="blue" points="1753.17,-5039.78 1763.37,-5036.93 1753.62,-5032.8 1753.17,-5039.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.19,-6371.83C875,-6373.7 981.25,-6369.53 1011,-6339 1049.83,-6299.15 1008.41,-5885.48 1039,-5839 1147.39,-5674.3 1329.6,-5807 1436,-5641 1473.61,-5582.32 1407.79,-5064.34 1456,-5014 1527.38,-4939.45 1656.21,-4950.05 1738.3,-4966.83"/>
<polygon fill="blue" stroke="blue" points="1737.81,-4970.31 1748.32,-4968.96 1739.26,-4963.46 1737.81,-4970.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node164"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="825,-5952 537,-5952 537,-5916 825,-5916 825,-5952"/>
<text text-anchor="middle" x="681" y="-5930.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.14,-5940.68C901.89,-5940.82 985.79,-5934.23 1011,-5907 1063.28,-5850.54 996.25,-430.98 1039,-367 1061.57,-333.22 1100.84,-313.15 1138.45,-301.25"/>
<polygon fill="blue" stroke="blue" points="1139.9,-304.47 1148.48,-298.25 1137.89,-297.76 1139.9,-304.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.05,-5940.18C901.5,-5940.11 985.12,-5933.49 1011,-5907 1085.05,-5831.21 973.75,-5514.49 1039,-5431 1152.83,-5285.36 1266.24,-5380.16 1436,-5307 1567.33,-5250.4 1712,-5160.99 1777.82,-5118.68"/>
<polygon fill="blue" stroke="blue" points="1780.07,-5121.4 1786.58,-5113.04 1776.28,-5115.52 1780.07,-5121.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.27,-5940.39C901.79,-5940.39 985.41,-5933.77 1011,-5907 1069.32,-5846 986.41,-5214 1039,-5148 1077.38,-5099.83 1154.44,-5092.61 1200.13,-5092.96"/>
<polygon fill="blue" stroke="blue" points="1200.14,-5096.46 1210.21,-5093.16 1200.28,-5089.46 1200.14,-5096.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.17,-5940.29C901.66,-5940.27 985.28,-5933.65 1011,-5907 1057.35,-5858.98 992.97,-5355.33 1039,-5307 1100.12,-5242.82 1373.21,-5331.55 1436,-5269 1467.8,-5237.32 1423.88,-5099.36 1456,-5068 1496.79,-5028.17 1662.12,-5031.48 1753.15,-5036.61"/>
<polygon fill="blue" stroke="blue" points="1753.14,-5040.12 1763.33,-5037.21 1753.55,-5033.13 1753.14,-5040.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.2,-5940.32C901.7,-5940.3 985.31,-5933.68 1011,-5907 1060.21,-5855.88 995.27,-5324.88 1039,-5269 1152.37,-5124.14 1315.53,-5291.01 1436,-5152 1476.59,-5105.17 1410.7,-5056.29 1456,-5014 1529.29,-4945.57 1651.84,-4952.48 1732.8,-4967.07"/>
<polygon fill="blue" stroke="blue" points="1732.47,-4970.57 1742.95,-4968.98 1733.77,-4963.69 1732.47,-4970.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node165"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="774.5,-6060 587.5,-6060 587.5,-6024 774.5,-6024 774.5,-6060"/>
<text text-anchor="middle" x="681" y="-6038.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M774.52,-6039.62C840.84,-6036.64 932.03,-6029.97 1011,-6015 1079.39,-6002.03 1156.54,-5976.24 1200.56,-5960.42"/>
<polygon fill="blue" stroke="blue" points="1202.02,-5963.61 1210.22,-5956.91 1199.63,-5957.03 1202.02,-5963.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M774.83,-6047.58C860.73,-6050.49 979.74,-6048.04 1011,-6015 1091.59,-5929.82 960.74,-5047.32 1039,-4960 1065.19,-4930.78 1106.91,-4922.15 1145.28,-4921.6"/>
<polygon fill="blue" stroke="blue" points="1145.46,-4925.1 1155.47,-4921.63 1145.48,-4918.1 1145.46,-4925.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node166"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="851.5,-5682 510.5,-5682 510.5,-5646 851.5,-5646 851.5,-5682"/>
<text text-anchor="middle" x="681" y="-5660.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.82,-5653.67C905.1,-5656.66 962.6,-5666.7 1011,-5691 1114.61,-5743.02 1191.62,-5865.16 1222.12,-5919.78"/>
<polygon fill="blue" stroke="blue" points="1219.23,-5921.78 1227.11,-5928.85 1225.36,-5918.4 1219.23,-5921.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.51,-5669.98C919.96,-5668.46 988.18,-5660.58 1011,-5637 1055.02,-5591.51 996.22,-5114.66 1039,-5068 1065.94,-5038.61 1108.63,-5030.21 1147.44,-5029.85"/>
<polygon fill="blue" stroke="blue" points="1147.71,-5033.35 1157.74,-5029.94 1147.77,-5026.35 1147.71,-5033.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.9,-5669.91C920.18,-5668.36 988.17,-5660.46 1011,-5637 1090.17,-5555.66 963.1,-5211.39 1039,-5127 1079.19,-5082.32 1155.27,-5083.42 1200.37,-5088.82"/>
<polygon fill="blue" stroke="blue" points="1199.94,-5092.3 1210.31,-5090.15 1200.86,-5085.36 1199.94,-5092.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.56,-5670.03C920.02,-5668.52 988.23,-5660.63 1011,-5637 1059.08,-5587.11 992.28,-5065.17 1039,-5014 1072.23,-4977.6 1129.6,-4973.35 1173.98,-4976.73"/>
<polygon fill="blue" stroke="blue" points="1173.82,-4980.23 1184.09,-4977.65 1174.45,-4973.26 1173.82,-4980.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.58,-5946.32C1303.51,-5944.46 1378.37,-5937.53 1436,-5912 1943.18,-5687.29 2172.25,-5642.83 2423,-5148 2442.34,-5109.83 2416.14,-4411.31 2443,-4378 2457.67,-4359.8 2482.4,-4352.66 2504.75,-4350.24"/>
<polygon fill="blue" stroke="blue" points="2505.12,-4353.72 2514.81,-4349.44 2504.56,-4346.75 2505.12,-4353.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1210.39,-5952.53C1161.28,-5960.77 1059.48,-5969.15 1025,-5906 1006.6,-5872.29 1006.6,-409.71 1025,-376 1047.7,-334.42 1094.53,-311.63 1138.46,-299.13"/>
<polygon fill="blue" stroke="blue" points="1139.62,-302.45 1148.37,-296.47 1137.8,-295.69 1139.62,-302.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.7,-5951.86C1307.68,-5958.15 1392.72,-5963.2 1436,-5915 1463.88,-5883.95 1441.09,-5578.97 1456,-5540 1527.98,-5351.85 1711.2,-5182.06 1783.75,-5119.99"/>
<polygon fill="blue" stroke="blue" points="1786.27,-5122.44 1791.63,-5113.3 1781.74,-5117.11 1786.27,-5122.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1237.5,-5928.68C1237.5,-5660.34 1237.5,-5392 1237.5,-5123.66"/>
<polygon fill="blue" stroke="blue" points="1241,-5123.3 1237.5,-5113.3 1234,-5123.3 1241,-5123.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.75,-5946.51C1308.62,-5944.1 1395.96,-5932.22 1436,-5877 1462.39,-5840.61 1425.02,-5100.58 1456,-5068 1495.34,-5026.62 1661.69,-5030.64 1753.14,-5036.27"/>
<polygon fill="blue" stroke="blue" points="1753.17,-5039.78 1763.37,-5036.92 1753.61,-5032.79 1753.17,-5039.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.81,-5941.47C1309.18,-5930.57 1397.77,-5901.74 1436,-5839 1459.86,-5799.85 1424.42,-5047.24 1456,-5014 1527.2,-4939.07 1656.38,-4949.89 1738.55,-4966.8"/>
<polygon fill="blue" stroke="blue" points="1738.07,-4970.28 1748.58,-4968.95 1739.53,-4963.43 1738.07,-4970.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node168"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1011,-5412 351,-5412 351,-5376 1011,-5376 1011,-5412"/>
<text text-anchor="middle" x="681" y="-5390.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.54,-5375.91C1004.12,-5373.22 1007.98,-5370.26 1011,-5367 1058.2,-5316.06 1000.4,-424.73 1039,-367 1061.58,-333.22 1100.85,-313.16 1138.46,-301.26"/>
<polygon fill="blue" stroke="blue" points="1139.91,-304.48 1148.49,-298.26 1137.9,-297.77 1139.91,-304.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M998.71,-5375.8C1003.6,-5373.15 1007.74,-5370.22 1011,-5367 1058.46,-5320.08 992.82,-5116.18 1039,-5068 1066.48,-5039.33 1109,-5030.94 1147.56,-5030.4"/>
<polygon fill="blue" stroke="blue" points="1147.78,-5033.9 1157.79,-5030.44 1147.81,-5026.9 1147.78,-5033.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.53,-5412.03C831.28,-5425.25 944.54,-5431.22 1011,-5367 1088.23,-5292.38 964.77,-5204.61 1039,-5127 1080.34,-5083.78 1155.43,-5084.22 1200.15,-5089.15"/>
<polygon fill="blue" stroke="blue" points="1199.94,-5092.65 1210.29,-5090.4 1200.8,-5085.7 1199.94,-5092.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M998.77,-5375.86C1003.64,-5373.19 1007.76,-5370.25 1011,-5367 1066.57,-5311.28 984.96,-5071.2 1039,-5014 1072.85,-4978.18 1130.15,-4973.85 1174.34,-4977.07"/>
<polygon fill="blue" stroke="blue" points="1174.15,-4980.57 1184.41,-4977.95 1174.76,-4973.59 1174.15,-4980.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node169"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="795,-6168 567,-6168 567,-6132 795,-6132 795,-6168"/>
<text text-anchor="middle" x="681" y="-6146.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M795.25,-6156.51C860.42,-6156.43 942.67,-6149.68 1011,-6123 1096.44,-6089.64 1175.96,-6012.81 1213.64,-5972.6"/>
<polygon fill="blue" stroke="blue" points="1216.39,-5974.78 1220.61,-5965.07 1211.25,-5970.03 1216.39,-5974.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M795.25,-6156.14C878.58,-6157.93 982.15,-6153.49 1011,-6123 1091.59,-6037.82 960.74,-5155.32 1039,-5068 1065.72,-5038.19 1108.61,-5029.81 1147.6,-5029.57"/>
<polygon fill="blue" stroke="blue" points="1147.91,-5033.08 1157.95,-5029.7 1147.99,-5026.08 1147.91,-5033.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M795.23,-6156.13C878.55,-6157.9 982.12,-6153.46 1011,-6123 1085.57,-6044.36 971.81,-5233.04 1039,-5148 1077.18,-5099.67 1154.32,-5092.51 1200.07,-5092.91"/>
<polygon fill="blue" stroke="blue" points="1200.09,-5096.41 1210.16,-5093.12 1200.24,-5089.41 1200.09,-5096.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node170"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="819.5,-5358 542.5,-5358 542.5,-5322 819.5,-5322 819.5,-5358"/>
<text text-anchor="middle" x="681" y="-5336.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.81,-5346.66C897.97,-5347.1 985.2,-5340.85 1011,-5313 1057.69,-5262.61 1000.82,-424.11 1039,-367 1061.58,-333.22 1100.85,-313.16 1138.46,-301.26"/>
<polygon fill="blue" stroke="blue" points="1139.91,-304.48 1148.49,-298.26 1137.9,-297.77 1139.91,-304.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.22,-5358C830.98,-5371.29 944.52,-5377.39 1011,-5313 1089.72,-5236.75 962.36,-5146.35 1039,-5068 1066.66,-5039.73 1108.98,-5031.32 1147.37,-5030.67"/>
<polygon fill="blue" stroke="blue" points="1147.55,-5034.17 1157.55,-5030.67 1147.55,-5027.17 1147.55,-5034.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.88,-5358.05C833.29,-5370.55 944.32,-5375.32 1011,-5313 1072.07,-5255.92 980.22,-5186.44 1039,-5127 1081.06,-5084.47 1155.89,-5084.68 1200.38,-5089.37"/>
<polygon fill="blue" stroke="blue" points="1200.12,-5092.86 1210.47,-5090.56 1200.95,-5085.91 1200.12,-5092.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.86,-5345.85C897.47,-5345.94 984.1,-5339.59 1011,-5313 1058.46,-5266.08 992.82,-5062.18 1039,-5014 1072.99,-4978.54 1130,-4974.1 1174.06,-4977.18"/>
<polygon fill="blue" stroke="blue" points="1173.85,-4980.68 1184.11,-4978.03 1174.43,-4973.7 1173.85,-4980.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node171"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="800.5,-5628 561.5,-5628 561.5,-5592 800.5,-5592 800.5,-5628"/>
<text text-anchor="middle" x="681" y="-5606.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.87,-5596.48C866.72,-5594.48 947.8,-5601.49 1011,-5637 1127.76,-5702.6 1200.29,-5856.62 1225.99,-5919.52"/>
<polygon fill="blue" stroke="blue" points="1222.74,-5920.82 1229.71,-5928.8 1229.24,-5918.22 1222.74,-5920.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.58,-5616.02C882.77,-5617.37 982.38,-5612.42 1011,-5583 1090.92,-5500.85 961.33,-5152.28 1039,-5068 1066.02,-5038.68 1108.72,-5030.28 1147.51,-5029.91"/>
<polygon fill="blue" stroke="blue" points="1147.77,-5033.42 1157.8,-5030 1147.83,-5026.42 1147.77,-5033.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.52,-5615.96C882.68,-5617.28 982.27,-5612.32 1011,-5583 1082.05,-5510.48 970.86,-5202.26 1039,-5127 1079.34,-5082.45 1155.37,-5083.5 1200.42,-5088.86"/>
<polygon fill="blue" stroke="blue" points="1199.98,-5092.34 1210.35,-5090.18 1200.89,-5085.4 1199.98,-5092.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.63,-5616.07C882.84,-5617.44 982.45,-5612.5 1011,-5583 1055.02,-5537.51 996.22,-5060.66 1039,-5014 1072.31,-4977.67 1129.67,-4973.41 1174.02,-4976.77"/>
<polygon fill="blue" stroke="blue" points="1173.86,-4980.27 1184.13,-4977.69 1174.49,-4973.3 1173.86,-4980.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node172"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="829.5,-5574 532.5,-5574 532.5,-5538 829.5,-5538 829.5,-5574"/>
<text text-anchor="middle" x="681" y="-5552.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.73,-5540.23C889.85,-5540.62 957.59,-5550.33 1011,-5583 1140.98,-5662.52 1207.38,-5848.06 1228.69,-5918.86"/>
<polygon fill="blue" stroke="blue" points="1225.44,-5920.22 1231.61,-5928.83 1232.16,-5918.25 1225.44,-5920.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.92,-5562.15C905.01,-5561.8 985.64,-5554.9 1011,-5529 1082.8,-5455.66 969.21,-5143.25 1039,-5068 1066.11,-5038.77 1108.82,-5030.38 1147.6,-5029.99"/>
<polygon fill="blue" stroke="blue" points="1147.86,-5033.49 1157.88,-5030.07 1147.91,-5026.49 1147.86,-5033.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.84,-5562.06C904.89,-5561.68 985.53,-5554.79 1011,-5529 1073.93,-5465.29 978.63,-5193.14 1039,-5127 1079.52,-5082.61 1155.48,-5083.61 1200.47,-5088.92"/>
<polygon fill="blue" stroke="blue" points="1200.02,-5092.39 1210.39,-5090.22 1200.93,-5085.45 1200.02,-5092.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.54,-5562.21C904.78,-5561.91 985.67,-5555.03 1011,-5529 1090.92,-5446.85 961.33,-5098.28 1039,-5014 1072.4,-4977.76 1129.76,-4973.48 1174.08,-4976.82"/>
<polygon fill="blue" stroke="blue" points="1173.91,-4980.32 1184.18,-4977.73 1174.54,-4973.35 1173.91,-4980.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1212.87,-6191.86C1165.54,-6155.27 1063.2,-6067.34 1025,-5965 1017.15,-5943.97 1014.24,-5176.7 1025,-5157 1057.91,-5096.73 1148.41,-5090.39 1200.07,-5092.06"/>
<polygon fill="blue" stroke="blue" points="1200.02,-5095.56 1210.16,-5092.5 1200.32,-5088.56 1200.02,-5095.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node174"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="761,-6276 601,-6276 601,-6240 761,-6240 761,-6276"/>
<text text-anchor="middle" x="681" y="-6254.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.16,-6270.93C832.1,-6278.27 936.21,-6278.13 1011,-6231 1031.89,-6217.83 1024.8,-6203.21 1039,-6183 1095.84,-6102.09 1173.72,-6014.82 1212.51,-5972.68"/>
<polygon fill="blue" stroke="blue" points="1215.29,-5974.83 1219.51,-5965.1 1210.15,-5970.07 1215.29,-5974.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.12,-6262.86C847.32,-6266.26 977.47,-6265.24 1011,-6231 1082.35,-6158.15 976.12,-5853.27 1039,-5773 1153,-5627.49 1313.45,-5787.39 1436,-5649 1468.65,-5612.13 1435.49,-5584.78 1456,-5540 1540.08,-5356.41 1716.94,-5183.3 1785.76,-5120.18"/>
<polygon fill="blue" stroke="blue" points="1788.19,-5122.7 1793.22,-5113.38 1783.48,-5117.53 1788.19,-5122.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.2,-6262.94C847.48,-6266.42 977.69,-6265.46 1011,-6231 1056,-6184.45 994.32,-5695.85 1039,-5649 1100.17,-5584.87 1375.2,-5675.48 1436,-5611 1477.42,-5567.08 1414.14,-5111.5 1456,-5068 1495.59,-5026.86 1661.84,-5030.77 1753.2,-5036.33"/>
<polygon fill="blue" stroke="blue" points="1753.22,-5039.83 1763.42,-5036.97 1753.66,-5032.85 1753.22,-5039.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.22,-6262.96C847.51,-6266.45 977.74,-6265.51 1011,-6231 1058.86,-6181.35 1000.93,-5668.5 1039,-5611 1146.98,-5447.89 1327.7,-5583.89 1436,-5421 1461.07,-5383.3 1424.41,-5046.43 1456,-5014 1527.71,-4940.39 1655.54,-4950.4 1737.47,-4966.85"/>
<polygon fill="blue" stroke="blue" points="1736.97,-4970.32 1747.47,-4968.93 1738.4,-4963.46 1736.97,-4970.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node175"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="793,-5304 569,-5304 569,-5268 793,-5268 793,-5304"/>
<text text-anchor="middle" x="681" y="-5282.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M793.29,-5292.26C877.07,-5294.26 982.22,-5290.06 1011,-5259 1057.18,-5209.16 1001.24,-423.48 1039,-367 1061.58,-333.22 1100.85,-313.16 1138.46,-301.26"/>
<polygon fill="blue" stroke="blue" points="1139.91,-304.48 1148.49,-298.26 1137.9,-297.77 1139.91,-304.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.59,-5304.04C833.03,-5316.63 944.34,-5321.55 1011,-5259 1073.57,-5200.29 978.04,-5128.37 1039,-5068 1067.1,-5040.17 1109.48,-5031.81 1147.78,-5031.08"/>
<polygon fill="blue" stroke="blue" points="1147.94,-5034.58 1157.93,-5031.05 1147.93,-5027.58 1147.94,-5034.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.38,-5304.01C837.09,-5315.2 944.11,-5317.88 1011,-5259 1056.01,-5219.37 995.58,-5168.37 1039,-5127 1082.19,-5085.85 1156.31,-5085.51 1200.43,-5089.74"/>
<polygon fill="blue" stroke="blue" points="1200.11,-5093.23 1210.43,-5090.83 1200.87,-5086.27 1200.11,-5093.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.22,-5304C830.98,-5317.29 944.52,-5323.39 1011,-5259 1089.72,-5182.75 962.36,-5092.35 1039,-5014 1073.35,-4978.88 1130.33,-4974.41 1174.28,-4977.39"/>
<polygon fill="blue" stroke="blue" points="1174.04,-4980.88 1184.29,-4978.21 1174.61,-4973.91 1174.04,-4980.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node176"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="781,-6114 581,-6114 581,-6078 781,-6078 781,-6114"/>
<text text-anchor="middle" x="681" y="-6092.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.12,-6098.41C847.46,-6097.48 936.01,-6091.29 1011,-6069 1084.25,-6047.23 1160.66,-5999.79 1203.06,-5970.91"/>
<polygon fill="blue" stroke="blue" points="1205.07,-5973.77 1211.32,-5965.21 1201.1,-5968 1205.07,-5973.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.37,-6101.78C866.65,-6104.33 980.5,-6101.19 1011,-6069 1087.53,-5988.23 964.68,-5150.8 1039,-5068 1065.74,-5038.21 1108.63,-5029.83 1147.62,-5029.59"/>
<polygon fill="blue" stroke="blue" points="1147.93,-5033.09 1157.97,-5029.71 1148.01,-5026.09 1147.93,-5033.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.35,-6101.76C866.62,-6104.3 980.46,-6101.15 1011,-6069 1081.51,-5994.77 975.46,-5228.28 1039,-5148 1077.22,-5099.71 1154.34,-5092.53 1200.09,-5092.92"/>
<polygon fill="blue" stroke="blue" points="1200.1,-5096.42 1210.17,-5093.13 1200.25,-5089.42 1200.1,-5096.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.38,-6101.79C866.67,-6104.35 980.52,-6101.21 1011,-6069 1091.59,-5983.82 960.74,-5101.32 1039,-5014 1072,-4977.18 1129.68,-4973.05 1174.21,-4976.59"/>
<polygon fill="blue" stroke="blue" points="1174.08,-4980.09 1184.36,-4977.54 1174.74,-4973.12 1174.08,-4980.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1317.18,-5030.3C1358.46,-5024.93 1409.9,-5018.6 1456,-5014 1548.26,-5004.8 1654.18,-4997.18 1726.73,-4992.4"/>
<polygon fill="blue" stroke="blue" points="1726.99,-4995.89 1736.74,-4991.75 1726.53,-4988.91 1726.99,-4995.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="2335.5,-4959 2281.5,-4959 2281.5,-4923 2335.5,-4923 2335.5,-4959"/>
<text text-anchor="middle" x="2308.5" y="-4937.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1889.61,-5102.68C1962.76,-5107.3 2076.63,-5106.23 2166,-5068 2217.32,-5046.05 2262.58,-4997.68 2287.4,-4967.38"/>
<polygon fill="blue" stroke="blue" points="2290.31,-4969.34 2293.84,-4959.35 2284.85,-4964.95 2290.31,-4969.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1244.94,-4806.78C1274.11,-4723.16 1394.29,-4367.24 1436,-4064 1439.9,-4035.68 1436.71,-3056.1 1456,-3035 1563.08,-2917.83 2057.19,-3072.56 2166,-2957 2221.67,-2897.88 2143.18,-2282.99 2202,-2227 2273.14,-2159.28 2353.24,-2157.85 2423,-2227 2467.57,-2271.18 2404.03,-4436.81 2443,-4486 2449.99,-4494.83 2459.36,-4501.06 2469.69,-4505.42"/>
<polygon fill="blue" stroke="blue" points="2468.81,-4508.83 2479.41,-4508.92 2471.18,-4502.24 2468.81,-4508.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1244.95,-4806.78C1274.16,-4723.17 1394.5,-4367.26 1436,-4064 1440.17,-4033.53 1434.64,-2979.13 1456,-2957 1510.87,-2900.16 2110.29,-2975.01 2166,-2919 2224.68,-2860.01 2141.77,-2228.4 2202,-2171 2273.1,-2103.24 2351.5,-2103.65 2423,-2171 2464.15,-2209.76 2541.94,-4069.66 2552.34,-4322.62"/>
<polygon fill="blue" stroke="blue" points="2548.85,-4322.98 2552.76,-4332.83 2555.85,-4322.69 2548.85,-4322.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1264.51,-5100.78C1307.61,-5108.63 1393.32,-5116.65 1436,-5068 1470.42,-5028.76 1418.99,-1346.81 1456,-1310 1511.93,-1254.37 2096.45,-1272.78 2166,-1310 2191.43,-1323.61 2178.47,-1347.32 2202,-1364 2218.54,-1375.72 2239.73,-1382.36 2258.78,-1386.12"/>
<polygon fill="blue" stroke="blue" points="2258.35,-1389.6 2268.8,-1387.88 2259.56,-1382.7 2258.35,-1389.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.73,-4944.55C1360.77,-4945.46 1407.73,-4938.05 1436,-4906 1470.38,-4867.02 1421.24,-3073.64 1456,-3035 1668.47,-2798.8 1948.97,-3184.02 2166,-2952 2221.1,-2893.1 2143.57,-2282.6 2202,-2227 2273.16,-2159.29 2351.45,-2159.71 2423,-2227 2503.1,-2302.33 2547.09,-4074.75 2552.85,-4322.37"/>
<polygon fill="blue" stroke="blue" points="2549.36,-4322.78 2553.09,-4332.7 2556.36,-4322.62 2549.36,-4322.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.8,-4944.61C1360.86,-4945.54 1407.81,-4938.13 1436,-4906 1469.24,-4868.11 1420.26,-1312.54 1456,-1277 1511.94,-1221.37 2100.41,-1233.16 2166,-1277 2200.79,-1300.25 2170.39,-1336.58 2202,-1364 2217.69,-1377.61 2239.34,-1384.51 2258.95,-1387.95"/>
<polygon fill="blue" stroke="blue" points="2258.56,-1391.44 2268.97,-1389.46 2259.6,-1384.51 2258.56,-1391.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.81,-4944.61C1360.87,-4945.55 1407.82,-4938.13 1436,-4906 1473.2,-4863.58 1423,-889.76 1456,-844 1510.62,-768.28 1615.15,-739.35 1697.22,-728.59"/>
<polygon fill="blue" stroke="blue" points="1697.87,-732.04 1707.36,-727.34 1697.01,-725.09 1697.87,-732.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1319.81,-4944.62C1360.87,-4945.55 1407.82,-4938.14 1436,-4906 1474.55,-4862.03 1416.14,-738.78 1456,-696 1487.54,-662.16 1602.86,-658.48 1694.21,-661.37"/>
<polygon fill="blue" stroke="blue" points="1694.26,-664.87 1704.37,-661.72 1694.5,-657.88 1694.26,-664.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1290.72,-4994.2C1334.73,-5000.1 1399.4,-5008.36 1456,-5014 1560.19,-5024.39 1681.8,-5032.77 1753.1,-5037.3"/>
<polygon fill="blue" stroke="blue" points="1753.04,-5040.81 1763.24,-5037.95 1753.48,-5033.82 1753.04,-5040.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1866.84,-5045.35C1998.86,-5055.41 2347.53,-5073.81 2423,-4995 2470.44,-4945.46 2399.78,-4431.26 2443,-4378 2457.73,-4359.85 2482.46,-4352.71 2504.8,-4350.28"/>
<polygon fill="blue" stroke="blue" points="2505.16,-4353.76 2514.85,-4349.47 2504.6,-4346.79 2505.16,-4353.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1352.73,-4889.34C1384.1,-4885.98 1415.17,-4875.74 1436,-4852 1469.1,-4814.28 1420.42,-1274.39 1456,-1239 1483.97,-1211.19 2134.48,-1215.28 2166,-1239 2212.19,-1273.77 2160.51,-1323.73 2202,-1364 2217.02,-1378.58 2238.78,-1385.6 2258.64,-1388.87"/>
<polygon fill="blue" stroke="blue" points="2258.42,-1392.37 2268.8,-1390.26 2259.37,-1385.43 2258.42,-1392.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2319.16,-4922.82C2341.22,-4880.46 2395.5,-4771.44 2423,-4674 2439.35,-4616.05 2402.41,-4584.48 2443,-4540 2450.39,-4531.9 2459.77,-4526.05 2469.93,-4521.84"/>
<polygon fill="blue" stroke="blue" points="2471.21,-4525.1 2479.44,-4518.43 2468.85,-4518.51 2471.21,-4525.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1893.19,-4990.33C2048.32,-4996.2 2386.33,-5004.58 2423,-4968 2469.44,-4921.68 2401.63,-4428.9 2443,-4378 2457.74,-4359.86 2482.48,-4352.72 2504.81,-4350.29"/>
<polygon fill="blue" stroke="blue" points="2505.17,-4353.77 2514.86,-4349.48 2504.61,-4346.8 2505.17,-4353.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1893.07,-4979.79C2000.76,-4969.71 2191.95,-4951.81 2271.37,-4944.38"/>
<polygon fill="blue" stroke="blue" points="2271.74,-4947.86 2281.37,-4943.45 2271.08,-4940.89 2271.74,-4947.86"/>
</g>
</g>
</svg>
