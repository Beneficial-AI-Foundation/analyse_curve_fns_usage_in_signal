<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="5134pt" height="8556pt"
 viewBox="0.00 0.00 5134.00 8555.73" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 8551.73)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-8551.73 5130,-8551.73 5130,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4486,-6606 4486,-6735 4699,-6735 4699,-6606 4486,-6606"/>
<text text-anchor="middle" x="4592.5" y="-6719.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4929,-6606 4929,-6681 5009,-6681 5009,-6606 4929,-6606"/>
<text text-anchor="middle" x="4969" y="-6665.8" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4521.5,-6743 4521.5,-6818 4663.5,-6818 4663.5,-6743 4521.5,-6743"/>
<text text-anchor="middle" x="4592.5" y="-6802.8" font-family="Helvetica,sans-Serif" font-size="14.00">straus.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4727,-6606 4727,-6681 4909,-6681 4909,-6606 4727,-6606"/>
<text text-anchor="middle" x="4818" y="-6665.8" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_base.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="5029,-6606 5029,-6681 5118,-6681 5118,-6606 5029,-6606"/>
<text text-anchor="middle" x="5073.5" y="-6665.8" font-family="Helvetica,sans-Serif" font-size="14.00">field.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="4170,-6826 4170,-7063 4885,-7063 4885,-6826 4170,-6826"/>
<text text-anchor="middle" x="4527.5" y="-7047.8" font-family="Helvetica,sans-Serif" font-size="14.00">edwards.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3920,-6934 3920,-7009 4062,-7009 4062,-6934 3920,-6934"/>
<text text-anchor="middle" x="3991" y="-6993.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3948,-3190 3948,-3265 4034,-3265 4034,-3190 3948,-3190"/>
<text text-anchor="middle" x="3991" y="-3249.8" font-family="Helvetica,sans-Serif" font-size="14.00">window.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3375,-3410 3375,-3485 4052.5,-3485 4052.5,-3410 3375,-3410"/>
<text text-anchor="middle" x="3713.75" y="-3469.8" font-family="Helvetica,sans-Serif" font-size="14.00">verifying.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="32.5,-3588 32.5,-3717 284.5,-3717 284.5,-3588 32.5,-3588"/>
<text text-anchor="middle" x="158.5" y="-3701.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="1977.5,-91 1977.5,-490 2267.5,-490 2267.5,-91 1977.5,-91"/>
<text text-anchor="middle" x="2122.5" y="-474.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="2553.5,-7793 2553.5,-7922 2702.5,-7922 2702.5,-7793 2553.5,-7793"/>
<text text-anchor="middle" x="2628" y="-7906.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="1212,-4720 1212,-6361 1808,-6361 1808,-4720 1212,-4720"/>
<text text-anchor="middle" x="1510" y="-6345.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="2934,-1235 2934,-1310 3262,-1310 3262,-1235 2934,-1235"/>
<text text-anchor="middle" x="3098" y="-1294.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="3157.5,-1152 3157.5,-1227 3261.5,-1227 3261.5,-1152 3157.5,-1152"/>
<text text-anchor="middle" x="3209.5" y="-1211.8" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="3119.5,-1049 3119.5,-1144 3812,-1144 3812,-1049 3119.5,-1049"/>
<text text-anchor="middle" x="3465.75" y="-1128.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="3558,-3273 3558,-3402 4063,-3402 4063,-3273 3558,-3273"/>
<text text-anchor="middle" x="3810.5" y="-3386.8" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="729,-6888 729,-6963 1118,-6963 1118,-6888 729,-6888"/>
<text text-anchor="middle" x="923.5" y="-6947.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="1444,-3385 1444,-3514 1576,-3514 1576,-3385 1444,-3385"/>
<text text-anchor="middle" x="1510" y="-3498.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="2010,-3410 2010,-3539 3319,-3539 3319,-3410 2010,-3410"/>
<text text-anchor="middle" x="2664.5" y="-3523.8" font-family="Helvetica,sans-Serif" font-size="14.00">verify.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="3558.5,-7404 3558.5,-7641 4460.5,-7641 4460.5,-7404 3558.5,-7404"/>
<text text-anchor="middle" x="4009.5" y="-7625.8" font-family="Helvetica,sans-Serif" font-size="14.00">vrf.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="702,-6971 702,-7100 1605,-7100 1605,-6971 702,-6971"/>
<text text-anchor="middle" x="1153.5" y="-7084.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="735.5,-6805 735.5,-6880 1549,-6880 1549,-6805 735.5,-6805"/>
<text text-anchor="middle" x="1142.25" y="-6864.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="1397,-7245 1397,-7320 1623,-7320 1623,-7245 1397,-7245"/>
<text text-anchor="middle" x="1510" y="-7304.8" font-family="Helvetica,sans-Serif" font-size="14.00">fetch_profile_key_credential.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="329,-3235 329,-3526 1152,-3526 1152,-3235 329,-3235"/>
<text text-anchor="middle" x="740.5" y="-3510.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-3235 8,-3580 309,-3580 309,-3235 8,-3235"/>
<text text-anchor="middle" x="158.5" y="-3564.8" font-family="Helvetica,sans-Serif" font-size="14.00">keytrans.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1398.5,-7108 1398.5,-7237 1621.5,-7237 1621.5,-7108 1398.5,-7108"/>
<text text-anchor="middle" x="1510" y="-7221.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="3622.5,-7321 3622.5,-7396 3692.5,-7396 3692.5,-7321 3622.5,-7321"/>
<text text-anchor="middle" x="3657.5" y="-7380.8" font-family="Helvetica,sans-Serif" font-size="14.00">env.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="2562.5,-8195 2562.5,-8324 3051.5,-8324 3051.5,-8195 2562.5,-8195"/>
<text text-anchor="middle" x="2807" y="-8308.8" font-family="Helvetica,sans-Serif" font-size="14.00">sign.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="2879,-6581 2879,-6676 3789.5,-6676 3789.5,-6581 2879,-6581"/>
<text text-anchor="middle" x="3334.25" y="-6660.8" font-family="Helvetica,sans-Serif" font-size="14.00">statement.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="985.5,-3152 985.5,-3227 1076.5,-3227 1076.5,-3152 985.5,-3152"/>
<text text-anchor="middle" x="1031" y="-3211.8" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="990,-498 990,-573 2216.5,-573 2216.5,-498 990,-498"/>
<text text-anchor="middle" x="1603.25" y="-557.8" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="2056.5,-3181 2056.5,-3310 2189.5,-3310 2189.5,-3181 2056.5,-3181"/>
<text text-anchor="middle" x="2123" y="-3294.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="1438,-3098 1438,-3173 2217.5,-3173 2217.5,-3098 1438,-3098"/>
<text text-anchor="middle" x="1827.75" y="-3157.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="2561.5,-878 2561.5,-953 2694.5,-953 2694.5,-878 2561.5,-878"/>
<text text-anchor="middle" x="2628" y="-937.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="2000.5,-8 2000.5,-83 2727.5,-83 2727.5,-8 2000.5,-8"/>
<text text-anchor="middle" x="2364" y="-67.8" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="2907.5,-878 2907.5,-953 3051.5,-953 3051.5,-878 2907.5,-878"/>
<text text-anchor="middle" x="2979.5" y="-937.8" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="2529,-711 2529,-840 3253,-840 3253,-711 2529,-711"/>
<text text-anchor="middle" x="2891" y="-824.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="2531,-2151 2531,-2226 2725,-2226 2725,-2151 2531,-2151"/>
<text text-anchor="middle" x="2628" y="-2210.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust40" class="cluster">
<title>cluster_39</title>
<polygon fill="lightblue" stroke="lightblue" points="1883,-581 1883,-1196 2362,-1196 2362,-581 1883,-581"/>
<text text-anchor="middle" x="2122.5" y="-1180.8" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust41" class="cluster">
<title>cluster_40</title>
<polygon fill="lightblue" stroke="lightblue" points="1868,-1204 1868,-1765 2377,-1765 2377,-1204 1868,-1204"/>
<text text-anchor="middle" x="2122.5" y="-1749.8" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust42" class="cluster">
<title>cluster_41</title>
<polygon fill="lightblue" stroke="lightblue" points="1172,-1773 1172,-3090 2157.5,-3090 2157.5,-1773 1172,-1773"/>
<text text-anchor="middle" x="1664.75" y="-3074.8" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust43" class="cluster">
<title>cluster_42</title>
<polygon fill="lightblue" stroke="lightblue" points="1464.5,-8067 1464.5,-8142 2700,-8142 2700,-8067 1464.5,-8067"/>
<text text-anchor="middle" x="2082.25" y="-8126.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust44" class="cluster">
<title>cluster_43</title>
<polygon fill="lightblue" stroke="lightblue" points="2474.5,-7930 2474.5,-8059 3036.5,-8059 3036.5,-7930 2474.5,-7930"/>
<text text-anchor="middle" x="2755.5" y="-8043.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust45" class="cluster">
<title>cluster_44</title>
<polygon fill="lightblue" stroke="lightblue" points="1464.5,-7465 1464.5,-7540 2202.5,-7540 2202.5,-7465 1464.5,-7465"/>
<text text-anchor="middle" x="1833.5" y="-7524.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust46" class="cluster">
<title>cluster_45</title>
<polygon fill="lightblue" stroke="lightblue" points="2016.5,-7548 2016.5,-7785 2669,-7785 2669,-7548 2016.5,-7548"/>
<text text-anchor="middle" x="2342.75" y="-7769.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust47" class="cluster">
<title>cluster_46</title>
<polygon fill="lightblue" stroke="lightblue" points="2932.5,-4091 2932.5,-4220 3027.5,-4220 3027.5,-4091 2932.5,-4091"/>
<text text-anchor="middle" x="2980" y="-4204.8" font-family="Helvetica,sans-Serif" font-size="14.00">issuance.rs</text>
</g>
<g id="clust48" class="cluster">
<title>cluster_47</title>
<polygon fill="lightblue" stroke="lightblue" points="2943.5,-4258 2943.5,-4387 3015.5,-4387 3015.5,-4258 2943.5,-4258"/>
<text text-anchor="middle" x="2979.5" y="-4371.8" font-family="Helvetica,sans-Serif" font-size="14.00">blind.rs</text>
</g>
<g id="clust49" class="cluster">
<title>cluster_48</title>
<polygon fill="lightblue" stroke="lightblue" points="2919,-3924 2919,-4053 3041,-4053 3041,-3924 2919,-3924"/>
<text text-anchor="middle" x="2980" y="-4037.8" font-family="Helvetica,sans-Serif" font-size="14.00">presentation.rs</text>
</g>
<g id="clust50" class="cluster">
<title>cluster_49</title>
<polygon fill="lightblue" stroke="lightblue" points="972.5,-6668 972.5,-6743 1090.5,-6743 1090.5,-6668 972.5,-6668"/>
<text text-anchor="middle" x="1031.5" y="-6727.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust51" class="cluster">
<title>cluster_50</title>
<polygon fill="lightblue" stroke="lightblue" points="1357,-6614 1357,-6797 1663,-6797 1663,-6614 1357,-6614"/>
<text text-anchor="middle" x="1510" y="-6781.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust52" class="cluster">
<title>cluster_51</title>
<polygon fill="lightblue" stroke="lightblue" points="2020,-4936 2020,-5065 2226,-5065 2226,-4936 2020,-4936"/>
<text text-anchor="middle" x="2123" y="-5049.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential_with_pni.rs</text>
</g>
<g id="clust53" class="cluster">
<title>cluster_52</title>
<polygon fill="lightblue" stroke="lightblue" points="2030.5,-6763 2030.5,-7054 2728.5,-7054 2728.5,-6763 2030.5,-6763"/>
<text text-anchor="middle" x="2379.5" y="-7038.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkc.rs</text>
</g>
<g id="clust54" class="cluster">
<title>cluster_53</title>
<polygon fill="lightblue" stroke="lightblue" points="1361,-4421 1361,-4712 2669,-4712 2669,-4421 1361,-4421"/>
<text text-anchor="middle" x="2015" y="-4696.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust55" class="cluster">
<title>cluster_54</title>
<polygon fill="lightblue" stroke="lightblue" points="2556,-3632 2556,-3869 2700,-3869 2700,-3632 2556,-3632"/>
<text text-anchor="middle" x="2628" y="-3853.8" font-family="Helvetica,sans-Serif" font-size="14.00">auth_credential.rs</text>
</g>
<g id="clust56" class="cluster">
<title>cluster_55</title>
<polygon fill="lightblue" stroke="lightblue" points="2552.5,-4176 2552.5,-4413 2704.5,-4413 2704.5,-4176 2552.5,-4176"/>
<text text-anchor="middle" x="2628.5" y="-4397.8" font-family="Helvetica,sans-Serif" font-size="14.00">create_credential.rs</text>
</g>
<g id="clust57" class="cluster">
<title>cluster_56</title>
<polygon fill="lightblue" stroke="lightblue" points="1963.5,-7793 1963.5,-8030 2281.5,-8030 2281.5,-7793 1963.5,-7793"/>
<text text-anchor="middle" x="2122.5" y="-8014.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust58" class="cluster">
<title>cluster_57</title>
<polygon fill="lightblue" stroke="lightblue" points="1928,-6086 1928,-6755 2820.5,-6755 2820.5,-6086 1928,-6086"/>
<text text-anchor="middle" x="2374.25" y="-6739.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust59" class="cluster">
<title>cluster_58</title>
<polygon fill="lightblue" stroke="lightblue" points="2573.5,-7062 2573.5,-7137 2683.5,-7137 2683.5,-7062 2573.5,-7062"/>
<text text-anchor="middle" x="2628.5" y="-7121.8" font-family="Helvetica,sans-Serif" font-size="14.00">credentials.rs</text>
</g>
<g id="clust60" class="cluster">
<title>cluster_59</title>
<polygon fill="lightblue" stroke="lightblue" points="2940.5,-6684 2940.5,-7245 3018.5,-7245 3018.5,-6684 2940.5,-6684"/>
<text text-anchor="middle" x="2979.5" y="-7229.8" font-family="Helvetica,sans-Serif" font-size="14.00">proofs.rs</text>
</g>
<g id="clust61" class="cluster">
<title>cluster_60</title>
<polygon fill="lightblue" stroke="lightblue" points="2057,-8332 2057,-8461 2664,-8461 2664,-8332 2057,-8332"/>
<text text-anchor="middle" x="2360.5" y="-8445.8" font-family="Helvetica,sans-Serif" font-size="14.00">signature.rs</text>
</g>
<g id="clust62" class="cluster">
<title>cluster_61</title>
<polygon fill="lightblue" stroke="lightblue" points="2397,-3877 2397,-4168 2859,-4168 2859,-3877 2397,-3877"/>
<text text-anchor="middle" x="2628" y="-4152.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkcredential_examples.rs</text>
</g>
<g id="clust63" class="cluster">
<title>cluster_62</title>
<polygon fill="lightblue" stroke="lightblue" points="1368.5,-4338 1368.5,-4413 1651.5,-4413 1651.5,-4338 1368.5,-4338"/>
<text text-anchor="middle" x="1510" y="-4397.8" font-family="Helvetica,sans-Serif" font-size="14.00">backup_auth_flow.rs</text>
</g>
<g id="clust64" class="cluster">
<title>cluster_63</title>
<polygon fill="lightblue" stroke="lightblue" points="1921.5,-3877 1921.5,-4114 2323.5,-4114 2323.5,-3877 1921.5,-3877"/>
<text text-anchor="middle" x="2122.5" y="-4098.8" font-family="Helvetica,sans-Serif" font-size="14.00">call_link_flow.rs</text>
</g>
<g id="clust65" class="cluster">
<title>cluster_64</title>
<polygon fill="lightblue" stroke="lightblue" points="1373.5,-7847 1373.5,-8030 1646.5,-8030 1646.5,-7847 1373.5,-7847"/>
<text text-anchor="middle" x="1510" y="-8014.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust66" class="cluster">
<title>cluster_65</title>
<polygon fill="lightblue" stroke="lightblue" points="1286.5,-6369 1286.5,-6606 1733.5,-6606 1733.5,-6369 1286.5,-6369"/>
<text text-anchor="middle" x="1510" y="-6590.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust67" class="cluster">
<title>cluster_66</title>
<polygon fill="lightblue" stroke="lightblue" points="1416,-7328 1416,-7457 1604,-7457 1604,-7328 1416,-7328"/>
<text text-anchor="middle" x="1510" y="-7441.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().</title>
<g id="a_node1"><a xlink:title="pub fn straus_multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; EdwardsPoint where &#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;I::Item: core::borrow::Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;J::Item: core::borrow::Borrow&lt;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4680.5,-6704 4504.5,-6704 4504.5,-6668 4680.5,-6668 4680.5,-6704"/>
<text text-anchor="middle" x="4592.5" y="-6682.3" font-family="Helvetica,sans-Serif" font-size="14.00">straus_multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().</title>
<g id="a_node4"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; EdwardsPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I::Item: Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J::Item: Borrow&lt;EdwardsPoint&gt;, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4655.5,-6787 4529.5,-6787 4529.5,-6751 4655.5,-6751 4655.5,-6787"/>
<text text-anchor="middle" x="4592.5" y="-6765.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4592.5,-6704.16C4592.5,-6716.29 4592.5,-6728.43 4592.5,-6740.57"/>
<polygon fill="gray" stroke="gray" points="4589,-6740.76 4592.5,-6750.76 4596,-6740.76 4589,-6740.76"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().</title>
<g id="a_node2"><a xlink:title="pub fn vartime_double_base_mul(a: &amp;Scalar, A: &amp;EdwardsPoint, b: &amp;Scalar) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;match get_selected_backend() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[cfg(curve25519_dalek_backend = &#39; simd&#39; )] &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackendKind::A...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4691,-6650 4494,-6650 4494,-6614 4691,-6614 4691,-6650"/>
<text text-anchor="middle" x="4592.5" y="-6628.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_base_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().</title>
<g id="a_node5"><a xlink:title="pub fn mul(a: &amp;Scalar, A: &amp;EdwardsPoint, b: &amp;Scalar) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let a_naf = a.non_adjacent_form(5); &#160;&#160;&#160;&#160;&#160;#[cfg(feature = &#39; precomputed&#45;tables&#39; )] &#160;&#160;&#160;&#160;let b_naf = b.non_adjacent_form(8); &#160;&#160;&#160;...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4845,-6650 4791,-6650 4791,-6614 4845,-6614 4845,-6650"/>
<text text-anchor="middle" x="4818" y="-6628.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4691.21,-6632C4722.92,-6632 4756.18,-6632 4780.52,-6632"/>
<polygon fill="gray" stroke="gray" points="4780.71,-6635.5 4790.71,-6632 4780.71,-6628.5 4780.71,-6635.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<g id="a_node3"><a xlink:title=" &#160;&#160;&#160;pub fn double(&amp;self) &#45;&gt; CompletedPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Double() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let XX = self.X.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let YY = self.Y.square(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ZZ2 = self.Z.square2(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let X_plus_Y = &amp;self.X ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="5001,-6650 4937,-6650 4937,-6614 5001,-6614 5001,-6650"/>
<text text-anchor="middle" x="4969" y="-6628.3" font-family="Helvetica,sans-Serif" font-size="14.00">double</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;pub fn square2(&amp;self) &#45;&gt; FieldElement51 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut square = self.pow2k(1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..5 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;square.0[i] *= 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;square &#160;&#160;&#160;&#160;}">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="5110,-6650 5037,-6650 5037,-6614 5110,-6614 5110,-6650"/>
<text text-anchor="middle" x="5073.5" y="-6628.3" font-family="Helvetica,sans-Serif" font-size="14.00">square2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/u64/field/impl#[FieldElement51]square2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M5001.03,-6632C5009.16,-6632 5018.1,-6632 5026.82,-6632"/>
<polygon fill="gray" stroke="gray" points="5026.9,-6635.5 5036.9,-6632 5026.9,-6628.5 5026.9,-6635.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn mul_by_pow_2(&amp;self, k: u32) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug_assert!(k &gt; 0); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut r: CompletedPoint; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut s = self.as_projective(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..(k &#45; 1) {...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4877,-6870 4759,-6870 4759,-6834 4877,-6834 4877,-6870"/>
<text text-anchor="middle" x="4818" y="-6848.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_by_pow_2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/straus/impl#[Straus][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4642,-6787.01C4676.29,-6799.75 4722.44,-6816.88 4758.73,-6830.36"/>
<polygon fill="gray" stroke="gray" points="4757.62,-6833.68 4768.21,-6833.88 4760.06,-6827.12 4757.62,-6833.68"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4845.3,-6632C4867.76,-6632 4900.49,-6632 4926.49,-6632"/>
<polygon fill="gray" stroke="gray" points="4926.81,-6635.5 4936.81,-6632 4926.81,-6628.5 4926.81,-6635.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;fn from(A: &amp;&#39;a EdwardsPoint) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut Ai = [A.as_projective_niels(); 8]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let A2 = A.double(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..7 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ai[i + 1] = (&amp;A2 + &amp;Ai[i]).as_extended()....">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4018,-3234 3964,-3234 3964,-3198 4018,-3198 4018,-3234"/>
<text text-anchor="middle" x="3991" y="-3212.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/scalar_mul/vartime_double_base/mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4815.8,-6613.77C4799.65,-6372.93 4617.86,-3817.48 4142,-3269 4113.29,-3235.91 4062.59,-3223.48 4028.16,-3218.81"/>
<polygon fill="gray" stroke="gray" points="4028.38,-3215.31 4018.03,-3217.6 4027.55,-3222.26 4028.38,-3215.31"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; EdwardsPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I::Item: Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J::Item: Borrow&lt;EdwardsPoint&gt;, ...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4381,-6978 4255,-6978 4255,-6942 4381,-6942 4381,-6978"/>
<text text-anchor="middle" x="4318" y="-6956.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/straus_multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4381.08,-6963.59C4409.13,-6961.75 4440.42,-6954.28 4460.5,-6933 4520.19,-6869.75 4435.61,-6809.88 4486,-6739 4495.11,-6726.19 4508.23,-6716.29 4522.14,-6708.72"/>
<polygon fill="gray" stroke="gray" points="4524.01,-6711.7 4531.36,-6704.07 4520.86,-6705.45 4524.01,-6711.7"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;pub fn vartime_double_scalar_mul_basepoint( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a: &amp;Scalar, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A: &amp;EdwardsPoint, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b: &amp;Scalar, &#160;&#160;&#160;&#160;) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crate::backend::vartime_double_base_mul(a, A, b) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4458,-6924 4178,-6924 4178,-6888 4458,-6888 4458,-6924"/>
<text text-anchor="middle" x="4318" y="-6902.3" font-family="Helvetica,sans-Serif" font-size="14.00">vartime_double_scalar_mul_basepoint</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/vartime_double_base_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4450.55,-6887.93C4454.1,-6885.26 4457.44,-6882.3 4460.5,-6879 4527.51,-6806.9 4421.26,-6733.14 4486,-6659 4486.63,-6658.28 4487.27,-6657.58 4487.92,-6656.9"/>
<polygon fill="gray" stroke="gray" points="4490.3,-6659.47 4495.51,-6650.25 4485.69,-6654.21 4490.3,-6659.47"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn double(&amp;self) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.as_projective().double().as_extended() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4350,-6870 4286,-6870 4286,-6834 4350,-6834 4350,-6870"/>
<text text-anchor="middle" x="4318" y="-6848.3" font-family="Helvetica,sans-Serif" font-size="14.00">double</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4324.43,-6833.98C4340.09,-6785.59 4390.49,-6653.06 4486,-6602 4651.8,-6513.37 4726.18,-6558.19 4909,-6602 4916.07,-6603.69 4923.25,-6606.38 4930.05,-6609.47"/>
<polygon fill="gray" stroke="gray" points="4928.52,-6612.62 4939.04,-6613.87 4931.6,-6606.33 4928.52,-6612.62"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;pub fn is_small_order(&amp;self) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.mul_by_cofactor().is_identity() &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4375.5,-7032 4260.5,-7032 4260.5,-6996 4375.5,-6996 4375.5,-7032"/>
<text text-anchor="middle" x="4318" y="-7010.3" font-family="Helvetica,sans-Serif" font-size="14.00">is_small_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;pub fn mul_by_cofactor(&amp;self) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.mul_by_pow_2(3) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4657.5,-7032 4527.5,-7032 4527.5,-6996 4657.5,-6996 4657.5,-7032"/>
<text text-anchor="middle" x="4592.5" y="-7010.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_by_cofactor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4375.79,-7014C4416.75,-7014 4472.42,-7014 4516.95,-7014"/>
<polygon fill="gray" stroke="gray" points="4517.14,-7017.5 4527.14,-7014 4517.14,-7010.5 4517.14,-7017.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4618.7,-6995.73C4659.14,-6966.42 4738.52,-6908.89 4783.62,-6876.2"/>
<polygon fill="gray" stroke="gray" points="4785.85,-6878.9 4791.89,-6870.2 4781.74,-6873.24 4785.85,-6878.9"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_pow_2().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 backend/serial/curve_models/impl#[ProjectivePoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4831.19,-6834C4857.39,-6795.32 4919.14,-6704.14 4949.92,-6658.7"/>
<polygon fill="gray" stroke="gray" points="4952.93,-6660.49 4955.64,-6650.25 4947.13,-6656.57 4952.93,-6660.49"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;fn multiscalar_mul&lt;I, J&gt;(scalars: I, points: J) &#45;&gt; RistrettoPoint &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;I::Item: Borrow&lt;Scalar&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J: IntoIterator, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;J::Item: Borrow&lt;RistrettoPoin...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4054,-6978 3928,-6978 3928,-6942 4054,-6942 4054,-6978"/>
<text text-anchor="middle" x="3991" y="-6956.3" font-family="Helvetica,sans-Serif" font-size="14.00">multiscalar_mul</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4054.28,-6960C4108.7,-6960 4187.73,-6960 4244.88,-6960"/>
<polygon fill="gray" stroke="gray" points="4244.93,-6963.5 4254.93,-6960 4244.93,-6956.5 4244.93,-6963.5"/>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 window/impl#[`NafLookupTable5&lt;ProjectiveNielsPoint&gt;`][`From&lt;&amp;EdwardsPoint&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]double().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M4018.16,-3216.72C4052.98,-3219.26 4113.47,-3229.47 4142,-3269 4165.64,-3301.76 4168.22,-4682.64 4170,-4723 4207.99,-5584 4298.31,-6638.12 4314.5,-6823.51"/>
<polygon fill="gray" stroke="gray" points="4311.02,-6823.89 4315.37,-6833.54 4317.99,-6823.28 4311.02,-6823.89"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;fn recompute_R&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: Option&lt;&amp;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;InternalSignature, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;M: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; CompressedEdwardsY &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;O...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="4044.5,-3454 3937.5,-3454 3937.5,-3418 4044.5,-3418 4044.5,-3454"/>
<text text-anchor="middle" x="3991" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">recompute_R</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3992.29,-3454.16C3996.63,-3716.78 4049.14,-6741.31 4170,-6879 4170.53,-6879.6 4171.07,-6880.2 4171.61,-6880.78"/>
<polygon fill="gray" stroke="gray" points="4169.45,-6883.55 4179.17,-6887.77 4174.21,-6878.41 4169.45,-6883.55"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<g id="a_node16"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn raw_verify&lt;CtxDigest&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;ed25519::Signature, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), SignatureError&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;CtxDigest: Digest&lt;OutputSi...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3701.5,-3454 3613.5,-3454 3613.5,-3418 3701.5,-3418 3701.5,-3454"/>
<text text-anchor="middle" x="3657.5" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">raw_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]recompute_R().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3701.84,-3436C3759.31,-3436 3861.15,-3436 3927.09,-3436"/>
<polygon fill="gray" stroke="gray" points="3927.35,-3439.5 3937.35,-3436 3927.35,-3432.5 3927.35,-3439.5"/>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<g id="a_node17"><a xlink:title=" &#160;&#160;&#160;fn verify(&amp;self, message: &amp;[u8], signature: &amp;ed25519::Signature) &#45;&gt; Result&lt;(), SignatureError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.raw_verify::&lt;Sha512&gt;(message, signature) &#160;&#160;&#160;&#160;}">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="3439,-3454 3383,-3454 3383,-3418 3439,-3418 3439,-3454"/>
<text text-anchor="middle" x="3411" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey]raw_verify().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M3439.1,-3436C3478.53,-3436 3552.53,-3436 3603.14,-3436"/>
<polygon fill="gray" stroke="gray" points="3603.25,-3439.5 3613.25,-3436 3603.25,-3432.5 3603.25,-3439.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().</title>
<g id="a_node18"><a xlink:title="async fn KeyTransparency_Search( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedChatConnec...">
<polygon fill="white" stroke="black" points="252.5,-3632 64.5,-3632 64.5,-3596 252.5,-3596 252.5,-3632"/>
<text text-anchor="middle" x="158.5" y="-3610.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<g id="a_node99"><a xlink:title=" &#160;&#160;&#160;async fn search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_identity_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;(E164, Vec&lt;u8&gt;)&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;stored_acco...">
<polygon fill="white" stroke="black" points="515,-3387 453,-3387 453,-3351 515,-3351 515,-3387"/>
<text text-anchor="middle" x="484" y="-3365.3" font-family="Helvetica,sans-Serif" font-size="14.00">search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M252.54,-3613.49C273.78,-3608.88 294.37,-3600.04 309,-3584 365.62,-3521.91 271.63,-3457.39 329,-3396 357.59,-3365.41 407.65,-3361.88 442.92,-3363.91"/>
<polygon fill="blue" stroke="blue" points="442.66,-3367.4 452.9,-3364.65 443.18,-3360.42 442.66,-3367.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().</title>
<g id="a_node19"><a xlink:title="async fn KeyTransparency_Distinguished( &#160;&#160;&#160;&#160;// TODO: it is currently possible to pass an env that does not match chat &#160;&#160;&#160;&#160;environment: AsType&lt;Environment, u8&gt;, &#160;&#160;&#160;&#160;chat_connection: &amp;UnauthenticatedCha...">
<polygon fill="white" stroke="black" points="276.5,-3686 40.5,-3686 40.5,-3650 276.5,-3650 276.5,-3686"/>
<text text-anchor="middle" x="158.5" y="-3664.3" font-family="Helvetica,sans-Serif" font-size="14.00">KeyTransparency_Distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;async fn distinguished( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished: Option&lt;LastTreeHead&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;SearchStateUpdate, RequestError&lt;Error&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ChatDistinguishedResponse { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="539,-3495 429,-3495 429,-3459 539,-3459 539,-3495"/>
<text text-anchor="middle" x="484" y="-3473.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 net/keytrans/KeyTransparency_Distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M276.73,-3653.64C287.93,-3650.26 298.87,-3646.11 309,-3641 375.39,-3607.5 434.07,-3540.58 463.32,-3503.42"/>
<polygon fill="blue" stroke="blue" points="466.42,-3505.13 469.77,-3495.08 460.88,-3500.84 466.42,-3505.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node20"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="2259.5,-459 1985.5,-459 1985.5,-423 2259.5,-423 2259.5,-459"/>
<text text-anchor="middle" x="2122.5" y="-437.3" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node134"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="2717,-2195 2539,-2195 2539,-2159 2717,-2159 2717,-2195"/>
<text text-anchor="middle" x="2628" y="-2173.3" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2259.75,-438.02C2303.53,-444.38 2348.12,-459.98 2377,-494 2393.66,-513.63 2394.05,-931.42 2397,-957 2452.57,-1439.09 2588.3,-2016.88 2620.21,-2149.13"/>
<polygon fill="blue" stroke="blue" points="2616.81,-2149.98 2622.57,-2158.88 2623.62,-2148.34 2616.81,-2149.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().</title>
<g id="a_node21"><a xlink:title="fn SenderCertificate_Validate( &#160;&#160;&#160;&#160;cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;key: &amp;PublicKey, &#160;&#160;&#160;&#160;time: Timestamp, ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;cert.validate(key, time) }">
<polygon fill="white" stroke="black" points="2222,-243 2023,-243 2023,-207 2222,-207 2222,-243"/>
<text text-anchor="middle" x="2122.5" y="-221.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_Validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey, validation_time: Timestamp) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if !self.signer.validate(trust_root)? { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; sender certi...">
<polygon fill="white" stroke="black" points="3015,-786 2944,-786 2944,-750 3015,-750 3015,-786"/>
<text text-anchor="middle" x="2979.5" y="-764.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_Validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2222.27,-210.74C2273.98,-208.87 2335.09,-216.23 2377,-252 2402.91,-274.12 2377.98,-297.74 2397,-326 2541.65,-540.92 2825.76,-694.3 2934.62,-747.49"/>
<polygon fill="blue" stroke="blue" points="2933.16,-750.68 2943.69,-751.89 2936.21,-744.38 2933.16,-750.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().</title>
<g id="a_node22"><a xlink:title="fn SenderKeyMessage_VerifySignature(skm: &amp;SenderKeyMessage, pubkey: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;skm.verify_signature(pubkey) }">
<polygon fill="white" stroke="black" points="2254.5,-351 1990.5,-351 1990.5,-315 2254.5,-315 2254.5,-351"/>
<text text-anchor="middle" x="2122.5" y="-329.3" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, signature_key: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid = signature_key.verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.serialized[..self.serialized.len() &#45; Self::SIGNATU...">
<polygon fill="white" stroke="black" points="3043.5,-922 2915.5,-922 2915.5,-886 3043.5,-886 3043.5,-922"/>
<text text-anchor="middle" x="2979.5" y="-900.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_VerifySignature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2230.41,-314.99C2281.99,-312.79 2340.45,-321.01 2377,-360 2413.81,-399.27 2359.39,-805.5 2397,-844 2432.94,-880.8 2808.18,-866.04 2859,-874 2874.26,-876.39 2890.41,-879.82 2905.74,-883.51"/>
<polygon fill="blue" stroke="blue" points="2905.13,-886.96 2915.68,-885.96 2906.81,-880.17 2905.13,-886.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().</title>
<g id="a_node23"><a xlink:title="async fn GroupCipher_DecryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;group_decrypt(message, store, sender).await }">
<polygon fill="white" stroke="black" points="2236,-405 2009,-405 2009,-369 2236,-369 2236,-405"/>
<text text-anchor="middle" x="2122.5" y="-383.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<g id="a_node126"><a xlink:title="pub async fn group_decrypt( &#160;&#160;&#160;&#160;skm_bytes: &amp;[u8], &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let skm = SenderKeyMessage::try_from(skm_bytes...">
<polygon fill="white" stroke="black" points="2686.5,-922 2569.5,-922 2569.5,-886 2686.5,-886 2686.5,-922"/>
<text text-anchor="middle" x="2628" y="-900.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2231.33,-368.99C2282.66,-366.94 2340.64,-375.29 2377,-414 2411.88,-451.13 2362.73,-834.32 2397,-872 2436.86,-915.83 2506.75,-919.88 2559.06,-915.38"/>
<polygon fill="blue" stroke="blue" points="2559.66,-918.84 2569.27,-914.38 2558.97,-911.88 2559.66,-918.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node24"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="2240,-297 2005,-297 2005,-261 2240,-261 2240,-297"/>
<text text-anchor="middle" x="2122.5" y="-275.3" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node131"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="2716,-809 2540,-809 2540,-773 2716,-773 2716,-809"/>
<text text-anchor="middle" x="2628" y="-787.3" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2231.33,-260.99C2282.66,-258.94 2340.64,-267.29 2377,-306 2411.88,-343.13 2362.32,-726.69 2397,-764 2430.02,-799.53 2483,-807.57 2529.79,-806.14"/>
<polygon fill="blue" stroke="blue" points="2530.15,-809.62 2539.98,-805.67 2529.84,-802.63 2530.15,-809.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().</title>
<g id="a_node25"><a xlink:title="fn IdentityKey_VerifyAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;let identity = IdentityKey::new(*public_key); &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2251,-135 1994,-135 1994,-99 2251,-99 2251,-135"/>
<text text-anchor="middle" x="2122.5" y="-113.3" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKey_VerifyAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<g id="a_node127"><a xlink:title=" &#160;&#160;&#160;pub fn verify_alternate_identity(&amp;self, other: &amp;IdentityKey, signature: &amp;[u8]) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.public_key.verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;[ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;A...">
<polygon fill="white" stroke="black" points="2719.5,-52 2536.5,-52 2536.5,-16 2719.5,-16 2719.5,-52"/>
<text text-anchor="middle" x="2628" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKey_VerifyAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2251.16,-104.19C2291.52,-99.53 2336.22,-93.72 2377,-87 2431.77,-77.97 2492.71,-65.11 2540.71,-54.32"/>
<polygon fill="blue" stroke="blue" points="2541.77,-57.67 2550.75,-52.05 2540.22,-50.84 2541.77,-57.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().</title>
<g id="a_node26"><a xlink:title="fn ECPublicKey_Verify(key: &amp;PublicKey, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;key.verify_signature(message, signature) }">
<polygon fill="white" stroke="black" points="2196,-189 2049,-189 2049,-153 2196,-153 2196,-189"/>
<text text-anchor="middle" x="2122.5" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">ECPublicKey_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<g id="a_node64"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature(&amp;self, message: &amp;[u8], signature: &amp;[u8]) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.verify_signature_for_multipart_message(&amp;[message], signature) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3475,-1093 3347,-1093 3347,-1057 3475,-1057 3475,-1093"/>
<text text-anchor="middle" x="3411" y="-1071.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPublicKey_Verify().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2196.12,-173.68C2333.12,-181.37 2635.97,-211.12 2859,-326 3095,-447.56 3177.82,-482.19 3319,-707 3389.31,-818.96 3405.31,-981.8 3408.94,-1046.74"/>
<polygon fill="blue" stroke="blue" points="3405.46,-1047.18 3409.45,-1056.99 3412.45,-1046.83 3405.46,-1047.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node27"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="2694.5,-7837 2561.5,-7837 2561.5,-7801 2694.5,-7801 2694.5,-7837"/>
<text text-anchor="middle" x="2628" y="-7815.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="3028.5,-7974 2930.5,-7974 2930.5,-7938 3028.5,-7938 3028.5,-7974"/>
<text text-anchor="middle" x="2979.5" y="-7952.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2694.59,-7816.12C2742.25,-7816.5 2807.21,-7822.22 2859,-7846 2900.39,-7865 2937.12,-7903.82 2958.6,-7929.88"/>
<polygon fill="blue" stroke="blue" points="2956.02,-7932.26 2965.02,-7937.85 2961.47,-7927.87 2956.02,-7932.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().</title>
<g id="a_node28"><a xlink:title="pub fn Username_Proof(username: String, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(&amp;username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2692.5,-7891 2563.5,-7891 2563.5,-7855 2692.5,-7855 2692.5,-7891"/>
<text text-anchor="middle" x="2628" y="-7869.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<g id="a_node184"><a xlink:title=" &#160;&#160;&#160;pub fn proof(&amp;self, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash = Self::hash_from_scalars(&amp;self.scalars); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let scalar_args = Self::make_scalar_args(&amp;self.sca...">
<polygon fill="white" stroke="black" points="3006.5,-8028 2952.5,-8028 2952.5,-7992 3006.5,-7992 3006.5,-8028"/>
<text text-anchor="middle" x="2979.5" y="-8006.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.62,-7871.72C2743.52,-7874.09 2813.65,-7885.42 2859,-7926 2879.01,-7943.9 2859.34,-7964.72 2879,-7983 2896.04,-7998.85 2921.44,-8005.56 2942.31,-8008.33"/>
<polygon fill="blue" stroke="blue" points="2942.12,-8011.83 2952.44,-8009.43 2942.87,-8004.87 2942.12,-8011.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().</title>
<g id="a_node29"><a xlink:title="fn ServerSecretParams_VerifyProfileKeyCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1723.5,-5682 1296.5,-5682 1296.5,-5646 1723.5,-5646 1723.5,-5682"/>
<text text-anchor="middle" x="1510" y="-5660.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyProfileKeyCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="node242" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<g id="a_node242"><a xlink:title=" &#160;&#160;&#160;pub fn verify_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::AnyProfileKeyCredentialPresenta...">
<polygon fill="white" stroke="black" points="2275,-6292 1970,-6292 1970,-6256 2275,-6256 2275,-6292"/>
<text text-anchor="middle" x="2122.5" y="-6270.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyProfileKeyCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1723.53,-5659.94C1775.81,-5663.59 1822,-5672.43 1840,-5691 1883.04,-5735.42 1825.5,-6202.06 1868,-6247 1891.94,-6272.32 1925.13,-6284.62 1959.62,-6289.51"/>
<polygon fill="blue" stroke="blue" points="1959.52,-6293.02 1969.86,-6290.75 1960.36,-6286.07 1959.52,-6293.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().</title>
<g id="a_node30"><a xlink:title="fn ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ProfileKeyCredential...">
<polygon fill="white" stroke="black" points="1754,-5844 1266,-5844 1266,-5808 1754,-5808 1754,-5844"/>
<text text-anchor="middle" x="1510" y="-5822.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="node248" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<g id="a_node248"><a xlink:title=" &#160;&#160;&#160;pub fn issue_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::profiles::ProfileKeyCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2258.5,-6454 1986.5,-6454 1986.5,-6418 2258.5,-6418 2258.5,-6454"/>
<text text-anchor="middle" x="2122.5" y="-6432.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueExpiringProfileKeyCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1754.32,-5824.83C1793.34,-5829.56 1825.64,-5838.18 1840,-5853 1883.04,-5897.42 1825.5,-6364.06 1868,-6409 1901.5,-6444.43 1953.11,-6454.36 2001.05,-6454.19"/>
<polygon fill="blue" stroke="blue" points="2001.28,-6457.68 2011.21,-6454 2001.15,-6450.68 2001.28,-6457.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().</title>
<g id="a_node31"><a xlink:title="fn ServerPublicParams_VerifySignature( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;notary_signature: &amp;[u8; SIGNATURE_LEN], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1643.5,-5628 1376.5,-5628 1376.5,-5592 1643.5,-5592 1643.5,-5628"/>
<text text-anchor="middle" x="1510" y="-5606.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_VerifySignature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="node240" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<g id="a_node240"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: NotarySignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.sig_public_key.verify(messag...">
<polygon fill="white" stroke="black" points="2186.5,-6238 2058.5,-6238 2058.5,-6202 2186.5,-6202 2186.5,-6238"/>
<text text-anchor="middle" x="2122.5" y="-6216.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_VerifySignature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.54,-5603.78C1722.73,-5603.21 1813.03,-5609.17 1840,-5637 1883.04,-5681.42 1825.5,-6148.06 1868,-6193 1912.97,-6240.55 1990.57,-6242.18 2048.1,-6235.07"/>
<polygon fill="blue" stroke="blue" points="2048.79,-6238.51 2058.23,-6233.7 2047.85,-6231.57 2048.79,-6238.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().</title>
<g id="a_node32"><a xlink:title="fn BackupAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;let presentation = binc...">
<polygon fill="white" stroke="black" points="1661.5,-4764 1358.5,-4764 1358.5,-4728 1661.5,-4728 1661.5,-4764"/>
<text text-anchor="middle" x="1510" y="-4742.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="node221" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<g id="a_node221"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let acceptable_start_tim...">
<polygon fill="white" stroke="black" points="2150.5,-4465 2094.5,-4465 2094.5,-4429 2150.5,-4429 2150.5,-4465"/>
<text text-anchor="middle" x="2122.5" y="-4443.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1590.22,-4764C1665.03,-4775.89 1775.15,-4779.3 1840,-4716 1917.48,-4640.37 1791.09,-4550.21 1868,-4474 1925.15,-4417.37 2028.96,-4427.55 2084.35,-4438.21"/>
<polygon fill="blue" stroke="blue" points="2083.93,-4441.7 2094.43,-4440.26 2085.32,-4434.84 2083.93,-4441.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().</title>
<g id="a_node33"><a xlink:title="fn CreateCallLinkCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8...">
<polygon fill="white" stroke="black" points="1698.5,-5412 1321.5,-5412 1321.5,-5376 1698.5,-5376 1698.5,-5412"/>
<text text-anchor="middle" x="1510" y="-5390.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="node235" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<g id="a_node235"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CreateCal...">
<polygon fill="white" stroke="black" points="2655,-4274 2601,-4274 2601,-4238 2655,-4238 2655,-4274"/>
<text text-anchor="middle" x="2628" y="-4252.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1698.53,-5387.05C1927.43,-5374.1 2294.35,-5337.36 2377,-5234 2410,-5192.73 2361.47,-4322.11 2397,-4283 2445.56,-4229.55 2539.21,-4237.81 2590.77,-4247.5"/>
<polygon fill="blue" stroke="blue" points="2590.3,-4250.98 2600.8,-4249.51 2591.67,-4244.11 2590.3,-4250.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().</title>
<g id="a_node34"><a xlink:title="fn CreateCallLinkCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;()...">
<polygon fill="white" stroke="black" points="1669,-5358 1351,-5358 1351,-5322 1669,-5322 1669,-5358"/>
<text text-anchor="middle" x="1510" y="-5336.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="node232" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<g id="a_node232"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; ...">
<polygon fill="white" stroke="black" points="2656,-4382 2600,-4382 2600,-4346 2656,-4346 2656,-4382"/>
<text text-anchor="middle" x="2628" y="-4360.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1669.35,-5354.35C1892.53,-5370.71 2282.97,-5383.8 2377,-5286 2410.47,-5251.19 2366.5,-4454.44 2397,-4417 2443.37,-4360.09 2537.48,-4356.87 2589.81,-4360.08"/>
<polygon fill="blue" stroke="blue" points="2589.77,-4363.58 2600,-4360.81 2590.27,-4356.6 2589.77,-4363.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().</title>
<g id="a_node35"><a xlink:title="fn ServerPublicParams_ReceiveReceiptCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ReceiptCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;ReceiptCredent...">
<polygon fill="white" stroke="black" points="1678,-5952 1342,-5952 1342,-5916 1678,-5916 1678,-5952"/>
<text text-anchor="middle" x="1510" y="-5930.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveReceiptCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="node252" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<g id="a_node252"><a xlink:title=" &#160;&#160;&#160;pub fn receive_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::receipts::ReceiptCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::receipts::ReceiptCredentialResponse, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;api...">
<polygon fill="white" stroke="black" points="2220,-6562 2025,-6562 2025,-6526 2220,-6526 2220,-6562"/>
<text text-anchor="middle" x="2122.5" y="-6540.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveReceiptCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1678.26,-5927.98C1747.45,-5929.38 1816.92,-5937.18 1840,-5961 1883.04,-6005.42 1825.5,-6472.06 1868,-6517 1904.71,-6555.81 1963.15,-6564.03 2014.68,-6561.87"/>
<polygon fill="blue" stroke="blue" points="2015.09,-6565.35 2024.89,-6561.31 2014.71,-6558.36 2015.09,-6565.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().</title>
<g id="a_node36"><a xlink:title="fn CallLinkAuthCredentialResponse_IssueDeterministic( &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;let params = ...">
<polygon fill="white" stroke="black" points="1698,-5088 1322,-5088 1322,-5052 1698,-5052 1698,-5088"/>
<text text-anchor="middle" x="1510" y="-5066.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="node228" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<g id="a_node228"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; CallLin...">
<polygon fill="white" stroke="black" points="2692,-3676 2564,-3676 2564,-3640 2692,-3640 2692,-3676"/>
<text text-anchor="middle" x="2628" y="-3654.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1698.13,-5076.37C1945.54,-5083.84 2353.24,-5092.45 2377,-5069 2431.73,-5014.99 2345.48,-3742.09 2397,-3685 2435.32,-3642.54 2502.08,-3638.93 2553.84,-3644.11"/>
<polygon fill="blue" stroke="blue" points="2553.65,-3647.61 2563.98,-3645.25 2554.43,-3640.65 2553.65,-3647.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().</title>
<g id="a_node37"><a xlink:title="fn ServerSecretParams_IssueReceiptCredentialDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;request: Serialized&lt;ReceiptCredentialRequest&gt;, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1716.5,-6006 1303.5,-6006 1303.5,-5970 1716.5,-5970 1716.5,-6006"/>
<text text-anchor="middle" x="1510" y="-5984.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueReceiptCredentialDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="node250" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<g id="a_node250"><a xlink:title=" &#160;&#160;&#160;pub fn issue_receipt_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;api::receipts::ReceiptCredentialRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_expiration_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2213.5,-6616 2031.5,-6616 2031.5,-6580 2213.5,-6580 2213.5,-6616"/>
<text text-anchor="middle" x="2122.5" y="-6594.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receipt_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueReceiptCredentialDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1716.55,-5983.49C1771.66,-5986.83 1821.21,-5995.6 1840,-6015 1883.04,-6059.42 1825.5,-6526.06 1868,-6571 1906.28,-6611.48 1968.22,-6618.68 2021.28,-6615.54"/>
<polygon fill="blue" stroke="blue" points="2021.7,-6619.02 2031.42,-6614.81 2021.19,-6612.03 2021.7,-6619.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().</title>
<g id="a_node38"><a xlink:title="fn ServerPublicParams_CreateReceiptCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;receipt_credential: Serialized&lt;Receipt...">
<polygon fill="white" stroke="black" points="1763,-6114 1257,-6114 1257,-6078 1763,-6078 1763,-6114"/>
<text text-anchor="middle" x="1510" y="-6092.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateReceiptCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="node246" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<g id="a_node246"><a xlink:title=" &#160;&#160;&#160;pub fn create_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential: &amp;api::receipts::ReceiptCredential, &#160;&#160;&#160;&#160;) &#45;&gt; api::receipts::ReceiptCre...">
<polygon fill="white" stroke="black" points="2263.5,-6724 1981.5,-6724 1981.5,-6688 2263.5,-6688 2263.5,-6724"/>
<text text-anchor="middle" x="2122.5" y="-6702.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateReceiptCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1763.14,-6095.98C1798.17,-6100.92 1826.74,-6109.31 1840,-6123 1883.04,-6167.42 1825.5,-6634.06 1868,-6679 1894.59,-6707.12 1932.59,-6719.18 1971.1,-6722.87"/>
<polygon fill="blue" stroke="blue" points="1971.19,-6726.39 1981.43,-6723.66 1971.73,-6719.41 1971.19,-6726.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().</title>
<g id="a_node39"><a xlink:title="fn CallLinkAuthCredentialPresentation_Verify( &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;(), ZkGroupVerificationF...">
<polygon fill="white" stroke="black" points="1663,-5250 1357,-5250 1357,-5214 1663,-5214 1663,-5250"/>
<text text-anchor="middle" x="1510" y="-5228.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialPresentation_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="node229" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<g id="a_node229"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;current_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerifi...">
<polygon fill="white" stroke="black" points="2656,-3838 2600,-3838 2600,-3802 2656,-3802 2656,-3838"/>
<text text-anchor="middle" x="2628" y="-3816.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialPresentation_Verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1663.42,-5228.88C1905.38,-5223.18 2352.71,-5209.28 2377,-5184 2427.46,-5131.47 2351.21,-3929.65 2397,-3873 2443.15,-3815.91 2537.35,-3812.77 2589.75,-3816.03"/>
<polygon fill="blue" stroke="blue" points="2589.72,-3819.53 2599.95,-3816.78 2590.23,-3812.55 2589.72,-3819.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().</title>
<g id="a_node40"><a xlink:title="fn BackupAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1670.5,-4818 1349.5,-4818 1349.5,-4782 1670.5,-4782 1670.5,-4818"/>
<text text-anchor="middle" x="1510" y="-4796.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="node227" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<g id="a_node227"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; BackupAuthCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BackupAuthCredentialPrese...">
<polygon fill="white" stroke="black" points="2157,-4519 2088,-4519 2088,-4483 2157,-4483 2157,-4519"/>
<text text-anchor="middle" x="2122.5" y="-4497.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.22,-4818C1659.98,-4831.29 1773.52,-4837.39 1840,-4773 1918.72,-4696.75 1790.21,-4605.2 1868,-4528 1922.86,-4473.56 2020.84,-4480.83 2077.58,-4490.95"/>
<polygon fill="blue" stroke="blue" points="2077.2,-4494.44 2087.67,-4492.86 2078.5,-4487.56 2077.2,-4494.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node41"><a xlink:title="fn BackupAuthCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGro...">
<polygon fill="white" stroke="black" points="1714,-5466 1306,-5466 1306,-5430 1714,-5430 1714,-5466"/>
<text text-anchor="middle" x="1510" y="-5444.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="node219" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<g id="a_node219"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: BackupAuthCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;BackupAuthCre...">
<polygon fill="white" stroke="black" points="2661,-4573 2595,-4573 2595,-4537 2661,-4537 2661,-4573"/>
<text text-anchor="middle" x="2628" y="-4551.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1714.21,-5465.91C1941.32,-5480.94 2288.84,-5487.34 2377,-5396 2408.42,-5363.45 2366.52,-4615.43 2397,-4582 2443.85,-4530.61 2532.39,-4536.34 2584.9,-4545.46"/>
<polygon fill="blue" stroke="blue" points="2584.42,-4548.93 2594.89,-4547.31 2585.7,-4542.05 2584.42,-4548.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node42"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="1767,-6330 1253,-6330 1253,-6294 1767,-6294 1767,-6330"/>
<text text-anchor="middle" x="1510" y="-6308.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node237" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node237"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="2215,-7999 2030,-7999 2030,-7963 2215,-7963 2215,-7999"/>
<text text-anchor="middle" x="2122.5" y="-7977.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1767.25,-6316.03C1795.01,-6326.59 1820.29,-6342.27 1840,-6365 1897.84,-6431.71 1808.39,-7888.87 1868,-7954 1905.34,-7994.79 1966.61,-8002.2 2019.57,-7999.09"/>
<polygon fill="blue" stroke="blue" points="2019.97,-8002.57 2029.7,-7998.36 2019.47,-7995.59 2019.97,-8002.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().</title>
<g id="a_node43"><a xlink:title="fn ServerSecretParams_VerifyReceiptCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;presentation: Serialized&lt;ReceiptCredentialPresentation&gt;, ) &#45;&gt; Result&lt;(), ZkGroupVerificati...">
<polygon fill="white" stroke="black" points="1715,-5790 1305,-5790 1305,-5754 1715,-5754 1715,-5790"/>
<text text-anchor="middle" x="1510" y="-5768.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyReceiptCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="node251" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<g id="a_node251"><a xlink:title=" &#160;&#160;&#160;pub fn verify_receipt_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::receipts::ReceiptCredentialPresentation, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;present...">
<polygon fill="white" stroke="black" points="2261.5,-6400 1983.5,-6400 1983.5,-6364 2261.5,-6364 2261.5,-6400"/>
<text text-anchor="middle" x="2122.5" y="-6378.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_receipt_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyReceiptCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1715.23,-5767.41C1770.87,-5770.69 1821.06,-5779.45 1840,-5799 1883.04,-5843.42 1825.5,-6310.06 1868,-6355 1901.5,-6390.43 1953.11,-6400.36 2001.05,-6400.19"/>
<polygon fill="blue" stroke="blue" points="2001.28,-6403.68 2011.21,-6400 2001.15,-6396.68 2001.28,-6403.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().</title>
<g id="a_node44"><a xlink:title="fn BackupAuthCredentialRequest_IssueDeterministic( &#160;&#160;&#160;&#160;request_bytes: &amp;[u8], &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;backup_level: AsType&lt;BackupLevel, u8&gt;, &#160;&#160;&#160;&#160;credential_type: AsType&lt;BackupCredentialType...">
<polygon fill="white" stroke="black" points="1691,-4926 1329,-4926 1329,-4890 1691,-4890 1691,-4926"/>
<text text-anchor="middle" x="1510" y="-4904.3" font-family="Helvetica,sans-Serif" font-size="14.00">BackupAuthCredentialRequest_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="node222" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<g id="a_node222"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;backup_level: BackupLevel, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_type: BackupCredentialType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerSecretParams, &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2655,-4627 2601,-4627 2601,-4591 2655,-4591 2655,-4627"/>
<text text-anchor="middle" x="2628" y="-4605.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/BackupAuthCredentialRequest_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1691.01,-4915.81C1871.61,-4917.1 2154.19,-4901.01 2377,-4806 2472.66,-4765.21 2562.79,-4677.92 2603.81,-4634.55"/>
<polygon fill="blue" stroke="blue" points="2606.38,-4636.93 2610.66,-4627.23 2601.27,-4632.14 2606.38,-4636.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().</title>
<g id="a_node45"><a xlink:title="fn ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serial...">
<polygon fill="white" stroke="black" points="1800,-5736 1220,-5736 1220,-5700 1800,-5700 1800,-5736"/>
<text text-anchor="middle" x="1510" y="-5714.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="node243" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<g id="a_node243"><a xlink:title=" &#160;&#160;&#160;pub fn create_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: api::groups::GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiring_profil...">
<polygon fill="white" stroke="black" points="2309,-6346 1936,-6346 1936,-6310 2309,-6310 2309,-6346"/>
<text text-anchor="middle" x="2122.5" y="-6324.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateExpiringProfileKeyCredentialPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1800.09,-5725.29C1817.83,-5730.13 1831.82,-5736.56 1840,-5745 1883.04,-5789.42 1825.5,-6256.06 1868,-6301 1884.03,-6317.95 1904.2,-6329.06 1926.13,-6336.02"/>
<polygon fill="blue" stroke="blue" points="1925.4,-6339.46 1935.97,-6338.85 1927.33,-6332.73 1925.4,-6339.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().</title>
<g id="a_node46"><a xlink:title="fn ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time:...">
<polygon fill="white" stroke="black" points="1746.5,-6168 1273.5,-6168 1273.5,-6132 1746.5,-6132 1746.5,-6168"/>
<text text-anchor="middle" x="1510" y="-6146.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="node214" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<g id="a_node214"><a xlink:title=" &#160;&#160;&#160;pub fn issue_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;S...">
<polygon fill="white" stroke="black" points="2186.5,-6807 2058.5,-6807 2058.5,-6771 2186.5,-6771 2186.5,-6807"/>
<text text-anchor="middle" x="2122.5" y="-6785.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_IssueAuthCredentialWithPniZkcDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1746.53,-6147.92C1789.02,-6152.43 1824.71,-6161.19 1840,-6177 1885,-6223.55 1823.84,-6711.65 1868,-6759 1912.77,-6807 1990.58,-6809.5 2048.23,-6803.08"/>
<polygon fill="blue" stroke="blue" points="2048.88,-6806.53 2058.38,-6801.84 2048.03,-6799.58 2048.88,-6806.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node47"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="1771,-6222 1249,-6222 1249,-6186 1771,-6186 1771,-6222"/>
<text text-anchor="middle" x="1510" y="-6200.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node238" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node238"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="2216,-7891 2029,-7891 2029,-7855 2216,-7855 2216,-7891"/>
<text text-anchor="middle" x="2122.5" y="-7869.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1771.29,-6204.81C1802.7,-6209.91 1827.95,-6218.14 1840,-6231 1901.37,-6296.47 1807.43,-7779.79 1868,-7846 1905.12,-7886.57 1965.92,-7894.12 2018.67,-7891.15"/>
<polygon fill="blue" stroke="blue" points="2019.03,-7894.63 2028.76,-7890.45 2018.54,-7887.65 2019.03,-7894.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().</title>
<g id="a_node48"><a xlink:title="fn ServerPublicParams_ReceiveExpiringProfileKeyCredential( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;request_context: Serialized&lt;ProfileKeyCredentialRequestContext&gt;, &#160;&#160;&#160;&#160;response: Serialized&lt;...">
<polygon fill="white" stroke="black" points="1715,-5898 1305,-5898 1305,-5862 1715,-5862 1715,-5898"/>
<text text-anchor="middle" x="1510" y="-5876.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveExpiringProfileKeyCredential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="node241" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<g id="a_node241"><a xlink:title=" &#160;&#160;&#160;pub fn receive_expiring_profile_key_credential( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: &amp;api::profiles::ProfileKeyCredentialRequestContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;api::profiles::ExpiringProfileKeyCredentialRe...">
<polygon fill="white" stroke="black" points="2265.5,-6508 1979.5,-6508 1979.5,-6472 2265.5,-6472 2265.5,-6508"/>
<text text-anchor="middle" x="2122.5" y="-6486.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_expiring_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveExpiringProfileKeyCredential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1715.23,-5875.41C1770.87,-5878.69 1821.06,-5887.45 1840,-5907 1883.04,-5951.42 1825.5,-6418.06 1868,-6463 1894.17,-6490.67 1931.4,-6502.79 1969.28,-6506.69"/>
<polygon fill="blue" stroke="blue" points="1969.19,-6510.19 1979.45,-6507.54 1969.78,-6503.22 1969.19,-6510.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().</title>
<g id="a_node49"><a xlink:title="fn CallLinkAuthCredentialResponse_Receive( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1660.5,-5196 1359.5,-5196 1359.5,-5160 1660.5,-5160 1660.5,-5196"/>
<text text-anchor="middle" x="1510" y="-5174.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredentialResponse_Receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="node231" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<g id="a_node231"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CallLinkAuthCredential, ZkGroupV...">
<polygon fill="white" stroke="black" points="2661,-3730 2595,-3730 2595,-3694 2661,-3694 2661,-3730"/>
<text text-anchor="middle" x="2628" y="-3708.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredentialResponse_Receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1660.68,-5173.49C1895.79,-5164.84 2329.91,-5141.97 2377,-5090 2427.41,-5034.38 2346.7,-3794.72 2397,-3739 2443.6,-3687.38 2532.23,-3693.19 2584.82,-3702.39"/>
<polygon fill="blue" stroke="blue" points="2584.36,-3705.86 2594.83,-3704.26 2585.64,-3698.98 2584.36,-3705.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().</title>
<g id="a_node50"><a xlink:title="fn GroupSendEndorsementsResponse_IssueDeterministic( &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;key_pair: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;assert!(concatenat...">
<polygon fill="white" stroke="black" points="1708,-6276 1312,-6276 1312,-6240 1708,-6240 1708,-6276"/>
<text text-anchor="middle" x="1510" y="-6254.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_IssueDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="node236" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<g id="a_node236"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;GroupSendDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Note...">
<polygon fill="white" stroke="black" points="2149.5,-7945 2095.5,-7945 2095.5,-7909 2149.5,-7909 2149.5,-7945"/>
<text text-anchor="middle" x="2122.5" y="-7923.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_IssueDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1708.11,-6252.63C1766.73,-6255.53 1820.55,-6264.25 1840,-6285 1901.37,-6350.47 1807.43,-7833.79 1868,-7900 1922.85,-7959.94 2029.39,-7947.8 2085.28,-7936.13"/>
<polygon fill="blue" stroke="blue" points="2086.09,-7939.54 2095.1,-7933.98 2084.59,-7932.7 2086.09,-7939.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().</title>
<g id="a_node51"><a xlink:title="fn CallLinkAuthCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;ra...">
<polygon fill="white" stroke="black" points="1672,-5142 1348,-5142 1348,-5106 1672,-5106 1672,-5142"/>
<text text-anchor="middle" x="1510" y="-5120.3" font-family="Helvetica,sans-Serif" font-size="14.00">CallLinkAuthCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="node230" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<g id="a_node230"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecre...">
<polygon fill="white" stroke="black" points="2662.5,-3784 2593.5,-3784 2593.5,-3748 2662.5,-3748 2662.5,-3784"/>
<text text-anchor="middle" x="2628" y="-3762.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CallLinkAuthCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1672.26,-5130.7C1909.24,-5138.81 2328.86,-5145.91 2377,-5097 2427.82,-5045.36 2348.43,-3846.77 2397,-3793 2443.11,-3741.95 2530.32,-3747.08 2583.1,-3756.09"/>
<polygon fill="blue" stroke="blue" points="2582.71,-3759.58 2593.17,-3757.93 2583.96,-3752.69 2582.71,-3759.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().</title>
<g id="a_node52"><a xlink:title="fn CreateCallLinkCredentialRequestContext_ReceiveResponse( &#160;&#160;&#160;&#160;context_bytes: &amp;[u8], &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;params_bytes: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="1721.5,-4872 1298.5,-4872 1298.5,-4836 1721.5,-4836 1721.5,-4872"/>
<text text-anchor="middle" x="1510" y="-4850.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredentialRequestContext_ReceiveResponse</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="node233" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<g id="a_node233"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: CreateCallLinkCredentialResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;CreateCallLinkCr...">
<polygon fill="white" stroke="black" points="2661,-4220 2595,-4220 2595,-4184 2661,-4184 2661,-4220"/>
<text text-anchor="middle" x="2628" y="-4198.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredentialRequestContext_ReceiveResponse().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1721.56,-4854.34C1761.79,-4849.52 1802.89,-4841.08 1840,-4827 1854.54,-4821.48 1853.73,-4812.19 1868,-4806 2078.76,-4714.58 2225.79,-4888.95 2377,-4716 2412.65,-4675.23 2360.18,-4268.72 2397,-4229 2444.27,-4178 2532.66,-4183.59 2585.03,-4192.58"/>
<polygon fill="blue" stroke="blue" points="2584.53,-4196.05 2595,-4194.41 2585.79,-4189.16 2584.53,-4196.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().</title>
<g id="a_node53"><a xlink:title="fn ServerSecretParams_VerifyAuthCredentialPresentation( &#160;&#160;&#160;&#160;server_secret_params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;group_public_params: Serialized&lt;GroupPublicParams&gt;, &#160;&#160;&#160;&#160;presentation_bytes: &amp;[u8], &#160;&#160;&#160;&#160;curren...">
<polygon fill="white" stroke="black" points="1706,-5520 1314,-5520 1314,-5484 1706,-5484 1706,-5520"/>
<text text-anchor="middle" x="1510" y="-5498.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_VerifyAuthCredentialPresentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="node247" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<g id="a_node247"><a xlink:title=" &#160;&#160;&#160;pub fn verify_auth_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::auth::AnyAuthCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cur...">
<polygon fill="white" stroke="black" points="2254,-6130 1991,-6130 1991,-6094 2254,-6094 2254,-6130"/>
<text text-anchor="middle" x="2122.5" y="-6108.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_auth_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_VerifyAuthCredentialPresentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1638.07,-5483.99C1703.66,-5481.32 1781.88,-5489.11 1840,-5529 2040.31,-5666.46 2103.04,-5987.41 2117.72,-6084.01"/>
<polygon fill="blue" stroke="blue" points="2114.26,-6084.52 2119.17,-6093.9 2121.18,-6083.5 2114.26,-6084.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().</title>
<g id="a_node54"><a xlink:title="fn ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;group_secret_params: Serialized&lt;Gr...">
<polygon fill="white" stroke="black" points="1780,-4980 1240,-4980 1240,-4944 1780,-4944 1780,-4980"/>
<text text-anchor="middle" x="1510" y="-4958.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="node207" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<g id="a_node207"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AnyAuthCredentialPresentat...">
<polygon fill="white" stroke="black" points="2157,-4980 2088,-4980 2088,-4944 2157,-4944 2157,-4980"/>
<text text-anchor="middle" x="2122.5" y="-4958.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateAuthCredentialWithPniPresentationDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1780.11,-4962C1894.03,-4962 2014.76,-4962 2077.63,-4962"/>
<polygon fill="blue" stroke="blue" points="2077.95,-4965.5 2087.95,-4962 2077.95,-4958.5 2077.95,-4965.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().</title>
<g id="a_node55"><a xlink:title="fn CreateCallLinkCredential_PresentDeterministic( &#160;&#160;&#160;&#160;credential_bytes: &amp;[u8], &#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;server_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;call_link_params_bytes: &amp;[u8], &#160;&#160;&#160;&#160;randomness: ...">
<polygon fill="white" stroke="black" points="1678,-5304 1342,-5304 1342,-5268 1678,-5268 1678,-5304"/>
<text text-anchor="middle" x="1510" y="-5282.3" font-family="Helvetica,sans-Serif" font-size="14.00">CreateCallLinkCredential_PresentDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="node234" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<g id="a_node234"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;room_id: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_id: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_params: &amp;GenericServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;call_link_params: &amp;CallLinkSecretParams, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2662.5,-4328 2593.5,-4328 2593.5,-4292 2662.5,-4292 2662.5,-4328"/>
<text text-anchor="middle" x="2628" y="-4306.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/CreateCallLinkCredential_PresentDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1678.02,-5281.73C1922.91,-5274.65 2353.16,-5258.76 2377,-5234 2411.58,-5198.1 2363.46,-4373.87 2397,-4337 2443.29,-4286.12 2530.44,-4291.19 2583.16,-4300.15"/>
<polygon fill="blue" stroke="blue" points="2582.75,-4303.63 2593.22,-4301.98 2584.01,-4296.74 2582.75,-4303.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().</title>
<g id="a_node56"><a xlink:title="fn ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId( &#160;&#160;&#160;&#160;params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;auth_credential_with_pni_response_bytes:...">
<polygon fill="white" stroke="black" points="1736,-5034 1284,-5034 1284,-4998 1736,-4998 1736,-5034"/>
<text text-anchor="middle" x="1510" y="-5012.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="node206" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<g id="a_node206"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: crate::Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni, ZkGr...">
<polygon fill="white" stroke="black" points="2155.5,-5034 2089.5,-5034 2089.5,-4998 2155.5,-4998 2155.5,-5034"/>
<text text-anchor="middle" x="2122.5" y="-5012.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_ReceiveAuthCredentialWithPniAsServiceId().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1736.16,-5016C1862.54,-5016 2008.64,-5016 2079.13,-5016"/>
<polygon fill="blue" stroke="blue" points="2079.37,-5019.5 2089.37,-5016 2079.37,-5012.5 2079.37,-5019.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().</title>
<g id="a_node57"><a xlink:title="fn ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic( &#160;&#160;&#160;&#160;server_public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;user_id: Aci, &#160;&#160;&#160;&#160;profile_key: Se...">
<polygon fill="white" stroke="black" points="1783,-6060 1237,-6060 1237,-6024 1783,-6024 1783,-6060"/>
<text text-anchor="middle" x="1510" y="-6038.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="node249" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<g id="a_node249"><a xlink:title=" &#160;&#160;&#160;pub fn create_profile_key_credential_request_context( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: libsignal_core::Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key: api::profiles::ProfileKey, &#160;&#160;&#160;&#160;) &#45;&gt;...">
<polygon fill="white" stroke="black" points="2289,-6670 1956,-6670 1956,-6634 2289,-6634 2289,-6670"/>
<text text-anchor="middle" x="2122.5" y="-6648.3" font-family="Helvetica,sans-Serif" font-size="14.00">create_profile_key_credential_request_context</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerPublicParams_CreateProfileKeyCredentialRequestContextDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1783.24,-6045.36C1808.95,-6050.47 1829.38,-6058.04 1840,-6069 1883.04,-6113.42 1825.5,-6580.06 1868,-6625 1888.7,-6646.88 1916.31,-6659.04 1945.69,-6665.1"/>
<polygon fill="blue" stroke="blue" points="1945.25,-6668.57 1955.71,-6666.92 1946.5,-6661.69 1945.25,-6668.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().</title>
<g id="a_node58"><a xlink:title="fn ServerSecretParams_SignDeterministic( &#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; [u8; SIGNATURE_LEN] { &#160;&#160;&#160;&#160;params.sign(*randomness, message) }">
<polygon fill="white" stroke="black" points="1653,-5574 1367,-5574 1367,-5538 1653,-5538 1653,-5574"/>
<text text-anchor="middle" x="1510" y="-5552.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_SignDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="node244" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<g id="a_node244"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, randomness: RandomnessBytes, message: &amp;[u8]) &#45;&gt; NotarySignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Sign&#39; , &#160;...">
<polygon fill="white" stroke="black" points="2149.5,-6184 2095.5,-6184 2095.5,-6148 2149.5,-6148 2149.5,-6184"/>
<text text-anchor="middle" x="2122.5" y="-6162.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_SignDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1653.25,-5549.74C1729.97,-5549.73 1814.13,-5556.3 1840,-5583 1883.04,-5627.42 1825.5,-6094.06 1868,-6139 1923.71,-6197.91 2029.5,-6186.33 2085.17,-6174.98"/>
<polygon fill="blue" stroke="blue" points="2086.24,-6178.34 2095.28,-6172.81 2084.77,-6171.49 2086.24,-6178.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node59"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="3254,-1279 3165,-1279 3165,-1243 3254,-1243 3254,-1279"/>
<text text-anchor="middle" x="3209.5" y="-1257.3" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3254.1,-1256.71C3275.42,-1252.8 3300.42,-1245.31 3319,-1231 3362.07,-1197.83 3388.54,-1138.03 3401.14,-1102.89"/>
<polygon fill="blue" stroke="blue" points="3404.51,-1103.85 3404.47,-1093.25 3397.9,-1101.56 3404.51,-1103.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node60"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="3017,-1279 2942,-1279 2942,-1243 3017,-1243 3017,-1279"/>
<text text-anchor="middle" x="2979.5" y="-1257.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3017.13,-1261C3054.35,-1261 3112.38,-1261 3154.79,-1261"/>
<polygon fill="blue" stroke="blue" points="3154.94,-1264.5 3164.94,-1261 3154.94,-1257.5 3154.94,-1264.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node61"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="3236.5,-1196 3182.5,-1196 3182.5,-1160 3236.5,-1160 3236.5,-1196"/>
<text text-anchor="middle" x="3209.5" y="-1174.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3236.58,-1173.87C3259.26,-1169.57 3292.55,-1161.53 3319,-1148 3343.39,-1135.52 3367.42,-1115.84 3384.65,-1100.06"/>
<polygon fill="blue" stroke="blue" points="3387.15,-1102.51 3392.07,-1093.13 3382.37,-1097.4 3387.15,-1102.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature_for_multipart_message( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PublicKeyData::DjbPublicKey...">
<polygon fill="white" stroke="black" points="3804,-1103 3511,-1103 3511,-1067 3804,-1067 3804,-1103"/>
<text text-anchor="middle" x="3657.5" y="-1081.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<g id="a_node67"><a xlink:title=" &#160;&#160;&#160;pub fn verify_signature( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public_key: &amp;[u8; PUBLIC_KEY_LENGTH], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: &amp;[u8; SIGNATURE_LENGTH], &#160;&#160;&#160;&#160;) &#45;&gt; bool { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mont_point = Montgom...">
<polygon fill="white" stroke="black" points="4055,-3344 3927,-3344 3927,-3308 4055,-3308 4055,-3344"/>
<text text-anchor="middle" x="3991" y="-3322.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3658.85,-1103.15C3662.79,-1302.77 3701.77,-3085.38 3840,-3269 3858.36,-3293.39 3888.49,-3307.34 3916.94,-3315.33"/>
<polygon fill="blue" stroke="blue" points="3916.36,-3318.79 3926.91,-3317.91 3918.11,-3312.01 3916.36,-3318.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node63"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="3291.5,-1113 3127.5,-1113 3127.5,-1077 3291.5,-1077 3291.5,-1113"/>
<text text-anchor="middle" x="3209.5" y="-1091.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3291.67,-1099.85C3309.87,-1100.74 3329.09,-1101.54 3347,-1102 3403.87,-1103.46 3418.17,-1104.66 3475,-1102 3483.41,-1101.61 3492.03,-1101.11 3500.72,-1100.54"/>
<polygon fill="blue" stroke="blue" points="3501.22,-1104.02 3510.96,-1099.84 3500.74,-1097.03 3501.22,-1104.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3291.64,-1086.87C3306.63,-1085.36 3322.2,-1083.8 3336.93,-1082.33"/>
<polygon fill="blue" stroke="blue" points="3337.38,-1085.8 3346.98,-1081.32 3336.68,-1078.83 3337.38,-1085.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3475.28,-1077.59C3483.4,-1077.92 3491.98,-1078.27 3500.81,-1078.63"/>
<polygon fill="blue" stroke="blue" points="3500.74,-1082.13 3510.88,-1079.04 3501.03,-1075.14 3500.74,-1082.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node65"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3749,-3371 3566,-3371 3566,-3335 3749,-3335 3749,-3371"/>
<text text-anchor="middle" x="3657.5" y="-3349.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3749.08,-3345.62C3801.81,-3341.33 3867.41,-3335.98 3916.84,-3331.96"/>
<polygon fill="blue" stroke="blue" points="3917.14,-3335.45 3926.82,-3331.15 3916.57,-3328.47 3917.14,-3335.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node66"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="3715,-3317 3600,-3317 3600,-3281 3715,-3281 3715,-3317"/>
<text text-anchor="middle" x="3657.5" y="-3295.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3715.11,-3303.61C3770.7,-3308.14 3855.77,-3315.07 3916.55,-3320.02"/>
<polygon fill="blue" stroke="blue" points="3916.59,-3323.53 3926.84,-3320.86 3917.16,-3316.56 3916.59,-3323.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<path fill="none" stroke="blue" d="M4055.01,-3342.76C4086.97,-3354.79 4122.97,-3374.57 4142,-3406 4191.97,-3488.53 4107.95,-6805.12 4170,-6879 4170.52,-6879.61 4171.04,-6880.22 4171.58,-6880.81"/>
<polygon fill="blue" stroke="blue" points="4169.35,-6883.52 4178.98,-6887.93 4174.2,-6878.48 4169.35,-6883.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().</title>
<g id="a_node68"><a xlink:title="criterion_group!(benches, bench_verify_search); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="812,-6932 737,-6932 737,-6896 812,-6896 812,-6932"/>
<text text-anchor="middle" x="774.5" y="-6910.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<g id="a_node69"><a xlink:title="fn bench_verify_search(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;.unwrap(); &#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="1110,-6932 952,-6932 952,-6896 1110,-6896 1110,-6932"/>
<text text-anchor="middle" x="1031" y="-6910.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M812.23,-6914C845.95,-6914 897.24,-6914 941.58,-6914"/>
<polygon fill="blue" stroke="blue" points="941.8,-6917.5 951.8,-6914 941.8,-6910.5 941.8,-6917.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<g id="a_node71"><a xlink:title=" &#160;&#160;&#160;pub fn verify_search( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: SlimSearchRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: FullSearchResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime,...">
<polygon fill="white" stroke="black" points="1564,-3483 1456,-3483 1456,-3447 1564,-3447 1564,-3483"/>
<text text-anchor="middle" x="1510" y="-3461.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1110.03,-6909.84C1126.26,-6905.19 1141.57,-6897.25 1152,-6884 1173.91,-6856.17 1165.35,-4368.79 1172,-4334 1238.59,-3985.68 1438.15,-3596.87 1494.21,-3492.17"/>
<polygon fill="blue" stroke="blue" points="1497.37,-3493.67 1499.03,-3483.21 1491.21,-3490.35 1497.37,-3493.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;fn try_from(public_key: [u8; 32]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match CompressedEdwardsY(public_key).decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Error::InvalidCurvePoint), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(pt) if pt.is_sma...">
<polygon fill="white" stroke="black" points="4028.5,-7448 3953.5,-7448 3953.5,-7412 4028.5,-7412 4028.5,-7448"/>
<text text-anchor="middle" x="3991" y="-7426.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 bench_verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1107.39,-6932.04C1124.86,-6939.87 1141.42,-6951.06 1152,-6967 1188.22,-7021.58 1136.15,-8091.17 1172,-8146 1358.19,-8430.82 1535.55,-8392.44 1868,-8465 2298.31,-8558.92 2436.42,-8589.17 2859,-8465 2966.99,-8433.27 2991.93,-8407.11 3072,-8328 3213.71,-8188 3227.69,-8131.04 3319,-7954 3427.54,-7743.54 3319.55,-7596.36 3511,-7457 3578.78,-7407.66 3836.13,-7419.22 3943.02,-7426.41"/>
<polygon fill="blue" stroke="blue" points="3942.96,-7429.92 3953.18,-7427.11 3943.45,-7422.93 3942.96,-7429.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<g id="a_node70"><a xlink:title=" &#160;&#160;&#160;pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;&#39;a self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: SystemTime, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;M...">
<polygon fill="white" stroke="black" points="1568,-3429 1452,-3429 1452,-3393 1568,-3393 1568,-3429"/>
<text text-anchor="middle" x="1510" y="-3407.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<g id="a_node73"><a xlink:title="pub fn verify_monitor&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;config: &amp;&#39;a PublicConfig, &#160;&#160;&#160;&#160;req: &amp;&#39;a MonitorRequest, &#160;&#160;&#160;&#160;res: &amp;&#39;a MonitorResponse, &#160;&#160;&#160;&#160;context: MonitorContext, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;MonitorStateUpdate&gt; { ...">
<polygon fill="white" stroke="black" points="2686,-3454 2570,-3454 2570,-3418 2686,-3418 2686,-3454"/>
<text text-anchor="middle" x="2628" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1568.05,-3408.66C1706.72,-3403.45 2072.42,-3392.6 2377,-3409 2438.99,-3412.34 2509.25,-3420.3 2559.47,-3426.72"/>
<polygon fill="blue" stroke="blue" points="2559.18,-3430.21 2569.55,-3428.02 2560.08,-3423.27 2559.18,-3430.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<g id="a_node72"><a xlink:title="pub fn verify_search( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;force_monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSt...">
<polygon fill="white" stroke="black" points="2176.5,-3454 2068.5,-3454 2068.5,-3418 2176.5,-3418 2176.5,-3454"/>
<text text-anchor="middle" x="2122.5" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1564.11,-3462.48C1676.3,-3457.15 1937.01,-3444.76 2057.87,-3439.02"/>
<polygon fill="blue" stroke="blue" points="2058.26,-3442.51 2068.08,-3438.54 2057.92,-3435.52 2058.26,-3442.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<g id="a_node75"><a xlink:title="fn verify_search_internal( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;req: SlimSearchRequest, &#160;&#160;&#160;&#160;res: FullSearchResponse, &#160;&#160;&#160;&#160;context: SearchContext, &#160;&#160;&#160;&#160;monitor: bool, &#160;&#160;&#160;&#160;now: SystemTime, ) &#45;&gt; Result&lt;SearchSta...">
<polygon fill="white" stroke="black" points="2711.5,-3508 2544.5,-3508 2544.5,-3472 2711.5,-3472 2711.5,-3508"/>
<text text-anchor="middle" x="2628" y="-3486.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_search_internal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2176.91,-3441.67C2228.22,-3447.11 2307.91,-3455.59 2377,-3463 2428.96,-3468.57 2487,-3474.84 2534.06,-3479.93"/>
<polygon fill="blue" stroke="blue" points="2533.92,-3483.43 2544.24,-3481.03 2534.67,-3476.48 2533.92,-3483.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<g id="a_node78"><a xlink:title="fn verify_full_tree_head( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;fth: &amp;FullTreeHead, &#160;&#160;&#160;&#160;root: [u8; 32], &#160;&#160;&#160;&#160;last_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;&#160;last_distinguished_tree_head: Option&lt;&amp;LastTreeHead&gt;, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3059,-3454 2900,-3454 2900,-3418 3059,-3418 3059,-3454"/>
<text text-anchor="middle" x="2979.5" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_full_tree_head</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2686.32,-3436C2741.56,-3436 2825.93,-3436 2889.84,-3436"/>
<polygon fill="blue" stroke="blue" points="2889.91,-3439.5 2899.91,-3436 2889.91,-3432.5 2889.91,-3439.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<g id="a_node74"><a xlink:title="fn evaluate_vrf_proof( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;vrf_key: &amp;vrf::PublicKey, &#160;&#160;&#160;&#160;search_key: &amp;[u8], ) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;let proof = proof.try_into().map_err(|_| MalformedProof)?; &#160;&#160;&#160;&#160;Ok(vrf_key.proo...">
<polygon fill="white" stroke="black" points="3052,-3508 2907,-3508 2907,-3472 3052,-3472 3052,-3508"/>
<text text-anchor="middle" x="2979.5" y="-3486.3" font-family="Helvetica,sans-Serif" font-size="14.00">evaluate_vrf_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;pub fn proof_to_hash(&amp;self, m: &amp;[u8], proof: &amp;[u8; 80]) &#45;&gt; Result&lt;[u8; 32]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Decode proof into its component parts: gamma, c, and s. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let gamma = CompressedEdwardsY(proof[..32]....">
<polygon fill="white" stroke="black" points="4047.5,-7502 3934.5,-7502 3934.5,-7466 4047.5,-7466 4047.5,-7502"/>
<text text-anchor="middle" x="3991" y="-7480.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3052.3,-3475.13C3128.83,-3463.85 3248.49,-3460.02 3319,-3527 3816.79,-3999.85 3746.17,-5893.59 3812,-6577 3816.69,-6625.69 3808.03,-7419.98 3840,-7457 3860.43,-7480.66 3893.95,-7488.23 3924.13,-7489.53"/>
<polygon fill="blue" stroke="blue" points="3924.14,-7493.03 3934.21,-7489.74 3924.29,-7486.03 3924.14,-7493.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/evaluate_vrf_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.83,-3490C2767.7,-3490 2841.09,-3490 2896.73,-3490"/>
<polygon fill="blue" stroke="blue" points="2896.91,-3493.5 2906.91,-3490 2896.91,-3486.5 2896.91,-3493.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2711.53,-3482.44C2755.48,-3477.88 2810.36,-3471.33 2859,-3463 2870.46,-3461.04 2882.48,-3458.68 2894.3,-3456.19"/>
<polygon fill="blue" stroke="blue" points="2895.12,-3459.59 2904.16,-3454.07 2893.65,-3452.75 2895.12,-3459.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().</title>
<g id="a_node76"><a xlink:title=" &#160;&#160;&#160;fn can_verify_search_response() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sig_key = VerifyingKey::from_bytes(&amp;hex!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; ac0de1fd7f33552bbeb6ebc12b9d4ea10bf5f025c45073d3fb5f5648955a749e&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.unwrap(...">
<polygon fill="white" stroke="black" points="2227,-3508 2018,-3508 2018,-3472 2227,-3472 2227,-3508"/>
<text text-anchor="middle" x="2122.5" y="-3486.3" font-family="Helvetica,sans-Serif" font-size="14.00">can_verify_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_search_internal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2227.22,-3490C2317.49,-3490 2447.15,-3490 2534.09,-3490"/>
<polygon fill="blue" stroke="blue" points="2534.21,-3493.5 2544.21,-3490 2534.21,-3486.5 2534.21,-3493.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/test/can_verify_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2227.01,-3500.89C2278.14,-3506.09 2340.78,-3512.22 2397,-3517 2499.56,-3525.72 2763.99,-3510.42 2859,-3550 3109.63,-3654.42 3184.3,-3716.26 3319,-3952 3907.92,-4982.68 3664.13,-5399.18 3812,-6577 3836.19,-6769.66 3800.53,-6822.88 3840,-7013 3871.61,-7165.26 3946.81,-7337.04 3977.07,-7402.6"/>
<polygon fill="blue" stroke="blue" points="3973.97,-7404.24 3981.36,-7411.84 3980.32,-7401.29 3973.97,-7404.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<g id="a_node77"><a xlink:title="fn verify_tree_head_signature( &#160;&#160;&#160;&#160;config: &amp;PublicConfig, &#160;&#160;&#160;&#160;head: &amp;SingleSignatureTreeHead, &#160;&#160;&#160;&#160;root: &amp;[u8; 32], &#160;&#160;&#160;&#160;verifying_key: &amp;VerifyingKey, ) &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let raw = marshal_tree_head_t...">
<polygon fill="white" stroke="black" points="3311,-3454 3108,-3454 3108,-3418 3311,-3418 3311,-3454"/>
<text text-anchor="middle" x="3209.5" y="-3432.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_tree_head_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().&#45;&gt;rust&#45;analyzer cargo ed25519&#45;dalek 2.1.0 verifying/impl#[VerifyingKey][`Verifier&lt;ed25519::Signature&gt;`]verify().</title>
<path fill="none" stroke="blue" d="M3311.13,-3436C3333.1,-3436 3355.02,-3436 3372.61,-3436"/>
<polygon fill="blue" stroke="blue" points="3372.97,-3439.5 3382.97,-3436 3372.97,-3432.5 3372.97,-3439.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_full_tree_head().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 verify/verify_tree_head_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3059.28,-3436C3071.67,-3436 3084.68,-3436 3097.63,-3436"/>
<polygon fill="blue" stroke="blue" points="3098,-3439.5 3108,-3436 3098,-3432.5 3098,-3439.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn try_and_increment_terminates() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(data: [u8; 34])| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let _ = encode_to_curve_try_and_increment(&amp;data[..32], &amp;data[32..]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="4104.5,-7610 3877.5,-7610 3877.5,-7574 4104.5,-7574 4104.5,-7610"/>
<text text-anchor="middle" x="3991" y="-7588.3" font-family="Helvetica,sans-Serif" font-size="14.00">try_and_increment_terminates</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<g id="a_node83"><a xlink:title="fn encode_to_curve_try_and_increment(salt: &amp;[u8], data: &amp;[u8]) &#45;&gt; EdwardsPoint { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;&#160;for i in 0u8..=u8::MAX { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_ENC...">
<polygon fill="white" stroke="black" points="4452.5,-7542 4183.5,-7542 4183.5,-7506 4452.5,-7506 4452.5,-7542"/>
<text text-anchor="middle" x="4318" y="-7520.3" font-family="Helvetica,sans-Serif" font-size="14.00">encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/try_and_increment_terminates().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4096.23,-7573.96C4111.6,-7571.09 4127.23,-7568.06 4142,-7565 4172.07,-7558.78 4204.88,-7551.28 4233.87,-7544.41"/>
<polygon fill="blue" stroke="blue" points="4235.05,-7547.73 4243.96,-7542.01 4233.42,-7540.92 4235.05,-7547.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;fn test_encode_to_curve_try_and_increment() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let got = encode_to_curve_try_and_increment(&amp;v.pk, v.alpha) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.compress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.0...">
<polygon fill="white" stroke="black" points="4142,-7556 3840,-7556 3840,-7520 4142,-7520 4142,-7556"/>
<text text-anchor="middle" x="3991" y="-7534.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_encode_to_curve_try_and_increment</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4142.13,-7531.53C4152.36,-7531.09 4162.66,-7530.65 4172.85,-7530.21"/>
<polygon fill="blue" stroke="blue" points="4173.17,-7533.7 4183.01,-7529.77 4172.87,-7526.71 4173.17,-7533.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint().</title>
<path fill="none" stroke="blue" d="M4047.59,-7489.57C4080.03,-7489.5 4118.98,-7483.09 4142,-7457 4219.16,-7369.57 4093,-7020.57 4170,-6933 4170.53,-6932.4 4171.07,-6931.8 4171.62,-6931.22"/>
<polygon fill="blue" stroke="blue" points="4174.21,-6933.59 4179.18,-6924.24 4169.46,-6928.45 4174.21,-6933.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4047.5,-7490.83C4082.22,-7495.1 4128.67,-7500.82 4173.23,-7506.3"/>
<polygon fill="blue" stroke="blue" points="4172.94,-7509.8 4183.29,-7507.54 4173.8,-7502.85 4172.94,-7509.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().</title>
<g id="a_node86"><a xlink:title="fn proof_to_hash(gamma: &amp;EdwardsPoint) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;let mut hasher = Sha512::new(); &#160;&#160;&#160;&#160;hasher.update([SUITE_ID, DOMAIN_SEPARATOR_PROOF]); &#160;&#160;&#160;&#160;hasher.update(gamma.mul_by_cofactor().compress().0);...">
<polygon fill="white" stroke="black" points="4374.5,-7475 4261.5,-7475 4261.5,-7439 4374.5,-7439 4374.5,-7475"/>
<text text-anchor="middle" x="4318" y="-7453.3" font-family="Helvetica,sans-Serif" font-size="14.00">proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M4047.5,-7479.39C4103.97,-7474.7 4191.47,-7467.43 4251.35,-7462.45"/>
<polygon fill="blue" stroke="blue" points="4251.78,-7465.93 4261.46,-7461.61 4251.2,-7458.95 4251.78,-7465.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]is_small_order().</title>
<path fill="none" stroke="blue" d="M4006.17,-7411.86C4057.7,-7345.9 4235.24,-7118.65 4296.23,-7040.58"/>
<polygon fill="blue" stroke="blue" points="4299.35,-7042.27 4302.75,-7032.24 4293.84,-7037.96 4299.35,-7042.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/encode_to_curve_try_and_increment().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<path fill="none" stroke="blue" d="M4428.21,-7505.87C4440.17,-7500.36 4451.31,-7493.22 4460.5,-7484 4524.62,-7419.64 4573.26,-7133.15 4587.34,-7041.97"/>
<polygon fill="blue" stroke="blue" points="4590.8,-7042.49 4588.85,-7032.08 4583.89,-7041.44 4590.8,-7042.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let index = pk.proof_to_hash(v.alpha, &amp;v.pi).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;as...">
<polygon fill="white" stroke="black" points="3730.5,-7556 3584.5,-7556 3584.5,-7520 3730.5,-7520 3730.5,-7556"/>
<text text-anchor="middle" x="3657.5" y="-7534.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3730.84,-7526.22C3788.41,-7516.84 3868.3,-7503.82 3924.11,-7494.73"/>
<polygon fill="blue" stroke="blue" points="3924.93,-7498.15 3934.24,-7493.08 3923.81,-7491.24 3924.93,-7498.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3730.64,-7538.58C3758.3,-7535.59 3788.77,-7528.05 3812,-7511 3833.79,-7495 3818.24,-7473.04 3840,-7457 3869.56,-7435.21 3911.17,-7429.11 3943.06,-7428.09"/>
<polygon fill="blue" stroke="blue" points="3943.53,-7431.59 3953.48,-7427.93 3943.42,-7424.59 3943.53,-7431.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;fn test_proof_to_hash_fails() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in TEST_VECTORS { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = PublicKey::try_from(v.pk).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!(pk.proof_to_hash(b&#39; a&#39; , &amp;v.pi).is_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3748.5,-7502 3566.5,-7502 3566.5,-7466 3748.5,-7466 3748.5,-7502"/>
<text text-anchor="middle" x="3657.5" y="-7480.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_proof_to_hash_fails</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3748.65,-7484C3804.07,-7484 3873.85,-7484 3924.1,-7484"/>
<polygon fill="blue" stroke="blue" points="3924.2,-7487.5 3934.2,-7484 3924.2,-7480.5 3924.2,-7487.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/tests/test_proof_to_hash_fails().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3748.65,-7469.32C3811.6,-7459.06 3893.08,-7445.79 3943.43,-7437.59"/>
<polygon fill="blue" stroke="blue" points="3944.07,-7441.03 3953.38,-7435.97 3942.94,-7434.12 3944.07,-7441.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/proof_to_hash().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 edwards/impl#[EdwardsPoint]mul_by_cofactor().</title>
<path fill="none" stroke="blue" d="M4330.19,-7438.81C4372.72,-7369.67 4524.44,-7123.01 4574.99,-7040.85"/>
<polygon fill="blue" stroke="blue" points="4578.11,-7042.45 4580.37,-7032.1 4572.15,-7038.78 4578.11,-7042.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="1597,-7015 1423,-7015 1423,-6979 1597,-6979 1597,-7015"/>
<text text-anchor="middle" x="1510" y="-6993.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.26,-6990.38C1672.2,-6979.94 1778.17,-6953.07 1840,-6884 1877.97,-6841.58 1827.46,-6798.97 1868,-6759 1895.56,-6731.83 1933.23,-6716.94 1971.11,-6709.15"/>
<polygon fill="blue" stroke="blue" points="1972.09,-6712.52 1981.26,-6707.22 1970.79,-6705.65 1972.09,-6712.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.32,-6992.23C1673.65,-6983.06 1781.68,-6957.03 1840,-6884 1876.12,-6838.76 1827.03,-6665.9 1868,-6625 1907.21,-6585.85 1968.69,-6578.54 2021.28,-6581.28"/>
<polygon fill="blue" stroke="blue" points="2021.12,-6584.78 2031.33,-6581.93 2021.58,-6577.79 2021.12,-6584.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1597.26,-6992.52C1673.84,-6983.57 1782.27,-6957.69 1840,-6884 1883.07,-6829.03 1819.04,-6620.79 1868,-6571 1905.31,-6533.05 1963.49,-6524.8 2014.71,-6526.71"/>
<polygon fill="blue" stroke="blue" points="2014.69,-6530.21 2024.85,-6527.22 2015.04,-6523.22 2014.69,-6530.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="819,-7069 730,-7069 730,-7033 819,-7033 819,-7069"/>
<text text-anchor="middle" x="774.5" y="-7047.3" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="1071,-7052 991,-7052 991,-7016 1071,-7016 1071,-7052"/>
<text text-anchor="middle" x="1031" y="-7030.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.25,-7048.08C864.17,-7045.08 933.95,-7040.42 980.78,-7037.29"/>
<polygon fill="blue" stroke="blue" points="981.24,-7040.76 990.99,-7036.61 980.78,-7033.78 981.24,-7040.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1071.03,-7030.97C1145,-7025.23 1307.55,-7012.63 1412.47,-7004.49"/>
<polygon fill="blue" stroke="blue" points="1413.05,-7007.95 1422.75,-7003.69 1412.51,-7000.97 1413.05,-7007.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="839,-7015 710,-7015 710,-6979 839,-6979 839,-7015"/>
<text text-anchor="middle" x="774.5" y="-6993.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M839.31,-6997C968.19,-6997 1260.19,-6997 1412.49,-6997"/>
<polygon fill="blue" stroke="blue" points="1412.77,-7000.5 1422.77,-6997 1412.77,-6993.5 1412.77,-7000.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M839.06,-7006.24C882.95,-7012.62 940.44,-7020.98 980.83,-7026.85"/>
<polygon fill="blue" stroke="blue" points="980.57,-7030.35 990.97,-7028.33 981.58,-7023.42 980.57,-7030.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node91"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="1541,-6849 1479,-6849 1479,-6813 1541,-6813 1541,-6849"/>
<text text-anchor="middle" x="1510" y="-6827.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1541.3,-6836.37C1602.59,-6845.6 1743.65,-6858.35 1840,-6801 1859.28,-6789.53 1849.41,-6771.56 1868,-6759 1898.39,-6738.46 1935.15,-6725.63 1971.14,-6717.68"/>
<polygon fill="blue" stroke="blue" points="1972.19,-6721.03 1981.27,-6715.56 1970.76,-6714.18 1972.19,-6721.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1541.24,-6839.02C1605.61,-6854.1 1757.06,-6878.57 1840,-6801 1897.85,-6746.9 1810.57,-6679.54 1868,-6625 1907.94,-6587.07 1968.96,-6579.64 2021.12,-6582.02"/>
<polygon fill="blue" stroke="blue" points="2021.24,-6585.53 2031.43,-6582.62 2021.65,-6578.54 2021.24,-6585.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1541.46,-6839.26C1606.26,-6854.78 1758.5,-6880.08 1840,-6801 1913.91,-6729.29 1794.64,-6643.27 1868,-6571 1905.76,-6533.8 1963.68,-6525.5 2014.62,-6527.2"/>
<polygon fill="blue" stroke="blue" points="2014.56,-6530.7 2024.71,-6527.66 2014.88,-6523.7 2014.56,-6530.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node92"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="1062,-6849 1000,-6849 1000,-6813 1062,-6813 1062,-6849"/>
<text text-anchor="middle" x="1031" y="-6827.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1062.2,-6831C1144.92,-6831 1375.21,-6831 1468.74,-6831"/>
<polygon fill="blue" stroke="blue" points="1468.93,-6834.5 1478.93,-6831 1468.93,-6827.5 1468.93,-6834.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node93"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="805.5,-6849 743.5,-6849 743.5,-6813 805.5,-6813 805.5,-6849"/>
<text text-anchor="middle" x="774.5" y="-6827.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M805.69,-6831C851.52,-6831 938.68,-6831 989.82,-6831"/>
<polygon fill="blue" stroke="blue" points="989.85,-6834.5 999.85,-6831 989.85,-6827.5 989.85,-6834.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().</title>
<g id="a_node94"><a xlink:title="async fn main() &#45;&gt; anyhow::Result&lt;()&gt; { &#160;&#160;&#160;&#160;env_logger::builder() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.filter_module(module_path!(), log::LevelFilter::Info) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.parse_default_env() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.init(); &#160;&#160;&#160;&#160;&#160;let Config { &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1537,-7289 1483,-7289 1483,-7253 1537,-7253 1537,-7289"/>
<text text-anchor="middle" x="1510" y="-7267.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.16,-7278.53C1599.94,-7294.83 1759.85,-7325.45 1840,-7241 1895.42,-7182.61 1813.03,-6575.81 1868,-6517 1894.01,-6489.17 1931.18,-6477.01 1969.07,-6473.11"/>
<polygon fill="blue" stroke="blue" points="1969.56,-6476.58 1979.24,-6472.26 1968.98,-6469.61 1969.56,-6476.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1537.1,-7278.48C1599.74,-7294.65 1759.38,-7325.01 1840,-7241 1883.29,-7195.89 1825.05,-6724.44 1868,-6679 1888.69,-6657.11 1916.3,-6644.95 1945.68,-6638.89"/>
<polygon fill="blue" stroke="blue" points="1946.49,-6642.3 1955.7,-6637.07 1945.24,-6635.42 1946.49,-6642.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;async fn monitor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&lt;&#39;_&gt;&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;account_data: AccountData, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;last_distinguished_tree_...">
<polygon fill="white" stroke="black" points="519.5,-3441 448.5,-3441 448.5,-3405 519.5,-3405 519.5,-3441"/>
<text text-anchor="middle" x="484" y="-3419.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M519.66,-3422.59C667.07,-3420.87 1243.45,-3414.11 1441.63,-3411.79"/>
<polygon fill="blue" stroke="blue" points="1441.95,-3415.29 1451.9,-3411.67 1441.86,-3408.29 1441.95,-3415.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<g id="a_node96"><a xlink:title="fn verify_single_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;search_key: Vec&lt;u8&gt;, &#160;&#160;&#160;&#160;response: CondensedTreeSearchResponse, &#160;&#160;&#160;&#160;monitoring_data: Option&lt;MonitoringData&gt;, &#160;&#160;&#160;&#160;full_tree_head: &amp;FullTr...">
<polygon fill="white" stroke="black" points="1144,-3362 918,-3362 918,-3326 1144,-3326 1144,-3362"/>
<text text-anchor="middle" x="1031" y="-3340.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_single_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1051.97,-3362.36C1077.6,-3384.68 1124.45,-3421.42 1172,-3438 1263.19,-3469.81 1376.39,-3471.88 1445.63,-3469.3"/>
<polygon fill="blue" stroke="blue" points="1446.09,-3472.79 1455.93,-3468.87 1445.79,-3465.79 1446.09,-3472.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().</title>
<g id="a_node97"><a xlink:title=" &#160;&#160;&#160;fn search_returns_data_not_requested(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let...">
<polygon fill="white" stroke="black" points="615,-3333 353,-3333 353,-3297 615,-3297 615,-3333"/>
<text text-anchor="middle" x="484" y="-3311.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_returns_data_not_requested</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<g id="a_node100"><a xlink:title="fn verify_chat_search_response( &#160;&#160;&#160;&#160;kt: &amp;KeyTransparency, &#160;&#160;&#160;&#160;aci: &amp;Aci, &#160;&#160;&#160;&#160;e164: Option&lt;E164&gt;, &#160;&#160;&#160;&#160;username_hash: Option&lt;UsernameHash&gt;, &#160;&#160;&#160;&#160;stored_account_data: Option&lt;AccountData&gt;, &#160;&#160;&#160;&#160;chat_search_...">
<polygon fill="white" stroke="black" points="882,-3360 667,-3360 667,-3324 882,-3324 882,-3360"/>
<text text-anchor="middle" x="774.5" y="-3338.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_chat_search_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_returns_data_not_requested().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M615.32,-3327.2C629.01,-3328.48 642.86,-3329.77 656.38,-3331.04"/>
<polygon fill="blue" stroke="blue" points="656.37,-3334.55 666.65,-3332 657.02,-3327.58 656.37,-3334.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().</title>
<g id="a_node98"><a xlink:title=" &#160;&#160;&#160;fn search_does_not_return_requested_data(skip: &amp;[AccountDataField]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_at = SystemTime::UNIX_EPOCH + CHAT_SEARCH_RESPONSE_VALID_AT; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = test_account::aci(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="631,-3279 337,-3279 337,-3243 631,-3243 631,-3279"/>
<text text-anchor="middle" x="484" y="-3257.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_does_not_return_requested_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/test/search_does_not_return_requested_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M594.71,-3279.08C607.03,-3281.76 619.33,-3284.74 631,-3288 661.86,-3296.63 695.42,-3309.18 722.22,-3320.01"/>
<polygon fill="blue" stroke="blue" points="721.18,-3323.37 731.76,-3323.91 723.83,-3316.89 721.18,-3323.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M515.06,-3366.19C548.61,-3363.05 604.99,-3357.77 656.53,-3352.95"/>
<polygon fill="blue" stroke="blue" points="657.14,-3356.41 666.77,-3351.99 656.49,-3349.44 657.14,-3356.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_chat_search_response().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/verify_single_search_response().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M882.32,-3342.84C890.64,-3342.9 899.08,-3342.97 907.49,-3343.04"/>
<polygon fill="blue" stroke="blue" points="907.69,-3346.54 917.72,-3343.12 907.75,-3339.54 907.69,-3346.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 impl#[KeyTransparency]verify_search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M539.33,-3476.36C713.73,-3474.32 1258.83,-3467.93 1445.53,-3465.74"/>
<polygon fill="blue" stroke="blue" points="1445.77,-3469.24 1455.72,-3465.62 1445.68,-3462.24 1445.77,-3469.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().</title>
<g id="a_node102"><a xlink:title=" &#160;&#160;&#160;async fn monitor_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SK...">
<polygon fill="white" stroke="black" points="301,-3441 16,-3441 16,-3405 301,-3405 301,-3441"/>
<text text-anchor="middle" x="158.5" y="-3419.3" font-family="Helvetica,sans-Serif" font-size="14.00">monitor_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/monitor_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]monitor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M301.39,-3423C350.84,-3423 402.79,-3423 438.41,-3423"/>
<polygon fill="blue" stroke="blue" points="438.46,-3426.5 448.46,-3423 438.46,-3419.5 438.46,-3426.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;async fn search_for_account_that_isnt() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39;...">
<polygon fill="white" stroke="black" points="267,-3333 50,-3333 50,-3297 267,-3297 267,-3333"/>
<text text-anchor="middle" x="158.5" y="-3311.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_account_that_isnt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_account_that_isnt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.22,-3332.98C327.63,-3343.06 399.39,-3355.04 443.04,-3362.33"/>
<polygon fill="blue" stroke="blue" points="442.54,-3365.79 452.98,-3363.99 443.69,-3358.89 442.54,-3365.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().</title>
<g id="a_node104"><a xlink:title=" &#160;&#160;&#160;async fn search_permutations_integration_test(use_e164: bool, use_username_hash: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKI...">
<polygon fill="white" stroke="black" points="297,-3279 20,-3279 20,-3243 297,-3243 297,-3279"/>
<text text-anchor="middle" x="158.5" y="-3257.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_permutations_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_permutations_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M296.44,-3279.1C300.85,-3281.74 305.06,-3284.7 309,-3288 328.62,-3304.44 309.34,-3325.61 329,-3342 360.56,-3368.3 408.62,-3372.94 442.65,-3372.34"/>
<polygon fill="blue" stroke="blue" points="442.85,-3375.83 452.73,-3372 442.62,-3368.84 442.85,-3375.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn prompt(text: &amp;str) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; {} &gt;&#39; , text); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input = String::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_line(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="192,-3495 125,-3495 125,-3459 192,-3459 192,-3495"/>
<text text-anchor="middle" x="158.5" y="-3473.3" font-family="Helvetica,sans-Serif" font-size="14.00">prompt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.23,-3479.86C225.4,-3480.94 276.35,-3477.36 309,-3450 328.62,-3433.56 309.34,-3412.39 329,-3396 360.56,-3369.7 408.62,-3365.06 442.65,-3365.66"/>
<polygon fill="blue" stroke="blue" points="442.62,-3369.16 452.73,-3366 442.85,-3362.17 442.62,-3369.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test_support/prompt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M192.3,-3477C245.24,-3477 350.48,-3477 418.75,-3477"/>
<polygon fill="blue" stroke="blue" points="418.96,-3480.5 428.96,-3477 418.96,-3473.5 418.96,-3480.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;async fn distinguished_integration_test(have_last_distinguished: bool) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running in...">
<polygon fill="white" stroke="black" points="271.5,-3549 45.5,-3549 45.5,-3513 271.5,-3513 271.5,-3549"/>
<text text-anchor="middle" x="158.5" y="-3527.3" font-family="Helvetica,sans-Serif" font-size="14.00">distinguished_integration_test</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/distinguished_integration_test().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]distinguished().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M267.67,-3512.94C317.83,-3504.57 375.75,-3494.9 418.87,-3487.7"/>
<polygon fill="blue" stroke="blue" points="419.66,-3491.12 428.95,-3486.02 418.51,-3484.22 419.66,-3491.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;async fn search_for_deleted_account() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if std::env::var(&#39; LIBSIGNAL_TESTING_RUN_NONHERMETIC_TESTS&#39; ).is_err() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;println!(&#39; SKIPPED: running integration tests is not enabled&#39; )...">
<polygon fill="white" stroke="black" points="263,-3387 54,-3387 54,-3351 263,-3351 263,-3387"/>
<text text-anchor="middle" x="158.5" y="-3365.3" font-family="Helvetica,sans-Serif" font-size="14.00">search_for_deleted_account</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/keytrans/test/search_for_deleted_account().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 api/keytrans/impl#[`KeyTransparencyClient&lt;&#39;_&gt;`][UnauthenticatedChatApi]search().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M263.19,-3369C324.27,-3369 398.09,-3369 442.75,-3369"/>
<polygon fill="blue" stroke="blue" points="442.9,-3372.5 452.9,-3369 442.9,-3365.5 442.9,-3372.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node108"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="1613.5,-7206 1406.5,-7206 1406.5,-7170 1613.5,-7170 1613.5,-7206"/>
<text text-anchor="middle" x="1510" y="-7184.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1582.15,-7206.03C1657.43,-7220.39 1774.24,-7228.35 1840,-7161 1914.96,-7084.23 1793.98,-6756.67 1868,-6679 1888.78,-6657.2 1916.43,-6645.08 1945.82,-6639.03"/>
<polygon fill="blue" stroke="blue" points="1946.64,-6642.44 1955.85,-6637.21 1945.39,-6635.55 1946.64,-6642.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="1601,-7152 1419,-7152 1419,-7116 1601,-7116 1601,-7152"/>
<text text-anchor="middle" x="1510" y="-7130.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.85,-7152.04C1661.41,-7165.31 1775.83,-7171 1840,-7104 1885.16,-7056.84 1823.2,-6564.5 1868,-6517 1894.13,-6489.29 1931.35,-6477.16 1969.23,-6473.27"/>
<polygon fill="blue" stroke="blue" points="1969.73,-6476.74 1979.4,-6472.41 1969.14,-6469.76 1969.73,-6476.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1585.56,-7152.03C1661.16,-7165.39 1775.87,-7171.24 1840,-7104 1889.2,-7052.41 1819.19,-6514.96 1868,-6463 1902.02,-6426.79 1954.95,-6417.14 2003.67,-6417.73"/>
<polygon fill="blue" stroke="blue" points="2003.58,-6421.23 2013.67,-6417.99 2003.77,-6414.23 2003.58,-6421.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587.01,-7152.05C1662.38,-7164.95 1775.63,-7170.01 1840,-7104 1906.08,-7036.24 1802.44,-6747.26 1868,-6679 1888.87,-6657.28 1916.55,-6645.19 1945.96,-6639.16"/>
<polygon fill="blue" stroke="blue" points="1946.78,-6642.57 1955.99,-6637.34 1945.53,-6635.68 1946.78,-6642.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().</title>
<g id="a_node110"><a xlink:title=" &#160;&#160;&#160;fn from(src: KeyTransConfig) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let KeyTransConfig { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;vrf_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auditor_key_material, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = src; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let s...">
<polygon fill="white" stroke="black" points="3684.5,-7365 3630.5,-7365 3630.5,-7329 3684.5,-7329 3684.5,-7365"/>
<text text-anchor="middle" x="3657.5" y="-7343.3" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 env/impl#[PublicConfig][`From&lt;KeyTransConfig&gt;`]from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;keytrans 0.0.1 vrf/impl#[PublicKey][`TryFrom&lt;[u8; 32]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3684.51,-7353.51C3740.38,-7367.5 3872.48,-7400.57 3943.27,-7418.3"/>
<polygon fill="blue" stroke="blue" points="3942.71,-7421.77 3953.26,-7420.8 3944.41,-7414.98 3942.71,-7421.77"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<g id="a_node111"><a xlink:title="pub fn verify_signature( &#160;&#160;&#160;&#160;signature: &amp;[u8], &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], ) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; public_key&#39; , &amp;[(&#39; pri...">
<polygon fill="white" stroke="black" points="3043.5,-8293 2915.5,-8293 2915.5,-8257 3043.5,-8257 3043.5,-8293"/>
<text text-anchor="middle" x="2979.5" y="-8271.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof_bytes: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), PokshoError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let proof = Proof::from_slice(pro...">
<polygon fill="white" stroke="black" points="3460,-6645 3362,-6645 3362,-6609 3460,-6609 3460,-6645"/>
<text text-anchor="middle" x="3411" y="-6623.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3043.78,-8264.19C3054.02,-8260.33 3063.91,-8255.1 3072,-8248 3122.83,-8203.43 3302.17,-7757.47 3319,-7692 3371.63,-7487.29 3402.65,-6803.61 3408.85,-6655.47"/>
<polygon fill="blue" stroke="blue" points="3412.35,-6655.51 3409.26,-6645.37 3405.35,-6655.22 3412.35,-6655.51"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64 = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block100 = [0u8; 100]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i in 0..32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block32[i] = i as u8; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2685.5,-8267 2570.5,-8267 2570.5,-8231 2685.5,-8231 2685.5,-8267"/>
<text text-anchor="middle" x="2628" y="-8245.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2685.54,-8253.21C2745.23,-8257.65 2839.57,-8264.66 2904.99,-8269.53"/>
<polygon fill="blue" stroke="blue" points="2905,-8273.04 2915.24,-8270.29 2905.52,-8266.06 2905,-8273.04"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<g id="a_node113"><a xlink:title="pub fn sign( &#160;&#160;&#160;&#160;private_key: Scalar, &#160;&#160;&#160;&#160;public_key: RistrettoPoint, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;randomness: &amp;[u8], ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, PokshoError&gt; { &#160;&#160;&#160;&#160;let mut st = Statement::new(); &#160;&#160;&#160;&#160;st.add(&#39; pub...">
<polygon fill="white" stroke="black" points="3006.5,-8239 2952.5,-8239 2952.5,-8203 3006.5,-8203 3006.5,-8239"/>
<text text-anchor="middle" x="2979.5" y="-8217.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2685.54,-8244.47C2757.9,-8238.67 2881.15,-8228.8 2942.12,-8223.91"/>
<polygon fill="blue" stroke="blue" points="2942.72,-8227.38 2952.41,-8223.09 2942.16,-8220.4 2942.72,-8227.38"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;pub fn prove( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar_args: &amp;ScalarArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;point_args: &amp;PointArgs, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: &amp;[u8], // must be 32 bytes &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Vec&lt;u8&gt;, Poksh...">
<polygon fill="white" stroke="black" points="3237.5,-6645 3181.5,-6645 3181.5,-6609 3237.5,-6609 3237.5,-6645"/>
<text text-anchor="middle" x="3209.5" y="-6623.3" font-family="Helvetica,sans-Serif" font-size="14.00">prove</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 sign/sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2994.61,-8202.8C3015.58,-8174.62 3054.41,-8117.94 3072,-8063 3160.54,-7786.46 3200.68,-6832.62 3207.45,-6655.44"/>
<polygon fill="blue" stroke="blue" points="3210.95,-6655.47 3207.83,-6645.35 3203.96,-6655.21 3210.95,-6655.47"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;fn homomorphism_with_subtraction( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g1: &amp;[Scalar], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;all_points: &amp;[RistrettoPoint], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;challenge: Option&lt;Scalar&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; G2 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.equations &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;....">
<polygon fill="white" stroke="black" points="3781.5,-6645 3533.5,-6645 3533.5,-6609 3781.5,-6609 3781.5,-6645"/>
<text text-anchor="middle" x="3657.5" y="-6623.3" font-family="Helvetica,sans-Serif" font-size="14.00">homomorphism_with_subtraction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3460.01,-6627C3478.49,-6627 3500.6,-6627 3523.23,-6627"/>
<polygon fill="blue" stroke="blue" points="3523.29,-6630.5 3533.29,-6627 3523.29,-6623.5 3523.29,-6630.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn test_complex_statement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block32 = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64a = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64b = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut block64c = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="3072,-6635 2887,-6635 2887,-6599 3072,-6599 3072,-6635"/>
<text text-anchor="middle" x="2979.5" y="-6613.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_complex_statement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3072.18,-6602.83C3140.54,-6594.58 3236.02,-6587.95 3319,-6600 3329.86,-6601.58 3341.23,-6604.16 3352.11,-6607.12"/>
<polygon fill="blue" stroke="blue" points="3351.36,-6610.55 3361.94,-6609.93 3353.28,-6603.82 3351.36,-6610.55"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/tests/test_complex_statement().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3072.25,-6621.02C3106.88,-6622.54 3144.36,-6624.19 3171.23,-6625.37"/>
<polygon fill="blue" stroke="blue" points="3171.19,-6628.87 3181.33,-6625.81 3171.5,-6621.87 3171.19,-6628.87"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="blue" d="M3676.8,-6645.38C3732.49,-6701.32 3900.07,-6869.67 3964.44,-6934.32"/>
<polygon fill="blue" stroke="blue" points="3962.23,-6937.06 3971.76,-6941.68 3967.19,-6932.12 3962.23,-6937.06"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3237.82,-6627C3266.99,-6627 3314.08,-6627 3351.64,-6627"/>
<polygon fill="blue" stroke="blue" points="3351.96,-6630.5 3361.96,-6627 3351.96,-6623.5 3351.96,-6630.5"/>
</g>
<!-- rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]homomorphism_with_subtraction().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3237.72,-6619.98C3265.1,-6613.31 3308.65,-6603.76 3347,-6600 3413.35,-6593.5 3487.78,-6599.57 3547.01,-6607.59"/>
<polygon fill="blue" stroke="blue" points="3546.75,-6611.09 3557.14,-6609 3547.72,-6604.15 3546.75,-6611.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node118"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1068.5,-3196 993.5,-3196 993.5,-3160 1068.5,-3160 1068.5,-3196"/>
<text text-anchor="middle" x="1031" y="-3174.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node122"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2149.5,-3279 2095.5,-3279 2095.5,-3243 2149.5,-3243 2149.5,-3279"/>
<text text-anchor="middle" x="2122.5" y="-3257.3" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.65,-3186.09C1096.79,-3191.99 1136.67,-3199.68 1172,-3204 1525.99,-3247.33 1958.43,-3258.12 2085.06,-3260.43"/>
<polygon fill="blue" stroke="blue" points="2085.28,-3263.94 2095.34,-3260.61 2085.4,-3256.94 2085.28,-3263.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node123"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="2149.5,-3225 2095.5,-3225 2095.5,-3189 2149.5,-3189 2149.5,-3225"/>
<text text-anchor="middle" x="2122.5" y="-3203.3" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.56,-3178.97C1234.95,-3183.4 1919.68,-3201.63 2085.31,-3206.04"/>
<polygon fill="blue" stroke="blue" points="2085.36,-3209.54 2095.45,-3206.31 2085.55,-3202.54 2085.36,-3209.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node124"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="1574,-3142 1446,-3142 1446,-3106 1574,-3106 1574,-3142"/>
<text text-anchor="middle" x="1510" y="-3120.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.64,-3173.85C1146.96,-3164.99 1331.99,-3144.04 1435.55,-3132.32"/>
<polygon fill="blue" stroke="blue" points="1436.07,-3135.78 1445.62,-3131.18 1435.29,-3128.82 1436.07,-3135.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node119"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="1064,-542 998,-542 998,-506 1064,-506 1064,-542"/>
<text text-anchor="middle" x="1031" y="-520.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node121"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="1573,-542 1447,-542 1447,-506 1573,-506 1573,-542"/>
<text text-anchor="middle" x="1510" y="-520.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1064.04,-524C1139.74,-524 1331.23,-524 1436.65,-524"/>
<polygon fill="blue" stroke="blue" points="1436.89,-527.5 1446.89,-524 1436.89,-520.5 1436.89,-527.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node120"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="2208.5,-542 2036.5,-542 2036.5,-506 2208.5,-506 2208.5,-542"/>
<text text-anchor="middle" x="2122.5" y="-520.3" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2208.55,-517.56C2265.02,-518.33 2336.04,-529.94 2377,-577 2420.14,-626.56 2352.21,-823.93 2397,-872 2437.32,-915.27 2506.97,-919.46 2559.09,-915.14"/>
<polygon fill="blue" stroke="blue" points="2559.64,-918.61 2569.27,-914.17 2558.98,-911.64 2559.64,-918.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1573.18,-524C1680.23,-524 1899.99,-524 2026.38,-524"/>
<polygon fill="blue" stroke="blue" points="2026.44,-527.5 2036.44,-524 2026.44,-520.5 2026.44,-527.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2149.57,-3267.01C2200.22,-3277 2312.58,-3290.77 2377,-3234 2539,-3091.25 2611.22,-2358.07 2624.65,-2205.02"/>
<polygon fill="blue" stroke="blue" points="2628.14,-2205.29 2625.52,-2195.02 2621.17,-2204.68 2628.14,-2205.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2149.55,-3212.57C2200.16,-3221.74 2312.47,-3233.81 2377,-3177 2530.16,-3042.18 2608.83,-2354.04 2624.19,-2205.35"/>
<polygon fill="blue" stroke="blue" points="2627.69,-2205.52 2625.22,-2195.22 2620.72,-2204.81 2627.69,-2205.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node125"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="2209.5,-3142 2035.5,-3142 2035.5,-3106 2209.5,-3106 2209.5,-3142"/>
<text text-anchor="middle" x="2122.5" y="-3120.3" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1574.03,-3124C1681.11,-3124 1899.18,-3124 2025.38,-3124"/>
<polygon fill="blue" stroke="blue" points="2025.43,-3127.5 2035.43,-3124 2025.43,-3120.5 2025.43,-3127.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2209.79,-3136.42C2263.91,-3139.24 2331.76,-3132.98 2377,-3094 2518.78,-2971.83 2605.59,-2346.17 2623.53,-2205.23"/>
<polygon fill="blue" stroke="blue" points="2627.01,-2205.57 2624.79,-2195.22 2620.07,-2204.7 2627.01,-2205.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2686.71,-904C2746.52,-904 2840.19,-904 2905.2,-904"/>
<polygon fill="blue" stroke="blue" points="2905.38,-907.5 2915.38,-904 2905.38,-900.5 2905.38,-907.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2673.57,-52.04C2791.95,-101.81 3118.87,-251.6 3319,-464 3500.07,-656.18 3615.2,-964.04 3647.31,-1057.33"/>
<polygon fill="blue" stroke="blue" points="3644.03,-1058.56 3650.57,-1066.9 3650.65,-1056.31 3644.03,-1058.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node128"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="2236.5,-52 2008.5,-52 2008.5,-16 2236.5,-16 2236.5,-52"/>
<text text-anchor="middle" x="2122.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKey]verify_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2236.81,-34C2323.75,-34 2442.67,-34 2526.3,-34"/>
<polygon fill="blue" stroke="blue" points="2526.32,-37.5 2536.32,-34 2526.32,-30.5 2526.32,-37.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]verify_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3029.26,-922.08C3095.28,-946.75 3216.64,-992.72 3319,-1035 3332.48,-1040.57 3346.97,-1046.82 3360.34,-1052.69"/>
<polygon fill="blue" stroke="blue" points="3359.29,-1056.05 3369.85,-1056.89 3362.11,-1049.65 3359.29,-1056.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub fn validate(&amp;self, trust_root: &amp;PublicKey) &#45;&gt; Result&lt;bool&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if REVOKED_SERVER_CERTIFICATE_KEY_IDS.contains(&amp;self.key_id()?) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;log::error!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; received serve...">
<polygon fill="white" stroke="black" points="3245,-809 3174,-809 3174,-773 3245,-773 3245,-809"/>
<text text-anchor="middle" x="3209.5" y="-787.3" font-family="Helvetica,sans-Serif" font-size="14.00">validate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3226.38,-809.19C3248.24,-834.59 3288.4,-882.46 3319,-926 3347.91,-967.13 3377.55,-1017.5 3394.85,-1047.88"/>
<polygon fill="blue" stroke="blue" points="3391.83,-1049.66 3399.8,-1056.63 3397.92,-1046.21 3391.83,-1049.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2716.29,-785.26C2785.43,-780.71 2879.18,-774.54 2933.83,-770.94"/>
<polygon fill="blue" stroke="blue" points="2934.14,-774.43 2943.89,-770.28 2933.68,-767.44 2934.14,-774.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node132"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="2719,-755 2537,-755 2537,-719 2719,-719 2719,-755"/>
<text text-anchor="middle" x="2628" y="-733.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2719,-744.98C2787.65,-751.07 2879.3,-759.2 2933.3,-763.99"/>
<polygon fill="blue" stroke="blue" points="2933.31,-767.51 2943.59,-764.9 2933.93,-760.53 2933.31,-767.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3015.16,-755.12C3081.55,-732.89 3228.11,-695.89 3319,-764 3365.05,-798.5 3395.61,-976.43 3406.03,-1046.55"/>
<polygon fill="blue" stroke="blue" points="3402.62,-1047.45 3407.53,-1056.84 3409.55,-1046.44 3402.62,-1047.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3015.13,-771.49C3054.92,-775.51 3120.31,-782.1 3163.89,-786.5"/>
<polygon fill="blue" stroke="blue" points="3163.62,-789.99 3173.92,-787.51 3164.32,-783.03 3163.62,-789.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PublicKey]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2633.59,-2158.95C2666.43,-2029.87 2864.82,-1251.5 2879,-1231 2950.08,-1128.27 2989,-1106.03 3108,-1068 3183.24,-1043.96 3274.48,-1050.63 3336.85,-1060.19"/>
<polygon fill="blue" stroke="blue" points="3336.57,-1063.69 3346.99,-1061.81 3337.67,-1056.78 3336.57,-1063.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node135"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="2197.5,-841 2047.5,-841 2047.5,-805 2197.5,-805 2197.5,-841"/>
<text text-anchor="middle" x="2122.5" y="-819.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2197.6,-817.35C2250.35,-816.46 2321.45,-821.81 2377,-850 2388.78,-855.98 2385.31,-865.83 2397,-872 2446.99,-898.38 2511.22,-905.47 2559.09,-906.48"/>
<polygon fill="blue" stroke="blue" points="2559.31,-909.98 2569.35,-906.6 2559.39,-902.98 2559.31,-909.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node136"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2265.5,-1111 1979.5,-1111 1979.5,-1075 2265.5,-1075 2265.5,-1111"/>
<text text-anchor="middle" x="2122.5" y="-1089.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2265.55,-1108.04C2306.01,-1104.96 2347.14,-1093.69 2377,-1066 2413.11,-1032.51 2362.97,-992.6 2397,-957 2438.41,-913.68 2507.57,-902.56 2559.26,-900.99"/>
<polygon fill="blue" stroke="blue" points="2559.42,-904.48 2569.35,-900.79 2559.29,-897.48 2559.42,-904.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2265.69,-1078.98C2305.79,-1082.2 2346.7,-1093.3 2377,-1120 2539,-1262.75 2611.22,-1995.93 2624.65,-2148.98"/>
<polygon fill="blue" stroke="blue" points="2621.17,-2149.32 2625.52,-2158.98 2628.14,-2148.71 2621.17,-2149.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node137"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="2354,-1057 1891,-1057 1891,-1021 2354,-1021 2354,-1057"/>
<text text-anchor="middle" x="2122.5" y="-1035.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2354.24,-1026.69C2362.23,-1022.46 2369.85,-1017.59 2377,-1012 2397.48,-995.97 2377.52,-974.23 2397,-957 2441.22,-917.88 2508.51,-906.01 2558.91,-903.1"/>
<polygon fill="blue" stroke="blue" points="2559.24,-906.59 2569.07,-902.62 2558.91,-899.6 2559.24,-906.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2354.05,-1049.53C2362.2,-1054.21 2369.9,-1059.67 2377,-1066 2546.38,-1216.91 2612.99,-1990.08 2624.96,-2148.59"/>
<polygon fill="blue" stroke="blue" points="2621.5,-2149.21 2625.73,-2158.92 2628.48,-2148.69 2621.5,-2149.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node138"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="2210,-679 2035,-679 2035,-643 2210,-643 2210,-679"/>
<text text-anchor="middle" x="2122.5" y="-657.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.3,-645.21C2265.51,-640.52 2334.39,-645.48 2377,-688 2435.23,-746.1 2339.71,-812.97 2397,-872 2438.13,-914.38 2507.49,-918.74 2559.32,-914.71"/>
<polygon fill="blue" stroke="blue" points="2559.79,-918.18 2569.43,-913.8 2559.16,-911.21 2559.79,-918.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node139"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2227,-625 2018,-625 2018,-589 2227,-589 2227,-625"/>
<text text-anchor="middle" x="2122.5" y="-603.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2227.17,-589.76C2279.17,-587.36 2339.01,-595.16 2377,-634 2414.11,-671.95 2360.5,-833.46 2397,-872 2437.67,-914.95 2507.27,-919.18 2559.28,-914.96"/>
<polygon fill="blue" stroke="blue" points="2559.8,-918.43 2569.43,-914.02 2559.15,-911.46 2559.8,-918.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node140"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="2232.5,-1003 2012.5,-1003 2012.5,-967 2232.5,-967 2232.5,-1003"/>
<text text-anchor="middle" x="2122.5" y="-981.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2232.71,-975.94C2277.56,-971.55 2329.92,-965.57 2377,-958 2439.37,-947.97 2509.63,-932.41 2559.74,-920.57"/>
<polygon fill="blue" stroke="blue" points="2560.57,-923.97 2569.49,-918.25 2558.95,-917.16 2560.57,-923.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node141"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="2219.5,-949 2025.5,-949 2025.5,-913 2219.5,-913 2219.5,-949"/>
<text text-anchor="middle" x="2122.5" y="-927.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2219.69,-925.84C2319.08,-920.51 2471.68,-912.33 2559.14,-907.64"/>
<polygon fill="blue" stroke="blue" points="2559.41,-911.13 2569.21,-907.1 2559.04,-904.14 2559.41,-911.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node142"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="2204.5,-1165 2040.5,-1165 2040.5,-1129 2204.5,-1129 2204.5,-1165"/>
<text text-anchor="middle" x="2122.5" y="-1143.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2204.68,-1162.11C2260.65,-1167.49 2332.68,-1163.62 2377,-1120 2429.02,-1068.8 2348.15,-1011.23 2397,-957 2437.3,-912.26 2507.12,-901.42 2559.29,-900.3"/>
<polygon fill="blue" stroke="blue" points="2559.51,-903.8 2569.48,-900.2 2559.44,-896.8 2559.51,-903.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2204.76,-1142.99C2260.22,-1144.76 2331.59,-1156.57 2377,-1200 2520.96,-1337.71 2606.53,-2002.64 2623.76,-2148.63"/>
<polygon fill="blue" stroke="blue" points="2620.33,-2149.43 2624.97,-2158.96 2627.28,-2148.62 2620.33,-2149.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node143"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="2200.5,-787 2044.5,-787 2044.5,-751 2200.5,-751 2200.5,-787"/>
<text text-anchor="middle" x="2122.5" y="-765.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.59,-755.98C2256.03,-751.19 2329.16,-754.9 2377,-796 2403.49,-818.76 2370.88,-848.82 2397,-872 2440.58,-910.68 2508.27,-915.88 2558.95,-913.08"/>
<polygon fill="blue" stroke="blue" points="2559.43,-916.56 2569.17,-912.4 2558.96,-909.57 2559.43,-916.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node144"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="2210.5,-733 2034.5,-733 2034.5,-697 2210.5,-697 2210.5,-733"/>
<text text-anchor="middle" x="2122.5" y="-711.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2210.59,-699.77C2265.39,-695.47 2333.7,-700.67 2377,-742 2419.29,-782.36 2355.37,-830.96 2397,-872 2438.92,-913.32 2507.85,-917.92 2559.33,-914.24"/>
<polygon fill="blue" stroke="blue" points="2559.71,-917.72 2569.38,-913.4 2559.13,-910.74 2559.71,-917.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node145"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="2183,-895 2062,-895 2062,-859 2183,-859 2183,-895"/>
<text text-anchor="middle" x="2122.5" y="-873.3" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2183.24,-880.2C2277.46,-885.26 2460.02,-895.05 2559.09,-900.36"/>
<polygon fill="blue" stroke="blue" points="2559.11,-903.86 2569.28,-900.9 2559.48,-896.87 2559.11,-903.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node146"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2267.5,-1734 1977.5,-1734 1977.5,-1698 2267.5,-1698 2267.5,-1734"/>
<text text-anchor="middle" x="2122.5" y="-1712.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2267.58,-1725.42C2305.72,-1733.22 2345.11,-1746.54 2377,-1769 2517.77,-1868.14 2594.46,-2074.17 2618.57,-2149.04"/>
<polygon fill="blue" stroke="blue" points="2615.27,-2150.22 2621.62,-2158.7 2621.95,-2148.12 2615.27,-2150.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node147"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="2217,-1464 2028,-1464 2028,-1428 2217,-1428 2217,-1464"/>
<text text-anchor="middle" x="2122.5" y="-1442.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2217.28,-1463.08C2271.68,-1467.18 2337.13,-1461.1 2377,-1419 2436.06,-1356.64 2337.52,-1094.97 2397,-1033 2432.7,-995.8 2807.84,-996.34 2859,-990 2954.07,-978.22 2988.78,-1004.45 3072,-957 3129.97,-923.95 3173.56,-856.06 3194.57,-818.14"/>
<polygon fill="blue" stroke="blue" points="3197.74,-819.65 3199.42,-809.19 3191.58,-816.31 3197.74,-819.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node148"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2249.5,-1410 1995.5,-1410 1995.5,-1374 2249.5,-1374 2249.5,-1410"/>
<text text-anchor="middle" x="2122.5" y="-1388.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2235.99,-1410.01C2286.05,-1411.31 2341.58,-1402.32 2377,-1365 2405.34,-1335.14 2372.94,-1028.41 2397,-995 2434.3,-943.19 2505.85,-920.87 2559.28,-911.25"/>
<polygon fill="blue" stroke="blue" points="2560.1,-914.67 2569.38,-909.55 2558.93,-907.76 2560.1,-914.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2249.55,-1378.75C2294.03,-1380.5 2341.7,-1390.5 2377,-1419 2614.91,-1611.06 2628.43,-2035.16 2627.62,-2148.62"/>
<polygon fill="blue" stroke="blue" points="2624.12,-2148.86 2627.5,-2158.9 2631.12,-2148.94 2624.12,-2148.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node149"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2186.5,-1518 2058.5,-1518 2058.5,-1482 2186.5,-1482 2186.5,-1518"/>
<text text-anchor="middle" x="2122.5" y="-1496.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.58,-1502.95C2239.39,-1503.19 2315.72,-1498.24 2377,-1473 2641.3,-1364.15 2634.58,-1219.19 2879,-1071 2959.15,-1022.41 2999.56,-1045.48 3072,-986 3130.25,-938.17 3174.78,-859.52 3195.58,-818.24"/>
<polygon fill="blue" stroke="blue" points="3198.82,-819.58 3200.12,-809.07 3192.54,-816.48 3198.82,-819.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node150"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="2346,-1680 1899,-1680 1899,-1644 2346,-1644 2346,-1680"/>
<text text-anchor="middle" x="2122.5" y="-1658.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2346.1,-1672.18C2356.95,-1676.81 2367.33,-1682.36 2377,-1689 2543.31,-1803.2 2605.6,-2062.78 2622.11,-2148.75"/>
<polygon fill="blue" stroke="blue" points="2618.71,-2149.62 2623.98,-2158.81 2625.59,-2148.34 2618.71,-2149.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node151"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="2369,-1626 1876,-1626 1876,-1590 2369,-1590 2369,-1626"/>
<text text-anchor="middle" x="2122.5" y="-1604.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2363.05,-1626.06C2367.84,-1628.8 2372.5,-1631.77 2377,-1635 2557.4,-1764.44 2610.95,-2056.89 2623.62,-2148.8"/>
<polygon fill="blue" stroke="blue" points="2620.15,-2149.3 2624.93,-2158.76 2627.09,-2148.38 2620.15,-2149.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node152"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="2251.5,-1302 1993.5,-1302 1993.5,-1266 2251.5,-1266 2251.5,-1302"/>
<text text-anchor="middle" x="2122.5" y="-1280.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2234.73,-1302C2285.13,-1303.5 2341.31,-1294.67 2377,-1257 2406.31,-1226.07 2371.61,-908.22 2397,-874 2428,-832.22 2482.03,-811.42 2529.94,-801.09"/>
<polygon fill="blue" stroke="blue" points="2530.64,-804.52 2539.74,-799.1 2529.25,-797.66 2530.64,-804.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2251.77,-1270.1C2295.84,-1271.96 2342.67,-1282.2 2377,-1311 2512.41,-1424.58 2603.5,-2011.95 2623.06,-2148.58"/>
<polygon fill="blue" stroke="blue" points="2619.62,-2149.26 2624.49,-2158.67 2626.55,-2148.28 2619.62,-2149.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node153"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2188,-1248 2057,-1248 2057,-1212 2188,-1212 2188,-1248"/>
<text text-anchor="middle" x="2122.5" y="-1226.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]validate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2188.01,-1242.55C2245.87,-1249.72 2328.85,-1249.15 2377,-1200 2409.03,-1167.3 2364.39,-1027.12 2397,-995 2470.39,-922.71 2780.76,-1024.01 2859,-957 2887.82,-932.32 2860.97,-907.39 2879,-874 2896.27,-842.01 2925.6,-812.47 2947.95,-792.74"/>
<polygon fill="blue" stroke="blue" points="2950.26,-795.37 2955.54,-786.19 2945.69,-790.08 2950.26,-795.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node154"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="2362,-1572 1883,-1572 1883,-1536 2362,-1536 2362,-1572"/>
<text text-anchor="middle" x="2122.5" y="-1550.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2362.06,-1571.18C2367.21,-1574.17 2372.21,-1577.43 2377,-1581 2571.57,-1725.83 2615.8,-2051.03 2624.86,-2148.72"/>
<polygon fill="blue" stroke="blue" points="2621.4,-2149.32 2625.75,-2158.98 2628.37,-2148.71 2621.4,-2149.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node155"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="2197,-1356 2048,-1356 2048,-1320 2197,-1320 2197,-1356"/>
<text text-anchor="middle" x="2122.5" y="-1334.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2197.1,-1353.14C2254.65,-1360.26 2332.18,-1358.61 2377,-1311 2410.32,-1275.61 2368.16,-913.13 2397,-874 2427.92,-832.04 2482.1,-811.23 2530.1,-800.95"/>
<polygon fill="blue" stroke="blue" points="2530.82,-804.37 2539.93,-798.97 2529.43,-797.51 2530.82,-804.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2197.21,-1325.81C2252.72,-1320.95 2327.47,-1324.19 2377,-1365 2505.03,-1470.48 2601.07,-2017.45 2622.5,-2148.68"/>
<polygon fill="blue" stroke="blue" points="2619.08,-2149.43 2624.13,-2158.74 2625.99,-2148.31 2619.08,-2149.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node156"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="1725.5,-2843 1294.5,-2843 1294.5,-2807 1725.5,-2807 1725.5,-2843"/>
<text text-anchor="middle" x="1510" y="-2821.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1725.74,-2818.39C1948.42,-2807.48 2277.67,-2778.69 2377,-2703 2548.57,-2572.28 2607.8,-2294.16 2622.78,-2205.08"/>
<polygon fill="blue" stroke="blue" points="2626.24,-2205.6 2624.39,-2195.17 2619.33,-2204.48 2626.24,-2205.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node157"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="1603.5,-2411 1416.5,-2411 1416.5,-2375 1603.5,-2375 1603.5,-2411"/>
<text text-anchor="middle" x="1510" y="-2389.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node167"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="2149.5,-2195 2095.5,-2195 2095.5,-2159 2149.5,-2159 2149.5,-2195"/>
<text text-anchor="middle" x="2122.5" y="-2173.3" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1603.64,-2397.7C1671.01,-2398.21 1763.46,-2392.78 1840,-2366 1944.52,-2329.43 2047.44,-2244.55 2094.67,-2202.11"/>
<polygon fill="blue" stroke="blue" points="2097.24,-2204.5 2102.29,-2195.18 2092.54,-2199.31 2097.24,-2204.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node158"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1610,-2357 1410,-2357 1410,-2321 1610,-2321 1610,-2357"/>
<text text-anchor="middle" x="1510" y="-2335.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1610.14,-2340.2C1676.29,-2338.75 1764.63,-2332.42 1840,-2312 1934.02,-2286.53 2034.76,-2230.29 2086.45,-2199.04"/>
<polygon fill="blue" stroke="blue" points="2088.5,-2201.88 2095.22,-2193.69 2084.86,-2195.91 2088.5,-2201.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node159"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="1590,-2303 1430,-2303 1430,-2267 1590,-2267 1590,-2303"/>
<text text-anchor="middle" x="1510" y="-2281.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1590.01,-2282.91C1657.02,-2280.09 1755.44,-2273.48 1840,-2258 1929.99,-2241.53 2032.52,-2208.2 2085.52,-2189.85"/>
<polygon fill="blue" stroke="blue" points="2086.85,-2193.09 2095.14,-2186.5 2084.54,-2186.48 2086.85,-2193.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node160"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="1619,-2249 1401,-2249 1401,-2213 1619,-2213 1619,-2249"/>
<text text-anchor="middle" x="1510" y="-2227.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1619.2,-2222.5C1683.4,-2217.36 1766.36,-2210.55 1840,-2204 1928.02,-2196.17 2031.43,-2186 2085.08,-2180.65"/>
<polygon fill="blue" stroke="blue" points="2085.52,-2184.13 2095.12,-2179.65 2084.82,-2177.16 2085.52,-2184.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node161"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="1645.5,-2195 1374.5,-2195 1374.5,-2159 1645.5,-2159 1645.5,-2195"/>
<text text-anchor="middle" x="1510" y="-2173.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1645.73,-2177C1787.33,-2177 2001.01,-2177 2085.39,-2177"/>
<polygon fill="blue" stroke="blue" points="2085.49,-2180.5 2095.49,-2177 2085.49,-2173.5 2085.49,-2180.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node162"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="1624,-2141 1396,-2141 1396,-2105 1624,-2105 1624,-2141"/>
<text text-anchor="middle" x="1510" y="-2119.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.09,-2131.9C1687.57,-2136.99 1768.22,-2143.61 1840,-2150 1928.02,-2157.83 2031.43,-2168 2085.08,-2173.35"/>
<polygon fill="blue" stroke="blue" points="2084.82,-2176.84 2095.12,-2174.35 2085.52,-2169.87 2084.82,-2176.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node163"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="1658.5,-2087 1361.5,-2087 1361.5,-2051 1658.5,-2051 1658.5,-2087"/>
<text text-anchor="middle" x="1510" y="-2065.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1658.81,-2074.88C1715.77,-2078.77 1781.23,-2085.24 1840,-2096 1929.99,-2112.47 2032.52,-2145.8 2085.52,-2164.15"/>
<polygon fill="blue" stroke="blue" points="2084.54,-2167.52 2095.14,-2167.5 2086.85,-2160.91 2084.54,-2167.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node164"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="1680.5,-2033 1339.5,-2033 1339.5,-1997 1680.5,-1997 1680.5,-2033"/>
<text text-anchor="middle" x="1510" y="-2011.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1680.83,-2017.1C1732.61,-2020.89 1789.25,-2028.25 1840,-2042 1934.02,-2067.47 2034.76,-2123.71 2086.45,-2154.96"/>
<polygon fill="blue" stroke="blue" points="2084.86,-2158.09 2095.22,-2160.31 2088.5,-2152.12 2084.86,-2158.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node165"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="1629.5,-1979 1390.5,-1979 1390.5,-1943 1629.5,-1943 1629.5,-1979"/>
<text text-anchor="middle" x="1510" y="-1957.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.71,-1956.41C1693.64,-1957.46 1772.92,-1964.53 1840,-1988 1944.52,-2024.57 2047.44,-2109.45 2094.67,-2151.89"/>
<polygon fill="blue" stroke="blue" points="2092.54,-2154.69 2102.29,-2158.82 2097.24,-2149.5 2092.54,-2154.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node166"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="1691,-2789 1329,-2789 1329,-2753 1691,-2753 1691,-2789"/>
<text text-anchor="middle" x="1510" y="-2767.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1691.19,-2761.83C1912.32,-2747.34 2271.01,-2712.28 2377,-2634 2529.82,-2521.14 2600.17,-2285.78 2620.5,-2204.96"/>
<polygon fill="blue" stroke="blue" points="2623.95,-2205.58 2622.94,-2195.03 2617.16,-2203.91 2623.95,-2205.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2149.51,-2177C2218.68,-2177 2409.95,-2177 2528.36,-2177"/>
<polygon fill="blue" stroke="blue" points="2528.52,-2180.5 2538.52,-2177 2528.52,-2173.5 2528.52,-2180.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node168"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="1656,-1925 1364,-1925 1364,-1889 1656,-1889 1656,-1925"/>
<text text-anchor="middle" x="1510" y="-1903.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1656.1,-1899.63C1715.13,-1901.48 1782.79,-1910.01 1840,-1934 1956.18,-1982.71 2058.81,-2098.35 2101.03,-2150.59"/>
<polygon fill="blue" stroke="blue" points="2098.54,-2153.07 2107.52,-2158.7 2104.01,-2148.7 2098.54,-2153.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node169"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1840,-2735 1180,-2735 1180,-2699 1840,-2699 1840,-2735"/>
<text text-anchor="middle" x="1510" y="-2713.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1840.21,-2710.69C2013.65,-2692.82 2221.93,-2646.91 2377,-2536 2502.74,-2446.06 2586.58,-2272.18 2615.65,-2204.71"/>
<polygon fill="blue" stroke="blue" points="2619.01,-2205.76 2619.7,-2195.18 2612.57,-2203.02 2619.01,-2205.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node170"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="1731,-1871 1289,-1871 1289,-1835 1731,-1835 1731,-1871"/>
<text text-anchor="middle" x="1510" y="-1849.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1731.04,-1848.77C1768.67,-1854.23 1806.41,-1863.9 1840,-1880 1968.57,-1941.64 2068.56,-2089.17 2105.77,-2150.04"/>
<polygon fill="blue" stroke="blue" points="2102.83,-2151.95 2110.99,-2158.7 2108.82,-2148.33 2102.83,-2151.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node171"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1729.5,-2681 1290.5,-2681 1290.5,-2645 1729.5,-2645 1729.5,-2681"/>
<text text-anchor="middle" x="1510" y="-2659.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1729.71,-2654.46C1766.83,-2650.33 1804.74,-2644.42 1840,-2636 2090.69,-2576.1 2160.85,-2557.41 2377,-2417 2473.82,-2354.1 2565.96,-2250.64 2606.04,-2202.78"/>
<polygon fill="blue" stroke="blue" points="2608.76,-2204.97 2612.46,-2195.05 2603.38,-2200.5 2608.76,-2204.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node172"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="1640.5,-2627 1379.5,-2627 1379.5,-2591 1640.5,-2591 1640.5,-2627"/>
<text text-anchor="middle" x="1510" y="-2605.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1640.85,-2622.61C1704.53,-2623.46 1780.19,-2615.36 1840,-2582 1858.32,-2571.78 1851.86,-2557.4 1868,-2544 2088.05,-2361.24 2414.47,-2243.63 2556.6,-2198.22"/>
<polygon fill="blue" stroke="blue" points="2558.04,-2201.43 2566.52,-2195.07 2555.92,-2194.76 2558.04,-2201.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node173"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="1611.5,-1817 1408.5,-1817 1408.5,-1781 1611.5,-1781 1611.5,-1817"/>
<text text-anchor="middle" x="1510" y="-1795.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.74,-1787.27C1680.01,-1783.95 1770.16,-1788.89 1840,-1826 1981.36,-1901.1 2076.78,-2080.88 2109.24,-2149.63"/>
<polygon fill="blue" stroke="blue" points="2106.17,-2151.35 2113.56,-2158.94 2112.52,-2148.39 2106.17,-2151.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node174"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="1633.5,-2573 1386.5,-2573 1386.5,-2537 1633.5,-2537 1633.5,-2573"/>
<text text-anchor="middle" x="1510" y="-2551.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1593.31,-2573.02C1666.9,-2583.97 1773.15,-2586.28 1840,-2528 1883.24,-2490.3 1838.91,-2451.44 1868,-2402 1923.26,-2308.07 2031.23,-2232.3 2086.73,-2197.56"/>
<polygon fill="blue" stroke="blue" points="2088.82,-2200.38 2095.49,-2192.15 2085.14,-2194.43 2088.82,-2200.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node175"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="1579.5,-2519 1440.5,-2519 1440.5,-2483 1579.5,-2483 1579.5,-2519"/>
<text text-anchor="middle" x="1510" y="-2497.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1579.73,-2514.96C1651.87,-2525.51 1765.01,-2529.94 1840,-2474 1867.52,-2453.47 1848.39,-2430.18 1868,-2402 1929.6,-2313.46 2032.95,-2236.36 2086.68,-2199.71"/>
<polygon fill="blue" stroke="blue" points="2088.85,-2202.47 2095.18,-2193.97 2084.93,-2196.67 2088.85,-2202.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node176"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="1648.5,-3059 1371.5,-3059 1371.5,-3023 1648.5,-3023 1648.5,-3059"/>
<text text-anchor="middle" x="1510" y="-3037.3" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1590.45,-3059.06C1757.01,-3091.92 2146.37,-3141.85 2377,-2953 2619.15,-2754.72 2629.5,-2320.03 2627.83,-2205.25"/>
<polygon fill="blue" stroke="blue" points="2631.33,-2205.09 2627.64,-2195.16 2624.33,-2205.23 2631.33,-2205.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node177"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="1654,-3005 1366,-3005 1366,-2969 1654,-2969 1654,-3005"/>
<text text-anchor="middle" x="1510" y="-2983.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1654.06,-2989.63C1870.92,-2990.68 2269.06,-2980.19 2377,-2893 2601.78,-2711.42 2624.89,-2314.96 2626.91,-2205.5"/>
<polygon fill="blue" stroke="blue" points="2630.42,-2205.3 2627.05,-2195.25 2623.42,-2205.2 2630.42,-2205.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node178"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="1707.5,-2951 1312.5,-2951 1312.5,-2915 1707.5,-2915 1707.5,-2951"/>
<text text-anchor="middle" x="1510" y="-2929.3" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1707.88,-2933.52C1931.02,-2930.14 2276.8,-2911.64 2377,-2832 2584.55,-2667.04 2619.9,-2308.62 2625.83,-2205.36"/>
<polygon fill="blue" stroke="blue" points="2629.33,-2205.28 2626.36,-2195.11 2622.34,-2204.92 2629.33,-2205.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node179"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="1620,-2465 1400,-2465 1400,-2429 1620,-2429 1620,-2465"/>
<text text-anchor="middle" x="1510" y="-2443.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1620.2,-2454.74C1686.24,-2455.42 1770.76,-2449.03 1840,-2420 1870.25,-2407.32 2029.89,-2261.61 2094.41,-2202.09"/>
<polygon fill="blue" stroke="blue" points="2096.82,-2204.63 2101.79,-2195.28 2092.07,-2199.49 2096.82,-2204.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node180"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="1622,-2897 1398,-2897 1398,-2861 1622,-2861 1622,-2897"/>
<text text-anchor="middle" x="1510" y="-2875.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1622.38,-2878.62C1829.15,-2875.74 2261.82,-2858.82 2377,-2769 2566.76,-2621.03 2614.23,-2302.16 2624.47,-2205.41"/>
<polygon fill="blue" stroke="blue" points="2627.98,-2205.53 2625.5,-2195.23 2621.01,-2204.83 2627.98,-2205.53"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node181"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="2194,-8111 2051,-8111 2051,-8075 2194,-8075 2194,-8111"/>
<text text-anchor="middle" x="2122.5" y="-8089.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<g id="a_node183"><a xlink:title="pub fn username_proof(username: &amp;str, randomness: &amp;[u8; 32]) &#45;&gt; Result&lt;Vec&lt;u8&gt;, UsernameError&gt; { &#160;&#160;&#160;&#160;Username::new(username)?.proof(randomness) }">
<polygon fill="white" stroke="black" points="2692,-8111 2564,-8111 2564,-8075 2692,-8075 2692,-8111"/>
<text text-anchor="middle" x="2628" y="-8089.3" font-family="Helvetica,sans-Serif" font-size="14.00">username_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2194.04,-8093C2288.96,-8093 2457,-8093 2553.44,-8093"/>
<polygon fill="blue" stroke="blue" points="2553.69,-8096.5 2563.69,-8093 2553.69,-8089.5 2553.69,-8096.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.96,-8111.01C2241.98,-8125.64 2324.02,-8145.09 2397,-8153 2499.07,-8164.06 2766,-8196.48 2859,-8153 2910.03,-8129.14 2946.93,-8071.58 2965.31,-8037.2"/>
<polygon fill="blue" stroke="blue" points="2968.5,-8038.66 2970,-8028.17 2962.29,-8035.43 2968.5,-8038.66"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2194.18,-8100.96C2368.7,-8119.86 2809.52,-8162.78 2859,-8120 2905.55,-8079.75 2838.18,-8029.04 2879,-7983 2889.57,-7971.08 2904.82,-7964.18 2920.21,-7960.26"/>
<polygon fill="blue" stroke="blue" points="2921.26,-7963.62 2930.3,-7958.09 2919.79,-7956.77 2921.26,-7963.62"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node182"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1547.5,-8111 1472.5,-8111 1472.5,-8075 1547.5,-8075 1547.5,-8111"/>
<text text-anchor="middle" x="1510" y="-8089.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1547.81,-8093C1644.42,-8093 1906.93,-8093 2040.74,-8093"/>
<polygon fill="blue" stroke="blue" points="2040.93,-8096.5 2050.93,-8093 2040.93,-8089.5 2040.93,-8096.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username_proof().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.46,-8089.64C2739.2,-8085.99 2803.94,-8078.45 2859,-8063 2888.38,-8054.75 2919.87,-8040.55 2943.14,-8028.92"/>
<polygon fill="blue" stroke="blue" points="2944.94,-8031.93 2952.27,-8024.28 2941.77,-8025.69 2944.94,-8031.93"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.84,-8009.75C3027.84,-8008.03 3056.25,-8002 3072,-7983 3159.99,-7876.84 3200.92,-6839.7 3207.53,-6655.05"/>
<polygon fill="blue" stroke="blue" points="3211.03,-6655.16 3207.89,-6645.04 3204.03,-6654.91 3211.03,-6655.16"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3001.68,-7937.87C3063.53,-7883.51 3244.15,-7714.22 3319,-7530 3385.85,-7365.48 3405.53,-6790.58 3409.28,-6655.55"/>
<polygon fill="blue" stroke="blue" points="3412.78,-6655.31 3409.56,-6645.22 3405.79,-6655.12 3412.78,-6655.31"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node186"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="2755,-8028 2501,-8028 2501,-7992 2755,-7992 2755,-8028"/>
<text text-anchor="middle" x="2628" y="-8006.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2755.18,-8010C2821.47,-8010 2897.89,-8010 2941.96,-8010"/>
<polygon fill="blue" stroke="blue" points="2942.18,-8013.5 2952.18,-8010 2942.18,-8006.5 2942.18,-8013.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2755.28,-7997.6C2789.08,-7993.62 2825.51,-7988.73 2859,-7983 2879.17,-7979.55 2901.07,-7974.87 2920.53,-7970.39"/>
<polygon fill="blue" stroke="blue" points="2921.53,-7973.75 2930.47,-7968.07 2919.94,-7966.93 2921.53,-7973.75"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2773.5,-7974 2482.5,-7974 2482.5,-7938 2773.5,-7938 2773.5,-7974"/>
<text text-anchor="middle" x="2628" y="-7952.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2773.8,-7970.64C2802.13,-7974.17 2831.56,-7978.3 2859,-7983 2887.12,-7987.81 2918.59,-7995 2942.17,-8000.74"/>
<polygon fill="blue" stroke="blue" points="2941.53,-8004.19 2952.08,-8003.19 2943.21,-7997.4 2941.53,-8004.19"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2773.68,-7956C2825.16,-7956 2880.23,-7956 2920.29,-7956"/>
<polygon fill="blue" stroke="blue" points="2920.39,-7959.5 2930.39,-7956 2920.39,-7952.5 2920.39,-7959.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node188"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1547.5,-7509 1472.5,-7509 1472.5,-7473 1547.5,-7473 1547.5,-7509"/>
<text text-anchor="middle" x="1510" y="-7487.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node189"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="2194.5,-7509 2050.5,-7509 2050.5,-7473 2194.5,-7473 2194.5,-7509"/>
<text text-anchor="middle" x="2122.5" y="-7487.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1547.81,-7491C1644.29,-7491 1906.25,-7491 2040.22,-7491"/>
<polygon fill="blue" stroke="blue" points="2040.42,-7494.5 2050.42,-7491 2040.42,-7487.5 2040.42,-7494.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<g id="a_node190"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;ServerDerivedKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; EndorsementR...">
<polygon fill="white" stroke="black" points="2655,-7619 2601,-7619 2601,-7583 2655,-7583 2655,-7619"/>
<text text-anchor="middle" x="2628" y="-7597.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2194.6,-7505.51C2245.45,-7515.97 2315.5,-7530.56 2377,-7544 2453.17,-7560.65 2542.14,-7581.2 2590.74,-7592.52"/>
<polygon fill="blue" stroke="blue" points="2590.23,-7595.99 2600.76,-7594.85 2591.82,-7589.17 2590.23,-7595.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node194"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="2661,-7700 2595,-7700 2595,-7664 2661,-7664 2661,-7700"/>
<text text-anchor="middle" x="2628" y="-7678.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2194.74,-7486.56C2251.5,-7487.07 2329.14,-7497.44 2377,-7544 2404.51,-7570.76 2369.82,-7600.91 2397,-7628 2446.87,-7677.71 2533.28,-7685.03 2584.81,-7684.46"/>
<polygon fill="blue" stroke="blue" points="2585.01,-7687.96 2594.93,-7684.25 2584.86,-7680.96 2585.01,-7687.96"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint][MultiscalarMul]multiscalar_mul().</title>
<path fill="none" stroke="blue" d="M2647.66,-7582.69C2716.08,-7517.55 2962.09,-7301 3208.5,-7301 3208.5,-7301 3208.5,-7301 3412,-7301 3659.81,-7301 3894.83,-7065.61 3967.25,-6985.97"/>
<polygon fill="blue" stroke="blue" points="3970.04,-6988.11 3974.13,-6978.33 3964.84,-6983.42 3970.04,-6988.11"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2655.05,-7590.6C2704.22,-7569.47 2810.14,-7516.52 2859,-7435 2893.12,-7378.07 2833.5,-7335.32 2879,-7287 2938.93,-7223.35 3009.52,-7310.15 3072,-7249 3158.98,-7163.88 3197.31,-6765.1 3206.34,-6655.14"/>
<polygon fill="blue" stroke="blue" points="3209.83,-6655.39 3207.14,-6645.14 3202.85,-6654.83 3209.83,-6655.39"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node191"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="2166.5,-7754 2078.5,-7754 2078.5,-7718 2166.5,-7718 2166.5,-7754"/>
<text text-anchor="middle" x="2122.5" y="-7732.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2166.63,-7744.08C2221.5,-7751.79 2316.39,-7756.15 2377,-7709 2397.2,-7693.29 2377.82,-7671.94 2397,-7655 2451.42,-7606.94 2540.55,-7599.53 2590.37,-7599.53"/>
<polygon fill="blue" stroke="blue" points="2590.63,-7603.03 2600.67,-7599.63 2590.71,-7596.03 2590.63,-7603.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2166.56,-7731.43C2217,-7726.08 2303.07,-7716.93 2377,-7709 2449.94,-7701.18 2534.85,-7691.99 2584.58,-7686.6"/>
<polygon fill="blue" stroke="blue" points="2585.08,-7690.07 2594.64,-7685.51 2584.32,-7683.11 2585.08,-7690.07"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="2173,-7700 2072,-7700 2072,-7664 2173,-7664 2173,-7700"/>
<text text-anchor="middle" x="2122.5" y="-7678.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2173.25,-7678.28C2224.52,-7674.07 2306.65,-7666.31 2377,-7655 2453.79,-7642.65 2542.53,-7621.92 2590.92,-7610.06"/>
<polygon fill="blue" stroke="blue" points="2592.03,-7613.39 2600.9,-7607.6 2590.35,-7606.6 2592.03,-7613.39"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2173.16,-7682C2272.06,-7682 2492.07,-7682 2584.65,-7682"/>
<polygon fill="blue" stroke="blue" points="2584.77,-7685.5 2594.77,-7682 2584.77,-7678.5 2584.77,-7685.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node193"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="2194,-7646 2051,-7646 2051,-7610 2194,-7610 2194,-7646"/>
<text text-anchor="middle" x="2122.5" y="-7624.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2194.04,-7624.22C2302.81,-7618.38 2507.58,-7607.4 2590.63,-7602.95"/>
<polygon fill="blue" stroke="blue" points="2591.03,-7606.43 2600.83,-7602.4 2590.66,-7599.44 2591.03,-7606.43"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2194.26,-7635.51C2245.1,-7640.91 2315.28,-7648.38 2377,-7655 2449.94,-7662.82 2534.85,-7672.01 2584.58,-7677.4"/>
<polygon fill="blue" stroke="blue" points="2584.32,-7680.89 2594.64,-7678.49 2585.08,-7673.93 2584.32,-7680.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2661.07,-7681.29C2708.16,-7678.82 2797.12,-7668.64 2859,-7628 3145.49,-7439.83 3174.1,-7319.62 3319,-7009 3376.76,-6885.18 3399.85,-6721.12 3407.16,-6655.7"/>
<polygon fill="blue" stroke="blue" points="3410.68,-6655.68 3408.27,-6645.37 3403.72,-6654.93 3410.68,-6655.68"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node195"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="2220.5,-7592 2024.5,-7592 2024.5,-7556 2220.5,-7556 2220.5,-7592"/>
<text text-anchor="middle" x="2122.5" y="-7570.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.58,-7579.21C2333.44,-7585.26 2514,-7594.94 2590.67,-7599.05"/>
<polygon fill="blue" stroke="blue" points="2590.61,-7602.55 2600.78,-7599.59 2590.98,-7595.56 2590.61,-7602.55"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.63,-7566.41C2270.36,-7566.8 2330.13,-7574.19 2377,-7601 2389.96,-7608.42 2384.52,-7619.79 2397,-7628 2454.62,-7665.91 2535.78,-7677.32 2584.7,-7680.68"/>
<polygon fill="blue" stroke="blue" points="2584.73,-7684.19 2594.92,-7681.3 2585.15,-7677.2 2584.73,-7684.19"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<g id="a_node196"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; IssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho ...">
<polygon fill="white" stroke="black" points="3006.5,-4135 2952.5,-4135 2952.5,-4099 3006.5,-4099 3006.5,-4135"/>
<text text-anchor="middle" x="2979.5" y="-4113.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.64,-4117.03C3027.82,-4118.6 3056.58,-4124.52 3072,-4144 3152.22,-4245.38 3201.83,-6331.25 3207.88,-6598.83"/>
<polygon fill="blue" stroke="blue" points="3204.38,-6598.98 3208.1,-6608.9 3211.38,-6598.82 3204.38,-6598.98"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<g id="a_node197"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Even though it would work with a borrow, this deliberately consumes &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// IssuanceProof to indicate that ...">
<polygon fill="white" stroke="black" points="3007.5,-4189 2951.5,-4189 2951.5,-4153 3007.5,-4153 3007.5,-4189"/>
<text text-anchor="middle" x="2979.5" y="-4167.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.61,-4181.23C3027.65,-4189.97 3054.4,-4204.27 3072,-4224 3254.96,-4429.14 3256.29,-4523.38 3319,-4791 3404.48,-5155.8 3409.71,-6395.97 3409.99,-6598.83"/>
<polygon fill="blue" stroke="blue" points="3406.49,-6598.97 3410,-6608.96 3413.49,-6598.96 3406.49,-6598.97"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<g id="a_node198"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: BlindedIssuanceProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Credential, VerificationFail...">
<polygon fill="white" stroke="black" points="3007.5,-4302 2951.5,-4302 2951.5,-4266 3007.5,-4266 3007.5,-4302"/>
<text text-anchor="middle" x="2979.5" y="-4280.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.82,-4284.21C3028.8,-4285.97 3056.7,-4292.06 3072,-4311 3105.6,-4352.61 3101.65,-4737.89 3108,-4791 3196.52,-5531.71 3371.08,-6430.08 3404.43,-6598.94"/>
<polygon fill="blue" stroke="blue" points="3401.04,-6599.86 3406.41,-6608.99 3407.91,-6598.5 3401.04,-6599.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="node199" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<g id="a_node199"><a xlink:title=" &#160;&#160;&#160;pub fn issue( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blinding_key: &amp;BlindingPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; BlindedIssuanceProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="3006.5,-4356 2952.5,-4356 2952.5,-4320 3006.5,-4320 3006.5,-4356"/>
<text text-anchor="middle" x="2979.5" y="-4334.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2982.3,-4356.09C3002.22,-4556.11 3181.1,-6351.97 3205.7,-6598.9"/>
<polygon fill="blue" stroke="blue" points="3202.22,-6599.27 3206.69,-6608.88 3209.19,-6598.58 3202.22,-6599.27"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="node200" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<g id="a_node200"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mut self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proof: &amp;PresentationProof, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.finalize_public_attrs(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3007.5,-3968 2951.5,-3968 2951.5,-3932 3007.5,-3932 3007.5,-3968"/>
<text text-anchor="middle" x="2979.5" y="-3946.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.84,-3949.02C3074.11,-3948.32 3243.45,-3956.89 3319,-4057 3399.62,-4163.82 3409.05,-6325.56 3409.92,-6598.71"/>
<polygon fill="blue" stroke="blue" points="3406.42,-6598.98 3409.95,-6608.97 3413.42,-6598.96 3406.42,-6598.98"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="node201" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<g id="a_node201"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: &amp;Credential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: [u8; RANDOMNESS_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; PresentationProof { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credenti...">
<polygon fill="white" stroke="black" points="3014,-4022 2945,-4022 2945,-3986 3014,-3986 3014,-4022"/>
<text text-anchor="middle" x="2979.5" y="-4000.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3010.55,-4022.05C3031.82,-4036.65 3058.83,-4059.3 3072,-4087 3185.4,-4325.48 3206.06,-6335.69 3208.28,-6598.67"/>
<polygon fill="blue" stroke="blue" points="3204.78,-6598.93 3208.36,-6608.91 3211.78,-6598.88 3204.78,-6598.93"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node202" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node202"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1068.5,-6712 993.5,-6712 993.5,-6676 1068.5,-6676 1068.5,-6712"/>
<text text-anchor="middle" x="1031" y="-6690.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node203" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node203"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="1655,-6766 1365,-6766 1365,-6730 1655,-6730 1655,-6766"/>
<text text-anchor="middle" x="1510" y="-6744.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.66,-6702.22C1096.8,-6708.25 1136.68,-6716.19 1172,-6721 1231.39,-6729.08 1297.02,-6735.01 1354.47,-6739.22"/>
<polygon fill="blue" stroke="blue" points="1354.5,-6742.73 1364.72,-6739.96 1355,-6735.75 1354.5,-6742.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node204" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node204"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="1618,-6712 1402,-6712 1402,-6676 1618,-6676 1618,-6712"/>
<text text-anchor="middle" x="1510" y="-6690.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.64,-6694C1136.79,-6694 1285.74,-6694 1391.5,-6694"/>
<polygon fill="blue" stroke="blue" points="1391.6,-6697.5 1401.6,-6694 1391.6,-6690.5 1391.6,-6697.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node205" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node205"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="1624,-6658 1396,-6658 1396,-6622 1624,-6622 1624,-6658"/>
<text text-anchor="middle" x="1510" y="-6636.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1068.66,-6685.78C1096.8,-6679.75 1136.68,-6671.81 1172,-6667 1242.52,-6657.4 1321.85,-6650.84 1385.82,-6646.59"/>
<polygon fill="blue" stroke="blue" points="1386.2,-6650.07 1395.95,-6645.93 1385.74,-6643.09 1386.2,-6650.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.15,-6732.78C1721.35,-6734.26 1794.98,-6749.49 1840,-6801 1880.19,-6846.99 1826.59,-7855.11 1868,-7900 1923.09,-7959.72 2029.52,-7947.68 2085.34,-7936.08"/>
<polygon fill="blue" stroke="blue" points="2086.12,-7939.49 2095.15,-7933.94 2084.63,-7932.65 2086.12,-7939.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.18,-6732.76C1721.39,-6734.23 1795.01,-6749.46 1840,-6801 1882.14,-6849.27 1824.58,-7906.88 1868,-7954 1905.47,-7994.67 1966.75,-8002.07 2019.68,-7998.99"/>
<polygon fill="blue" stroke="blue" points="2020.07,-8002.47 2029.8,-7998.27 2019.57,-7995.49 2020.07,-8002.47"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.12,-6732.8C1721.32,-6734.29 1794.94,-6749.52 1840,-6801 1916.5,-6888.41 1789.19,-7760.68 1868,-7846 1905.31,-7886.39 1966.11,-7893.94 2018.82,-7891.01"/>
<polygon fill="blue" stroke="blue" points="2019.16,-7894.49 2028.9,-7890.31 2018.69,-7887.51 2019.16,-7894.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node239" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node239"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="2273.5,-7837 1971.5,-7837 1971.5,-7801 2273.5,-7801 2273.5,-7837"/>
<text text-anchor="middle" x="2122.5" y="-7815.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1655.09,-6732.83C1721.27,-6734.33 1794.9,-6749.55 1840,-6801 1912.39,-6883.59 1793.89,-7707.95 1868,-7789 1892.05,-7815.31 1926.02,-7828.05 1961.29,-7833.14"/>
<polygon fill="blue" stroke="blue" points="1960.91,-7836.62 1971.27,-7834.38 1961.78,-7829.68 1960.91,-7836.62"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="node208" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<g id="a_node208"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPniZkc, ZkGroupV...">
<polygon fill="white" stroke="black" points="2155.5,-7023 2089.5,-7023 2089.5,-6987 2155.5,-6987 2155.5,-7023"/>
<text text-anchor="middle" x="2122.5" y="-7001.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1584.94,-6675.99C1659.75,-6662.6 1773.58,-6656.33 1840,-6721 1922.32,-6801.16 1786.66,-6896.85 1868,-6978 1923.31,-7033.18 2022.86,-7025.1 2079.36,-7014.77"/>
<polygon fill="blue" stroke="blue" points="2080.23,-7018.16 2089.38,-7012.82 2078.9,-7011.29 2080.23,-7018.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="node211" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<g id="a_node211"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;params: &amp;ServerSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailu...">
<polygon fill="white" stroke="black" points="2150.5,-6861 2094.5,-6861 2094.5,-6825 2150.5,-6825 2150.5,-6861"/>
<text text-anchor="middle" x="2122.5" y="-6839.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1600.67,-6675.96C1673.18,-6666.8 1773.76,-6667.11 1840,-6721 1874.14,-6748.78 1834.2,-6787.81 1868,-6816 1929.31,-6867.13 2030.07,-6859.61 2084.25,-6850.71"/>
<polygon fill="blue" stroke="blue" points="2084.88,-6854.15 2094.13,-6848.99 2083.67,-6847.26 2084.88,-6854.15"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.25,-6681.06C1685.94,-6677.94 1772.93,-6683.59 1840,-6721 1858.32,-6731.22 1849.87,-6748.45 1868,-6759 1922.52,-6790.71 1994.78,-6796.44 2048.19,-6795.27"/>
<polygon fill="blue" stroke="blue" points="2048.39,-6798.76 2058.28,-6794.96 2048.17,-6791.76 2048.39,-6798.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="node216" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<g id="a_node216"><a xlink:title=" &#160;&#160;&#160;pub fn present( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_params: &amp;ServerPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentialWithPniZkcPr...">
<polygon fill="white" stroke="black" points="2157,-6969 2088,-6969 2088,-6933 2157,-6933 2157,-6969"/>
<text text-anchor="middle" x="2122.5" y="-6947.3" font-family="Helvetica,sans-Serif" font-size="14.00">present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1587,-6675.95C1661.53,-6663.18 1773.4,-6657.97 1840,-6721 1906.15,-6783.6 1802.61,-6860.6 1868,-6924 1923.49,-6977.8 2021.24,-6970.76 2077.77,-6960.86"/>
<polygon fill="blue" stroke="blue" points="2078.63,-6964.26 2087.82,-6958.99 2077.35,-6957.37 2078.63,-6964.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1610.33,-6658.02C1681.92,-6665.13 1776.69,-6661.69 1840,-6610 1873.44,-6582.7 1834.77,-6544.55 1868,-6517 1896.19,-6493.63 1932.62,-6482.55 1969.04,-6478.25"/>
<polygon fill="blue" stroke="blue" points="1969.71,-6481.7 1979.3,-6477.21 1969,-6474.73 1969.71,-6481.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1589.94,-6658.03C1664.82,-6670.02 1775.23,-6673.59 1840,-6610 1921.36,-6530.13 1787.25,-6435.49 1868,-6355 1884.25,-6338.81 1904.31,-6328.06 1925.97,-6321.23"/>
<polygon fill="blue" stroke="blue" points="1927.03,-6324.56 1935.68,-6318.44 1925.11,-6317.83 1927.03,-6324.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="node245" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<g id="a_node245"><a xlink:title=" &#160;&#160;&#160;pub fn verify_expiring_profile_key_credential_presentation( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: api::groups::GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;presentation: &amp;api::profiles::ExpiringProfileKeyCred...">
<polygon fill="white" stroke="black" points="2812.5,-6292 2443.5,-6292 2443.5,-6256 2812.5,-6256 2812.5,-6292"/>
<text text-anchor="middle" x="2628" y="-6270.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_expiring_profile_key_credential_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1586.13,-6658.03C1661.63,-6671.2 1775.75,-6676.72 1840,-6610 1880.52,-6567.92 1825.61,-6125.19 1868,-6085 2032.17,-5929.35 2162.52,-6013.05 2377,-6085 2474.12,-6117.58 2563.61,-6204.47 2604.16,-6248.16"/>
<polygon fill="blue" stroke="blue" points="2601.82,-6250.78 2611.16,-6255.79 2606.98,-6246.06 2601.82,-6250.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.72,-6658.02C1670.53,-6668.16 1775.11,-6668.86 1840,-6610 1889.26,-6565.31 1819.08,-6508.06 1868,-6463 1897.19,-6436.12 1937.02,-6424.75 1976.46,-6421.33"/>
<polygon fill="blue" stroke="blue" points="1976.75,-6424.82 1986.48,-6420.63 1976.26,-6417.84 1976.75,-6424.82"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1624.04,-6642.22C1714.19,-6643.99 1842.05,-6646.51 1945.56,-6648.54"/>
<polygon fill="blue" stroke="blue" points="1945.75,-6652.05 1955.82,-6648.74 1945.89,-6645.05 1945.75,-6652.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPniResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2116.2,-5034.09C2080.95,-5136.32 1907.89,-5652.82 1854,-6091 1848.05,-6139.41 1830.63,-6926.19 1854,-6969 1895.18,-7044.43 2014.37,-7030.52 2079.22,-7016.38"/>
<polygon fill="blue" stroke="blue" points="2080.17,-7019.75 2089.14,-7014.12 2078.62,-7012.93 2080.17,-7019.75"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/impl#[AuthCredentialWithPni]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2087.69,-4952.53C2025.32,-4937.92 1897.05,-4919.15 1854,-4998 1841.24,-5021.37 1841.24,-6891.63 1854,-6915 1894.86,-6989.84 2012.51,-6976.73 2077.7,-6962.71"/>
<polygon fill="blue" stroke="blue" points="2078.7,-6966.07 2087.69,-6960.47 2077.16,-6959.24 2078.7,-6966.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="node215" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<g id="a_node215"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn receive_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;AuthCredentialWithPni...">
<polygon fill="white" stroke="black" points="2689.5,-6969 2566.5,-6969 2566.5,-6933 2689.5,-6933 2689.5,-6969"/>
<text text-anchor="middle" x="2628" y="-6947.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2155.52,-7001.61C2203.61,-6996.5 2297.35,-6986.54 2377,-6978 2437.51,-6971.51 2506.24,-6964.08 2556.31,-6958.66"/>
<polygon fill="blue" stroke="blue" points="2556.82,-6962.13 2566.38,-6957.57 2556.06,-6955.17 2556.82,-6962.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="node209" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<g id="a_node209"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn present_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;CredentialPublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_secret_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;&#160;) &#45;&gt; AuthCredentia...">
<polygon fill="white" stroke="black" points="2691,-6915 2565,-6915 2565,-6879 2691,-6879 2691,-6915"/>
<text text-anchor="middle" x="2628" y="-6893.3" font-family="Helvetica,sans-Serif" font-size="14.00">present_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2691.06,-6909.69C2744.06,-6916.51 2818.02,-6915.74 2859,-6870 2884.79,-6841.21 2862.49,-4121.95 2879,-4087 2890.99,-4061.62 2914.94,-4041.25 2936.34,-4027.05"/>
<polygon fill="blue" stroke="blue" points="2938.44,-4029.86 2945,-4021.54 2934.68,-4023.96 2938.44,-4029.86"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present(). -->
<g id="node210" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().</title>
<g id="a_node210"><a xlink:title=" &#160;&#160;&#160;fn issue_receive_present() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const ACI: Aci = Aci::from_uuid_bytes([b&#39;a&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const PNI: Pni = Pni::from_uuid_bytes([b&#39;p&#39;; 16]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const REDEMPTION_TIME: Timestamp = Timest...">
<polygon fill="white" stroke="black" points="2206.5,-6915 2038.5,-6915 2038.5,-6879 2206.5,-6879 2206.5,-6915"/>
<text text-anchor="middle" x="2122.5" y="-6893.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_receive_present</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2206.64,-6897C2303.7,-6897 2462.63,-6897 2554.74,-6897"/>
<polygon fill="blue" stroke="blue" points="2554.82,-6900.5 2564.82,-6897 2554.82,-6893.5 2554.82,-6900.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="node212" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<g id="a_node212"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn verify_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_public_params: &amp;GroupPublicParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), Zk...">
<polygon fill="white" stroke="black" points="2684.5,-6861 2571.5,-6861 2571.5,-6825 2684.5,-6825 2684.5,-6861"/>
<text text-anchor="middle" x="2628" y="-6839.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2206.56,-6888.18C2256.06,-6882.92 2320.12,-6876.1 2377,-6870 2439.54,-6863.29 2510.87,-6855.58 2561.28,-6850.12"/>
<polygon fill="blue" stroke="blue" points="2561.83,-6853.59 2571.4,-6849.03 2561.08,-6846.63 2561.83,-6853.59"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="node213" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<g id="a_node213"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn issue_credential_for_key( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci: Aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni: Pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;redemption_time: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential_key: &amp;CredentialKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;randomness: RandomnessBytes, &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2720.5,-6807 2535.5,-6807 2535.5,-6771 2720.5,-6771 2720.5,-6807"/>
<text text-anchor="middle" x="2628" y="-6785.3" font-family="Helvetica,sans-Serif" font-size="14.00">issue_credential_for_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2206.77,-6909.11C2260.66,-6912.29 2329.4,-6907.03 2377,-6870 2397.2,-6854.29 2376.88,-6831.82 2397,-6816 2432.69,-6787.93 2481.67,-6779.37 2525.25,-6778.57"/>
<polygon fill="blue" stroke="blue" points="2525.34,-6782.07 2535.33,-6778.52 2525.31,-6775.07 2525.34,-6782.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/test/issue_receive_present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2206.56,-6905.82C2256.06,-6911.08 2320.12,-6917.9 2377,-6924 2437.51,-6930.49 2506.24,-6937.92 2556.31,-6943.34"/>
<polygon fill="blue" stroke="blue" points="2556.06,-6946.83 2566.38,-6944.43 2556.82,-6939.87 2556.06,-6946.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2150.57,-6843C2227.62,-6843 2449.75,-6843 2561.36,-6843"/>
<polygon fill="blue" stroke="blue" points="2561.48,-6846.5 2571.48,-6843 2561.48,-6839.5 2561.48,-6846.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2684.67,-6854.82C2737.95,-6862.5 2816.35,-6863.61 2859,-6816 2911.62,-6757.26 2830.87,-4039.47 2879,-3977 2893.43,-3958.27 2919.45,-3951.68 2941.27,-3949.69"/>
<polygon fill="blue" stroke="blue" points="2941.5,-3953.18 2951.26,-3949.06 2941.06,-3946.2 2941.5,-3953.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2720.68,-6803.05C2769.13,-6804.86 2825.38,-6797 2859,-6759 2907.14,-6704.6 2834.65,-4201.53 2879,-4144 2893.62,-4125.03 2920.14,-4118.52 2942.13,-4116.62"/>
<polygon fill="blue" stroke="blue" points="2942.39,-4120.11 2952.17,-4116.03 2941.98,-4113.12 2942.39,-4120.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.5,-6789C2271.46,-6789 2423.74,-6789 2525.09,-6789"/>
<polygon fill="blue" stroke="blue" points="2525.34,-6792.5 2535.34,-6789 2525.34,-6785.5 2525.34,-6792.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive_for_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2689.5,-6963.48C2742.6,-6970.51 2817.61,-6970.18 2859,-6924 2883.75,-6896.38 2863.15,-4287.53 2879,-4254 2892.15,-4226.17 2919.67,-4204.38 2942.44,-4190.12"/>
<polygon fill="blue" stroke="blue" points="2944.45,-4193 2951.22,-4184.84 2940.84,-4187 2944.45,-4193"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present_for_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2157.13,-6947.43C2205.68,-6942.28 2298.23,-6932.45 2377,-6924 2436.9,-6917.58 2504.86,-6910.23 2554.79,-6904.83"/>
<polygon fill="blue" stroke="blue" points="2555.28,-6908.29 2564.85,-6903.74 2554.53,-6901.34 2555.28,-6908.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity(). -->
<g id="node217" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().</title>
<g id="a_node217"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP.add_seconds(60 * 60); // not on a day boundary! &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = Back...">
<polygon fill="white" stroke="black" points="2281,-4681 1964,-4681 1964,-4645 2281,-4645 2281,-4681"/>
<text text-anchor="middle" x="2122.5" y="-4659.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2281.22,-4672.73C2315.57,-4667.98 2349.75,-4657.2 2377,-4636 2397.2,-4620.29 2376.88,-4597.82 2397,-4582 2450.69,-4539.77 2534.43,-4541.7 2584.68,-4547.78"/>
<polygon fill="blue" stroke="blue" points="2584.5,-4551.29 2594.87,-4549.12 2585.42,-4544.35 2584.5,-4551.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2281.04,-4646.26C2312.81,-4642.87 2345.98,-4639.33 2377,-4636 2453.03,-4627.85 2542.04,-4618.21 2590.69,-4612.94"/>
<polygon fill="blue" stroke="blue" points="2591.16,-4616.41 2600.73,-4611.85 2590.41,-4609.45 2591.16,-4616.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id(). -->
<g id="node218" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().</title>
<g id="a_node218"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_backup_id() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params...">
<polygon fill="white" stroke="black" points="1643,-4627 1377,-4627 1377,-4591 1643,-4591 1643,-4627"/>
<text text-anchor="middle" x="1510" y="-4605.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_backup_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.77,-4627.02C1669.86,-4637.09 1773.35,-4638.09 1840,-4582 1877.94,-4550.07 1830.45,-4506.38 1868,-4474 1928.62,-4421.73 2030.1,-4429.83 2084.46,-4439.1"/>
<polygon fill="blue" stroke="blue" points="2083.89,-4442.55 2094.36,-4440.89 2085.14,-4435.67 2083.89,-4442.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="node225" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<g id="a_node225"><a xlink:title=" &#160;&#160;&#160;fn generate_credential(redemption_time: Timestamp) &#45;&gt; BackupAuthCredential { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// client generated materials; issuance request &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContex...">
<polygon fill="white" stroke="black" points="2199.5,-4573 2045.5,-4573 2045.5,-4537 2199.5,-4537 2199.5,-4573"/>
<text text-anchor="middle" x="2122.5" y="-4551.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.11,-4598.58C1703.2,-4593.73 1775.21,-4587.77 1840,-4582 1905.49,-4576.17 1979.49,-4569.05 2035.18,-4563.59"/>
<polygon fill="blue" stroke="blue" points="2035.75,-4567.05 2045.36,-4562.59 2035.07,-4560.08 2035.75,-4567.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_backup_id().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.23,-4626.52C1707.51,-4628.34 1782.98,-4619.94 1840,-4582 1862.51,-4567.02 1845.68,-4543.25 1868,-4528 1930.83,-4485.08 2023.6,-4487.63 2077.76,-4493.94"/>
<polygon fill="blue" stroke="blue" points="2077.37,-4497.41 2087.73,-4495.19 2078.25,-4490.47 2077.37,-4497.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2661.31,-4545.22C2712.1,-4528.06 2809.89,-4487.5 2859,-4417 2886.4,-4377.66 2846.46,-4346.2 2879,-4311 2894.77,-4293.94 2920.12,-4287.24 2941.28,-4284.78"/>
<polygon fill="blue" stroke="blue" points="2941.63,-4288.26 2951.27,-4283.88 2941,-4281.29 2941.63,-4288.26"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level(). -->
<g id="node220" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().</title>
<g id="a_node220"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_receipt_level() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_pa...">
<polygon fill="white" stroke="black" points="1651,-4573 1369,-4573 1369,-4537 1651,-4537 1651,-4573"/>
<text text-anchor="middle" x="1510" y="-4551.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_receipt_level</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.36,-4572.69C1713.79,-4573.59 1785.37,-4564.35 1840,-4528 1862.51,-4513.02 1845.68,-4489.25 1868,-4474 1933.44,-4429.3 2031.36,-4433.92 2084.3,-4440.74"/>
<polygon fill="blue" stroke="blue" points="2083.89,-4444.21 2094.27,-4442.12 2084.85,-4437.28 2083.89,-4444.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.06,-4555C1769.5,-4555 1935.42,-4555 2035.28,-4555"/>
<polygon fill="blue" stroke="blue" points="2035.33,-4558.5 2045.33,-4555 2035.33,-4551.5 2035.33,-4558.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_receipt_level().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1651.12,-4543.93C1709.53,-4539.2 1778.06,-4533.51 1840,-4528 1924.07,-4520.52 2022.18,-4510.91 2077.56,-4505.4"/>
<polygon fill="blue" stroke="blue" points="2078.11,-4508.87 2087.72,-4504.39 2077.42,-4501.9 2078.11,-4508.87"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2144.43,-4428.91C2195.68,-4383.11 2326.91,-4256.31 2377,-4118 2396.69,-4063.64 2355.34,-3638.09 2397,-3598 2470.98,-3526.81 2775.55,-3538.2 2859,-3598 2965.81,-3674.54 2978.31,-3851.99 2978.95,-3921.42"/>
<polygon fill="blue" stroke="blue" points="2975.45,-3921.61 2978.97,-3931.6 2982.45,-3921.6 2975.45,-3921.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2655.27,-4613.44C2701.18,-4619.7 2796.98,-4625.91 2859,-4582 2933.01,-4529.6 2963.25,-4418.29 2973.73,-4366.1"/>
<polygon fill="blue" stroke="blue" points="2977.18,-4366.68 2975.62,-4356.2 2970.31,-4365.37 2977.18,-4366.68"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration(). -->
<g id="node223" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().</title>
<g id="a_node223"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_expiration() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_params().get_publ...">
<polygon fill="white" stroke="black" points="1618,-4519 1402,-4519 1402,-4483 1618,-4483 1618,-4519"/>
<text text-anchor="middle" x="1510" y="-4497.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.08,-4492.59C1682.43,-4487.44 1765.93,-4480.59 1840,-4474 1927.57,-4466.21 2030.36,-4456.11 2084.23,-4450.74"/>
<polygon fill="blue" stroke="blue" points="2084.73,-4454.21 2094.34,-4449.73 2084.04,-4447.24 2084.73,-4454.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.08,-4509.41C1682.43,-4514.56 1765.93,-4521.41 1840,-4528 1905.49,-4533.83 1979.49,-4540.95 2035.18,-4546.41"/>
<polygon fill="blue" stroke="blue" points="2035.07,-4549.92 2045.36,-4547.41 2035.75,-4542.95 2035.07,-4549.92"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_expiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.04,-4501C1754.01,-4501 1982.41,-4501 2077.69,-4501"/>
<polygon fill="blue" stroke="blue" points="2077.83,-4504.5 2087.83,-4501 2077.83,-4497.5 2077.83,-4504.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp(). -->
<g id="node224" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().</title>
<g id="a_node224"><a xlink:title=" &#160;&#160;&#160;fn test_client_enforces_timestamp() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let redemption_time: Timestamp = DAY_ALIGNED_TIMESTAMP; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request_context = BackupAuthCredentialRequestContext::new(&amp;KEY, ACI.into()); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2239.5,-4627 2005.5,-4627 2005.5,-4591 2239.5,-4591 2239.5,-4627"/>
<text text-anchor="middle" x="2122.5" y="-4605.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_enforces_timestamp</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2239.61,-4596.67C2282.75,-4592.08 2332.11,-4586.81 2377,-4582 2449.94,-4574.18 2534.85,-4564.99 2584.58,-4559.6"/>
<polygon fill="blue" stroke="blue" points="2585.08,-4563.07 2594.64,-4558.51 2584.32,-4556.11 2585.08,-4563.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_client_enforces_timestamp().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2239.65,-4609C2352.86,-4609 2518.23,-4609 2590.7,-4609"/>
<polygon fill="blue" stroke="blue" points="2590.7,-4612.5 2600.7,-4609 2590.7,-4605.5 2590.7,-4612.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2199.7,-4555C2307.24,-4555 2499.89,-4555 2584.81,-4555"/>
<polygon fill="blue" stroke="blue" points="2584.87,-4558.5 2594.87,-4555 2584.87,-4551.5 2584.87,-4558.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2199.77,-4563.09C2250.09,-4568.44 2317.48,-4575.62 2377,-4582 2453.03,-4590.15 2542.04,-4599.79 2590.69,-4605.06"/>
<polygon fill="blue" stroke="blue" points="2590.41,-4608.55 2600.73,-4606.15 2591.16,-4601.59 2590.41,-4608.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption(). -->
<g id="node226" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().</title>
<g id="a_node226"><a xlink:title=" &#160;&#160;&#160;fn test_server_verify_wrong_redemption() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credential = generate_credential(DAY_ALIGNED_TIMESTAMP); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let valid_presentation = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential.present(&amp;server_secret_param...">
<polygon fill="white" stroke="black" points="1647.5,-4465 1372.5,-4465 1372.5,-4429 1647.5,-4429 1647.5,-4465"/>
<text text-anchor="middle" x="1510" y="-4443.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_verify_wrong_redemption</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.63,-4447C1788.52,-4447 1999.27,-4447 2084.12,-4447"/>
<polygon fill="blue" stroke="blue" points="2084.3,-4450.5 2094.3,-4447 2084.3,-4443.5 2084.3,-4450.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/generate_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.69,-4429.37C1710.97,-4428.06 1784.3,-4436.93 1840,-4474 1862.51,-4488.98 1845.68,-4512.75 1868,-4528 1916.5,-4561.13 1982.83,-4567.17 2035.48,-4565.3"/>
<polygon fill="blue" stroke="blue" points="2035.65,-4568.79 2045.48,-4564.84 2035.33,-4561.8 2035.65,-4568.79"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/tests/test_server_verify_wrong_redemption().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1647.9,-4457.81C1707,-4462.59 1776.92,-4468.39 1840,-4474 1924.07,-4481.48 2022.18,-4491.09 2077.56,-4496.6"/>
<polygon fill="blue" stroke="blue" points="2077.42,-4500.1 2087.72,-4497.61 2078.11,-4493.13 2077.42,-4500.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2157.04,-4509.54C2212.1,-4521.3 2321.09,-4534.72 2377,-4474 2408.84,-4439.41 2363.37,-3660.85 2397,-3628 2433.72,-3592.13 2821.68,-3592.76 2859,-3628 2887.24,-3654.67 2854.53,-3946.84 2879,-3977 2892.41,-3993.53 2914.83,-4000.53 2934.99,-4003.28"/>
<polygon fill="blue" stroke="blue" points="2934.66,-4006.77 2944.97,-4004.34 2935.39,-3999.81 2934.66,-4006.77"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.11,-3645.59C2744.65,-3639.29 2817.38,-3640.67 2859,-3685 2887.33,-3715.18 2857.69,-4021.52 2879,-4057 2893.12,-4080.5 2920.28,-4095.96 2942.67,-4105.29"/>
<polygon fill="blue" stroke="blue" points="2941.64,-4108.65 2952.23,-4109.04 2944.2,-4102.13 2941.64,-4108.65"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2656.15,-3823.17C2700.15,-3828.97 2789.16,-3843.52 2859,-3873 2891.2,-3886.59 2924.34,-3908.71 2947.53,-3925.76"/>
<polygon fill="blue" stroke="blue" points="2945.5,-3928.61 2955.6,-3931.79 2949.68,-3923 2945.5,-3928.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.63,-3758.44C2712.97,-3749.31 2807.48,-3741.04 2859,-3793 2887.96,-3822.21 2852.28,-3945.73 2879,-3977 2892.66,-3992.99 2914.75,-3999.99 2934.65,-4002.88"/>
<polygon fill="blue" stroke="blue" points="2934.46,-4006.39 2944.8,-4004.05 2935.26,-3999.43 2934.46,-4006.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2661.36,-3704.38C2711.77,-3694.65 2808.49,-3684.95 2859,-3739 2889.77,-3771.92 2850.75,-4108.9 2879,-4144 2893.75,-4162.34 2919.6,-4168.96 2941.25,-4171.06"/>
<polygon fill="blue" stroke="blue" points="2941.26,-4174.57 2951.48,-4171.77 2941.74,-4167.59 2941.26,-4174.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2656.16,-4370.56C2704.79,-4380.5 2806.53,-4392.79 2859,-4337 2913.89,-4278.63 2828.58,-4039.27 2879,-3977 2893.71,-3958.83 2919.32,-3952.17 2940.87,-3950.01"/>
<polygon fill="blue" stroke="blue" points="2941.33,-3953.49 2951.06,-3949.28 2940.83,-3946.5 2941.33,-3953.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2661.25,-4198.76C2707.78,-4195.58 2795.19,-4195.29 2859,-4229 2870.98,-4235.33 2867.69,-4244.54 2879,-4252 2897.83,-4264.42 2921.84,-4272.33 2941.56,-4277.17"/>
<polygon fill="blue" stroke="blue" points="2940.9,-4280.61 2951.42,-4279.43 2942.46,-4273.79 2940.9,-4280.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2662.67,-4317.6C2713.07,-4326.79 2807.65,-4335.13 2859,-4283 2889.72,-4251.81 2858.45,-4125.66 2879,-4087 2892.09,-4062.38 2915.82,-4042.15 2936.82,-4027.83"/>
<polygon fill="blue" stroke="blue" points="2938.88,-4030.66 2945.32,-4022.24 2935.04,-4024.81 2938.88,-4030.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2655.29,-4252.56C2700.39,-4248.01 2793.93,-4244.55 2859,-4283 2872.17,-4290.78 2866.45,-4302.27 2879,-4311 2897.64,-4323.97 2922.25,-4330.71 2942.33,-4334.22"/>
<polygon fill="blue" stroke="blue" points="2941.94,-4337.7 2952.36,-4335.77 2943.01,-4330.78 2941.94,-4337.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2149.55,-7933.65C2201.19,-7945.11 2316.73,-7961.78 2377,-7900 2415.15,-7860.9 2361.36,-7696.4 2397,-7655 2445.07,-7599.17 2538.92,-7595.1 2590.64,-7597.64"/>
<polygon fill="blue" stroke="blue" points="2590.5,-7601.14 2600.7,-7598.25 2590.92,-7594.15 2590.5,-7601.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2215.02,-7997C2269.29,-8000.91 2335.39,-7995.01 2377,-7954 2429.61,-7902.15 2353.6,-7848.78 2397,-7789 2441.88,-7727.19 2531.51,-7700.02 2584.67,-7688.92"/>
<polygon fill="blue" stroke="blue" points="2585.66,-7692.29 2594.78,-7686.91 2584.29,-7685.43 2585.66,-7692.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2216.02,-7885.84C2268.47,-7888 2332.33,-7881.37 2377,-7846 2398.05,-7829.33 2378.97,-7808.89 2397,-7789 2447.75,-7733.02 2533.77,-7704.02 2585,-7690.97"/>
<polygon fill="blue" stroke="blue" points="2585.89,-7694.36 2594.76,-7688.57 2584.22,-7687.56 2585.89,-7694.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2273.64,-7808.43C2307.96,-7804.03 2344.03,-7797.81 2377,-7789 2453.7,-7768.51 2537.51,-7728.77 2585.99,-7703.91"/>
<polygon fill="blue" stroke="blue" points="2587.64,-7707 2594.91,-7699.3 2584.42,-7700.78 2587.64,-7707"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="node265" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<g id="a_node265"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signature: SignatureBytes, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match poksho::verify_signature(&amp;signature, self.p...">
<polygon fill="white" stroke="black" points="2656,-8430 2600,-8430 2600,-8394 2656,-8394 2656,-8430"/>
<text text-anchor="middle" x="2628" y="-8408.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2186.68,-6205.95C2245.26,-6197.05 2330.22,-6195.46 2377,-6247 2416.92,-6290.98 2357.32,-8340.81 2397,-8385 2445,-8438.46 2538.05,-8430.44 2589.87,-8420.73"/>
<polygon fill="blue" stroke="blue" points="2590.85,-8424.1 2599.97,-8418.71 2589.48,-8417.24 2590.85,-8424.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="node255" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<g id="a_node255"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci_bytes: UidBytes, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;re...">
<polygon fill="white" stroke="black" points="3007.5,-6836 2951.5,-6836 2951.5,-6800 3007.5,-6800 3007.5,-6836"/>
<text text-anchor="middle" x="2979.5" y="-6814.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2265.89,-6481.43C2456.13,-6473.35 2778.64,-6472.51 2859,-6553 2896.5,-6590.56 2845.02,-6750.23 2879,-6791 2893.97,-6808.96 2919.57,-6815.62 2941.05,-6817.84"/>
<polygon fill="blue" stroke="blue" points="2940.97,-6821.34 2951.2,-6818.6 2941.49,-6814.36 2940.97,-6821.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2275.25,-6274C2324.89,-6274 2380.73,-6274 2433.05,-6274"/>
<polygon fill="blue" stroke="blue" points="2433.12,-6277.5 2443.12,-6274 2433.12,-6270.5 2433.12,-6277.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="node260" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<g id="a_node260"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_key_pair: uid_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;profile_key_enc_key_pair: profile_key_encryption::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cr...">
<polygon fill="white" stroke="black" points="3006.5,-6890 2952.5,-6890 2952.5,-6854 3006.5,-6854 3006.5,-6890"/>
<text text-anchor="middle" x="2979.5" y="-6868.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2309.13,-6316.67C2334.92,-6323.33 2358.77,-6335.24 2377,-6355 2406.62,-6387.11 2365.72,-7110.51 2397,-7141 2433.76,-7176.83 2821.24,-7175.77 2859,-7141 2898.7,-7104.45 2844.48,-6940.47 2879,-6899 2894.15,-6880.79 2920.23,-6874.2 2941.89,-6872.07"/>
<polygon fill="blue" stroke="blue" points="2942.37,-6875.54 2952.1,-6871.35 2941.88,-6868.56 2942.37,-6875.54"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="node266" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<g id="a_node266"><a xlink:title=" &#160;&#160;&#160;pub fn sign(&amp;self, message: &amp;[u8], sho: &amp;mut Sho) &#45;&gt; SignatureBytes { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let vec_bytes = poksho::sign( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.signing_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2655,-8376 2601,-8376 2601,-8340 2655,-8340 2655,-8376"/>
<text text-anchor="middle" x="2628" y="-8354.3" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2149.54,-6159.08C2201.67,-6146.97 2318.85,-6128.93 2377,-6193 2416.86,-6236.92 2357.66,-8283.62 2397,-8328 2444.98,-8382.13 2538.86,-8375.07 2590.61,-8366.04"/>
<polygon fill="blue" stroke="blue" points="2591.49,-8369.43 2600.68,-8364.16 2590.21,-8362.55 2591.49,-8369.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="node257" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<g id="a_node257"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_ciphertext: uid_encryption::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uid_enc_pub...">
<polygon fill="white" stroke="black" points="3007.5,-6728 2951.5,-6728 2951.5,-6692 3007.5,-6692 3007.5,-6728"/>
<text text-anchor="middle" x="2979.5" y="-6706.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_expiring_profile_key_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2692.01,-6292.04C2746.2,-6311.14 2821.4,-6347 2859,-6407 2891.3,-6458.54 2840.96,-6632.53 2879,-6680 2893.74,-6698.39 2919.34,-6705.83 2940.88,-6708.7"/>
<polygon fill="blue" stroke="blue" points="2940.76,-6712.2 2951.07,-6709.77 2941.49,-6705.24 2940.76,-6712.2"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="node263" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<g id="a_node263"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credential: credentials::ReceiptCredential, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sho: &amp;mut Sho, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let credentials_system = cred...">
<polygon fill="white" stroke="black" points="3006.5,-7214 2952.5,-7214 2952.5,-7178 3006.5,-7178 3006.5,-7214"/>
<text text-anchor="middle" x="2979.5" y="-7192.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2263.76,-6703.59C2306.25,-6710.3 2349.02,-6725.98 2377,-6759 2411.94,-6800.23 2358.01,-7207.58 2397,-7245 2550.13,-7391.96 2842.05,-7265.58 2943.06,-7214.82"/>
<polygon fill="blue" stroke="blue" points="2944.9,-7217.8 2952.23,-7210.15 2941.73,-7211.57 2944.9,-7217.8"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2042.85,-6093.98C1976.78,-6084.32 1888.31,-6085.15 1854,-6148 1836.46,-6180.13 1836.46,-6774.87 1854,-6807 1896.27,-6884.42 2020.73,-6867.72 2084.25,-6853.26"/>
<polygon fill="blue" stroke="blue" points="2085.35,-6856.6 2094.27,-6850.88 2083.73,-6849.78 2085.35,-6856.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="node261" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<g id="a_node261"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::Ciphertext, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitm...">
<polygon fill="white" stroke="black" points="3007.5,-7160 2951.5,-7160 2951.5,-7124 3007.5,-7124 3007.5,-7160"/>
<text text-anchor="middle" x="2979.5" y="-7138.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2226.17,-6418C2278.88,-6415.06 2339.68,-6422.61 2377,-6463 2405.02,-6493.33 2367.41,-7177.2 2397,-7206 2433.78,-7241.81 2814.91,-7232.29 2859,-7206 2875.06,-7196.43 2864.35,-7180.61 2879,-7169 2896.68,-7154.99 2921.07,-7148.23 2941.27,-7144.98"/>
<polygon fill="blue" stroke="blue" points="2941.97,-7148.41 2951.4,-7143.58 2941.02,-7141.48 2941.97,-7148.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="node262" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<g id="a_node262"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ExpiringProfileKeyCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: profile_key_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: profile_key_c...">
<polygon fill="white" stroke="black" points="3006.5,-7106 2952.5,-7106 2952.5,-7070 3006.5,-7070 3006.5,-7106"/>
<text text-anchor="middle" x="2979.5" y="-7084.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2226.78,-6417.98C2279.33,-6415.15 2339.81,-6422.8 2377,-6463 2430.22,-6520.52 2340.81,-7113.38 2397,-7168 2470.62,-7239.56 2774.56,-7226.39 2859,-7168 2879.71,-7153.68 2860.36,-7131.93 2879,-7115 2896.11,-7099.45 2921.29,-7092.72 2942.04,-7089.87"/>
<polygon fill="blue" stroke="blue" points="2942.57,-7093.33 2952.11,-7088.73 2941.78,-7086.37 2942.57,-7093.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="node258" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<g id="a_node258"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: profile_key_credential_request::KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: profile_key_credential_request::CiphertextWithSecretNonce, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;commitment: profile_key_commitment::Co...">
<polygon fill="white" stroke="black" points="3006.5,-6782 2952.5,-6782 2952.5,-6746 3006.5,-6746 3006.5,-6782"/>
<text text-anchor="middle" x="2979.5" y="-6760.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2289.27,-6668.83C2318.52,-6672.04 2348.67,-6675.49 2377,-6679 2591.91,-6705.62 2849.04,-6744.22 2942.4,-6758.46"/>
<polygon fill="blue" stroke="blue" points="2942.04,-6761.94 2952.45,-6759.99 2943.1,-6755.02 2942.04,-6761.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="node259" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<g id="a_node259"><a xlink:title=" &#160;&#160;&#160;pub fn new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request::...">
<polygon fill="white" stroke="black" points="3006.5,-7052 2952.5,-7052 2952.5,-7016 3006.5,-7016 3006.5,-7052"/>
<text text-anchor="middle" x="2979.5" y="-7030.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2213.74,-6586.36C2372.77,-6571.55 2701.01,-6567.59 2859,-6759 2894.2,-6801.64 2843.67,-6964.47 2879,-7007 2894.14,-7025.22 2920.21,-7031.82 2941.88,-7033.94"/>
<polygon fill="blue" stroke="blue" points="2941.87,-7037.45 2952.09,-7034.66 2942.36,-7030.47 2941.87,-7037.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="node256" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<g id="a_node256"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_key_pair: credentials::KeyPair&lt;credentials::ReceiptCredential&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_struct: ReceiptStruct, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(), ZkGroupVerificationFail...">
<polygon fill="white" stroke="black" points="3007.5,-6944 2951.5,-6944 2951.5,-6908 3007.5,-6908 3007.5,-6944"/>
<text text-anchor="middle" x="2979.5" y="-6922.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2261.81,-6364.8C2432.27,-6352.3 2716.78,-6361.59 2859,-6536 2910.06,-6598.61 2828.17,-6836.2 2879,-6899 2893.71,-6917.17 2919.31,-6923.83 2940.86,-6925.99"/>
<polygon fill="blue" stroke="blue" points="2940.83,-6929.5 2951.05,-6926.72 2941.33,-6922.52 2940.83,-6929.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="node254" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<g id="a_node254"><a xlink:title=" &#160;&#160;&#160;pub fn verify( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;credentials_public_key: credentials::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request_public_key: receipt_credential_request::PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;request: receipt_credential_request...">
<polygon fill="white" stroke="black" points="3007.5,-6998 2951.5,-6998 2951.5,-6962 3007.5,-6962 3007.5,-6998"/>
<text text-anchor="middle" x="2979.5" y="-6976.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2220.27,-6541.83C2409.66,-6538.57 2814.77,-6536.92 2859,-6581 2888.32,-6610.22 2852.98,-6920.81 2879,-6953 2893.7,-6971.18 2919.3,-6977.84 2940.86,-6980"/>
<polygon fill="blue" stroke="blue" points="2940.82,-6983.51 2951.05,-6980.73 2941.32,-6976.52 2940.82,-6983.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac(). -->
<g id="node253" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().</title>
<g id="a_node253"><a xlink:title=" &#160;&#160;&#160;fn test_mac() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// It doesn&#39;t really matter *which* credential we test here, we just want to generally know &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// we&#39;ve set things up correctly. (Also, the credentials hardcoded here ...">
<polygon fill="white" stroke="black" points="2667.5,-7106 2588.5,-7106 2588.5,-7070 2667.5,-7070 2667.5,-7106"/>
<text text-anchor="middle" x="2628" y="-7084.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.93,-7095.99C2719.54,-7104.06 2809.8,-7109.01 2859,-7058 2892.01,-7023.78 2848.38,-6881.37 2879,-6845 2894.06,-6827.11 2919.65,-6820.45 2941.11,-6818.21"/>
<polygon fill="blue" stroke="blue" points="2941.55,-6821.69 2951.25,-6817.44 2941.02,-6814.71 2941.55,-6821.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/credentials/tests/test_mac().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2667.74,-7088C2735.75,-7088 2875.71,-7088 2942.06,-7088"/>
<polygon fill="blue" stroke="blue" points="2942.44,-7091.5 2952.44,-7088 2942.44,-7084.5 2942.44,-7091.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.78,-6974.92C3071.05,-6961.78 3229.19,-6920.92 3319,-6827 3367,-6776.8 3392.75,-6696.84 3403.63,-6654.85"/>
<polygon fill="blue" stroke="blue" points="3407.05,-6655.58 3406.07,-6645.03 3400.26,-6653.88 3407.05,-6655.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.58,-6810.86C3025.93,-6805.82 3050.63,-6798.63 3072,-6791 3184.18,-6750.97 3213.94,-6743.13 3319,-6687 3338.9,-6676.37 3360,-6662.63 3376.87,-6650.98"/>
<polygon fill="blue" stroke="blue" points="3379.08,-6653.7 3385.27,-6645.1 3375.07,-6647.96 3379.08,-6653.7"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.6,-6920.03C3026.18,-6915.45 3051.14,-6908.34 3072,-6899 3189.87,-6846.26 3223.32,-6832.72 3319,-6746 3349.51,-6718.35 3377.09,-6679.38 3393.69,-6653.67"/>
<polygon fill="blue" stroke="blue" points="3396.69,-6655.49 3399.1,-6645.17 3390.78,-6651.73 3396.69,-6655.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.93,-6706.64C3065.84,-6699.29 3204.64,-6680.32 3319,-6654 3329.7,-6651.54 3340.99,-6648.53 3351.84,-6645.43"/>
<polygon fill="blue" stroke="blue" points="3353.03,-6648.72 3361.65,-6642.56 3351.07,-6642 3353.03,-6648.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.78,-6759.11C3025.66,-6754.93 3051.31,-6747.84 3072,-6737 3115,-6714.47 3157.41,-6677.31 3183.27,-6652.5"/>
<polygon fill="blue" stroke="blue" points="3186.01,-6654.71 3190.74,-6645.23 3181.13,-6649.69 3186.01,-6654.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.51,-7032.57C3026.75,-7030.13 3054.29,-7023.71 3072,-7007 3176.05,-6908.81 3200.95,-6725.68 3206.77,-6655.43"/>
<polygon fill="blue" stroke="blue" points="3210.29,-6655.4 3207.55,-6645.16 3203.31,-6654.87 3210.29,-6655.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.81,-6869.3C3026.42,-6866.16 3053,-6859.42 3072,-6845 3138.78,-6794.33 3181.02,-6700.74 3198.8,-6654.43"/>
<polygon fill="blue" stroke="blue" points="3202.09,-6655.63 3202.32,-6645.04 3195.53,-6653.18 3202.09,-6655.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ProfileKeyCredentialRequestProof]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3007.72,-7137.17C3026.57,-7133.08 3051.81,-7126.07 3072,-7115 3199.61,-7045.02 3238.25,-7021.08 3319,-6900 3372.05,-6820.45 3396.64,-6707.26 3405.67,-6655.19"/>
<polygon fill="blue" stroke="blue" points="3409.17,-6655.48 3407.37,-6645.04 3402.27,-6654.33 3409.17,-6655.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ExpiringProfileKeyCredentialIssuanceProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.69,-7086.76C3027.04,-7084.43 3054.63,-7078.06 3072,-7061 3188.81,-6946.25 3205.95,-6732.75 3208.24,-6655.68"/>
<polygon fill="blue" stroke="blue" points="3211.75,-6655.41 3208.48,-6645.33 3204.75,-6655.24 3211.75,-6655.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3006.55,-7195.08C3027.09,-7192.94 3055.02,-7186.68 3072,-7169 3145.05,-7092.96 3192.44,-6755.4 3205.1,-6655.16"/>
<polygon fill="blue" stroke="blue" points="3208.58,-6655.53 3206.34,-6645.17 3201.63,-6654.66 3208.58,-6655.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature(). -->
<g id="node264" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().</title>
<g id="a_node264"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let group_key = TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Signature&#39; , &amp;group_key); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut sho); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Test s...">
<polygon fill="white" stroke="black" points="2180,-8403 2065,-8403 2065,-8367 2180,-8367 2180,-8403"/>
<text text-anchor="middle" x="2122.5" y="-8381.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.28,-8388.04C2284.22,-8393.62 2502.41,-8405.32 2589.72,-8410"/>
<polygon fill="blue" stroke="blue" points="2589.77,-8413.51 2599.94,-8410.55 2590.14,-8406.52 2589.77,-8413.51"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2180.28,-8381.96C2284.59,-8376.36 2503.96,-8364.6 2590.65,-8359.95"/>
<polygon fill="blue" stroke="blue" points="2590.98,-8363.44 2600.78,-8359.41 2590.61,-8356.45 2590.98,-8363.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[PublicKey]verify().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2656.3,-8414.07C2700.91,-8416.32 2791.22,-8416.12 2859,-8385 2900.39,-8366 2937.12,-8327.18 2958.6,-8301.12"/>
<polygon fill="blue" stroke="blue" points="2961.47,-8303.13 2965.02,-8293.15 2956.02,-8298.74 2961.47,-8303.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/signature/impl#[KeyPair]sign().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 sign/sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2655.22,-8363.13C2702.33,-8370.72 2801.72,-8379.03 2859,-8328 2886.37,-8303.62 2853.35,-8274.17 2879,-8248 2895.47,-8231.19 2921.27,-8224.53 2942.47,-8222.02"/>
<polygon fill="blue" stroke="blue" points="2942.81,-8225.5 2952.45,-8221.1 2942.17,-8218.53 2942.81,-8225.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key(). -->
<g id="node267" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().</title>
<g id="a_node267"><a xlink:title="fn test_profile_key_credential_only_verifying_one_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_a...">
<polygon fill="white" stroke="black" points="2851,-4137 2405,-4137 2405,-4101 2851,-4101 2851,-4137"/>
<text text-anchor="middle" x="2628" y="-4115.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_only_verifying_one_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2803.41,-4137.08C2824.03,-4145.28 2843.28,-4156.57 2859,-4172 2885.15,-4197.67 2853.96,-4225.24 2879,-4252 2895.09,-4269.19 2920.43,-4277.18 2941.52,-4280.87"/>
<polygon fill="blue" stroke="blue" points="2941.06,-4284.34 2951.46,-4282.36 2942.09,-4277.42 2941.06,-4284.34"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2808.32,-4137.06C2827.39,-4145.37 2844.92,-4156.69 2859,-4172 2901.25,-4217.94 2837.64,-4264.26 2879,-4311 2894.7,-4328.74 2920.76,-4335.35 2942.27,-4337.6"/>
<polygon fill="blue" stroke="blue" points="2942.16,-4341.11 2952.4,-4338.39 2942.7,-4334.13 2942.16,-4341.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2848.46,-4100.85C2852.12,-4098.12 2855.64,-4095.18 2859,-4092 2896.68,-4056.35 2844.06,-4015.35 2879,-3977 2894.64,-3959.83 2919.99,-3953.13 2941.19,-3950.7"/>
<polygon fill="blue" stroke="blue" points="2941.55,-3954.18 2951.2,-3949.82 2940.93,-3947.21 2941.55,-3954.18"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential_only_verifying_one_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2832.68,-4100.96C2841.68,-4098.33 2850.49,-4095.36 2859,-4092 2895.23,-4077.7 2930.34,-4049.61 2953.02,-4028.99"/>
<polygon fill="blue" stroke="blue" points="2955.56,-4031.41 2960.51,-4022.05 2950.8,-4026.28 2955.56,-4031.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic(). -->
<g id="node268" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().</title>
<g id="a_node268"><a xlink:title="fn test_mac_generic() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;&#160;let label = b&#39; 20221221_AuthCre...">
<polygon fill="white" stroke="black" points="2696.5,-3921 2559.5,-3921 2559.5,-3885 2696.5,-3885 2696.5,-3921"/>
<text text-anchor="middle" x="2628" y="-3899.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.73,-3891.11C2748.06,-3886.27 2816.76,-3889.39 2859,-3930 2900.19,-3969.6 2847.11,-4009.59 2879,-4057 2894.2,-4079.6 2921.05,-4095.05 2943.02,-4104.61"/>
<polygon fill="blue" stroke="blue" points="2941.83,-4107.9 2952.41,-4108.47 2944.49,-4101.42 2941.83,-4107.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.65,-3890.47C2748.47,-3885.11 2817.85,-3887.86 2859,-3930 2892.37,-3964.17 2848.25,-4107.45 2879,-4144 2894.05,-4161.89 2919.65,-4168.55 2941.11,-4170.79"/>
<polygon fill="blue" stroke="blue" points="2941.01,-4174.29 2951.25,-4171.56 2941.55,-4167.31 2941.01,-4174.29"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.54,-3910.05C2742.43,-3915.05 2804.47,-3922.24 2859,-3930 2886.57,-3933.92 2917.59,-3939.14 2941.12,-3943.26"/>
<polygon fill="blue" stroke="blue" points="2940.57,-3946.72 2951.03,-3945.01 2941.79,-3939.82 2940.57,-3946.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2696.72,-3894.01C2746.37,-3891.14 2812.9,-3895.48 2859,-3930 2877.17,-3943.61 2861.88,-3962.09 2879,-3977 2894.33,-3990.36 2915.64,-3997.18 2934.61,-4000.63"/>
<polygon fill="blue" stroke="blue" points="2934.15,-4004.1 2944.57,-4002.18 2935.23,-3997.18 2934.15,-4004.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point(). -->
<g id="node269" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().</title>
<g id="a_node269"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_point(&amp;self) &#45;&gt; RistrettoPoint { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.opaque_id &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2665,-4083 2591,-4083 2591,-4047 2665,-4047 2665,-4083"/>
<text text-anchor="middle" x="2628" y="-4061.3" font-family="Helvetica,sans-Serif" font-size="14.00">as_point</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2665.21,-4064.15C2757.11,-4062.42 2997.4,-4060.64 3072,-4087 3200.07,-4132.26 3255.1,-4147.13 3319,-4267 3376.64,-4375.12 3405.99,-6339.41 3409.61,-6598.81"/>
<polygon fill="blue" stroke="blue" points="3406.12,-6598.97 3409.76,-6608.92 3413.12,-6598.87 3406.12,-6598.97"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo poksho 0.7.0 statement/impl#[Statement]prove().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2665.29,-4057.21C2715.94,-4048.67 2807.41,-4042.11 2859,-4092 2901.65,-4133.25 2837.12,-4181.96 2879,-4224 2940.26,-4285.5 3013.66,-4189.72 3072,-4254 3113.48,-4299.7 3196.69,-6333.67 3207.36,-6598.65"/>
<polygon fill="blue" stroke="blue" points="3203.88,-6599.11 3207.78,-6608.96 3210.87,-6598.83 3203.88,-6599.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2665.04,-4057.1C2715.82,-4048.3 2807.92,-4041.3 2859,-4092 2909.86,-4142.48 2833.27,-4196.82 2879,-4252 2894.12,-4270.25 2919.72,-4278.21 2941.16,-4281.62"/>
<polygon fill="blue" stroke="blue" points="2940.92,-4285.12 2951.29,-4282.96 2941.84,-4278.18 2940.92,-4285.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2665.27,-4056.87C2716.34,-4047.8 2808.77,-4040.46 2859,-4092 2893.11,-4127 2847.58,-4273.57 2879,-4311 2894.23,-4329.14 2920.31,-4335.74 2941.94,-4337.89"/>
<polygon fill="blue" stroke="blue" points="2941.92,-4341.39 2952.14,-4338.61 2942.41,-4334.41 2941.92,-4341.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2665.03,-4071.68C2714.55,-4078.68 2803.75,-4083.17 2859,-4038 2881.09,-4019.94 2858.31,-3996.64 2879,-3977 2895.66,-3961.19 2920.61,-3954.44 2941.37,-3951.65"/>
<polygon fill="blue" stroke="blue" points="2941.9,-3955.11 2951.46,-3950.55 2941.14,-3948.15 2941.9,-3955.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/impl#[RoomId][RevealedAttribute]as_point().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2665.13,-4062.56C2710.67,-4059.07 2791.19,-4051.54 2859,-4038 2884.61,-4032.89 2912.73,-4025.01 2935.25,-4018.12"/>
<polygon fill="blue" stroke="blue" points="2936.34,-4021.44 2944.86,-4015.14 2934.27,-4014.76 2936.34,-4021.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key(). -->
<g id="node270" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().</title>
<g id="a_node270"><a xlink:title="fn test_mac_generic_without_verifying_encryption_key() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2815.5,-3975 2440.5,-3975 2440.5,-3939 2815.5,-3939 2815.5,-3975"/>
<text text-anchor="middle" x="2628" y="-3953.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_mac_generic_without_verifying_encryption_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2815.62,-3958.98C2831.4,-3964.87 2846.2,-3972.99 2859,-3984 2884.51,-4005.93 2858.7,-4030.17 2879,-4057 2895.22,-4078.44 2921.52,-4093.82 2943.01,-4103.63"/>
<polygon fill="blue" stroke="blue" points="2941.62,-4106.85 2952.18,-4107.63 2944.41,-4100.43 2941.62,-4106.85"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/impl#[`IssuanceProofBuilder&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2815.68,-3956.46C2831.75,-3962.77 2846.59,-3971.68 2859,-3984 2909.86,-4034.48 2832.01,-4089.89 2879,-4144 2894.33,-4161.65 2919.92,-4168.32 2941.31,-4170.62"/>
<polygon fill="blue" stroke="blue" points="2941.16,-4174.12 2951.41,-4171.42 2941.72,-4167.14 2941.16,-4174.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2815.52,-3953.26C2863.39,-3952.31 2910.08,-3951.37 2941.12,-3950.75"/>
<polygon fill="blue" stroke="blue" points="2941.5,-3954.24 2951.43,-3950.54 2941.36,-3947.24 2941.5,-3954.24"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_mac_generic_without_verifying_encryption_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2791.23,-3975.04C2814.01,-3977.86 2837.11,-3980.88 2859,-3984 2884.19,-3987.58 2912.26,-3992.25 2934.86,-3996.17"/>
<polygon fill="blue" stroke="blue" points="2934.38,-3999.64 2944.83,-3997.91 2935.58,-3992.74 2934.38,-3999.64"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential(). -->
<g id="node271" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().</title>
<g id="a_node271"><a xlink:title="fn test_profile_key_credential() { &#160;&#160;&#160;&#160;let mut sho = ShoSha256::new(b&#39; Test_Credentials&#39; ); &#160;&#160;&#160;&#160;let keypair = CredentialKeyPair::generate(sho.squeeze_and_ratchet_as_array()); &#160;&#160;&#160;&#160;let blinding_keypair ...">
<polygon fill="white" stroke="black" points="2727.5,-4029 2528.5,-4029 2528.5,-3993 2727.5,-3993 2727.5,-4029"/>
<text text-anchor="middle" x="2628" y="-4007.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2727.77,-3996.7C2773.71,-3995.85 2825.48,-4004.15 2859,-4038 2888.25,-4067.54 2856.65,-4188.95 2879,-4224 2893.45,-4246.67 2919.83,-4262 2941.79,-4271.48"/>
<polygon fill="blue" stroke="blue" points="2940.62,-4274.78 2951.2,-4275.32 2943.26,-4268.3 2940.62,-4274.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 issuance/blind/impl#[`BlindedIssuanceProofBuilder&lt;&#39;_&gt;`]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2727.68,-3996.23C2773.89,-3995.17 2825.92,-4003.44 2859,-4038 2901.06,-4081.94 2840.3,-4264.07 2879,-4311 2894.17,-4329.4 2920.49,-4335.96 2942.25,-4338.02"/>
<polygon fill="blue" stroke="blue" points="2942.29,-4341.53 2952.5,-4338.7 2942.75,-4334.55 2942.29,-4341.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofVerifier&lt;&#39;a&gt;`]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2727.74,-4004.21C2768.7,-4000.15 2816.49,-3993.81 2859,-3984 2868.18,-3981.88 2870.01,-3979.79 2879,-3977 2899.58,-3970.62 2922.8,-3964.27 2941.63,-3959.33"/>
<polygon fill="blue" stroke="blue" points="2942.52,-3962.72 2951.32,-3956.81 2940.76,-3955.94 2942.52,-3962.72"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 crypto/zkcredential_examples/test_profile_key_credential().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 presentation/impl#[`PresentationProofBuilder&lt;&#39;a&gt;`]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2727.75,-4009.02C2795.93,-4007.66 2883.26,-4005.91 2934.82,-4004.87"/>
<polygon fill="blue" stroke="blue" points="2935.02,-4008.37 2944.95,-4004.67 2934.88,-4001.37 2935.02,-4008.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response(). -->
<g id="node272" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().</title>
<g id="a_node272"><a xlink:title="fn test_backup_auth_request_response() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Randomne...">
<polygon fill="white" stroke="black" points="1643.5,-4382 1376.5,-4382 1376.5,-4346 1643.5,-4346 1643.5,-4382"/>
<text text-anchor="middle" x="1510" y="-4360.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_backup_auth_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1579.39,-4345.94C1733.24,-4309.33 2113.7,-4241.56 2377,-4387 2391.03,-4394.75 2385.4,-4405.94 2397,-4417 2454.03,-4471.38 2536.16,-4514.16 2585.29,-4536.92"/>
<polygon fill="blue" stroke="blue" points="2584.11,-4540.23 2594.66,-4541.21 2587.02,-4533.87 2584.11,-4540.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1633.61,-4382.02C1702.46,-4392.01 1789.97,-4404.5 1868,-4415 1944.8,-4425.33 2034.82,-4436.46 2084.26,-4442.49"/>
<polygon fill="blue" stroke="blue" points="2084.12,-4446 2094.47,-4443.73 2084.96,-4439.05 2084.12,-4446"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.62,-4363.46C1873.13,-4363.83 2324.94,-4370.89 2377,-4420 2429.77,-4469.78 2345.55,-4530.86 2397,-4582 2448.08,-4632.78 2540.31,-4625.71 2591.08,-4616.89"/>
<polygon fill="blue" stroke="blue" points="2591.76,-4620.32 2600.95,-4615.06 2590.48,-4613.44 2591.76,-4620.32"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_backup_auth_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/backups/auth_credential/impl#[BackupAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1643.65,-4358.02C1708.41,-4361.48 1784.19,-4375.71 1840,-4417 1862.69,-4433.79 1844.87,-4457.83 1868,-4474 1930.36,-4517.6 2023.29,-4514.82 2077.61,-4508.28"/>
<polygon fill="blue" stroke="blue" points="2078.14,-4511.74 2087.61,-4506.99 2077.24,-4504.8 2078.14,-4511.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity(). -->
<g id="node273" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().</title>
<g id="a_node273"><a xlink:title="fn test_auth_credential_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;&#160;// cli...">
<polygon fill="white" stroke="black" points="2315.5,-3921 1929.5,-3921 1929.5,-3885 2315.5,-3885 2315.5,-3921"/>
<text text-anchor="middle" x="2122.5" y="-3899.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2139.18,-3884.94C2177.91,-3841.71 2283.22,-3732.42 2397,-3685 2446.61,-3664.32 2507.13,-3657.88 2553.64,-3656.44"/>
<polygon fill="blue" stroke="blue" points="2553.73,-3659.94 2563.64,-3656.2 2553.56,-3652.94 2553.73,-3659.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2145.97,-3884.9C2190.69,-3849.97 2295.34,-3773.65 2397,-3739 2459.97,-3717.53 2537.64,-3712.54 2584.69,-3711.69"/>
<polygon fill="blue" stroke="blue" points="2584.87,-3715.19 2594.82,-3711.56 2584.78,-3708.19 2584.87,-3715.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity(). -->
<g id="node274" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().</title>
<g id="a_node274"><a xlink:title="fn test_create_call_link_enforces_timestamp_granularity() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let ra...">
<polygon fill="white" stroke="black" points="2314.5,-4029 1930.5,-4029 1930.5,-3993 2314.5,-3993 2314.5,-4029"/>
<text text-anchor="middle" x="2122.5" y="-4007.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_enforces_timestamp_granularity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2314.75,-4003.73C2337.9,-4010.4 2359.51,-4021.23 2377,-4038 2420.46,-4079.67 2354.03,-4129.82 2397,-4172 2446.33,-4220.43 2532.93,-4217.4 2584.63,-4210.14"/>
<polygon fill="blue" stroke="blue" points="2585.43,-4213.56 2594.8,-4208.6 2584.38,-4206.64 2585.43,-4213.56"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_enforces_timestamp_granularity().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2314.8,-4002.84C2338.1,-4009.6 2359.72,-4020.69 2377,-4038 2407.15,-4068.2 2367.01,-4198.63 2397,-4229 2447.61,-4280.25 2540.03,-4272.99 2590.95,-4264.02"/>
<polygon fill="blue" stroke="blue" points="2591.68,-4267.44 2600.86,-4262.15 2590.38,-4260.56 2591.68,-4267.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response(). -->
<g id="node275" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().</title>
<g id="a_node275"><a xlink:title="fn test_create_call_link_request_response() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: Ran...">
<polygon fill="white" stroke="black" points="2264,-4083 1981,-4083 1981,-4047 2264,-4047 2264,-4083"/>
<text text-anchor="middle" x="2122.5" y="-4061.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_create_call_link_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2135.27,-4083.35C2168.92,-4134.05 2271.26,-4276.3 2397,-4337 2459.61,-4367.22 2542.58,-4368.94 2589.83,-4366.86"/>
<polygon fill="blue" stroke="blue" points="2590.12,-4370.35 2599.92,-4366.34 2589.75,-4363.36 2590.12,-4370.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequestContext]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2161.03,-4083.07C2212.86,-4107.24 2309.83,-4149.62 2397,-4172 2461.36,-4188.52 2538.32,-4196.21 2584.89,-4199.59"/>
<polygon fill="blue" stroke="blue" points="2584.69,-4203.08 2594.91,-4200.28 2585.18,-4196.1 2584.69,-4203.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2139.18,-4083.06C2177.91,-4126.29 2283.22,-4235.58 2397,-4283 2457.89,-4308.38 2535.22,-4312.32 2582.9,-4311.87"/>
<polygon fill="blue" stroke="blue" points="2583.24,-4315.37 2593.18,-4311.7 2583.13,-4308.37 2583.24,-4315.37"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_create_call_link_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/create_credential/impl#[CreateCallLinkCredentialRequest]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2145.97,-4083.1C2190.69,-4118.03 2295.34,-4194.35 2397,-4229 2462.67,-4251.38 2544.31,-4255.86 2590.55,-4256.4"/>
<polygon fill="blue" stroke="blue" points="2590.67,-4259.9 2600.69,-4256.46 2590.71,-4252.9 2590.67,-4259.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential(). -->
<g id="node276" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().</title>
<g id="a_node276"><a xlink:title="fn test_auth_credential() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x...">
<polygon fill="white" stroke="black" points="2200.5,-3975 2044.5,-3975 2044.5,-3939 2200.5,-3939 2200.5,-3975"/>
<text text-anchor="middle" x="2122.5" y="-3953.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_auth_credential</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.76,-3972.18C2257.59,-3978.47 2332.42,-3975.7 2377,-3930 2415.15,-3890.9 2359.06,-3724.3 2397,-3685 2436.53,-3644.05 2502.67,-3640.13 2553.9,-3644.81"/>
<polygon fill="blue" stroke="blue" points="2553.63,-3648.3 2563.94,-3645.86 2554.36,-3641.34 2553.63,-3648.3"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.52,-3968.94C2255.38,-3973.04 2327.81,-3968.95 2377,-3930 2398.05,-3913.33 2376.99,-3890.9 2397,-3873 2450.88,-3824.79 2539.75,-3817.86 2589.78,-3818.21"/>
<polygon fill="blue" stroke="blue" points="2589.79,-3821.71 2599.84,-3818.38 2589.91,-3814.71 2589.79,-3821.71"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredential]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.53,-3971.42C2256.86,-3977.19 2331.15,-3974.11 2377,-3930 2421.35,-3887.34 2352.88,-3835.9 2397,-3793 2446.05,-3745.31 2531.51,-3749.09 2583.3,-3756.98"/>
<polygon fill="blue" stroke="blue" points="2582.76,-3760.44 2593.19,-3758.6 2583.89,-3753.53 2582.76,-3760.44"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_auth_credential().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/call_links/auth_credential/impl#[CallLinkAuthCredentialResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2200.75,-3971.92C2257.39,-3978.01 2331.97,-3975.11 2377,-3930 2407.15,-3899.8 2367.01,-3769.37 2397,-3739 2445.73,-3689.65 2533.22,-3694.55 2585.11,-3702.99"/>
<polygon fill="blue" stroke="blue" points="2584.54,-3706.45 2594.99,-3704.72 2585.74,-3699.55 2584.54,-3706.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node277" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node277"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="1611.5,-7999 1408.5,-7999 1408.5,-7963 1611.5,-7963 1611.5,-7999"/>
<text text-anchor="middle" x="1510" y="-7977.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.82,-7973.09C1676.95,-7967.89 1763.51,-7960.81 1840,-7954 1928.02,-7946.17 2031.43,-7936 2085.08,-7930.65"/>
<polygon fill="blue" stroke="blue" points="2085.52,-7934.13 2095.12,-7929.65 2084.82,-7927.16 2085.52,-7934.13"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1611.81,-7981C1724.57,-7981 1906.22,-7981 2019.47,-7981"/>
<polygon fill="blue" stroke="blue" points="2019.53,-7984.5 2029.53,-7981 2019.53,-7977.5 2019.53,-7984.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node278" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node278"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="1638.5,-7945 1381.5,-7945 1381.5,-7909 1638.5,-7909 1638.5,-7945"/>
<text text-anchor="middle" x="1510" y="-7923.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1638.61,-7927C1780.05,-7927 1999.52,-7927 2085.35,-7927"/>
<polygon fill="blue" stroke="blue" points="2085.38,-7930.5 2095.38,-7927 2085.38,-7923.5 2085.38,-7930.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1638.76,-7937.07C1699.71,-7941.99 1773.64,-7948.09 1840,-7954 1899.61,-7959.3 1966.27,-7965.68 2019.76,-7970.9"/>
<polygon fill="blue" stroke="blue" points="2019.64,-7974.41 2029.93,-7971.9 2020.32,-7967.44 2019.64,-7974.41"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node279" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node279"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="1581,-7891 1439,-7891 1439,-7855 1581,-7855 1581,-7891"/>
<text text-anchor="middle" x="1510" y="-7869.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]issue().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.3,-7878.49C1647.93,-7883.76 1750.81,-7892.06 1840,-7900 1928.02,-7907.83 2031.43,-7918 2085.08,-7923.35"/>
<polygon fill="blue" stroke="blue" points="2084.82,-7926.84 2095.12,-7924.35 2085.52,-7919.87 2084.82,-7926.84"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.23,-7860.32C1652.52,-7851.39 1763.07,-7848.8 1840,-7900 1862.51,-7914.98 1845.68,-7938.75 1868,-7954 1911.76,-7983.89 1970.05,-7991.73 2019.7,-7991.6"/>
<polygon fill="blue" stroke="blue" points="2019.88,-7995.1 2029.84,-7991.47 2019.79,-7988.1 2019.88,-7995.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1581.03,-7873C1688.42,-7873 1894.34,-7873 2018.68,-7873"/>
<polygon fill="blue" stroke="blue" points="2018.97,-7876.5 2028.97,-7873 2018.97,-7869.5 2018.97,-7876.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node280" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node280"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="1725.5,-6467 1294.5,-6467 1294.5,-6431 1725.5,-6431 1725.5,-6467"/>
<text text-anchor="middle" x="1510" y="-6445.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1594.26,-6467.04C1667.73,-6477.75 1773.22,-6479.71 1840,-6422 1881.77,-6385.91 1826.67,-6337.59 1868,-6301 1893.41,-6278.5 1926.34,-6267.06 1960.01,-6262.07"/>
<polygon fill="blue" stroke="blue" points="1960.53,-6265.53 1969.99,-6260.77 1959.63,-6258.59 1960.53,-6265.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node281" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node281"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="1574,-6413 1446,-6413 1446,-6377 1574,-6377 1574,-6413"/>
<text text-anchor="middle" x="1510" y="-6391.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]verify_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1574.12,-6409.02C1647.2,-6421.26 1766.88,-6428.41 1840,-6365 1880.72,-6329.69 1827.55,-6282.62 1868,-6247 1916.47,-6204.32 1992.04,-6201.52 2048.08,-6207.01"/>
<polygon fill="blue" stroke="blue" points="2047.98,-6210.52 2058.3,-6208.12 2048.74,-6203.56 2047.98,-6210.52"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1574.27,-6409.8C1648.07,-6422.97 1768.98,-6431.18 1840,-6365 1896.66,-6312.2 1811.74,-6246.23 1868,-6193 1926.74,-6137.42 2030.78,-6147.42 2085.52,-6157.71"/>
<polygon fill="blue" stroke="blue" points="2084.98,-6161.17 2095.47,-6159.68 2086.34,-6154.3 2084.98,-6161.17"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node282" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node282"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="1607,-6575 1413,-6575 1413,-6539 1607,-6539 1607,-6575"/>
<text text-anchor="middle" x="1510" y="-6553.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.07,-6543.64C1681.82,-6539.16 1782.24,-6547.18 1840,-6610 1895.51,-6670.37 1810.89,-6919.14 1868,-6978 1922.4,-7034.07 2022.3,-7025.65 2079.09,-7015.02"/>
<polygon fill="blue" stroke="blue" points="2080.05,-7018.4 2089.18,-7013.03 2078.69,-7011.54 2080.05,-7018.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcPresentation]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.22,-6544.52C1681.28,-6540.72 1780.71,-6549.23 1840,-6610 1904.53,-6676.13 1801.73,-6751.62 1868,-6816 1925.56,-6871.92 2028.75,-6862.17 2084.06,-6851.72"/>
<polygon fill="blue" stroke="blue" points="2085.01,-6855.1 2094.13,-6849.71 2083.64,-6848.24 2085.01,-6855.1"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkcResponse]issue_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.14,-6545.31C1680.66,-6542.07 1779.4,-6550.95 1840,-6610 1888.26,-6657.02 1818.76,-6713 1868,-6759 1915.5,-6803.38 1991.8,-6806.75 2048.3,-6801.54"/>
<polygon fill="blue" stroke="blue" points="2048.66,-6805.02 2058.25,-6800.51 2047.95,-6798.05 2048.66,-6805.02"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/auth/auth_credential_with_pni/zkc/impl#[AuthCredentialWithPniZkc]present().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1607.23,-6543.82C1681.81,-6539.51 1781.93,-6547.67 1840,-6610 1887.75,-6661.26 1818.89,-6874.04 1868,-6924 1922.33,-6979.27 2020.93,-6971.56 2077.83,-6961.17"/>
<polygon fill="blue" stroke="blue" points="2078.79,-6964.55 2087.95,-6959.22 2077.47,-6957.68 2078.79,-6964.55"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_auth_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1583,-6575.06C1658.17,-6589.14 1774.09,-6596.6 1840,-6530 1901.28,-6468.08 1807.48,-6201.65 1868,-6139 1896.98,-6109 1938.97,-6097.43 1980.47,-6094.78"/>
<polygon fill="blue" stroke="blue" points="1980.89,-6098.27 1990.71,-6094.31 1980.56,-6091.28 1980.89,-6098.27"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node283" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node283"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="1629.5,-6521 1390.5,-6521 1390.5,-6485 1629.5,-6485 1629.5,-6521"/>
<text text-anchor="middle" x="1510" y="-6499.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.8,-6500.47C1726.74,-6498.41 1864.36,-6495.48 1969.37,-6493.24"/>
<polygon fill="blue" stroke="blue" points="1969.5,-6496.74 1979.42,-6493.03 1969.35,-6489.74 1969.5,-6496.74"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1588.46,-6521.03C1662.77,-6533.35 1773.25,-6537.82 1840,-6476 1897.79,-6422.48 1810.86,-6355.21 1868,-6301 1892.84,-6277.43 1925.82,-6265.64 1959.74,-6260.67"/>
<polygon fill="blue" stroke="blue" points="1960.33,-6264.12 1969.81,-6259.39 1959.45,-6257.18 1960.33,-6264.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_expiring_profile_key_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1594.26,-6521.04C1667.73,-6531.75 1773.22,-6533.71 1840,-6476 1881.77,-6439.91 1826.67,-6391.59 1868,-6355 1884.74,-6340.18 1904.74,-6330.15 1926.07,-6323.61"/>
<polygon fill="blue" stroke="blue" points="1927.27,-6326.91 1935.95,-6320.85 1925.38,-6320.17 1927.27,-6326.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_expiring_profile_key_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1629.56,-6503.3C1692.92,-6500.97 1771.71,-6494.04 1840,-6476 1853.27,-6472.5 1854.78,-6466.66 1868,-6463 1902.5,-6453.44 1940.51,-6447.22 1976.37,-6443.19"/>
<polygon fill="blue" stroke="blue" points="1976.85,-6446.66 1986.42,-6442.11 1976.1,-6439.7 1976.85,-6446.66"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_profile_key_credential_request_context().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1600.67,-6484.96C1673.18,-6475.8 1773.76,-6476.11 1840,-6530 1874.14,-6557.78 1834.2,-6596.81 1868,-6625 1890.12,-6643.45 1917.37,-6654.26 1945.72,-6660.13"/>
<polygon fill="blue" stroke="blue" points="1945.32,-6663.61 1955.79,-6662 1946.6,-6656.73 1945.32,-6663.61"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node284" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node284"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="1545.5,-7372 1474.5,-7372 1474.5,-7336 1545.5,-7336 1545.5,-7372"/>
<text text-anchor="middle" x="1510" y="-7350.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]create_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.73,-7363.64C1613.36,-7380.06 1762.87,-7404.39 1840,-7324 1883.52,-7278.64 1827.17,-6806.79 1868,-6759 1893.92,-6728.67 1932.32,-6713 1971.45,-6705.47"/>
<polygon fill="blue" stroke="blue" points="1972.15,-6708.9 1981.4,-6703.72 1970.95,-6702 1972.15,-6708.9"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]issue_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.53,-7363.64C1613.16,-7380.17 1763.15,-7404.86 1840,-7324 1893.55,-7267.66 1814.88,-6681.75 1868,-6625 1906.07,-6584.32 1968,-6577.12 2021.12,-6580.31"/>
<polygon fill="blue" stroke="blue" points="2021.04,-6583.81 2031.27,-6581.05 2021.55,-6576.83 2021.04,-6583.81"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]verify_receipt_credential_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.6,-7363.7C1613.35,-7380.34 1763.53,-7405.23 1840,-7324 1909.72,-7249.94 1798.84,-6483.59 1868,-6409 1902.77,-6371.5 1957.79,-6362.35 2007.7,-6363.6"/>
<polygon fill="blue" stroke="blue" points="2007.81,-6367.11 2017.94,-6364 2008.08,-6360.11 2007.81,-6367.11"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerPublicParams]receive_receipt_credential().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1545.55,-7363.66C1613.22,-7380.22 1763.27,-7404.97 1840,-7324 1897.59,-7263.23 1810.87,-6632.21 1868,-6571 1904.52,-6531.87 1963.11,-6523.68 2014.77,-6525.94"/>
<polygon fill="blue" stroke="blue" points="2014.81,-6529.45 2025,-6526.52 2015.21,-6522.46 2014.81,-6529.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response(). -->
<g id="node285" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().</title>
<g id="a_node285"><a xlink:title="fn test_request_response() { &#160;&#160;&#160;&#160;let mut sho = Sho::new(b&#39; Test_Receipt_Credential_Request&#39; , b&#39; &#39; ); &#160;&#160;&#160;&#160;&#160;// client receives in response to initial request &#160;&#160;&#160;&#160;let receipt_expiration_time: Timestamp ...">
<polygon fill="white" stroke="black" points="1596,-7426 1424,-7426 1424,-7390 1596,-7390 1596,-7426"/>
<text text-anchor="middle" x="1510" y="-7404.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_request_response</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.06,-7403.26C1890.33,-7386.75 2847.78,-7332.23 2859,-7321 2908.42,-7271.54 2834.78,-7061.16 2879,-7007 2893.79,-6988.89 2919.39,-6982.23 2940.92,-6980.05"/>
<polygon fill="blue" stroke="blue" points="2941.38,-6983.53 2951.1,-6979.31 2940.87,-6976.55 2941.38,-6983.53"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]verify().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.17,-7415.92C1664.88,-7418.87 1762.52,-7415.15 1840,-7381 1855.54,-7374.15 1852.84,-7362.65 1868,-7355 2268.13,-7153.03 2557.26,-7499.44 2859,-7168 2891.3,-7132.52 2848.11,-6989.72 2879,-6953 2894.05,-6935.11 2919.65,-6928.44 2941.11,-6926.21"/>
<polygon fill="blue" stroke="blue" points="2941.54,-6929.69 2951.25,-6925.44 2941.01,-6922.71 2941.54,-6929.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialIssuanceProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.21,-7411.36C1878.23,-7421.6 2768.59,-7446.68 2859,-7359 2906.65,-7312.79 2836.94,-7112.34 2879,-7061 2894.11,-7042.56 2920.43,-7036 2942.21,-7033.95"/>
<polygon fill="blue" stroke="blue" points="2942.72,-7037.42 2952.47,-7033.27 2942.26,-7030.44 2942.72,-7037.42"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_request_response().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 crypto/proofs/impl#[ReceiptCredentialPresentationProof]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1596.35,-7410.99C1877.81,-7420.05 2764.1,-7441.69 2859,-7359 2897.78,-7325.21 2848.14,-7286.15 2879,-7245 2894.43,-7224.43 2920.84,-7211.98 2942.57,-7204.79"/>
<polygon fill="blue" stroke="blue" points="2943.64,-7208.12 2952.17,-7201.84 2941.59,-7201.43 2943.64,-7208.12"/>
</g>
</g>
</svg>
