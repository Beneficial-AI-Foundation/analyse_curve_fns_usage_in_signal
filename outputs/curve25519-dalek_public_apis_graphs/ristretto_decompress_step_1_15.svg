<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="1910pt" height="997pt"
 viewBox="0.00 0.00 1910.00 997.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 993)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-993 1906,-993 1906,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1679,-432 1679,-507 1894,-507 1894,-432 1679,-432"/>
<text text-anchor="middle" x="1786.5" y="-491.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightblue" stroke="lightblue" points="1282,-558 1282,-633 1431,-633 1431,-558 1282,-558"/>
<text text-anchor="middle" x="1356.5" y="-617.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="307,-367 307,-496 845,-496 845,-367 307,-367"/>
<text text-anchor="middle" x="576" y="-480.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-695 8,-770 628.5,-770 628.5,-695 8,-695"/>
<text text-anchor="middle" x="318.25" y="-754.8" font-family="Helvetica,sans-Serif" font-size="14.00">ppss_ops.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="107,-612 107,-687 188,-687 188,-612 107,-612"/>
<text text-anchor="middle" x="147.5" y="-671.8" font-family="Helvetica,sans-Serif" font-size="14.00">traits.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="496.5,-778 496.5,-981 1659,-981 1659,-778 496.5,-778"/>
<text text-anchor="middle" x="1077.75" y="-965.8" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="978.5,-475 978.5,-550 1436,-550 1436,-475 978.5,-475"/>
<text text-anchor="middle" x="1207.25" y="-534.8" font-family="Helvetica,sans-Serif" font-size="14.00">usernames_benchmarks.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="1203,-641 1203,-770 1651.5,-770 1651.5,-641 1203,-641"/>
<text text-anchor="middle" x="1427.25" y="-754.8" font-family="Helvetica,sans-Serif" font-size="14.00">username.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="978.5,-392 978.5,-467 1436.5,-467 1436.5,-392 978.5,-392"/>
<text text-anchor="middle" x="1207.5" y="-451.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="1250.5,-8 1250.5,-299 1635.5,-299 1635.5,-8 1250.5,-8"/>
<text text-anchor="middle" x="1443" y="-283.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="89,-284 89,-359 207,-359 207,-284 89,-284"/>
<text text-anchor="middle" x="148" y="-343.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="423,-284 423,-359 729,-359 729,-284 423,-284"/>
<text text-anchor="middle" x="576" y="-343.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="865,-147 865,-384 1183,-384 1183,-147 865,-147"/>
<text text-anchor="middle" x="1024" y="-368.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="439.5,-93 439.5,-276 712.5,-276 712.5,-93 439.5,-93"/>
<text text-anchor="middle" x="576" y="-260.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub(super) fn step_1(repr: &amp;CompressedRistretto) &#45;&gt; (Choice, Choice, FieldElement) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Step 1. Check s for validity: &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// 1.a) s must be 32 bytes (we get this from the type system) ...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1886,-476 1824,-476 1824,-440 1886,-440 1886,-476"/>
<text text-anchor="middle" x="1855" y="-454.3" font-family="Helvetica,sans-Serif" font-size="14.00">step_1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(&amp;self) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (s_encoding_is_canonical, s_is_negative, s) = decompress::step_1(self); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (!s_encoding_is_canonical | s_is_negative).into...">
<polygon fill="lightgray" stroke="black" stroke-dasharray="1,5" points="1788,-476 1687,-476 1687,-440 1788,-440 1788,-476"/>
<text text-anchor="middle" x="1737.5" y="-454.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/decompress/step_1().</title>
<path fill="none" stroke="gray" stroke-dasharray="5,2" d="M1788.15,-458C1796.66,-458 1805.42,-458 1813.65,-458"/>
<polygon fill="gray" stroke="gray" points="1813.74,-461.5 1823.74,-458 1813.74,-454.5 1813.74,-461.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().</title>
<g id="a_node3"><a xlink:title="pub fn Username_Verify( &#160;&#160;&#160;&#160;proof: &amp;[u8], &#160;&#160;&#160;&#160;hash: &amp;[u8], ) &#45;&gt; Result&lt;(), ::usernames::ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;if hash.len() != 32 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Err(::usernames::ProofVerificationFailure);...">
<polygon fill="white" stroke="black" points="1423,-602 1290,-602 1290,-566 1423,-566 1423,-602"/>
<text text-anchor="middle" x="1356.5" y="-580.3" font-family="Helvetica,sans-Serif" font-size="14.00">Username_Verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;pub fn verify_proof(proof: &amp;[u8], hash: [u8; 32]) &#45;&gt; Result&lt;(), ProofVerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let hash_point = CompressedRistretto(hash) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.decompress() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.ok_or(ProofVer...">
<polygon fill="white" stroke="black" points="1643.5,-685 1545.5,-685 1545.5,-649 1643.5,-649 1643.5,-685"/>
<text text-anchor="middle" x="1594.5" y="-663.3" font-family="Helvetica,sans-Serif" font-size="14.00">verify_proof</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 usernames/Username_Verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1408.71,-602.01C1446.08,-615.15 1496.77,-632.98 1535.61,-646.64"/>
<polygon fill="blue" stroke="blue" points="1534.62,-650 1545.21,-650.02 1536.94,-643.4 1534.62,-650"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node4"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="837,-465 315,-465 315,-429 837,-429 837,-465"/>
<text text-anchor="middle" x="576" y="-443.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="1117.5,-353 930.5,-353 930.5,-317 1117.5,-317 1117.5,-353"/>
<text text-anchor="middle" x="1024" y="-331.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.04,-428.88C834.51,-426.16 839.84,-423.21 845,-420 859.24,-411.14 851.83,-398.39 865,-388 882.43,-374.25 903.61,-363.98 924.73,-356.34"/>
<polygon fill="blue" stroke="blue" points="926.09,-359.57 934.41,-353.01 923.82,-352.95 926.09,-359.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node5"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="833,-411 319,-411 319,-375 833,-375 833,-411"/>
<text text-anchor="middle" x="576" y="-389.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="1116.5,-245 931.5,-245 931.5,-209 1116.5,-209 1116.5,-245"/>
<text text-anchor="middle" x="1024" y="-223.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M830.4,-374.84C835.5,-371.25 840.38,-367.31 845,-363 881.02,-329.41 829.96,-288.61 865,-254 880.13,-239.06 900.29,-230.63 921.15,-226.16"/>
<polygon fill="blue" stroke="blue" points="921.9,-229.58 931.09,-224.32 920.62,-222.7 921.9,-229.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;async fn do_restore_fails_with_the_first_error() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = do_restore::&lt;TestEnv&gt;(NotConnectedResults, b&#39; &#39; ).await; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_matches!(result, Err(crate::svrb::Error::ConnectionT...">
<polygon fill="white" stroke="black" points="279,-739 16,-739 16,-703 279,-703 279,-739"/>
<text text-anchor="middle" x="147.5" y="-717.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore_fails_with_the_first_error</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<g id="a_node7"><a xlink:title="pub async fn do_restore&lt;Env: PpssSetup&gt;( &#160;&#160;&#160;&#160;connect_results: impl IntoConnectionResults, &#160;&#160;&#160;&#160;password: &amp;[u8], ) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let ConnectionCont...">
<polygon fill="white" stroke="black" points="620.5,-739 531.5,-739 531.5,-703 620.5,-703 620.5,-739"/>
<text text-anchor="middle" x="576" y="-717.3" font-family="Helvetica,sans-Serif" font-size="14.00">do_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/test/do_restore_fails_with_the_first_error().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M279.07,-721C360.45,-721 460.84,-721 521.29,-721"/>
<polygon fill="blue" stroke="blue" points="521.37,-724.5 531.37,-721 521.37,-717.5 521.37,-724.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;pub fn restore2&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;responses1_bytes: &amp;[Vec&lt;u8&gt;], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;handshake_hashes: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Restore2&lt;&#39;a&gt;, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="1061,-822 987,-822 987,-786 1061,-786 1061,-822"/>
<text text-anchor="middle" x="1024" y="-800.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M620.58,-729.11C705.04,-744.83 890.31,-779.31 976.81,-795.4"/>
<polygon fill="blue" stroke="blue" points="976.38,-798.88 986.85,-797.27 977.66,-792 976.38,-798.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;async fn restore(&amp;self, password: &amp;[u8]) &#45;&gt; Result&lt;Secret, Error&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ppss_ops::do_restore::&lt;T::Env&gt;(self.connect().await, password).await &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="180,-656 115,-656 115,-620 180,-620 180,-656"/>
<text text-anchor="middle" x="147.5" y="-634.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/traits/impl#[T][Restore]restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net 0.1.0 svrb/ppss_ops/do_restore().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M180.21,-644.17C252.7,-658.28 431.23,-693.02 521.26,-710.54"/>
<polygon fill="blue" stroke="blue" points="520.78,-714.01 531.26,-712.49 522.11,-707.14 520.78,-714.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn create(&amp;mut self, req_bytes: &amp;[u8]) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.versions.clear(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1053.5,-939 994.5,-939 994.5,-903 1053.5,-903 1053.5,-939"/>
<text text-anchor="middle" x="1024" y="-917.3" font-family="Helvetica,sans-Serif" font-size="14.00">create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<g id="a_node15"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn new(req: &amp;svrb::request4::Create) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;auth_commitment: to_ristretto_pt(&amp;req.auth_commitment) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode auth_commitment&#39; )...">
<polygon fill="white" stroke="black" points="1383.5,-950 1329.5,-950 1329.5,-914 1383.5,-914 1383.5,-950"/>
<text text-anchor="middle" x="1356.5" y="-928.3" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1053.75,-921.96C1113.85,-923.96 1252.69,-928.58 1318.98,-930.78"/>
<polygon fill="blue" stroke="blue" points="1319.24,-934.3 1329.35,-931.13 1319.48,-927.3 1319.24,-934.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore2(&amp;self, req_bytes: &amp;[u8], handshake_hash: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1393.5,-842 1319.5,-842 1319.5,-806 1393.5,-806 1393.5,-842"/>
<text text-anchor="middle" x="1356.5" y="-820.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<g id="a_node13"><a xlink:title="fn to_ristretto_pt(b: &amp;[u8]) &#45;&gt; Option&lt;RistrettoPoint&gt; { &#160;&#160;&#160;&#160;CompressedRistretto::from_slice(b).ok()?.decompress() }">
<polygon fill="white" stroke="black" points="1651,-842 1538,-842 1538,-806 1651,-806 1651,-842"/>
<text text-anchor="middle" x="1594.5" y="-820.3" font-family="Helvetica,sans-Serif" font-size="14.00">to_ristretto_pt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1393.6,-824C1429.1,-824 1484.12,-824 1527.46,-824"/>
<polygon fill="blue" stroke="blue" points="1527.64,-827.5 1537.64,-824 1527.64,-820.5 1527.64,-827.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn restore1(&amp;mut self, req_bytes: &amp;[u8]) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let req = match svrb::Request4::decode(req_bytes) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; decode Request4&#39; ) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.inner &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1393.5,-896 1319.5,-896 1319.5,-860 1393.5,-860 1393.5,-896"/>
<text text-anchor="middle" x="1356.5" y="-874.3" font-family="Helvetica,sans-Serif" font-size="14.00">restore1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1393.64,-872.3C1423,-867.42 1465.4,-859.8 1502,-851 1510.42,-848.98 1519.23,-846.65 1527.9,-844.23"/>
<polygon fill="blue" stroke="blue" points="1528.95,-847.57 1537.61,-841.48 1527.04,-840.84 1528.95,-847.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;fn full_create_restore() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_ids = vec![1u64, 2u64, 3u64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut servers = server_ids &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.iter() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map(|_| ...">
<polygon fill="white" stroke="black" points="647.5,-879 504.5,-879 504.5,-843 647.5,-843 647.5,-879"/>
<text text-anchor="middle" x="576" y="-857.3" font-family="Helvetica,sans-Serif" font-size="14.00">full_create_restore</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]create().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.67,-870.51C743.03,-883.34 909.58,-905.74 984.53,-915.82"/>
<polygon fill="blue" stroke="blue" points="984.1,-919.3 994.48,-917.16 985.03,-912.36 984.1,-919.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.8,-857.63C804.73,-850.18 1178.21,-832.43 1309.16,-826.2"/>
<polygon fill="blue" stroke="blue" points="1309.44,-829.69 1319.26,-825.72 1309.1,-822.7 1309.44,-829.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServer]restore1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.8,-862.55C804.73,-865.97 1178.21,-874.13 1309.16,-876.99"/>
<polygon fill="blue" stroke="blue" points="1309.19,-880.49 1319.26,-877.21 1309.34,-873.49 1309.19,-880.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/full_create_restore().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.67,-851.97C739.94,-840.18 898.84,-819.87 976.94,-809.89"/>
<polygon fill="blue" stroke="blue" points="977.49,-813.35 986.96,-808.61 976.6,-806.4 977.49,-813.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1626.4,-805.96C1638.21,-797.63 1650.79,-786.74 1659,-774 1719.05,-680.75 1732.58,-544.66 1735.62,-486.29"/>
<polygon fill="blue" stroke="blue" points="1739.13,-486.15 1736.09,-476.01 1732.14,-485.84 1739.13,-486.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 impl#[`Restore1&lt;&#39;a&gt;`]restore2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1061.15,-799.61C1141.13,-790.74 1338.88,-773.44 1502,-797 1511.84,-798.42 1522.09,-800.66 1532.02,-803.25"/>
<polygon fill="blue" stroke="blue" points="1531.25,-806.67 1541.82,-805.95 1533.1,-799.92 1531.25,-806.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 test/impl#[TestServerVersion]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;svrb 0.1.0 to_ristretto_pt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1383.6,-931.28C1413.59,-929.54 1463.6,-923.77 1502,-905 1529.18,-891.71 1554.48,-868.09 1571.55,-849.77"/>
<polygon fill="blue" stroke="blue" points="1574.21,-852.05 1578.35,-842.29 1569.03,-847.34 1574.21,-852.05"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().</title>
<g id="a_node16"><a xlink:title="criterion_group!(benches, bench_usernames); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1061.5,-519 986.5,-519 986.5,-483 1061.5,-483 1061.5,-519"/>
<text text-anchor="middle" x="1024" y="-497.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<g id="a_node17"><a xlink:title="fn bench_usernames(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let usernames = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Username::candidates_from(&amp;mut rng, &#39; signal&#39; , NicknameLimits::default()).unwrap(); &#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="1428,-519 1285,-519 1285,-483 1428,-483 1428,-519"/>
<text text-anchor="middle" x="1356.5" y="-497.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1061.63,-501C1112.71,-501 1206.68,-501 1274.64,-501"/>
<polygon fill="blue" stroke="blue" points="1274.89,-504.5 1284.89,-501 1274.89,-497.5 1274.89,-504.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 bench_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1428.13,-518.49C1452.93,-526.74 1480.05,-538.3 1502,-554 1534.37,-577.15 1561.57,-614.64 1577.69,-640.03"/>
<polygon fill="blue" stroke="blue" points="1574.88,-642.13 1583.12,-648.78 1580.83,-638.44 1574.88,-642.13"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn many_random_makes_valid_usernames() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = std::array::from_fn(|i| (i + 1).try_into().unwrap()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let nickname = &#39; _SiGNA1&#39; ; &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1502,-739 1211,-739 1211,-703 1502,-703 1502,-739"/>
<text text-anchor="middle" x="1356.5" y="-717.3" font-family="Helvetica,sans-Serif" font-size="14.00">many_random_makes_valid_usernames</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/many_random_makes_valid_usernames().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1461.17,-702.95C1474.95,-700.17 1488.85,-697.16 1502,-694 1512.96,-691.37 1524.56,-688.22 1535.69,-685.03"/>
<polygon fill="blue" stroke="blue" points="1536.69,-688.38 1545.31,-682.22 1534.73,-681.66 1536.69,-688.38"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;fn valid_usernames_proof_and_verify() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proptest!(|(nickname in NICKNAME_PATTERN, discriminator in 1..DISCRIMINATOR_MAX)| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let username = Username::new(&amp;Username::format_parts...">
<polygon fill="white" stroke="black" points="1483.5,-685 1229.5,-685 1229.5,-649 1483.5,-649 1483.5,-685"/>
<text text-anchor="middle" x="1356.5" y="-663.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_usernames_proof_and_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/test/valid_usernames_proof_and_verify().&#45;&gt;rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1483.79,-667C1501.77,-667 1519.49,-667 1535.28,-667"/>
<polygon fill="blue" stroke="blue" points="1535.35,-670.5 1545.35,-667 1535.35,-663.5 1535.35,-670.5"/>
</g>
<!-- rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo usernames 0.1.0 username/impl#[Username]verify_proof().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1607.77,-648.82C1632.71,-611.84 1689.46,-527.73 1718.56,-484.59"/>
<polygon fill="blue" stroke="blue" points="1721.47,-486.54 1724.16,-476.29 1715.67,-482.62 1721.47,-486.54"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node21"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1428.5,-436 1284.5,-436 1284.5,-400 1428.5,-400 1428.5,-436"/>
<text text-anchor="middle" x="1356.5" y="-414.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<g id="a_node28"><a xlink:title=" &#160;&#160;&#160;pub fn receive( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hidden_attribute_points: impl IntoIterator&lt;Item = RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;server_public_key: &amp;ServerDerivedPublicKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;ReceivedEndorsements, V...">
<polygon fill="white" stroke="black" points="1627.5,-268 1561.5,-268 1561.5,-232 1627.5,-232 1627.5,-268"/>
<text text-anchor="middle" x="1594.5" y="-246.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1428.69,-413.09C1453.54,-408.68 1480.56,-400.62 1502,-386 1541.47,-359.1 1568.51,-309.02 1582.46,-277.71"/>
<polygon fill="blue" stroke="blue" points="1585.79,-278.83 1586.53,-268.26 1579.36,-276.06 1585.79,-278.83"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node22"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1061.5,-436 986.5,-436 986.5,-400 1061.5,-400 1061.5,-436"/>
<text text-anchor="middle" x="1024" y="-414.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1061.63,-418C1112.55,-418 1206.09,-418 1274,-418"/>
<polygon fill="blue" stroke="blue" points="1274.24,-421.5 1284.24,-418 1274.24,-414.5 1274.24,-421.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="1407,-160 1306,-160 1306,-124 1407,-124 1407,-160"/>
<text text-anchor="middle" x="1356.5" y="-138.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1407.07,-144.67C1435.96,-147.8 1472.42,-154.54 1502,-169 1529.18,-182.29 1554.48,-205.91 1571.55,-224.23"/>
<polygon fill="blue" stroke="blue" points="1569.03,-226.66 1578.35,-231.71 1574.21,-221.95 1569.03,-226.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="1400.5,-106 1312.5,-106 1312.5,-70 1400.5,-70 1400.5,-106"/>
<text text-anchor="middle" x="1356.5" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1400.56,-87.51C1431.12,-89.09 1471.9,-95.28 1502,-115 1541.75,-141.04 1568.71,-190.96 1582.56,-222.26"/>
<polygon fill="blue" stroke="blue" points="1579.45,-223.89 1586.6,-231.71 1585.89,-221.14 1579.45,-223.89"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1454.5,-268 1258.5,-268 1258.5,-232 1454.5,-232 1454.5,-268"/>
<text text-anchor="middle" x="1356.5" y="-246.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1454.51,-250C1488.18,-250 1524.21,-250 1551.14,-250"/>
<polygon fill="blue" stroke="blue" points="1551.36,-253.5 1561.36,-250 1551.36,-246.5 1551.36,-253.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;pub fn decompress(self) &#45;&gt; Result&lt;Endorsement&lt;RistrettoPoint&gt;, VerificationFailure&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.R.decompress() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(R) =&gt; Ok(Endorsement { R }), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(Veri...">
<polygon fill="white" stroke="black" points="1407,-52 1306,-52 1306,-16 1407,-16 1407,-52"/>
<text text-anchor="middle" x="1356.5" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1407.15,-35.81C1436.25,-38.64 1472.88,-45.36 1502,-61 1590.33,-108.44 1607.09,-137.22 1659,-223 1700.26,-291.2 1722.43,-383.99 1731.5,-429.9"/>
<polygon fill="blue" stroke="blue" points="1728.06,-430.57 1733.38,-439.74 1734.94,-429.26 1728.06,-430.57"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1428,-214 1285,-214 1285,-178 1428,-178 1428,-214"/>
<text text-anchor="middle" x="1356.5" y="-192.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1428.36,-207.75C1451.9,-212.05 1478.18,-217.28 1502,-223 1518.25,-226.9 1535.9,-231.93 1551.33,-236.58"/>
<polygon fill="blue" stroke="blue" points="1550.52,-239.99 1561.11,-239.56 1552.57,-233.29 1550.52,-239.99"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[CompressedRistretto]decompress().</title>
<path fill="none" stroke="blue" d="M1607.77,-268.09C1632.66,-304.82 1689.22,-388.26 1718.38,-431.27"/>
<polygon fill="blue" stroke="blue" points="1715.65,-433.49 1724.16,-439.8 1721.45,-429.56 1715.65,-433.49"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node29"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="185,-328 110,-328 110,-292 185,-292 185,-328"/>
<text text-anchor="middle" x="147.5" y="-306.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node30"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="721,-328 431,-328 431,-292 721,-292 721,-328"/>
<text text-anchor="middle" x="576" y="-306.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M185.23,-310C237.32,-310 335.77,-310 420.68,-310"/>
<polygon fill="blue" stroke="blue" points="420.7,-313.5 430.7,-310 420.7,-306.5 420.7,-313.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M721.19,-318.08C786.02,-321.72 861.06,-325.92 920.1,-329.23"/>
<polygon fill="blue" stroke="blue" points="920,-332.73 930.18,-329.8 920.39,-325.74 920,-332.73"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="1175,-299 873,-299 873,-263 1175,-263 1175,-299"/>
<text text-anchor="middle" x="1024" y="-277.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M721.19,-300.62C766.36,-297.69 816.48,-294.43 862.69,-291.42"/>
<polygon fill="blue" stroke="blue" points="863.04,-294.91 872.79,-290.77 862.58,-287.92 863.04,-294.91"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M721.23,-314.75C763.29,-310.76 807.89,-300.92 845,-280 857.7,-272.84 852.51,-261.52 865,-254 881.93,-243.8 901.62,-237.19 921.24,-232.95"/>
<polygon fill="blue" stroke="blue" points="922.03,-236.36 931.16,-231 920.68,-229.49 922.03,-236.36"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1117.6,-351.28C1216.27,-364.6 1375.37,-374.4 1502,-327 1529.9,-316.56 1555.27,-293.63 1572.18,-275.49"/>
<polygon fill="blue" stroke="blue" points="1574.79,-277.83 1578.9,-268.06 1569.6,-273.13 1574.79,-277.83"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1142.06,-299.05C1162.34,-301.53 1183.24,-303.67 1203,-305 1335.59,-313.9 1373.95,-340.52 1502,-305 1524.05,-298.88 1546.12,-285.87 1563.06,-274.04"/>
<polygon fill="blue" stroke="blue" points="1565.36,-276.69 1571.42,-268 1561.26,-271.02 1565.36,-276.69"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;pub fn decompress( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GroupSendEndorsement&lt;curve25519_dalek_signal::RistrettoPoint&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ZkGroupDeserializationFailure, &#160;&#160;&#160;&#160;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GroupSendEndorsem...">
<polygon fill="white" stroke="black" points="1074.5,-191 973.5,-191 973.5,-155 1074.5,-155 1074.5,-191"/>
<text text-anchor="middle" x="1024" y="-169.3" font-family="Helvetica,sans-Serif" font-size="14.00">decompress</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[`GroupSendEndorsement&lt;curve25519_dalek_signal::ristretto::CompressedRistretto&gt;`]decompress().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[`Endorsement&lt;CompressedRistretto&gt;`]decompress().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1047.35,-154.87C1079.65,-129.66 1142.2,-84.47 1203,-61 1232.38,-49.66 1266.79,-43.04 1295.49,-39.2"/>
<polygon fill="blue" stroke="blue" points="1296.29,-42.63 1305.78,-37.91 1295.42,-35.68 1296.29,-42.63"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[EndorsementResponse]receive().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1116.77,-231.89C1139.46,-235.95 1162.99,-242.75 1183,-254 1194.81,-260.64 1190.67,-271.38 1203,-277 1323.93,-332.1 1370.48,-296 1502,-277 1518.54,-274.61 1536.26,-269.91 1551.65,-265.09"/>
<polygon fill="blue" stroke="blue" points="1552.96,-268.35 1561.4,-261.93 1550.81,-261.69 1552.96,-268.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node35"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="704.5,-191 447.5,-191 447.5,-155 704.5,-155 704.5,-191"/>
<text text-anchor="middle" x="576" y="-169.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M704.61,-184.54C749.09,-188.91 799.3,-194.24 845,-200 869.67,-203.11 896.19,-206.9 921.03,-210.63"/>
<polygon fill="blue" stroke="blue" points="920.78,-214.14 931.2,-212.18 921.83,-207.22 920.78,-214.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node36"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="677.5,-137 474.5,-137 474.5,-101 677.5,-101 677.5,-137"/>
<text text-anchor="middle" x="576" y="-115.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M677.76,-104.94C732.48,-102.82 798.3,-109.88 845,-146 865.25,-161.66 845.3,-183.66 865,-200 880.92,-213.21 900.92,-221.03 921.28,-225.46"/>
<polygon fill="blue" stroke="blue" points="920.81,-228.94 931.29,-227.38 922.13,-222.06 920.81,-228.94"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node37"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="647,-245 505,-245 505,-209 647,-209 647,-245"/>
<text text-anchor="middle" x="576" y="-223.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.2,-226.96C704.57,-230.02 785.61,-241.69 845,-280 857.85,-288.29 852.04,-299.88 865,-308 881.64,-318.43 901.12,-325.16 920.6,-329.44"/>
<polygon fill="blue" stroke="blue" points="919.97,-332.88 930.46,-331.41 921.33,-326.02 919.97,-332.88"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M647.18,-227C720.84,-227 837.38,-227 921.16,-227"/>
<polygon fill="blue" stroke="blue" points="921.2,-230.5 931.2,-227 921.2,-223.5 921.2,-230.5"/>
</g>
</g>
</svg>
