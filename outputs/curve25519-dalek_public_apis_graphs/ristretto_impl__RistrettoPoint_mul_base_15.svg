<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="2019pt" height="1631pt"
 viewBox="0.00 0.00 2019.00 1631.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 1627)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-1627 2015,-1627 2015,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="1904,-1459 1904,-1534 2003,-1534 2003,-1459 1904,-1459"/>
<text text-anchor="middle" x="1953.5" y="-1518.8" font-family="Helvetica,sans-Serif" font-size="14.00">ristretto.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightblue" stroke="lightblue" points="289,-1241 289,-1478 827,-1478 827,-1241 289,-1241"/>
<text text-anchor="middle" x="558" y="-1462.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-228 8,-357 653,-357 653,-228 8,-228"/>
<text text-anchor="middle" x="330.5" y="-341.8" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="41.5,-145 41.5,-220 597,-220 597,-145 41.5,-145"/>
<text text-anchor="middle" x="319.25" y="-204.8" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="446.5,-8 446.5,-137 669.5,-137 669.5,-8 446.5,-8"/>
<text text-anchor="middle" x="558" y="-121.8" font-family="Helvetica,sans-Serif" font-size="14.00">profiles.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="960.5,-1241 960.5,-1370 1429.5,-1370 1429.5,-1241 960.5,-1241"/>
<text text-anchor="middle" x="1195" y="-1354.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="1243.5,-1378 1243.5,-1615 1884,-1615 1884,-1378 1243.5,-1378"/>
<text text-anchor="middle" x="1563.75" y="-1599.8" font-family="Helvetica,sans-Serif" font-size="14.00">endorsements.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="175.5,-365 175.5,-440 692,-440 692,-365 175.5,-365"/>
<text text-anchor="middle" x="433.75" y="-424.8" font-family="Helvetica,sans-Serif" font-size="14.00">serialization.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="405,-859 405,-1042 711,-1042 711,-859 405,-859"/>
<text text-anchor="middle" x="558" y="-1026.8" font-family="Helvetica,sans-Serif" font-size="14.00">zkgroup_benchmarks.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="847,-996 847,-1233 1514,-1233 1514,-996 847,-996"/>
<text text-anchor="middle" x="1180.5" y="-1217.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsement.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="937.5,-693 937.5,-768 1075.5,-768 1075.5,-693 937.5,-693"/>
<text text-anchor="middle" x="1006.5" y="-752.8" font-family="Helvetica,sans-Serif" font-size="14.00">server_params.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="425,-776 425,-851 691,-851 691,-776 425,-776"/>
<text text-anchor="middle" x="558" y="-835.8" font-family="Helvetica,sans-Serif" font-size="14.00">generate_generic_server_params.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="421.5,-1050 421.5,-1233 694.5,-1233 694.5,-1050 421.5,-1050"/>
<text text-anchor="middle" x="558" y="-1217.8" font-family="Helvetica,sans-Serif" font-size="14.00">group_send_endorsements.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="334.5,-531 334.5,-768 781.5,-768 781.5,-531 334.5,-531"/>
<text text-anchor="middle" x="558" y="-752.8" font-family="Helvetica,sans-Serif" font-size="14.00">integration_tests.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="500.5,-448 500.5,-523 616.5,-523 616.5,-448 500.5,-448"/>
<text text-anchor="middle" x="558.5" y="-507.8" font-family="Helvetica,sans-Serif" font-size="14.00">receipt_flow.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]mul_base(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]mul_base().</title>
<g id="a_node1"><a xlink:title=" &#160;&#160;&#160;pub fn mul_base(scalar: &amp;Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[cfg(not(feature = &#39; precomputed&#45;tables&#39; ))] &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;scalar * constants::RISTRETTO_BASEPOINT_POINT &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;#[cfg(featur...">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="1995,-1503 1912,-1503 1912,-1467 1995,-1467 1995,-1503"/>
<text text-anchor="middle" x="1953.5" y="-1481.3" font-family="Helvetica,sans-Serif" font-size="14.00">mul_base</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().</title>
<g id="a_node2"><a xlink:title="fn ServerSecretParams_GenerateDeterministic( &#160;&#160;&#160;&#160;randomness: &amp;[u8; RANDOMNESS_LEN], ) &#45;&gt; ServerSecretParams { &#160;&#160;&#160;&#160;ServerSecretParams::generate(*randomness) }">
<polygon fill="white" stroke="black" points="717.5,-1285 398.5,-1285 398.5,-1249 717.5,-1249 717.5,-1285"/>
<text text-anchor="middle" x="558" y="-1263.3" font-family="Helvetica,sans-Serif" font-size="14.00">ServerSecretParams_GenerateDeterministic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: RandomnessBytes) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = Sho::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKGroup_20200424_Random_ServerSecretParams_Generate&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;randomness, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1045.5,-737 966.5,-737 966.5,-701 1045.5,-701 1045.5,-737"/>
<text text-anchor="middle" x="1006" y="-715.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/ServerSecretParams_GenerateDeterministic().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M717.75,-1283.29C758.37,-1279.13 798.55,-1266.31 827,-1237 865.04,-1197.8 830.7,-1044.14 847,-992 877.85,-893.35 949.1,-791.76 984.41,-745.2"/>
<polygon fill="blue" stroke="blue" points="987.26,-747.22 990.56,-737.15 981.7,-742.97 987.26,-747.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().</title>
<g id="a_node3"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;group_members: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;local_user: ServiceId, &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;group_params: ...">
<polygon fill="white" stroke="black" points="815,-1393 301,-1393 301,-1357 815,-1357 815,-1393"/>
<text text-anchor="middle" x="558" y="-1371.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<g id="a_node37"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids&lt;T&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretParams, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorseme...">
<polygon fill="white" stroke="black" points="1098.5,-1148 913.5,-1148 913.5,-1112 1098.5,-1112 1098.5,-1148"/>
<text text-anchor="middle" x="1006" y="-1126.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithServiceIds().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M658.89,-1393.02C715.76,-1397.17 784.01,-1390.82 827,-1348 857.24,-1317.88 817.82,-1188.14 847,-1157 861.78,-1141.22 882.15,-1132.54 903.34,-1128.09"/>
<polygon fill="blue" stroke="blue" points="904.23,-1131.49 913.46,-1126.28 903,-1124.59 904.23,-1131.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().</title>
<g id="a_node4"><a xlink:title="fn GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts( &#160;&#160;&#160;&#160;response_bytes: &amp;[u8], &#160;&#160;&#160;&#160;concatenated_group_member_ciphertexts: &amp;[u8], &#160;&#160;&#160;&#160;local_user_ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;...">
<polygon fill="white" stroke="black" points="819,-1447 297,-1447 297,-1411 819,-1411 819,-1447"/>
<text text-anchor="middle" x="558" y="-1425.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<g id="a_node36"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_ciphertexts( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;member_ciphertexts: impl IntoIterator&lt;Item = UuidCiphertext&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endor...">
<polygon fill="white" stroke="black" points="1099.5,-1202 912.5,-1202 912.5,-1166 1099.5,-1166 1099.5,-1202"/>
<text text-anchor="middle" x="1006" y="-1180.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_ciphertexts</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendEndorsementsResponse_ReceiveAndCombineWithCiphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.82,-1410.97C820.35,-1408.18 823.74,-1405.19 827,-1402 879.76,-1350.3 800.33,-1294.26 847,-1237 861.25,-1219.52 881.48,-1207.77 902.72,-1199.88"/>
<polygon fill="blue" stroke="blue" points="903.87,-1203.18 912.19,-1196.62 901.6,-1196.56 903.87,-1203.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().</title>
<g id="a_node5"><a xlink:title="fn GroupSendDerivedKeyPair_ForExpiration( &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;server_params: &amp;ServerSecretParams, ) &#45;&gt; Vec&lt;u8&gt; { &#160;&#160;&#160;&#160;zkgroup::serialize(&amp;GroupSendDerivedKeyPair::for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exp...">
<polygon fill="white" stroke="black" points="706.5,-1339 409.5,-1339 409.5,-1303 706.5,-1303 706.5,-1339"/>
<text text-anchor="middle" x="558" y="-1317.3" font-family="Helvetica,sans-Serif" font-size="14.00">GroupSendDerivedKeyPair_ForExpiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<g id="a_node34"><a xlink:title=" &#160;&#160;&#160;pub fn for_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root: impl AsRef&lt;zkcredential::endorsements::ServerRootKeyPair&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;reserved: ReservedByte::de...">
<polygon fill="white" stroke="black" points="1062.5,-1094 949.5,-1094 949.5,-1058 1062.5,-1058 1062.5,-1094"/>
<text text-anchor="middle" x="1006" y="-1072.3" font-family="Helvetica,sans-Serif" font-size="14.00">for_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 zkgroup/GroupSendDerivedKeyPair_ForExpiration().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M658.89,-1339.02C715.76,-1343.17 784.01,-1336.82 827,-1294 857.24,-1263.88 817.82,-1134.14 847,-1103 870.09,-1078.36 906.8,-1071.01 939.03,-1070.1"/>
<polygon fill="blue" stroke="blue" points="939.34,-1073.6 949.31,-1070.02 939.28,-1066.6 939.34,-1073.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().</title>
<g id="a_node6"><a xlink:title=" &#160;&#160;&#160;fn gift_badge(modifier: impl FnOnce(&amp;mut proto::GiftBadge)) &#45;&gt; Result&lt;(), GiftBadgeError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut gift_badge = proto::GiftBadge::test_data(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;modifier(&amp;mut gift_badge); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;G...">
<polygon fill="white" stroke="black" points="125,-326 36,-326 36,-290 125,-290 125,-326"/>
<text text-anchor="middle" x="80.5" y="-304.3" font-family="Helvetica,sans-Serif" font-size="14.00">gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<g id="a_node8"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation: zkgroup::serialize(&amp;Self::test_data_presentation()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: proto::gift_badge::State:...">
<polygon fill="white" stroke="black" points="261,-318 181,-318 181,-282 261,-282 261,-318"/>
<text text-anchor="middle" x="221" y="-296.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M125.32,-305.47C139.75,-304.64 155.88,-303.7 170.68,-302.85"/>
<polygon fill="blue" stroke="blue" points="170.9,-306.34 180.68,-302.27 170.5,-299.35 170.9,-306.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<g id="a_node7"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn test_data_presentation() &#45;&gt; ReceiptCredentialPresentation { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const RANDOMNESS: [u8; RANDOMNESS_LEN] = [33; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::gene...">
<polygon fill="white" stroke="black" points="645,-318 471,-318 471,-282 645,-282 645,-318"/>
<text text-anchor="middle" x="558" y="-296.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_data_presentation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M645.27,-301.06C702.21,-305.9 775.53,-320.51 827,-361 937.81,-448.18 984.84,-622.41 999.54,-690.66"/>
<polygon fill="blue" stroke="blue" points="996.16,-691.59 1001.63,-700.67 1003.01,-690.17 996.16,-691.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M261.08,-300C309.68,-300 394.31,-300 460.65,-300"/>
<polygon fill="blue" stroke="blue" points="460.72,-303.5 470.72,-300 460.72,-296.5 460.72,-303.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().</title>
<g id="a_node9"><a xlink:title=" &#160;&#160;&#160;fn valid_gift_badge() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;proto::GiftBadge::test_data().try_into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(GiftBadge::Valid { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receipt_credential_presentation: proto::GiftBadg...">
<polygon fill="white" stroke="black" points="145,-272 16,-272 16,-236 145,-236 145,-272"/>
<text text-anchor="middle" x="80.5" y="-250.3" font-family="Helvetica,sans-Serif" font-size="14.00">valid_gift_badge</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data_presentation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M145.13,-260.16C226.08,-267.99 366.62,-281.58 460.71,-290.68"/>
<polygon fill="blue" stroke="blue" points="460.52,-294.18 470.81,-291.66 461.19,-287.21 460.52,-294.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/valid_gift_badge().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 backup/chat/gift_badge/test/impl#[`proto::GiftBadge`]test_data().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M135.84,-272.05C147.45,-275.9 159.64,-279.95 171.03,-283.74"/>
<polygon fill="blue" stroke="blue" points="170.2,-287.15 180.8,-286.98 172.41,-280.51 170.2,-287.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node10"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chatId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;authorId: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dateSent: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expireStartDate: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiresInMs:...">
<polygon fill="white" stroke="black" points="252,-189 190,-189 190,-153 252,-153 252,-189"/>
<text text-anchor="middle" x="221" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node11"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;receiptCredentialPresentation, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let...">
<polygon fill="white" stroke="black" points="589,-189 527,-189 527,-153 589,-153 589,-189"/>
<text text-anchor="middle" x="558" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M252.02,-171C312.39,-171 448.5,-171 516.6,-171"/>
<polygon fill="blue" stroke="blue" points="516.92,-174.5 526.92,-171 516.92,-167.5 516.92,-174.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::GiftBadge`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M589.2,-168.06C643.55,-164.5 758.51,-165.08 827,-224 973.25,-349.81 999.34,-605.03 1003.99,-690.43"/>
<polygon fill="blue" stroke="blue" points="1000.51,-690.84 1004.49,-700.66 1007.5,-690.5 1000.51,-690.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node12"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="111.5,-189 49.5,-189 49.5,-153 111.5,-153 111.5,-189"/>
<text text-anchor="middle" x="80.5" y="-167.3" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::ChatItem`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M111.55,-171C131.38,-171 157.6,-171 179.29,-171"/>
<polygon fill="blue" stroke="blue" points="179.53,-174.5 189.53,-171 179.53,-167.5 179.53,-174.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().</title>
<g id="a_node13"><a xlink:title=" &#160;&#160;&#160;async fn test_successful_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server_params = zkgroup::ServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let aci = Aci::parse_fr...">
<polygon fill="white" stroke="black" points="649,-106 467,-106 467,-70 649,-70 649,-106"/>
<text text-anchor="middle" x="558" y="-84.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_successful_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_successful_request().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.19,-83.56C706.72,-85.6 779.18,-97.89 827,-141 994.47,-291.98 1006.23,-596.39 1005.67,-690.57"/>
<polygon fill="blue" stroke="blue" points="1002.17,-690.71 1005.55,-700.75 1009.17,-690.79 1002.17,-690.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().</title>
<g id="a_node14"><a xlink:title=" &#160;&#160;&#160;async fn test_unsuccessful_requests( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;response: chat::Response, &#160;&#160;&#160;&#160;) &#45;&gt; RequestError&lt;ProfileKeyCredentialRequestError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let randomness = zkgroup::TEST_ARRAY_32; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let server...">
<polygon fill="white" stroke="black" points="661.5,-52 454.5,-52 454.5,-16 661.5,-16 661.5,-52"/>
<text text-anchor="middle" x="558" y="-30.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_unsuccessful_requests</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/profiles/test/test_unsuccessful_requests().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M661.71,-18.31C716.7,-15.78 782.16,-22.96 827,-61 926.88,-145.73 987.12,-575.9 1001.59,-690.77"/>
<polygon fill="blue" stroke="blue" points="998.14,-691.39 1002.85,-700.88 1005.09,-690.52 998.14,-691.39"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<g id="a_node15"><a xlink:title="fn endorsement_flow(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; endorsements&#39; ); &#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;let inputs: Vec&lt;RistrettoPoint&gt; = (0.....">
<polygon fill="white" stroke="black" points="1421.5,-1285 1277.5,-1285 1277.5,-1249 1421.5,-1249 1421.5,-1285"/>
<text text-anchor="middle" x="1349.5" y="-1263.3" font-family="Helvetica,sans-Serif" font-size="14.00">endorsement_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<g id="a_node20"><a xlink:title=" &#160;&#160;&#160;pub fn generate(randomness: [u8; RANDOMNESS_LEN]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut sho = poksho::ShoHmacSha256::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b&#39; Signal_ZKCredential_Endorsements_ServerRootKeyPair_generate_20240207&#39; ,...">
<polygon fill="white" stroke="black" points="1627,-1530 1548,-1530 1548,-1494 1627,-1494 1627,-1530"/>
<text text-anchor="middle" x="1587.5" y="-1508.3" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.9,-1260.99C1454.24,-1262.28 1490.41,-1269.98 1514,-1294 1574.12,-1355.21 1494.59,-1413.49 1542,-1485 1542.34,-1485.52 1542.7,-1486.03 1543.07,-1486.53"/>
<polygon fill="blue" stroke="blue" points="1540.62,-1489.03 1550.01,-1493.94 1545.73,-1484.25 1540.62,-1489.03"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<g id="a_node22"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedKeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk_prime: (self.sk + t).invert(), &#160;&#160;...">
<polygon fill="white" stroke="black" points="1633,-1422 1542,-1422 1542,-1386 1633,-1386 1633,-1422"/>
<text text-anchor="middle" x="1587.5" y="-1400.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.85,-1266.36C1452.3,-1269.09 1486.97,-1276.45 1514,-1294 1544.14,-1313.57 1564.6,-1350.56 1575.9,-1376.21"/>
<polygon fill="blue" stroke="blue" points="1572.81,-1377.9 1579.92,-1385.76 1579.27,-1375.19 1572.81,-1377.9"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<g id="a_node25"><a xlink:title=" &#160;&#160;&#160;pub fn derive_key(&amp;self, mut tag_info: impl ShoApi) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let t = tag_info.get_scalar(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.derive_key_from_tag_scalar(&amp;t) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1633,-1476 1542,-1476 1542,-1440 1633,-1440 1633,-1476"/>
<text text-anchor="middle" x="1587.5" y="-1454.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.73,-1261.61C1453.83,-1263.07 1489.85,-1270.75 1514,-1294 1558.77,-1337.1 1506.22,-1380.19 1542,-1431 1542.36,-1431.51 1542.73,-1432.01 1543.11,-1432.5"/>
<polygon fill="blue" stroke="blue" points="1540.73,-1435.07 1550.2,-1439.81 1545.75,-1430.19 1540.73,-1435.07"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<g id="a_node16"><a xlink:title="fn key_derivation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;let mut info_sho = poksho::ShoHmacSha256::new(b&#39; ExampleEndorsements&#39; ); &#160;&#160;&#160;&#160;info_sho....">
<polygon fill="white" stroke="black" points="1408,-1339 1291,-1339 1291,-1303 1408,-1303 1408,-1339"/>
<text text-anchor="middle" x="1349.5" y="-1317.3" font-family="Helvetica,sans-Serif" font-size="14.00">key_derivation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1408.29,-1325.81C1443.49,-1331.75 1486.78,-1344.91 1514,-1374 1548.76,-1411.15 1511.77,-1444.08 1542,-1485 1542.37,-1485.5 1542.75,-1485.99 1543.14,-1486.48"/>
<polygon fill="blue" stroke="blue" points="1540.81,-1489.09 1550.35,-1493.7 1545.76,-1484.15 1540.81,-1489.09"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1408.01,-1338.42C1439.52,-1348.27 1479.14,-1361.16 1514,-1374 1520.85,-1376.52 1528.02,-1379.31 1535.06,-1382.13"/>
<polygon fill="blue" stroke="blue" points="1533.97,-1385.46 1544.55,-1385.98 1536.6,-1378.98 1533.97,-1385.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1408.24,-1328.26C1442.33,-1335.13 1484.45,-1348.41 1514,-1374 1535.33,-1392.48 1522.95,-1410.18 1542,-1431 1542.73,-1431.8 1543.49,-1432.58 1544.28,-1433.35"/>
<polygon fill="blue" stroke="blue" points="1542.02,-1436.02 1551.91,-1439.83 1546.55,-1430.69 1542.02,-1436.02"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().</title>
<g id="a_node17"><a xlink:title="criterion_group!(benches, endorsement_flow, key_derivation); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1043.5,-1312 968.5,-1312 968.5,-1276 1043.5,-1276 1043.5,-1312"/>
<text text-anchor="middle" x="1006" y="-1290.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsement_flow().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1043.55,-1291.11C1096.52,-1286.92 1196.04,-1279.05 1266.98,-1273.44"/>
<polygon fill="blue" stroke="blue" points="1267.54,-1276.91 1277.24,-1272.63 1266.99,-1269.93 1267.54,-1276.91"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 key_derivation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1043.55,-1296.89C1100.04,-1301.36 1209.5,-1310.01 1280.75,-1315.64"/>
<polygon fill="blue" stroke="blue" points="1280.73,-1319.15 1290.97,-1316.45 1281.28,-1312.17 1280.73,-1319.15"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar().</title>
<g id="a_node18"><a xlink:title=" &#160;&#160;&#160;fn derive_key_from_tag_scalar(&amp;self, t: &amp;Scalar) &#45;&gt; ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ServerDerivedPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PK_prime: self.PK + RistrettoPoint::mul_base(t), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1876,-1476 1669,-1476 1669,-1440 1876,-1440 1876,-1476"/>
<text text-anchor="middle" x="1772.5" y="-1454.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_key_from_tag_scalar</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]mul_base(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]mul_base().</title>
<path fill="none" stroke="blue" d="M1876.07,-1473.47C1884.97,-1474.81 1893.69,-1476.13 1901.87,-1477.36"/>
<polygon fill="blue" stroke="blue" points="1901.51,-1480.85 1911.92,-1478.88 1902.56,-1473.93 1901.51,-1480.85"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().</title>
<g id="a_node19"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn round_trip&lt;T: Serialize + for&lt;&#39;a&gt; Deserialize&lt;&#39;a&gt; + PartialDefault&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value: &amp;T, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expected_len: usize, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bincode_options = bincode::DefaultOp...">
<polygon fill="white" stroke="black" points="1393.5,-1584 1305.5,-1584 1305.5,-1548 1393.5,-1548 1393.5,-1584"/>
<text text-anchor="middle" x="1349.5" y="-1562.3" font-family="Helvetica,sans-Serif" font-size="14.00">round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1393.67,-1561.18C1426.91,-1556.92 1473.83,-1549.69 1514,-1539 1521.94,-1536.89 1530.22,-1534.25 1538.22,-1531.44"/>
<polygon fill="blue" stroke="blue" points="1539.6,-1534.67 1547.82,-1527.98 1537.22,-1528.09 1539.6,-1534.67"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1393.54,-1570.86C1430.13,-1572.49 1481.72,-1568.5 1514,-1539 1550.61,-1505.55 1512.4,-1470.79 1542,-1431 1542.37,-1430.5 1542.75,-1430.01 1543.15,-1429.53"/>
<polygon fill="blue" stroke="blue" points="1545.77,-1431.86 1550.37,-1422.32 1540.82,-1426.9 1545.77,-1431.86"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/round_trip().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1393.78,-1568.99C1429.28,-1569.24 1479.2,-1564.27 1514,-1539 1535.88,-1523.12 1523.53,-1504.75 1542,-1485 1542.74,-1484.21 1543.51,-1483.43 1544.3,-1482.67"/>
<polygon fill="blue" stroke="blue" points="1546.56,-1485.34 1551.97,-1476.23 1542.06,-1479.98 1546.56,-1485.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw().</title>
<g id="a_node27"><a xlink:title=" &#160;&#160;&#160;pub fn from_raw(sk: Scalar) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sk, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public: ServerRootPublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PK: RistrettoPoint::mul_base(&amp;sk), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1813,-1530 1732,-1530 1732,-1494 1813,-1494 1813,-1530"/>
<text text-anchor="middle" x="1772.5" y="-1508.3" font-family="Helvetica,sans-Serif" font-size="14.00">from_raw</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1627.31,-1512C1654.81,-1512 1691.94,-1512 1721.63,-1512"/>
<polygon fill="blue" stroke="blue" points="1721.8,-1515.5 1731.8,-1512 1721.8,-1508.5 1721.8,-1515.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair][`Deserialize&lt;&#39;de&gt;`]deserialize(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair][`Deserialize&lt;&#39;de&gt;`]deserialize().</title>
<g id="a_node21"><a xlink:title=" &#160;&#160;&#160;fn deserialize&lt;D&gt;(deserializer: D) &#45;&gt; Result&lt;Self, D::Error&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;D: serde::Deserializer&lt;&#39;de&gt;, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sk = Scalar::deserialize(deserializer)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::from_raw(sk)...">
<polygon fill="white" stroke="black" points="1633,-1584 1542,-1584 1542,-1548 1633,-1548 1633,-1584"/>
<text text-anchor="middle" x="1587.5" y="-1562.3" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair][`Deserialize&lt;&#39;de&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair][`Deserialize&lt;&#39;de&gt;`]deserialize().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1633.27,-1552.79C1660.13,-1544.86 1694.33,-1534.77 1721.99,-1526.61"/>
<polygon fill="blue" stroke="blue" points="1723.26,-1529.88 1731.86,-1523.7 1721.28,-1523.17 1723.26,-1529.88"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1633.27,-1417.21C1653.45,-1423.17 1677.79,-1430.35 1700.38,-1437.01"/>
<polygon fill="blue" stroke="blue" points="1699.69,-1440.46 1710.27,-1439.93 1701.67,-1433.75 1699.69,-1440.46"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().</title>
<g id="a_node23"><a xlink:title=" &#160;&#160;&#160;fn default_is_identity() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!(Endorsement::combine([]).R, Endorsement::default().R); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRo...">
<polygon fill="white" stroke="black" points="1421,-1530 1278,-1530 1278,-1494 1421,-1494 1421,-1530"/>
<text text-anchor="middle" x="1349.5" y="-1508.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_is_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.31,-1512C1458.96,-1512 1504.29,-1512 1537.93,-1512"/>
<polygon fill="blue" stroke="blue" points="1537.97,-1515.5 1547.97,-1512 1537.97,-1508.5 1537.97,-1515.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.11,-1514.08C1452.14,-1511.73 1487.46,-1504.27 1514,-1485 1535.88,-1469.12 1523.53,-1450.75 1542,-1431 1542.74,-1430.21 1543.51,-1429.43 1544.3,-1428.67"/>
<polygon fill="blue" stroke="blue" points="1546.56,-1431.34 1551.97,-1422.23 1542.06,-1425.98 1546.56,-1431.34"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_is_identity().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.15,-1503.37C1450.18,-1499.04 1483.97,-1492.99 1514,-1485 1520.05,-1483.39 1526.3,-1481.47 1532.47,-1479.41"/>
<polygon fill="blue" stroke="blue" points="1533.77,-1482.66 1542.07,-1476.08 1531.48,-1476.05 1533.77,-1482.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().</title>
<g id="a_node24"><a xlink:title=" &#160;&#160;&#160;fn combining_endorsements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="1447.5,-1476 1251.5,-1476 1251.5,-1440 1447.5,-1440 1447.5,-1476"/>
<text text-anchor="middle" x="1349.5" y="-1454.3" font-family="Helvetica,sans-Serif" font-size="14.00">combining_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1447.56,-1470.86C1469.57,-1474.65 1492.73,-1479.34 1514,-1485 1521.94,-1487.11 1530.22,-1489.75 1538.22,-1492.56"/>
<polygon fill="blue" stroke="blue" points="1537.22,-1495.91 1547.82,-1496.02 1539.6,-1489.33 1537.22,-1495.91"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1447.56,-1445.14C1469.57,-1441.35 1492.73,-1436.66 1514,-1431 1520.05,-1429.39 1526.3,-1427.47 1532.47,-1425.41"/>
<polygon fill="blue" stroke="blue" points="1533.77,-1428.66 1542.07,-1422.08 1531.48,-1422.05 1533.77,-1428.66"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/combining_endorsements().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1447.51,-1458C1476.23,-1458 1506.66,-1458 1531.7,-1458"/>
<polygon fill="blue" stroke="blue" points="1531.73,-1461.5 1541.73,-1458 1531.73,-1454.5 1531.73,-1461.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key_from_tag_scalar().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1633.27,-1458C1641.19,-1458 1649.74,-1458 1658.58,-1458"/>
<polygon fill="blue" stroke="blue" points="1658.66,-1461.5 1668.66,-1458 1658.66,-1454.5 1658.66,-1461.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().</title>
<g id="a_node26"><a xlink:title=" &#160;&#160;&#160;fn default_flow() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut input_sho = poksho::ShoSha256::new(b&#39; test&#39; ); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let root_key = ServerRootKeyPair::generate([42; RANDOMNESS_LEN]); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Client &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let client_...">
<polygon fill="white" stroke="black" points="1400,-1422 1299,-1422 1299,-1386 1400,-1386 1400,-1422"/>
<text text-anchor="middle" x="1349.5" y="-1400.3" font-family="Helvetica,sans-Serif" font-size="14.00">default_flow</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1400.34,-1401.03C1435.24,-1401.44 1481.29,-1407.25 1514,-1431 1535.88,-1446.88 1523.53,-1465.25 1542,-1485 1542.74,-1485.79 1543.51,-1486.57 1544.3,-1487.33"/>
<polygon fill="blue" stroke="blue" points="1542.06,-1490.02 1551.97,-1493.77 1546.56,-1484.66 1542.06,-1490.02"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1400.26,-1404C1438.83,-1404 1492.21,-1404 1531.94,-1404"/>
<polygon fill="blue" stroke="blue" points="1531.98,-1407.5 1541.98,-1404 1531.98,-1400.5 1531.98,-1407.5"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/tests/default_flow().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1400.03,-1409.65C1432.73,-1414 1476.33,-1420.98 1514,-1431 1520.05,-1432.61 1526.3,-1434.53 1532.47,-1436.59"/>
<polygon fill="blue" stroke="blue" points="1531.48,-1439.95 1542.07,-1439.92 1533.77,-1433.34 1531.48,-1439.95"/>
</g>
<!-- rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]mul_base(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]from_raw().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 ristretto/impl#[RistrettoPoint]mul_base().</title>
<path fill="none" stroke="blue" d="M1813.23,-1506.01C1839.37,-1502.06 1873.82,-1496.87 1901.92,-1492.63"/>
<polygon fill="blue" stroke="blue" points="1902.59,-1496.07 1911.96,-1491.12 1901.55,-1489.15 1902.59,-1496.07"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<g id="a_node28"><a xlink:title="fn bench_server_param_serialization(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;&#160;let serialized_secret_params = zkgroup::seri...">
<polygon fill="white" stroke="black" points="684,-409 432,-409 432,-373 684,-373 684,-409"/>
<text text-anchor="middle" x="558" y="-387.3" font-family="Helvetica,sans-Serif" font-size="14.00">bench_server_param_serialization</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M684.01,-395.16C732.04,-401.79 785.29,-415.72 827,-444 919.4,-506.64 974.75,-634.89 995.54,-691.32"/>
<polygon fill="blue" stroke="blue" points="992.35,-692.76 999.03,-700.98 998.93,-690.39 992.35,-692.76"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().</title>
<g id="a_node29"><a xlink:title="criterion_group!(benches, bench_server_param_serialization,); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="258.5,-409 183.5,-409 183.5,-373 258.5,-373 258.5,-409"/>
<text text-anchor="middle" x="221" y="-387.3" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 bench_server_param_serialization().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M258.81,-391C298.09,-391 362.68,-391 421.71,-391"/>
<polygon fill="blue" stroke="blue" points="421.9,-394.5 431.9,-391 421.9,-387.5 421.9,-394.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<g id="a_node30"><a xlink:title="fn benchmark_integration_auth(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get...">
<polygon fill="white" stroke="black" points="666,-957 450,-957 450,-921 666,-921 666,-957"/>
<text text-anchor="middle" x="558" y="-935.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_auth</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M223.01,-409.02C228.07,-496.7 252.03,-876.03 289,-912 328.52,-950.45 388.48,-959.21 441.67,-957.47"/>
<polygon fill="blue" stroke="blue" points="442.04,-960.96 451.87,-957.01 441.72,-953.96 442.04,-960.96"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<g id="a_node31"><a xlink:title="pub fn benchmark_integration_profile(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = ser...">
<polygon fill="white" stroke="black" points="672,-903 444,-903 444,-867 672,-867 672,-903"/>
<text text-anchor="middle" x="558" y="-881.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_integration_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M221.8,-409.26C221.36,-487.32 223.89,-791.93 289,-855 326.68,-891.49 382.7,-901.79 433.8,-901.83"/>
<polygon fill="blue" stroke="blue" points="433.99,-905.33 443.95,-901.71 433.91,-898.33 433.99,-905.33"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<g id="a_node32"><a xlink:title="pub fn benchmark_group_send_endorsements(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;const DAY_ALIGNED_TIMESTAMP: zkgroup::Timestamp = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::Timestamp::from_epoch_seconds(1681344000); // 2023&#45;04&#45;13 00:00:00 U...">
<polygon fill="white" stroke="black" points="703,-1011 413,-1011 413,-975 703,-975 703,-1011"/>
<text text-anchor="middle" x="558" y="-989.3" font-family="Helvetica,sans-Serif" font-size="14.00">benchmark_group_send_endorsements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benches().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M222.79,-409.3C227.02,-502.97 248.27,-925.9 289,-966 329.08,-1005.46 390.64,-1013.8 444.67,-1011.55"/>
<polygon fill="blue" stroke="blue" points="444.86,-1015.05 454.66,-1011.02 444.49,-1008.06 444.86,-1015.05"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_auth().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M666.28,-945.4C717.35,-944.25 777.84,-936.55 827,-912 902.95,-874.07 962.61,-789.17 989.48,-745.73"/>
<polygon fill="blue" stroke="blue" points="992.5,-747.48 994.7,-737.12 986.52,-743.85 992.5,-747.48"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_integration_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M672.14,-885.73C721.22,-882.69 778.45,-874.5 827,-855 889.48,-829.9 948.86,-776.56 980.76,-744.64"/>
<polygon fill="blue" stroke="blue" points="983.36,-746.99 987.88,-737.41 978.37,-742.07 983.36,-746.99"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M649.05,-1011.06C705.79,-1022.3 780.61,-1036.87 847,-1049 877.23,-1054.52 910.79,-1060.3 939.17,-1065.09"/>
<polygon fill="blue" stroke="blue" points="938.93,-1068.6 949.37,-1066.81 940.09,-1061.7 938.93,-1068.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<g id="a_node35"><a xlink:title=" &#160;&#160;&#160;pub fn receive_with_service_ids_single_threaded( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;user_ids: impl IntoIterator&lt;Item = libsignal_core::ServiceId&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;group_params: &amp;GroupSecretPara...">
<polygon fill="white" stroke="black" points="1157,-1040 855,-1040 855,-1004 1157,-1004 1157,-1040"/>
<text text-anchor="middle" x="1006" y="-1018.3" font-family="Helvetica,sans-Serif" font-size="14.00">receive_with_service_ids_single_threaded</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.19,-1002.38C748.36,-1005.31 798.48,-1008.57 844.69,-1011.58"/>
<polygon fill="blue" stroke="blue" points="844.58,-1015.08 854.79,-1012.23 845.04,-1008.09 844.58,-1015.08"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.05,-990.92C748.22,-997.56 794.66,-1013.11 827,-1046 862.14,-1081.75 811.39,-1121.71 847,-1157 861.93,-1171.8 881.81,-1180.21 902.41,-1184.72"/>
<polygon fill="blue" stroke="blue" points="901.76,-1188.16 912.24,-1186.58 903.06,-1181.28 901.76,-1188.16"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.28,-994.5C747.27,-1001.58 792.96,-1016.48 827,-1046 847.28,-1063.59 826.49,-1085.68 847,-1103 862.8,-1116.35 882.75,-1124.22 903.11,-1128.67"/>
<polygon fill="blue" stroke="blue" points="902.63,-1132.14 913.11,-1130.59 903.95,-1125.27 902.63,-1132.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 benchmark_group_send_endorsements().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M703.2,-1000.35C745.38,-996.88 790.04,-987.33 827,-966 915.81,-914.75 972.24,-799.33 994.36,-746.43"/>
<polygon fill="blue" stroke="blue" points="997.67,-747.6 998.21,-737.01 991.19,-744.95 997.67,-747.6"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<g id="a_node33"><a xlink:title=" &#160;&#160;&#160;fn derive_public_signing_key_from_expiration( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;now: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root_public_key: impl AsRef&lt;zkcredential::endorsements::ServerRootPublicKey&gt;, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;zkcredent...">
<polygon fill="white" stroke="black" points="1506,-1175 1193,-1175 1193,-1139 1506,-1139 1506,-1175"/>
<text text-anchor="middle" x="1349.5" y="-1153.3" font-family="Helvetica,sans-Serif" font-size="14.00">derive_public_signing_key_from_expiration</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootPublicKey]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1421.83,-1175.1C1454.97,-1187.18 1491.86,-1206.6 1514,-1237 1565.29,-1307.42 1493.94,-1358.34 1542,-1431 1542.34,-1431.52 1542.7,-1432.03 1543.07,-1432.53"/>
<polygon fill="blue" stroke="blue" points="1540.62,-1435.03 1550,-1439.94 1545.73,-1430.25 1540.62,-1435.03"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]derive_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1062.84,-1063.54C1165.47,-1044.16 1385.35,-1019.62 1514,-1130 1551.51,-1162.18 1574.79,-1312.57 1583.08,-1375.84"/>
<polygon fill="blue" stroke="blue" points="1579.63,-1376.43 1584.37,-1385.9 1586.57,-1375.54 1579.63,-1376.43"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids_single_threaded().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1127.89,-1040.08C1137.85,-1042.68 1147.66,-1045.64 1157,-1049 1215.68,-1070.14 1277.47,-1108.29 1314.49,-1133.13"/>
<polygon fill="blue" stroke="blue" points="1312.66,-1136.12 1322.9,-1138.83 1316.59,-1130.32 1312.66,-1136.12"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1099.87,-1176.66C1125.57,-1174.63 1154.28,-1172.36 1182.79,-1170.1"/>
<polygon fill="blue" stroke="blue" points="1183.17,-1173.58 1192.87,-1169.3 1182.62,-1166.6 1183.17,-1173.58"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]derive_public_signing_key_from_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1098.52,-1137.24C1124.5,-1139.29 1153.62,-1141.59 1182.56,-1143.88"/>
<polygon fill="blue" stroke="blue" points="1182.54,-1147.39 1192.78,-1144.69 1183.09,-1140.41 1182.54,-1147.39"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().&#45;&gt;rust&#45;analyzer cargo zkcredential 0.1.0 endorsements/impl#[ServerRootKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1045.53,-726.45C1143.78,-747.71 1403.69,-818.69 1514,-992 1572.92,-1084.57 1485.48,-1390.94 1542,-1485 1542.18,-1485.3 1542.37,-1485.61 1542.56,-1485.91"/>
<polygon fill="blue" stroke="blue" points="1540.13,-1488.45 1549.3,-1493.76 1545.45,-1483.89 1540.13,-1488.45"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().</title>
<g id="a_node39"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut rng = rand::rng(); &#160;&#160;&#160;&#160;let mut randomness = [0u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut randomness); &#160;&#160;&#160;&#160;&#160;let secret_params = GenericServerSecretParams::generate(randomness); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="585,-820 531,-820 531,-784 585,-784 585,-820"/>
<text text-anchor="middle" x="558" y="-798.3" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 main().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M585.11,-800.62C633.32,-797.74 739.37,-789.8 827,-772 871.62,-762.93 921.18,-747.74 956.65,-735.94"/>
<polygon fill="blue" stroke="blue" points="957.9,-739.21 966.27,-732.71 955.67,-732.58 957.9,-739.21"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().</title>
<g id="a_node40"><a xlink:title="fn test_endorsement() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes = [0x45u8...">
<polygon fill="white" stroke="black" points="629,-1202 487,-1202 487,-1166 629,-1166 629,-1202"/>
<text text-anchor="middle" x="558" y="-1180.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_endorsement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M629.08,-1195.9C687.94,-1201.83 771.14,-1200.2 827,-1157 847.25,-1141.34 827.3,-1119.34 847,-1103 872.3,-1082 907.9,-1074.64 938.9,-1072.79"/>
<polygon fill="blue" stroke="blue" points="939.37,-1076.28 949.22,-1072.37 939.08,-1069.28 939.37,-1076.28"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_ciphertexts().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M629.18,-1184C702.61,-1184 818.63,-1184 902.35,-1184"/>
<polygon fill="blue" stroke="blue" points="902.39,-1187.5 912.39,-1184 902.39,-1180.5 902.39,-1187.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M629.08,-1177.91C683.21,-1172.97 759.96,-1165.46 827,-1157 851.67,-1153.89 878.19,-1150.1 903.03,-1146.37"/>
<polygon fill="blue" stroke="blue" points="903.83,-1149.78 913.2,-1144.82 902.78,-1142.86 903.83,-1149.78"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_endorsement().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M629.13,-1198.68C689.87,-1206.94 775.82,-1207.16 827,-1157 853.38,-1131.15 835.29,-1027.03 847,-992 879.77,-893.97 950.11,-792.09 984.8,-745.32"/>
<polygon fill="blue" stroke="blue" points="987.66,-747.35 990.85,-737.25 982.06,-743.16 987.66,-747.35"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().</title>
<g id="a_node41"><a xlink:title="fn test_client_rejects_bad_expirations() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: Random...">
<polygon fill="white" stroke="black" points="686.5,-1148 429.5,-1148 429.5,-1112 686.5,-1112 686.5,-1148"/>
<text text-anchor="middle" x="558" y="-1126.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_client_rejects_bad_expirations</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M686.61,-1118.46C731.09,-1114.09 781.3,-1108.76 827,-1103 864.24,-1098.3 905.7,-1092.07 939.24,-1086.78"/>
<polygon fill="blue" stroke="blue" points="940.05,-1090.19 949.38,-1085.17 938.95,-1083.28 940.05,-1090.19"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M686.51,-1130C755.17,-1130 838.73,-1130 903.03,-1130"/>
<polygon fill="blue" stroke="blue" points="903.18,-1133.5 913.18,-1130 903.18,-1126.5 903.18,-1133.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_client_rejects_bad_expirations().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M686.63,-1147.75C736.19,-1147.51 789.84,-1137.37 827,-1103 863.8,-1068.96 829.74,-1039.06 847,-992 882.6,-894.92 951.65,-792.52 985.43,-745.47"/>
<polygon fill="blue" stroke="blue" points="988.47,-747.23 991.5,-737.08 982.8,-743.13 988.47,-747.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().</title>
<g id="a_node42"><a xlink:title="fn test_single_member_group() { &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness3: RandomnessBytes =...">
<polygon fill="white" stroke="black" points="659.5,-1094 456.5,-1094 456.5,-1058 659.5,-1058 659.5,-1094"/>
<text text-anchor="middle" x="558" y="-1072.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_single_member_group</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendDerivedKeyPair]for_expiration().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M659.65,-1076C745.16,-1076 865.44,-1076 939.15,-1076"/>
<polygon fill="blue" stroke="blue" points="939.23,-1079.5 949.23,-1076 939.23,-1072.5 939.23,-1079.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/groups/group_send_endorsement/impl#[GroupSendEndorsementsResponse]receive_with_service_ids().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M659.67,-1084.94C710,-1089.71 771.79,-1096.04 827,-1103 851.67,-1106.11 878.19,-1109.9 903.03,-1113.63"/>
<polygon fill="blue" stroke="blue" points="902.78,-1117.14 913.2,-1115.18 903.83,-1110.22 902.78,-1117.14"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_single_member_group().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M659.54,-1088.75C714.36,-1090.24 780.35,-1082.49 827,-1046 847.16,-1030.23 836.11,-1015.16 847,-992 891.12,-898.2 956.39,-793.85 987.4,-745.84"/>
<polygon fill="blue" stroke="blue" points="990.45,-747.57 992.95,-737.27 984.57,-743.76 990.45,-747.57"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().</title>
<g id="a_node43"><a xlink:title="fn test_integration_auth_zkc() { &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.get_public_params(); ...">
<polygon fill="white" stroke="black" points="655,-629 461,-629 461,-593 655,-593 655,-629"/>
<text text-anchor="middle" x="558" y="-607.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_auth_zkc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_auth_zkc().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M655.25,-613.11C706.91,-616.13 771.24,-622.94 827,-638 876.5,-651.37 929.53,-677.15 964.71,-696.05"/>
<polygon fill="blue" stroke="blue" points="963.24,-699.23 973.7,-700.93 966.59,-693.08 963.24,-699.23"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().</title>
<g id="a_node44"><a xlink:title="fn test_server_sigs() { &#160;&#160;&#160;&#160;let server_secret_params = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;zkgroup::api::server_params::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params.ge...">
<polygon fill="white" stroke="black" points="622,-575 494,-575 494,-539 622,-539 622,-575"/>
<text text-anchor="middle" x="558" y="-553.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_sigs</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_server_sigs().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M622.18,-553.88C677.96,-553.3 760.52,-557.86 827,-584 889.49,-608.57 948.86,-661.65 980.76,-693.44"/>
<polygon fill="blue" stroke="blue" points="978.37,-696 987.89,-700.65 983.35,-691.08 978.37,-696"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().</title>
<g id="a_node45"><a xlink:title="fn test_integration_expiring_profile() { &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(zkgroup::TEST_ARRAY_32); &#160;&#160;&#160;&#160;let server_public_params = server_secret_params...">
<polygon fill="white" stroke="black" points="677.5,-737 438.5,-737 438.5,-701 677.5,-701 677.5,-737"/>
<text text-anchor="middle" x="558" y="-715.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_integration_expiring_profile</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_integration_expiring_profile().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M677.64,-719C768.76,-719 889.9,-719 956.31,-719"/>
<polygon fill="blue" stroke="blue" points="956.49,-722.5 966.49,-719 956.49,-715.5 956.49,-722.5"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().</title>
<g id="a_node46"><a xlink:title="fn test_profile_key_credential_presentation_v1_does_not_verify() { &#160;&#160;&#160;&#160;// Originally from test_integration_profile. &#160;&#160;&#160;&#160;// SERVER &#160;&#160;&#160;&#160;let server_secret_params = zkgroup::ServerSecretParams::generate(z...">
<polygon fill="white" stroke="black" points="773.5,-683 342.5,-683 342.5,-647 773.5,-647 773.5,-683"/>
<text text-anchor="middle" x="558" y="-661.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_profile_key_credential_presentation_v1_does_not_verify</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_profile_key_credential_presentation_v1_does_not_verify().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M749.46,-683C775.54,-685.81 801.95,-688.84 827,-692 870.75,-697.52 920.33,-705.15 956.04,-710.9"/>
<polygon fill="blue" stroke="blue" points="955.76,-714.4 966.19,-712.54 956.88,-707.49 955.76,-714.4"/>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().</title>
<g id="a_node47"><a xlink:title="fn test_api() { &#160;&#160;&#160;&#160;let randomness0: RandomnessBytes = [0x42u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness1: RandomnessBytes = [0x43u8; RANDOMNESS_LEN]; &#160;&#160;&#160;&#160;let randomness2: RandomnessBytes = [0x44u8; RANDOM...">
<polygon fill="white" stroke="black" points="593.5,-492 522.5,-492 522.5,-456 593.5,-456 593.5,-492"/>
<text text-anchor="middle" x="558" y="-470.3" font-family="Helvetica,sans-Serif" font-size="14.00">test_api</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo zkgroup 0.9.0 test_api().&#45;&gt;rust&#45;analyzer cargo zkgroup 0.9.0 api/server_params/impl#[ServerSecretParams]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M593.9,-474.16C647.4,-475.83 751.42,-484.8 827,-527 900.39,-567.98 960.64,-649.95 988.43,-692.3"/>
<polygon fill="blue" stroke="blue" points="985.65,-694.45 994.02,-700.95 991.53,-690.65 985.65,-694.45"/>
</g>
</g>
</svg>
