<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: function_subgraph Pages: 1 -->
<svg width="3703pt" height="6811pt"
 viewBox="0.00 0.00 3703.00 6810.77" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 6806.77)">
<title>function_subgraph</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-6806.77 3699,-6806.77 3699,4 -4,4"/>
<g id="clust1" class="cluster">
<title>cluster_0</title>
<polygon fill="lightgrey" stroke="lightgrey" stroke-dasharray="1,5" points="3556,-1193.77 3556,-1268.77 3687,-1268.77 3687,-1193.77 3556,-1193.77"/>
<text text-anchor="middle" x="3621.5" y="-1253.57" font-family="Helvetica,sans-Serif" font-size="14.00">scalar.rs</text>
</g>
<g id="clust2" class="cluster">
<title>cluster_1</title>
<polygon fill="lightblue" stroke="lightblue" points="2918,-6520.77 2918,-6595.77 3047,-6595.77 3047,-6520.77 2918,-6520.77"/>
<text text-anchor="middle" x="2982.5" y="-6580.57" font-family="Helvetica,sans-Serif" font-size="14.00">backup.rs</text>
</g>
<g id="clust3" class="cluster">
<title>cluster_2</title>
<polygon fill="lightblue" stroke="lightblue" points="1500.5,-6112.77 1500.5,-6187.77 1765.5,-6187.77 1765.5,-6112.77 1500.5,-6112.77"/>
<text text-anchor="middle" x="1633" y="-6172.57" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust4" class="cluster">
<title>cluster_3</title>
<polygon fill="lightblue" stroke="lightblue" points="1375,-6029.77 1375,-6104.77 1891,-6104.77 1891,-6029.77 1375,-6029.77"/>
<text text-anchor="middle" x="1633" y="-6089.57" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust5" class="cluster">
<title>cluster_4</title>
<polygon fill="lightblue" stroke="lightblue" points="1162,-6499.77 1162,-6574.77 1741.5,-6574.77 1741.5,-6499.77 1162,-6499.77"/>
<text text-anchor="middle" x="1451.75" y="-6559.57" font-family="Helvetica,sans-Serif" font-size="14.00">lib.rs</text>
</g>
<g id="clust6" class="cluster">
<title>cluster_5</title>
<polygon fill="lightblue" stroke="lightblue" points="2649.5,-6719.77 2649.5,-6794.77 2850.5,-6794.77 2850.5,-6719.77 2649.5,-6719.77"/>
<text text-anchor="middle" x="2750" y="-6779.57" font-family="Helvetica,sans-Serif" font-size="14.00">account_keys.rs</text>
</g>
<g id="clust7" class="cluster">
<title>cluster_6</title>
<polygon fill="lightblue" stroke="lightblue" points="509.5,-1251.77 509.5,-2406.77 852.5,-2406.77 852.5,-1251.77 509.5,-1251.77"/>
<text text-anchor="middle" x="681" y="-2391.57" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust8" class="cluster">
<title>cluster_7</title>
<polygon fill="lightblue" stroke="lightblue" points="2660.5,-973.77 2660.5,-1048.77 2839.5,-1048.77 2839.5,-973.77 2660.5,-973.77"/>
<text text-anchor="middle" x="2750" y="-1033.57" font-family="Helvetica,sans-Serif" font-size="14.00">storage.rs</text>
</g>
<g id="clust9" class="cluster">
<title>cluster_8</title>
<polygon fill="lightblue" stroke="lightblue" points="1107.5,-6416.77 1107.5,-6491.77 1734.5,-6491.77 1734.5,-6416.77 1107.5,-6416.77"/>
<text text-anchor="middle" x="1421" y="-6476.57" font-family="Helvetica,sans-Serif" font-size="14.00">storage.rs</text>
</g>
<g id="clust10" class="cluster">
<title>cluster_9</title>
<polygon fill="lightblue" stroke="lightblue" points="1107.5,-5784.77 1107.5,-5859.77 1286.5,-5859.77 1286.5,-5784.77 1107.5,-5784.77"/>
<text text-anchor="middle" x="1197" y="-5844.57" font-family="Helvetica,sans-Serif" font-size="14.00">storage.rs</text>
</g>
<g id="clust11" class="cluster">
<title>cluster_10</title>
<polygon fill="lightblue" stroke="lightblue" points="1587.5,-1330.77 1587.5,-1513.77 2339,-1513.77 2339,-1330.77 1587.5,-1330.77"/>
<text text-anchor="middle" x="1963.25" y="-1498.57" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust12" class="cluster">
<title>cluster_11</title>
<polygon fill="lightblue" stroke="lightblue" points="2698,-3300.77 2698,-3375.77 2802,-3375.77 2802,-3300.77 2698,-3300.77"/>
<text text-anchor="middle" x="2750" y="-3360.57" font-family="Helvetica,sans-Serif" font-size="14.00">ed_to_xed.rs</text>
</g>
<g id="clust13" class="cluster">
<title>cluster_12</title>
<polygon fill="lightblue" stroke="lightblue" points="2649,-1276.77 2649,-1621.77 3446,-1621.77 3446,-1276.77 2649,-1276.77"/>
<text text-anchor="middle" x="3047.5" y="-1606.57" font-family="Helvetica,sans-Serif" font-size="14.00">curve.rs</text>
</g>
<g id="clust14" class="cluster">
<title>cluster_13</title>
<polygon fill="lightblue" stroke="lightblue" points="3175.5,-1031.77 3175.5,-1268.77 3536,-1268.77 3536,-1031.77 3175.5,-1031.77"/>
<text text-anchor="middle" x="3355.75" y="-1253.57" font-family="Helvetica,sans-Serif" font-size="14.00">curve25519.rs</text>
</g>
<g id="clust15" class="cluster">
<title>cluster_14</title>
<polygon fill="lightblue" stroke="lightblue" points="1594,-594.77 1594,-669.77 2789,-669.77 2789,-594.77 1594,-594.77"/>
<text text-anchor="middle" x="2191.5" y="-654.57" font-family="Helvetica,sans-Serif" font-size="14.00">scramble.rs</text>
</g>
<g id="clust16" class="cluster">
<title>cluster_15</title>
<polygon fill="lightblue" stroke="lightblue" points="2040.5,-427.77 2040.5,-556.77 2810,-556.77 2810,-427.77 2040.5,-427.77"/>
<text text-anchor="middle" x="2425.25" y="-541.57" font-family="Helvetica,sans-Serif" font-size="14.00">request.rs</text>
</g>
<g id="clust17" class="cluster">
<title>cluster_16</title>
<polygon fill="lightblue" stroke="lightblue" points="8,-2682.77 8,-2757.77 99,-2757.77 99,-2682.77 8,-2682.77"/>
<text text-anchor="middle" x="53.5" y="-2742.57" font-family="Helvetica,sans-Serif" font-size="14.00">kem.rs</text>
</g>
<g id="clust18" class="cluster">
<title>cluster_17</title>
<polygon fill="lightblue" stroke="lightblue" points="12.5,-3324.77 12.5,-3399.77 775,-3399.77 775,-3324.77 12.5,-3324.77"/>
<text text-anchor="middle" x="393.75" y="-3384.57" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust19" class="cluster">
<title>cluster_18</title>
<polygon fill="lightblue" stroke="lightblue" points="615,-1114.77 615,-1243.77 748,-1243.77 748,-1114.77 615,-1114.77"/>
<text text-anchor="middle" x="681.5" y="-1228.57" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust20" class="cluster">
<title>cluster_19</title>
<polygon fill="lightblue" stroke="lightblue" points="119,-3187.77 119,-3316.77 806,-3316.77 806,-3187.77 119,-3187.77"/>
<text text-anchor="middle" x="462.5" y="-3301.57" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust21" class="cluster">
<title>cluster_20</title>
<polygon fill="lightblue" stroke="lightblue" points="1487,-6195.77 1487,-6378.77 1779,-6378.77 1779,-6195.77 1487,-6195.77"/>
<text text-anchor="middle" x="1633" y="-6363.57" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint.rs</text>
</g>
<g id="clust22" class="cluster">
<title>cluster_21</title>
<polygon fill="lightblue" stroke="lightblue" points="1039,-2293.77 1039,-2422.77 1355,-2422.77 1355,-2293.77 1039,-2293.77"/>
<text text-anchor="middle" x="1197" y="-2407.57" font-family="Helvetica,sans-Serif" font-size="14.00">group_cipher.rs</text>
</g>
<g id="clust23" class="cluster">
<title>cluster_22</title>
<polygon fill="lightblue" stroke="lightblue" points="1510,-5784.77 1510,-6021.77 2364.5,-6021.77 2364.5,-5784.77 1510,-5784.77"/>
<text text-anchor="middle" x="1937.25" y="-6006.57" font-family="Helvetica,sans-Serif" font-size="14.00">identity_key.rs</text>
</g>
<g id="clust24" class="cluster">
<title>cluster_23</title>
<polygon fill="lightblue" stroke="lightblue" points="2079.5,-1644.77 2079.5,-1881.77 2846,-1881.77 2846,-1644.77 2079.5,-1644.77"/>
<text text-anchor="middle" x="2462.75" y="-1866.57" font-family="Helvetica,sans-Serif" font-size="14.00">protocol.rs</text>
</g>
<g id="clust25" class="cluster">
<title>cluster_24</title>
<polygon fill="lightblue" stroke="lightblue" points="2151.5,-4010.77 2151.5,-4139.77 2843,-4139.77 2843,-4010.77 2151.5,-4010.77"/>
<text text-anchor="middle" x="2497.25" y="-4124.57" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust26" class="cluster">
<title>cluster_25</title>
<polygon fill="lightblue" stroke="lightblue" points="2922.5,-4064.77 2922.5,-4139.77 3042.5,-4139.77 3042.5,-4064.77 2922.5,-4064.77"/>
<text text-anchor="middle" x="2982.5" y="-4124.57" font-family="Helvetica,sans-Serif" font-size="14.00">keys.rs</text>
</g>
<g id="clust27" class="cluster">
<title>cluster_26</title>
<polygon fill="lightblue" stroke="lightblue" points="1046.5,-707.77 1046.5,-1052.77 2384.5,-1052.77 2384.5,-707.77 1046.5,-707.77"/>
<text text-anchor="middle" x="1715.5" y="-1037.57" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust28" class="cluster">
<title>cluster_27</title>
<polygon fill="lightblue" stroke="lightblue" points="1911,-2635.77 1911,-3034.77 2833,-3034.77 2833,-2635.77 1911,-2635.77"/>
<text text-anchor="middle" x="2372" y="-3019.57" font-family="Helvetica,sans-Serif" font-size="14.00">sender_keys.rs</text>
</g>
<g id="clust29" class="cluster">
<title>cluster_28</title>
<polygon fill="lightblue" stroke="lightblue" points="1100,-2612.77 1100,-2741.77 1721,-2741.77 1721,-2612.77 1100,-2612.77"/>
<text text-anchor="middle" x="1410.5" y="-2726.57" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust30" class="cluster">
<title>cluster_29</title>
<polygon fill="lightblue" stroke="lightblue" points="603.5,-6582.77 603.5,-6711.77 2850.5,-6711.77 2850.5,-6582.77 603.5,-6582.77"/>
<text text-anchor="middle" x="1727" y="-6696.57" font-family="Helvetica,sans-Serif" font-size="14.00">session_cipher.rs</text>
</g>
<g id="clust31" class="cluster">
<title>cluster_30</title>
<polygon fill="lightblue" stroke="lightblue" points="2687.5,-316.77 2687.5,-391.77 2812.5,-391.77 2812.5,-316.77 2687.5,-316.77"/>
<text text-anchor="middle" x="2750" y="-376.57" font-family="Helvetica,sans-Serif" font-size="14.00">kyber_prekey.rs</text>
</g>
<g id="clust32" class="cluster">
<title>cluster_31</title>
<polygon fill="lightblue" stroke="lightblue" points="2214,-2316.77 2214,-2445.77 2326,-2445.77 2326,-2316.77 2214,-2316.77"/>
<text text-anchor="middle" x="2270" y="-2430.57" font-family="Helvetica,sans-Serif" font-size="14.00">prekey.rs</text>
</g>
<g id="clust33" class="cluster">
<title>cluster_32</title>
<polygon fill="lightblue" stroke="lightblue" points="2871,-6040.77 2871,-6115.77 3094,-6115.77 3094,-6040.77 2871,-6040.77"/>
<text text-anchor="middle" x="2982.5" y="-6100.57" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust34" class="cluster">
<title>cluster_33</title>
<polygon fill="lightblue" stroke="lightblue" points="2169,-3072.77 2169,-3255.77 2371,-3255.77 2371,-3072.77 2169,-3072.77"/>
<text text-anchor="middle" x="2270" y="-3240.57" font-family="Helvetica,sans-Serif" font-size="14.00">signed_prekey.rs</text>
</g>
<g id="clust35" class="cluster">
<title>cluster_34</title>
<polygon fill="lightblue" stroke="lightblue" points="441.5,-2414.77 441.5,-3083.77 920.5,-3083.77 920.5,-2414.77 441.5,-2414.77"/>
<text text-anchor="middle" x="681" y="-3068.57" font-family="Helvetica,sans-Serif" font-size="14.00">groups.rs</text>
</g>
<g id="clust36" class="cluster">
<title>cluster_35</title>
<polygon fill="lightblue" stroke="lightblue" points="1434.5,-4031.77 1434.5,-4106.77 1831.5,-4106.77 1831.5,-4031.77 1434.5,-4031.77"/>
<text text-anchor="middle" x="1633" y="-4091.57" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet.rs</text>
</g>
<g id="clust37" class="cluster">
<title>cluster_36</title>
<polygon fill="lightblue" stroke="lightblue" points="426.5,-545.77 426.5,-1106.77 935.5,-1106.77 935.5,-545.77 426.5,-545.77"/>
<text text-anchor="middle" x="681" y="-1091.57" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender.rs</text>
</g>
<g id="clust38" class="cluster">
<title>cluster_37</title>
<polygon fill="lightblue" stroke="lightblue" points="343,-4405.77 343,-5776.77 1702,-5776.77 1702,-4405.77 343,-4405.77"/>
<text text-anchor="middle" x="1022.5" y="-5761.57" font-family="Helvetica,sans-Serif" font-size="14.00">session.rs</text>
</g>
<g id="clust39" class="cluster">
<title>cluster_38</title>
<polygon fill="lightblue" stroke="lightblue" points="1074,-3367.77 1074,-3820.77 2305,-3820.77 2305,-3367.77 1074,-3367.77"/>
<text text-anchor="middle" x="1689.5" y="-3805.57" font-family="Helvetica,sans-Serif" font-size="14.00">mod.rs</text>
</g>
<!-- rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="node1" class="node">
<title>rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<g id="a_node1"><a xlink:title="pub const fn clamp_integer(mut bytes: [u8; 32]) &#45;&gt; [u8; 32] { &#160;&#160;&#160;&#160;bytes[0] &amp;= 0b1111_1000; &#160;&#160;&#160;&#160;bytes[31] &amp;= 0b0111_1111; &#160;&#160;&#160;&#160;bytes[31] |= 0b0100_0000; &#160;&#160;&#160;&#160;bytes }">
<polygon fill="green" stroke="black" stroke-dasharray="1,5" points="3679,-1237.77 3564,-1237.77 3564,-1201.77 3679,-1201.77 3679,-1237.77"/>
<text text-anchor="middle" x="3621.5" y="-1216.07" font-family="Helvetica,sans-Serif" font-size="14.00">clamp_integer</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key(). -->
<g id="node2" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().</title>
<g id="a_node2"><a xlink:title=" &#160;&#160;&#160;pub fn derive_ec_key(&amp;self, aci: &amp;Aci) &#45;&gt; PrivateKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const INFO: &amp;[u8] = b&#39; 20241024_SIGNAL_BACKUP_ID_KEYPAIR:&#39; ; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut private_key_bytes = [0; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Hkdf::&lt;Sha256&gt;::new...">
<polygon fill="white" stroke="black" points="3039,-6564.77 2926,-6564.77 2926,-6528.77 3039,-6528.77 3039,-6564.77"/>
<text text-anchor="middle" x="2982.5" y="-6543.07" font-family="Helvetica,sans-Serif" font-size="14.00">derive_ec_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="node41" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<g id="a_node41"><a xlink:title=" &#160;&#160;&#160;pub fn deserialize(value: &amp;[u8]) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut key: [u8; curve25519::PRIVATE_KEY_LENGTH] = value &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.try_into() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| CurveError::BadKey...">
<polygon fill="white" stroke="black" points="3325.5,-1590.77 3234.5,-1590.77 3234.5,-1554.77 3325.5,-1554.77 3325.5,-1590.77"/>
<text text-anchor="middle" x="3280" y="-1569.07" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge35" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2989.65,-6528.74C3009.2,-6470.46 3070.06,-6281.49 3094,-6119.77 3234.26,-5172.16 3274.79,-1939.86 3278.68,-1601.48"/>
<polygon fill="blue" stroke="blue" points="3282.19,-1601.12 3278.8,-1591.08 3275.19,-1601.04 3282.19,-1601.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize(). -->
<g id="node3" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize().</title>
<g id="a_node3"><a xlink:title="pub unsafe extern &#39; C&#39; &#160;fn signal_identitykeypair_deserialize( &#160;&#160;&#160;&#160;private_key: *mut MutPointer&lt;PrivateKey&gt;, &#160;&#160;&#160;&#160;public_key: *mut MutPointer&lt;PublicKey&gt;, &#160;&#160;&#160;&#160;input: BorrowedSliceOf&lt;c_uchar&gt;, ) &#45;&gt; *mut ...">
<polygon fill="white" stroke="black" points="1757.5,-6156.77 1508.5,-6156.77 1508.5,-6120.77 1757.5,-6120.77 1757.5,-6156.77"/>
<text text-anchor="middle" x="1633" y="-6135.07" font-family="Helvetica,sans-Serif" font-size="14.00">signal_identitykeypair_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node80" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node80"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let structure = proto::storage::IdentityKeyPairStructure::decode(value) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|_| SignalProtocolError::InvalidProtobufEncoding)?;...">
<polygon fill="white" stroke="black" points="2307.5,-5990.77 2232.5,-5990.77 2232.5,-5954.77 2307.5,-5954.77 2307.5,-5990.77"/>
<text text-anchor="middle" x="2270" y="-5969.07" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge412" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;ffi 0.76.4 signal_identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1757.55,-6130.13C1800.19,-6125.63 1848.04,-6118.86 1891,-6108.77 2014.2,-6079.82 2152.67,-6023.58 2222.86,-5993.28"/>
<polygon fill="blue" stroke="blue" points="2224.52,-5996.37 2232.3,-5989.18 2221.74,-5989.95 2224.52,-5996.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize(). -->
<g id="node4" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize().</title>
<g id="a_node4"><a xlink:title="pub unsafe extern &#39; C&#39; &#160;fn Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize&lt; &#160;&#160;&#160;&#160;&#39;local, &gt;( &#160;&#160;&#160;&#160;mut env: JNIEnv&lt;&#39;local&gt;, &#160;&#160;&#160;&#160;_class: JClass, &#160;&#160;&#160;&#160;data: JByteArray, ) &#45;&gt; JLongArray...">
<polygon fill="white" stroke="black" points="1883,-6073.77 1383,-6073.77 1383,-6037.77 1883,-6037.77 1883,-6073.77"/>
<text text-anchor="middle" x="1633" y="-6052.07" font-family="Helvetica,sans-Serif" font-size="14.00">Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge54" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;jni&#45;impl 0.76.4 Java_org_signal_libsignal_internal_Native_IdentityKeyPair_1Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1793.44,-6037.74C1825.75,-6033.92 1859.48,-6029.82 1891,-6025.77 2010.5,-6010.42 2150.91,-5990.14 2222.27,-5979.68"/>
<polygon fill="blue" stroke="blue" points="2222.9,-5983.12 2232.28,-5978.2 2221.88,-5976.2 2222.9,-5983.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main(). -->
<g id="node5" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main().</title>
<g id="a_node5"><a xlink:title="fn main(mut cx: ModuleContext) &#45;&gt; NeonResult&lt;()&gt; { &#160;&#160;&#160;&#160;libsignal_bridge::node::register(&amp;mut cx)?; &#160;&#160;&#160;&#160;cx.export_function(&#39; initLogger&#39; , logging::init_logger)?; &#160;&#160;&#160;&#160;cx.export_function(&#39; IdentityKeyPa...">
<polygon fill="white" stroke="black" points="1224,-6543.77 1170,-6543.77 1170,-6507.77 1224,-6507.77 1224,-6543.77"/>
<text text-anchor="middle" x="1197" y="-6522.07" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize(). -->
<g id="node6" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().</title>
<g id="a_node6"><a xlink:title="fn identitykeypair_deserialize(mut cx: FunctionContext) &#45;&gt; JsResult&lt;JsObject&gt; { &#160;&#160;&#160;&#160;let buffer = cx.argument::&lt;JsUint8Array&gt;(0)?; &#160;&#160;&#160;&#160;let identity_keypair_or_error = IdentityKeyPair::try_from(buffer.a...">
<polygon fill="white" stroke="black" points="1733.5,-6543.77 1532.5,-6543.77 1532.5,-6507.77 1733.5,-6507.77 1733.5,-6543.77"/>
<text text-anchor="middle" x="1633" y="-6522.07" font-family="Helvetica,sans-Serif" font-size="14.00">identitykeypair_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize(). -->
<g id="edge326" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.17,-6525.77C1281.75,-6525.77 1422.26,-6525.77 1522.22,-6525.77"/>
<polygon fill="blue" stroke="blue" points="1522.37,-6529.27 1532.37,-6525.77 1522.37,-6522.27 1522.37,-6529.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge434" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;node 0.76.4 identitykeypair_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1733.61,-6532.49C1783.89,-6531.51 1844.02,-6523.33 1891,-6495.77 2098.02,-6374.31 2223.28,-6089.85 2258.63,-6000.28"/>
<polygon fill="blue" stroke="blue" points="2261.95,-6001.4 2262.32,-5990.81 2255.43,-5998.86 2261.95,-6001.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey(). -->
<g id="node7" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey().</title>
<g id="a_node7"><a xlink:title="pub fn BackupKey_DeriveEcKey(backup_key: &amp;[u8; BACKUP_KEY_LEN], aci: Aci) &#45;&gt; PrivateKey { &#160;&#160;&#160;&#160;// The explicit type forces the latest version of the key derivation scheme. &#160;&#160;&#160;&#160;let backup_key: BackupKey...">
<polygon fill="white" stroke="black" points="2842.5,-6763.77 2657.5,-6763.77 2657.5,-6727.77 2842.5,-6727.77 2842.5,-6763.77"/>
<text text-anchor="middle" x="2750" y="-6742.07" font-family="Helvetica,sans-Serif" font-size="14.00">BackupKey_DeriveEcKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key(). -->
<g id="edge157" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 account_keys/BackupKey_DeriveEcKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;account&#45;keys 0.1.0 backup/impl#[`BackupKey&lt;V1&gt;`]derive_ec_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2828.46,-6727.71C2836.23,-6724.36 2843.73,-6720.42 2850.5,-6715.77 2905.07,-6678.26 2947.2,-6610.97 2967.73,-6573.61"/>
<polygon fill="blue" stroke="blue" points="2970.81,-6575.26 2972.47,-6564.8 2964.65,-6571.94 2970.81,-6575.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptPreKeySignalMessage(). -->
<g id="node8" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptPreKeySignalMessage().</title>
<g id="a_node8"><a xlink:title="async fn SessionCipher_DecryptPreKeySignalMessage( &#160;&#160;&#160;&#160;message: &amp;PreKeySignalMessage, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn...">
<polygon fill="white" stroke="black" points="844.5,-2375.77 517.5,-2375.77 517.5,-2339.77 844.5,-2339.77 844.5,-2375.77"/>
<text text-anchor="middle" x="681" y="-2354.07" font-family="Helvetica,sans-Serif" font-size="14.00">SessionCipher_DecryptPreKeySignalMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey(). -->
<g id="node127" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().</title>
<g id="a_node127"><a xlink:title="pub async fn message_decrypt_prekey&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;ciphertext: &amp;PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut ...">
<polygon fill="white" stroke="black" points="1293,-6680.77 1101,-6680.77 1101,-6644.77 1293,-6644.77 1293,-6680.77"/>
<text text-anchor="middle" x="1197" y="-6659.07" font-family="Helvetica,sans-Serif" font-size="14.00">message_decrypt_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptPreKeySignalMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey(). -->
<g id="edge5" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptPreKeySignalMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M844.81,-2342.92C906.02,-2346.65 970.51,-2363.56 1011,-2410.77 1087.4,-2499.86 963.07,-6546.27 1039,-6635.77 1052.22,-6651.36 1070.9,-6660.19 1090.77,-6664.88"/>
<polygon fill="blue" stroke="blue" points="1090.11,-6668.32 1100.61,-6666.86 1091.49,-6661.45 1090.11,-6668.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize(). -->
<g id="node9" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize().</title>
<g id="a_node9"><a xlink:title="fn PrivateKey_Deserialize(data: &amp;[u8]) &#45;&gt; Result&lt;PrivateKey&gt; { &#160;&#160;&#160;&#160;Ok(PrivateKey::deserialize(data)?) }">
<polygon fill="white" stroke="black" points="767,-2213.77 595,-2213.77 595,-2177.77 767,-2177.77 767,-2213.77"/>
<text text-anchor="middle" x="681" y="-2192.07" font-family="Helvetica,sans-Serif" font-size="14.00">PrivateKey_Deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge6" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PrivateKey_Deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.11,-2190.56C853.34,-2187.34 978.54,-2188.98 1011,-2222.77 1062.47,-2276.34 1000.23,-2827.4 1039,-2890.77 1128.53,-3037.11 1218.25,-3011.05 1375,-3080.77 1604.48,-3182.83 1666.68,-3201.56 1911,-3259.77 2066.12,-3296.72 2505.79,-3253.52 2621,-3363.77 2668.74,-3409.45 2598.07,-3467.68 2649,-3509.77 2801.45,-3635.76 2947.65,-3642.81 3094,-3509.77 3242.1,-3375.14 3274.54,-1829.72 3278.54,-1600.99"/>
<polygon fill="blue" stroke="blue" points="3282.04,-1600.88 3278.72,-1590.82 3275.04,-1600.76 3282.04,-1600.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncryptNode(). -->
<g id="node10" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncryptNode().</title>
<g id="a_node10"><a xlink:title="async fn SealedSender_MultiRecipientEncryptNode( &#160;&#160;&#160;&#160;recipients: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;recipient_sessions: &amp;[SessionRecord], &#160;&#160;&#160;&#160;excluded_recipients: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;content: &amp;Unidentifi...">
<polygon fill="white" stroke="black" points="834.5,-1457.77 527.5,-1457.77 527.5,-1421.77 834.5,-1421.77 834.5,-1457.77"/>
<text text-anchor="middle" x="681" y="-1436.07" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_MultiRecipientEncryptNode</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="node104" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<g id="a_node104"><a xlink:title="pub async fn sealed_sender_multi_recipient_encrypt&lt; &#160;&#160;&#160;&#160;R: Rng + CryptoRng, &#160;&#160;&#160;&#160;X: IntoIterator&lt;Item = ServiceId&gt;, &gt;( &#160;&#160;&#160;&#160;destinations: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;destination_sessions: &amp;[&amp;SessionRecord]...">
<polygon fill="white" stroke="black" points="1339.5,-967.77 1054.5,-967.77 1054.5,-931.77 1339.5,-931.77 1339.5,-967.77"/>
<text text-anchor="middle" x="1197" y="-946.07" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_multi_recipient_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncryptNode().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge32" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncryptNode().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M834.79,-1445.85C908.45,-1445.21 986.15,-1438.07 1011,-1412.77 1079.04,-1343.51 974.09,-1048.97 1039,-976.77 1041.31,-974.2 1043.77,-971.81 1046.36,-969.6"/>
<polygon fill="blue" stroke="blue" points="1048.6,-972.3 1054.49,-963.49 1044.4,-966.7 1048.6,-972.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic(). -->
<g id="node11" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic().</title>
<g id="a_node11"><a xlink:title="fn PreKeyBundle_GetKyberPreKeyPublic(bundle: &amp;PreKeyBundle) &#45;&gt; Result&lt;KyberPublicKey&gt; { &#160;&#160;&#160;&#160;Ok(bundle.kyber_pre_key_public()?.clone()) }">
<polygon fill="white" stroke="black" points="816,-2159.77 546,-2159.77 546,-2123.77 816,-2123.77 816,-2159.77"/>
<text text-anchor="middle" x="681" y="-2138.07" font-family="Helvetica,sans-Serif" font-size="14.00">PreKeyBundle_GetKyberPreKeyPublic</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key(). -->
<g id="node135" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().</title>
<g id="a_node135"><a xlink:title=" &#160;&#160;&#160;pub fn private_key(&amp;self) &#45;&gt; Result&lt;PrivateKey&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(PrivateKey::deserialize(&amp;self.get_storage().private_key)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2318,-3170.77 2222,-3170.77 2222,-3134.77 2318,-3134.77 2318,-3170.77"/>
<text text-anchor="middle" x="2270" y="-3149.07" font-family="Helvetica,sans-Serif" font-size="14.00">private_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key(). -->
<g id="edge52" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/PreKeyBundle_GetKyberPreKeyPublic().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.31,-2135.52C895.08,-2135.04 984.26,-2141.12 1011,-2168.77 1055.62,-2214.91 1002.54,-2692.95 1039,-2745.77 1279.16,-3093.69 1500.68,-3024 1911,-3125.77 2014.79,-3151.51 2140.25,-3154.88 2211.72,-3154.3"/>
<polygon fill="blue" stroke="blue" points="2211.91,-3157.79 2221.87,-3154.18 2211.83,-3150.8 2211.91,-3157.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New(). -->
<g id="node12" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().</title>
<g id="a_node12"><a xlink:title="fn ServerCertificate_New( &#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;server_key: &amp;PublicKey, &#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, ) &#45;&gt; Result&lt;ServerCertificate&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;ServerCertifi...">
<polygon fill="white" stroke="black" points="766,-1349.77 596,-1349.77 596,-1313.77 766,-1313.77 766,-1349.77"/>
<text text-anchor="middle" x="681" y="-1328.07" font-family="Helvetica,sans-Serif" font-size="14.00">ServerCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="node101" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<g id="a_node101"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;trust_root: &amp;PrivateKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let certificate_pb = proto::seale...">
<polygon fill="white" stroke="black" points="1224,-859.77 1170,-859.77 1170,-823.77 1224,-823.77 1224,-859.77"/>
<text text-anchor="middle" x="1197" y="-838.07" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge59" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ServerCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M766.17,-1336.8C852.31,-1339.95 978.07,-1338.29 1011,-1304.77 1079.04,-1235.51 974.09,-940.97 1039,-868.77 1068.79,-835.64 1123.26,-833.51 1159.55,-836.49"/>
<polygon fill="blue" stroke="blue" points="1159.43,-839.99 1169.72,-837.5 1160.12,-833.03 1159.43,-839.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptSignalMessage(). -->
<g id="node13" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptSignalMessage().</title>
<g id="a_node13"><a xlink:title="async fn SessionCipher_DecryptSignalMessage( &#160;&#160;&#160;&#160;message: &amp;SignalMessage, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKey...">
<polygon fill="white" stroke="black" points="821.5,-2321.77 540.5,-2321.77 540.5,-2285.77 821.5,-2285.77 821.5,-2321.77"/>
<text text-anchor="middle" x="681" y="-2300.07" font-family="Helvetica,sans-Serif" font-size="14.00">SessionCipher_DecryptSignalMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal(). -->
<g id="node128" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().</title>
<g id="a_node128"><a xlink:title="pub async fn message_decrypt_signal&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn Id...">
<polygon fill="white" stroke="black" points="1290.5,-6626.77 1103.5,-6626.77 1103.5,-6590.77 1290.5,-6590.77 1290.5,-6626.77"/>
<text text-anchor="middle" x="1197" y="-6605.07" font-family="Helvetica,sans-Serif" font-size="14.00">message_decrypt_signal</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptSignalMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal(). -->
<g id="edge109" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionCipher_DecryptSignalMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M821.57,-2297.11C899.27,-2296.77 985.38,-2303.14 1011,-2330.77 1091.24,-2417.29 963.5,-6488.08 1039,-6578.77 1052.72,-6595.25 1072.46,-6604.51 1093.33,-6609.41"/>
<polygon fill="blue" stroke="blue" points="1092.82,-6612.88 1103.32,-6611.43 1094.21,-6606.02 1092.82,-6612.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create(). -->
<g id="node14" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create().</title>
<g id="a_node14"><a xlink:title="async fn SenderKeyDistributionMessage_Create( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;SenderKeyDistributionMessage&gt; { &#160;&#160;&#160;&#160;let mut csprn...">
<polygon fill="white" stroke="black" points="823,-1997.77 539,-1997.77 539,-1961.77 823,-1961.77 823,-1997.77"/>
<text text-anchor="middle" x="681" y="-1976.07" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyDistributionMessage_Create</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="node77" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<g id="a_node77"><a xlink:title="pub async fn create_sender_key_distribution_message&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;...">
<polygon fill="white" stroke="black" points="1347,-2337.77 1047,-2337.77 1047,-2301.77 1347,-2301.77 1347,-2337.77"/>
<text text-anchor="middle" x="1197" y="-2316.07" font-family="Helvetica,sans-Serif" font-size="14.00">create_sender_key_distribution_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge111" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyDistributionMessage_Create().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.45,-1961.73C852.4,-1954.62 946.32,-1957.62 1011,-2006.77 1039.66,-2028.55 1022.73,-2050.66 1039,-2082.77 1080.12,-2163.91 1143.4,-2251.06 1175.63,-2293.51"/>
<polygon fill="blue" stroke="blue" points="1172.98,-2295.8 1181.83,-2301.63 1178.54,-2291.55 1172.98,-2295.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey(). -->
<g id="node15" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey().</title>
<g id="a_node15"><a xlink:title="fn ECPrivateKey_GetPublicKey(k: &amp;PrivateKey) &#45;&gt; Result&lt;PublicKey&gt; { &#160;&#160;&#160;&#160;Ok(k.public_key()?) }">
<polygon fill="white" stroke="black" points="783.5,-1781.77 578.5,-1781.77 578.5,-1745.77 783.5,-1745.77 783.5,-1781.77"/>
<text text-anchor="middle" x="681" y="-1760.07" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_GetPublicKey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="node43" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<g id="a_node43"><a xlink:title=" &#160;&#160;&#160;pub fn public_key(&amp;self) &#45;&gt; Result&lt;PublicKey, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match &amp;self.key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PrivateKeyData::DjbPrivateKey(private_key) =&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3027,-1428.77 2938,-1428.77 2938,-1392.77 3027,-1392.77 3027,-1428.77"/>
<text text-anchor="middle" x="2982.5" y="-1407.07" font-family="Helvetica,sans-Serif" font-size="14.00">public_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge147" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_GetPublicKey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M783.71,-1755.29C850.96,-1753.66 939.55,-1759.28 1011,-1790.77 1026.54,-1797.62 1024.09,-1808.64 1039,-1816.77 1276.54,-1946.38 1361.4,-1954.77 1632,-1954.77 1632,-1954.77 1632,-1954.77 2271,-1954.77 2335.44,-1954.77 2804.81,-1976.22 2850.5,-1930.77 2885.12,-1896.33 2847.91,-1534.8 2871,-1491.77 2884.45,-1466.7 2909.46,-1447.37 2932.29,-1433.89"/>
<polygon fill="blue" stroke="blue" points="2934.25,-1436.81 2941.23,-1428.84 2930.8,-1430.71 2934.25,-1436.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New(). -->
<g id="node16" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().</title>
<g id="a_node16"><a xlink:title="fn SenderKeyMessage_New( &#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;pk: &amp;PrivateKey, ) &#45;&gt; Result&lt;SenderKeyMessage&gt; { &#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="775,-1673.77 587,-1673.77 587,-1637.77 775,-1637.77 775,-1673.77"/>
<text text-anchor="middle" x="681" y="-1652.07" font-family="Helvetica,sans-Serif" font-size="14.00">SenderKeyMessage_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="node88" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<g id="a_node88"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message_version: u8, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_id: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;iteration: u32, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ciphertext: Box&lt;[u8]&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;...">
<polygon fill="white" stroke="black" points="2777,-1850.77 2723,-1850.77 2723,-1814.77 2777,-1814.77 2777,-1850.77"/>
<text text-anchor="middle" x="2750" y="-1829.07" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge161" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderKeyMessage_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M775.19,-1660.62C841.23,-1664.74 931.81,-1671.77 1011,-1682.77 1414.78,-1738.86 1505.26,-1820.25 1911,-1859.77 2225.07,-1890.36 2307.15,-1892.51 2621,-1859.77 2652.37,-1856.5 2687.37,-1848.83 2712.83,-1842.5"/>
<polygon fill="blue" stroke="blue" points="2713.95,-1845.83 2722.78,-1839.97 2712.22,-1839.04 2713.95,-1845.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign(). -->
<g id="node17" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().</title>
<g id="a_node17"><a xlink:title="fn ECPrivateKey_Sign(key: &amp;PrivateKey, message: &amp;[u8]) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;Ok(key.calculate_signature(message, &amp;mut rng)?.into_vec()) }">
<polygon fill="white" stroke="black" points="754,-1889.77 608,-1889.77 608,-1853.77 754,-1853.77 754,-1889.77"/>
<text text-anchor="middle" x="681" y="-1868.07" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="node39" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<g id="a_node39"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.calculate_signature_for_multipa...">
<polygon fill="white" stroke="black" points="3057.5,-1590.77 2907.5,-1590.77 2907.5,-1554.77 3057.5,-1554.77 3057.5,-1590.77"/>
<text text-anchor="middle" x="2982.5" y="-1569.07" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge203" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M754.1,-1855.78C827.43,-1844.04 940.07,-1839.09 1011,-1898.77 1048.94,-1930.7 999.78,-1976.42 1039,-2006.77 1118.59,-2068.36 2769.71,-2066.78 2850.5,-2006.77 2917.83,-1956.76 2963.84,-1689.25 2977.37,-1601.02"/>
<polygon fill="blue" stroke="blue" points="2980.86,-1601.36 2978.89,-1590.95 2973.94,-1600.31 2980.86,-1601.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree(). -->
<g id="node18" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree().</title>
<g id="a_node18"><a xlink:title="fn ECPrivateKey_Agree(private_key: &amp;PrivateKey, public_key: &amp;PublicKey) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;Ok(private_key.calculate_agreement(public_key)?.into_vec()) }">
<polygon fill="white" stroke="black" points="758.5,-1727.77 603.5,-1727.77 603.5,-1691.77 758.5,-1691.77 758.5,-1727.77"/>
<text text-anchor="middle" x="681" y="-1706.07" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Agree</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="node38" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<g id="a_node38"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_agreement(&amp;self, their_key: &amp;PublicKey) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match (self.key, their_key.key) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(PrivateKeyData::DjbPrivateKey(priv_key), PublicKe...">
<polygon fill="white" stroke="black" points="3062.5,-1374.77 2902.5,-1374.77 2902.5,-1338.77 3062.5,-1338.77 3062.5,-1374.77"/>
<text text-anchor="middle" x="2982.5" y="-1353.07" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge205" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Agree().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.81,-1712.98C825.72,-1716.51 925.19,-1723.53 1011,-1736.77 1174.99,-1762.06 1211.56,-1791.15 1375,-1819.77 1536.65,-1848.08 2732.11,-1999.42 2850.5,-1885.77 2890.77,-1847.11 2835.64,-1426.97 2871,-1383.77 2876.97,-1376.47 2884.56,-1370.96 2892.95,-1366.82"/>
<polygon fill="blue" stroke="blue" points="2894.49,-1369.97 2902.33,-1362.84 2891.76,-1363.52 2894.49,-1369.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate(). -->
<g id="node19" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate().</title>
<g id="a_node19"><a xlink:title="fn ECPrivateKey_Generate() &#45;&gt; PrivateKey { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let keypair = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;keypair.private_key }">
<polygon fill="white" stroke="black" points="770.5,-1835.77 591.5,-1835.77 591.5,-1799.77 770.5,-1799.77 770.5,-1835.77"/>
<text text-anchor="middle" x="681" y="-1814.07" font-family="Helvetica,sans-Serif" font-size="14.00">ECPrivateKey_Generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="node48" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<g id="a_node48"><a xlink:title=" &#160;&#160;&#160;pub fn generate&lt;R: Rng + CryptoRng&gt;(csprng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let private_key = curve25519::PrivateKey::new(csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = PublicKey::from(PublicKeyData::DjbPublicKey( ...">
<polygon fill="white" stroke="black" points="3022,-1536.77 2943,-1536.77 2943,-1500.77 3022,-1500.77 3022,-1536.77"/>
<text text-anchor="middle" x="2982.5" y="-1515.07" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge215" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/ECPrivateKey_Generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M764.62,-1799.75C838.16,-1788.89 944.16,-1786.7 1011,-1844.77 1053.65,-1881.82 995.59,-1932.61 1039,-1968.77 1089.67,-2010.98 1566.06,-1992.77 1632,-1992.77 1632,-1992.77 1632,-1992.77 2271,-1992.77 2335.44,-1992.77 2804.77,-2014.18 2850.5,-1968.77 2883.89,-1935.61 2841.06,-1582.07 2871,-1545.77 2885.88,-1527.74 2910.62,-1520.61 2932.93,-1518.15"/>
<polygon fill="blue" stroke="blue" points="2933.28,-1521.64 2942.96,-1517.33 2932.71,-1514.66 2933.28,-1521.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncrypt(). -->
<g id="node20" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncrypt().</title>
<g id="a_node20"><a xlink:title="async fn SealedSender_MultiRecipientEncrypt( &#160;&#160;&#160;&#160;recipients: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;recipient_sessions: &amp;[&amp;SessionRecord], &#160;&#160;&#160;&#160;excluded_recipients: ServiceIdSequence&lt;&#39;_&gt;, &#160;&#160;&#160;&#160;content: &amp;UnidentifiedS...">
<polygon fill="white" stroke="black" points="816.5,-1511.77 545.5,-1511.77 545.5,-1475.77 816.5,-1475.77 816.5,-1511.77"/>
<text text-anchor="middle" x="681" y="-1490.07" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_MultiRecipientEncrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge264" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_MultiRecipientEncrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.67,-1499.95C895.3,-1500.36 984.19,-1494.26 1011,-1466.77 1087.16,-1388.7 966.37,-1058.13 1039,-976.77 1041.3,-974.19 1043.75,-971.8 1046.34,-969.58"/>
<polygon fill="blue" stroke="blue" points="1048.58,-972.27 1054.45,-963.45 1044.36,-966.69 1048.58,-972.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle(). -->
<g id="node21" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().</title>
<g id="a_node21"><a xlink:title="async fn SessionBuilder_ProcessPreKeyBundle( &#160;&#160;&#160;&#160;bundle: &amp;PreKeyBundle, &#160;&#160;&#160;&#160;protocol_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeySt...">
<polygon fill="white" stroke="black" points="818,-2105.77 544,-2105.77 544,-2069.77 818,-2069.77 818,-2105.77"/>
<text text-anchor="middle" x="681" y="-2084.07" font-family="Helvetica,sans-Serif" font-size="14.00">SessionBuilder_ProcessPreKeyBundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="node121" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<g id="a_node121"><a xlink:title="pub async fn process_prekey_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, &#160;&#160;&#160;&#160;bundle: &amp;PreK...">
<polygon fill="white" stroke="black" points="1286,-2710.77 1108,-2710.77 1108,-2674.77 1286,-2674.77 1286,-2710.77"/>
<text text-anchor="middle" x="1197" y="-2689.07" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge275" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SessionBuilder_ProcessPreKeyBundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M818.05,-2081.53C896.38,-2081.16 984.42,-2087.35 1011,-2114.77 1053.67,-2158.78 998.32,-2619.91 1039,-2665.77 1054.03,-2682.71 1075.51,-2691.58 1097.77,-2695.8"/>
<polygon fill="blue" stroke="blue" points="1097.26,-2699.26 1107.68,-2697.38 1098.36,-2692.35 1097.26,-2699.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage(). -->
<g id="node22" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().</title>
<g id="a_node22"><a xlink:title="async fn GroupCipher_EncryptMessage( &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;store: &amp;mut dyn SenderKeyStore, ) &#45;&gt; Result&lt;CiphertextMessage&gt; { &#160;&#160;&#160;&#160;let mut rng =...">
<polygon fill="white" stroke="black" points="794,-2051.77 568,-2051.77 568,-2015.77 794,-2015.77 794,-2051.77"/>
<text text-anchor="middle" x="681" y="-2030.07" font-family="Helvetica,sans-Serif" font-size="14.00">GroupCipher_EncryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="node76" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<g id="a_node76"><a xlink:title="pub async fn group_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;sender_key_store: &amp;mut dyn SenderKeyStore, &#160;&#160;&#160;&#160;sender: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;distribution_id: Uuid, &#160;&#160;&#160;&#160;plaintext: &amp;[u8], &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; R...">
<polygon fill="white" stroke="black" points="1255.5,-2391.77 1138.5,-2391.77 1138.5,-2355.77 1255.5,-2355.77 1255.5,-2391.77"/>
<text text-anchor="middle" x="1197" y="-2370.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge277" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/GroupCipher_EncryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.39,-2015.74C830.31,-2002.15 944.73,-1995.54 1011,-2060.77 1056.51,-2105.57 995.52,-2300 1039,-2346.77 1061.35,-2370.8 1096.71,-2378.36 1128.22,-2379.55"/>
<polygon fill="blue" stroke="blue" points="1128.23,-2383.05 1138.29,-2379.72 1128.35,-2376.05 1128.23,-2383.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt(). -->
<g id="node23" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt().</title>
<g id="a_node23"><a xlink:title="async fn SealedSessionCipher_Encrypt( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;content: &amp;UnidentifiedSenderMessageContent, &#160;&#160;&#160;&#160;identity_key_store: &amp;mut dyn IdentityKeyStore, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;l...">
<polygon fill="white" stroke="black" points="792.5,-1565.77 569.5,-1565.77 569.5,-1529.77 792.5,-1529.77 792.5,-1565.77"/>
<text text-anchor="middle" x="681" y="-1544.07" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSessionCipher_Encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="node98" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<g id="a_node98"><a xlink:title="pub async fn sealed_sender_encrypt_from_usmc&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;usmc: &amp;UnidentifiedSenderMessageContent, &#160;&#160;&#160;&#160;identity_store: &amp;dyn IdentityKeyStore, &#160;&#160;&#160;&#160;rng: &amp;m...">
<polygon fill="white" stroke="black" points="1763,-913.77 1503,-913.77 1503,-877.77 1763,-877.77 1763,-913.77"/>
<text text-anchor="middle" x="1633" y="-892.07" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_encrypt_from_usmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge323" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_Encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M771.67,-1565.81C844.18,-1574.97 944.76,-1574.66 1011,-1520.77 1045.14,-1492.99 1017.71,-1464.3 1039,-1425.77 1141.66,-1240.02 1266.51,-1260.67 1355,-1067.77 1382.13,-1008.64 1328.26,-968.02 1375,-922.77 1405.96,-892.8 1449.87,-881.51 1492.65,-879.12"/>
<polygon fill="blue" stroke="blue" points="1493.05,-882.6 1502.9,-878.71 1492.77,-875.61 1493.05,-882.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity(). -->
<g id="node24" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().</title>
<g id="a_node24"><a xlink:title="fn IdentityKeyPair_SignAlternateIdentity( &#160;&#160;&#160;&#160;public_key: &amp;PublicKey, &#160;&#160;&#160;&#160;private_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;other_identity: &amp;PublicKey, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;&gt; { &#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unwrap_er...">
<polygon fill="white" stroke="black" points="818,-2267.77 544,-2267.77 544,-2231.77 818,-2231.77 818,-2267.77"/>
<text text-anchor="middle" x="681" y="-2246.07" font-family="Helvetica,sans-Serif" font-size="14.00">IdentityKeyPair_SignAlternateIdentity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="node84" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<g id="a_node84"><a xlink:title=" &#160;&#160;&#160;pub fn sign_alternate_identity&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;other: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.private_key.calculate_signature_fo...">
<polygon fill="white" stroke="black" points="2356.5,-5882.77 2183.5,-5882.77 2183.5,-5846.77 2356.5,-5846.77 2356.5,-5882.77"/>
<text text-anchor="middle" x="2270" y="-5861.07" font-family="Helvetica,sans-Serif" font-size="14.00">sign_alternate_identity</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge338" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/IdentityKeyPair_SignAlternateIdentity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M818.41,-2243.19C896.87,-2242.69 984.94,-2248.86 1011,-2276.77 1090.14,-2361.52 958.29,-4280.51 1039,-4363.77 1104.95,-4431.81 1825.03,-4333.74 1891,-4401.77 1946.55,-4459.04 1856.34,-5779.65 1911,-5837.77 1982.09,-5913.36 2112.12,-5902.05 2194.37,-5884.9"/>
<polygon fill="blue" stroke="blue" points="2195.12,-5888.32 2204.15,-5882.79 2193.64,-5881.48 2195.12,-5888.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage(). -->
<g id="node25" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().</title>
<g id="a_node25"><a xlink:title="async fn SealedSender_DecryptMessage( &#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: u32, &#160;&#160;&#160;&#160;se...">
<polygon fill="white" stroke="black" points="798.5,-1295.77 563.5,-1295.77 563.5,-1259.77 798.5,-1259.77 798.5,-1295.77"/>
<text text-anchor="middle" x="681" y="-1274.07" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSender_DecryptMessage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="node102" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<g id="a_node102"><a xlink:title="pub async fn sealed_sender_decrypt( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;trust_root: &amp;PublicKey, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;local_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;local_uuid: String, &#160;&#160;&#160;&#160;local_device_id: DeviceId, ...">
<polygon fill="white" stroke="black" points="1285,-805.77 1109,-805.77 1109,-769.77 1285,-769.77 1285,-805.77"/>
<text text-anchor="middle" x="1197" y="-784.07" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge350" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSender_DecryptMessage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.68,-1295.77C833.05,-1308.73 946.57,-1313.92 1011,-1247.77 1078.28,-1178.7 974.52,-886.46 1039,-814.77 1054.31,-797.75 1076.12,-788.92 1098.64,-784.75"/>
<polygon fill="blue" stroke="blue" points="1099.32,-788.19 1108.66,-783.2 1098.25,-781.27 1099.32,-788.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New(). -->
<g id="node26" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New().</title>
<g id="a_node26"><a xlink:title="fn KyberPreKeyRecord_New( &#160;&#160;&#160;&#160;id: u32, &#160;&#160;&#160;&#160;timestamp: Timestamp, &#160;&#160;&#160;&#160;key_pair: &amp;KyberKeyPair, &#160;&#160;&#160;&#160;signature: &amp;[u8], ) &#45;&gt; KyberPreKeyRecord { &#160;&#160;&#160;&#160;KyberPreKeyRecord::new(id.into(), timestamp, key_pair, ...">
<polygon fill="white" stroke="black" points="774.5,-1943.77 587.5,-1943.77 587.5,-1907.77 774.5,-1907.77 774.5,-1943.77"/>
<text text-anchor="middle" x="681" y="-1922.07" font-family="Helvetica,sans-Serif" font-size="14.00">KyberPreKeyRecord_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key(). -->
<g id="node131" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().</title>
<g id="a_node131"><a xlink:title=" &#160;&#160;&#160;pub fn private_key(&amp;self) &#45;&gt; Result&lt;PrivateKey&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(PrivateKey::deserialize(&amp;self.pre_key.private_key)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2318,-2360.77 2222,-2360.77 2222,-2324.77 2318,-2324.77 2318,-2360.77"/>
<text text-anchor="middle" x="2270" y="-2339.07" font-family="Helvetica,sans-Serif" font-size="14.00">private_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key(). -->
<g id="edge355" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/KyberPreKeyRecord_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M772.64,-1907.75C844.99,-1898.82 944.86,-1899.44 1011,-1952.77 1044.27,-1979.6 1007.92,-2015.43 1039,-2044.77 1383,-2369.46 2018.31,-2358.79 2211.67,-2347.19"/>
<polygon fill="blue" stroke="blue" points="2212.13,-2350.67 2221.89,-2346.55 2211.69,-2343.68 2212.13,-2350.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New(). -->
<g id="node27" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().</title>
<g id="a_node27"><a xlink:title="fn SenderCertificate_New( &#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;sender_device_id: u32, &#160;&#160;&#160;&#160;sender_key: &amp;PublicKey, &#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;signer_cert: &amp;ServerCertificat...">
<polygon fill="white" stroke="black" points="768,-1403.77 594,-1403.77 594,-1367.77 768,-1367.77 768,-1403.77"/>
<text text-anchor="middle" x="681" y="-1382.07" font-family="Helvetica,sans-Serif" font-size="14.00">SenderCertificate_New</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="node100" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<g id="a_node100"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_uuid: String, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_e164: Option&lt;String&gt;, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;key: PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sender_device_id: DeviceId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;expiration: Timestamp, &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1224,-913.77 1170,-913.77 1170,-877.77 1224,-877.77 1224,-913.77"/>
<text text-anchor="middle" x="1197" y="-892.07" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge358" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SenderCertificate_New().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.15,-1390.87C854.22,-1393.92 978.32,-1392.04 1011,-1358.77 1079.04,-1289.51 974.09,-994.97 1039,-922.77 1068.79,-889.64 1123.26,-887.51 1159.55,-890.49"/>
<polygon fill="blue" stroke="blue" points="1159.43,-893.99 1169.72,-891.5 1160.12,-887.03 1159.43,-893.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc(). -->
<g id="node28" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc().</title>
<g id="a_node28"><a xlink:title="async fn SealedSessionCipher_DecryptToUsmc( &#160;&#160;&#160;&#160;ctext: &amp;[u8], &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn IdentityKeyStore, ) &#45;&gt; Result&lt;UnidentifiedSenderMessageContent&gt; { &#160;&#160;&#160;&#160;sealed_sender_decrypt_to_usmc(ctext, id...">
<polygon fill="white" stroke="black" points="819.5,-1619.77 542.5,-1619.77 542.5,-1583.77 819.5,-1583.77 819.5,-1619.77"/>
<text text-anchor="middle" x="681" y="-1598.07" font-family="Helvetica,sans-Serif" font-size="14.00">SealedSessionCipher_DecryptToUsmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="node108" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<g id="a_node108"><a xlink:title="pub async fn sealed_sender_decrypt_to_usmc( &#160;&#160;&#160;&#160;ciphertext: &amp;[u8], &#160;&#160;&#160;&#160;identity_store: &amp;dyn IdentityKeyStore, ) &#45;&gt; Result&lt;UnidentifiedSenderMessageContent&gt; { &#160;&#160;&#160;&#160;let our_identity = identity_store.get_...">
<polygon fill="white" stroke="black" points="1753.5,-967.77 1512.5,-967.77 1512.5,-931.77 1753.5,-931.77 1753.5,-967.77"/>
<text text-anchor="middle" x="1633" y="-946.07" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_decrypt_to_usmc</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge411" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge 0.1.0 protocol/SealedSessionCipher_DecryptToUsmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.71,-1610.12C880.57,-1608.93 951.63,-1600.63 1011,-1574.77 1200.78,-1492.09 1264.84,-1447.11 1355,-1260.77 1382.56,-1203.82 1331.04,-1022.27 1375,-976.77 1410.07,-940.47 1463.95,-930.86 1513.33,-931.49"/>
<polygon fill="blue" stroke="blue" points="1513.38,-935 1523.47,-931.77 1513.56,-928 1513.38,-935"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair(). -->
<g id="node29" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair().</title>
<g id="a_node29"><a xlink:title=" &#160;&#160;&#160;async fn get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut key = MutPointer::null(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let result = (self.get_identity_key_pair)(self.ctx, &amp;mut k...">
<polygon fill="white" stroke="black" points="2831.5,-1017.77 2668.5,-1017.77 2668.5,-981.77 2831.5,-981.77 2831.5,-1017.77"/>
<text text-anchor="middle" x="2750" y="-996.07" font-family="Helvetica,sans-Serif" font-size="14.00">get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge160" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 ffi/storage/impl#[`&amp;FfiIdentityKeyStoreStruct`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2807.89,-1017.86C2824.32,-1025.92 2840.49,-1037.21 2850.5,-1052.77 2890.37,-1114.75 2823.72,-1327.24 2871,-1383.77 2884.83,-1400.3 2906.95,-1407.65 2927.78,-1410.63"/>
<polygon fill="blue" stroke="blue" points="2927.53,-1414.12 2937.86,-1411.77 2928.31,-1407.17 2927.53,-1414.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair(). -->
<g id="node30" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().</title>
<g id="a_node30"><a xlink:title=" &#160;&#160;&#160;fn do_get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, BridgeOrProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.env &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.borrow_mut() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_local_frame(8, &#39; getIdentityKeyPair&#39; , |env| { &#160;...">
<polygon fill="white" stroke="black" points="1726.5,-6460.77 1539.5,-6460.77 1539.5,-6424.77 1726.5,-6424.77 1726.5,-6460.77"/>
<text text-anchor="middle" x="1633" y="-6439.07" font-family="Helvetica,sans-Serif" font-size="14.00">do_get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge24" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1726.56,-6447.08C1777.76,-6445.7 1840.95,-6437.55 1891,-6410.77 2077.37,-6311.04 2212.77,-6079.29 2255.06,-5999.97"/>
<polygon fill="blue" stroke="blue" points="2258.18,-6001.55 2259.75,-5991.07 2251.99,-5998.28 2258.18,-6001.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair(). -->
<g id="node31" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair().</title>
<g id="a_node31"><a xlink:title=" &#160;&#160;&#160;async fn get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(self.do_get_identity_key_pair()?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1278.5,-6460.77 1115.5,-6460.77 1115.5,-6424.77 1278.5,-6424.77 1278.5,-6460.77"/>
<text text-anchor="middle" x="1197" y="-6439.07" font-family="Helvetica,sans-Serif" font-size="14.00">get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair(). -->
<g id="edge379" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 jni/storage/impl#[`JniIdentityKeyStore&lt;&#39;_&gt;`]do_get_identity_key_pair().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1278.61,-6442.77C1349.35,-6442.77 1452.59,-6442.77 1529.24,-6442.77"/>
<polygon fill="blue" stroke="blue" points="1529.4,-6446.27 1539.4,-6442.77 1529.4,-6439.27 1529.4,-6446.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair(). -->
<g id="node32" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair().</title>
<g id="a_node32"><a xlink:title=" &#160;&#160;&#160;async fn get_identity_key_pair(&amp;self) &#45;&gt; Result&lt;IdentityKeyPair, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pk = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.do_get_identity_key() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.await &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.map_err(|s| js_erro...">
<polygon fill="white" stroke="black" points="1278.5,-5828.77 1115.5,-5828.77 1115.5,-5792.77 1278.5,-5792.77 1278.5,-5828.77"/>
<text text-anchor="middle" x="1197" y="-5807.07" font-family="Helvetica,sans-Serif" font-size="14.00">get_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="node82" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<g id="a_node82"><a xlink:title=" &#160;&#160;&#160;fn try_from(private_key: PrivateKey) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key = IdentityKey::new(private_key.public_key()?); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::new(identity_key, private_key)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1670.5,-5828.77 1595.5,-5828.77 1595.5,-5792.77 1670.5,-5792.77 1670.5,-5828.77"/>
<text text-anchor="middle" x="1633" y="-5807.07" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="edge58" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;bridge&#45;types 0.1.0 node/storage/impl#[NodeIdentityKeyStore][IdentityKeyStore]get_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1278.61,-5810.77C1368.69,-5810.77 1511.47,-5810.77 1584.93,-5810.77"/>
<polygon fill="blue" stroke="blue" points="1585.25,-5814.27 1595.25,-5810.77 1585.25,-5807.27 1585.25,-5814.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches(). -->
<g id="node33" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().</title>
<g id="a_node33"><a xlink:title="criterion_group!(benches, generation, key_agreement, signatures); &#160;criterion_main!(benches);">
<polygon fill="white" stroke="black" points="1670.5,-1428.77 1595.5,-1428.77 1595.5,-1392.77 1670.5,-1392.77 1670.5,-1428.77"/>
<text text-anchor="middle" x="1633" y="-1407.07" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation(). -->
<g id="node34" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().</title>
<g id="a_node34"><a xlink:title="pub fn generation(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;c.bench_function(&#39; generation&#39; , |b| b.iter(|| KeyPair::generate(rng))); }">
<polygon fill="white" stroke="black" points="2316,-1482.77 2224,-1482.77 2224,-1446.77 2316,-1446.77 2316,-1482.77"/>
<text text-anchor="middle" x="2270" y="-1461.07" font-family="Helvetica,sans-Serif" font-size="14.00">generation</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation(). -->
<g id="edge243" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1670.72,-1414.61C1723.74,-1420.09 1824.83,-1430.32 1911,-1437.77 2017.91,-1447.01 2142.94,-1456.03 2213.36,-1460.95"/>
<polygon fill="blue" stroke="blue" points="2213.54,-1464.47 2223.76,-1461.68 2214.03,-1457.49 2213.54,-1464.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="node35" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<g id="a_node35"><a xlink:title="pub fn signatures(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let mut some_data = [0; 1024]; &#160;&#160;&#160;&#160;rng.fill(&amp;mut some_data); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; ge...">
<polygon fill="white" stroke="black" points="2314.5,-1428.77 2225.5,-1428.77 2225.5,-1392.77 2314.5,-1392.77 2314.5,-1428.77"/>
<text text-anchor="middle" x="2270" y="-1407.07" font-family="Helvetica,sans-Serif" font-size="14.00">signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures(). -->
<g id="edge245" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1670.88,-1410.77C1777.99,-1410.77 2089.36,-1410.77 2215.25,-1410.77"/>
<polygon fill="blue" stroke="blue" points="2215.42,-1414.27 2225.42,-1410.77 2215.42,-1407.27 2215.42,-1414.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement(). -->
<g id="node36" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().</title>
<g id="a_node36"><a xlink:title="pub fn key_agreement(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let rng = &amp;mut rng(); &#160;&#160;&#160;&#160;let alice_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;let bob_key = KeyPair::generate(rng); &#160;&#160;&#160;&#160;&#160;c.bench_function(&#39; key agreement&#39; , |b| {...">
<polygon fill="white" stroke="black" points="2331,-1374.77 2209,-1374.77 2209,-1338.77 2331,-1338.77 2331,-1374.77"/>
<text text-anchor="middle" x="2270" y="-1353.07" font-family="Helvetica,sans-Serif" font-size="14.00">key_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement(). -->
<g id="edge244" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1670.72,-1406.93C1723.74,-1401.45 1824.83,-1391.22 1911,-1383.77 2010.73,-1375.15 2126.23,-1366.72 2198.46,-1361.63"/>
<polygon fill="blue" stroke="blue" points="2199.06,-1365.1 2208.79,-1360.91 2198.57,-1358.12 2199.06,-1365.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge343" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 generation().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2307.93,-1482.8C2374.28,-1514.09 2518.88,-1577.23 2649,-1599.77 2737.24,-1615.05 2776.79,-1650.63 2850.5,-1599.77 2871.63,-1585.19 2851.76,-1562.77 2871,-1545.77 2887.85,-1530.88 2911.57,-1523.89 2932.72,-1520.72"/>
<polygon fill="blue" stroke="blue" points="2933.36,-1524.17 2942.85,-1519.46 2932.49,-1517.23 2933.36,-1524.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="node42" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<g id="a_node42"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_signature...">
<polygon fill="white" stroke="black" points="2825,-1536.77 2675,-1536.77 2675,-1500.77 2825,-1500.77 2825,-1536.77"/>
<text text-anchor="middle" x="2750" y="-1515.07" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature(). -->
<g id="edge382" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2314.56,-1401.59C2385.31,-1389.22 2526.73,-1375.37 2621,-1437.77 2643.54,-1452.69 2627.95,-1474.81 2649,-1491.77 2654.01,-1495.8 2659.57,-1499.24 2665.43,-1502.16"/>
<polygon fill="blue" stroke="blue" points="2664.29,-1505.49 2674.85,-1506.35 2667.13,-1499.09 2664.29,-1505.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge381" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2314.53,-1421.89C2387.14,-1437.62 2533.62,-1456.93 2621,-1383.77 2659.02,-1351.94 2609.78,-1306.12 2649,-1275.77 2719.83,-1220.96 2783.32,-1216.55 2850.5,-1275.77 2877.72,-1299.76 2852.59,-1406.5 2871,-1437.77 2885.59,-1462.56 2911.06,-1482.01 2933.87,-1495.62"/>
<polygon fill="blue" stroke="blue" points="2932.37,-1498.8 2942.78,-1500.74 2935.85,-1492.72 2932.37,-1498.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement(). -->
<g id="node46" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().</title>
<g id="a_node46"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_agreement(&amp;self, their_key: &amp;PublicKey) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.private_key.calculate_agreement(their_key) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2830,-1374.77 2670,-1374.77 2670,-1338.77 2830,-1338.77 2830,-1374.77"/>
<text text-anchor="middle" x="2750" y="-1353.07" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement(). -->
<g id="edge439" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2331.06,-1356.77C2413.79,-1356.77 2563.48,-1356.77 2659.46,-1356.77"/>
<polygon fill="blue" stroke="blue" points="2659.73,-1360.27 2669.73,-1356.77 2659.73,-1353.27 2659.73,-1360.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge440" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 key_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2326.01,-1338.66C2430.36,-1304.32 2646.93,-1233.1 2649,-1232.77 2737.43,-1218.63 2784.1,-1172.68 2850.5,-1232.77 2884.45,-1263.49 2848.29,-1398.01 2871,-1437.77 2885.32,-1462.84 2910.9,-1482.35 2933.85,-1495.93"/>
<polygon fill="blue" stroke="blue" points="2932.39,-1499.13 2942.82,-1501.03 2935.85,-1493.04 2932.39,-1499.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main(). -->
<g id="node37" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().</title>
<g id="a_node37"><a xlink:title="fn main() { &#160;&#160;&#160;&#160;let mut input = vec![]; &#160;&#160;&#160;&#160;std::io::stdin() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.read_to_end(&amp;mut input) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; can read input&#39; ); &#160;&#160;&#160;&#160;let key = boring::pkey::PKey::public_key_from_pem(&amp;input).expect(...">
<polygon fill="white" stroke="black" points="2777,-3344.77 2723,-3344.77 2723,-3308.77 2777,-3308.77 2777,-3344.77"/>
<text text-anchor="middle" x="2750" y="-3323.07" font-family="Helvetica,sans-Serif" font-size="14.00">main</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge48" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2777.17,-3326.12C2800.38,-3324 2833.21,-3316.95 2850.5,-3294.77 2872.2,-3266.93 2868.48,-3012.97 2871,-2977.77 2910.71,-2423.57 2966.92,-1747.04 2979.11,-1601.28"/>
<polygon fill="blue" stroke="blue" points="2982.62,-1601.24 2979.97,-1590.98 2975.65,-1600.66 2982.62,-1601.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge47" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2777.07,-3324.67C2799.26,-3321.57 2830.6,-3313.87 2850.5,-3294.77 3076.95,-3077.38 3012.55,-2934.93 3094,-2631.77 3202,-2229.78 3262.23,-1724.48 3275.96,-1600.96"/>
<polygon fill="blue" stroke="blue" points="3279.46,-1601.15 3277.07,-1590.83 3272.5,-1600.38 3279.46,-1601.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge46" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 main().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2777.44,-3326.33C2800.85,-3324.36 2833.8,-3317.4 2850.5,-3294.77 2879.35,-3255.67 2840.77,-1583.81 2871,-1545.77 2885.6,-1527.4 2910.44,-1520.27 2932.88,-1517.89"/>
<polygon fill="blue" stroke="blue" points="2933.28,-1521.37 2942.98,-1517.12 2932.74,-1514.4 2933.28,-1521.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="node52" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<g id="a_node52"><a xlink:title=" &#160;&#160;&#160;fn from(private_key: [u8; 32]) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secret = StaticSecret::from(scalar::clamp_integer(private_key)); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PrivateKey { secret } &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3528,-1102.77 3474,-1102.77 3474,-1066.77 3528,-1066.77 3528,-1102.77"/>
<text text-anchor="middle" x="3501" y="-1081.07" font-family="Helvetica,sans-Serif" font-size="14.00">from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge66" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3062.59,-1350.3C3074.6,-1345.96 3085.72,-1339.45 3094,-1329.77 3142.13,-1273.51 3067.49,-1047.88 3122,-997.77 3228.02,-900.32 3320.16,-927.77 3446,-997.77 3468.56,-1010.32 3482.9,-1036.63 3491.09,-1057.05"/>
<polygon fill="blue" stroke="blue" points="3487.85,-1058.37 3494.63,-1066.52 3494.41,-1055.92 3487.85,-1058.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="node49" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<g id="a_node49"><a xlink:title=" &#160;&#160;&#160;pub fn calculate_signature_for_multipart_message&lt;R: CryptoRng + Rng&gt;( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;message: &amp;[&amp;[u8]], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng: &amp;mut R, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Box&lt;[u8]&gt;, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self....">
<polygon fill="white" stroke="black" points="3438,-1517.77 3122,-1517.77 3122,-1481.77 3438,-1481.77 3438,-1517.77"/>
<text text-anchor="middle" x="3280" y="-1496.07" font-family="Helvetica,sans-Serif" font-size="14.00">calculate_signature_for_multipart_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge67" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3057.51,-1554.73C3069.7,-1551.74 3082.21,-1548.68 3094,-1545.77 3127.64,-1537.48 3164.69,-1528.28 3196.75,-1520.3"/>
<polygon fill="blue" stroke="blue" points="3197.67,-1523.67 3206.53,-1517.86 3195.98,-1516.88 3197.67,-1523.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private(). -->
<g id="node40" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().</title>
<g id="a_node40"><a xlink:title=" &#160;&#160;&#160;pub fn from_public_and_private( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;public_key: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;private_key: &amp;[u8], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = PublicKey::try_from(public_key)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pr...">
<polygon fill="white" stroke="black" points="2843,-1590.77 2657,-1590.77 2657,-1554.77 2843,-1554.77 2843,-1590.77"/>
<text text-anchor="middle" x="2750" y="-1569.07" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="node44" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<g id="a_node44"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: &amp;[u8]) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self::deserialize(value) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="3020,-1320.77 2945,-1320.77 2945,-1284.77 3020,-1284.77 3020,-1320.77"/>
<text text-anchor="middle" x="2982.5" y="-1299.07" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge68" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2841.22,-1554.53C2844.61,-1551.96 2847.73,-1549.05 2850.5,-1545.77 2881.57,-1508.9 2839.47,-1366.24 2871,-1329.77 2886.62,-1311.7 2912.16,-1304.68 2934.75,-1302.3"/>
<polygon fill="blue" stroke="blue" points="2935.17,-1305.77 2944.87,-1301.51 2934.63,-1298.8 2935.17,-1305.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="edge138" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<path fill="none" stroke="blue" d="M3325.8,-1569.58C3361.58,-1565 3411.31,-1553.86 3446,-1526.77 3542.16,-1451.69 3594.26,-1307.84 3612.7,-1247.5"/>
<polygon fill="blue" stroke="blue" points="3616.06,-1248.47 3615.56,-1237.89 3609.35,-1246.47 3616.06,-1248.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge159" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2825.2,-1536.15C2848.23,-1541.55 2873.78,-1547.53 2897.43,-1553.07"/>
<polygon fill="blue" stroke="blue" points="2896.9,-1556.55 2907.44,-1555.42 2898.5,-1549.73 2896.9,-1556.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge206" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3027.01,-1411.66C3050.42,-1409.66 3077.74,-1402.87 3094,-1383.77 3145,-1323.85 3064.2,-1084.17 3122,-1030.77 3174.89,-981.91 3379.48,-1003.22 3446,-1030.77 3459.96,-1036.55 3472.19,-1047.89 3481.47,-1058.68"/>
<polygon fill="blue" stroke="blue" points="3478.96,-1061.15 3487.96,-1066.73 3484.41,-1056.75 3478.96,-1061.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge216" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3020.1,-1301.79C3044.58,-1303.22 3075.57,-1309.43 3094,-1329.77 3153.38,-1395.3 3064.12,-1459.9 3122,-1526.77 3147.1,-1555.77 3189.4,-1566.97 3223.78,-1571.09"/>
<polygon fill="blue" stroke="blue" points="3223.86,-1574.61 3234.16,-1572.15 3224.57,-1567.65 3223.86,-1574.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures(). -->
<g id="node45" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().</title>
<g id="a_node45"><a xlink:title=" &#160;&#160;&#160;fn test_large_signatures() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 1024 * 10...">
<polygon fill="white" stroke="black" points="2832,-1482.77 2668,-1482.77 2668,-1446.77 2832,-1446.77 2832,-1482.77"/>
<text text-anchor="middle" x="2750" y="-1461.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_large_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge251" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2832.16,-1479.48C2838.82,-1482.8 2845.06,-1486.84 2850.5,-1491.77 2869.52,-1509.01 2851.76,-1528.77 2871,-1545.77 2878.79,-1552.66 2888.06,-1557.85 2897.86,-1561.76"/>
<polygon fill="blue" stroke="blue" points="2896.79,-1565.1 2907.39,-1565.13 2899.12,-1558.5 2896.79,-1565.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge252" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2828.07,-1446.71C2860.88,-1439.03 2898.34,-1430.25 2928.03,-1423.3"/>
<polygon fill="blue" stroke="blue" points="2928.85,-1426.7 2937.78,-1421.01 2927.25,-1419.88 2928.85,-1426.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge250" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2828.07,-1482.83C2862.76,-1490.95 2902.65,-1500.3 2933.06,-1507.42"/>
<polygon fill="blue" stroke="blue" points="2932.45,-1510.87 2942.99,-1509.75 2934.05,-1504.06 2932.45,-1510.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge249" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_large_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2832.05,-1470.14C2906.25,-1475.06 3018.36,-1482.49 3111.74,-1488.68"/>
<polygon fill="blue" stroke="blue" points="3111.66,-1492.18 3121.87,-1489.35 3112.12,-1485.2 3111.66,-1492.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge276" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2830,-1356.77C2849.96,-1356.77 2871.53,-1356.77 2891.96,-1356.77"/>
<polygon fill="blue" stroke="blue" points="2892.21,-1360.27 2902.21,-1356.77 2892.21,-1353.27 2892.21,-1360.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="node47" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<g id="a_node47"><a xlink:title=" &#160;&#160;&#160;fn try_from(value: PrivateKey) &#45;&gt; Result&lt;Self, CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = value.public_key()?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::new(public_key, value)) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2787.5,-1320.77 2712.5,-1320.77 2712.5,-1284.77 2787.5,-1284.77 2787.5,-1320.77"/>
<text text-anchor="middle" x="2750" y="-1299.07" font-family="Helvetica,sans-Serif" font-size="14.00">try_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge324" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2787.54,-1304.66C2808.26,-1307.53 2833.39,-1314.26 2850.5,-1329.77 2869.52,-1347.01 2851.76,-1366.77 2871,-1383.77 2886.57,-1397.53 2908.01,-1404.54 2927.86,-1408.02"/>
<polygon fill="blue" stroke="blue" points="2927.34,-1411.49 2937.75,-1409.5 2928.38,-1404.56 2927.34,-1411.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="node53" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<g id="a_node53"><a xlink:title=" &#160;&#160;&#160;pub fn new&lt;R&gt;(csprng: &amp;mut R) &#45;&gt; Self &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R: CryptoRng + Rng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// This is essentially StaticSecret::random_from_rng only with clamping &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut bytes = [0u8; 32];...">
<polygon fill="white" stroke="black" points="3528,-1237.77 3474,-1237.77 3474,-1201.77 3528,-1201.77 3528,-1237.77"/>
<text text-anchor="middle" x="3501" y="-1216.07" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="edge369" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3014.65,-1500.74C3105.5,-1448.14 3369.79,-1295.15 3465.17,-1239.93"/>
<polygon fill="blue" stroke="blue" points="3466.96,-1242.94 3473.86,-1234.9 3463.45,-1236.88 3466.96,-1242.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge410" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3297.8,-1481.51C3330.78,-1444.72 3404.43,-1357.93 3446,-1272.77 3459.89,-1244.32 3482.2,-1157.56 3493.29,-1112.54"/>
<polygon fill="blue" stroke="blue" points="3496.69,-1113.37 3495.67,-1102.83 3489.89,-1111.71 3496.69,-1113.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size(). -->
<g id="node50" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().</title>
<g id="a_node50"><a xlink:title=" &#160;&#160;&#160;fn test_decode_size() &#45;&gt; Result&lt;(), CurveError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized_public = key_pair.publi...">
<polygon fill="white" stroke="black" points="2817,-1428.77 2683,-1428.77 2683,-1392.77 2817,-1392.77 2817,-1428.77"/>
<text text-anchor="middle" x="2750" y="-1407.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_decode_size</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge432" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.05,-1410.77C2851.98,-1410.77 2894.34,-1410.77 2927.32,-1410.77"/>
<polygon fill="blue" stroke="blue" points="2927.67,-1414.27 2937.67,-1410.77 2927.67,-1407.27 2927.67,-1414.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge433" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/tests/test_decode_size().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2817.22,-1425.86C2828.52,-1429.24 2839.99,-1433.21 2850.5,-1437.77 2885.98,-1453.16 2923.19,-1477.02 2948.85,-1494.86"/>
<polygon fill="blue" stroke="blue" points="2946.89,-1497.77 2957.08,-1500.66 2950.92,-1492.05 2946.89,-1497.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement(). -->
<g id="node51" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement().</title>
<g id="a_node51"><a xlink:title=" &#160;&#160;&#160;fn test_agreement() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_public: [u8; 32] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0x1b, 0xb7, 0x59, 0x66, 0xf2, 0xe9, 0x3a, 0x36, 0x91, 0xdf, 0xff, 0x94, 0x2b, 0xb2, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xa4, 0x66, 0xa1, 0xc0, 0x8...">
<polygon fill="white" stroke="black" points="3342.5,-1129.77 3217.5,-1129.77 3217.5,-1093.77 3342.5,-1093.77 3342.5,-1129.77"/>
<text text-anchor="middle" x="3280" y="-1108.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge174" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_agreement().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3342.59,-1104.18C3381.63,-1099.36 3430.79,-1093.3 3463.69,-1089.25"/>
<polygon fill="blue" stroke="blue" points="3464.28,-1092.7 3473.77,-1088 3463.42,-1085.75 3464.28,-1092.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="edge184" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<path fill="none" stroke="blue" d="M3517.98,-1102.98C3538.48,-1126.33 3574.16,-1166.98 3597.56,-1193.63"/>
<polygon fill="blue" stroke="blue" points="3595.17,-1196.21 3604.39,-1201.42 3600.43,-1191.6 3595.17,-1196.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer(). -->
<g id="edge265" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().&#45;&gt;rust&#45;analyzer cargo curve25519&#45;dalek 4.1.3 scalar/clamp_integer().</title>
<path fill="none" stroke="blue" d="M3528.01,-1219.77C3535.81,-1219.77 3544.75,-1219.77 3553.93,-1219.77"/>
<polygon fill="blue" stroke="blue" points="3553.95,-1223.27 3563.95,-1219.77 3553.95,-1216.27 3553.95,-1223.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures(). -->
<g id="node54" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().</title>
<g id="a_node54"><a xlink:title=" &#160;&#160;&#160;fn test_random_signatures() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut message = [0u8; 64]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut message); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="3371.5,-1237.77 3188.5,-1237.77 3188.5,-1201.77 3371.5,-1201.77 3371.5,-1237.77"/>
<text text-anchor="middle" x="3280" y="-1216.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_signatures</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="edge354" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_signatures().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3371.66,-1219.77C3403.99,-1219.77 3438.58,-1219.77 3463.69,-1219.77"/>
<polygon fill="blue" stroke="blue" points="3463.84,-1223.27 3473.84,-1219.77 3463.84,-1216.27 3463.84,-1223.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements(). -->
<g id="node55" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements().</title>
<g id="a_node55"><a xlink:title=" &#160;&#160;&#160;fn test_random_agreements() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for _ in 0..50 { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_key = PrivateKey::new(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_key = PrivateKey::...">
<polygon fill="white" stroke="black" points="3376.5,-1183.77 3183.5,-1183.77 3183.5,-1147.77 3376.5,-1147.77 3376.5,-1183.77"/>
<text text-anchor="middle" x="3280" y="-1162.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_random_agreements</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new(). -->
<g id="edge406" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_random_agreements().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3376.84,-1176.44C3399.81,-1180.37 3424.04,-1185.67 3446,-1192.77 3452.15,-1194.76 3458.47,-1197.36 3464.53,-1200.16"/>
<polygon fill="blue" stroke="blue" points="3463.23,-1203.42 3473.76,-1204.66 3466.3,-1197.13 3463.23,-1203.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature(). -->
<g id="node56" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().</title>
<g id="a_node56"><a xlink:title=" &#160;&#160;&#160;fn test_signature() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_identity_private: [u8; PRIVATE_KEY_LENGTH] = [ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0xc0, 0x97, 0x24, 0x84, 0x12, 0xe5, 0x8b, 0xf0, 0x5d, 0xf4, 0x87, 0x96, 0x82, 0x05, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;0...">
<polygon fill="white" stroke="black" points="3337.5,-1075.77 3222.5,-1075.77 3222.5,-1039.77 3337.5,-1039.77 3337.5,-1075.77"/>
<text text-anchor="middle" x="3280" y="-1054.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from(). -->
<g id="edge435" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/tests/test_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/curve25519/impl#[PrivateKey][`From&lt;[u8; PRIVATE_KEY_LENGTH]&gt;`]from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M3337.68,-1064.76C3377.54,-1069.67 3429.67,-1076.1 3463.96,-1080.33"/>
<polygon fill="blue" stroke="blue" points="3463.64,-1083.81 3473.99,-1081.56 3464.5,-1076.87 3463.64,-1083.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node57" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node57"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aci, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pni, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;username, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e164, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;blocked: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;visibility: _, &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2781,-638.77 2719,-638.77 2719,-602.77 2781,-602.77 2781,-638.77"/>
<text text-anchor="middle" x="2750" y="-617.07" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge69" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2781.05,-627.96C2804.38,-635.27 2835.26,-649.14 2850.5,-673.77 2895.18,-745.98 2831.6,-1362.55 2871,-1437.77 2884.6,-1463.74 2910.72,-1483.48 2934.15,-1496.97"/>
<polygon fill="blue" stroke="blue" points="2932.52,-1500.06 2942.97,-1501.83 2935.9,-1493.93 2932.52,-1500.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node58" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node58"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(dest) = destina...">
<polygon fill="white" stroke="black" points="2301,-638.77 2239,-638.77 2239,-602.77 2301,-602.77 2301,-638.77"/>
<text text-anchor="middle" x="2270" y="-617.07" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge207" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Contact`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2301.26,-620.77C2384.16,-620.77 2614.93,-620.77 2708.66,-620.77"/>
<polygon fill="blue" stroke="blue" points="2708.87,-624.27 2718.87,-620.77 2708.87,-617.27 2708.87,-624.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="node59" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().</title>
<g id="a_node59"><a xlink:title=" &#160;&#160;&#160;fn accept(&amp;mut self, visitor: &amp;mut Scrambler) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;item, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;special_fields: _, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(item) = item { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use proto::fra...">
<polygon fill="white" stroke="black" points="1664,-638.77 1602,-638.77 1602,-602.77 1664,-602.77 1664,-638.77"/>
<text text-anchor="middle" x="1633" y="-617.07" font-family="Helvetica,sans-Serif" font-size="14.00">accept</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept(). -->
<g id="edge341" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Frame`][`Visit&lt;Scrambler&gt;`]accept().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;message&#45;backup 0.1.0 scramble/impl#[`proto::Recipient`][`Visit&lt;Scrambler&gt;`]accept().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1664.2,-620.77C1768.16,-620.77 2111.26,-620.77 2228.96,-620.77"/>
<polygon fill="blue" stroke="blue" points="2228.98,-624.27 2238.98,-620.77 2228.98,-617.27 2228.98,-624.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed(). -->
<g id="node60" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().</title>
<g id="a_node60"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn as_borrowed(&amp;self) &#45;&gt; AccountKeys&lt;&#39;_&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;identity_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signed_pre_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pq_last_resort_pre_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} = self; &#160;&#160;...">
<polygon fill="white" stroke="black" points="2802,-525.77 2698,-525.77 2698,-489.77 2802,-489.77 2802,-525.77"/>
<text text-anchor="middle" x="2750" y="-504.07" font-family="Helvetica,sans-Serif" font-size="14.00">as_borrowed</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge266" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2802.24,-522.84C2820.68,-530.99 2839.61,-543.11 2850.5,-560.77 2901.64,-643.75 2825.92,-1351.35 2871,-1437.77 2884.56,-1463.76 2910.68,-1483.5 2934.12,-1496.99"/>
<polygon fill="blue" stroke="blue" points="2932.49,-1500.09 2942.94,-1501.85 2935.87,-1493.95 2932.49,-1500.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request(). -->
<g id="node61" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request().</title>
<g id="a_node61"><a xlink:title=" &#160;&#160;&#160;fn register_account_request() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request = ChatRequest::register_account( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; +18005550101&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(&amp;&#39; abc&#39; .parse().unwrap()), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;NewMessageNotification::...">
<polygon fill="white" stroke="black" points="2365.5,-525.77 2174.5,-525.77 2174.5,-489.77 2365.5,-489.77 2365.5,-525.77"/>
<text text-anchor="middle" x="2270" y="-504.07" font-family="Helvetica,sans-Serif" font-size="14.00">register_account_request</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed(). -->
<g id="edge267" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2365.72,-507.77C2461.38,-507.77 2606.32,-507.77 2687.8,-507.77"/>
<polygon fill="blue" stroke="blue" points="2687.9,-511.27 2697.9,-507.77 2687.9,-504.27 2687.9,-511.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens(). -->
<g id="node62" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens().</title>
<g id="a_node62"><a xlink:title=" &#160;&#160;&#160;fn register_account_request_fetches_messages_no_push_tokens() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let request = ChatRequest::register_account( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; +18005550101&#39; , &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Some(&amp;&#39; abc&#39; .parse().unwrap()), &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2491.5,-471.77 2048.5,-471.77 2048.5,-435.77 2491.5,-435.77 2491.5,-471.77"/>
<text text-anchor="middle" x="2270" y="-450.07" font-family="Helvetica,sans-Serif" font-size="14.00">register_account_request_fetches_messages_no_push_tokens</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed(). -->
<g id="edge419" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/register_account_request_fetches_messages_no_push_tokens().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;net&#45;chat 0.1.0 ws/registration/request/test/impl#[OwnedAccountKeys]as_borrowed().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2491.79,-466.39C2534.76,-470.09 2579.37,-474.8 2621,-480.77 2643.03,-483.93 2666.94,-488.62 2688.08,-493.22"/>
<polygon fill="blue" stroke="blue" points="2687.37,-496.65 2697.89,-495.39 2688.88,-489.81 2687.37,-496.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches(). -->
<g id="node63" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().</title>
<g id="a_node63"><a xlink:title="criterion_group!(benches, bench_kem); criterion_main!(benches);">
<polygon fill="white" stroke="black" points="91,-2726.77 16,-2726.77 16,-2690.77 91,-2690.77 91,-2726.77"/>
<text text-anchor="middle" x="53.5" y="-2705.07" font-family="Helvetica,sans-Serif" font-size="14.00">benches</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="node67" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<g id="a_node67"><a xlink:title="pub fn v1(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="708,-1212.77 654,-1212.77 654,-1176.77 708,-1176.77 708,-1212.77"/>
<text text-anchor="middle" x="681" y="-1191.07" font-family="Helvetica,sans-Serif" font-size="14.00">v1</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1(). -->
<g id="edge153" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M60.37,-2690.54C92.58,-2589.66 248.76,-2089.23 315,-1667.77 322.26,-1621.57 311.44,-1282.29 343,-1247.77 420.36,-1163.16 573.4,-1176.2 643.44,-1187.59"/>
<polygon fill="blue" stroke="blue" points="643.11,-1191.08 653.56,-1189.32 644.29,-1184.18 643.11,-1191.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="node68" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<g id="a_node68"><a xlink:title="pub fn v2(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_address = ProtocolAddress::new( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; 9d0652a3&#45;dcc3&#45;4d11&#45;975f&#45;74d61598733f&#39; .to_owned(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;DeviceId::new(1...">
<polygon fill="white" stroke="black" points="708,-1158.77 654,-1158.77 654,-1122.77 708,-1122.77 708,-1158.77"/>
<text text-anchor="middle" x="681" y="-1137.07" font-family="Helvetica,sans-Serif" font-size="14.00">v2</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2(). -->
<g id="edge155" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M54.74,-2690.43C56.48,-2568.41 68.49,-1872.82 119,-1667.77 177.24,-1431.33 144.08,-1308.22 343,-1167.77 434.71,-1103.02 577.5,-1119.95 643.85,-1132.66"/>
<polygon fill="blue" stroke="blue" points="643.33,-1136.12 653.82,-1134.64 644.7,-1129.26 643.33,-1136.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt(). -->
<g id="node71" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().</title>
<g id="a_node71"><a xlink:title="pub fn session_encrypt_decrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_decrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="315,-3285.77 127,-3285.77 127,-3249.77 315,-3249.77 315,-3285.77"/>
<text text-anchor="middle" x="221" y="-3264.07" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt(). -->
<g id="edge154" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M54.09,-2726.81C52.55,-2810.67 50.37,-3161.74 119,-3240.77 119.62,-3241.49 120.27,-3242.19 120.92,-3242.87"/>
<polygon fill="blue" stroke="blue" points="118.71,-3245.58 128.53,-3249.54 123.32,-3240.32 118.71,-3245.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="node72" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<g id="a_node72"><a xlink:title="pub fn session_encrypt(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;session_encrypt_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="285,-3231.77 157,-3231.77 157,-3195.77 285,-3195.77 285,-3231.77"/>
<text text-anchor="middle" x="221" y="-3210.07" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt(). -->
<g id="edge156" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 benches().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M60.49,-2727.04C85.37,-2802.98 180.73,-3093.96 210.84,-3185.81"/>
<polygon fill="blue" stroke="blue" points="207.58,-3187.11 214.02,-3195.52 214.23,-3184.93 207.58,-3187.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="node64" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<g id="a_node64"><a xlink:title="pub fn ratchet_forward_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut group = c.benchmark_group(&#39; ratchet&#39; ); &#160;&#160;&#160;&#160;group.sampling_mode(SamplingMode::Flat); &#160;&#160;&#160;&#160;group.sample_...">
<polygon fill="white" stroke="black" points="767,-3368.77 595,-3368.77 595,-3332.77 767,-3332.77 767,-3368.77"/>
<text text-anchor="middle" x="681" y="-3347.07" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge28" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.27,-3368.8C831.91,-3382.24 946.92,-3388.25 1011,-3320.77 1065.52,-3263.36 1014.54,-2684.07 1039,-2608.77 1066.72,-2523.46 1134.91,-2440.15 1171.64,-2399.49"/>
<polygon fill="blue" stroke="blue" points="1174.38,-2401.68 1178.54,-2391.94 1169.21,-2396.96 1174.38,-2401.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge30" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.71,-3368.81C831.46,-3382.45 947.08,-3388.79 1011,-3320.77 1085.14,-3241.87 968.05,-2428.55 1039,-2346.77 1039.53,-2346.16 1040.06,-2345.57 1040.6,-2344.98"/>
<polygon fill="blue" stroke="blue" points="1043.22,-2347.32 1048.1,-2337.91 1038.42,-2342.23 1043.22,-2347.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="node195" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<g id="a_node195"><a xlink:title="pub fn test_in_memory_protocol_store() &#45;&gt; Result&lt;InMemSignalProtocolStore, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let identity_key = IdentityKeyPair::generate(&amp;mut csprng)...">
<polygon fill="white" stroke="black" points="1312,-3465.77 1082,-3465.77 1082,-3429.77 1312,-3429.77 1312,-3465.77"/>
<text text-anchor="middle" x="1197" y="-3444.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_in_memory_protocol_store</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge29" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.01,-3368.02C839.27,-3382.54 945.83,-3403.63 1039,-3420.77 1052.02,-3423.17 1065.67,-3425.61 1079.24,-3428"/>
<polygon fill="blue" stroke="blue" points="1078.65,-3431.45 1089.11,-3429.73 1079.86,-3424.56 1078.65,-3431.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="node65" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<g id="a_node65"><a xlink:title="pub fn ratchet_forward(c: &amp;mut Criterion) { &#160;&#160;&#160;&#160;ratchet_forward_result(c).expect(&#39; success&#39; ); }">
<polygon fill="white" stroke="black" points="284,-3368.77 158,-3368.77 158,-3332.77 284,-3332.77 284,-3368.77"/>
<text text-anchor="middle" x="221" y="-3347.07" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet_forward</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result(). -->
<g id="edge380" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M284.24,-3350.77C361.61,-3350.77 494.43,-3350.77 584.66,-3350.77"/>
<polygon fill="blue" stroke="blue" points="584.9,-3354.27 594.9,-3350.77 584.9,-3347.27 584.9,-3354.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet(). -->
<g id="node66" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().</title>
<g id="a_node66"><a xlink:title="criterion_group!(ratchet, ratchet_forward); &#160;criterion_main!(ratchet);">
<polygon fill="white" stroke="black" points="86.5,-3368.77 20.5,-3368.77 20.5,-3332.77 86.5,-3332.77 86.5,-3368.77"/>
<text text-anchor="middle" x="53.5" y="-3347.07" font-family="Helvetica,sans-Serif" font-size="14.00">ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward(). -->
<g id="edge420" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet_forward().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M86.8,-3350.77C104.26,-3350.77 126.57,-3350.77 147.91,-3350.77"/>
<polygon fill="blue" stroke="blue" points="147.96,-3354.27 157.96,-3350.77 147.96,-3347.27 147.96,-3354.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge85" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.4,-1196.85C767.54,-1201.41 915.19,-1212.13 1039,-1215.77 1179.38,-1219.89 1214.56,-1216.75 1355,-1215.77 1521.17,-1214.61 2728.1,-1085.37 2850.5,-1197.77 2889.93,-1233.97 2844.79,-1391.1 2871,-1437.77 2885.19,-1463.04 2910.9,-1482.6 2933.95,-1496.16"/>
<polygon fill="blue" stroke="blue" points="2932.53,-1499.38 2942.96,-1501.25 2935.97,-1493.28 2932.53,-1499.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge81" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.13,-1201.44C768.8,-1215.24 920.88,-1239.98 1011,-1167.77 1043.69,-1141.57 1007.19,-1105.02 1039,-1077.77 1146.83,-985.39 1252.83,-1129.38 1355,-1030.77 1390.12,-996.87 1339.15,-955.91 1375,-922.77 1406.41,-893.73 1450.08,-882.58 1492.52,-880.02"/>
<polygon fill="blue" stroke="blue" points="1492.86,-883.5 1502.69,-879.56 1492.55,-876.51 1492.86,-883.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge82" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.18,-1202.3C770.3,-1218.41 927.64,-1248.51 1011,-1167.77 1089.72,-1091.52 963.72,-1002.43 1039,-922.77 1069.6,-890.39 1123.86,-888.07 1159.89,-890.8"/>
<polygon fill="blue" stroke="blue" points="1159.7,-894.3 1169.98,-891.73 1160.34,-887.33 1159.7,-894.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge79" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.29,-1202.41C770.65,-1218.77 928.47,-1249.36 1011,-1167.77 1058.46,-1120.85 993.66,-917.74 1039,-868.77 1069.27,-836.08 1123.62,-833.84 1159.75,-836.67"/>
<polygon fill="blue" stroke="blue" points="1159.59,-840.17 1169.88,-837.63 1160.25,-833.2 1159.59,-840.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge80" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.19,-1194.07C764.14,-1192.26 899.32,-1186.19 1011,-1167.77 1166.49,-1142.13 1246.77,-1196.32 1355,-1081.77 1387.62,-1047.24 1340.03,-1008.93 1375,-976.77 1408.85,-945.64 1456.79,-935.11 1502.11,-933.67"/>
<polygon fill="blue" stroke="blue" points="1502.41,-937.17 1512.34,-933.5 1502.29,-930.17 1502.41,-937.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge83" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.09,-1189.33C771.43,-1177.83 933.78,-1158.9 1011,-1247.77 1062.68,-1307.24 987.63,-2606.02 1039,-2665.77 1053.84,-2683.03 1075.37,-2691.99 1097.76,-2696.19"/>
<polygon fill="blue" stroke="blue" points="1097.31,-2699.66 1107.73,-2697.75 1098.39,-2692.75 1097.31,-2699.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="node190" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<g id="a_node190"><a xlink:title="pub async fn create_pre_key_bundle&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;store: &amp;mut dyn ProtocolStore, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;PreKeyBundle, SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let pre_key_pair = KeyPair::gene...">
<polygon fill="white" stroke="black" points="1284,-3411.77 1110,-3411.77 1110,-3375.77 1284,-3375.77 1284,-3411.77"/>
<text text-anchor="middle" x="1197" y="-3390.07" font-family="Helvetica,sans-Serif" font-size="14.00">create_pre_key_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge84" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.1,-1189.32C771.45,-1177.81 933.82,-1158.86 1011,-1247.77 1038.28,-1279.2 1033.68,-2704.49 1039,-2745.77 1070.57,-2990.65 1158.53,-3277.33 1186.99,-3366.14"/>
<polygon fill="blue" stroke="blue" points="1183.69,-3367.3 1190.08,-3375.75 1190.35,-3365.16 1183.69,-3367.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge78" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v1().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.13,-1189.3C771.56,-1177.72 934.08,-1158.64 1011,-1247.77 1089.88,-1339.17 960.61,-3328.95 1039,-3420.77 1048.03,-3431.35 1059.57,-3438.81 1072.29,-3443.98"/>
<polygon fill="blue" stroke="blue" points="1071.15,-3447.28 1081.74,-3447.34 1073.5,-3440.69 1071.15,-3447.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge365" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.07,-1141.41C927.51,-1146.56 2461.81,-1178.12 2621,-1056.77 2653.3,-1032.14 2616.17,-993.69 2649,-969.77 2685.19,-943.4 2818.15,-938.81 2850.5,-969.77 2888.1,-1005.76 2846.46,-1391.87 2871,-1437.77 2884.77,-1463.53 2910.76,-1483.22 2934.08,-1496.73"/>
<polygon fill="blue" stroke="blue" points="2932.41,-1499.8 2942.85,-1501.6 2935.81,-1493.69 2932.41,-1499.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge366" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.04,-1147.84C769.85,-1162.88 926.57,-1190.53 1011,-1110.77 1072.41,-1052.76 979.94,-983.17 1039,-922.77 1070.06,-891 1123.96,-888.47 1159.81,-890.99"/>
<polygon fill="blue" stroke="blue" points="1159.59,-894.49 1169.85,-891.87 1160.19,-887.51 1159.59,-894.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge359" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.21,-1148.02C770.4,-1163.45 927.88,-1191.89 1011,-1110.77 1088.48,-1035.14 964.58,-947.41 1039,-868.77 1069.62,-836.41 1123.88,-834.08 1159.89,-836.81"/>
<polygon fill="blue" stroke="blue" points="1159.71,-840.31 1169.99,-837.74 1160.35,-833.33 1159.71,-840.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge364" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.19,-1147.62C769.67,-1161.97 924.5,-1187.85 1011,-1110.77 1056.42,-1070.29 995.22,-1019.02 1039,-976.77 1041.19,-974.65 1043.49,-972.67 1045.87,-970.81"/>
<polygon fill="blue" stroke="blue" points="1048.08,-973.54 1054.3,-964.96 1044.09,-967.79 1048.08,-973.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge363" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.17,-1139.61C764.07,-1136.86 899.17,-1128.78 1011,-1110.77 1165.97,-1085.81 1237.23,-1134.54 1355,-1030.77 1374.2,-1013.85 1354.79,-992.47 1375,-976.77 1410.66,-949.07 1458,-938.98 1502.32,-936.93"/>
<polygon fill="blue" stroke="blue" points="1502.44,-940.43 1512.32,-936.6 1502.21,-933.43 1502.44,-940.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge362" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.23,-1132.86C771.16,-1115.67 931.38,-1082.95 1011,-1167.77 1067.97,-1228.46 984.77,-2602.62 1039,-2665.77 1053.83,-2683.04 1075.36,-2692 1097.74,-2696.2"/>
<polygon fill="blue" stroke="blue" points="1097.3,-2699.67 1107.72,-2697.76 1098.38,-2692.76 1097.3,-2699.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge361" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.23,-1132.85C771.17,-1115.65 931.42,-1082.91 1011,-1167.77 1040.99,-1199.75 1033.42,-2702.29 1039,-2745.77 1070.45,-2990.67 1158.49,-3277.34 1186.98,-3366.14"/>
<polygon fill="blue" stroke="blue" points="1183.68,-3367.3 1190.08,-3375.75 1190.34,-3365.16 1183.68,-3367.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge360" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 v2().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M708.26,-1132.82C771.27,-1115.57 931.64,-1082.7 1011,-1167.77 1053.69,-1213.54 998.37,-3373.16 1039,-3420.77 1048.03,-3431.35 1059.57,-3438.82 1072.29,-3443.98"/>
<polygon fill="blue" stroke="blue" points="1071.14,-3447.29 1081.74,-3447.35 1073.49,-3440.69 1071.14,-3447.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result(). -->
<g id="node69" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().</title>
<g id="a_node69"><a xlink:title="pub fn session_encrypt_decrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_ad...">
<polygon fill="white" stroke="black" points="798,-3285.77 564,-3285.77 564,-3249.77 798,-3249.77 798,-3285.77"/>
<text text-anchor="middle" x="681" y="-3264.07" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_decrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge170" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M798.3,-3257.23C868.01,-3257.36 953.92,-3269.82 1011,-3320.77 1045.43,-3351.51 1004.73,-3389.85 1039,-3420.77 1048.56,-3429.39 1059.83,-3435.78 1071.88,-3440.44"/>
<polygon fill="blue" stroke="blue" points="1071.1,-3443.88 1081.7,-3443.83 1073.39,-3437.26 1071.1,-3443.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="node197" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<g id="a_node197"><a xlink:title="pub async fn decrypt( &#160;&#160;&#160;&#160;store: &amp;mut InMemSignalProtocolStore, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;msg: &amp;CiphertextMessage, &#160;&#160;&#160;&#160;use_pq_ratchet: UsePQRatchet, ) &#45;&gt; Result&lt;Vec&lt;u8&gt;, SignalProtocol...">
<polygon fill="white" stroke="black" points="1232,-3735.77 1162,-3735.77 1162,-3699.77 1232,-3699.77 1232,-3735.77"/>
<text text-anchor="middle" x="1197" y="-3714.07" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge171" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M798.4,-3253.54C870.2,-3251.76 958.34,-3263.48 1011,-3320.77 1066.8,-3381.48 983.52,-3629.77 1039,-3690.77 1066.86,-3721.4 1115.83,-3725.44 1151.69,-3723.51"/>
<polygon fill="blue" stroke="blue" points="1152.17,-3726.99 1161.9,-3722.79 1151.68,-3720 1152.17,-3726.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="node198" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<g id="a_node198"><a xlink:title="pub fn initialize_sessions_v4() &#45;&gt; Result&lt;(SessionRecord, SessionRecord), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let alice_identity = IdentityKeyPair::generate(&amp;mut csprng...">
<polygon fill="white" stroke="black" points="1279,-3681.77 1115,-3681.77 1115,-3645.77 1279,-3645.77 1279,-3681.77"/>
<text text-anchor="middle" x="1197" y="-3660.07" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_sessions_v4</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge172" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M798.15,-3253.77C869.85,-3252.08 957.97,-3263.82 1011,-3320.77 1059.04,-3372.36 991.23,-3584.92 1039,-3636.77 1055.8,-3655 1080.09,-3663.78 1104.56,-3667.48"/>
<polygon fill="blue" stroke="blue" points="1104.31,-3670.98 1114.66,-3668.74 1105.17,-3664.03 1104.31,-3670.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="node70" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<g id="a_node70"><a xlink:title="pub fn session_encrypt_result(c: &amp;mut Criterion) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let (alice_session_record, bob_session_record) = support::initialize_sessions_v4()?; &#160;&#160;&#160;&#160;&#160;let alice_address = ...">
<polygon fill="white" stroke="black" points="768,-3231.77 594,-3231.77 594,-3195.77 768,-3195.77 768,-3231.77"/>
<text text-anchor="middle" x="681" y="-3210.07" font-family="Helvetica,sans-Serif" font-size="14.00">session_encrypt_result</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge222" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.33,-3206.25C845.51,-3194.52 954.83,-3164.52 1011,-3087.77 1073.97,-3001.72 965.3,-2685.83 1039,-2608.77 1071.89,-2574.38 1857.47,-2554.54 1891,-2520.77 1923.72,-2487.82 1877.3,-2344.72 1911,-2312.77 1986.82,-2240.88 2771.55,-2341.21 2850.5,-2272.77 2954.35,-2182.75 2976.62,-1721.2 2980.69,-1601.27"/>
<polygon fill="blue" stroke="blue" points="2984.19,-1601.17 2981.02,-1591.06 2977.2,-1600.94 2984.19,-1601.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge225" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.04,-3206.36C845.3,-3194.72 954.92,-3164.77 1011,-3087.77 1079,-2994.41 961,-2653.95 1039,-2568.77 1089.94,-2513.14 1300.31,-2531.24 1375,-2520.77 1489.63,-2504.7 1809.93,-2532.39 1891,-2449.77 1943.97,-2395.78 1856.15,-2332.85 1911,-2280.77 1968.33,-2226.33 2542.83,-2245.64 2621,-2233.77 2724.7,-2218.03 2784.22,-2260.06 2850.5,-2178.77 2894.97,-2124.23 2826.66,-1600.41 2871,-1545.77 2885.73,-1527.62 2910.46,-1520.48 2932.8,-1518.05"/>
<polygon fill="blue" stroke="blue" points="2933.16,-1521.53 2942.85,-1517.24 2932.6,-1514.56 2933.16,-1521.53"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge223" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.15,-3199.39C840.73,-3183.32 943.27,-3150.78 1011,-3087.77 1124.65,-2982.05 1174.91,-2792.39 1190.43,-2720.99"/>
<polygon fill="blue" stroke="blue" points="1193.9,-2721.46 1192.55,-2710.95 1187.05,-2720.02 1193.9,-2721.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge221" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.17,-3195.73C833.52,-3183.33 944.28,-3178.71 1011,-3240.77 1070.28,-3295.91 982.21,-3363.06 1039,-3420.77 1048.35,-3430.27 1059.75,-3437.15 1072.09,-3442.06"/>
<polygon fill="blue" stroke="blue" points="1071.1,-3445.43 1081.7,-3445.45 1073.43,-3438.82 1071.1,-3445.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge220" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.44,-3195.72C828.68,-3181.45 945.2,-3173.66 1011,-3240.77 1081.14,-3312.31 972.09,-3616.2 1039,-3690.77 1066.65,-3721.59 1115.66,-3725.59 1151.59,-3723.61"/>
<polygon fill="blue" stroke="blue" points="1152.09,-3727.08 1161.81,-3722.87 1151.58,-3720.1 1152.09,-3727.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge224" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.67,-3195.76C828.84,-3181.63 945.02,-3174.04 1011,-3240.77 1073.03,-3303.5 979.81,-3571.36 1039,-3636.77 1055.72,-3655.24 1080.11,-3664.06 1104.71,-3667.73"/>
<polygon fill="blue" stroke="blue" points="1104.52,-3671.23 1114.87,-3668.96 1105.36,-3664.28 1104.52,-3671.23"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result(). -->
<g id="edge342" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_decrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M315.24,-3267.77C383.95,-3267.77 478.18,-3267.77 553.65,-3267.77"/>
<polygon fill="blue" stroke="blue" points="553.7,-3271.27 563.7,-3267.77 553.7,-3264.27 553.7,-3271.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result(). -->
<g id="edge357" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_encrypt_result().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M285.2,-3213.77C362.35,-3213.77 493.61,-3213.77 583.44,-3213.77"/>
<polygon fill="blue" stroke="blue" points="583.63,-3217.27 593.63,-3213.77 583.63,-3210.27 583.63,-3217.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers(). -->
<g id="node73" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().</title>
<g id="a_node73"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_mismatching_identifiers() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = Ide...">
<polygon fill="white" stroke="black" points="1765,-6239.77 1501,-6239.77 1501,-6203.77 1765,-6203.77 1765,-6239.77"/>
<text text-anchor="middle" x="1633" y="-6218.07" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_mismatching_identifiers</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="node78" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<g id="a_node78"><a xlink:title=" &#160;&#160;&#160;pub fn generate&lt;R: CryptoRng + Rng&gt;(csprng: &amp;mut R) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let keypair = KeyPair::generate(csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;identity_key: keypair.public_key.into(), &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;priv...">
<polygon fill="white" stroke="black" points="2309.5,-5828.77 2230.5,-5828.77 2230.5,-5792.77 2309.5,-5792.77 2309.5,-5828.77"/>
<text text-anchor="middle" x="2270" y="-5807.07" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge7" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.01,-6238.54C1811.01,-6236.99 1859.12,-6225.61 1891,-6191.77 1945.02,-6134.42 1855.81,-5894.01 1911,-5837.77 1991.74,-5755.49 2142.67,-5778.01 2220.23,-5796.84"/>
<polygon fill="blue" stroke="blue" points="2219.67,-5800.31 2230.22,-5799.34 2221.37,-5793.52 2219.67,-5800.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints(). -->
<g id="node74" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().</title>
<g id="a_node74"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_mismatching_fingerprints() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = Id...">
<polygon fill="white" stroke="black" points="1771,-6347.77 1495,-6347.77 1495,-6311.77 1771,-6311.77 1771,-6347.77"/>
<text text-anchor="middle" x="1633" y="-6326.07" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_mismatching_fingerprints</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge137" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_mismatching_fingerprints().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1734.92,-6347.77C1788.92,-6351.2 1852.13,-6344.12 1891,-6302.77 1926.42,-6265.09 1875.03,-5874.92 1911,-5837.77 1991.29,-5754.84 2142.75,-5777.76 2220.41,-5796.79"/>
<polygon fill="blue" stroke="blue" points="2219.85,-5800.26 2230.41,-5799.32 2221.57,-5793.47 2219.85,-5800.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers(). -->
<g id="node75" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().</title>
<g id="a_node75"><a xlink:title=" &#160;&#160;&#160;fn fingerprint_matching_identifiers() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// testMatchingFingerprints &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::rngs::OsRng; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use crate::IdentityKeyPair; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let a_key_pair = IdentityKey...">
<polygon fill="white" stroke="black" points="1752.5,-6293.77 1513.5,-6293.77 1513.5,-6257.77 1752.5,-6257.77 1752.5,-6293.77"/>
<text text-anchor="middle" x="1633" y="-6272.07" font-family="Helvetica,sans-Serif" font-size="14.00">fingerprint_matching_identifiers</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge422" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 fingerprint/test/fingerprint_matching_identifiers().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1736.43,-6293.79C1790.05,-6296.94 1852.4,-6289.6 1891,-6248.77 1922.41,-6215.55 1879.1,-5870.53 1911,-5837.77 1991.52,-5755.07 2142.88,-5777.89 2220.46,-5796.84"/>
<polygon fill="blue" stroke="blue" points="2219.9,-5800.31 2230.45,-5799.36 2221.61,-5793.52 2219.9,-5800.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge64" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1255.68,-2376.74C1287.99,-2375.49 1327.24,-2368.74 1355,-2346.77 1372.8,-2332.68 1358.27,-2315.11 1375,-2299.77 1804.39,-1906.05 2079.35,-2107.25 2621,-1892.77 2652.97,-1880.11 2688.28,-1863.34 2713.71,-1850.74"/>
<polygon fill="blue" stroke="blue" points="2715.55,-1853.73 2722.94,-1846.14 2712.43,-1847.47 2715.55,-1853.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private(). -->
<g id="node116" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().</title>
<g id="a_node116"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn signing_key_private(&amp;self) &#45;&gt; Result&lt;PrivateKey, InvalidSessionError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(ref signing_key) = self.state.sender_signing_key { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;PrivateKey::deserialize(&amp;si...">
<polygon fill="white" stroke="black" points="2347,-3003.77 2193,-3003.77 2193,-2967.77 2347,-2967.77 2347,-3003.77"/>
<text text-anchor="middle" x="2270" y="-2982.07" font-family="Helvetica,sans-Serif" font-size="14.00">signing_key_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private(). -->
<g id="edge63" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1255.74,-2373.45C1392.27,-2376.16 1735.21,-2404.04 1891,-2608.77 1938.18,-2670.77 1856.42,-2903.18 1911,-2958.77 1982.9,-3031.99 2110.38,-3022.2 2192.22,-3005.89"/>
<polygon fill="blue" stroke="blue" points="2193.13,-3009.27 2202.22,-3003.82 2191.71,-3002.42 2193.13,-3009.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge173" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1256.1,-2301.65C1376.9,-2264.59 1664.45,-2179.51 1911,-2130.77 2117.59,-2089.93 2708.19,-2162 2850.5,-2006.77 2885.15,-1968.98 2838.45,-1585.39 2871,-1545.77 2885.84,-1527.71 2910.58,-1520.58 2932.9,-1518.13"/>
<polygon fill="blue" stroke="blue" points="2933.25,-1521.61 2942.93,-1517.31 2932.68,-1514.63 2933.25,-1521.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge31" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2276.12,-5792.46C2312.9,-5659.93 2537.9,-4832.98 2621,-4143.77 2626.64,-4097.03 2621.75,-3335.16 2649,-3296.77 2704.58,-3218.46 2795.73,-3297.65 2850.5,-3218.77 2903.51,-3142.41 2813.15,-1618.53 2871,-1545.77 2885.6,-1527.4 2910.45,-1520.27 2932.89,-1517.9"/>
<polygon fill="blue" stroke="blue" points="2933.28,-1521.38 2942.98,-1517.12 2932.74,-1514.4 2933.28,-1521.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing(). -->
<g id="node79" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().</title>
<g id="a_node79"><a xlink:title=" &#160;&#160;&#160;fn test_alternate_identity_signing() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let primary = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let secondary = IdentityKeyPair::g...">
<polygon fill="white" stroke="black" points="1747,-5936.77 1519,-5936.77 1519,-5900.77 1747,-5900.77 1747,-5936.77"/>
<text text-anchor="middle" x="1633" y="-5915.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_alternate_identity_signing</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge149" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1747.18,-5932.02C1795.95,-5931.81 1850.87,-5922.94 1891,-5891.77 1911.21,-5876.07 1890.56,-5853.17 1911,-5837.77 2002.05,-5769.17 2145.73,-5784.81 2220.37,-5799.34"/>
<polygon fill="blue" stroke="blue" points="2219.93,-5802.82 2230.43,-5801.37 2221.32,-5795.96 2219.93,-5802.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity(). -->
<g id="edge148" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_alternate_identity_signing().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1747.16,-5909.15C1868.47,-5898.83 2058.99,-5882.63 2173.17,-5872.92"/>
<polygon fill="blue" stroke="blue" points="2173.63,-5876.39 2183.3,-5872.06 2173.04,-5869.42 2173.63,-5876.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge214" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2307.76,-5975.23C2377.99,-5977.85 2532.14,-5973.2 2621,-5891.77 3121.72,-5432.96 2966.01,-5105.73 3094,-4438.77 3206.32,-3853.45 3270.19,-1861.95 3278.15,-1601.05"/>
<polygon fill="blue" stroke="blue" points="3281.66,-1600.99 3278.46,-1590.89 3274.66,-1600.77 3281.66,-1600.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from(). -->
<g id="node81" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().</title>
<g id="a_node81"><a xlink:title=" &#160;&#160;&#160;fn test_identity_key_from() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair = KeyPair::generate(&amp;mut OsRng.unwrap_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let key_pair_public_serialized = key_pair.public_key.serialize(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key ...">
<polygon fill="white" stroke="black" points="1719,-5882.77 1547,-5882.77 1547,-5846.77 1719,-5846.77 1719,-5882.77"/>
<text text-anchor="middle" x="1633" y="-5861.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_identity_key_from</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge272" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_identity_key_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1719.05,-5881.84C1776.34,-5887.91 1848.87,-5884.05 1891,-5837.77 1925.24,-5800.16 1877.35,-4044.91 1911,-4006.77 2121.72,-3767.95 2406.78,-4145.44 2621,-3909.77 2672.69,-3852.91 2604.02,-3281.07 2649,-3218.77 2705.03,-3141.17 2795.55,-3221.14 2850.5,-3142.77 2901.44,-3070.12 2815.76,-1615.21 2871,-1545.77 2885.61,-1527.41 2910.45,-1520.27 2932.89,-1517.9"/>
<polygon fill="blue" stroke="blue" points="2933.28,-1521.38 2942.99,-1517.12 2932.75,-1514.4 2933.28,-1521.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge319" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1670.9,-5819.66C1727.73,-5830.89 1835.87,-5842.05 1891,-5780.77 1925.84,-5742.05 1876.11,-3944.45 1911,-3905.77 2123.73,-3669.94 2404.74,-4057.37 2621,-3824.77 2672.94,-3768.9 2607.48,-3202.77 2649,-3138.77 2703.41,-3054.89 2797.25,-3123.39 2850.5,-3038.77 2896.28,-2966.02 2831.63,-1568.18 2871,-1491.77 2883.98,-1466.57 2908.83,-1447.28 2931.67,-1433.85"/>
<polygon fill="blue" stroke="blue" points="2933.63,-1436.77 2940.63,-1428.82 2930.2,-1430.67 2933.63,-1436.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair(). -->
<g id="node83" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().</title>
<g id="a_node83"><a xlink:title=" &#160;&#160;&#160;fn test_serialize_identity_key_pair() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = IdentityKeyPair::generate(&amp;mut OsRng.unwrap_err()); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let serialized = identity_key_pair.serialize(); &#160;&#160;...">
<polygon fill="white" stroke="black" points="1748,-5990.77 1518,-5990.77 1518,-5954.77 1748,-5954.77 1748,-5990.77"/>
<text text-anchor="middle" x="1633" y="-5969.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_serialize_identity_key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge389" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1748.18,-5989.1C1797.89,-5989.72 1853.28,-5980.64 1891,-5945.77 1926.85,-5912.63 1874.67,-5870.38 1911,-5837.77 1996.45,-5761.07 2144.32,-5780.78 2220.51,-5797.86"/>
<polygon fill="blue" stroke="blue" points="2219.8,-5801.29 2230.33,-5800.14 2221.38,-5794.47 2219.8,-5801.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge390" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/tests/test_serialize_identity_key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1748.26,-5972.77C1889.48,-5972.77 2123.25,-5972.77 2222.32,-5972.77"/>
<polygon fill="blue" stroke="blue" points="2222.33,-5976.27 2232.33,-5972.77 2222.33,-5969.27 2222.33,-5976.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message(). -->
<g id="edge421" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]sign_alternate_identity().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature_for_multipart_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2338.5,-5882.82C2418.13,-5899.58 2548.77,-5912.04 2621,-5837.77 2665.21,-5792.31 2635.59,-5329.75 2649,-5267.77 2762.59,-4742.63 2990.49,-4670.99 3094,-4143.77 3107.9,-4072.95 3078.42,-1603.3 3122,-1545.77 3129.1,-1536.4 3138,-1528.86 3147.94,-1522.8"/>
<polygon fill="blue" stroke="blue" points="3149.86,-1525.74 3156.93,-1517.85 3146.48,-1519.61 3149.86,-1525.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize(). -->
<g id="node85" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().</title>
<g id="a_node85"><a xlink:title=" &#160;&#160;&#160;fn test_pre_key_signal_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base...">
<polygon fill="white" stroke="black" points="2452.5,-1688.77 2087.5,-1688.77 2087.5,-1652.77 2452.5,-1652.77 2452.5,-1688.77"/>
<text text-anchor="middle" x="2270" y="-1667.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_pre_key_signal_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge33" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2452.61,-1679.35C2599.79,-1682.35 2792.01,-1675.97 2850.5,-1626.77 2878.92,-1602.86 2844.63,-1571.92 2871,-1545.77 2887.22,-1529.68 2911.34,-1522.62 2932.92,-1519.71"/>
<polygon fill="blue" stroke="blue" points="2933.37,-1523.18 2942.93,-1518.62 2932.61,-1516.23 2933.37,-1523.18"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="node87" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<g id="a_node87"><a xlink:title=" &#160;&#160;&#160;fn create_signal_message&lt;T&gt;(csprng: &amp;mut T) &#45;&gt; Result&lt;SignalMessage&gt; &#160;&#160;&#160;&#160;where &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;T: Rng + CryptoRng, &#160;&#160;&#160;&#160;{ &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut mac_key = [0u8; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;csprng.fill_bytes(&amp;mut mac_key); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2838,-1796.77 2662,-1796.77 2662,-1760.77 2838,-1760.77 2838,-1796.77"/>
<text text-anchor="middle" x="2750" y="-1775.07" font-family="Helvetica,sans-Serif" font-size="14.00">create_signal_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge34" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_pre_key_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2452.82,-1668.09C2507.95,-1671.69 2567.93,-1680.15 2621,-1697.77 2658,-1710.05 2695.07,-1735.27 2719.72,-1754.33"/>
<polygon fill="blue" stroke="blue" points="2717.57,-1757.08 2727.59,-1760.52 2721.9,-1751.59 2717.57,-1757.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message(). -->
<g id="node86" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().</title>
<g id="a_node86"><a xlink:title=" &#160;&#160;&#160;fn test_decryption_error_message() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let base_key_pair = KeyPair:...">
<polygon fill="white" stroke="black" points="2386.5,-1850.77 2153.5,-1850.77 2153.5,-1814.77 2386.5,-1814.77 2386.5,-1850.77"/>
<text text-anchor="middle" x="2270" y="-1829.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge49" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2385.27,-1850.78C2458.47,-1856.23 2552.27,-1851.27 2621,-1805.77 2643.54,-1790.85 2627.97,-1768.76 2649,-1751.77 2721.22,-1693.44 2789.31,-1766.58 2850.5,-1696.77 2895.14,-1645.84 2825.68,-1596.1 2871,-1545.77 2886.4,-1528.67 2910.68,-1521.54 2932.56,-1518.85"/>
<polygon fill="blue" stroke="blue" points="2933.11,-1522.31 2942.73,-1517.88 2932.45,-1515.35 2933.11,-1522.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge50" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2386.89,-1827.64C2455.26,-1823.67 2543.33,-1816.91 2621,-1805.77 2634.08,-1803.89 2647.82,-1801.48 2661.25,-1798.86"/>
<polygon fill="blue" stroke="blue" points="2662.33,-1802.22 2671.45,-1796.83 2660.96,-1795.35 2662.33,-1802.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge51" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_decryption_error_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2386.71,-1832.77C2492.93,-1832.77 2643.89,-1832.77 2712.52,-1832.77"/>
<polygon fill="blue" stroke="blue" points="2712.81,-1836.27 2722.81,-1832.77 2712.81,-1829.27 2712.81,-1836.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge110" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2834.68,-1760.63C2840.64,-1756.84 2846.05,-1752.27 2850.5,-1746.77 2907.01,-1676.98 2812.03,-1613.49 2871,-1545.77 2886.17,-1528.35 2910.55,-1521.21 2932.55,-1518.59"/>
<polygon fill="blue" stroke="blue" points="2933.14,-1522.06 2942.78,-1517.67 2932.51,-1515.08 2933.14,-1522.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge162" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2777.16,-1831.2C2798.8,-1828.7 2829.32,-1822.27 2850.5,-1805.77 2920.05,-1751.59 2958.52,-1649.5 2973.73,-1600.45"/>
<polygon fill="blue" stroke="blue" points="2977.1,-1601.41 2976.63,-1590.83 2970.4,-1599.39 2977.1,-1601.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize(). -->
<g id="node89" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().</title>
<g id="a_node89"><a xlink:title=" &#160;&#160;&#160;fn test_signal_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let message = create_signal_message(&amp;mut csprng)?; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let deser_message = &#160;...">
<polygon fill="white" stroke="black" points="2422.5,-1796.77 2117.5,-1796.77 2117.5,-1760.77 2422.5,-1760.77 2422.5,-1796.77"/>
<text text-anchor="middle" x="2270" y="-1775.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_signal_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message(). -->
<g id="edge241" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_signal_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/create_signal_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2422.57,-1778.77C2497.45,-1778.77 2585.62,-1778.77 2651.43,-1778.77"/>
<polygon fill="blue" stroke="blue" points="2651.8,-1782.27 2661.8,-1778.77 2651.8,-1775.27 2651.8,-1782.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize(). -->
<g id="node90" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().</title>
<g id="a_node90"><a xlink:title=" &#160;&#160;&#160;fn test_sender_key_message_serialize_deserialize() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let signature_key_pair = KeyPair::generate(&amp;mut csprng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_...">
<polygon fill="white" stroke="black" points="2441,-1742.77 2099,-1742.77 2099,-1706.77 2441,-1706.77 2441,-1742.77"/>
<text text-anchor="middle" x="2270" y="-1721.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_message_serialize_deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge308" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2441.37,-1717.72C2601.7,-1709.41 2821.45,-1693.02 2850.5,-1664.77 2888.97,-1627.35 2834.38,-1585.01 2871,-1545.77 2886.7,-1528.94 2911.01,-1521.84 2932.83,-1519.1"/>
<polygon fill="blue" stroke="blue" points="2933.36,-1522.56 2942.97,-1518.1 2932.67,-1515.6 2933.36,-1522.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new(). -->
<g id="edge309" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/tests/test_sender_key_message_serialize_deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 protocol/impl#[SenderKeyMessage]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2385.27,-1706.76C2458.47,-1701.31 2552.27,-1706.27 2621,-1751.77 2643.54,-1766.69 2627.95,-1788.81 2649,-1805.77 2666.97,-1820.24 2692.05,-1826.99 2712.6,-1830.12"/>
<polygon fill="blue" stroke="blue" points="2712.2,-1833.6 2722.57,-1831.42 2713.1,-1826.66 2712.2,-1833.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="node91" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<g id="a_node91"><a xlink:title="pub(crate) fn initialize_bob_session( &#160;&#160;&#160;&#160;parameters: &amp;BobSignalProtocolParameters, ) &#45;&gt; Result&lt;SessionState&gt; { &#160;&#160;&#160;&#160;let local_identity = parameters.our_identity_key_pair().identity_key(); &#160;&#160;&#160;&#160;&#160;let mut...">
<polygon fill="white" stroke="black" points="2832.5,-4054.77 2667.5,-4054.77 2667.5,-4018.77 2832.5,-4018.77 2832.5,-4054.77"/>
<text text-anchor="middle" x="2750" y="-4033.07" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_bob_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge208" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2754.71,-4018.59C2770.22,-3941.65 2829.96,-3635.05 2850.5,-3379.77 2852.72,-3352.13 2853.77,-1405.49 2871,-1383.77 2876.9,-1376.33 2884.49,-1370.73 2892.92,-1366.54"/>
<polygon fill="blue" stroke="blue" points="2894.52,-1369.67 2902.36,-1362.54 2891.78,-1363.22 2894.52,-1369.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record(). -->
<g id="node92" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().</title>
<g id="a_node92"><a xlink:title="pub fn initialize_bob_session_record( &#160;&#160;&#160;&#160;parameters: &amp;BobSignalProtocolParameters, ) &#45;&gt; Result&lt;SessionRecord&gt; { &#160;&#160;&#160;&#160;Ok(SessionRecord::new(initialize_bob_session(parameters)?)) }">
<polygon fill="white" stroke="black" points="2377.5,-4054.77 2162.5,-4054.77 2162.5,-4018.77 2377.5,-4018.77 2377.5,-4054.77"/>
<text text-anchor="middle" x="2270" y="-4033.07" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_bob_session_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="edge218" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2377.68,-4036.77C2461.59,-4036.77 2577.27,-4036.77 2657.11,-4036.77"/>
<polygon fill="blue" stroke="blue" points="2657.15,-4040.27 2667.15,-4036.77 2657.15,-4033.27 2657.15,-4040.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="node93" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<g id="a_node93"><a xlink:title="pub(crate) fn initialize_alice_session&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;parameters: &amp;AliceSignalProtocolParameters, &#160;&#160;&#160;&#160;mut csprng: &amp;mut R, ) &#45;&gt; Result&lt;SessionState&gt; { &#160;&#160;&#160;&#160;let local_identity = parameters.our_...">
<polygon fill="white" stroke="black" points="2835,-4108.77 2665,-4108.77 2665,-4072.77 2835,-4072.77 2835,-4108.77"/>
<text text-anchor="middle" x="2750" y="-4087.07" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_alice_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge280" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2835.09,-4077.38C2840.97,-4073.77 2846.24,-4069.3 2850.5,-4063.77 2895.95,-4004.81 2824.8,-1442.15 2871,-1383.77 2876.89,-1376.32 2884.48,-1370.72 2892.9,-1366.53"/>
<polygon fill="blue" stroke="blue" points="2894.5,-1369.65 2902.33,-1362.52 2891.76,-1363.21 2894.5,-1369.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge278" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2835.09,-4077.37C2840.96,-4073.77 2846.24,-4069.3 2850.5,-4063.77 2893.22,-4008.38 2827.58,-1600.61 2871,-1545.77 2885.56,-1527.37 2910.41,-1520.24 2932.85,-1517.87"/>
<polygon fill="blue" stroke="blue" points="2933.25,-1521.35 2942.95,-1517.1 2932.72,-1514.37 2933.25,-1521.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain(). -->
<g id="node95" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().</title>
<g id="a_node95"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn create_chain( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_ratchet_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_ratchet_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;(RootKey, ChainKey)&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let shared_secret = our_ratche...">
<polygon fill="white" stroke="black" points="3034.5,-4108.77 2930.5,-4108.77 2930.5,-4072.77 3034.5,-4072.77 3034.5,-4108.77"/>
<text text-anchor="middle" x="2982.5" y="-4087.07" font-family="Helvetica,sans-Serif" font-size="14.00">create_chain</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain(). -->
<g id="edge279" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2835.19,-4090.77C2863.35,-4090.77 2894.18,-4090.77 2920.25,-4090.77"/>
<polygon fill="blue" stroke="blue" points="2920.36,-4094.27 2930.36,-4090.77 2920.36,-4087.27 2920.36,-4094.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record(). -->
<g id="node94" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().</title>
<g id="a_node94"><a xlink:title="pub fn initialize_alice_session_record&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;parameters: &amp;AliceSignalProtocolParameters, &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; Result&lt;SessionRecord&gt; { &#160;&#160;&#160;&#160;Ok(SessionRecord::new(initialize_alice_...">
<polygon fill="white" stroke="black" points="2380.5,-4108.77 2159.5,-4108.77 2159.5,-4072.77 2380.5,-4072.77 2380.5,-4108.77"/>
<text text-anchor="middle" x="2270" y="-4087.07" font-family="Helvetica,sans-Serif" font-size="14.00">initialize_alice_session_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="edge325" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2380.66,-4090.77C2463.36,-4090.77 2575.62,-4090.77 2654.4,-4090.77"/>
<polygon fill="blue" stroke="blue" points="2654.8,-4094.27 2664.8,-4090.77 2654.8,-4087.27 2654.8,-4094.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge177" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2976.78,-4072.37C2955.92,-4004.17 2883.93,-3758.99 2860.75,-3550.77 2857.43,-3520.98 2848.39,-1420.07 2860.75,-1392.77 2867.09,-1378.77 2879.01,-1369.72 2892.99,-1363.97"/>
<polygon fill="blue" stroke="blue" points="2894.17,-1367.27 2902.45,-1360.65 2891.85,-1360.67 2894.17,-1367.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication(). -->
<g id="node96" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().</title>
<g id="a_node96"><a xlink:title=" &#160;&#160;&#160;fn test_agreement_and_authentication() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The sender and recipient each have a long&#45;term identity key pair. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_identity = IdentityKeyPair::generate(&amp;mut ran...">
<polygon fill="white" stroke="black" points="1765,-1021.77 1501,-1021.77 1501,-985.77 1765,-985.77 1765,-1021.77"/>
<text text-anchor="middle" x="1633" y="-1000.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement_and_authentication</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge13" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.03,-1007.19C1811.17,-1008.24 1863.38,-1009.25 1911,-1009.77 2068.77,-1011.48 2490.35,-1098.22 2621,-1009.77 2648.75,-990.98 2621.25,-958.55 2649,-939.77 2723.16,-889.56 2785.89,-877.76 2850.5,-939.77 2890.46,-978.12 2844.95,-1388.9 2871,-1437.77 2884.74,-1463.55 2910.73,-1483.23 2934.05,-1496.74"/>
<polygon fill="blue" stroke="blue" points="2932.38,-1499.82 2942.83,-1501.62 2935.78,-1493.7 2932.38,-1499.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge14" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1656.25,-1021.93C1709.33,-1066.87 1842.54,-1189.61 1891,-1326.77 1917.07,-1400.55 1902.46,-4065.98 1911,-4143.77 1985.11,-4818.99 2214.02,-5623.16 2260.65,-5782.54"/>
<polygon fill="blue" stroke="blue" points="2257.4,-5783.89 2263.58,-5792.5 2264.12,-5781.91 2257.4,-5783.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="node103" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<g id="a_node103"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn calculate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chain_key: &amp;[u8; 32], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ctext: &amp;[u8], &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2309,-913.77 2231,-913.77 2231,-877.77 2309,-877.77 2309,-913.77"/>
<text text-anchor="middle" x="2270" y="-892.07" font-family="Helvetica,sans-Serif" font-size="14.00">calculate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge12" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.18,-1016.54C1809.07,-1014.33 1855.75,-1004.15 1891,-976.77 1911.21,-961.07 1890.56,-938.17 1911,-922.77 2002.29,-853.99 2146.48,-869.89 2220.95,-884.45"/>
<polygon fill="blue" stroke="blue" points="2220.49,-887.93 2230.98,-886.49 2221.88,-881.07 2220.49,-887.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="node105" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<g id="a_node105"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn calculate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_public: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let our_pub_key = our_k...">
<polygon fill="white" stroke="black" points="2309,-967.77 2231,-967.77 2231,-931.77 2309,-931.77 2309,-967.77"/>
<text text-anchor="middle" x="2270" y="-946.07" font-family="Helvetica,sans-Serif" font-size="14.00">calculate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge11" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.19,-992.61C1906.75,-980.57 2124.78,-962.03 2220.79,-953.87"/>
<polygon fill="blue" stroke="blue" points="2221.12,-957.35 2230.79,-953.02 2220.53,-950.38 2221.12,-957.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt(). -->
<g id="node97" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().</title>
<g id="a_node97"><a xlink:title="pub async fn sealed_sender_encrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;destination: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;sender_cert: &amp;SenderCertificate, &#160;&#160;&#160;&#160;ptext: &amp;[u8], &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity...">
<polygon fill="white" stroke="black" points="1285,-751.77 1109,-751.77 1109,-715.77 1285,-715.77 1285,-751.77"/>
<text text-anchor="middle" x="1197" y="-730.07" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_encrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge23" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1285.22,-730.63C1310.69,-734.1 1336.6,-742.6 1355,-760.77 1389.74,-795.07 1339.15,-835.63 1375,-868.77 1406.41,-897.81 1450.08,-908.96 1492.52,-911.52"/>
<polygon fill="blue" stroke="blue" points="1492.55,-915.03 1502.69,-911.98 1492.86,-908.04 1492.55,-915.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge25" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1763.2,-882.91C1807.66,-884.91 1855.21,-894.97 1891,-922.77 1911.21,-938.47 1889.99,-962.15 1911,-976.77 1943.37,-999.3 2589,-999.83 2621,-976.77 2652.92,-953.76 2617.08,-915.78 2649,-892.77 2685.33,-866.59 2818.25,-861.71 2850.5,-892.77 2894.15,-934.81 2842.59,-1384.24 2871,-1437.77 2884.69,-1463.57 2910.68,-1483.26 2934.01,-1496.76"/>
<polygon fill="blue" stroke="blue" points="2932.35,-1499.84 2942.79,-1501.63 2935.75,-1493.72 2932.35,-1499.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge26" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1763.27,-895.77C1904.79,-895.77 2124.41,-895.77 2220.84,-895.77"/>
<polygon fill="blue" stroke="blue" points="2220.88,-899.27 2230.88,-895.77 2220.88,-892.27 2220.88,-899.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge27" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1763.24,-908.96C1809.8,-913.55 1862.74,-918.6 1911,-922.77 2021.75,-932.34 2151.94,-941.68 2220.73,-946.47"/>
<polygon fill="blue" stroke="blue" points="2220.61,-949.97 2230.83,-947.17 2221.1,-942.98 2220.61,-949.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl(). -->
<g id="node99" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().</title>
<g id="a_node99"><a xlink:title="async fn sealed_sender_multi_recipient_encrypt_impl&lt; &#160;&#160;&#160;&#160;R: Rng + CryptoRng, &#160;&#160;&#160;&#160;X: IntoIterator&lt;Item = ServiceId&gt;, &gt;( &#160;&#160;&#160;&#160;destinations: &amp;[&amp;ProtocolAddress], &#160;&#160;&#160;&#160;destination_sessions: &amp;[&amp;SessionRecord...">
<polygon fill="white" stroke="black" points="1794,-805.77 1472,-805.77 1472,-769.77 1794,-769.77 1794,-805.77"/>
<text text-anchor="middle" x="1633" y="-784.07" font-family="Helvetica,sans-Serif" font-size="14.00">sealed_sender_multi_recipient_encrypt_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="node106" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<g id="a_node106"><a xlink:title=" &#160;&#160;&#160;pub(super) fn apply_agreement_xor( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;KeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;input: &amp;[u8; MESSAGE_KEY_LEN], &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;[u8; MESSAGE_KEY_...">
<polygon fill="white" stroke="black" points="2352.5,-859.77 2187.5,-859.77 2187.5,-823.77 2352.5,-823.77 2352.5,-859.77"/>
<text text-anchor="middle" x="2270" y="-838.07" font-family="Helvetica,sans-Serif" font-size="14.00">apply_agreement_xor</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge55" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1794.34,-804C1832.55,-807.7 1873.21,-811.5 1911,-814.77 2001.45,-822.59 2104.86,-830.25 2177.2,-835.4"/>
<polygon fill="blue" stroke="blue" points="2176.98,-838.89 2187.2,-836.11 2177.48,-831.91 2176.98,-838.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="node107" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<g id="a_node107"><a xlink:title=" &#160;&#160;&#160;&#160;&#160;&#160;&#160;pub(super) fn derive_e(&amp;self) &#45;&gt; KeyPair { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut r = [0; 32]; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.kdf &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expand(LABEL_R, &amp;mut r) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; valid output length&#39; ); &#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2307.5,-805.77 2232.5,-805.77 2232.5,-769.77 2307.5,-769.77 2307.5,-805.77"/>
<text text-anchor="middle" x="2270" y="-784.07" font-family="Helvetica,sans-Serif" font-size="14.00">derive_e</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="edge57" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1794.24,-787.77C1935.78,-787.77 2133.11,-787.77 2222.14,-787.77"/>
<polygon fill="blue" stroke="blue" points="2222.19,-791.27 2232.19,-787.77 2222.19,-784.27 2222.19,-791.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="node111" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<g id="a_node111"><a xlink:title=" &#160;&#160;&#160;pub(super) fn compute_authentication_tag( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;our_keys: &amp;IdentityKeyPair, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;their_key: &amp;IdentityKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;direction: Direction, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ephemeral_pub_key: &amp;PublicKey, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;encrypte...">
<polygon fill="white" stroke="black" points="2376.5,-751.77 2163.5,-751.77 2163.5,-715.77 2376.5,-715.77 2376.5,-751.77"/>
<text text-anchor="middle" x="2270" y="-730.07" font-family="Helvetica,sans-Serif" font-size="14.00">compute_authentication_tag</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge56" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1794.34,-771.54C1832.55,-767.84 1873.21,-764.04 1911,-760.77 1991.79,-753.79 2082.93,-746.93 2153.03,-741.87"/>
<polygon fill="blue" stroke="blue" points="2153.49,-745.35 2163.21,-741.14 2152.99,-738.36 2153.49,-745.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge62" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.28,-891.74C1259.46,-887.99 1321.32,-887.43 1355,-922.77 1405.35,-975.61 1323.54,-1034.01 1375,-1085.77 1608.07,-1320.23 2622.92,-1035.97 2850.5,-1275.77 2891.92,-1319.42 2832.08,-1499.88 2871,-1545.77 2878.19,-1554.24 2887.56,-1560.3 2897.8,-1564.59"/>
<polygon fill="blue" stroke="blue" points="2896.82,-1567.95 2907.41,-1568.04 2899.19,-1561.37 2896.82,-1567.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge108" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.27,-837.74C1259.45,-833.99 1321.31,-833.44 1355,-868.77 1405.07,-921.27 1323.25,-979.92 1375,-1030.77 1378.67,-1034.38 2846.95,-1183.04 2850.5,-1186.77 2905.62,-1244.62 2819.88,-1484.35 2871,-1545.77 2878.11,-1554.31 2887.43,-1560.4 2897.65,-1564.71"/>
<polygon fill="blue" stroke="blue" points="2896.66,-1568.07 2907.25,-1568.18 2899.04,-1561.49 2896.66,-1568.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge152" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1285.22,-784.63C1310.69,-788.1 1336.6,-796.6 1355,-814.77 1389.74,-849.07 1339.15,-889.63 1375,-922.77 1408.77,-953.99 1456.69,-964.53 1502.03,-965.96"/>
<polygon fill="blue" stroke="blue" points="1502.2,-969.46 1512.26,-966.13 1502.32,-962.46 1502.2,-969.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey(). -->
<g id="edge151" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1108.67,-780.8C1075.1,-783.53 1041.08,-794.31 1025,-823.77 1015.34,-841.45 1015.34,-6609.08 1025,-6626.77 1038.22,-6650.98 1063.54,-6662.58 1090.79,-6667.45"/>
<polygon fill="blue" stroke="blue" points="1090.48,-6670.95 1100.89,-6668.96 1091.51,-6664.02 1090.48,-6670.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal(). -->
<g id="edge150" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1108.67,-780.8C1075.1,-783.53 1041.08,-794.31 1025,-823.77 1015.44,-841.28 1015.44,-6552.26 1025,-6569.77 1038.65,-6594.77 1065.09,-6606.75 1093.23,-6611.87"/>
<polygon fill="blue" stroke="blue" points="1092.82,-6615.35 1103.23,-6613.41 1093.88,-6608.43 1092.82,-6615.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge176" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2309.12,-903.78C2377.65,-915.96 2523.56,-931.62 2621,-868.77 2642.73,-854.75 2626.75,-830.94 2649,-817.77 2687.54,-794.96 2818.21,-786.75 2850.5,-817.77 2891.56,-857.21 2834.95,-1285.7 2871,-1329.77 2876.97,-1337.07 2884.55,-1342.58 2892.94,-1346.72"/>
<polygon fill="blue" stroke="blue" points="2891.75,-1350.02 2902.33,-1350.7 2894.48,-1343.58 2891.75,-1350.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl(). -->
<g id="edge183" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt_impl().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1339.83,-934.71C1345.28,-931.29 1350.37,-927.34 1355,-922.77 1389.74,-888.47 1339.15,-847.91 1375,-814.77 1398.88,-792.69 1429.85,-780.95 1461.98,-775.47"/>
<polygon fill="blue" stroke="blue" points="1462.61,-778.91 1471.98,-773.96 1461.57,-771.99 1462.61,-778.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge219" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2309.22,-958.29C2378.23,-971.38 2525.33,-988.55 2621,-922.77 2644.92,-906.32 2624.47,-879.28 2649,-863.77 2724.69,-815.91 2785.8,-801.85 2850.5,-863.77 2887.94,-899.6 2838.11,-1289.72 2871,-1329.77 2876.98,-1337.05 2884.58,-1342.56 2892.97,-1346.7"/>
<polygon fill="blue" stroke="blue" points="2891.79,-1350 2902.36,-1350.67 2894.51,-1343.55 2891.79,-1350"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement(). -->
<g id="edge307" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2352.69,-836.27C2444.34,-832.05 2584.94,-832.11 2621,-868.77 2692.98,-941.93 2584.16,-1250.22 2649,-1329.77 2652.55,-1334.13 2656.72,-1337.82 2661.32,-1340.95"/>
<polygon fill="blue" stroke="blue" points="2659.59,-1343.99 2669.99,-1346 2663.11,-1337.94 2659.59,-1343.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from(). -->
<g id="edge321" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey][`TryFrom&lt;&amp;[u8]&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2307.55,-785.55C2428.12,-778.57 2807.91,-759.44 2850.5,-792.77 2928.48,-853.79 2968.29,-1176.73 2978.69,-1274.62"/>
<polygon fill="blue" stroke="blue" points="2975.22,-1275.07 2979.74,-1284.66 2982.18,-1274.35 2975.22,-1275.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from(). -->
<g id="edge320" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair][`TryFrom&lt;PrivateKey&gt;`]try_from().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2307.61,-785.02C2388.15,-779.82 2577.05,-772.55 2621,-814.77 2659.4,-851.66 2635.89,-1001.16 2649,-1052.77 2670.34,-1136.77 2713.22,-1230.22 2735.25,-1275.38"/>
<polygon fill="blue" stroke="blue" points="2732.19,-1277.09 2739.74,-1284.52 2738.47,-1274 2732.19,-1277.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate(). -->
<g id="edge375" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[StaticKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1753.59,-937.54C1802.38,-932.69 1859.37,-927.23 1911,-922.77 2021.75,-913.2 2151.94,-903.86 2220.73,-899.07"/>
<polygon fill="blue" stroke="blue" points="2221.1,-902.56 2230.83,-898.37 2220.61,-895.57 2221.1,-902.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate(). -->
<g id="edge374" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v1/impl#[EphemeralKeys]calculate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1753.81,-949.77C1894.6,-949.77 2121.53,-949.77 2220.38,-949.77"/>
<polygon fill="blue" stroke="blue" points="2220.66,-953.27 2230.66,-949.77 2220.66,-946.27 2220.66,-953.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge376" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1753.68,-962.94C1800.78,-961.98 1852.65,-952.56 1891,-922.77 1911.21,-907.07 1890.56,-884.17 1911,-868.77 1986.63,-811.79 2098.58,-812.93 2177.11,-823.28"/>
<polygon fill="blue" stroke="blue" points="2177.09,-826.81 2187.48,-824.72 2178.05,-819.87 2177.09,-826.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="edge377" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1753.74,-966.13C1801.98,-966.01 1854.68,-956.35 1891,-922.77 1926.85,-889.63 1874.67,-847.38 1911,-814.77 1955.68,-774.66 2135.89,-779.63 2222.31,-784.55"/>
<polygon fill="blue" stroke="blue" points="2222.18,-788.04 2232.37,-785.14 2222.6,-781.06 2222.18,-788.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge378" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1753.75,-967.18C1802.43,-967.37 1855.47,-957.66 1891,-922.77 1942.76,-871.94 1858.5,-810.83 1911,-760.77 1984,-691.16 2107.77,-698.77 2188.94,-713.78"/>
<polygon fill="blue" stroke="blue" points="2188.64,-717.29 2199.12,-715.75 2189.96,-710.42 2188.64,-717.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication(). -->
<g id="node109" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().</title>
<g id="a_node109"><a xlink:title=" &#160;&#160;&#160;fn test_agreement_and_authentication() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// The sender and recipient each have a long&#45;term identity key pair. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_identity = IdentityKeyPair::generate(&amp;mut ran...">
<polygon fill="white" stroke="black" points="1765,-859.77 1501,-859.77 1501,-823.77 1765,-823.77 1765,-859.77"/>
<text text-anchor="middle" x="1633" y="-838.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_agreement_and_authentication</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge424" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1728.49,-823.75C1784.15,-819.08 1851.24,-824.88 1891,-868.77 1921.54,-902.48 1906.06,-4098.55 1911,-4143.77 1984.78,-4819.02 2213.95,-5623.16 2260.64,-5782.54"/>
<polygon fill="blue" stroke="blue" points="2257.39,-5783.89 2263.57,-5792.5 2264.11,-5781.92 2257.39,-5783.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor(). -->
<g id="edge426" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/apply_agreement_xor().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.19,-841.77C1888.15,-841.77 2068.8,-841.77 2177.07,-841.77"/>
<polygon fill="blue" stroke="blue" points="2177.32,-845.27 2187.32,-841.77 2177.32,-838.27 2177.32,-845.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e(). -->
<g id="edge425" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/impl#[DerivedKeys]derive_e().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.34,-828.37C1811.38,-823.83 1863.46,-818.88 1911,-814.77 2022.63,-805.12 2154.02,-795.71 2222.37,-790.96"/>
<polygon fill="blue" stroke="blue" points="2222.65,-794.45 2232.39,-790.26 2222.17,-787.46 2222.65,-794.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag(). -->
<g id="edge423" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/test_agreement_and_authentication().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1765.18,-854.54C1809.07,-852.33 1855.75,-842.15 1891,-814.77 1911.21,-799.07 1890.56,-776.17 1911,-760.77 1984.49,-705.4 2092.27,-704.91 2170.35,-714.42"/>
<polygon fill="blue" stroke="blue" points="2170.32,-717.94 2180.68,-715.76 2171.22,-711 2170.32,-717.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip(). -->
<g id="node110" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().</title>
<g id="a_node110"><a xlink:title="fn test_lossless_round_trip() &#45;&gt; Result&lt;()&gt; { &#160;&#160;&#160;&#160;let trust_root = PrivateKey::deserialize(&amp;[0u8; 32])?; &#160;&#160;&#160;&#160;&#160;// To test a hypothetical addition of a new field: &#160;&#160;&#160;&#160;// &#160;&#160;&#160;&#160;// Step 1: temporarily add a...">
<polygon fill="white" stroke="black" points="1288,-1021.77 1106,-1021.77 1106,-985.77 1288,-985.77 1288,-1021.77"/>
<text text-anchor="middle" x="1197" y="-1000.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_lossless_round_trip</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge441" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1203.41,-1021.79C1223.61,-1088.47 1297.4,-1327.22 1375,-1517.77 1577.3,-2014.55 1761.35,-2088.29 1891,-2608.77 1902.56,-2655.18 1877.11,-3005.02 1911,-3038.77 1966.95,-3094.48 2564.02,-3014.1 2621,-3068.77 2674.75,-3120.33 2594.18,-3352.35 2649,-3402.77 2714.92,-3463.39 2767.07,-3435.31 2850.5,-3402.77 2987.5,-3349.34 3027.29,-3309.81 3094,-3178.77 3242.64,-2886.8 3274.03,-1791.64 3278.41,-1601.12"/>
<polygon fill="blue" stroke="blue" points="3281.91,-1601.13 3278.63,-1591.06 3274.91,-1600.98 3281.91,-1601.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key(). -->
<g id="edge442" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/test_lossless_round_trip().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1227.34,-1021.91C1261.4,-1041.85 1319.95,-1072.79 1375,-1085.77 1534.64,-1123.4 2731.6,-1015.79 2850.5,-1128.77 2891.71,-1167.93 2834.13,-1340.5 2871,-1383.77 2884.98,-1400.18 2907.12,-1407.5 2927.93,-1410.5"/>
<polygon fill="blue" stroke="blue" points="2927.66,-1414 2937.99,-1411.65 2928.45,-1407.04 2927.66,-1414"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement(). -->
<g id="edge472" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_v2/compute_authentication_tag().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_agreement().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2338.09,-715.76C2460.77,-687.38 2720.6,-649.13 2850.5,-792.77 2890.55,-837.06 2833.24,-1283.52 2871,-1329.77 2876.96,-1337.07 2884.54,-1342.59 2892.93,-1346.73"/>
<polygon fill="blue" stroke="blue" points="2891.74,-1350.03 2902.31,-1350.71 2894.47,-1343.59 2891.74,-1350.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data(). -->
<g id="node112" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().</title>
<g id="a_node112"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key = (random_...">
<polygon fill="white" stroke="black" points="2586,-2949.77 1954,-2949.77 1954,-2913.77 2586,-2913.77 2586,-2949.77"/>
<text text-anchor="middle" x="2270" y="-2928.07" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="node113" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<g id="a_node113"><a xlink:title=" &#160;&#160;&#160;fn random_public_key() &#45;&gt; PublicKey { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;KeyPair::generate(&amp;mut OsRng.unwrap_err()).public_key &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2825,-2787.77 2675,-2787.77 2675,-2751.77 2825,-2751.77 2825,-2787.77"/>
<text text-anchor="middle" x="2750" y="-2766.07" font-family="Helvetica,sans-Serif" font-size="14.00">random_public_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge15" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_keeps_first_data().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2586.43,-2918.75C2598.29,-2914.71 2609.86,-2910.08 2621,-2904.77 2670.84,-2881.03 2711.19,-2828.81 2732.5,-2796.72"/>
<polygon fill="blue" stroke="blue" points="2735.49,-2798.54 2738,-2788.24 2729.62,-2794.73 2735.49,-2798.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge53" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2762.7,-2751.54C2784.91,-2715.74 2832.6,-2633 2850.5,-2555.77 2863.17,-2501.1 2835.9,-1589.56 2871,-1545.77 2885.62,-1527.53 2910.35,-1520.39 2932.71,-1517.97"/>
<polygon fill="blue" stroke="blue" points="2933.07,-1521.46 2942.77,-1517.18 2932.52,-1514.48 2933.07,-1521.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected(). -->
<g id="node114" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().</title>
<g id="a_node114"><a xlink:title=" &#160;&#160;&#160;fn when_exceed_maximum_states_then_oldest_is_ejected() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_eq!( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;consts::MAX_SENDER_KEY_STATES, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#39; Test written to expect this limit&#39; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;); ...">
<polygon fill="white" stroke="black" points="2469,-2895.77 2071,-2895.77 2071,-2859.77 2469,-2859.77 2469,-2895.77"/>
<text text-anchor="middle" x="2270" y="-2874.07" font-family="Helvetica,sans-Serif" font-size="14.00">when_exceed_maximum_states_then_oldest_is_ejected</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge119" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_exceed_maximum_states_then_oldest_is_ejected().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2469.17,-2879.25C2519.65,-2875.1 2573.14,-2866.66 2621,-2850.77 2658,-2838.48 2695.07,-2813.27 2719.72,-2794.21"/>
<polygon fill="blue" stroke="blue" points="2721.9,-2796.95 2727.59,-2788.01 2717.57,-2791.45 2721.9,-2796.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state(). -->
<g id="node115" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().</title>
<g id="a_node115"><a xlink:title=" &#160;&#160;&#160;fn add_second_state() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_1 = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_2 = 2; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key_1 = (random_public_key(), chain_id_1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="2340,-2841.77 2200,-2841.77 2200,-2805.77 2340,-2805.77 2340,-2841.77"/>
<text text-anchor="middle" x="2270" y="-2820.07" font-family="Helvetica,sans-Serif" font-size="14.00">add_second_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge240" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_second_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2340.03,-2821.11C2410.83,-2817.76 2524.02,-2810.68 2621,-2796.77 2635.25,-2794.73 2650.29,-2792.04 2664.85,-2789.15"/>
<polygon fill="blue" stroke="blue" points="2665.73,-2792.55 2674.84,-2787.13 2664.34,-2785.69 2665.73,-2792.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge274" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/impl#[SenderKeyState]signing_key_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2347.1,-2972.88C2427.54,-2964.07 2552.1,-2964.99 2621,-3038.77 2672.89,-3094.34 2593.08,-3328.25 2649,-3379.77 2681.93,-3410.11 2811.65,-3402.04 2850.5,-3379.77 3036.35,-3273.21 3024.4,-3166.38 3094,-2963.77 3274.11,-2439.47 3280.2,-1748.2 3279.33,-1601.05"/>
<polygon fill="blue" stroke="blue" points="3282.83,-1601.01 3279.25,-1591.04 3275.83,-1601.07 3282.83,-1601.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced(). -->
<g id="node117" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().</title>
<g id="a_node117"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let record_key_1 =...">
<polygon fill="white" stroke="black" points="2608.5,-2787.77 1931.5,-2787.77 1931.5,-2751.77 2608.5,-2751.77 2608.5,-2787.77"/>
<text text-anchor="middle" x="2270" y="-2766.07" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge349" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_different_public_key_but_same_chain_id_added_then_it_gets_replaced().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2608.81,-2769.77C2628.69,-2769.77 2647.47,-2769.77 2664.42,-2769.77"/>
<polygon fill="blue" stroke="blue" points="2664.74,-2773.27 2674.74,-2769.77 2664.74,-2766.27 2664.74,-2773.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent(). -->
<g id="node118" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().</title>
<g id="a_node118"><a xlink:title=" &#160;&#160;&#160;fn when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_1 = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id_2 =...">
<polygon fill="white" stroke="black" points="2621,-2733.77 1919,-2733.77 1919,-2697.77 2621,-2697.77 2621,-2733.77"/>
<text text-anchor="middle" x="2270" y="-2712.07" font-family="Helvetica,sans-Serif" font-size="14.00">when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge405" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/when_second_state_with_same_public_key_and_chain_id_added_then_it_becomes_the_most_recent().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2548.39,-2733.81C2572.99,-2736.42 2597.47,-2739.4 2621,-2742.77 2635.25,-2744.81 2650.29,-2747.5 2664.85,-2750.38"/>
<polygon fill="blue" stroke="blue" points="2664.34,-2753.85 2674.84,-2752.41 2665.73,-2746.99 2664.34,-2753.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state(). -->
<g id="node119" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().</title>
<g id="a_node119"><a xlink:title=" &#160;&#160;&#160;fn add_single_state() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut context = TestContext::new(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let public_key = random_public_key(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_id = 1; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let chain_key = chain_key(1); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let rec...">
<polygon fill="white" stroke="black" points="2336,-2679.77 2204,-2679.77 2204,-2643.77 2336,-2643.77 2336,-2679.77"/>
<text text-anchor="middle" x="2270" y="-2658.07" font-family="Helvetica,sans-Serif" font-size="14.00">add_single_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key(). -->
<g id="edge464" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/add_single_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sender_keys/sender_key_record_add_sender_key_state_tests/random_public_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2336.06,-2657.57C2407.75,-2655.02 2525.57,-2657.08 2621,-2688.77 2658,-2701.05 2695.07,-2726.27 2719.72,-2745.33"/>
<polygon fill="blue" stroke="blue" points="2717.57,-2748.08 2727.59,-2751.52 2721.9,-2742.59 2717.57,-2748.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl(). -->
<g id="node120" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().</title>
<g id="a_node120"><a xlink:title="async fn process_prekey_impl( &#160;&#160;&#160;&#160;message: &amp;PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;signed_prekey_store: &amp;dyn SignedPreKeyStore, &#160;&#160;&#160;&#160;kybe...">
<polygon fill="white" stroke="black" points="1713,-2656.77 1553,-2656.77 1553,-2620.77 1713,-2620.77 1713,-2656.77"/>
<text text-anchor="middle" x="1633" y="-2635.07" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey_impl</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session(). -->
<g id="edge3" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1644.27,-2656.84C1682.03,-2723.91 1814.85,-2965.62 1891,-3178.77 1903.48,-3213.69 1883.07,-3235.38 1911,-3259.77 2150.08,-3468.48 2391.85,-3116.21 2621,-3335.77 2651.18,-3364.69 2641.9,-3480.58 2649,-3521.77 2681.12,-3708.22 2726.96,-3931.18 2743.1,-4008.63"/>
<polygon fill="blue" stroke="blue" points="2739.71,-4009.5 2745.18,-4018.58 2746.56,-4008.07 2739.71,-4009.5"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair(). -->
<g id="node130" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().</title>
<g id="a_node130"><a xlink:title=" &#160;&#160;&#160;pub fn key_pair(&amp;self) &#45;&gt; Result&lt;KeyPair&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(KeyPair::from_public_and_private( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.pre_key.public_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&amp;self.pre_key.private_key, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2307,-2414.77 2233,-2414.77 2233,-2378.77 2307,-2378.77 2307,-2414.77"/>
<text text-anchor="middle" x="2270" y="-2393.07" font-family="Helvetica,sans-Serif" font-size="14.00">key_pair</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair(). -->
<g id="edge4" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1713.13,-2651.72C1770.4,-2656.24 1845.44,-2651.34 1891,-2605.77 1940.42,-2556.34 1862.06,-2499.68 1911,-2449.77 1993.14,-2366.01 2145.91,-2376.24 2222.58,-2387.91"/>
<polygon fill="blue" stroke="blue" points="2222.45,-2391.43 2232.88,-2389.56 2223.56,-2384.52 2222.45,-2391.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge169" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1250.84,-2710.88C1379.49,-2751.25 1711.54,-2832.59 1891,-2665.77 1949.31,-2611.57 1853.09,-2542.39 1911,-2487.77 1968.47,-2433.56 2550.98,-2486.36 2621,-2449.77 2638.96,-2440.38 2634.31,-2427.74 2649,-2413.77 2728.22,-2338.46 2798.65,-2368.99 2850.5,-2272.77 2888.83,-2201.63 2820.21,-1608.62 2871,-1545.77 2885.69,-1527.59 2910.42,-1520.45 2932.77,-1518.02"/>
<polygon fill="blue" stroke="blue" points="2933.13,-1521.51 2942.82,-1517.22 2932.57,-1514.53 2933.13,-1521.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session(). -->
<g id="edge168" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1211.42,-2710.99C1276.44,-2797.66 1569.67,-3169.86 1911,-3311.77 2057.08,-3372.5 2511,-3250.07 2621,-3363.77 2675.12,-3419.71 2600.45,-4002.93 2649,-4063.77 2651.26,-4066.6 2653.77,-4069.14 2656.5,-4071.44"/>
<polygon fill="blue" stroke="blue" points="2654.51,-4074.32 2664.69,-4077.27 2658.57,-4068.62 2654.51,-4074.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey(). -->
<g id="node122" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().</title>
<g id="a_node122"><a xlink:title="pub async fn process_prekey&lt;&#39;a&gt;( &#160;&#160;&#160;&#160;message: &amp;&#39;a PreKeySignalMessage, &#160;&#160;&#160;&#160;remote_address: &amp;&#39;a ProtocolAddress, &#160;&#160;&#160;&#160;session_record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;identity_store: &amp;dyn IdentityKeyStore, &#160;&#160;&#160;&#160;p...">
<polygon fill="white" stroke="black" points="1258.5,-2656.77 1135.5,-2656.77 1135.5,-2620.77 1258.5,-2620.77 1258.5,-2656.77"/>
<text text-anchor="middle" x="1197" y="-2635.07" font-family="Helvetica,sans-Serif" font-size="14.00">process_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl(). -->
<g id="edge322" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_impl().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1258.8,-2638.77C1332.67,-2638.77 1457.9,-2638.77 1542.72,-2638.77"/>
<polygon fill="blue" stroke="blue" points="1542.85,-2642.27 1552.85,-2638.77 1542.85,-2635.27 1542.85,-2642.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key(). -->
<g id="node123" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().</title>
<g id="a_node123"><a xlink:title="fn get_or_create_chain_key&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;state: &amp;mut SessionState, &#160;&#160;&#160;&#160;their_ephemeral: &amp;PublicKey, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;csprng: &amp;mut R, ) &#45;&gt; Result&lt;ChainKey&gt; { &#160;&#160;&#160;&#160;if ...">
<polygon fill="white" stroke="black" points="2842.5,-6626.77 2657.5,-6626.77 2657.5,-6590.77 2842.5,-6590.77 2842.5,-6626.77"/>
<text text-anchor="middle" x="2750" y="-6605.07" font-family="Helvetica,sans-Serif" font-size="14.00">get_or_create_chain_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge103" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2751.96,-6590.63C2760.63,-6425.53 2825.84,-5166.04 2850.5,-4143.77 2851.37,-4107.7 2848.61,-1574.06 2871,-1545.77 2885.56,-1527.37 2910.41,-1520.24 2932.85,-1517.87"/>
<polygon fill="blue" stroke="blue" points="2933.25,-1521.35 2942.95,-1517.1 2932.71,-1514.37 2933.25,-1521.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain(). -->
<g id="edge104" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/keys/impl#[RootKey]create_chain().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2752.66,-6590.65C2772.03,-6379.07 2954.98,-4380.52 2978.92,-4118.96"/>
<polygon fill="blue" stroke="blue" points="2982.43,-4119.05 2979.85,-4108.77 2975.46,-4118.41 2982.43,-4119.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key(). -->
<g id="node132" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().</title>
<g id="a_node132"><a xlink:title=" &#160;&#160;&#160;pub(crate) fn sender_ratchet_private_key(&amp;self) &#45;&gt; Result&lt;PrivateKey, InvalidSessionError&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;match self.session.sender_chain { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;None =&gt; Err(InvalidSessionError(&#39; missing sender ...">
<polygon fill="white" stroke="black" points="3086,-6084.77 2879,-6084.77 2879,-6048.77 3086,-6048.77 3086,-6084.77"/>
<text text-anchor="middle" x="2982.5" y="-6063.07" font-family="Helvetica,sans-Serif" font-size="14.00">sender_ratchet_private_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key(). -->
<g id="edge105" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2758.67,-6590.74C2792.54,-6511.08 2928.89,-6190.48 2969.82,-6094.23"/>
<polygon fill="blue" stroke="blue" points="2973.11,-6095.44 2973.8,-6084.87 2966.67,-6092.7 2973.11,-6095.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record(). -->
<g id="node124" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().</title>
<g id="a_node124"><a xlink:title="fn decrypt_message_with_record&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;record: &amp;mut SessionRecord, &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, &#160;&#160;&#160;&#160;original_message_type: CiphertextMessageTy...">
<polygon fill="white" stroke="black" points="1745.5,-6626.77 1520.5,-6626.77 1520.5,-6590.77 1745.5,-6590.77 1745.5,-6626.77"/>
<text text-anchor="middle" x="1633" y="-6605.07" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_message_with_record</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state(). -->
<g id="node126" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().</title>
<g id="a_node126"><a xlink:title="fn decrypt_message_with_state&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;current_or_previous: CurrentOrPrevious, &#160;&#160;&#160;&#160;state: &amp;mut SessionState, &#160;&#160;&#160;&#160;ciphertext: &amp;SignalMessage, &#160;&#160;&#160;&#160;original_message_type: CiphertextMessag...">
<polygon fill="white" stroke="black" points="2378,-6626.77 2162,-6626.77 2162,-6590.77 2378,-6590.77 2378,-6626.77"/>
<text text-anchor="middle" x="2270" y="-6605.07" font-family="Helvetica,sans-Serif" font-size="14.00">decrypt_message_with_state</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state(). -->
<g id="edge106" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1745.7,-6608.77C1859.61,-6608.77 2035.62,-6608.77 2151.56,-6608.77"/>
<polygon fill="blue" stroke="blue" points="2151.89,-6612.27 2161.89,-6608.77 2151.89,-6605.27 2151.89,-6612.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt(). -->
<g id="node125" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().</title>
<g id="a_node125"><a xlink:title="pub async fn message_decrypt&lt;R: Rng + CryptoRng&gt;( &#160;&#160;&#160;&#160;ciphertext: &amp;CiphertextMessage, &#160;&#160;&#160;&#160;remote_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;session_store: &amp;mut dyn SessionStore, &#160;&#160;&#160;&#160;identity_store: &amp;mut dyn Ident...">
<polygon fill="white" stroke="black" points="750.5,-6626.77 611.5,-6626.77 611.5,-6590.77 750.5,-6590.77 750.5,-6626.77"/>
<text text-anchor="middle" x="681" y="-6605.07" font-family="Helvetica,sans-Serif" font-size="14.00">message_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey(). -->
<g id="edge117" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.52,-6615.97C837.68,-6625.12 989.07,-6641.03 1090.88,-6651.73"/>
<polygon fill="blue" stroke="blue" points="1090.57,-6655.21 1100.88,-6652.78 1091.3,-6648.25 1090.57,-6655.21"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal(). -->
<g id="edge118" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.52,-6608.77C838.25,-6608.77 991.06,-6608.77 1092.88,-6608.77"/>
<polygon fill="blue" stroke="blue" points="1093.18,-6612.27 1103.18,-6608.77 1093.18,-6605.27 1093.18,-6612.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key(). -->
<g id="edge285" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_state().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/get_or_create_chain_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2378.27,-6608.77C2458.62,-6608.77 2567.85,-6608.77 2646.91,-6608.77"/>
<polygon fill="blue" stroke="blue" points="2647.37,-6612.27 2657.37,-6608.77 2647.37,-6605.27 2647.37,-6612.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey(). -->
<g id="edge291" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1100.89,-6668.96C1069.95,-6665.23 1039.84,-6653.95 1025,-6626.77 1011.85,-6602.68 1011.85,-2698.86 1025,-2674.77 1043.72,-2640.48 1086.75,-2631.49 1125.09,-2631.06"/>
<polygon fill="blue" stroke="blue" points="1125.2,-2634.56 1135.23,-2631.14 1125.26,-2627.56 1125.2,-2634.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record(). -->
<g id="edge290" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1293.24,-6650.92C1357.1,-6642.97 1441.75,-6632.44 1510.46,-6623.89"/>
<polygon fill="blue" stroke="blue" points="1510.99,-6627.35 1520.48,-6622.65 1510.12,-6620.41 1510.99,-6627.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record(). -->
<g id="edge368" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt_signal().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/decrypt_message_with_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1290.57,-6608.77C1354.64,-6608.77 1440.56,-6608.77 1510.18,-6608.77"/>
<polygon fill="blue" stroke="blue" points="1510.32,-6612.27 1520.32,-6608.77 1510.32,-6605.27 1510.32,-6612.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate(). -->
<g id="node129" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().</title>
<g id="a_node129"><a xlink:title=" &#160;&#160;&#160;pub fn generate( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;kyber_key_type: kem::KeyType, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;id: KyberPreKeyId, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;signing_key: &amp;PrivateKey, &#160;&#160;&#160;&#160;) &#45;&gt; Result&lt;KyberPreKeyRecord&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = rand::rngs::OsRng.unw...">
<polygon fill="white" stroke="black" points="2789.5,-360.77 2710.5,-360.77 2710.5,-324.77 2789.5,-324.77 2789.5,-360.77"/>
<text text-anchor="middle" x="2750" y="-339.07" font-family="Helvetica,sans-Serif" font-size="14.00">generate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge242" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/kyber_prekey/impl#[KyberPreKeyRecord]generate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2786.36,-360.92C2809.19,-374.75 2837.05,-396.13 2850.5,-423.77 2877.78,-479.83 2832.06,-1497.09 2871,-1545.77 2878.04,-1554.57 2887.42,-1560.78 2897.76,-1565.13"/>
<polygon fill="blue" stroke="blue" points="2896.89,-1568.54 2907.49,-1568.62 2899.26,-1561.95 2896.89,-1568.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private(). -->
<g id="edge65" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]key_pair().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2307.11,-2407.49C2378.66,-2426.25 2538.6,-2455.41 2621,-2369.77 2677.2,-2311.36 2609.71,-1711.67 2649,-1640.77 2659.63,-1621.59 2678.22,-1606.75 2696.51,-1595.89"/>
<polygon fill="blue" stroke="blue" points="2698.43,-1598.83 2705.43,-1590.88 2695,-1592.73 2698.43,-1598.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge185" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/prekey/impl#[PreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2318,-2329.89C2392.96,-2312.51 2539.41,-2291.96 2621,-2369.77 2693.6,-2439.01 2573.78,-2527.37 2649,-2593.77 2682.57,-2623.4 2813.21,-2618.56 2850.5,-2593.77 3212.5,-2353.11 3269.31,-1740.99 3277.65,-1601.4"/>
<polygon fill="blue" stroke="blue" points="3281.16,-1601.3 3278.22,-1591.12 3274.17,-1600.91 3281.16,-1601.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge175" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/session/impl#[SessionState]sender_ratchet_private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2986.74,-6048.63C3001.72,-5963.88 3064.87,-5598.28 3094,-5295.77 3241.92,-3759.71 3274.79,-1855.05 3278.6,-1601.19"/>
<polygon fill="blue" stroke="blue" points="3282.1,-1601.02 3278.75,-1590.97 3275.1,-1600.92 3282.1,-1601.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private(). -->
<g id="node133" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private().</title>
<g id="a_node133"><a xlink:title=" &#160;&#160;&#160;fn from_public_and_private(public_key: &amp;[u8], private_key: &amp;[u8]) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(KeyPair::from_public_and_private(public_key, private_key)?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2363,-3116.77 2177,-3116.77 2177,-3080.77 2363,-3080.77 2363,-3116.77"/>
<text text-anchor="middle" x="2270" y="-3095.07" font-family="Helvetica,sans-Serif" font-size="14.00">from_public_and_private</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private(). -->
<g id="edge158" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[KeyPair][KeyPairSerde]from_public_and_private().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]from_public_and_private().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2363.13,-3112C2444.26,-3117.88 2558.88,-3110.97 2621,-3038.77 2671.67,-2979.88 2611.97,-1709.06 2649,-1640.77 2659.45,-1621.5 2678.01,-1606.63 2696.33,-1595.79"/>
<polygon fill="blue" stroke="blue" points="2698.25,-1598.73 2705.26,-1590.79 2694.83,-1592.62 2698.25,-1598.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize(). -->
<g id="node134" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize().</title>
<g id="a_node134"><a xlink:title=" &#160;&#160;&#160;fn deserialize&lt;T: AsRef&lt;[u8]&gt;&gt;(bytes: T) &#45;&gt; Result&lt;Self&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Ok(Self::deserialize(bytes.as_ref())?) &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="2315.5,-3224.77 2224.5,-3224.77 2224.5,-3188.77 2315.5,-3188.77 2315.5,-3224.77"/>
<text text-anchor="middle" x="2270" y="-3203.07" font-family="Helvetica,sans-Serif" font-size="14.00">deserialize</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge186" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[PrivateKey][KeySerde]deserialize().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2315.73,-3198.41C2390.46,-3187.3 2540.4,-3177.63 2621,-3259.77 2687.56,-3327.61 2577.53,-3409.12 2649,-3471.77 2723.36,-3536.96 3020.76,-3538.22 3094,-3471.77 3239.2,-3340.03 3274.06,-1827.84 3278.48,-1601.14"/>
<polygon fill="blue" stroke="blue" points="3281.98,-1601.11 3278.68,-1591.05 3274.98,-1600.98 3281.98,-1601.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize(). -->
<g id="edge471" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 state/signed_prekey/impl#[SignedPreKeyRecord]private_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]deserialize().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2318.16,-3149.32C2403.61,-3144.17 2579.11,-3139.03 2621,-3179.77 2663.61,-3221.21 2604.83,-3406 2649,-3445.77 2685.75,-3478.85 3057.36,-3478.97 3094,-3445.77 3237.24,-3315.98 3273.74,-1825.84 3278.44,-1601.09"/>
<polygon fill="blue" stroke="blue" points="3281.95,-1600.87 3278.65,-1590.8 3274.95,-1600.72 3281.95,-1600.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit(). -->
<g id="node136" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().</title>
<g id="a_node136"><a xlink:title="fn group_message_key_limit() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111...">
<polygon fill="white" stroke="black" points="778,-2944.77 584,-2944.77 584,-2908.77 778,-2908.77 778,-2944.77"/>
<text text-anchor="middle" x="681" y="-2923.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_message_key_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge9" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M778.13,-2932.1C863.45,-2934.56 979.35,-2931.54 1011,-2899.77 1067.47,-2843.07 1006.65,-2613.96 1039,-2540.77 1065.92,-2479.86 1124.73,-2427.22 1162.24,-2398.07"/>
<polygon fill="blue" stroke="blue" points="1164.54,-2400.72 1170.36,-2391.86 1160.29,-2395.15 1164.54,-2400.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge10" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M778.32,-2932.3C863.78,-2934.89 979.79,-2931.97 1011,-2899.77 1053.82,-2855.59 998.18,-2392.8 1039,-2346.77 1039.53,-2346.17 1040.07,-2345.58 1040.62,-2345"/>
<polygon fill="blue" stroke="blue" points="1043.23,-2347.35 1048.19,-2337.99 1038.47,-2342.22 1043.23,-2347.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge8" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_message_key_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M778.26,-2921.31C863.67,-2918.76 979.64,-2921.71 1011,-2953.77 1083.7,-3028.09 969.66,-3343.31 1039,-3420.77 1048.11,-3430.95 1059.56,-3438.21 1072.09,-3443.29"/>
<polygon fill="blue" stroke="blue" points="1071.28,-3446.71 1081.87,-3446.76 1073.62,-3440.12 1071.28,-3446.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients(). -->
<g id="node137" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().</title>
<g id="a_node137"><a xlink:title="fn group_sealed_sender_multiple_devices_and_excluded_recipients() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId:...">
<polygon fill="white" stroke="black" points="912.5,-2458.77 449.5,-2458.77 449.5,-2422.77 912.5,-2422.77 912.5,-2458.77"/>
<text text-anchor="middle" x="681" y="-2437.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices_and_excluded_recipients</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge93" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.88,-2447.94C1092.89,-2451.54 1318.34,-2450.92 1355,-2426.77 1372.94,-2414.95 1359.36,-2397.49 1375,-2382.77 1553.84,-2214.39 1677.9,-2306.94 1891,-2184.77 1900.88,-2179.11 1900.49,-2173.14 1911,-2168.77 2008.01,-2128.43 2779,-2138.75 2850.5,-2061.77 2889.55,-2019.73 2834.68,-1590.19 2871,-1545.77 2885.8,-1527.67 2910.54,-1520.54 2932.86,-1518.1"/>
<polygon fill="blue" stroke="blue" points="2933.22,-1521.58 2942.9,-1517.28 2932.65,-1514.6 2933.22,-1521.58"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge96" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.9,-2422.85C945.89,-2419.38 979.36,-2415.36 1011,-2410.77 1050.09,-2405.09 1093.41,-2396.56 1128.29,-2389.11"/>
<polygon fill="blue" stroke="blue" points="1129.32,-2392.47 1138.36,-2386.94 1127.85,-2385.62 1129.32,-2392.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge101" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.76,-2451.02C947.98,-2444.05 982.15,-2431.57 1011,-2410.77 1036.18,-2392.61 1014.56,-2365.91 1039,-2346.77 1040.59,-2345.52 1042.22,-2344.32 1043.88,-2343.17"/>
<polygon fill="blue" stroke="blue" points="1045.84,-2346.08 1052.47,-2337.81 1042.13,-2340.14 1045.84,-2346.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge100" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.54,-2441.54C957.38,-2436.79 995.37,-2427.57 1011,-2410.77 1067.32,-2350.24 985.13,-985.49 1039,-922.77 1068.11,-888.88 1123.01,-887.01 1159.55,-890.24"/>
<polygon fill="blue" stroke="blue" points="1159.48,-893.75 1169.79,-891.32 1160.21,-886.79 1159.48,-893.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge97" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.54,-2441.55C957.39,-2436.8 995.38,-2427.57 1011,-2410.77 1069.34,-2348.02 983.19,-933.78 1039,-868.77 1068.1,-834.87 1123,-833 1159.54,-836.24"/>
<polygon fill="blue" stroke="blue" points="1159.47,-839.75 1169.79,-837.32 1160.21,-832.79 1159.47,-839.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge92" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M912.53,-2441.54C957.38,-2436.79 995.37,-2427.56 1011,-2410.77 1065.3,-2352.45 987.06,-1037.2 1039,-976.77 1041.25,-974.15 1043.66,-971.72 1046.2,-969.47"/>
<polygon fill="blue" stroke="blue" points="1048.46,-972.14 1054.21,-963.24 1044.17,-966.62 1048.46,-972.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge98" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.16,-2458.82C832.68,-2472.02 946.81,-2477.55 1011,-2410.77 1053.09,-2366.97 1018.94,-1922.11 1039,-1864.77 1118.61,-1637.17 1276.13,-1651.63 1355,-1423.77 1371.26,-1376.79 1340.91,-1012.96 1375,-976.77 1411.33,-938.19 1468.85,-929.46 1520.28,-931.26"/>
<polygon fill="blue" stroke="blue" points="1520.31,-934.76 1530.47,-931.75 1520.65,-927.77 1520.31,-934.76"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge99" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.3,-2422.71C832.8,-2410.02 944.39,-2404.96 1011,-2467.77 1075.66,-2528.75 977.1,-2601.99 1039,-2665.77 1054.54,-2681.77 1075.86,-2690.38 1097.79,-2694.65"/>
<polygon fill="blue" stroke="blue" points="1097.46,-2698.14 1107.89,-2696.32 1098.6,-2691.23 1097.46,-2698.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge95" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M752.35,-2422.71C827.8,-2408.03 945.55,-2399.52 1011,-2467.77 1064.95,-2524.03 1014.14,-3094.89 1039,-3168.77 1066.56,-3250.67 1133.89,-3329.48 1170.8,-3368.45"/>
<polygon fill="blue" stroke="blue" points="1168.3,-3370.91 1177.75,-3375.7 1173.36,-3366.06 1168.3,-3370.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge94" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices_and_excluded_recipients().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M751.8,-2422.71C827.34,-2407.84 945.72,-2398.96 1011,-2467.77 1083.91,-2544.62 969.55,-3340.77 1039,-3420.77 1048.12,-3431.27 1059.71,-3438.69 1072.46,-3443.83"/>
<polygon fill="blue" stroke="blue" points="1071.33,-3447.15 1081.93,-3447.18 1073.67,-3440.55 1071.33,-3447.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender(). -->
<g id="node138" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().</title>
<g id="a_node138"><a xlink:title="fn group_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device...">
<polygon fill="white" stroke="black" points="763,-2566.77 599,-2566.77 599,-2530.77 763,-2530.77 763,-2566.77"/>
<text text-anchor="middle" x="681" y="-2545.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge124" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.13,-2543.91C889.91,-2535.69 1142.51,-2516.85 1355,-2485.77 1594.86,-2450.68 1723.43,-2559.94 1891,-2384.77 1934.45,-2339.35 1864.99,-2287.59 1911,-2244.77 1968.89,-2190.89 2542.86,-2206.96 2621,-2194.77 2724.74,-2178.58 2784.24,-2220.21 2850.5,-2138.77 2892.11,-2087.63 2829.4,-1596.91 2871,-1545.77 2885.75,-1527.63 2910.49,-1520.5 2932.82,-1518.07"/>
<polygon fill="blue" stroke="blue" points="2933.18,-1521.55 2942.86,-1517.26 2932.62,-1514.57 2933.18,-1521.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge121" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.08,-2555.04C831.56,-2557.35 930.98,-2553.57 1011,-2521.77 1020.01,-2518.19 1116.06,-2439.63 1166.08,-2398.46"/>
<polygon fill="blue" stroke="blue" points="1168.49,-2401.01 1173.98,-2391.95 1164.04,-2395.61 1168.49,-2401.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge127" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.46,-2566.8C833.77,-2579.12 944.25,-2583.59 1011,-2521.77 1068.79,-2468.25 983.63,-2402.79 1039,-2346.77 1039.8,-2345.96 1040.62,-2345.17 1041.45,-2344.39"/>
<polygon fill="blue" stroke="blue" points="1043.81,-2346.99 1049.3,-2337.93 1039.35,-2341.58 1043.81,-2346.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge125" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.33,-2553.97C849.79,-2557.52 978.46,-2556.47 1011,-2521.77 1071.77,-2456.96 981.15,-990.21 1039,-922.77 1068.09,-888.86 1122.99,-886.99 1159.54,-890.23"/>
<polygon fill="blue" stroke="blue" points="1159.47,-893.75 1169.78,-891.32 1160.21,-886.79 1159.47,-893.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge123" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.34,-2553.97C849.8,-2557.53 978.47,-2556.48 1011,-2521.77 1073.8,-2454.75 979.22,-938.5 1039,-868.77 1068.08,-834.85 1122.98,-832.99 1159.53,-836.23"/>
<polygon fill="blue" stroke="blue" points="1159.47,-839.74 1169.78,-837.32 1160.2,-832.78 1159.47,-839.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge122" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.33,-2553.97C849.78,-2557.51 978.45,-2556.46 1011,-2521.77 1069.74,-2459.16 983.09,-1041.91 1039,-976.77 1041.25,-974.15 1043.66,-971.71 1046.2,-969.46"/>
<polygon fill="blue" stroke="blue" points="1048.46,-972.14 1054.2,-963.23 1044.16,-966.61 1048.46,-972.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge129" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.83,-2566.81C831.53,-2579.94 944.52,-2585.75 1011,-2521.77 1048.41,-2485.76 1021.5,-2338.66 1039,-2289.77 1127.07,-2043.67 1278.79,-2043.79 1355,-1793.77 1368.24,-1750.34 1344.21,-1010.13 1375,-976.77 1412.02,-936.66 1471.89,-928.57 1524.54,-931.13"/>
<polygon fill="blue" stroke="blue" points="1524.42,-934.63 1534.62,-931.76 1524.86,-927.65 1524.42,-934.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge128" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.21,-2532.07C836.03,-2522.04 941.79,-2520.31 1011,-2575.77 1043.69,-2601.96 1007.5,-2638.16 1039,-2665.77 1055.41,-2680.16 1076.62,-2688.24 1098.12,-2692.54"/>
<polygon fill="blue" stroke="blue" points="1097.55,-2695.99 1108,-2694.25 1098.74,-2689.09 1097.55,-2695.99"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge120" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.14,-2543.75C849.43,-2540.36 977.95,-2541.56 1011,-2575.77 1056.83,-2623.21 1017.74,-3106.33 1039,-3168.77 1066.85,-3250.56 1134.07,-3329.42 1170.87,-3368.43"/>
<polygon fill="blue" stroke="blue" points="1168.37,-3370.87 1177.81,-3375.69 1173.43,-3366.04 1168.37,-3370.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge126" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.23,-2543.66C849.6,-2540.2 978.19,-2541.32 1011,-2575.77 1075.79,-2643.79 977.28,-3349.95 1039,-3420.77 1048.14,-3431.26 1059.75,-3438.66 1072.5,-3443.8"/>
<polygon fill="blue" stroke="blue" points="1071.37,-3447.11 1081.97,-3447.15 1073.71,-3440.51 1071.37,-3447.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order(). -->
<g id="node139" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().</title>
<g id="a_node139"><a xlink:title="fn group_out_of_order() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to...">
<polygon fill="white" stroke="black" points="756,-2890.77 606,-2890.77 606,-2854.77 756,-2854.77 756,-2890.77"/>
<text text-anchor="middle" x="681" y="-2869.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_out_of_order</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge189" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.34,-2877.27C842.27,-2880.71 976.34,-2880.1 1011,-2845.77 1059.36,-2797.87 1011.06,-2602.83 1039,-2540.77 1066.34,-2480.05 1125.02,-2427.35 1162.39,-2398.14"/>
<polygon fill="blue" stroke="blue" points="1164.68,-2400.79 1170.48,-2391.92 1160.42,-2395.24 1164.68,-2400.79"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge188" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.17,-2877.45C842.29,-2881.12 976.9,-2880.76 1011,-2845.77 1088.51,-2766.23 965.08,-2429.66 1039,-2346.77 1039.53,-2346.17 1040.08,-2345.58 1040.63,-2345"/>
<polygon fill="blue" stroke="blue" points="1043.23,-2347.36 1048.21,-2338.01 1038.49,-2342.22 1043.23,-2347.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge187" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_out_of_order().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.19,-2868.07C842.31,-2864.39 976.94,-2864.74 1011,-2899.77 1091.82,-2982.9 961.93,-3334.15 1039,-3420.77 1048.08,-3430.98 1059.51,-3438.25 1072.03,-3443.34"/>
<polygon fill="blue" stroke="blue" points="1071.21,-3446.77 1081.8,-3446.82 1073.56,-3440.17 1071.21,-3446.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future(). -->
<g id="node140" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().</title>
<g id="a_node140"><a xlink:title="fn group_too_far_in_the_future() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="785.5,-2836.77 576.5,-2836.77 576.5,-2800.77 785.5,-2800.77 785.5,-2836.77"/>
<text text-anchor="middle" x="681" y="-2815.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_too_far_in_the_future</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge247" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.25,-2836.81C831.04,-2850.12 944.6,-2856.25 1011,-2791.77 1051.26,-2752.67 1015.46,-2591.72 1039,-2540.77 1066.93,-2480.32 1125.43,-2427.54 1162.6,-2398.23"/>
<polygon fill="blue" stroke="blue" points="1164.89,-2400.89 1170.65,-2391.99 1160.6,-2395.36 1164.89,-2400.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge246" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M785.67,-2824.42C870.23,-2826.55 980.5,-2822.86 1011,-2791.77 1080.39,-2721.04 972.8,-2420.49 1039,-2346.77 1039.65,-2346.05 1040.31,-2345.34 1040.97,-2344.65"/>
<polygon fill="blue" stroke="blue" points="1043.5,-2347.09 1048.56,-2337.78 1038.8,-2341.9 1043.5,-2347.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge248" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_too_far_in_the_future().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M785.78,-2813.02C870.41,-2810.81 980.72,-2814.46 1011,-2845.77 1055.47,-2891.74 996.6,-3372.87 1039,-3420.77 1048.06,-3431 1059.47,-3438.29 1071.98,-3443.39"/>
<polygon fill="blue" stroke="blue" points="1071.15,-3446.81 1081.75,-3446.87 1073.51,-3440.22 1071.15,-3446.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join(). -->
<g id="node141" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().</title>
<g id="a_node141"><a xlink:title="fn group_late_join() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .to_ow...">
<polygon fill="white" stroke="black" points="741.5,-2782.77 620.5,-2782.77 620.5,-2746.77 741.5,-2746.77 741.5,-2782.77"/>
<text text-anchor="middle" x="681" y="-2761.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_late_join</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge271" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.53,-2779.73C815.05,-2794.29 939.16,-2805.47 1011,-2737.77 1075.36,-2677.12 1000.7,-2620.48 1039,-2540.77 1067.92,-2480.58 1126.38,-2427.54 1163.24,-2398.14"/>
<polygon fill="blue" stroke="blue" points="1165.5,-2400.81 1171.2,-2391.88 1161.18,-2395.31 1165.5,-2400.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge269" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.83,-2768.72C826.39,-2772.88 974.67,-2774.48 1011,-2737.77 1072.28,-2675.85 980.52,-2411.33 1039,-2346.77 1039.65,-2346.05 1040.31,-2345.35 1040.98,-2344.66"/>
<polygon fill="blue" stroke="blue" points="1043.5,-2347.11 1048.6,-2337.82 1038.82,-2341.9 1043.5,-2347.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge270" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_late_join().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M741.61,-2760.71C826.28,-2756.37 975.12,-2754.52 1011,-2791.77 1059.53,-2842.15 992.74,-3368.29 1039,-3420.77 1048.04,-3431.02 1059.43,-3438.32 1071.94,-3443.43"/>
<polygon fill="blue" stroke="blue" points="1071.11,-3446.84 1081.7,-3446.91 1073.46,-3440.25 1071.11,-3446.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices(). -->
<g id="node142" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().</title>
<g id="a_node142"><a xlink:title="fn group_sealed_sender_multiple_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="824,-2512.77 538,-2512.77 538,-2476.77 824,-2476.77 824,-2512.77"/>
<text text-anchor="middle" x="681" y="-2491.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_sealed_sender_multiple_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge333" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.02,-2498.61C961.51,-2499.32 1174.99,-2492.43 1355,-2451.77 1364.34,-2449.66 1365.94,-2446.85 1375,-2443.77 1600.62,-2366.96 1727.55,-2471.23 1891,-2297.77 1919.4,-2267.63 1879.7,-2233.88 1911,-2206.77 1970.79,-2154.98 2542.86,-2167.08 2621,-2154.77 2724.71,-2138.43 2784.13,-2180.13 2850.5,-2098.77 2889.37,-2051.12 2832.14,-1593.42 2871,-1545.77 2885.77,-1527.65 2910.51,-1520.52 2932.84,-1518.08"/>
<polygon fill="blue" stroke="blue" points="2933.2,-1521.56 2942.88,-1517.27 2932.63,-1514.59 2933.2,-1521.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge337" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.22,-2495.08C882.96,-2492.15 951.17,-2484.71 1011,-2467.77 1066.12,-2452.16 1124.15,-2419.67 1160.2,-2397.3"/>
<polygon fill="blue" stroke="blue" points="1162.27,-2400.13 1168.88,-2391.84 1158.55,-2394.2 1162.27,-2400.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge331" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M765.26,-2512.81C838.73,-2523.52 944.22,-2525.47 1011,-2467.77 1052.77,-2431.68 998.87,-2384.67 1039,-2346.77 1039.96,-2345.86 1040.94,-2344.98 1041.94,-2344.12"/>
<polygon fill="blue" stroke="blue" points="1044.12,-2346.85 1049.92,-2337.99 1039.86,-2341.3 1044.12,-2346.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge334" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.12,-2501.33C901.07,-2501.47 985.51,-2494.94 1011,-2467.77 1069.74,-2405.16 983.09,-987.91 1039,-922.77 1068.1,-888.86 1123,-887 1159.54,-890.24"/>
<polygon fill="blue" stroke="blue" points="1159.47,-893.75 1169.79,-891.32 1160.21,-886.79 1159.47,-893.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge329" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.13,-2501.33C901.08,-2501.48 985.52,-2494.94 1011,-2467.77 1071.77,-2402.96 981.15,-936.21 1039,-868.77 1068.09,-834.86 1122.99,-832.99 1159.54,-836.23"/>
<polygon fill="blue" stroke="blue" points="1159.47,-839.75 1169.78,-837.32 1160.21,-832.79 1159.47,-839.75"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge332" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.12,-2501.32C901.06,-2501.47 985.5,-2494.93 1011,-2467.77 1067.71,-2407.37 985.02,-1039.62 1039,-976.77 1041.25,-974.15 1043.66,-971.72 1046.2,-969.46"/>
<polygon fill="blue" stroke="blue" points="1048.46,-972.14 1054.2,-963.23 1044.16,-966.62 1048.46,-972.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge330" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.26,-2501.04C900.98,-2501.05 985.14,-2494.48 1011,-2467.77 1054.72,-2422.61 1009.95,-1958.51 1039,-1902.77 1121.13,-1745.17 1274.47,-1816.19 1355,-1657.77 1372.15,-1624.03 1349.26,-1004.52 1375,-976.77 1411.9,-936.98 1471.3,-928.76 1523.71,-931.17"/>
<polygon fill="blue" stroke="blue" points="1523.55,-934.66 1533.74,-931.76 1523.97,-927.68 1523.55,-934.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge335" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M762.19,-2476.72C836.11,-2465.17 944.18,-2461.94 1011,-2521.77 1059.57,-2565.26 992.4,-2620.17 1039,-2665.77 1054.77,-2681.2 1075.96,-2689.64 1097.66,-2693.94"/>
<polygon fill="blue" stroke="blue" points="1097.2,-2697.41 1107.65,-2695.63 1098.37,-2690.51 1097.2,-2697.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge336" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.32,-2488.44C901.06,-2488.41 985.22,-2494.98 1011,-2521.77 1060.89,-2573.62 1015.94,-3100.61 1039,-3168.77 1066.69,-3250.62 1133.97,-3329.45 1170.83,-3368.44"/>
<polygon fill="blue" stroke="blue" points="1168.33,-3370.89 1177.78,-3375.7 1173.39,-3366.05 1168.33,-3370.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge328" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_sealed_sender_multiple_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M824.44,-2488.33C901.22,-2488.25 985.39,-2494.82 1011,-2521.77 1079.85,-2594.21 973.42,-3345.36 1039,-3420.77 1048.13,-3431.26 1059.73,-3438.68 1072.48,-3443.82"/>
<polygon fill="blue" stroke="blue" points="1071.35,-3447.13 1081.95,-3447.17 1073.69,-3440.53 1071.35,-3447.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session(). -->
<g id="node143" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().</title>
<g id="a_node143"><a xlink:title="fn group_no_send_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;let sender_address = ProtocolAddress::new(&#39; +14159999111&#39; .to_owned(), Device...">
<polygon fill="white" stroke="black" points="771,-3052.77 591,-3052.77 591,-3016.77 771,-3016.77 771,-3052.77"/>
<text text-anchor="middle" x="681" y="-3031.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_send_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge339" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.12,-3052.78C828.38,-3067.12 945.17,-3075.06 1011,-3007.77 1047.35,-2970.61 1018.41,-2588.5 1039,-2540.77 1065.37,-2479.62 1124.35,-2427.06 1162.04,-2397.98"/>
<polygon fill="blue" stroke="blue" points="1164.35,-2400.63 1170.21,-2391.8 1160.12,-2395.05 1164.35,-2400.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge340" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_send_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M771.04,-3050.03C847.56,-3068.12 954.27,-3106.21 1011,-3183.77 1073.62,-3269.38 966,-3343.82 1039,-3420.77 1048.25,-3430.52 1059.65,-3437.55 1072.05,-3442.52"/>
<polygon fill="blue" stroke="blue" points="1071.11,-3445.9 1081.7,-3445.94 1073.45,-3439.31 1071.11,-3445.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt(). -->
<g id="node144" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().</title>
<g id="a_node144"><a xlink:title="fn group_basic_encrypt_decrypt() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +1415999...">
<polygon fill="white" stroke="black" points="791,-2674.77 571,-2674.77 571,-2638.77 791,-2638.77 791,-2674.77"/>
<text text-anchor="middle" x="681" y="-2653.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_encrypt_decrypt</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge351" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M773.97,-2674.8C846.13,-2683.45 945.06,-2682.43 1011,-2629.77 1043.4,-2603.89 1018.05,-2576.55 1039,-2540.77 1072.88,-2482.91 1130.17,-2428.87 1165.38,-2398.69"/>
<polygon fill="blue" stroke="blue" points="1168.03,-2401.03 1173.4,-2391.9 1163.51,-2395.69 1168.03,-2401.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge352" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.38,-2674.79C830.29,-2688.37 944.7,-2694.97 1011,-2629.77 1056.06,-2585.46 995.94,-2393.03 1039,-2346.77 1039.66,-2346.06 1040.33,-2345.37 1041.01,-2344.69"/>
<polygon fill="blue" stroke="blue" points="1043.51,-2347.15 1048.71,-2337.93 1038.89,-2341.89 1043.51,-2347.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge353" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_encrypt_decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.33,-2650.8C875.23,-2648.85 981.53,-2652.97 1011,-2683.77 1067.66,-2742.97 985.01,-3359.12 1039,-3420.77 1048,-3431.05 1059.38,-3438.37 1071.87,-3443.48"/>
<polygon fill="blue" stroke="blue" points="1071.03,-3446.9 1081.63,-3446.98 1073.4,-3440.31 1071.03,-3446.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session(). -->
<g id="node145" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().</title>
<g id="a_node145"><a xlink:title="fn group_no_recv_session() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err().unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let se...">
<polygon fill="white" stroke="black" points="769,-2620.77 593,-2620.77 593,-2584.77 769,-2584.77 769,-2620.77"/>
<text text-anchor="middle" x="681" y="-2599.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_no_recv_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge407" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.34,-2613.75C838.85,-2618.38 936.5,-2615.41 1011,-2575.77 1028.59,-2566.41 1025.94,-2555.82 1039,-2540.77 1083.91,-2489.01 1139.43,-2431.32 1170.98,-2399.1"/>
<polygon fill="blue" stroke="blue" points="1173.58,-2401.45 1178.08,-2391.86 1168.58,-2396.55 1173.58,-2401.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge409" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.81,-2620.79C831.5,-2633.9 944.47,-2639.7 1011,-2575.77 1084.93,-2504.72 968.28,-2421.01 1039,-2346.77 1039.79,-2345.94 1040.59,-2345.14 1041.41,-2344.35"/>
<polygon fill="blue" stroke="blue" points="1043.79,-2346.92 1049.14,-2337.77 1039.25,-2341.59 1043.79,-2346.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge408" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_no_recv_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M769.14,-2597.45C855.33,-2594.29 978.9,-2596.14 1011,-2629.77 1071.72,-2693.38 981.15,-3354.53 1039,-3420.77 1048.15,-3431.25 1059.76,-3438.65 1072.52,-3443.78"/>
<polygon fill="blue" stroke="blue" points="1071.4,-3447.09 1081.99,-3447.13 1073.73,-3440.49 1071.4,-3447.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages(). -->
<g id="node146" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().</title>
<g id="a_node146"><a xlink:title="fn group_large_messages() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; ....">
<polygon fill="white" stroke="black" points="768.5,-2998.77 593.5,-2998.77 593.5,-2962.77 768.5,-2962.77 768.5,-2998.77"/>
<text text-anchor="middle" x="681" y="-2977.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_large_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge438" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.52,-2985.86C854.56,-2988.87 978.31,-2986.93 1011,-2953.77 1075.58,-2888.26 1002.24,-2625.09 1039,-2540.77 1065.61,-2479.73 1124.52,-2427.13 1162.13,-2398.02"/>
<polygon fill="blue" stroke="blue" points="1164.43,-2400.66 1170.27,-2391.82 1160.19,-2395.09 1164.43,-2400.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge437" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.66,-2986.01C854.82,-2989.13 978.67,-2987.28 1011,-2953.77 1057.88,-2905.18 994.31,-2397.38 1039,-2346.77 1039.53,-2346.17 1040.07,-2345.57 1040.62,-2344.99"/>
<polygon fill="blue" stroke="blue" points="1043.23,-2347.35 1048.17,-2337.98 1038.46,-2342.22 1043.23,-2347.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge436" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_large_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M768.52,-2975.67C854.56,-2972.67 978.31,-2974.61 1011,-3007.77 1075.58,-3073.27 977.38,-3352.47 1039,-3420.77 1048.15,-3430.91 1059.62,-3438.15 1072.17,-3443.22"/>
<polygon fill="blue" stroke="blue" points="1071.36,-3446.65 1081.96,-3446.69 1073.7,-3440.05 1071.36,-3446.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet(). -->
<g id="node147" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().</title>
<g id="a_node147"><a xlink:title="fn group_basic_ratchet() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let sender_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14159999111&#39; .t...">
<polygon fill="white" stroke="black" points="759,-2728.77 603,-2728.77 603,-2692.77 759,-2692.77 759,-2728.77"/>
<text text-anchor="middle" x="681" y="-2707.07" font-family="Helvetica,sans-Serif" font-size="14.00">group_basic_ratchet</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge463" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759,-2728.3C832.96,-2740.23 943.18,-2744.42 1011,-2683.77 1059.27,-2640.6 1009.44,-2598.39 1039,-2540.77 1069.56,-2481.19 1127.78,-2427.78 1164.09,-2398.17"/>
<polygon fill="blue" stroke="blue" points="1166.33,-2400.86 1171.93,-2391.87 1161.95,-2395.41 1166.33,-2400.86"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge462" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.06,-2715.42C845.12,-2718.79 976.84,-2717.89 1011,-2683.77 1064.16,-2630.66 988.24,-2402.18 1039,-2346.77 1039.65,-2346.06 1040.32,-2345.36 1041,-2344.67"/>
<polygon fill="blue" stroke="blue" points="1043.5,-2347.13 1048.65,-2337.86 1038.85,-2341.9 1043.5,-2347.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge461" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_basic_ratchet().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M759.31,-2705.87C845.61,-2702.26 977.56,-2702.94 1011,-2737.77 1063.6,-2792.56 988.88,-3363.7 1039,-3420.77 1048.02,-3431.04 1059.4,-3438.35 1071.9,-3443.46"/>
<polygon fill="blue" stroke="blue" points="1071.07,-3446.87 1081.66,-3446.95 1073.43,-3440.28 1071.07,-3446.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber(). -->
<g id="node148" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().</title>
<g id="a_node148"><a xlink:title="fn test_alice_and_bob_agree_on_chain_keys_with_kyber() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut csprng = rand::rngs::OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;let alice_identity_key_pair = IdentityKeyPair::gen...">
<polygon fill="white" stroke="black" points="1823.5,-4075.77 1442.5,-4075.77 1442.5,-4039.77 1823.5,-4039.77 1823.5,-4075.77"/>
<text text-anchor="middle" x="1633" y="-4054.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_alice_and_bob_agree_on_chain_keys_with_kyber</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge281" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1667.42,-4039.68C1718.38,-4012.97 1819.27,-3963.48 1911,-3938.77 2064.46,-3897.43 2513.1,-3969.46 2621,-3852.77 2670.98,-3798.71 2611.74,-3254.26 2649,-3190.77 2702.22,-3100.08 2798.59,-3158.22 2850.5,-3066.77 2892.22,-2993.28 2818.37,-1611.89 2871,-1545.77 2885.61,-1527.41 2910.46,-1520.28 2932.9,-1517.91"/>
<polygon fill="blue" stroke="blue" points="2933.29,-1521.39 2942.99,-1517.13 2932.75,-1514.41 2933.29,-1521.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge284" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1791.62,-4075.81C1828.5,-4086.99 1864.66,-4104.74 1891,-4132.77 2130.68,-4387.89 2248.39,-5583.03 2266.51,-5782.5"/>
<polygon fill="blue" stroke="blue" points="2263.05,-5783.09 2267.43,-5792.74 2270.02,-5782.46 2263.05,-5783.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record(). -->
<g id="edge283" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1823.66,-4051.5C1930.39,-4047.97 2060.26,-4043.67 2152.15,-4040.63"/>
<polygon fill="blue" stroke="blue" points="2152.44,-4044.13 2162.32,-4040.3 2152.21,-4037.13 2152.44,-4044.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record(). -->
<g id="edge282" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_alice_and_bob_agree_on_chain_keys_with_kyber().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1823.66,-4067.63C1929.16,-4073.11 2057.27,-4079.77 2148.95,-4084.53"/>
<polygon fill="blue" stroke="blue" points="2148.93,-4088.03 2159.1,-4085.06 2149.3,-4081.04 2148.93,-4088.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient(). -->
<g id="node149" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().</title>
<g id="a_node149"><a xlink:title="fn test_sealed_sender_multi_recipient() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;le...">
<polygon fill="white" stroke="black" points="810,-913.77 552,-913.77 552,-877.77 810,-877.77 810,-913.77"/>
<text text-anchor="middle" x="681" y="-892.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge74" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.32,-901.68C890.3,-902.36 983.15,-896.64 1011,-868.77 1065.06,-814.68 992.28,-586.31 1039,-525.77 1135.7,-400.47 1221.89,-447.87 1375,-407.77 1600.27,-348.77 1668.44,-385.3 1891,-316.77 1900.32,-313.9 1901.65,-310.52 1911,-307.77 2229.21,-214.17 2318.23,-221.5 2649,-196.77 2738.31,-190.09 2786.65,-133.97 2850.5,-196.77 2899.66,-245.12 2839.32,-1376.52 2871,-1437.77 2884.47,-1463.81 2910.58,-1483.55 2934.04,-1497.02"/>
<polygon fill="blue" stroke="blue" points="2932.42,-1500.13 2942.87,-1501.88 2935.8,-1493.99 2932.42,-1500.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge77" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.05,-895.77C925.44,-895.77 1087.64,-895.77 1159.4,-895.77"/>
<polygon fill="blue" stroke="blue" points="1159.71,-899.27 1169.71,-895.77 1159.71,-892.27 1159.71,-899.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge71" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.3,-887.13C871.2,-882.54 944.95,-876.29 1011,-868.77 1062.88,-862.86 1122.61,-853.72 1159.84,-847.74"/>
<polygon fill="blue" stroke="blue" points="1160.41,-851.19 1169.72,-846.14 1159.29,-844.28 1160.41,-851.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge76" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.21,-913.16C875.34,-915.45 952.79,-907.5 1011,-868.77 1033.51,-853.79 1017.18,-830.73 1039,-814.77 1056.35,-802.09 1077.62,-794.61 1098.85,-790.36"/>
<polygon fill="blue" stroke="blue" points="1099.68,-793.77 1108.92,-788.57 1098.46,-786.87 1099.68,-793.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge73" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.3,-904.41C871.2,-909 944.95,-915.25 1011,-922.77 1030.17,-924.95 1050.42,-927.58 1070.21,-930.32"/>
<polygon fill="blue" stroke="blue" points="1069.8,-933.8 1080.19,-931.72 1070.77,-926.87 1069.8,-933.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge75" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.04,-889.29C890.48,-888.31 983.97,-893.9 1011,-922.77 1077.19,-993.47 976,-2592.22 1039,-2665.77 1053.81,-2683.06 1075.33,-2692.02 1097.71,-2696.23"/>
<polygon fill="blue" stroke="blue" points="1097.26,-2699.7 1107.69,-2697.79 1098.35,-2692.78 1097.26,-2699.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge70" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.04,-889.29C890.49,-888.3 983.98,-893.89 1011,-922.77 1045.6,-959.75 1032.61,-2695.53 1039,-2745.77 1070.16,-2990.71 1158.39,-3277.35 1186.96,-3366.15"/>
<polygon fill="blue" stroke="blue" points="1183.65,-3367.31 1190.06,-3375.75 1190.31,-3365.16 1183.65,-3367.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge72" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M810.08,-889.25C890.55,-888.25 984.04,-893.84 1011,-922.77 1058.3,-973.54 993.99,-3367.96 1039,-3420.77 1048.02,-3431.36 1059.56,-3438.82 1072.28,-3443.99"/>
<polygon fill="blue" stroke="blue" points="1071.13,-3447.3 1081.72,-3447.36 1073.48,-3440.7 1071.13,-3447.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert(). -->
<g id="node150" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().</title>
<g id="a_node150"><a xlink:title="fn test_sender_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="746.5,-697.77 615.5,-697.77 615.5,-661.77 746.5,-661.77 746.5,-697.77"/>
<text text-anchor="middle" x="681" y="-676.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge114" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M746.86,-683.99C832.18,-687.99 975.48,-688.88 1011,-652.77 1077.69,-584.98 969.59,-290.77 1039,-225.77 1313.76,31.57 1878.92,-551.3 1911,-560.77 1961.08,-575.56 2813.72,-553.7 2850.5,-590.77 2883.65,-624.18 2849.21,-1396.05 2871,-1437.77 2884.57,-1463.76 2910.69,-1483.5 2934.12,-1496.98"/>
<polygon fill="blue" stroke="blue" points="2932.5,-1500.08 2942.94,-1501.84 2935.88,-1493.95 2932.5,-1500.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge112" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M746.71,-664.11C820.46,-650.47 939.95,-641.79 1011,-706.77 1064.92,-756.08 987.31,-817.12 1039,-868.77 1070.43,-900.17 1124.24,-902.8 1159.96,-900.39"/>
<polygon fill="blue" stroke="blue" points="1160.3,-903.88 1169.97,-899.56 1159.72,-896.9 1160.3,-903.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge113" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M746.76,-665C819.72,-652.46 937.66,-645.06 1011,-706.77 1048.94,-738.7 1002.51,-781.2 1039,-814.77 1071.37,-844.55 1124.12,-847.75 1159.43,-845.9"/>
<polygon fill="blue" stroke="blue" points="1160.05,-849.36 1169.79,-845.19 1159.57,-842.38 1160.05,-849.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices(). -->
<g id="node151" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().</title>
<g id="a_node151"><a xlink:title="fn test_sealed_sender_multi_recipient_redundant_empty_devices() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::n...">
<polygon fill="white" stroke="black" points="904.5,-1021.77 457.5,-1021.77 457.5,-985.77 904.5,-985.77 904.5,-1021.77"/>
<text text-anchor="middle" x="681" y="-1000.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_redundant_empty_devices</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge136" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.59,-1006.75C952.55,-1002.68 993.99,-993.9 1011,-976.77 1069.87,-917.46 981.26,-662.18 1039,-601.77 1136.74,-499.51 1248.48,-656.85 1355,-563.77 1381.62,-540.5 1347.87,-509.44 1375,-486.77 1463.24,-413.04 1800.99,-519.33 1891,-447.77 1914.33,-429.22 1887.47,-402.06 1911,-383.77 2035.75,-286.81 2489.76,-433.75 2621,-345.77 2645.11,-329.61 2624.47,-302.28 2649,-286.77 2724.69,-238.91 2786.61,-224.01 2850.5,-286.77 2896.12,-331.59 2841.58,-1380.98 2871,-1437.77 2884.49,-1463.8 2910.6,-1483.54 2934.06,-1497.02"/>
<polygon fill="blue" stroke="blue" points="2932.44,-1500.12 2942.89,-1501.87 2935.81,-1493.99 2932.44,-1500.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge135" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.63,-1015.86C942.39,-1009.67 979.51,-997.72 1011,-976.77 1033.51,-961.79 1017.18,-938.73 1039,-922.77 1074.2,-897.03 1125.61,-892.75 1159.9,-893.27"/>
<polygon fill="blue" stroke="blue" points="1159.85,-896.77 1169.95,-893.56 1160.06,-889.77 1159.85,-896.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge131" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.77,-1021.79C840.86,-1031.86 944.35,-1032.85 1011,-976.77 1048.94,-944.84 1002.51,-902.34 1039,-868.77 1071.37,-838.99 1124.12,-835.79 1159.43,-837.64"/>
<polygon fill="blue" stroke="blue" points="1159.57,-841.16 1169.79,-838.35 1160.05,-834.17 1159.57,-841.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge134" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.73,-987.41C940.31,-984.24 976.69,-980.68 1011,-976.77 1030.17,-974.59 1050.42,-971.96 1070.21,-969.22"/>
<polygon fill="blue" stroke="blue" points="1070.77,-972.67 1080.19,-967.82 1069.8,-965.74 1070.77,-972.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge132" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.83,-1000.1C952.97,-1004.16 994.44,-1013.1 1011,-1030.77 1073.12,-1097.05 979.87,-2596.8 1039,-2665.77 1053.82,-2683.05 1075.34,-2692.01 1097.72,-2696.21"/>
<polygon fill="blue" stroke="blue" points="1097.28,-2699.69 1107.7,-2697.78 1098.36,-2692.77 1097.28,-2699.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge130" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.84,-1000.09C952.98,-1004.15 994.45,-1013.1 1011,-1030.77 1043.57,-1065.55 1032.96,-2698.51 1039,-2745.77 1070.28,-2990.69 1158.43,-3277.34 1186.97,-3366.15"/>
<polygon fill="blue" stroke="blue" points="1183.66,-3367.31 1190.07,-3375.75 1190.32,-3365.16 1183.66,-3367.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge133" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_redundant_empty_devices().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M904.9,-1000.04C953.03,-1004.1 994.49,-1013.06 1011,-1030.77 1056.27,-1079.33 995.92,-3370.25 1039,-3420.77 1048.03,-3431.35 1059.56,-3438.82 1072.28,-3443.99"/>
<polygon fill="blue" stroke="blue" points="1071.13,-3447.29 1081.73,-3447.35 1073.48,-3440.7 1071.13,-3447.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert(). -->
<g id="node152" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().</title>
<g id="a_node152"><a xlink:title="fn test_revoked_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut r...">
<polygon fill="white" stroke="black" points="775.5,-589.77 586.5,-589.77 586.5,-553.77 775.5,-553.77 775.5,-589.77"/>
<text text-anchor="middle" x="681" y="-568.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_revoked_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge146" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M688.71,-553.56C717.16,-479.39 835.72,-198.9 1039,-91.77 1272.33,31.2 1368.25,-68.77 1632,-68.77 1632,-68.77 1632,-68.77 2271,-68.77 2528.68,-68.77 2669.75,96.88 2850.5,-86.77 2876.83,-113.52 2853.78,-1404.42 2871,-1437.77 2884.45,-1463.82 2910.57,-1483.56 2934.03,-1497.03"/>
<polygon fill="blue" stroke="blue" points="2932.41,-1500.13 2942.86,-1501.89 2935.78,-1494 2932.41,-1500.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge145" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_revoked_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.41,-553.73C832.03,-540.78 944.45,-535.27 1011,-598.77 1081.04,-665.59 971.98,-744.92 1039,-814.77 1069.76,-846.83 1123.74,-849.28 1159.68,-846.67"/>
<polygon fill="blue" stroke="blue" points="1160.11,-850.14 1169.76,-845.77 1159.49,-843.17 1160.11,-850.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session(). -->
<g id="node153" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().</title>
<g id="a_node153"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_archived_session( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceI...">
<polygon fill="white" stroke="black" points="920.5,-967.77 441.5,-967.77 441.5,-931.77 920.5,-931.77 920.5,-967.77"/>
<text text-anchor="middle" x="681" y="-946.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge200" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.91,-951.11C961.78,-946.5 995.94,-937.9 1011,-922.77 1067.47,-866.07 983.61,-621.52 1039,-563.77 1136.91,-461.67 1248.63,-619.02 1355,-525.77 1381.91,-502.18 1347.59,-470.79 1375,-447.77 1463.07,-373.8 1800.71,-479.01 1891,-407.77 1913.73,-389.83 1888.06,-363.43 1911,-345.77 2036.2,-249.38 2491.87,-398.83 2621,-307.77 2647.37,-289.17 2622.14,-258.66 2649,-240.77 2723.54,-191.13 2786.63,-177.99 2850.5,-240.77 2897.93,-287.39 2840.42,-1378.7 2871,-1437.77 2884.48,-1463.8 2910.59,-1483.55 2934.05,-1497.02"/>
<polygon fill="blue" stroke="blue" points="2932.43,-1500.12 2942.88,-1501.88 2935.8,-1493.99 2932.43,-1500.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge198" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.72,-931.96C951.13,-929.17 981.82,-926.09 1011,-922.77 1062.88,-916.86 1122.61,-907.72 1159.84,-901.74"/>
<polygon fill="blue" stroke="blue" points="1160.41,-905.19 1169.72,-900.14 1159.29,-898.28 1160.41,-905.19"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge197" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.88,-958.82C952.96,-952.04 984.04,-940.71 1011,-922.77 1033.51,-907.79 1017.18,-884.73 1039,-868.77 1074.2,-843.03 1125.61,-838.75 1159.9,-839.27"/>
<polygon fill="blue" stroke="blue" points="1159.85,-842.77 1169.95,-839.56 1160.06,-835.77 1159.85,-842.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge196" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.57,-949.77C962.6,-949.77 1005.29,-949.77 1044.11,-949.77"/>
<polygon fill="blue" stroke="blue" points="1044.43,-953.27 1054.43,-949.77 1044.43,-946.27 1044.43,-953.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge199" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.8,-947.65C961.99,-952.27 996.31,-961.08 1011,-976.77 1075.16,-1045.26 977.93,-2594.51 1039,-2665.77 1053.81,-2683.06 1075.34,-2692.02 1097.72,-2696.22"/>
<polygon fill="blue" stroke="blue" points="1097.27,-2699.69 1107.69,-2697.79 1098.36,-2692.78 1097.27,-2699.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge202" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.81,-947.64C961.99,-952.27 996.31,-961.08 1011,-976.77 1044.58,-1012.65 1032.79,-2697.02 1039,-2745.77 1070.22,-2990.7 1158.41,-3277.35 1186.96,-3366.15"/>
<polygon fill="blue" stroke="blue" points="1183.66,-3367.31 1190.06,-3375.75 1190.32,-3365.16 1183.66,-3367.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge201" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M920.86,-947.6C962.04,-952.22 996.35,-961.05 1011,-976.77 1057.29,-1026.44 994.95,-3369.1 1039,-3420.77 1048.02,-3431.35 1059.56,-3438.82 1072.28,-3443.99"/>
<polygon fill="blue" stroke="blue" points="1071.13,-3447.3 1081.73,-3447.36 1073.48,-3440.7 1071.13,-3447.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id(). -->
<g id="node154" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().</title>
<g id="a_node154"><a xlink:title="fn test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id( ) &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = Devi...">
<polygon fill="white" stroke="black" points="927.5,-1075.77 434.5,-1075.77 434.5,-1039.77 927.5,-1039.77 927.5,-1075.77"/>
<text text-anchor="middle" x="681" y="-1054.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge239" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M754.51,-1075.77C829.54,-1089.62 944.83,-1096.71 1011,-1030.77 1062.66,-979.29 993.6,-760.85 1039,-703.77 1130.88,-588.28 1219.51,-660.26 1355,-601.77 1364.31,-597.75 1365.47,-594.26 1375,-590.77 1594.69,-510.36 1716.85,-642.98 1891,-486.77 1912.87,-467.15 1887.79,-441.78 1911,-423.77 2035.86,-326.9 2492.91,-476.32 2621,-383.77 2648.49,-363.9 2620.96,-331.85 2649,-312.77 2686.02,-287.58 2818.55,-281.4 2850.5,-312.77 2895.1,-356.57 2842.23,-1382.27 2871,-1437.77 2884.49,-1463.8 2910.61,-1483.54 2934.06,-1497.01"/>
<polygon fill="blue" stroke="blue" points="2932.44,-1500.12 2942.89,-1501.87 2935.82,-1493.98 2932.44,-1500.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge232" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.89,-1057.93C959.75,-1068.42 988.92,-1085.12 1011,-1110.77 1060.18,-1167.91 1014.36,-3753.52 1039,-3824.77 1119.06,-4056.31 1167.78,-4131.08 1375,-4261.77 1573.34,-4386.86 1721.36,-4209.89 1891,-4371.77 2108.47,-4579.28 2242.95,-5598.91 2265.59,-5782.44"/>
<polygon fill="blue" stroke="blue" points="2262.15,-5783.13 2266.84,-5792.63 2269.1,-5782.28 2262.15,-5783.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge233" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.77,-1075.79C840.86,-1085.86 944.35,-1086.85 1011,-1030.77 1048.94,-998.84 1002.51,-956.34 1039,-922.77 1071.37,-892.99 1124.12,-889.79 1159.43,-891.64"/>
<polygon fill="blue" stroke="blue" points="1159.57,-895.16 1169.79,-892.35 1160.05,-888.17 1159.57,-895.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge235" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M760.35,-1075.79C834.52,-1087.84 944.18,-1091.88 1011,-1030.77 1064.92,-981.46 987.31,-920.41 1039,-868.77 1070.43,-837.37 1124.24,-834.74 1159.96,-837.15"/>
<polygon fill="blue" stroke="blue" points="1159.72,-840.64 1169.97,-837.98 1160.3,-833.66 1159.72,-840.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt(). -->
<g id="edge236" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_multi_recipient_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.68,-1065.31C957.34,-1058.41 985.95,-1047.44 1011,-1030.77 1033.51,-1015.79 1017.18,-992.73 1039,-976.77 1041.1,-975.23 1043.26,-973.77 1045.47,-972.39"/>
<polygon fill="blue" stroke="blue" points="1047.27,-975.39 1054.22,-967.39 1043.8,-969.31 1047.27,-975.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge234" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.71,-1058.08C959.6,-1068.55 988.82,-1085.2 1011,-1110.77 1067.62,-1176.04 982.73,-2600.2 1039,-2665.77 1053.83,-2683.05 1075.35,-2692 1097.73,-2696.21"/>
<polygon fill="blue" stroke="blue" points="1097.29,-2699.68 1107.71,-2697.77 1098.37,-2692.76 1097.29,-2699.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge238" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.73,-1058.06C959.62,-1068.54 988.83,-1085.19 1011,-1110.77 1040.75,-1145.1 1033.23,-2700.71 1039,-2745.77 1070.37,-2990.68 1158.46,-3277.34 1186.97,-3366.15"/>
<polygon fill="blue" stroke="blue" points="1183.67,-3367.31 1190.07,-3375.75 1190.33,-3365.16 1183.67,-3367.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge237" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender_multi_recipient_encrypt_with_bad_registration_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M927.85,-1057.96C959.72,-1068.45 988.9,-1085.14 1011,-1110.77 1052.91,-1159.37 997.35,-3371.95 1039,-3420.77 1048.03,-3431.35 1059.57,-3438.82 1072.28,-3443.98"/>
<polygon fill="blue" stroke="blue" points="1071.14,-3447.29 1081.73,-3447.35 1073.49,-3440.7 1071.14,-3447.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender(). -->
<g id="node155" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().</title>
<g id="a_node155"><a xlink:title="fn test_decryption_error_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="826,-751.77 536,-751.77 536,-715.77 826,-715.77 826,-751.77"/>
<text text-anchor="middle" x="681" y="-730.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_decryption_error_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge260" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.34,-739.9C902.41,-739.74 985.2,-733.04 1011,-706.77 1079.64,-636.86 967.55,-333.81 1039,-266.77 1090.21,-218.72 1304.14,-218.35 1355,-266.77 1387.79,-297.99 1342.59,-642.16 1375,-673.77 1424.57,-722.11 2555.29,-681.93 2621,-703.77 2739.73,-743.22 2791.12,-756.65 2850.5,-866.77 2910.77,-978.53 2811.57,-1325.56 2871,-1437.77 2884.67,-1463.58 2910.66,-1483.27 2933.99,-1496.77"/>
<polygon fill="blue" stroke="blue" points="2932.33,-1499.85 2942.78,-1501.64 2935.73,-1493.73 2932.33,-1499.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge262" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.28,-739.84C902.32,-739.66 985.12,-732.96 1011,-706.77 1073.48,-643.55 973.99,-368.38 1039,-307.77 1090.36,-259.88 1304.47,-259.01 1355,-307.77 1399.88,-351.08 1332.44,-823.17 1375,-868.77 1411.66,-908.05 1470.27,-916.49 1522.26,-914.34"/>
<polygon fill="blue" stroke="blue" points="1522.77,-917.82 1532.57,-913.78 1522.39,-910.83 1522.77,-917.82"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge257" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.77,-715.75C840.86,-705.68 944.35,-704.68 1011,-760.77 1048.94,-792.7 1002.51,-835.2 1039,-868.77 1071.37,-898.55 1124.12,-901.75 1159.43,-899.9"/>
<polygon fill="blue" stroke="blue" points="1160.05,-903.36 1169.79,-899.19 1159.57,-896.38 1160.05,-903.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge256" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.05,-716.04C887.6,-715.55 957.44,-725.13 1011,-760.77 1033.51,-775.75 1017.18,-798.81 1039,-814.77 1074.2,-840.51 1125.61,-844.79 1159.9,-844.27"/>
<polygon fill="blue" stroke="blue" points="1160.06,-847.77 1169.95,-843.98 1159.85,-840.77 1160.06,-847.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge261" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M784.58,-751.78C854.98,-758.29 946.92,-754.57 1011,-706.77 1038.52,-686.24 1010.66,-654.15 1039,-634.77 1154.92,-555.47 1252.31,-538.96 1355,-634.77 1401.91,-678.53 1330.44,-876.61 1375,-922.77 1410.13,-959.16 1464.15,-968.73 1513.62,-968.06"/>
<polygon fill="blue" stroke="blue" points="1513.88,-971.55 1523.77,-967.78 1513.68,-964.55 1513.88,-971.55"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge263" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.38,-727.18C902.73,-727.15 985.8,-733.82 1011,-760.77 1083.29,-838.08 970.2,-2585.33 1039,-2665.77 1053.8,-2683.07 1075.31,-2692.04 1097.7,-2696.24"/>
<polygon fill="blue" stroke="blue" points="1097.25,-2699.71 1107.67,-2697.8 1098.33,-2692.8 1097.25,-2699.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt(). -->
<g id="edge259" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M535.64,-725.92C447.83,-725.18 349.09,-732.97 329,-769.77 312.35,-800.26 322.13,-5737.72 329,-5771.77 397.09,-6109.3 605.25,-6480.2 664.88,-6581.79"/>
<polygon fill="blue" stroke="blue" points="661.93,-6583.67 670.02,-6590.51 667.96,-6580.12 661.93,-6583.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge255" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.38,-727.17C902.74,-727.14 985.81,-733.81 1011,-760.77 1048.65,-801.06 1032.08,-2691.06 1039,-2745.77 1070,-2990.73 1158.34,-3277.35 1186.94,-3366.15"/>
<polygon fill="blue" stroke="blue" points="1183.64,-3367.32 1190.05,-3375.75 1190.3,-3365.16 1183.64,-3367.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge258" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_decryption_error_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M826.42,-727.14C902.79,-727.1 985.86,-733.77 1011,-760.77 1061.35,-814.85 991.09,-3364.52 1039,-3420.77 1048.02,-3431.36 1059.55,-3438.83 1072.27,-3444"/>
<polygon fill="blue" stroke="blue" points="1071.12,-3447.3 1081.72,-3447.37 1073.47,-3440.71 1071.12,-3447.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender(). -->
<g id="node156" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().</title>
<g id="a_node156"><a xlink:title="fn test_sender_key_in_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let ...">
<polygon fill="white" stroke="black" points="808,-859.77 554,-859.77 554,-823.77 808,-823.77 808,-859.77"/>
<text text-anchor="middle" x="681" y="-838.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sender_key_in_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge298" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.23,-847.76C888.75,-848.6 983.05,-843.04 1011,-814.77 1073.03,-752.04 974.46,-478.91 1039,-418.77 1049.21,-409.25 2804.92,-378.95 2850.5,-423.77 2890.68,-463.27 2845.02,-1387.77 2871,-1437.77 2884.52,-1463.78 2910.63,-1483.52 2934.08,-1497"/>
<polygon fill="blue" stroke="blue" points="2932.46,-1500.1 2942.91,-1501.86 2935.84,-1493.97 2932.46,-1500.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt(). -->
<g id="edge297" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/group_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.26,-835.34C889.08,-834.27 983.74,-839.73 1011,-868.77 1067.22,-928.64 985.49,-2284.47 1039,-2346.77 1060.55,-2371.85 1096.21,-2379.4 1128.11,-2380.31"/>
<polygon fill="blue" stroke="blue" points="1128.28,-2383.81 1138.31,-2380.39 1128.34,-2376.81 1128.28,-2383.81"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message(). -->
<g id="edge299" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 group_cipher/create_sender_key_distribution_message().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M757.09,-823.76C831.72,-810.75 944.41,-805.11 1011,-868.77 1017.73,-875.2 1167.59,-2089.24 1192.51,-2291.39"/>
<polygon fill="blue" stroke="blue" points="1189.05,-2292.01 1193.75,-2301.51 1196,-2291.16 1189.05,-2292.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc(). -->
<g id="edge303" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt_from_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.16,-847.69C888.64,-848.49 982.93,-842.93 1011,-814.77 1066.87,-758.72 980.89,-513.48 1039,-459.77 1090.57,-412.11 1304.15,-411.34 1355,-459.77 1387.95,-491.15 1343.74,-835.71 1375,-868.77 1411.2,-907.04 1468.26,-915.89 1519.43,-914.25"/>
<polygon fill="blue" stroke="blue" points="1519.74,-917.74 1529.57,-913.78 1519.43,-910.74 1519.74,-917.74"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge302" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.34,-850.26C869.61,-854.86 944.24,-861.17 1011,-868.77 1062.88,-874.68 1122.61,-883.82 1159.84,-889.8"/>
<polygon fill="blue" stroke="blue" points="1159.29,-893.26 1169.72,-891.4 1160.41,-886.35 1159.29,-893.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge304" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.07,-841.77C923.7,-841.77 1087.58,-841.77 1159.63,-841.77"/>
<polygon fill="blue" stroke="blue" points="1159.98,-845.27 1169.98,-841.77 1159.98,-838.27 1159.98,-845.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc(). -->
<g id="edge301" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt_to_usmc().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M767.77,-859.79C840.86,-869.86 944.35,-870.85 1011,-814.77 1048.94,-782.84 999.78,-737.12 1039,-706.77 1150.07,-620.82 1251.21,-612.15 1355,-706.77 1390.62,-739.25 1341.12,-888.47 1375,-922.77 1407.75,-955.93 1456.24,-966.62 1502.3,-967.62"/>
<polygon fill="blue" stroke="blue" points="1502.37,-971.12 1512.39,-967.69 1502.41,-964.12 1502.37,-971.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge305" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.29,-835.31C889.13,-834.23 983.78,-839.69 1011,-868.77 1079.22,-941.67 974.07,-2589.92 1039,-2665.77 1053.81,-2683.06 1075.32,-2692.03 1097.71,-2696.23"/>
<polygon fill="blue" stroke="blue" points="1097.26,-2699.7 1107.68,-2697.8 1098.34,-2692.79 1097.26,-2699.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge300" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.3,-835.3C889.14,-834.22 983.79,-839.68 1011,-868.77 1046.62,-906.85 1032.43,-2694.04 1039,-2745.77 1070.1,-2990.71 1158.37,-3277.35 1186.95,-3366.15"/>
<polygon fill="blue" stroke="blue" points="1183.65,-3367.31 1190.06,-3375.75 1190.31,-3365.16 1183.65,-3367.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge306" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sender_key_in_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M808.34,-835.27C889.19,-834.17 983.85,-839.62 1011,-868.77 1059.32,-920.64 993.02,-3366.81 1039,-3420.77 1048.02,-3431.36 1059.56,-3438.83 1072.27,-3443.99"/>
<polygon fill="blue" stroke="blue" points="1071.13,-3447.3 1081.72,-3447.36 1073.48,-3440.71 1071.13,-3447.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert(). -->
<g id="node157" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().</title>
<g id="a_node157"><a xlink:title="fn test_server_cert() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;let trust_root = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;let server_key = KeyPair::generate(&amp;mut rng); &#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="745,-643.77 617,-643.77 617,-607.77 745,-607.77 745,-643.77"/>
<text text-anchor="middle" x="681" y="-622.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_server_cert</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge444" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M745.07,-629.92C830.17,-634.01 975.27,-635.17 1011,-598.77 1080.09,-528.37 969.93,-226.19 1039,-155.77 1131.59,-61.37 1499.77,-106.77 1632,-106.77 1632,-106.77 1632,-106.77 2271,-106.77 2400.05,-106.77 2761.54,-51.28 2850.5,-144.77 2900.02,-196.81 2838.01,-1373.95 2871,-1437.77 2884.46,-1463.81 2910.57,-1483.56 2934.04,-1497.03"/>
<polygon fill="blue" stroke="blue" points="2932.42,-1500.13 2942.87,-1501.88 2935.79,-1494 2932.42,-1500.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge443" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_server_cert().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M745.08,-610.42C818.68,-596.6 939.42,-587.31 1011,-652.77 1064.92,-702.08 987.31,-763.12 1039,-814.77 1070.43,-846.17 1124.24,-848.8 1159.96,-846.39"/>
<polygon fill="blue" stroke="blue" points="1160.3,-849.88 1169.97,-845.56 1159.72,-842.9 1160.3,-849.88"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender(). -->
<g id="node158" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().</title>
<g id="a_node158"><a xlink:title="fn test_sealed_sender() &#45;&gt; Result&lt;(), SignalProtocolError&gt; { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(23).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="755.5,-805.77 606.5,-805.77 606.5,-769.77 755.5,-769.77 755.5,-805.77"/>
<text text-anchor="middle" x="681" y="-784.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_sealed_sender</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge448" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.66,-792.31C841.63,-795.87 976.46,-795.43 1011,-760.77 1067.17,-704.4 984.74,-461.98 1039,-403.77 1108.22,-329.5 2778.14,-91.56 2850.5,-162.77 2875.75,-187.61 2854.73,-1406.3 2871,-1437.77 2884.46,-1463.81 2910.58,-1483.55 2934.04,-1497.03"/>
<polygon fill="blue" stroke="blue" points="2932.42,-1500.13 2942.87,-1501.88 2935.79,-1494 2932.42,-1500.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt(). -->
<g id="edge446" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_encrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.63,-783.06C822.39,-778.47 923.45,-770.74 1011,-760.77 1039.44,-757.53 1070.23,-753.32 1098.38,-749.19"/>
<polygon fill="blue" stroke="blue" points="1099.25,-752.6 1108.63,-747.68 1098.22,-745.68 1099.25,-752.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new(). -->
<g id="edge451" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[SenderCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.57,-774.68C826.94,-766.09 935.26,-764.37 1011,-814.77 1033.51,-829.75 1017.18,-852.81 1039,-868.77 1074.2,-894.51 1125.61,-898.79 1159.9,-898.27"/>
<polygon fill="blue" stroke="blue" points="1160.06,-901.77 1169.95,-897.98 1159.85,-894.77 1160.06,-901.77"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new(). -->
<g id="edge447" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/impl#[ServerCertificate]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.63,-792.48C822.39,-797.07 923.45,-804.8 1011,-814.77 1062.88,-820.68 1122.61,-829.82 1159.84,-835.8"/>
<polygon fill="blue" stroke="blue" points="1159.29,-839.26 1169.72,-837.4 1160.41,-832.35 1159.29,-839.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt(). -->
<g id="edge449" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 sealed_sender/sealed_sender_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.64,-787.77C845.82,-787.77 998.83,-787.77 1098.64,-787.77"/>
<polygon fill="blue" stroke="blue" points="1098.73,-791.27 1108.73,-787.77 1098.73,-784.27 1098.73,-791.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge450" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.66,-782.89C841.98,-778.96 977.53,-778.98 1011,-814.77 1081.26,-889.88 972.13,-2587.63 1039,-2665.77 1053.8,-2683.07 1075.32,-2692.03 1097.7,-2696.24"/>
<polygon fill="blue" stroke="blue" points="1097.25,-2699.71 1107.67,-2697.8 1098.34,-2692.79 1097.25,-2699.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle(). -->
<g id="edge445" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.66,-782.88C841.99,-778.95 977.54,-778.97 1011,-814.77 1047.63,-853.96 1032.25,-2692.55 1039,-2745.77 1070.05,-2990.72 1158.36,-3277.35 1186.95,-3366.15"/>
<polygon fill="blue" stroke="blue" points="1183.65,-3367.31 1190.05,-3375.75 1190.31,-3365.16 1183.65,-3367.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store(). -->
<g id="edge452" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_sealed_sender().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M755.68,-782.86C842.03,-778.91 977.61,-778.91 1011,-814.77 1060.34,-867.75 992.05,-3365.66 1039,-3420.77 1048.02,-3431.36 1059.56,-3438.83 1072.27,-3444"/>
<polygon fill="blue" stroke="blue" points="1071.12,-3447.3 1081.72,-3447.36 1073.47,-3440.71 1071.12,-3447.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle(). -->
<g id="node159" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().</title>
<g id="a_node159"><a xlink:title="fn test_bad_message_bundle() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="781,-4881.77 581,-4881.77 581,-4845.77 781,-4845.77 781,-4881.77"/>
<text text-anchor="middle" x="681" y="-4860.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_message_bundle</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="node185" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<g id="a_node185"><a xlink:title=" &#160;&#160;&#160;fn run(alice_pqr: UsePQRatchet, bob_pqr: UsePQRatchet) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap()...">
<polygon fill="white" stroke="black" points="1224,-4908.77 1170,-4908.77 1170,-4872.77 1224,-4872.77 1224,-4908.77"/>
<text text-anchor="middle" x="1197" y="-4887.07" font-family="Helvetica,sans-Serif" font-size="14.00">run</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge20" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.1,-4868.98C896.59,-4875.04 1081.53,-4884.76 1159.48,-4888.85"/>
<polygon fill="blue" stroke="blue" points="1159.58,-4892.36 1169.75,-4889.39 1159.95,-4885.37 1159.58,-4892.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="node188" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<g id="a_node188"><a xlink:title=" &#160;&#160;&#160;pub fn with_kyber_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_kyber_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1273,-3627.77 1121,-3627.77 1121,-3591.77 1273,-3591.77 1273,-3627.77"/>
<text text-anchor="middle" x="1197" y="-3606.07" font-family="Helvetica,sans-Serif" font-size="14.00">with_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge19" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.41,-4869.58C866.71,-4872.15 980.58,-4869.03 1011,-4836.77 1056.75,-4788.26 995.44,-3687.26 1039,-3636.77 1056.7,-3616.25 1083.85,-3607.49 1110.63,-3604.48"/>
<polygon fill="blue" stroke="blue" points="1111.19,-3607.94 1120.85,-3603.6 1110.59,-3600.97 1111.19,-3607.94"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="node192" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<g id="a_node192"><a xlink:title=" &#160;&#160;&#160;pub fn with_signed_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_signed_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1276.5,-3573.77 1117.5,-3573.77 1117.5,-3537.77 1276.5,-3537.77 1276.5,-3573.77"/>
<text text-anchor="middle" x="1197" y="-3552.07" font-family="Helvetica,sans-Serif" font-size="14.00">with_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge17" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781,-4869.57C866.36,-4872.18 980.54,-4869.1 1011,-4836.77 1058.79,-4786.05 993.5,-3635.55 1039,-3582.77 1055.9,-3563.17 1081.42,-3554.29 1107,-3550.91"/>
<polygon fill="blue" stroke="blue" points="1107.59,-3554.37 1117.18,-3549.84 1106.87,-3547.41 1107.59,-3554.37"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="node193" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<g id="a_node193"><a xlink:title=" &#160;&#160;&#160;pub fn new() &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut rng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key = IdentityKeyPair::generate(&amp;mut rng); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Valid registration IDs fit in 14 bits. &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let regis...">
<polygon fill="white" stroke="black" points="1224,-3789.77 1170,-3789.77 1170,-3753.77 1224,-3753.77 1224,-3789.77"/>
<text text-anchor="middle" x="1197" y="-3768.07" font-family="Helvetica,sans-Serif" font-size="14.00">new</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge18" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.38,-4869.55C866.67,-4872.11 980.51,-4868.97 1011,-4836.77 1089.94,-4753.39 965.17,-3891.71 1039,-3803.77 1067.9,-3769.35 1122.85,-3765.63 1159.46,-3767.57"/>
<polygon fill="blue" stroke="blue" points="1159.5,-3771.08 1169.72,-3768.28 1159.99,-3764.1 1159.5,-3771.08"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="node196" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<g id="a_node196"><a xlink:title=" &#160;&#160;&#160;pub fn with_pre_key(mut self, id_choice: IdChoice) &#45;&gt; Self { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self.add_pre_key(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;self &#160;&#160;&#160;&#160;}">
<polygon fill="white" stroke="black" points="1250,-3519.77 1144,-3519.77 1144,-3483.77 1250,-3483.77 1250,-3519.77"/>
<text text-anchor="middle" x="1197" y="-3498.07" font-family="Helvetica,sans-Serif" font-size="14.00">with_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge16" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_message_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M781.01,-4869.58C866.37,-4872.19 980.56,-4869.11 1011,-4836.77 1060.82,-4783.84 991.57,-3583.84 1039,-3528.77 1061.82,-3502.28 1100.39,-3495.36 1133.58,-3495.16"/>
<polygon fill="blue" stroke="blue" points="1133.65,-3498.66 1143.69,-3495.29 1133.74,-3491.66 1133.65,-3498.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits(). -->
<g id="node160" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().</title>
<g id="a_node160"><a xlink:title="fn test_message_key_limits() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(initialize_sessions_v4()?)?; &#160;&#160;&#160;&#160;&#160;fn run(sessions: (SessionRecord, SessionRecord)) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let (alice_session_r...">
<polygon fill="white" stroke="black" points="774.5,-5421.77 587.5,-5421.77 587.5,-5385.77 774.5,-5385.77 774.5,-5421.77"/>
<text text-anchor="middle" x="681" y="-5400.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_message_key_limits</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge21" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M774.58,-5409.11C860.3,-5411.85 979.17,-5409.27 1011,-5376.77 1082.5,-5303.76 970.8,-4993.87 1039,-4917.77 1068.74,-4884.59 1123.22,-4882.48 1159.53,-4885.47"/>
<polygon fill="blue" stroke="blue" points="1159.41,-4888.98 1169.71,-4886.48 1160.1,-4882.01 1159.41,-4888.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge22" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_message_key_limits().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M774.9,-5409.41C860.86,-5412.38 979.9,-5409.97 1011,-5376.77 1075.04,-5308.4 978.04,-3761.9 1039,-3690.77 1055.29,-3671.76 1079.69,-3662.82 1104.43,-3659.2"/>
<polygon fill="blue" stroke="blue" points="1105.14,-3662.64 1114.66,-3658 1104.32,-3655.69 1105.14,-3662.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message(). -->
<g id="node161" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().</title>
<g id="a_node161"><a xlink:title="fn test_repeat_bundle_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(3133.into()) &#160;&#160;...">
<polygon fill="white" stroke="black" points="790,-4827.77 572,-4827.77 572,-4791.77 790,-4791.77 790,-4827.77"/>
<text text-anchor="middle" x="681" y="-4806.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_repeat_bundle_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge37" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.15,-4813.14C854.69,-4816.52 938.02,-4823.27 1011,-4836.77 1063.78,-4846.53 1123.05,-4865.26 1159.96,-4877.89"/>
<polygon fill="blue" stroke="blue" points="1159.16,-4881.32 1169.75,-4881.28 1161.45,-4874.7 1159.16,-4881.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge40" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.17,-4815.81C874.33,-4817.89 981.59,-4813.92 1011,-4782.77 1054.72,-4736.46 997.37,-3684.96 1039,-3636.77 1056.71,-3616.26 1083.87,-3607.5 1110.64,-3604.49"/>
<polygon fill="blue" stroke="blue" points="1111.2,-3607.96 1120.86,-3603.61 1110.6,-3600.98 1111.2,-3607.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge36" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.18,-4815.82C874.34,-4817.91 981.61,-4813.94 1011,-4782.77 1056.75,-4734.26 995.44,-3633.26 1039,-3582.77 1055.91,-3563.17 1081.43,-3554.3 1107.02,-3550.92"/>
<polygon fill="blue" stroke="blue" points="1107.61,-3554.38 1117.19,-3549.85 1106.88,-3547.42 1107.61,-3554.38"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge39" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.14,-4815.78C874.28,-4817.84 981.53,-4813.86 1011,-4782.77 1085.87,-4703.8 968.96,-3887.06 1039,-3803.77 1067.92,-3769.37 1122.86,-3765.65 1159.47,-3767.58"/>
<polygon fill="blue" stroke="blue" points="1159.51,-3771.09 1169.73,-3768.29 1160,-3764.11 1159.51,-3771.09"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge38" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_repeat_bundle_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M790.19,-4815.83C874.36,-4817.92 981.62,-4813.95 1011,-4782.77 1058.79,-4732.05 993.5,-3581.55 1039,-3528.77 1061.83,-3502.29 1100.4,-3495.37 1133.59,-3495.16"/>
<polygon fill="blue" stroke="blue" points="1133.65,-3498.66 1143.7,-3495.3 1133.75,-3491.67 1133.65,-3498.66"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage(). -->
<g id="node162" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().</title>
<g id="a_node162"><a xlink:title="fn test_simultaneous_initiate_with_lossage() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="827,-4773.77 535,-4773.77 535,-4737.77 827,-4737.77 827,-4773.77"/>
<text text-anchor="middle" x="681" y="-4752.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_with_lossage</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge41" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.18,-4753.84C885.44,-4756.61 952.51,-4764.35 1011,-4782.77 1069.53,-4801.21 1129.47,-4840.75 1164.69,-4866.53"/>
<polygon fill="blue" stroke="blue" points="1162.97,-4869.61 1173.09,-4872.76 1167.15,-4863.99 1162.97,-4869.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge45" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.16,-4762.26C903.23,-4762.2 985.75,-4755.48 1011,-4728.77 1052.69,-4684.67 999.3,-3682.67 1039,-3636.77 1056.73,-3616.27 1083.88,-3607.51 1110.65,-3604.5"/>
<polygon fill="blue" stroke="blue" points="1111.21,-3607.97 1120.88,-3603.62 1110.61,-3600.99 1111.21,-3607.97"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge43" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.17,-4762.27C903.25,-4762.22 985.77,-4755.49 1011,-4728.77 1054.72,-4682.46 997.37,-3630.96 1039,-3582.77 1055.92,-3563.18 1081.45,-3554.31 1107.03,-3550.93"/>
<polygon fill="blue" stroke="blue" points="1107.62,-3554.39 1117.2,-3549.87 1106.89,-3547.43 1107.62,-3554.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge44" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.11,-4762.22C903.17,-4762.14 985.69,-4755.42 1011,-4728.77 1081.81,-4654.21 972.76,-3882.41 1039,-3803.77 1067.95,-3769.4 1122.89,-3765.66 1159.48,-3767.59"/>
<polygon fill="blue" stroke="blue" points="1159.52,-3771.1 1169.74,-3768.3 1160,-3764.11 1159.52,-3771.1"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge42" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_with_lossage().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M827.18,-4762.28C903.26,-4762.23 985.79,-4755.51 1011,-4728.77 1056.75,-4680.26 995.44,-3579.26 1039,-3528.77 1061.84,-3502.3 1100.41,-3495.39 1133.6,-3495.17"/>
<polygon fill="blue" stroke="blue" points="1133.66,-3498.67 1143.71,-3495.31 1133.76,-3491.67 1133.66,-3498.67"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled(). -->
<g id="node163" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().</title>
<g id="a_node163"><a xlink:title="fn test_pqr_state_empty_if_disabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::No, UsePQRatchet::Yes)?; &#160;&#160;&#160;&#160;run(UsePQRatchet::Yes, UsePQRatchet::No)?; &#160;&#160;&#160;&#160;&#160;f...">
<polygon fill="white" stroke="black" points="804.5,-5691.77 557.5,-5691.77 557.5,-5655.77 804.5,-5655.77 804.5,-5691.77"/>
<text text-anchor="middle" x="681" y="-5670.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_empty_if_disabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge60" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_empty_if_disabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M804.61,-5679.99C886.09,-5681.18 983.06,-5675.95 1011,-5646.77 1067.06,-5588.22 985.58,-4978.74 1039,-4917.77 1068.44,-4884.16 1123.25,-4882.22 1159.68,-4885.36"/>
<polygon fill="blue" stroke="blue" points="1159.59,-4888.87 1169.89,-4886.41 1160.3,-4881.9 1159.59,-4888.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session(). -->
<g id="node164" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().</title>
<g id="a_node164"><a xlink:title="fn prekey_message_to_archived_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(...">
<polygon fill="white" stroke="black" points="819.5,-4557.77 542.5,-4557.77 542.5,-4521.77 819.5,-4521.77 819.5,-4557.77"/>
<text text-anchor="middle" x="681" y="-4536.07" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_to_archived_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge90" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.63,-4546.26C897.72,-4546.64 984.94,-4540.38 1011,-4512.77 1054.83,-4466.34 1030.91,-3427.11 1039,-3363.77 1071.46,-3109.8 1159.36,-2811.54 1187.33,-2720.52"/>
<polygon fill="blue" stroke="blue" points="1190.68,-2721.52 1190.29,-2710.93 1184,-2719.45 1190.68,-2721.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge87" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.56,-4546.19C897.62,-4546.54 984.83,-4540.28 1011,-4512.77 1078.12,-4442.21 975.06,-3710.22 1039,-3636.77 1056.79,-3616.33 1083.96,-3607.58 1110.73,-3604.57"/>
<polygon fill="blue" stroke="blue" points="1111.29,-3608.03 1120.95,-3603.68 1110.68,-3601.06 1111.29,-3608.03"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge89" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.58,-4546.2C897.64,-4546.57 984.86,-4540.3 1011,-4512.77 1082.18,-4437.8 971.2,-3660.81 1039,-3582.77 1055.97,-3563.23 1081.52,-3554.37 1107.1,-3550.99"/>
<polygon fill="blue" stroke="blue" points="1107.68,-3554.45 1117.26,-3549.92 1106.95,-3547.49 1107.68,-3554.45"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge86" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.93,-4546.12C897.85,-4546.43 984.78,-4540.13 1011,-4512.77 1065.55,-4455.85 987.93,-3863.83 1039,-3803.77 1068.11,-3769.53 1123,-3765.76 1159.55,-3767.64"/>
<polygon fill="blue" stroke="blue" points="1159.57,-3771.15 1169.79,-3768.34 1160.05,-3764.17 1159.57,-3771.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge88" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.59,-4546.22C897.66,-4546.59 984.88,-4540.32 1011,-4512.77 1086.25,-4433.39 967.33,-3611.4 1039,-3528.77 1061.91,-3502.36 1100.48,-3495.45 1133.66,-3495.22"/>
<polygon fill="blue" stroke="blue" points="1133.71,-3498.72 1143.76,-3495.35 1133.8,-3491.72 1133.71,-3498.72"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge91" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_to_archived_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M819.51,-4546.15C897.56,-4546.49 984.77,-4540.22 1011,-4512.77 1069.99,-4451.03 982.79,-3809.05 1039,-3744.77 1066.34,-3713.5 1115.63,-3709.63 1151.71,-3711.77"/>
<polygon fill="blue" stroke="blue" points="1151.74,-3715.28 1161.98,-3712.56 1152.27,-3708.3 1151.74,-3715.28"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_interaction(). -->
<g id="node165" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_interaction().</title>
<g id="a_node165"><a xlink:title="async fn run_interaction( &#160;&#160;&#160;&#160;alice_store: &amp;mut InMemSignalProtocolStore, &#160;&#160;&#160;&#160;alice_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;bob_store: &amp;mut InMemSignalProtocolStore, &#160;&#160;&#160;&#160;bob_address: &amp;ProtocolAddress, &#160;&#160;&#160;&#160;alic...">
<polygon fill="white" stroke="black" points="1694,-4666.77 1572,-4666.77 1572,-4630.77 1694,-4630.77 1694,-4666.77"/>
<text text-anchor="middle" x="1633" y="-4645.07" font-family="Helvetica,sans-Serif" font-size="14.00">run_interaction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge107" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1618.51,-4630.51C1573.63,-4568.59 1429.19,-4359.38 1375,-4160.77 1362.82,-4116.13 1385.66,-3779.43 1355,-3744.77 1327.56,-3713.76 1278.52,-3709.78 1242.52,-3711.83"/>
<polygon fill="blue" stroke="blue" points="1241.99,-3708.36 1232.28,-3712.59 1242.51,-3715.34 1241.99,-3708.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction(). -->
<g id="node166" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().</title>
<g id="a_node166"><a xlink:title="fn run_session_interaction(alice_session: SessionRecord, bob_session: SessionRecord) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;use rand::seq::SliceRandom; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAd...">
<polygon fill="white" stroke="black" points="1287,-4962.77 1107,-4962.77 1107,-4926.77 1287,-4926.77 1287,-4962.77"/>
<text text-anchor="middle" x="1197" y="-4941.07" font-family="Helvetica,sans-Serif" font-size="14.00">run_session_interaction</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge115" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1106.84,-4951.58C1073.87,-4948.61 1040.79,-4937.69 1025,-4908.77 998.48,-4860.2 1017.75,-4465.63 1025,-4410.77 1057.05,-4168.37 1154.69,-3887.37 1186.71,-3799.48"/>
<polygon fill="blue" stroke="blue" points="1190.04,-3800.56 1190.19,-3789.97 1183.47,-3798.15 1190.04,-3800.56"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge116" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1106.84,-4951.58C1073.87,-4948.61 1040.79,-4937.69 1025,-4908.77 1009.63,-4880.61 1009.63,-3781.93 1025,-3753.77 1048.23,-3711.22 1108.89,-3707.62 1151.56,-3711.01"/>
<polygon fill="blue" stroke="blue" points="1151.43,-3714.52 1161.72,-3711.98 1152.09,-3707.55 1151.43,-3714.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey(). -->
<g id="node167" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().</title>
<g id="a_node167"><a xlink:title="fn test_optional_one_time_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(22.in...">
<polygon fill="white" stroke="black" points="795,-5205.77 567,-5205.77 567,-5169.77 795,-5169.77 795,-5205.77"/>
<text text-anchor="middle" x="681" y="-5184.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_optional_one_time_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge143" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M756.55,-5205.82C831.31,-5219.05 944.59,-5225.03 1011,-5160.77 1089.12,-5085.17 964.29,-4996.75 1039,-4917.77 1069.62,-4885.4 1123.87,-4883.08 1159.89,-4885.8"/>
<polygon fill="blue" stroke="blue" points="1159.71,-4889.3 1169.98,-4886.74 1160.35,-4882.33 1159.71,-4889.3"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge144" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M795.32,-5193.98C878.68,-5195.8 982.27,-5191.38 1011,-5160.77 1068.95,-5099.02 983.84,-3701.02 1039,-3636.77 1056.65,-3616.21 1083.79,-3607.43 1110.57,-3604.43"/>
<polygon fill="blue" stroke="blue" points="1111.13,-3607.89 1120.79,-3603.55 1110.53,-3600.92 1111.13,-3607.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge142" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M795.32,-5193.98C878.69,-5195.81 982.28,-5191.39 1011,-5160.77 1070.98,-5096.81 981.91,-3649.31 1039,-3582.77 1055.85,-3563.13 1081.36,-3554.24 1106.95,-3550.86"/>
<polygon fill="blue" stroke="blue" points="1107.54,-3554.32 1117.12,-3549.8 1106.81,-3547.36 1107.54,-3554.32"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge141" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_optional_one_time_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M795.3,-5193.96C878.65,-5195.77 982.24,-5191.35 1011,-5160.77 1062.66,-5105.84 990.7,-3861.68 1039,-3803.77 1067.87,-3769.16 1123.07,-3765.54 1159.72,-3767.55"/>
<polygon fill="blue" stroke="blue" points="1159.77,-3771.06 1169.99,-3768.28 1160.26,-3764.08 1159.77,-3771.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages(). -->
<g id="node168" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().</title>
<g id="a_node168"><a xlink:title="fn test_simultaneous_initiate_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoic...">
<polygon fill="white" stroke="black" points="851.5,-5151.77 510.5,-5151.77 510.5,-5115.77 851.5,-5115.77 851.5,-5151.77"/>
<text text-anchor="middle" x="681" y="-5130.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge166" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M758.57,-5151.79C832.99,-5164.37 944.29,-5169.26 1011,-5106.77 1072.97,-5048.71 979.66,-4978.51 1039,-4917.77 1070.05,-4885.99 1123.95,-4883.46 1159.8,-4885.99"/>
<polygon fill="blue" stroke="blue" points="1159.59,-4889.48 1169.85,-4886.86 1160.19,-4882.51 1159.59,-4889.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge165" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.84,-5140.06C920.36,-5138.61 988.54,-5130.69 1011,-5106.77 1066.91,-5047.23 985.77,-3698.73 1039,-3636.77 1056.66,-3616.21 1083.8,-3607.44 1110.58,-3604.44"/>
<polygon fill="blue" stroke="blue" points="1111.14,-3607.9 1120.8,-3603.56 1110.54,-3600.93 1111.14,-3607.9"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge163" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.85,-5140.07C920.36,-5138.62 988.55,-5130.69 1011,-5106.77 1068.95,-5045.02 983.84,-3647.02 1039,-3582.77 1055.86,-3563.13 1081.37,-3554.24 1106.96,-3550.87"/>
<polygon fill="blue" stroke="blue" points="1107.55,-3554.33 1117.13,-3549.81 1106.82,-3547.37 1107.55,-3554.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge164" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.82,-5140.04C920.32,-5138.58 988.51,-5130.66 1011,-5106.77 1060.63,-5054.05 992.6,-3859.35 1039,-3803.77 1067.88,-3769.17 1123.08,-3765.55 1159.73,-3767.55"/>
<polygon fill="blue" stroke="blue" points="1159.77,-3771.06 1169.99,-3768.29 1160.27,-3764.08 1159.77,-3771.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge167" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M851.86,-5140.08C920.37,-5138.63 988.56,-5130.7 1011,-5106.77 1070.98,-5042.81 981.91,-3595.31 1039,-3528.77 1061.77,-3502.23 1100.34,-3495.32 1133.55,-3495.12"/>
<polygon fill="blue" stroke="blue" points="1133.61,-3498.62 1143.66,-3495.26 1133.71,-3491.63 1133.61,-3498.62"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire(). -->
<g id="node169" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().</title>
<g id="a_node169"><a xlink:title="fn test_unacknowledged_sessions_eventually_expire() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const WELL_PAST_EXPIRATION: Duration = Duration::from_secs(60 * 60 * 24 * 90); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.u...">
<polygon fill="white" stroke="black" points="862,-4449.77 500,-4449.77 500,-4413.77 862,-4413.77 862,-4449.77"/>
<text text-anchor="middle" x="681" y="-4428.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_unacknowledged_sessions_eventually_expire</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge180" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M688.22,-4413.63C722.54,-4313.3 891.53,-3815.92 1011,-3403.77 1087.5,-3139.87 1166.25,-2816.64 1189.3,-2720.8"/>
<polygon fill="blue" stroke="blue" points="1192.72,-2721.54 1191.65,-2711 1185.91,-2719.91 1192.72,-2721.54"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge182" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M684.02,-4413.55C695.88,-4315.65 765.78,-3848.6 1039,-3636.77 1059.36,-3620.99 1085.68,-3613.11 1110.94,-3609.48"/>
<polygon fill="blue" stroke="blue" points="1111.43,-3612.95 1120.92,-3608.25 1110.57,-3606 1111.43,-3612.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge179" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M683.45,-4413.7C692.61,-4312.37 751.72,-3811.09 1039,-3582.77 1058.32,-3567.42 1083.23,-3559.49 1107.51,-3555.67"/>
<polygon fill="blue" stroke="blue" points="1108.04,-3559.13 1117.48,-3554.32 1107.1,-3552.19 1108.04,-3559.13"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge178" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M686.39,-4413.66C707.9,-4329.01 810.57,-3969.44 1039,-3803.77 1074.41,-3778.09 1125.55,-3771.88 1159.74,-3770.92"/>
<polygon fill="blue" stroke="blue" points="1159.82,-3774.42 1169.77,-3770.77 1159.72,-3767.42 1159.82,-3774.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge181" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_unacknowledged_sessions_eventually_expire().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M682.97,-4413.63C689.6,-4308.49 737.75,-3773.53 1039,-3528.77 1065.24,-3507.45 1102.23,-3500.33 1133.72,-3498.72"/>
<polygon fill="blue" stroke="blue" points="1133.85,-3502.22 1143.72,-3498.38 1133.61,-3495.22 1133.85,-3502.22"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned(). -->
<g id="node170" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().</title>
<g id="a_node170"><a xlink:title="fn test_duplicate_message_error_returned() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id ...">
<polygon fill="white" stroke="black" points="825,-5367.77 537,-5367.77 537,-5331.77 825,-5331.77 825,-5367.77"/>
<text text-anchor="middle" x="681" y="-5346.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_duplicate_message_error_returned</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge194" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.05,-5356.37C901.77,-5356.47 985.66,-5349.88 1011,-5322.77 1048.16,-5283.01 1032.37,-3417.79 1039,-3363.77 1070.18,-3109.64 1158.94,-2811.49 1187.23,-2720.5"/>
<polygon fill="blue" stroke="blue" points="1190.58,-2721.51 1190.22,-2710.92 1183.9,-2719.42 1190.58,-2721.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="node187" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<g id="a_node187"><a xlink:title=" &#160;&#160;&#160;pub fn add_signed_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_signed_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;asser...">
<polygon fill="white" stroke="black" points="1711,-3735.77 1555,-3735.77 1555,-3699.77 1711,-3699.77 1711,-3735.77"/>
<text text-anchor="middle" x="1633" y="-3714.07" font-family="Helvetica,sans-Serif" font-size="14.00">add_signed_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge195" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.39,-5356.27C901.96,-5356.32 985.57,-5349.7 1011,-5322.77 1054.46,-5276.75 1001.34,-4234.64 1039,-4183.77 1127.06,-4064.82 1264.86,-4196.15 1355,-4078.77 1400.29,-4019.8 1323.62,-3798.51 1375,-3744.77 1417.56,-3700.26 1488.36,-3695.72 1544.88,-3701.08"/>
<polygon fill="blue" stroke="blue" points="1544.59,-3704.57 1554.9,-3702.15 1545.33,-3697.61 1544.59,-3704.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="node191" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<g id="a_node191"><a xlink:title=" &#160;&#160;&#160;pub fn add_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// TODO: this requirement can be removed if store returns ids in the insertion order &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;i...">
<polygon fill="white" stroke="black" points="1684.5,-3681.77 1581.5,-3681.77 1581.5,-3645.77 1684.5,-3645.77 1684.5,-3681.77"/>
<text text-anchor="middle" x="1633" y="-3660.07" font-family="Helvetica,sans-Serif" font-size="14.00">add_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge192" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.44,-5356.31C902.02,-5356.38 985.63,-5349.76 1011,-5322.77 1064.47,-5265.88 987.43,-3976.38 1039,-3917.77 1132.79,-3811.16 1256.47,-3973.01 1355,-3870.77 1410.85,-3812.81 1317.91,-3747.52 1375,-3690.77 1425.58,-3640.49 1512.43,-3642.24 1571.01,-3650.79"/>
<polygon fill="blue" stroke="blue" points="1570.82,-3654.31 1581.24,-3652.4 1571.91,-3647.39 1570.82,-3654.31"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge193" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.44,-5356.32C902.03,-5356.38 985.64,-5349.76 1011,-5322.77 1065.9,-5264.33 1000.99,-3950.37 1039,-3879.77 1064.84,-3831.77 1122.46,-3800.82 1160.24,-3784.85"/>
<polygon fill="blue" stroke="blue" points="1161.92,-3787.95 1169.86,-3780.93 1159.28,-3781.47 1161.92,-3787.95"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="node194" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<g id="a_node194"><a xlink:title=" &#160;&#160;&#160;pub fn add_kyber_pre_key(&amp;mut self, id_choice: IdChoice) { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let id = self.gen_id(id_choice); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if let Some(latest_id) = self.store.all_kyber_pre_key_ids().last() { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert!...">
<polygon fill="white" stroke="black" points="1707.5,-3789.77 1558.5,-3789.77 1558.5,-3753.77 1707.5,-3753.77 1707.5,-3789.77"/>
<text text-anchor="middle" x="1633" y="-3768.07" font-family="Helvetica,sans-Serif" font-size="14.00">add_kyber_pre_key</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge190" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.19,-5356.08C901.69,-5356.06 985.3,-5349.44 1011,-5322.77 1059.23,-5272.71 1003.64,-4757.62 1039,-4697.77 1122.71,-4556.08 1272.23,-4647.01 1355,-4504.77 1390.45,-4443.85 1334.2,-3928.24 1375,-3870.77 1414.38,-3815.3 1489.36,-3790.91 1548.21,-3780.18"/>
<polygon fill="blue" stroke="blue" points="1548.99,-3783.6 1558.26,-3778.46 1547.81,-3776.7 1548.99,-3783.6"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge191" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_duplicate_message_error_returned().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M825.01,-5356.33C901.72,-5356.43 985.62,-5349.84 1011,-5322.77 1070.98,-5258.81 981.91,-3811.31 1039,-3744.77 1066.05,-3713.25 1115.39,-3709.42 1151.56,-3711.64"/>
<polygon fill="blue" stroke="blue" points="1151.61,-3715.15 1161.85,-3712.45 1152.16,-3708.17 1151.61,-3715.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate(). -->
<g id="node171" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().</title>
<g id="a_node171"><a xlink:title="fn test_basic_simultaneous_initiate() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Random) &#160;...">
<polygon fill="white" stroke="black" points="800.5,-5097.77 561.5,-5097.77 561.5,-5061.77 800.5,-5061.77 800.5,-5097.77"/>
<text text-anchor="middle" x="681" y="-5076.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_simultaneous_initiate</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge211" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M763.08,-5097.79C836.85,-5109.07 944.13,-5111.9 1011,-5052.77 1056.9,-5012.18 994.94,-4960.35 1039,-4917.77 1070.72,-4887.11 1123.86,-4884.18 1159.41,-4886.32"/>
<polygon fill="blue" stroke="blue" points="1159.6,-4889.84 1169.84,-4887.12 1160.14,-4882.86 1159.6,-4889.84"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge212" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.88,-5086.08C883.22,-5087.57 982.89,-5082.68 1011,-5052.77 1064.88,-4995.43 987.7,-3696.43 1039,-3636.77 1056.67,-3616.22 1083.81,-3607.45 1110.59,-3604.44"/>
<polygon fill="blue" stroke="blue" points="1111.15,-3607.91 1120.81,-3603.56 1110.55,-3600.93 1111.15,-3607.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge213" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.89,-5086.08C883.23,-5087.58 982.9,-5082.69 1011,-5052.77 1066.91,-4993.23 985.77,-3644.73 1039,-3582.77 1055.87,-3563.14 1081.38,-3554.25 1106.97,-3550.88"/>
<polygon fill="blue" stroke="blue" points="1107.56,-3554.33 1117.14,-3549.81 1106.83,-3547.37 1107.56,-3554.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge209" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.86,-5086.06C883.19,-5087.54 982.85,-5082.65 1011,-5052.77 1058.6,-5002.25 994.5,-3857.03 1039,-3803.77 1067.9,-3769.19 1123.1,-3765.56 1159.73,-3767.56"/>
<polygon fill="blue" stroke="blue" points="1159.78,-3771.07 1170,-3768.29 1160.27,-3764.09 1159.78,-3771.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge210" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_simultaneous_initiate().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M800.89,-5086.09C883.24,-5087.59 982.91,-5082.7 1011,-5052.77 1068.95,-4991.02 983.84,-3593.02 1039,-3528.77 1061.78,-3502.24 1100.34,-3495.33 1133.55,-3495.13"/>
<polygon fill="blue" stroke="blue" points="1133.62,-3498.63 1143.66,-3495.27 1133.71,-3491.63 1133.62,-3498.63"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically(). -->
<g id="node172" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().</title>
<g id="a_node172"><a xlink:title="fn x3dh_prekey_rejected_as_invalid_message_specifically() { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_device_id...">
<polygon fill="white" stroke="black" points="878.5,-5259.77 483.5,-5259.77 483.5,-5223.77 878.5,-5223.77 878.5,-5259.77"/>
<text text-anchor="middle" x="681" y="-5238.07" font-family="Helvetica,sans-Serif" font-size="14.00">x3dh_prekey_rejected_as_invalid_message_specifically</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge226" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.7,-5247.18C937.49,-5244.31 991.52,-5235.59 1011,-5214.77 1046.13,-5177.21 1032.72,-3414.81 1039,-3363.77 1070.28,-3109.66 1158.98,-2811.49 1187.24,-2720.5"/>
<polygon fill="blue" stroke="blue" points="1190.59,-2721.51 1190.23,-2710.92 1183.91,-2719.42 1190.59,-2721.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge227" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.58,-5247.07C937.36,-5244.19 991.42,-5235.49 1011,-5214.77 1053.25,-5170.05 1012.85,-4163.45 1039,-4107.77 1118.27,-3938.99 1259.22,-3991.76 1355,-3831.77 1375.38,-3797.73 1345.3,-3771.07 1375,-3744.77 1420.45,-3704.52 1489.67,-3699.28 1544.82,-3703.28"/>
<polygon fill="blue" stroke="blue" points="1544.69,-3706.78 1554.95,-3704.13 1545.27,-3699.81 1544.69,-3706.78"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge230" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.63,-5247.12C937.42,-5244.24 991.47,-5235.54 1011,-5214.77 1063.26,-5159.19 988.24,-3898.72 1039,-3841.77 1133.31,-3735.96 1252.41,-3896.57 1355,-3798.77 1390.33,-3765.09 1339.15,-3723.91 1375,-3690.77 1427.21,-3642.5 1513.27,-3643.65 1571.26,-3651.53"/>
<polygon fill="blue" stroke="blue" points="1570.99,-3655.02 1581.39,-3653.01 1572,-3648.1 1570.99,-3655.02"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge229" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.64,-5247.13C937.43,-5244.25 991.47,-5235.55 1011,-5214.77 1064.69,-5157.64 988.8,-3864 1039,-3803.77 1067.85,-3769.15 1123.06,-3765.53 1159.72,-3767.54"/>
<polygon fill="blue" stroke="blue" points="1159.76,-3771.05 1169.99,-3768.28 1160.26,-3764.07 1159.76,-3771.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge228" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.82,-5246.85C937.41,-5243.93 991.29,-5235.27 1011,-5214.77 1061.42,-5162.34 1016.06,-4629.79 1039,-4560.77 1117.57,-4324.35 1271.12,-4332.36 1355,-4097.77 1372.05,-4050.09 1344.54,-3911.22 1375,-3870.77 1415.79,-3816.61 1490.24,-3792.08 1548.55,-3780.96"/>
<polygon fill="blue" stroke="blue" points="1549.28,-3784.39 1558.49,-3779.17 1548.03,-3777.5 1549.28,-3784.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge231" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 x3dh_prekey_rejected_as_invalid_message_specifically().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M878.65,-5247.14C937.44,-5244.26 991.48,-5235.55 1011,-5214.77 1066.91,-5155.23 985.77,-3806.73 1039,-3744.77 1066.07,-3713.27 1115.4,-3709.43 1151.57,-3711.65"/>
<polygon fill="blue" stroke="blue" points="1151.62,-3715.16 1161.86,-3712.46 1152.17,-3708.18 1151.62,-3715.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session(). -->
<g id="node173" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().</title>
<g id="a_node173"><a xlink:title="fn test_basic_session() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let (alice_session, bob_session) = initialize_sessions_v4()?; &#160;&#160;&#160;&#160;run_session_interaction(alice_session, bob_session)?; &#160;&#160;&#160;&#160;Ok(()) }">
<polygon fill="white" stroke="black" points="753,-5745.77 609,-5745.77 609,-5709.77 753,-5709.77 753,-5745.77"/>
<text text-anchor="middle" x="681" y="-5724.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_session</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction(). -->
<g id="edge254" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_session_interaction().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M753.25,-5743.78C826.69,-5755.8 940.15,-5761.22 1011,-5700.77 1126,-5602.65 1181.3,-5098.54 1193.41,-4973.07"/>
<polygon fill="blue" stroke="blue" points="1196.92,-4973.06 1194.39,-4962.77 1189.96,-4972.39 1196.92,-4973.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4(). -->
<g id="edge253" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_session().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.98,-5745.81C826.64,-5760.97 945.96,-5770.39 1011,-5700.77 1087.24,-5619.16 966.44,-3775.66 1039,-3690.77 1055.27,-3671.74 1079.66,-3662.79 1104.4,-3659.17"/>
<polygon fill="blue" stroke="blue" points="1105.11,-3662.61 1114.63,-3657.97 1104.29,-3655.66 1105.11,-3662.61"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages(). -->
<g id="node174" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().</title>
<g id="a_node174"><a xlink:title="fn test_simultaneous_initiate_lost_message_repeated_messages() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdCh...">
<polygon fill="white" stroke="black" points="902,-5529.77 460,-5529.77 460,-5493.77 902,-5493.77 902,-5529.77"/>
<text text-anchor="middle" x="681" y="-5508.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message_repeated_messages</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge287" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M902.31,-5515.25C951.36,-5511.28 993.91,-5502.42 1011,-5484.77 1054.87,-5439.45 997.18,-4964.99 1039,-4917.77 1068.63,-4884.32 1123.38,-4882.34 1159.76,-4885.43"/>
<polygon fill="blue" stroke="blue" points="1159.65,-4888.93 1169.95,-4886.46 1160.35,-4881.97 1159.65,-4888.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge289" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M902.2,-5515.59C951.42,-5511.63 994.1,-5502.7 1011,-5484.77 1057.69,-5435.23 995.23,-4311.9 1039,-4259.77 1131.09,-4150.09 1261.75,-4305.46 1355,-4196.77 1387.73,-4158.62 1340.54,-3781.37 1375,-3744.77 1417.28,-3699.85 1488.28,-3695.4 1544.95,-3700.9"/>
<polygon fill="blue" stroke="blue" points="1544.68,-3704.39 1555,-3701.99 1545.43,-3697.43 1544.68,-3704.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge288" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M902.25,-5515.63C951.47,-5511.68 994.13,-5502.74 1011,-5484.77 1067.71,-5424.37 984.41,-4056.09 1039,-3993.77 1132.61,-3886.92 1258.26,-4049.79 1355,-3945.77 1393.71,-3904.15 1335.34,-3731.49 1375,-3690.77 1425.01,-3639.42 1512.69,-3641.65 1571.54,-3650.58"/>
<polygon fill="blue" stroke="blue" points="1571.03,-3654.04 1581.46,-3652.19 1572.15,-3647.13 1571.03,-3654.04"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge286" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message_repeated_messages().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M902.42,-5515.36C951.46,-5511.39 993.99,-5502.5 1011,-5484.77 1064.57,-5428.91 991.58,-4849.94 1039,-4788.77 1128.86,-4672.87 1266.07,-4810.38 1355,-4693.77 1410.47,-4621.04 1322.32,-3945.55 1375,-3870.77 1414.24,-3815.07 1489.43,-3790.7 1548.39,-3780.05"/>
<polygon fill="blue" stroke="blue" points="1549.18,-3783.46 1558.45,-3778.33 1548,-3776.56 1549.18,-3783.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit(). -->
<g id="node175" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().</title>
<g id="a_node175"><a xlink:title="fn test_chain_jump_over_limit() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut bob_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(31337.into()) &#160;...">
<polygon fill="white" stroke="black" points="782.5,-5043.77 579.5,-5043.77 579.5,-5007.77 782.5,-5007.77 782.5,-5043.77"/>
<text text-anchor="middle" x="681" y="-5022.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge295" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M778.01,-5043.8C849.52,-5051.59 945.69,-5049.45 1011,-4998.77 1041.09,-4975.42 1009.97,-4942.43 1039,-4917.77 1072.43,-4889.37 1124.69,-4885.8 1159.63,-4887.19"/>
<polygon fill="blue" stroke="blue" points="1159.69,-4890.7 1169.87,-4887.76 1160.08,-4883.71 1159.69,-4890.7"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge296" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.67,-5031.64C867.85,-5034.16 980.77,-5030.92 1011,-4998.77 1062.85,-4943.64 989.64,-3694.14 1039,-3636.77 1056.67,-3616.23 1083.82,-3607.46 1110.59,-3604.45"/>
<polygon fill="blue" stroke="blue" points="1111.16,-3607.92 1120.82,-3603.57 1110.55,-3600.94 1111.16,-3607.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge292" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.68,-5031.64C867.86,-5034.17 980.78,-5030.93 1011,-4998.77 1064.88,-4941.43 987.7,-3642.43 1039,-3582.77 1055.87,-3563.14 1081.39,-3554.26 1106.97,-3550.88"/>
<polygon fill="blue" stroke="blue" points="1107.56,-3554.34 1117.15,-3549.82 1106.84,-3547.38 1107.56,-3554.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge294" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.65,-5031.62C867.81,-5034.12 980.72,-5030.87 1011,-4998.77 1056.56,-4950.46 996.39,-3854.71 1039,-3803.77 1067.83,-3769.3 1122.8,-3765.59 1159.43,-3767.55"/>
<polygon fill="blue" stroke="blue" points="1159.48,-3771.06 1169.7,-3768.27 1159.97,-3764.08 1159.48,-3771.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge293" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M782.68,-5031.65C867.87,-5034.17 980.79,-5030.94 1011,-4998.77 1066.91,-4939.23 985.77,-3590.73 1039,-3528.77 1061.78,-3502.25 1100.35,-3495.34 1133.56,-3495.13"/>
<polygon fill="blue" stroke="blue" points="1133.62,-3498.64 1143.67,-3495.27 1133.72,-3491.64 1133.62,-3498.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message(). -->
<g id="node176" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().</title>
<g id="a_node176"><a xlink:title="fn test_simultaneous_initiate_lost_message() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut alice_store_builder = TestStoreBuilder::new() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_pre_key(IdChoice::Random) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.with_signed_pre_key(IdChoice::Ra...">
<polygon fill="white" stroke="black" points="829.5,-4989.77 532.5,-4989.77 532.5,-4953.77 829.5,-4953.77 829.5,-4989.77"/>
<text text-anchor="middle" x="681" y="-4968.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_simultaneous_initiate_lost_message</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge310" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.83,-4980.65C888.48,-4978.89 955.12,-4970.03 1011,-4944.77 1026.75,-4937.65 1023.58,-4925.58 1039,-4917.77 1077.18,-4898.43 1126.57,-4892.61 1159.67,-4891.02"/>
<polygon fill="blue" stroke="blue" points="1159.94,-4894.52 1169.81,-4890.65 1159.68,-4887.52 1159.94,-4894.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge311" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.87,-4978.3C905.21,-4978.09 986.11,-4971.22 1011,-4944.77 1060.82,-4891.84 991.57,-3691.84 1039,-3636.77 1056.68,-3616.24 1083.83,-3607.46 1110.6,-3604.46"/>
<polygon fill="blue" stroke="blue" points="1111.17,-3607.92 1120.83,-3603.58 1110.56,-3600.95 1111.17,-3607.92"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge314" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.88,-4978.3C905.22,-4978.1 986.12,-4971.23 1011,-4944.77 1062.85,-4889.64 989.64,-3640.14 1039,-3582.77 1055.88,-3563.15 1081.4,-3554.27 1106.98,-3550.89"/>
<polygon fill="blue" stroke="blue" points="1107.57,-3554.35 1117.16,-3549.83 1106.84,-3547.39 1107.57,-3554.35"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge312" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.84,-4978.27C905.17,-4978.05 986.06,-4971.18 1011,-4944.77 1054.53,-4898.67 998.29,-3852.38 1039,-3803.77 1067.85,-3769.31 1122.81,-3765.6 1159.44,-3767.55"/>
<polygon fill="blue" stroke="blue" points="1159.49,-3771.06 1169.71,-3768.27 1159.98,-3764.08 1159.49,-3771.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge313" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_simultaneous_initiate_lost_message().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M829.89,-4978.31C905.23,-4978.11 986.13,-4971.24 1011,-4944.77 1064.88,-4887.43 987.7,-3588.43 1039,-3528.77 1061.79,-3502.26 1100.36,-3495.35 1133.57,-3495.14"/>
<polygon fill="blue" stroke="blue" points="1133.63,-3498.64 1143.68,-3495.28 1133.73,-3491.64 1133.63,-3498.64"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved(). -->
<g id="node177" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().</title>
<g id="a_node177"><a xlink:title="fn test_signedprekey_not_saved() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;build...">
<polygon fill="white" stroke="black" points="791,-5583.77 571,-5583.77 571,-5547.77 791,-5547.77 791,-5583.77"/>
<text text-anchor="middle" x="681" y="-5562.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_signedprekey_not_saved</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge318" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.27,-5571.68C875.14,-5573.6 981.42,-5569.46 1011,-5538.77 1058.93,-5489.04 993.31,-4969.57 1039,-4917.77 1068.55,-4884.26 1123.33,-4882.29 1159.73,-4885.4"/>
<polygon fill="blue" stroke="blue" points="1159.62,-4888.91 1169.93,-4886.44 1160.33,-4881.94 1159.62,-4888.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge315" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.03,-5571.85C875.07,-5573.89 981.72,-5569.84 1011,-5538.77 1058.3,-5488.58 994.1,-4350.11 1039,-4297.77 1131.86,-4189.51 1261.19,-4349.21 1355,-4241.77 1391.35,-4200.14 1337.2,-3785.09 1375,-3744.77 1417.19,-3699.77 1488.2,-3695.32 1544.89,-3700.84"/>
<polygon fill="blue" stroke="blue" points="1544.62,-3704.33 1554.94,-3701.94 1545.38,-3697.37 1544.62,-3704.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge316" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.07,-5571.88C875.12,-5573.94 981.78,-5569.9 1011,-5538.77 1068.31,-5477.71 983.83,-4094.76 1039,-4031.77 1132.6,-3924.91 1258.78,-4088.28 1355,-3983.77 1399.2,-3935.76 1329.7,-3737.75 1375,-3690.77 1424.75,-3639.17 1512.49,-3641.46 1571.43,-3650.47"/>
<polygon fill="blue" stroke="blue" points="1570.93,-3653.93 1581.36,-3652.09 1572.06,-3647.03 1570.93,-3653.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge317" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_signedprekey_not_saved().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M791.32,-5571.73C875.21,-5573.67 981.51,-5569.54 1011,-5538.77 1065.55,-5481.85 988.9,-4890.64 1039,-4829.77 1130.73,-4718.32 1264.21,-4866.99 1355,-4754.77 1385.9,-4716.58 1346.74,-3910.95 1375,-3870.77 1414.19,-3815.03 1489.39,-3790.67 1548.36,-3780.03"/>
<polygon fill="blue" stroke="blue" points="1549.15,-3783.44 1558.42,-3778.31 1547.98,-3776.54 1549.15,-3783.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self(). -->
<g id="node178" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().</title>
<g id="a_node178"><a xlink:title="fn test_chain_jump_over_limit_with_self() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;let mut store_builder_one = TestStoreBuilder::new(); &#160;&#160;&#160;&#160;let mut store_builder_two = TestStoreBuilder::from_store(&amp;store_builder_one.store...">
<polygon fill="white" stroke="black" points="816.5,-4935.77 545.5,-4935.77 545.5,-4899.77 816.5,-4899.77 816.5,-4935.77"/>
<text text-anchor="middle" x="681" y="-4914.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_chain_jump_over_limit_with_self</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge347" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.71,-4910.69C931.86,-4904.64 1089.72,-4896.35 1159.87,-4892.67"/>
<polygon fill="blue" stroke="blue" points="1160.16,-4896.16 1169.96,-4892.14 1159.79,-4889.17 1160.16,-4896.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge346" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.56,-4924.26C895.43,-4924.83 984.62,-4918.77 1011,-4890.77 1058.79,-4840.05 993.5,-3689.55 1039,-3636.77 1056.69,-3616.24 1083.84,-3607.47 1110.62,-3604.47"/>
<polygon fill="blue" stroke="blue" points="1111.18,-3607.93 1120.84,-3603.59 1110.57,-3600.96 1111.18,-3607.93"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge345" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.57,-4924.26C895.44,-4924.84 984.63,-4918.78 1011,-4890.77 1060.82,-4837.84 991.57,-3637.84 1039,-3582.77 1055.89,-3563.16 1081.41,-3554.28 1106.99,-3550.9"/>
<polygon fill="blue" stroke="blue" points="1107.58,-3554.36 1117.16,-3549.84 1106.85,-3547.4 1107.58,-3554.36"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge348" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.53,-4924.23C895.38,-4924.78 984.57,-4918.72 1011,-4890.77 1052.5,-4846.87 1000.19,-3850.06 1039,-3803.77 1067.87,-3769.33 1122.83,-3765.62 1159.45,-3767.56"/>
<polygon fill="blue" stroke="blue" points="1159.5,-3771.07 1169.71,-3768.28 1159.98,-3764.09 1159.5,-3771.07"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge344" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_chain_jump_over_limit_with_self().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M816.58,-4924.27C895.45,-4924.85 984.64,-4918.79 1011,-4890.77 1062.85,-4835.64 989.64,-3586.14 1039,-3528.77 1061.8,-3502.27 1100.37,-3495.35 1133.58,-3495.15"/>
<polygon fill="blue" stroke="blue" points="1133.64,-3498.65 1143.68,-3495.28 1133.73,-3491.65 1133.64,-3498.65"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived(). -->
<g id="node179" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().</title>
<g id="a_node179"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived( ) &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="1011,-4719.77 351,-4719.77 351,-4683.77 1011,-4683.77 1011,-4719.77"/>
<text text-anchor="middle" x="681" y="-4698.07" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge383" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.47,-4683.62C1004.07,-4680.95 1007.96,-4678 1011,-4674.77 1035.97,-4648.25 1034.44,-3399.91 1039,-3363.77 1071.07,-3109.76 1159.24,-2811.53 1187.3,-2720.51"/>
<polygon fill="blue" stroke="blue" points="1190.65,-2721.51 1190.27,-2710.93 1183.97,-2719.44 1190.65,-2721.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge384" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.44,-4683.59C1004.06,-4680.93 1007.95,-4678 1011,-4674.77 1090.31,-4590.98 963.47,-3723.98 1039,-3636.77 1056.74,-3616.28 1083.9,-3607.53 1110.67,-3604.52"/>
<polygon fill="blue" stroke="blue" points="1111.23,-3607.98 1120.89,-3603.63 1110.63,-3601.01 1111.23,-3607.98"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge385" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.45,-4683.6C1004.06,-4680.93 1007.95,-4678 1011,-4674.77 1052.69,-4630.67 999.3,-3628.67 1039,-3582.77 1055.93,-3563.19 1081.46,-3554.32 1107.04,-3550.94"/>
<polygon fill="blue" stroke="blue" points="1107.63,-3554.4 1117.21,-3549.88 1106.9,-3547.44 1107.63,-3554.4"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge386" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.42,-4683.57C1004.04,-4680.91 1007.94,-4677.99 1011,-4674.77 1077.74,-4604.62 976.55,-3877.77 1039,-3803.77 1067.98,-3769.42 1122.91,-3765.68 1159.49,-3767.6"/>
<polygon fill="blue" stroke="blue" points="1159.53,-3771.11 1169.75,-3768.31 1160.01,-3764.13 1159.53,-3771.11"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge388" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.45,-4683.61C1004.06,-4680.94 1007.95,-4678 1011,-4674.77 1054.72,-4628.46 997.37,-3576.96 1039,-3528.77 1061.86,-3502.31 1100.43,-3495.4 1133.62,-3495.18"/>
<polygon fill="blue" stroke="blue" points="1133.67,-3498.68 1143.72,-3495.32 1133.77,-3491.68 1133.67,-3498.68"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge387" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores_even_when_previously_archived().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M999.43,-4683.58C1004.05,-4680.92 1007.94,-4677.99 1011,-4674.77 1082.18,-4599.8 971.2,-3822.81 1039,-3744.77 1066.24,-3713.42 1115.55,-3709.56 1151.66,-3711.72"/>
<polygon fill="blue" stroke="blue" points="1151.69,-3715.24 1161.93,-3712.52 1152.24,-3708.26 1151.69,-3715.24"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions(). -->
<g id="node180" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().</title>
<g id="a_node180"><a xlink:title="fn test_longer_sessions() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;init_logger(); &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2000, &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice...">
<polygon fill="white" stroke="black" points="761,-5475.77 601,-5475.77 601,-5439.77 761,-5439.77 761,-5475.77"/>
<text text-anchor="middle" x="681" y="-5454.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_longer_sessions</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge391" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.16,-5462.67C847.4,-5466.11 977.58,-5465.12 1011,-5430.77 1090.62,-5348.94 963.08,-5003.04 1039,-4917.77 1068.71,-4884.4 1123.45,-4882.39 1159.79,-4885.46"/>
<polygon fill="blue" stroke="blue" points="1159.67,-4888.96 1169.98,-4886.49 1160.38,-4882 1159.67,-4888.96"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge392" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.35,-5462.86C847.78,-5466.47 978.12,-5465.64 1011,-5430.77 1057.09,-5381.89 996.89,-4274.12 1039,-4221.77 1129.61,-4109.14 1262.89,-4256.18 1355,-4144.77 1383.36,-4110.47 1344.41,-3777.08 1375,-3744.77 1417.34,-3700.05 1488.15,-3695.52 1544.74,-3700.95"/>
<polygon fill="blue" stroke="blue" points="1544.46,-3704.43 1554.77,-3702.02 1545.2,-3697.47 1544.46,-3704.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge394" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.38,-5462.88C847.83,-5466.52 978.19,-5465.71 1011,-5430.77 1067.1,-5371.02 984.99,-4017.41 1039,-3955.77 1132.62,-3848.93 1257.55,-4011.13 1355,-3907.77 1388.22,-3872.53 1340.98,-3725.23 1375,-3690.77 1425.28,-3639.84 1512.69,-3641.9 1571.43,-3650.68"/>
<polygon fill="blue" stroke="blue" points="1570.9,-3654.14 1581.33,-3652.27 1572,-3647.23 1570.9,-3654.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge393" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_longer_sessions().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M761.24,-5462.75C847.56,-5466.27 977.81,-5465.35 1011,-5430.77 1063.75,-5375.81 995.4,-4808.24 1039,-4745.77 1126.01,-4621.1 1268.86,-4740.05 1355,-4614.77 1401.85,-4546.63 1327.29,-3938.31 1375,-3870.77 1414.31,-3815.12 1489.49,-3790.75 1548.43,-3780.08"/>
<polygon fill="blue" stroke="blue" points="1549.22,-3783.49 1558.49,-3778.36 1548.04,-3776.59 1549.22,-3783.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled(). -->
<g id="node181" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().</title>
<g id="a_node181"><a xlink:title="fn test_pqr_state_and_message_contents_nonempty_if_enabled() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_device_id = DeviceId::new(1).unwrap(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...">
<polygon fill="white" stroke="black" points="900.5,-5313.77 461.5,-5313.77 461.5,-5277.77 900.5,-5277.77 900.5,-5313.77"/>
<text text-anchor="middle" x="681" y="-5292.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_pqr_state_and_message_contents_nonempty_if_enabled</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge395" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.57,-5299.81C950.52,-5295.93 993.97,-5286.98 1011,-5268.77 1047.14,-5230.11 1032.55,-3416.3 1039,-3363.77 1070.23,-3109.65 1158.96,-2811.49 1187.23,-2720.5"/>
<polygon fill="blue" stroke="blue" points="1190.58,-2721.51 1190.22,-2710.92 1183.9,-2719.42 1190.58,-2721.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge398" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.88,-5299.67C950.65,-5295.76 993.93,-5286.84 1011,-5268.77 1053.85,-5223.4 1005.8,-4198.61 1039,-4145.77 1122.97,-4012.14 1267.16,-4114.89 1355,-3983.77 1384.66,-3939.49 1337.71,-3782.85 1375,-3744.77 1418.01,-3700.84 1488.6,-3696.2 1544.93,-3701.38"/>
<polygon fill="blue" stroke="blue" points="1544.61,-3704.87 1554.91,-3702.41 1545.33,-3697.9 1544.61,-3704.87"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge397" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.51,-5299.75C950.46,-5295.87 993.92,-5286.93 1011,-5268.77 1063.87,-5212.54 987.92,-3937.63 1039,-3879.77 1132.92,-3773.37 1254.93,-3934.41 1355,-3833.77 1400.25,-3788.26 1328.85,-3735.36 1375,-3690.77 1426.21,-3641.29 1512.71,-3642.79 1571.05,-3651.07"/>
<polygon fill="blue" stroke="blue" points="1570.83,-3654.57 1581.25,-3652.62 1571.89,-3647.65 1570.83,-3654.57"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge396" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.52,-5299.76C950.46,-5295.88 993.93,-5286.94 1011,-5268.77 1065.3,-5210.98 995.18,-3907.85 1039,-3841.77 1065.98,-3801.07 1122.61,-3783.8 1159.96,-3776.64"/>
<polygon fill="blue" stroke="blue" points="1160.71,-3780.06 1169.95,-3774.87 1159.49,-3773.17 1160.71,-3780.06"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge399" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.65,-5299.45C950.42,-5295.54 993.75,-5286.67 1011,-5268.77 1059.53,-5218.39 1009.81,-4703.35 1039,-4639.77 1119.42,-4464.61 1274.76,-4518.01 1355,-4342.77 1376.85,-4295.04 1344.38,-3913.41 1375,-3870.77 1414.68,-3815.51 1489.63,-3791.1 1548.39,-3780.31"/>
<polygon fill="blue" stroke="blue" points="1549.16,-3783.73 1558.42,-3778.57 1547.97,-3776.83 1549.16,-3783.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge400" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_pqr_state_and_message_contents_nonempty_if_enabled().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M900.53,-5299.77C950.48,-5295.89 993.94,-5286.95 1011,-5268.77 1068.95,-5207.02 983.84,-3809.02 1039,-3744.77 1066.06,-3713.26 1115.4,-3709.42 1151.57,-3711.64"/>
<polygon fill="blue" stroke="blue" points="1151.61,-3715.16 1161.86,-3712.45 1152.16,-3708.18 1151.61,-3715.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey(). -->
<g id="node182" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().</title>
<g id="a_node182"><a xlink:title="fn test_basic_prekey() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;run( &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;|builder| { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_signed_pre_key(IdChoice::Next); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;builder.add_kyb...">
<polygon fill="white" stroke="black" points="750.5,-5637.77 611.5,-5637.77 611.5,-5601.77 750.5,-5601.77 750.5,-5637.77"/>
<text text-anchor="middle" x="681" y="-5616.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_basic_prekey</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run(). -->
<g id="edge403" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.64,-5624.29C836.48,-5628.28 976.41,-5628.78 1011,-5592.77 1062.99,-5538.63 989.45,-4974.16 1039,-4917.77 1068.49,-4884.21 1123.29,-4882.25 1159.7,-4885.38"/>
<polygon fill="blue" stroke="blue" points="1159.6,-4888.89 1169.91,-4886.43 1160.32,-4881.92 1159.6,-4888.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge402" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.68,-5624.32C836.55,-5628.35 976.52,-5628.89 1011,-5592.77 1041.36,-5560.96 1026.36,-4843.89 1039,-4801.77 1116.52,-4543.47 1277.26,-4542 1355,-4283.77 1372.28,-4226.38 1334.08,-3788.55 1375,-3744.77 1417.12,-3699.7 1488.13,-3695.26 1544.85,-3700.8"/>
<polygon fill="blue" stroke="blue" points="1544.58,-3704.29 1554.9,-3701.9 1545.34,-3697.33 1544.58,-3704.29"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge401" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.75,-5624.39C836.72,-5628.5 976.78,-5629.13 1011,-5592.77 1061.01,-5539.64 1007.02,-4345.35 1039,-4279.77 1118.47,-4116.8 1272.37,-4183.15 1355,-4021.77 1371.79,-3988.97 1349.53,-3717.39 1375,-3690.77 1424.54,-3638.98 1512.34,-3641.31 1571.35,-3650.39"/>
<polygon fill="blue" stroke="blue" points="1570.85,-3653.85 1581.29,-3652.02 1571.99,-3646.95 1570.85,-3653.85"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge404" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_basic_prekey().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M750.66,-5624.3C836.52,-5628.31 976.47,-5628.84 1011,-5592.77 1067.06,-5534.22 985.93,-4925.04 1039,-4863.77 1132.49,-4755.84 1262.43,-4914.49 1355,-4805.77 1388.68,-4766.21 1345.14,-3913.29 1375,-3870.77 1414.16,-3815.01 1489.36,-3790.65 1548.34,-3780.01"/>
<polygon fill="blue" stroke="blue" points="1549.13,-3783.43 1558.4,-3778.3 1547.96,-3776.53 1549.13,-3783.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores(). -->
<g id="node183" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().</title>
<g id="a_node183"><a xlink:title="fn prekey_message_failed_decryption_does_not_update_stores() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14...">
<polygon fill="white" stroke="black" points="896.5,-4665.77 465.5,-4665.77 465.5,-4629.77 896.5,-4629.77 896.5,-4665.77"/>
<text text-anchor="middle" x="681" y="-4644.07" font-family="Helvetica,sans-Serif" font-size="14.00">prekey_message_failed_decryption_does_not_update_stores</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge417" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M896.6,-4652.02C948.17,-4648.3 993.46,-4639.38 1011,-4620.77 1034.95,-4595.35 1034.61,-3398.42 1039,-3363.77 1071.19,-3109.77 1159.27,-2811.53 1187.31,-2720.51"/>
<polygon fill="blue" stroke="blue" points="1190.66,-2721.51 1190.28,-2710.93 1183.98,-2719.45 1190.66,-2721.51"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge418" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M896.52,-4651.95C948.09,-4648.23 993.41,-4639.33 1011,-4620.77 1086.25,-4541.39 967.33,-3719.4 1039,-3636.77 1056.76,-3616.3 1083.92,-3607.54 1110.69,-3604.53"/>
<polygon fill="blue" stroke="blue" points="1111.25,-3608 1120.91,-3603.65 1110.64,-3601.02 1111.25,-3608"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge416" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M896.54,-4651.97C948.11,-4648.25 993.42,-4639.34 1011,-4620.77 1090.31,-4536.98 963.47,-3669.98 1039,-3582.77 1055.94,-3563.21 1081.48,-3554.34 1107.06,-3550.96"/>
<polygon fill="blue" stroke="blue" points="1107.65,-3554.42 1117.23,-3549.89 1106.92,-3547.45 1107.65,-3554.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge413" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M896.89,-4651.85C948.27,-4648.11 993.4,-4639.23 1011,-4620.77 1073.68,-4555.03 980.35,-3873.12 1039,-3803.77 1068.02,-3769.46 1122.94,-3765.71 1159.51,-3767.61"/>
<polygon fill="blue" stroke="blue" points="1159.54,-3771.12 1169.76,-3768.32 1160.02,-3764.14 1159.54,-3771.12"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge415" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M896.56,-4651.98C948.12,-4648.26 993.43,-4639.35 1011,-4620.77 1052.69,-4576.67 999.3,-3574.67 1039,-3528.77 1061.87,-3502.32 1100.44,-3495.41 1133.63,-3495.19"/>
<polygon fill="blue" stroke="blue" points="1133.69,-3498.69 1143.73,-3495.32 1133.78,-3491.69 1133.69,-3498.69"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge414" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 prekey_message_failed_decryption_does_not_update_stores().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M896.91,-4651.88C948.3,-4648.14 993.42,-4639.25 1011,-4620.77 1078.12,-4550.21 975.06,-3818.22 1039,-3744.77 1066.27,-3713.44 1115.57,-3709.58 1151.67,-3711.74"/>
<polygon fill="blue" stroke="blue" points="1151.71,-3715.25 1161.95,-3712.53 1152.25,-3708.27 1151.71,-3715.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature(). -->
<g id="node184" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().</title>
<g id="a_node184"><a xlink:title="fn test_bad_signed_pre_key_signature() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let bob_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111112&#39; .to_owned(), ...">
<polygon fill="white" stroke="black" points="811.5,-4503.77 550.5,-4503.77 550.5,-4467.77 811.5,-4467.77 811.5,-4503.77"/>
<text text-anchor="middle" x="681" y="-4482.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_bad_signed_pre_key_signature</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge427" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M811.7,-4492.18C891.71,-4493.03 984.03,-4487.3 1011,-4458.77 1052.8,-4414.55 1031.25,-3424.13 1039,-3363.77 1071.61,-3109.82 1159.41,-2811.55 1187.34,-2720.52"/>
<polygon fill="blue" stroke="blue" points="1190.7,-2721.52 1190.3,-2710.93 1184.01,-2719.45 1190.7,-2721.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge431" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M811.62,-4492.11C891.59,-4492.92 983.91,-4487.18 1011,-4458.77 1074.06,-4392.62 978.93,-3705.64 1039,-3636.77 1056.81,-3616.35 1083.99,-3607.6 1110.75,-3604.59"/>
<polygon fill="blue" stroke="blue" points="1111.31,-3608.05 1120.97,-3603.7 1110.7,-3601.08 1111.31,-3608.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge430" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M811.64,-4492.13C891.62,-4492.95 983.94,-4487.21 1011,-4458.77 1078.12,-4388.21 975.06,-3656.22 1039,-3582.77 1055.99,-3563.25 1081.54,-3554.39 1107.12,-3551.01"/>
<polygon fill="blue" stroke="blue" points="1107.71,-3554.47 1117.29,-3549.94 1106.97,-3547.5 1107.71,-3554.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge429" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M811.54,-4492.03C891.48,-4492.81 983.79,-4487.07 1011,-4458.77 1061.49,-4406.26 991.73,-3859.19 1039,-3803.77 1068.16,-3769.58 1123.04,-3765.8 1159.57,-3767.66"/>
<polygon fill="blue" stroke="blue" points="1159.59,-3771.17 1169.81,-3768.35 1160.06,-3764.19 1159.59,-3771.17"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge428" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_bad_signed_pre_key_signature().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M811.66,-4492.15C891.65,-4492.97 983.97,-4487.24 1011,-4458.77 1082.18,-4383.8 971.2,-3606.81 1039,-3528.77 1061.93,-3502.37 1100.5,-3495.46 1133.67,-3495.23"/>
<polygon fill="blue" stroke="blue" points="1133.73,-3498.73 1143.77,-3495.36 1133.82,-3491.73 1133.73,-3498.73"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge453" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.19,-4892.44C1260.17,-4893.12 1323.93,-4888.23 1355,-4848.77 1411.44,-4777.07 1320.52,-4100.97 1375,-4027.77 1524.61,-3826.73 1664.34,-3897.02 1911,-3852.77 1949.85,-3845.8 2593.12,-3852.72 2621,-3824.77 2680.52,-3765.1 2592.49,-3129.3 2649,-3066.77 2709.62,-2999.69 2790.66,-3106.55 2850.5,-3038.77 2905.4,-2976.58 2819.33,-1610.66 2871,-1545.77 2885.61,-1527.41 2910.46,-1520.28 2932.9,-1517.91"/>
<polygon fill="blue" stroke="blue" points="2933.29,-1521.39 2942.99,-1517.13 2932.75,-1514.41 2933.29,-1521.39"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge454" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1169.93,-4894.48C1128.68,-4898.39 1052.03,-4898.28 1025,-4848.77 1005.35,-4812.78 1019.93,-3413.46 1025,-3372.77 1057.23,-3113.88 1155.98,-2812.05 1187.34,-2720.48"/>
<polygon fill="blue" stroke="blue" points="1190.71,-2721.44 1190.65,-2710.84 1184.09,-2719.16 1190.71,-2721.44"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_interaction(). -->
<g id="edge457" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run_interaction().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.09,-4888.79C1256.16,-4885.59 1311.64,-4877.48 1355,-4857.77 1458.94,-4810.5 1560.81,-4718.66 1606.7,-4674.16"/>
<polygon fill="blue" stroke="blue" points="1609.39,-4676.42 1614.09,-4666.93 1604.49,-4671.42 1609.39,-4676.42"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge460" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1204.77,-4872.58C1230.3,-4802.95 1321.08,-4546.13 1355,-4325.77 1359.91,-4293.85 1352.98,-3768.39 1375,-3744.77 1417.06,-3699.65 1488.07,-3695.2 1544.81,-3700.76"/>
<polygon fill="blue" stroke="blue" points="1544.54,-3704.25 1554.86,-3701.86 1545.31,-3697.3 1544.54,-3704.25"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge458" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1202.39,-4872.49C1223.5,-4783.75 1315.18,-4388.82 1355,-4059.77 1359.93,-4019.01 1346.71,-3720.53 1375,-3690.77 1424.46,-3638.75 1512.48,-3641.2 1571.54,-3650.36"/>
<polygon fill="blue" stroke="blue" points="1571.05,-3653.83 1581.49,-3652.01 1572.2,-3646.92 1571.05,-3653.83"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge455" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1197,-4872.76C1197,-4515.12 1197,-4157.48 1197,-3799.85"/>
<polygon fill="blue" stroke="blue" points="1200.5,-3799.8 1197,-3789.8 1193.5,-3799.8 1200.5,-3799.8"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge459" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1224.03,-4894.08C1259.82,-4896.99 1323.37,-4895.94 1355,-4857.77 1389.99,-4815.54 1343.51,-3915.67 1375,-3870.77 1414.13,-3814.99 1489.33,-3790.63 1548.32,-3780"/>
<polygon fill="blue" stroke="blue" points="1549.11,-3783.41 1558.39,-3778.29 1547.94,-3776.51 1549.11,-3783.41"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge456" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 run().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1169.93,-4894.48C1128.68,-4898.39 1052.03,-4898.28 1025,-4848.77 1010.42,-4822.07 1010.42,-3780.47 1025,-3753.77 1048.23,-3711.22 1108.89,-3707.62 1151.56,-3711.01"/>
<polygon fill="blue" stroke="blue" points="1151.43,-3714.52 1161.72,-3711.98 1152.09,-3707.55 1151.43,-3714.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id(). -->
<g id="node186" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().</title>
<g id="a_node186"><a xlink:title="fn test_zero_is_a_valid_prekey_id() &#45;&gt; TestResult { &#160;&#160;&#160;&#160;async { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let mut csprng = OsRng.unwrap_err(); &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let alice_address = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ProtocolAddress::new(&#39; +14151111111&#39; .to_owned(), D...">
<polygon fill="white" stroke="black" points="793,-4611.77 569,-4611.77 569,-4575.77 793,-4575.77 793,-4611.77"/>
<text text-anchor="middle" x="681" y="-4590.07" font-family="Helvetica,sans-Serif" font-size="14.00">test_zero_is_a_valid_prekey_id</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle(). -->
<g id="edge466" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session/process_prekey_bundle().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M793.15,-4599.89C876.84,-4601.81 981.95,-4597.57 1011,-4566.77 1033.93,-4542.45 1034.78,-3396.93 1039,-3363.77 1071.32,-3109.79 1159.32,-2811.54 1187.32,-2720.51"/>
<polygon fill="blue" stroke="blue" points="1190.67,-2721.52 1190.28,-2710.93 1183.99,-2719.45 1190.67,-2721.52"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key(). -->
<g id="edge470" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M793.09,-4599.84C876.76,-4601.73 981.85,-4597.47 1011,-4566.77 1082.18,-4491.8 971.2,-3714.81 1039,-3636.77 1056.77,-3616.31 1083.94,-3607.56 1110.71,-3604.55"/>
<polygon fill="blue" stroke="blue" points="1111.26,-3608.01 1120.93,-3603.66 1110.66,-3601.04 1111.26,-3608.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key(). -->
<g id="edge468" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M793.11,-4599.85C876.78,-4601.75 981.87,-4597.5 1011,-4566.77 1086.25,-4487.39 967.33,-3665.4 1039,-3582.77 1055.96,-3563.22 1081.5,-3554.35 1107.08,-3550.97"/>
<polygon fill="blue" stroke="blue" points="1107.67,-3554.43 1117.25,-3549.9 1106.93,-3547.47 1107.67,-3554.43"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new(). -->
<g id="edge465" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M793.04,-4599.79C876.67,-4601.65 981.75,-4597.38 1011,-4566.77 1069.62,-4505.44 984.14,-3868.48 1039,-3803.77 1068.06,-3769.49 1122.97,-3765.73 1159.53,-3767.62"/>
<polygon fill="blue" stroke="blue" points="1159.56,-3771.14 1169.77,-3768.33 1160.04,-3764.15 1159.56,-3771.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key(). -->
<g id="edge467" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M793.12,-4599.86C876.8,-4601.77 981.9,-4597.52 1011,-4566.77 1090.31,-4482.98 963.47,-3615.98 1039,-3528.77 1061.89,-3502.34 1100.46,-3495.43 1133.64,-3495.2"/>
<polygon fill="blue" stroke="blue" points="1133.7,-3498.71 1143.74,-3495.34 1133.79,-3491.71 1133.7,-3498.71"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt(). -->
<g id="edge469" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 test_zero_is_a_valid_prekey_id().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M793.06,-4599.81C876.7,-4601.68 981.79,-4597.41 1011,-4566.77 1074.06,-4500.62 978.93,-3813.64 1039,-3744.77 1066.3,-3713.47 1115.6,-3709.6 1151.69,-3711.75"/>
<polygon fill="blue" stroke="blue" points="1151.72,-3715.26 1161.96,-3712.54 1152.26,-3708.28 1151.72,-3715.26"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge2" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1711.04,-3733.83C1769.35,-3741.02 1846.71,-3739.03 1891,-3690.77 1930.79,-3647.41 1870.18,-2674.15 1911,-2631.77 1965.82,-2574.86 2543.32,-2606.23 2621,-2591.77 2726.36,-2572.15 2786.5,-2603.73 2850.5,-2517.77 2882.76,-2474.45 2837.2,-1587.9 2871,-1545.77 2885.63,-1527.54 2910.35,-1520.39 2932.71,-1517.98"/>
<polygon fill="blue" stroke="blue" points="2933.08,-1521.46 2942.77,-1517.18 2932.53,-1514.48 2933.08,-1521.46"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="node189" class="node">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<g id="a_node189"><a xlink:title=" &#160;&#160;&#160;fn sign(&amp;mut self, message: &amp;[u8]) &#45;&gt; Box&lt;[u8]&gt; { &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let identity_key_pair = self &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.store &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.get_identity_key_pair() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.now_or_never() &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.expect(&#39; syn...">
<polygon fill="white" stroke="black" points="2297,-3735.77 2243,-3735.77 2243,-3699.77 2297,-3699.77 2297,-3735.77"/>
<text text-anchor="middle" x="2270" y="-3714.07" font-family="Helvetica,sans-Serif" font-size="14.00">sign</text>
</a>
</g>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge1" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1711.23,-3717.77C1849,-3717.77 2132.11,-3717.77 2232.62,-3717.77"/>
<polygon fill="blue" stroke="blue" points="2232.86,-3721.27 2242.86,-3717.77 2232.86,-3714.27 2232.86,-3721.27"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key(). -->
<g id="edge61" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1273.03,-3605.33C1302.19,-3607.62 1333.65,-3615.69 1355,-3636.77 1389.74,-3671.07 1339.15,-3711.63 1375,-3744.77 1420.59,-3786.92 1491.99,-3791.39 1547.97,-3786.6"/>
<polygon fill="blue" stroke="blue" points="1548.62,-3790.05 1558.24,-3785.6 1547.95,-3783.08 1548.62,-3790.05"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge102" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M2283.44,-3699.65C2329,-3633.76 2492.25,-3401.68 2649,-3228.77 2731.67,-3137.57 2798.93,-3150.54 2850.5,-3038.77 2869.66,-2997.25 2867.48,-2673.36 2871,-2627.77 2902.6,-2218.72 2962.88,-1722.66 2978,-1600.8"/>
<polygon fill="blue" stroke="blue" points="2981.48,-1601.15 2979.24,-1590.8 2974.53,-1600.29 2981.48,-1601.15"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature(). -->
<g id="edge140" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[PrivateKey]calculate_signature().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1284.24,-3388.92C1310.6,-3392.08 1337.27,-3400.82 1355,-3420.77 1382.94,-3452.2 1344.48,-3769.83 1375,-3798.77 1492.64,-3910.35 2552.42,-3814.14 2621,-3744.77 2691.13,-3673.83 2601.33,-3384.39 2649,-3296.77 2702.23,-3198.93 2798.4,-3246.21 2850.5,-3147.77 2877.55,-3096.66 2866.85,-2685.44 2871,-2627.77 2900.47,-2218.56 2962.33,-1722.62 2977.89,-1600.79"/>
<polygon fill="blue" stroke="blue" points="2981.37,-1601.16 2979.17,-1590.79 2974.43,-1600.27 2981.37,-1601.16"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge139" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/create_pre_key_bundle().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1221.32,-3375.76C1332.8,-3289.15 1809.33,-2912.79 1891,-2745.77 1912.56,-2701.67 1875.77,-2559.95 1911,-2525.77 1967.72,-2470.73 2549.78,-2517.03 2621,-2482.77 2637.73,-2474.72 2634.09,-2462.83 2649,-2451.77 2728.51,-2392.77 2796.43,-2439.71 2850.5,-2356.77 2899.73,-2281.26 2814.45,-1615.96 2871,-1545.77 2885.67,-1527.57 2910.39,-1520.42 2932.74,-1518.01"/>
<polygon fill="blue" stroke="blue" points="2933.11,-1521.49 2942.8,-1517.2 2932.55,-1514.51 2933.11,-1521.49"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge204" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1652,-3645.64C1701.61,-3594.26 1840.03,-3441.13 1891,-3282.77 1902.6,-3246.74 1884.75,-2629.04 1911,-2601.77 1965.83,-2544.8 2548.42,-2585.14 2621,-2553.77 2636.59,-2547.03 2634.02,-2535.78 2649,-2527.77 2730.18,-2484.35 2792.65,-2551.39 2850.5,-2479.77 2883.11,-2439.39 2838.5,-1586.24 2871,-1545.77 2885.64,-1527.54 2910.36,-1520.4 2932.72,-1517.99"/>
<polygon fill="blue" stroke="blue" points="2933.09,-1521.47 2942.78,-1517.19 2932.53,-1514.49 2933.09,-1521.47"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key(). -->
<g id="edge217" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_signed_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_signed_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1276.67,-3551.65C1304.78,-3554.32 1334.53,-3562.56 1355,-3582.77 1389.74,-3617.07 1339.15,-3657.63 1375,-3690.77 1419.66,-3732.06 1489.09,-3737.19 1544.53,-3732.88"/>
<polygon fill="blue" stroke="blue" points="1545.06,-3736.34 1554.71,-3731.97 1544.44,-3729.37 1545.06,-3736.34"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge268" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]new().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1200.99,-3789.84C1212.06,-3851.18 1256.43,-4053.5 1375,-4160.77 1554.58,-4323.23 1726.4,-4158.14 1891,-4335.77 2100.2,-4561.53 2241.57,-5596.99 2265.42,-5782.33"/>
<polygon fill="blue" stroke="blue" points="2261.97,-5782.91 2266.71,-5792.38 2268.91,-5782.02 2261.97,-5782.91"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign(). -->
<g id="edge273" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_kyber_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]sign().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1707.77,-3765.5C1844.29,-3753.89 2131.61,-3729.45 2232.8,-3720.85"/>
<polygon fill="blue" stroke="blue" points="2233.16,-3724.33 2242.83,-3719.99 2232.57,-3717.35 2233.16,-3724.33"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge327" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/test_in_memory_protocol_store().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1312.33,-3448.14C1328.73,-3453.24 1343.82,-3461.59 1355,-3474.77 1407.27,-3536.36 1317.68,-6325.85 1375,-6382.77 1395.34,-6402.97 1870.36,-6402.66 1891,-6382.77 1934.63,-6340.71 1868.99,-5881.44 1911,-5837.77 1991.03,-5754.59 2142.61,-5777.62 2220.35,-5796.73"/>
<polygon fill="blue" stroke="blue" points="2219.8,-5800.2 2230.36,-5799.27 2221.52,-5793.42 2219.8,-5800.2"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key(). -->
<g id="edge356" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]with_pre_key().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/impl#[TestStoreBuilder]add_pre_key().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1250.15,-3506.98C1281.14,-3511 1320.91,-3517.78 1355,-3528.77 1444.1,-3557.5 1540.82,-3610.03 1593.11,-3640.4"/>
<polygon fill="blue" stroke="blue" points="1591.64,-3643.59 1602.04,-3645.62 1595.17,-3637.55 1591.64,-3643.59"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt(). -->
<g id="edge367" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/decrypt().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 session_cipher/message_decrypt().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1161.83,-3712.43C1125.3,-3708.89 1068.65,-3710.08 1039,-3744.77 1002.26,-3787.77 1022.01,-5725.29 1011,-5780.77 945.27,-6111.84 752.56,-6480.1 697.09,-6581.61"/>
<polygon fill="blue" stroke="blue" points="693.91,-6580.14 692.16,-6590.59 700.04,-6583.51 693.91,-6580.14"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate(). -->
<g id="edge370" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;core 0.1.0 curve/impl#[KeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1279.06,-3660.54C1304.63,-3656.79 1332.14,-3649.73 1355,-3636.77 1673.05,-3456.47 1756.54,-3352.75 1891,-3012.77 1909.77,-2965.3 1875.03,-2589.99 1911,-2553.77 1966.66,-2497.72 2551.42,-2555.17 2621,-2517.77 2639.48,-2507.84 2631.89,-2491.91 2649,-2479.77 2725.42,-2425.55 2793.95,-2492.48 2850.5,-2417.77 2879.74,-2379.13 2840.63,-1583.53 2871,-1545.77 2885.65,-1527.55 2910.38,-1520.41 2932.73,-1517.99"/>
<polygon fill="blue" stroke="blue" points="2933.1,-1521.48 2942.79,-1517.2 2932.54,-1514.5 2933.1,-1521.48"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate(). -->
<g id="edge371" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 identity_key/impl#[IdentityKeyPair]generate().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1279.39,-3658.34C1307.31,-3660.97 1336.22,-3669.53 1355,-3690.77 1385.95,-3725.77 1342.78,-4076.93 1375,-4110.77 1454.44,-4194.2 1804.47,-4084.71 1891,-4160.77 2149.74,-4388.2 2251.6,-5582.89 2266.91,-5782.48"/>
<polygon fill="blue" stroke="blue" points="2263.44,-5783.01 2267.69,-5792.72 2270.42,-5782.48 2263.44,-5783.01"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record(). -->
<g id="edge373" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_bob_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1279.02,-3659.1C1306.72,-3661.85 1335.59,-3670.3 1355,-3690.77 1407.34,-3745.98 1324.8,-3803.6 1375,-3860.77 1531.04,-4038.49 1675.91,-3892.45 1891,-3990.77 1900.87,-3995.28 1900.81,-4001.05 1911,-4004.77 1988.1,-4032.91 2080.48,-4040.58 2152.09,-4041.39"/>
<polygon fill="blue" stroke="blue" points="2152.47,-4044.89 2162.49,-4041.46 2152.52,-4037.89 2152.47,-4044.89"/>
</g>
<!-- rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record(). -->
<g id="edge372" class="edge">
<title>rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 support/initialize_sessions_v4().&#45;&gt;rust&#45;analyzer cargo libsignal&#45;protocol 0.1.0 ratchet/initialize_alice_session_record().</title>
<path fill="none" stroke="blue" stroke-dasharray="5,2" d="M1279.02,-3658.68C1306.9,-3661.34 1335.88,-3669.84 1355,-3690.77 1392.44,-3731.75 1337.53,-3898.81 1375,-3939.77 1532.04,-4111.41 1701.16,-3893.29 1891,-4027.77 1905.94,-4038.35 1895.59,-4053.9 1911,-4063.77 1980.81,-4108.47 2074.71,-4114.01 2148.82,-4109.02"/>
<polygon fill="blue" stroke="blue" points="2149.44,-4112.48 2159.15,-4108.25 2148.91,-4105.5 2149.44,-4112.48"/>
</g>
</g>
</svg>
