digraph function_subgraph {
  rankdir=LR;
  node [shape=box, style=filled, fontname=Helvetica];
  edge [color=gray];

  subgraph cluster_0 {
    label = "mod.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." [label="vartime_double_base_mul", tooltip="pub fn vartime_double_base_mul(a: &Scalar, A: &EdwardsPoint, b: &Scalar) -> EdwardsPoint {     match get_selected_backend() {         #[cfg(curve25519_dalek_backend = ' simd' )]         BackendKind::A...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_1 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[CachedPoint][`From<ExtendedPoint>`]from()." [label="from", tooltip="    fn from(P: ExtendedPoint) -> CachedPoint {         let mut x = P.0;          x = x.blend(x.diff_sum(), Lanes::AB);         // x = (Y2 - X2, Y2 + X2, Z2, T2) = (S2 S3 Z2 T2)          x = x * (12166...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[`NafLookupTable5<CachedPoint>`][`From<&crate::EdwardsPoint>`]from()." [label="from", tooltip="    fn from(point: &edwards::EdwardsPoint) -> Self {         let A = ExtendedPoint::from(*point);         let mut Ai = [CachedPoint::from(A); 8];         let A2 = A.double();         for i in 0..7 {  ...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[ExtendedPoint]double()." [label="double", tooltip="    pub fn double(&self) -> ExtendedPoint {         // Want to compute (X1 Y1 Z1 X1+Y1).         // Not sure how to do this less expensively than computing         // (X1 Y1 Z1 T1) --(256bit shuffle)-...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_2 {
    label = "field.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/field/impl#[FieldElement2625x4]diff_sum()." [label="diff_sum", tooltip="    pub fn diff_sum(&self) -> FieldElement2625x4 {         // tmp1 = (B, A, D, C)         let tmp1 = self.shuffle(Shuffle::BADC);         // tmp2 = (-A, B, -C, D)         let tmp2 = self.blend(self.ne...", fillcolor=lightgray, style="filled,dotted"]
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/field/impl#[FieldElement2625x4]negate_lazy()." [label="negate_lazy", tooltip="    pub fn negate_lazy(&self) -> FieldElement2625x4 {         // The limbs of self are bounded with b < 0.999, while the         // smallest limb of 2*p is 67108845 > 2^{26+0.9999}, so         // unde...", fillcolor=green, style="filled,dotted"]
  }
  subgraph cluster_3 {
    label = "vartime_double_base.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/scalar_mul/vartime_double_base/spec_avx2/mul()." [label="mul", tooltip="    pub fn mul(a: &Scalar, A: &EdwardsPoint, b: &Scalar) -> EdwardsPoint {         let a_naf = a.non_adjacent_form(5);          #[cfg(feature = ' precomputed-tables' )]         let b_naf = b.non_adjac...", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_4 {
    label = "edwards.rs";
    style=filled;
    color=lightgrey;
    style="filled,dotted";
    fontname=Helvetica;
    "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [label="vartime_double_scalar_mul_basepoint", tooltip="    pub fn vartime_double_scalar_mul_basepoint(         a: &Scalar,         A: &EdwardsPoint,         b: &Scalar,     ) -> EdwardsPoint {         crate::backend::vartime_double_base_mul(a, A, b)     }", fillcolor=lightgray, style="filled,dotted"]
  }
  subgraph cluster_5 {
    label = "curve25519.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." [label="verify_signature", tooltip="    pub fn verify_signature(         their_public_key: &[u8; PUBLIC_KEY_LENGTH],         message: &[&[u8]],         signature: &[u8; SIGNATURE_LENGTH],     ) -> bool {         let mont_point = Montgom...", fillcolor=white, style="filled"]
  }
  subgraph cluster_6 {
    label = "vrf.rs";
    style=filled;
    color=lightblue;
    fontname=Helvetica;
    "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." [label="proof_to_hash", tooltip="    pub fn proof_to_hash(&self, m: &[u8], proof: &[u8; 80]) -> Result<[u8; 32]> {         // Decode proof into its component parts: gamma, c, and s.         let gamma = CompressedEdwardsY(proof[..32]....", fillcolor=white, style="filled"]
  }

  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/scalar_mul/vartime_double_base/spec_avx2/mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[`NafLookupTable5<CachedPoint>`][`From<&crate::EdwardsPoint>`]from()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/scalar_mul/vartime_double_base/spec_avx2/mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[ExtendedPoint]double()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[CachedPoint][`From<ExtendedPoint>`]from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/field/impl#[FieldElement2625x4]diff_sum()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/field/impl#[FieldElement2625x4]diff_sum()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/field/impl#[FieldElement2625x4]negate_lazy()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[`NafLookupTable5<CachedPoint>`][`From<&crate::EdwardsPoint>`]from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[ExtendedPoint]double()." [color=gray, style=dashed]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[`NafLookupTable5<CachedPoint>`][`From<&crate::EdwardsPoint>`]from()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[CachedPoint][`From<ExtendedPoint>`]from()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-keytrans 0.0.1 vrf/impl#[PublicKey]proof_to_hash()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/edwards/impl#[ExtendedPoint]double()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/avx2/field/impl#[FieldElement2625x4]negate_lazy()." [color=gray, style=dashed]
  "rust-analyzer cargo libsignal-core 0.1.0 curve/curve25519/impl#[PrivateKey]verify_signature()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 edwards/impl#[EdwardsPoint]vartime_double_scalar_mul_basepoint()." [color=blue]
  "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vartime_double_base_mul()." -> "rust-analyzer cargo curve25519-dalek 4.1.3 backend/vector/scalar_mul/vartime_double_base/spec_avx2/mul()." [color=gray, style=dashed]
}
